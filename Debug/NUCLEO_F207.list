
NUCLEO_F207.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003680  0801b708  0801b708  0002b708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ed88  0801ed88  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  0801ed88  0801ed88  0002ed88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ed90  0801ed90  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ed90  0801ed90  0002ed90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ed94  0801ed94  0002ed94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0801ed98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d59c  20000220  0801efb8  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d7bc  0801efb8  0003d7bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003c3d3  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009929  00000000  00000000  0006c61c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c00  00000000  00000000  00075f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002958  00000000  00000000  00078b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038cf9  00000000  00000000  0007b4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000448e2  00000000  00000000  000b4199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0a3c  00000000  00000000  000f8a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e94b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be64  00000000  00000000  001e9508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b6f0 	.word	0x0801b6f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0801b6f0 	.word	0x0801b6f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b976 	b.w	80004f8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	4688      	mov	r8, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	d14d      	bne.n	80002d0 <__udivmoddi4+0xac>
 8000234:	428a      	cmp	r2, r1
 8000236:	4694      	mov	ip, r2
 8000238:	d968      	bls.n	800030c <__udivmoddi4+0xe8>
 800023a:	fab2 f282 	clz	r2, r2
 800023e:	b152      	cbz	r2, 8000256 <__udivmoddi4+0x32>
 8000240:	fa01 f302 	lsl.w	r3, r1, r2
 8000244:	f1c2 0120 	rsb	r1, r2, #32
 8000248:	fa20 f101 	lsr.w	r1, r0, r1
 800024c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000250:	ea41 0803 	orr.w	r8, r1, r3
 8000254:	4094      	lsls	r4, r2
 8000256:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800025a:	fbb8 f7f1 	udiv	r7, r8, r1
 800025e:	fa1f fe8c 	uxth.w	lr, ip
 8000262:	fb01 8817 	mls	r8, r1, r7, r8
 8000266:	fb07 f00e 	mul.w	r0, r7, lr
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	4298      	cmp	r0, r3
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x66>
 8000274:	eb1c 0303 	adds.w	r3, ip, r3
 8000278:	f107 35ff 	add.w	r5, r7, #4294967295
 800027c:	f080 811e 	bcs.w	80004bc <__udivmoddi4+0x298>
 8000280:	4298      	cmp	r0, r3
 8000282:	f240 811b 	bls.w	80004bc <__udivmoddi4+0x298>
 8000286:	3f02      	subs	r7, #2
 8000288:	4463      	add	r3, ip
 800028a:	1a1b      	subs	r3, r3, r0
 800028c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000290:	fb01 3310 	mls	r3, r1, r0, r3
 8000294:	fb00 fe0e 	mul.w	lr, r0, lr
 8000298:	b2a4      	uxth	r4, r4
 800029a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029e:	45a6      	cmp	lr, r4
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x94>
 80002a2:	eb1c 0404 	adds.w	r4, ip, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8109 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8106 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b4:	4464      	add	r4, ip
 80002b6:	3802      	subs	r0, #2
 80002b8:	2100      	movs	r1, #0
 80002ba:	eba4 040e 	sub.w	r4, r4, lr
 80002be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa8>
 80002c4:	2300      	movs	r3, #0
 80002c6:	40d4      	lsrs	r4, r2
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d908      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	f000 80ee 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002da:	2100      	movs	r1, #0
 80002dc:	e9c6 0500 	strd	r0, r5, [r6]
 80002e0:	4608      	mov	r0, r1
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fc 	bhi.w	80004f0 <__udivmoddi4+0x2cc>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0303 	sbc.w	r3, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	4698      	mov	r8, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d0e2      	beq.n	80002cc <__udivmoddi4+0xa8>
 8000306:	e9c6 4800 	strd	r4, r8, [r6]
 800030a:	e7df      	b.n	80002cc <__udivmoddi4+0xa8>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8091 	bne.w	800043c <__udivmoddi4+0x218>
 800031a:	eba1 000c 	sub.w	r0, r1, ip
 800031e:	2101      	movs	r1, #1
 8000320:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000324:	fa1f fe8c 	uxth.w	lr, ip
 8000328:	fbb0 f3f7 	udiv	r3, r0, r7
 800032c:	fb07 0013 	mls	r0, r7, r3, r0
 8000330:	0c25      	lsrs	r5, r4, #16
 8000332:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	42a8      	cmp	r0, r5
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0505 	adds.w	r5, ip, r5
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	42a8      	cmp	r0, r5
 800034a:	f200 80ce 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 800034e:	4643      	mov	r3, r8
 8000350:	1a2d      	subs	r5, r5, r0
 8000352:	fbb5 f0f7 	udiv	r0, r5, r7
 8000356:	fb07 5510 	mls	r5, r7, r0, r5
 800035a:	fb0e fe00 	mul.w	lr, lr, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80b6 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 8000378:	4628      	mov	r0, r5
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79e      	b.n	80002c2 <__udivmoddi4+0x9e>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa25 fa07 	lsr.w	sl, r5, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fbba f8f9 	udiv	r8, sl, r9
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	fb09 aa18 	mls	sl, r9, r8, sl
 80003a6:	408d      	lsls	r5, r1
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	431d      	orrs	r5, r3
 80003ae:	fa00 f301 	lsl.w	r3, r0, r1
 80003b2:	fb08 f00e 	mul.w	r0, r8, lr
 80003b6:	0c2c      	lsrs	r4, r5, #16
 80003b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003bc:	42a0      	cmp	r0, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	42a0      	cmp	r0, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1a24      	subs	r4, r4, r0
 80003de:	fbb4 f0f9 	udiv	r0, r4, r9
 80003e2:	fb09 4410 	mls	r4, r9, r0, r4
 80003e6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9502 	umull	r9, r5, r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2d0>
 8000420:	ebb3 0208 	subs.w	r2, r3, r8
 8000424:	eb64 040e 	sbc.w	r4, r4, lr
 8000428:	fa22 f301 	lsr.w	r3, r2, r1
 800042c:	fa04 f707 	lsl.w	r7, r4, r7
 8000430:	431f      	orrs	r7, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	2100      	movs	r1, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa8>
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	f1c2 0120 	rsb	r1, r2, #32
 8000444:	fa25 f301 	lsr.w	r3, r5, r1
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa20 f101 	lsr.w	r1, r0, r1
 8000450:	4095      	lsls	r5, r2
 8000452:	430d      	orrs	r5, r1
 8000454:	fbb3 f1f7 	udiv	r1, r3, r7
 8000458:	fb07 3311 	mls	r3, r7, r1, r3
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	0c28      	lsrs	r0, r5, #16
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	fb01 f30e 	mul.w	r3, r1, lr
 800046a:	4283      	cmp	r3, r0
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0000 	adds.w	r0, ip, r0
 8000476:	f101 38ff 	add.w	r8, r1, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	4283      	cmp	r3, r0
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3902      	subs	r1, #2
 8000482:	4460      	add	r0, ip
 8000484:	1ac0      	subs	r0, r0, r3
 8000486:	fbb0 f3f7 	udiv	r3, r0, r7
 800048a:	fb07 0013 	mls	r0, r7, r3, r0
 800048e:	b2ad      	uxth	r5, r5
 8000490:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000494:	fb03 f00e 	mul.w	r0, r3, lr
 8000498:	42a8      	cmp	r0, r5
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0505 	adds.w	r5, ip, r5
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	42a8      	cmp	r0, r5
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4465      	add	r5, ip
 80004ae:	1a28      	subs	r0, r5, r0
 80004b0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e707      	b.n	80002cc <__udivmoddi4+0xa8>
 80004bc:	462f      	mov	r7, r5
 80004be:	e6e4      	b.n	800028a <__udivmoddi4+0x66>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f9      	b.n	80002b8 <__udivmoddi4+0x94>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4643      	mov	r3, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4628      	mov	r0, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4641      	mov	r1, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	4464      	add	r4, ip
 80004e6:	3802      	subs	r0, #2
 80004e8:	e747      	b.n	800037a <__udivmoddi4+0x156>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	4465      	add	r5, ip
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x12c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e706      	b.n	8000302 <__udivmoddi4+0xde>
 80004f4:	4631      	mov	r1, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa8>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000500:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_CAN1_Init+0x60>)
 8000502:	4a17      	ldr	r2, [pc, #92]	; (8000560 <MX_CAN1_Init+0x64>)
 8000504:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_CAN1_Init+0x60>)
 8000508:	2210      	movs	r2, #16
 800050a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <MX_CAN1_Init+0x60>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_CAN1_Init+0x60>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000518:	4b10      	ldr	r3, [pc, #64]	; (800055c <MX_CAN1_Init+0x60>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_CAN1_Init+0x60>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <MX_CAN1_Init+0x60>)
 8000526:	2200      	movs	r2, #0
 8000528:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_CAN1_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <MX_CAN1_Init+0x60>)
 8000532:	2200      	movs	r2, #0
 8000534:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_CAN1_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <MX_CAN1_Init+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_CAN1_Init+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <MX_CAN1_Init+0x60>)
 800054a:	f001 fb3b 	bl	8001bc4 <HAL_CAN_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000554:	f000 feb2 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000523c 	.word	0x2000523c
 8000560:	40006400 	.word	0x40006400

08000564 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <HAL_CAN_MspInit+0x84>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d12b      	bne.n	80005de <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_CAN_MspInit+0x88>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_CAN_MspInit+0x88>)
 8000590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000594:	6413      	str	r3, [r2, #64]	; 0x40
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_CAN_MspInit+0x88>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_CAN_MspInit+0x88>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <HAL_CAN_MspInit+0x88>)
 80005ac:	f043 0308 	orr.w	r3, r3, #8
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_CAN_MspInit+0x88>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0308 	and.w	r3, r3, #8
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005be:	2303      	movs	r3, #3
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005ce:	2309      	movs	r3, #9
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <HAL_CAN_MspInit+0x8c>)
 80005da:	f002 fe41 	bl	8003260 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40006400 	.word	0x40006400
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020c00 	.word	0x40020c00

080005f4 <LedCGIhandler>:
// [* SSI #3 *]
char const *theSSItags[numSSItags] = { "tag1", "tag2", "w1", "w2","w3","w4","w5","w6","w7"};

// the actual function for handling CGI [= CGI #5 =]
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[],
char *pcValue[]) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
	if (iIndex == 0) {
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d110      	bne.n	800062e <LedCGIhandler+0x3a>
		//turning the LED lights off
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	4829      	ldr	r0, [pc, #164]	; (80006b8 <LedCGIhandler+0xc4>)
 8000612:	f002 ffc3 	bl	800359c <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD2ON = false;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <LedCGIhandler+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000622:	4825      	ldr	r0, [pc, #148]	; (80006b8 <LedCGIhandler+0xc4>)
 8000624:	f002 ffba 	bl	800359c <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD* LED on the board is not ON
		LD1ON = false;
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <LedCGIhandler+0xcc>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < iNumParams; i++) {
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e038      	b.n	80006a6 <LedCGIhandler+0xb2>
		if (strcmp(pcParam[i], "led") == 0) {
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4921      	ldr	r1, [pc, #132]	; (80006c4 <LedCGIhandler+0xd0>)
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdc5 	bl	80001d0 <strcmp>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d129      	bne.n	80006a0 <LedCGIhandler+0xac>
			if (strcmp(pcValue[i], "1") == 0) {
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	683a      	ldr	r2, [r7, #0]
 8000652:	4413      	add	r3, r2
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	491c      	ldr	r1, [pc, #112]	; (80006c8 <LedCGIhandler+0xd4>)
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fdb9 	bl	80001d0 <strcmp>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d109      	bne.n	8000678 <LedCGIhandler+0x84>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800066a:	4813      	ldr	r0, [pc, #76]	; (80006b8 <LedCGIhandler+0xc4>)
 800066c:	f002 ff96 	bl	800359c <HAL_GPIO_WritePin>
				// LD3 LED (red) on the board is ON!
				LD1ON = true;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <LedCGIhandler+0xcc>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e013      	b.n	80006a0 <LedCGIhandler+0xac>
			} else if (strcmp(pcValue[i], "2") == 0) {
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	4413      	add	r3, r2
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4912      	ldr	r1, [pc, #72]	; (80006cc <LedCGIhandler+0xd8>)
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fda3 	bl	80001d0 <strcmp>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d107      	bne.n	80006a0 <LedCGIhandler+0xac>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <LedCGIhandler+0xc4>)
 8000696:	f002 ff81 	bl	800359c <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD2ON = true;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <LedCGIhandler+0xc8>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iNumParams; i++) {
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	3301      	adds	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d3c2      	bcc.n	8000634 <LedCGIhandler+0x40>
			}
		}
	}
	// the extension .shtml for SSI to work
	return "/index.shtml";
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <LedCGIhandler+0xdc>)
} // END [= CGI #5 =]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40020400 	.word	0x40020400
 80006bc:	2000023d 	.word	0x2000023d
 80006c0:	2000023c 	.word	0x2000023c
 80006c4:	0801b768 	.word	0x0801b768
 80006c8:	0801b76c 	.word	0x0801b76c
 80006cc:	0801b770 	.word	0x0801b770
 80006d0:	0801b774 	.word	0x0801b774

080006d4 <myCGIinit>:

// function to initialize CGI [= CGI #6 =]
void myCGIinit(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	//add LED control CGI to the table
	theCGItable[0] = LedCGI;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <myCGIinit+0x1c>)
 80006da:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <myCGIinit+0x20>)
 80006dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e0:	e883 0003 	stmia.w	r3, {r0, r1}
	//give the table to the HTTP server
	http_set_cgi_handlers(theCGItable, 1);
 80006e4:	2101      	movs	r1, #1
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <myCGIinit+0x1c>)
 80006e8:	f00d fe6a 	bl	800e3c0 <http_set_cgi_handlers>
} // END [= CGI #6 =]
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20005464 	.word	0x20005464
 80006f4:	0801e0e4 	.word	0x0801e0e4

080006f8 <mySSIHandler>:

// the actual function for SSI [* SSI #4 *]
u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b092      	sub	sp, #72	; 0x48
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	if (iIndex == 0) {
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d142      	bne.n	8000790 <mySSIHandler+0x98>
		if (LD1ON == false) {
 800070a:	4b59      	ldr	r3, [pc, #356]	; (8000870 <mySSIHandler+0x178>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	f083 0301 	eor.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d019      	beq.n	800074c <mySSIHandler+0x54>
			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\">";
 8000718:	4b56      	ldr	r3, [pc, #344]	; (8000874 <mySSIHandler+0x17c>)
 800071a:	f107 0410 	add.w	r4, r7, #16
 800071e:	461d      	mov	r5, r3
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800072c:	c407      	stmia	r4!, {r0, r1, r2}
 800072e:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr1);
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	4619      	mov	r1, r3
 8000736:	68b8      	ldr	r0, [r7, #8]
 8000738:	f01a f8a8 	bl	801a88c <strcpy>
			return strlen(myStr1);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd4f 	bl	80001e4 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29b      	uxth	r3, r3
 800074a:	e08c      	b.n	8000866 <mySSIHandler+0x16e>
		} else if (LD1ON == true) {
 800074c:	4b48      	ldr	r3, [pc, #288]	; (8000870 <mySSIHandler+0x178>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	f000 8087 	beq.w	8000864 <mySSIHandler+0x16c>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\" checked>";
 8000756:	4b48      	ldr	r3, [pc, #288]	; (8000878 <mySSIHandler+0x180>)
 8000758:	f107 0410 	add.w	r4, r7, #16
 800075c:	461d      	mov	r5, r3
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800076e:	6020      	str	r0, [r4, #0]
 8000770:	3404      	adds	r4, #4
 8000772:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr1);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	68b8      	ldr	r0, [r7, #8]
 800077c:	f01a f886 	bl	801a88c <strcpy>
			return strlen(myStr1);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd2d 	bl	80001e4 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	b29b      	uxth	r3, r3
 800078e:	e06a      	b.n	8000866 <mySSIHandler+0x16e>
		}
	} else if (iIndex == 1) {
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d141      	bne.n	800081a <mySSIHandler+0x122>
		if (LD2ON == false) {
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <mySSIHandler+0x184>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	f083 0301 	eor.w	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d019      	beq.n	80007d8 <mySSIHandler+0xe0>
			char myStr2[] = "<input value=\"2\" name=\"led\" type=\"checkbox\">";
 80007a4:	4b36      	ldr	r3, [pc, #216]	; (8000880 <mySSIHandler+0x188>)
 80007a6:	f107 0410 	add.w	r4, r7, #16
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007b8:	c407      	stmia	r4!, {r0, r1, r2}
 80007ba:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr2);
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4619      	mov	r1, r3
 80007c2:	68b8      	ldr	r0, [r7, #8]
 80007c4:	f01a f862 	bl	801a88c <strcpy>
			return strlen(myStr2);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fd09 	bl	80001e4 <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	e046      	b.n	8000866 <mySSIHandler+0x16e>
		} else if (LD2ON == true) {
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <mySSIHandler+0x184>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d041      	beq.n	8000864 <mySSIHandler+0x16c>
			// since the LD2 blue LED on the board is ON we make its checkbox checked!
			char myStr2[] =  "<input value=\"2\" name=\"led\" type=\"checkbox\" checked>";
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <mySSIHandler+0x18c>)
 80007e2:	f107 0410 	add.w	r4, r7, #16
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f8:	6020      	str	r0, [r4, #0]
 80007fa:	3404      	adds	r4, #4
 80007fc:	7021      	strb	r1, [r4, #0]
			strcpy(pcInsert, myStr2);
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	4619      	mov	r1, r3
 8000804:	68b8      	ldr	r0, [r7, #8]
 8000806:	f01a f841 	bl	801a88c <strcpy>
			return strlen(myStr2);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fce8 	bl	80001e4 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29b      	uxth	r3, r3
 8000818:	e025      	b.n	8000866 <mySSIHandler+0x16e>
		}
	} else if (iIndex <10 ) {
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b09      	cmp	r3, #9
 800081e:	dc21      	bgt.n	8000864 <mySSIHandler+0x16c>
		uint8_t i = ILinia(iIndex - 2);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3b02      	subs	r3, #2
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fb23 	bl	8000e70 <ILinia>
 800082a:	4603      	mov	r3, r0
 800082c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		strcpy(pcInsert, linia[i]);
 8000830:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <mySSIHandler+0x190>)
 800083e:	4413      	add	r3, r2
 8000840:	4619      	mov	r1, r3
 8000842:	68b8      	ldr	r0, [r7, #8]
 8000844:	f01a f822 	bl	801a88c <strcpy>
		return strlen(linia[i]);
 8000848:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <mySSIHandler+0x190>)
 8000856:	4413      	add	r3, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fcc3 	bl	80001e4 <strlen>
 800085e:	4603      	mov	r3, r0
 8000860:	b29b      	uxth	r3, r3
 8000862:	e000      	b.n	8000866 <mySSIHandler+0x16e>
	}
	return 0;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3748      	adds	r7, #72	; 0x48
 800086a:	46bd      	mov	sp, r7
 800086c:	bdb0      	pop	{r4, r5, r7, pc}
 800086e:	bf00      	nop
 8000870:	2000023c 	.word	0x2000023c
 8000874:	0801b784 	.word	0x0801b784
 8000878:	0801b7b4 	.word	0x0801b7b4
 800087c:	2000023d 	.word	0x2000023d
 8000880:	0801b7ec 	.word	0x0801b7ec
 8000884:	0801b81c 	.word	0x0801b81c
 8000888:	2000546c 	.word	0x2000546c

0800088c <mySSIinit>:

// function to initialize SSI [* SSI #5 *]
void mySSIinit(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,
 8000890:	2209      	movs	r2, #9
 8000892:	4903      	ldr	r1, [pc, #12]	; (80008a0 <mySSIinit+0x14>)
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <mySSIinit+0x18>)
 8000896:	f00d fd51 	bl	800e33c <http_set_ssi_handler>
	numSSItags);
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000000 	.word	0x20000000
 80008a4:	080006f9 	.word	0x080006f9

080008a8 <mqtt_sub_request_cb>:

mqtt_client_t mqtt_client;

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  char s[30];
  sprintf(s, "Sub result: %d", result);
 80008b4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4906      	ldr	r1, [pc, #24]	; (80008d8 <mqtt_sub_request_cb+0x30>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f019 ff74 	bl	801a7ac <siprintf>
  printLCD(s);
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 faef 	bl	8000eac <printLCD>
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	0801b854 	.word	0x0801b854

080008dc <mqtt_incoming_publish_cb>:

static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  char s[30];
  sprintf(s, "in: %s %u", topic, (unsigned int)tot_len);
 80008e8:	f107 0010 	add.w	r0, r7, #16
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	4905      	ldr	r1, [pc, #20]	; (8000908 <mqtt_incoming_publish_cb+0x2c>)
 80008f2:	f019 ff5b 	bl	801a7ac <siprintf>
  printLCD(s);
 80008f6:	f107 0310 	add.w	r3, r7, #16
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fad6 	bl	8000eac <printLCD>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	0801b864 	.word	0x0801b864

0800090c <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b098      	sub	sp, #96	; 0x60
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	4611      	mov	r1, r2
 8000918:	461a      	mov	r2, r3
 800091a:	460b      	mov	r3, r1
 800091c:	80fb      	strh	r3, [r7, #6]
 800091e:	4613      	mov	r3, r2
 8000920:	717b      	strb	r3, [r7, #5]

  char s1[40];
  char s2[40];
  strncpy(s1, data, len);//  sprintf(s,"data: %s", (const char *)data);
 8000922:	88fa      	ldrh	r2, [r7, #6]
 8000924:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	4618      	mov	r0, r3
 800092c:	f019 ffca 	bl	801a8c4 <strncpy>
  s1[len] = '\0';
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	3360      	adds	r3, #96	; 0x60
 8000934:	443b      	add	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	f803 2c28 	strb.w	r2, [r3, #-40]
  sprintf(s2,"data: %s", s1);
 800093c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <mqtt_incoming_data_cb+0x54>)
 8000946:	4618      	mov	r0, r3
 8000948:	f019 ff30 	bl	801a7ac <siprintf>
  printLCD(s2);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4618      	mov	r0, r3
 8000952:	f000 faab 	bl	8000eac <printLCD>
    /* Last fragment of payload received (or whole part if payload fits receive buffer
       See MQTT_VAR_HEADER_BUFFER_LEN)  */

    /* Call function or do action depending on reference, in this case inpub_id */
  }
}
 8000956:	bf00      	nop
 8000958:	3760      	adds	r7, #96	; 0x60
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	0801b870 	.word	0x0801b870

08000964 <mqtt_connection_cb>:



static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af02      	add	r7, sp, #8
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	4613      	mov	r3, r2
 8000970:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d124      	bne.n	80009c2 <mqtt_connection_cb+0x5e>
//    printf("mqtt_connection_cb: Successfully connected\n");

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <mqtt_connection_cb+0x70>)
 800097c:	4916      	ldr	r1, [pc, #88]	; (80009d8 <mqtt_connection_cb+0x74>)
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f00e feec 	bl	800f75c <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "DataSoft/stm32/#", 1, mqtt_sub_request_cb, arg);
 8000984:	2301      	movs	r3, #1
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <mqtt_connection_cb+0x78>)
 800098e:	2201      	movs	r2, #1
 8000990:	4913      	ldr	r1, [pc, #76]	; (80009e0 <mqtt_connection_cb+0x7c>)
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f00e fe0e 	bl	800f5b4 <mqtt_sub_unsub>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if(err != ERR_OK) {
 800099e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d011      	beq.n	80009ca <mqtt_connection_cb+0x66>
    	char s[30];
		sprintf(s, "m_sub ret: %d", err);
 80009a6:	f997 202f 	ldrsb.w	r2, [r7, #47]	; 0x2f
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <mqtt_connection_cb+0x80>)
 80009b0:	4618      	mov	r0, r3
 80009b2:	f019 fefb 	bl	801a7ac <siprintf>
    	printLCD(s);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fa76 	bl	8000eac <printLCD>
//    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client, "DataSoft/stm32");
  }
}
 80009c0:	e003      	b.n	80009ca <mqtt_connection_cb+0x66>
    example_do_connect(client, "DataSoft/stm32");
 80009c2:	4909      	ldr	r1, [pc, #36]	; (80009e8 <mqtt_connection_cb+0x84>)
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 f811 	bl	80009ec <example_do_connect>
}
 80009ca:	bf00      	nop
 80009cc:	3730      	adds	r7, #48	; 0x30
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	0800090d 	.word	0x0800090d
 80009d8:	080008dd 	.word	0x080008dd
 80009dc:	080008a9 	.word	0x080008a9
 80009e0:	0801b87c 	.word	0x0801b87c
 80009e4:	0801b890 	.word	0x0801b890
 80009e8:	0801b8a0 	.word	0x0801b8a0

080009ec <example_do_connect>:



void example_do_connect(mqtt_client_t *client, const char *topic)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b09e      	sub	sp, #120	; 0x78
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 80009f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009fa:	221c      	movs	r2, #28
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f019 fd5e 	bl	801a4c0 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "stm32";
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <example_do_connect+0x84>)
 8000a06:	653b      	str	r3, [r7, #80]	; 0x50
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */
  ip_addr_t mqttServerIP;
  IP4_ADDR(&mqttServerIP, 192, 168, 1, 111);
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <example_do_connect+0x88>)
 8000a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
//  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, 0, &ci);
  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, &topic, &ci);
 8000a0c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000a10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	463b      	mov	r3, r7
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <example_do_connect+0x8c>)
 8000a1c:	f240 725b 	movw	r2, #1883	; 0x75b
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f00e febf 	bl	800f7a4 <mqtt_client_connect>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* For now just print the result code if something goes wrong */
  if(err != ERR_OK) {
 8000a2c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00d      	beq.n	8000a50 <example_do_connect+0x64>
	  char s[30];
      sprintf(s, "MQTT Con. error %d", err);
 8000a34:	f997 206f 	ldrsb.w	r2, [r7, #111]	; 0x6f
 8000a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3c:	490f      	ldr	r1, [pc, #60]	; (8000a7c <example_do_connect+0x90>)
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f019 feb4 	bl	801a7ac <siprintf>
	  printLCD(s);
 8000a44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fa2f 	bl	8000eac <printLCD>
  } else {
	  char s[30];
	  sprintf(s, "MQTT Connected");
	  printLCD(s);
	}
}
 8000a4e:	e00a      	b.n	8000a66 <example_do_connect+0x7a>
	  sprintf(s, "MQTT Connected");
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	490a      	ldr	r1, [pc, #40]	; (8000a80 <example_do_connect+0x94>)
 8000a56:	4618      	mov	r0, r3
 8000a58:	f019 fea8 	bl	801a7ac <siprintf>
	  printLCD(s);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fa23 	bl	8000eac <printLCD>
}
 8000a66:	bf00      	nop
 8000a68:	3770      	adds	r7, #112	; 0x70
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	0801b8b0 	.word	0x0801b8b0
 8000a74:	6f01a8c0 	.word	0x6f01a8c0
 8000a78:	08000965 	.word	0x08000965
 8000a7c:	0801b8b8 	.word	0x0801b8b8
 8000a80:	0801b8cc 	.word	0x0801b8cc

08000a84 <mqtt_pub_request_cb>:


/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
 8000a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00c      	beq.n	8000ab2 <mqtt_pub_request_cb+0x2e>
	  char s[30];
	  sprintf(s, "Publish result: %d\n", result);
 8000a98:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4906      	ldr	r1, [pc, #24]	; (8000abc <mqtt_pub_request_cb+0x38>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f019 fe82 	bl	801a7ac <siprintf>
	  printLCD(s);
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f9fd 	bl	8000eac <printLCD>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	0801b8dc 	.word	0x0801b8dc

08000ac0 <example_publish>:


void example_publish(mqtt_client_t *client, void *arg)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af04      	add	r7, sp, #16
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  const char *pub_payload= "Test z NUCLEO-F207";
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <example_publish+0x74>)
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  err_t err;
  u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  err = mqtt_publish(client, "DataSoft/stm32", pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 8000ada:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000adc:	f7ff fb82 	bl	80001e4 <strlen>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	9303      	str	r3, [sp, #12]
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <example_publish+0x78>)
 8000aea:	9302      	str	r3, [sp, #8]
 8000aec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afc:	490f      	ldr	r1, [pc, #60]	; (8000b3c <example_publish+0x7c>)
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f00e fc86 	bl	800f410 <mqtt_publish>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if(err != ERR_OK) {
 8000b0a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00c      	beq.n	8000b2c <example_publish+0x6c>
	char s[20];
    sprintf(s, "Publish err: %d\n", err);
 8000b12:	f997 2021 	ldrsb.w	r2, [r7, #33]	; 0x21
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4909      	ldr	r1, [pc, #36]	; (8000b40 <example_publish+0x80>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f019 fe45 	bl	801a7ac <siprintf>
    printLCD(s);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f9c0 	bl	8000eac <printLCD>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	0801b8f0 	.word	0x0801b8f0
 8000b38:	08000a85 	.word	0x08000a85
 8000b3c:	0801b8a0 	.word	0x0801b8a0
 8000b40:	0801b904 	.word	0x0801b904

08000b44 <HAL_GPIO_EXTI_Callback>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_Btn_Pin) {
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b54:	d104      	bne.n	8000b60 <HAL_GPIO_EXTI_Callback+0x1c>

		osSemaphoreRelease(myBinarySemButtonHandle);
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f009 faaa 	bl	800a0b4 <osSemaphoreRelease>

	}

}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000545c 	.word	0x2000545c

08000b6c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	4a06      	ldr	r2, [pc, #24]	; (8000b9c <vApplicationGetIdleTaskMemory+0x30>)
 8000b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000244 	.word	0x20000244
 8000b9c:	200002f8 	.word	0x200002f8

08000ba0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b09e      	sub	sp, #120	; 0x78
 8000ba4:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySemButton */
  osSemaphoreDef(myBinarySemButton);
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	673b      	str	r3, [r7, #112]	; 0x70
 8000baa:	2300      	movs	r3, #0
 8000bac:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySemButtonHandle = osSemaphoreCreate(osSemaphore(myBinarySemButton), 1);
 8000bae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f009 f9fd 	bl	8009fb4 <osSemaphoreCreate>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <MX_FREERTOS_Init+0xd0>)
 8000bbe:	6013      	str	r3, [r2, #0]

  /* definition and creation of myBinarySemLCD */
  osSemaphoreDef(myBinarySemLCD);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  myBinarySemLCDHandle = osSemaphoreCreate(osSemaphore(myBinarySemLCD), 1);
 8000bc8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f009 f9f0 	bl	8009fb4 <osSemaphoreCreate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <MX_FREERTOS_Init+0xd4>)
 8000bd8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, 32);
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_FREERTOS_Init+0xd8>)
 8000bdc:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000be6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f009 fa97 	bl	800a120 <osMessageCreate>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <MX_FREERTOS_Init+0xdc>)
 8000bf6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000bf8:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_FREERTOS_Init+0xe0>)
 8000bfa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bfe:	461d      	mov	r5, r3
 8000c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f009 f8d2 	bl	8009dbc <osThreadCreate>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <MX_FREERTOS_Init+0xe4>)
 8000c1c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTaskButton */
  osThreadDef(myTaskButton, StartTaskButton, osPriorityIdle, 0, 512);
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_FREERTOS_Init+0xe8>)
 8000c20:	f107 0420 	add.w	r4, r7, #32
 8000c24:	461d      	mov	r5, r3
 8000c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskButtonHandle = osThreadCreate(osThread(myTaskButton), NULL);
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f009 f8bf 	bl	8009dbc <osThreadCreate>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <MX_FREERTOS_Init+0xec>)
 8000c42:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTaskLCD */
  osThreadDef(myTaskLCD, StartTaskLCD, osPriorityIdle, 0, 512);
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_FREERTOS_Init+0xf0>)
 8000c46:	1d3c      	adds	r4, r7, #4
 8000c48:	461d      	mov	r5, r3
 8000c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTaskLCDHandle = osThreadCreate(osThread(myTaskLCD), NULL);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f009 f8ae 	bl	8009dbc <osThreadCreate>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4a0c      	ldr	r2, [pc, #48]	; (8000c94 <MX_FREERTOS_Init+0xf4>)
 8000c64:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c66:	bf00      	nop
 8000c68:	3778      	adds	r7, #120	; 0x78
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000545c 	.word	0x2000545c
 8000c74:	20005588 	.word	0x20005588
 8000c78:	0801b918 	.word	0x0801b918
 8000c7c:	20005584 	.word	0x20005584
 8000c80:	0801b928 	.word	0x0801b928
 8000c84:	20005268 	.word	0x20005268
 8000c88:	0801b944 	.word	0x0801b944
 8000c8c:	20005460 	.word	0x20005460
 8000c90:	0801b960 	.word	0x0801b960
 8000c94:	20005264 	.word	0x20005264

08000c98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b093      	sub	sp, #76	; 0x4c
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ca0:	f006 ff48 	bl	8007b34 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ca4:	f018 fdd4 	bl	8019850 <MX_USB_DEVICE_Init>
  /* Infinite loop */


  //osDelay(2000);

  printf("PF-Init");
 8000ca8:	481c      	ldr	r0, [pc, #112]	; (8000d1c <StartDefaultTask+0x84>)
 8000caa:	f019 fced 	bl	801a688 <iprintf>


  ssd1306_Init();
 8000cae:	f000 fb43 	bl	8001338 <ssd1306_Init>
  printLCD("Init");
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <StartDefaultTask+0x88>)
 8000cb4:	f000 f8fa 	bl	8000eac <printLCD>

   //u32_t local_IP = ip4_addr_get_u32(gnetif);
    //u32_t local_IP = netif_ip4_addr((&gnetif);


   u32_t local_IP = gnetif.ip_addr.addr;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <StartDefaultTask+0x8c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	63fb      	str	r3, [r7, #60]	; 0x3c

  char s[50];

  sprintf(s, "IP %d.%d.%d.%d\n\r",(local_IP & 0xff), ((local_IP >> 8) & 0xff), ((local_IP >> 16) & 0xff), (local_IP >> 24));
 8000cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	b2dc      	uxtb	r4, r3
 8000cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cca:	0c1b      	lsrs	r3, r3, #16
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000cd0:	0e12      	lsrs	r2, r2, #24
 8000cd2:	f107 0008 	add.w	r0, r7, #8
 8000cd6:	9201      	str	r2, [sp, #4]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	4623      	mov	r3, r4
 8000cdc:	460a      	mov	r2, r1
 8000cde:	4912      	ldr	r1, [pc, #72]	; (8000d28 <StartDefaultTask+0x90>)
 8000ce0:	f019 fd64 	bl	801a7ac <siprintf>

  printLCD(s);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f8df 	bl	8000eac <printLCD>



  // initializing the HTTPd [-HTTPd #2-]
  httpd_init();
 8000cee:	f00d fad9 	bl	800e2a4 <httpd_init>

  // initializing CGI  [= CGI #7 =]
  myCGIinit();
 8000cf2:	f7ff fcef 	bl	80006d4 <myCGIinit>

  // initializing SSI [* SSI #6 *]
  mySSIinit();
 8000cf6:	f7ff fdc9 	bl	800088c <mySSIinit>

  example_do_connect(&mqtt_client, "DataSoft/stm32");
 8000cfa:	490c      	ldr	r1, [pc, #48]	; (8000d2c <StartDefaultTask+0x94>)
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <StartDefaultTask+0x98>)
 8000cfe:	f7ff fe75 	bl	80009ec <example_do_connect>


  for(;;)
  {

	  if (!mqtt_client_is_connected(&mqtt_client)) {
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <StartDefaultTask+0x98>)
 8000d04:	f00e ff00 	bl	800fb08 <mqtt_client_is_connected>
		//  example_do_connect(&mqtt_client, 'DataSoft/stm32');
	  }
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	480a      	ldr	r0, [pc, #40]	; (8000d34 <StartDefaultTask+0x9c>)
 8000d0c:	f002 fc5e 	bl	80035cc <HAL_GPIO_TogglePin>
//	  example_publish(&mqtt_client, 0);
//	  printf("Test \n");
	  osDelay(1000);
 8000d10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d14:	f009 f89e 	bl	8009e54 <osDelay>
	  if (!mqtt_client_is_connected(&mqtt_client)) {
 8000d18:	e7f3      	b.n	8000d02 <StartDefaultTask+0x6a>
 8000d1a:	bf00      	nop
 8000d1c:	0801b97c 	.word	0x0801b97c
 8000d20:	0801b984 	.word	0x0801b984
 8000d24:	2000567c 	.word	0x2000567c
 8000d28:	0801b98c 	.word	0x0801b98c
 8000d2c:	0801b8a0 	.word	0x0801b8a0
 8000d30:	2000526c 	.word	0x2000526c
 8000d34:	40020400 	.word	0x40020400

08000d38 <StartTaskButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskButton */
void StartTaskButton(void const * argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskButton */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(myBinarySemButtonHandle, osWaitForever);
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <StartTaskButton+0x6c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f009 f965 	bl	800a018 <osSemaphoreWait>

	LD1ON = !LD1ON;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <StartTaskButton+0x70>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2301      	movne	r3, #1
 8000d58:	2300      	moveq	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <StartTaskButton+0x70>)
 8000d6a:	701a      	strb	r2, [r3, #0]


	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, LD1ON);
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <StartTaskButton+0x70>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <StartTaskButton+0x74>)
 8000d78:	f002 fc10 	bl	800359c <HAL_GPIO_WritePin>
	char s[20];
	int  i = sprintf(s, "Led2 %d", LD1ON);
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <StartTaskButton+0x70>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	490a      	ldr	r1, [pc, #40]	; (8000db0 <StartTaskButton+0x78>)
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f019 fd0f 	bl	801a7ac <siprintf>
 8000d8e:	61f8      	str	r0, [r7, #28]
	printLCD(s);
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 f889 	bl	8000eac <printLCD>
	example_publish(&mqtt_client, 0);
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <StartTaskButton+0x7c>)
 8000d9e:	f7ff fe8f 	bl	8000ac0 <example_publish>
  {
 8000da2:	e7cd      	b.n	8000d40 <StartTaskButton+0x8>
 8000da4:	2000545c 	.word	0x2000545c
 8000da8:	2000023c 	.word	0x2000023c
 8000dac:	40020400 	.word	0x40020400
 8000db0:	0801b9a0 	.word	0x0801b9a0
 8000db4:	2000526c 	.word	0x2000526c

08000db8 <StartTaskLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLCD */
void StartTaskLCD(void const * argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08e      	sub	sp, #56	; 0x38
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLCD */
  /* Infinite loop */
  for(;;) {
	  osSemaphoreWait(myBinarySemLCDHandle, osWaitForever);
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <StartTaskLCD+0xac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f009 f925 	bl	800a018 <osSemaphoreWait>

	  for (uint8_t i=0; i<MAX_LINIA ; i++){
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000dd4:	e03f      	b.n	8000e56 <StartTaskLCD+0x9e>
		  ssd1306_SetCursor(0, 9*i);
 8000dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dda:	461a      	mov	r2, r3
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4619      	mov	r1, r3
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 fc6d 	bl	80016c4 <ssd1306_SetCursor>
		  char _s[LEN_LINIA];
		  strcpy(_s, linia[ILinia(i)]);
 8000dea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f83e 	bl	8000e70 <ILinia>
 8000df4:	4602      	mov	r2, r0
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	; (8000e68 <StartTaskLCD+0xb0>)
 8000e00:	441a      	add	r2, r3
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f019 fd3f 	bl	801a88c <strcpy>
		  uint8_t l= strlen(_s);
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff f9e6 	bl	80001e4 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  memset(&_s[l], ' ', LEN_LINIA-l);
 8000e1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e22:	f107 020c 	add.w	r2, r7, #12
 8000e26:	18d0      	adds	r0, r2, r3
 8000e28:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000e2c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000e30:	461a      	mov	r2, r3
 8000e32:	2120      	movs	r1, #32
 8000e34:	f019 fb44 	bl	801a4c0 <memset>
		  _s[20] = '\0';
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 3020 	strb.w	r3, [r7, #32]
		  ssd1306_WriteString(_s, Font_6x8, White);
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <StartTaskLCD+0xb4>)
 8000e40:	f107 000c 	add.w	r0, r7, #12
 8000e44:	2301      	movs	r3, #1
 8000e46:	ca06      	ldmia	r2, {r1, r2}
 8000e48:	f000 fc16 	bl	8001678 <ssd1306_WriteString>
	  for (uint8_t i=0; i<MAX_LINIA ; i++){
 8000e4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e50:	3301      	adds	r3, #1
 8000e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000e56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d9bb      	bls.n	8000dd6 <StartTaskLCD+0x1e>
	  }
	  ssd1306_UpdateScreen();
 8000e5e:	f000 fafb 	bl	8001458 <ssd1306_UpdateScreen>
	  osSemaphoreWait(myBinarySemLCDHandle, osWaitForever);
 8000e62:	e7ad      	b.n	8000dc0 <StartTaskLCD+0x8>
 8000e64:	20005588 	.word	0x20005588
 8000e68:	2000546c 	.word	0x2000546c
 8000e6c:	20000024 	.word	0x20000024

08000e70 <ILinia>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

int ILinia(int lp)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	return (top_linia + lp) % MAX_LINIA;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <ILinia+0x34>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	441a      	add	r2, r3
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <ILinia+0x38>)
 8000e82:	fb83 1302 	smull	r1, r3, r3, r2
 8000e86:	4413      	add	r3, r2
 8000e88:	1099      	asrs	r1, r3, #2
 8000e8a:	17d3      	asrs	r3, r2, #31
 8000e8c:	1ac9      	subs	r1, r1, r3
 8000e8e:	460b      	mov	r3, r1
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a5b      	subs	r3, r3, r1
 8000e94:	1ad1      	subs	r1, r2, r3
 8000e96:	460b      	mov	r3, r1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000240 	.word	0x20000240
 8000ea8:	92492493 	.word	0x92492493

08000eac <printLCD>:

void printLCD(const char *s)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	printf(s);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f019 fbe7 	bl	801a688 <iprintf>
	strcpy(linia[top_linia], s);
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <printLCD+0x58>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <printLCD+0x5c>)
 8000ec8:	4413      	add	r3, r2
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f019 fcdd 	bl	801a88c <strcpy>
	top_linia = (top_linia + 1) % MAX_LINIA;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <printLCD+0x58>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <printLCD+0x60>)
 8000eda:	fb83 1302 	smull	r1, r3, r3, r2
 8000ede:	4413      	add	r3, r2
 8000ee0:	1099      	asrs	r1, r3, #2
 8000ee2:	17d3      	asrs	r3, r2, #31
 8000ee4:	1ac9      	subs	r1, r1, r3
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	1a5b      	subs	r3, r3, r1
 8000eec:	1ad1      	subs	r1, r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <printLCD+0x58>)
 8000ef0:	6019      	str	r1, [r3, #0]
	osSemaphoreRelease(myBinarySemLCDHandle);
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <printLCD+0x64>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f009 f8dc 	bl	800a0b4 <osSemaphoreRelease>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000240 	.word	0x20000240
 8000f08:	2000546c 	.word	0x2000546c
 8000f0c:	92492493 	.word	0x92492493
 8000f10:	20005588 	.word	0x20005588

08000f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	4b5e      	ldr	r3, [pc, #376]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a5d      	ldr	r2, [pc, #372]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a56      	ldr	r2, [pc, #344]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b54      	ldr	r3, [pc, #336]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	4b50      	ldr	r3, [pc, #320]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <MX_GPIO_Init+0x194>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ff4:	482d      	ldr	r0, [pc, #180]	; (80010ac <MX_GPIO_Init+0x198>)
 8000ff6:	f002 fad1 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	482c      	ldr	r0, [pc, #176]	; (80010b0 <MX_GPIO_Init+0x19c>)
 8001000:	f002 facc 	bl	800359c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4826      	ldr	r0, [pc, #152]	; (80010b4 <MX_GPIO_Init+0x1a0>)
 800101c:	f002 f920 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	481d      	ldr	r0, [pc, #116]	; (80010ac <MX_GPIO_Init+0x198>)
 8001038:	f002 f912 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800103c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	4815      	ldr	r0, [pc, #84]	; (80010ac <MX_GPIO_Init+0x198>)
 8001056:	f002 f903 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <MX_GPIO_Init+0x19c>)
 8001072:	f002 f8f5 	bl	8003260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <MX_GPIO_Init+0x19c>)
 800108a:	f002 f8e9 	bl	8003260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2105      	movs	r1, #5
 8001092:	2028      	movs	r0, #40	; 0x28
 8001094:	f000 ff47 	bl	8001f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001098:	2028      	movs	r0, #40	; 0x28
 800109a:	f000 ff60 	bl	8001f5e <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40020800 	.word	0x40020800

080010b8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_I2C2_Init+0x50>)
 80010be:	4a13      	ldr	r2, [pc, #76]	; (800110c <MX_I2C2_Init+0x54>)
 80010c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_I2C2_Init+0x50>)
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_I2C2_Init+0x58>)
 80010c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_I2C2_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_I2C2_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_I2C2_Init+0x50>)
 80010d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_I2C2_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_I2C2_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_I2C2_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_I2C2_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_I2C2_Init+0x50>)
 80010f6:	f002 fa9b 	bl	8003630 <HAL_I2C_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001100:	f000 f8dc 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	2000558c 	.word	0x2000558c
 800110c:	40005800 	.word	0x40005800
 8001110:	000186a0 	.word	0x000186a0

08001114 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_I2C_MspInit+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12b      	bne.n	800118e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_I2C_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_I2C_MspInit+0x88>)
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_I2C_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001152:	2303      	movs	r3, #3
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001162:	2304      	movs	r3, #4
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <HAL_I2C_MspInit+0x8c>)
 800116e:	f002 f877 	bl	8003260 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_I2C_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_I2C_MspInit+0x88>)
 800117c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2C_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005800 	.word	0x40005800
 800119c:	40023800 	.word	0x40023800
 80011a0:	40021400 	.word	0x40021400

080011a4 <send_char>:
// Zeby otwierał się USB wirtual com
// https://stackoverflow.com/questions/56490843/what-is-issue-with-stm32-virtual-com-port-i-can-not-open-it


void send_char(char c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, (uint8_t*)&c, 1, 1000);
 80011ae:	1df9      	adds	r1, r7, #7
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	2201      	movs	r2, #1
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <send_char+0x20>)
 80011b8:	f004 ff9d 	bl	80060f6 <HAL_UART_Transmit>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20005628 	.word	0x20005628

080011c8 <__io_putchar>:


int __io_putchar(int c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	send_char(c);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ffe5 	bl	80011a4 <send_char>
	return c;
 80011da:	687b      	ldr	r3, [r7, #4]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f000 fc8a 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f80d 	bl	800120a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f7ff fe90 	bl	8000f14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011f4:	f000 fbe8 	bl	80019c8 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80011f8:	f7ff f980 	bl	80004fc <MX_CAN1_Init>
  MX_I2C2_Init();
 80011fc:	f7ff ff5c 	bl	80010b8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001200:	f7ff fcce 	bl	8000ba0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001204:	f008 fdc3 	bl	8009d8e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x24>

0800120a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b092      	sub	sp, #72	; 0x48
 800120e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001210:	f107 0318 	add.w	r3, r7, #24
 8001214:	2230      	movs	r2, #48	; 0x30
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f019 f951 	bl	801a4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2310      	movs	r3, #16
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001240:	230d      	movs	r3, #13
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001244:	23c3      	movs	r3, #195	; 0xc3
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800124c:	2305      	movs	r3, #5
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f003 ff9b 	bl	8005190 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001260:	f000 f82c 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001270:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2103      	movs	r1, #3
 8001280:	4618      	mov	r0, r3
 8001282:	f004 f9d3 	bl	800562c <HAL_RCC_ClockConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800128c:	f000 f816 	bl	80012bc <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3748      	adds	r7, #72	; 0x48
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012aa:	f000 fc4b 	bl	8001b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010000 	.word	0x40010000

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>

080012c6 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
	...

080012d4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af04      	add	r7, sp, #16
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	2200      	movs	r2, #0
 80012f0:	2178      	movs	r1, #120	; 0x78
 80012f2:	4803      	ldr	r0, [pc, #12]	; (8001300 <ssd1306_WriteCommand+0x2c>)
 80012f4:	f002 fae0 	bl	80038b8 <HAL_I2C_Mem_Write>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000558c 	.word	0x2000558c

08001304 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af04      	add	r7, sp, #16
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	9202      	str	r2, [sp, #8]
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	2178      	movs	r1, #120	; 0x78
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <ssd1306_WriteData+0x30>)
 8001326:	f002 fac7 	bl	80038b8 <HAL_I2C_Mem_Write>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000558c 	.word	0x2000558c

08001338 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 800133c:	f7ff ffc3 	bl	80012c6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001340:	2064      	movs	r0, #100	; 0x64
 8001342:	f000 fc1b 	bl	8001b7c <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8001346:	20ae      	movs	r0, #174	; 0xae
 8001348:	f7ff ffc4 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800134c:	2020      	movs	r0, #32
 800134e:	f7ff ffc1 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ffbe 	bl	80012d4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001358:	20b0      	movs	r0, #176	; 0xb0
 800135a:	f7ff ffbb 	bl	80012d4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800135e:	20c8      	movs	r0, #200	; 0xc8
 8001360:	f7ff ffb8 	bl	80012d4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ffb5 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800136a:	2010      	movs	r0, #16
 800136c:	f7ff ffb2 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001370:	2040      	movs	r0, #64	; 0x40
 8001372:	f7ff ffaf 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8001376:	2081      	movs	r0, #129	; 0x81
 8001378:	f7ff ffac 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 800137c:	20ff      	movs	r0, #255	; 0xff
 800137e:	f7ff ffa9 	bl	80012d4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001382:	20a1      	movs	r0, #161	; 0xa1
 8001384:	f7ff ffa6 	bl	80012d4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001388:	20a6      	movs	r0, #166	; 0xa6
 800138a:	f7ff ffa3 	bl	80012d4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800138e:	20a8      	movs	r0, #168	; 0xa8
 8001390:	f7ff ffa0 	bl	80012d4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001394:	203f      	movs	r0, #63	; 0x3f
 8001396:	f7ff ff9d 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800139a:	20a4      	movs	r0, #164	; 0xa4
 800139c:	f7ff ff9a 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80013a0:	20d3      	movs	r0, #211	; 0xd3
 80013a2:	f7ff ff97 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff ff94 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013ac:	20d5      	movs	r0, #213	; 0xd5
 80013ae:	f7ff ff91 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80013b2:	20f0      	movs	r0, #240	; 0xf0
 80013b4:	f7ff ff8e 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013b8:	20d9      	movs	r0, #217	; 0xd9
 80013ba:	f7ff ff8b 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013be:	2022      	movs	r0, #34	; 0x22
 80013c0:	f7ff ff88 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80013c4:	20da      	movs	r0, #218	; 0xda
 80013c6:	f7ff ff85 	bl	80012d4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80013ca:	2012      	movs	r0, #18
 80013cc:	f7ff ff82 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80013d0:	20db      	movs	r0, #219	; 0xdb
 80013d2:	f7ff ff7f 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80013d6:	2020      	movs	r0, #32
 80013d8:	f7ff ff7c 	bl	80012d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80013dc:	208d      	movs	r0, #141	; 0x8d
 80013de:	f7ff ff79 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80013e2:	2014      	movs	r0, #20
 80013e4:	f7ff ff76 	bl	80012d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80013e8:	20af      	movs	r0, #175	; 0xaf
 80013ea:	f7ff ff73 	bl	80012d4 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f810 	bl	8001414 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80013f4:	f000 f830 	bl	8001458 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <ssd1306_Init+0xd8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <ssd1306_Init+0xd8>)
 8001400:	2200      	movs	r2, #0
 8001402:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <ssd1306_Init+0xd8>)
 8001406:	2201      	movs	r2, #1
 8001408:	715a      	strb	r2, [r3, #5]
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000ef8 	.word	0x20000ef8

08001414 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e00d      	b.n	8001440 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <ssd1306_Fill+0x1a>
 800142a:	2100      	movs	r1, #0
 800142c:	e000      	b.n	8001430 <ssd1306_Fill+0x1c>
 800142e:	21ff      	movs	r1, #255	; 0xff
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <ssd1306_Fill+0x40>)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4413      	add	r3, r2
 8001436:	460a      	mov	r2, r1
 8001438:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001446:	d3ed      	bcc.n	8001424 <ssd1306_Fill+0x10>
    }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000af8 	.word	0x20000af8

08001458 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800145e:	2300      	movs	r3, #0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	e016      	b.n	8001492 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	3b50      	subs	r3, #80	; 0x50
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff32 	bl	80012d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff ff2f 	bl	80012d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001476:	2010      	movs	r0, #16
 8001478:	f7ff ff2c 	bl	80012d4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	01db      	lsls	r3, r3, #7
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <ssd1306_UpdateScreen+0x4c>)
 8001482:	4413      	add	r3, r2
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff3c 	bl	8001304 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	3301      	adds	r3, #1
 8001490:	71fb      	strb	r3, [r7, #7]
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b07      	cmp	r3, #7
 8001496:	d9e5      	bls.n	8001464 <ssd1306_UpdateScreen+0xc>
    }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000af8 	.word	0x20000af8

080014a8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	460b      	mov	r3, r1
 80014b4:	71bb      	strb	r3, [r7, #6]
 80014b6:	4613      	mov	r3, r2
 80014b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db48      	blt.n	8001554 <ssd1306_DrawPixel+0xac>
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	2b3f      	cmp	r3, #63	; 0x3f
 80014c6:	d845      	bhi.n	8001554 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <ssd1306_DrawPixel+0xb8>)
 80014ca:	791b      	ldrb	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80014d0:	797b      	ldrb	r3, [r7, #5]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d11a      	bne.n	800151a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014e4:	79fa      	ldrb	r2, [r7, #7]
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	b2d8      	uxtb	r0, r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	01db      	lsls	r3, r3, #7
 80014f0:	4413      	add	r3, r2
 80014f2:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <ssd1306_DrawPixel+0xbc>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	b25b      	sxtb	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b259      	sxtb	r1, r3
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	4603      	mov	r3, r0
 800150e:	01db      	lsls	r3, r3, #7
 8001510:	4413      	add	r3, r2
 8001512:	b2c9      	uxtb	r1, r1
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <ssd1306_DrawPixel+0xbc>)
 8001516:	54d1      	strb	r1, [r2, r3]
 8001518:	e01d      	b.n	8001556 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800151a:	79fa      	ldrb	r2, [r7, #7]
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	b2d8      	uxtb	r0, r3
 8001522:	4603      	mov	r3, r0
 8001524:	01db      	lsls	r3, r3, #7
 8001526:	4413      	add	r3, r2
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <ssd1306_DrawPixel+0xbc>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	b25a      	sxtb	r2, r3
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	b25b      	sxtb	r3, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	b25b      	sxtb	r3, r3
 8001540:	4013      	ands	r3, r2
 8001542:	b259      	sxtb	r1, r3
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	4603      	mov	r3, r0
 8001548:	01db      	lsls	r3, r3, #7
 800154a:	4413      	add	r3, r2
 800154c:	b2c9      	uxtb	r1, r1
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <ssd1306_DrawPixel+0xbc>)
 8001550:	54d1      	strb	r1, [r2, r3]
 8001552:	e000      	b.n	8001556 <ssd1306_DrawPixel+0xae>
        return;
 8001554:	bf00      	nop
    }
}
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000ef8 	.word	0x20000ef8
 8001564:	20000af8 	.word	0x20000af8

08001568 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4604      	mov	r4, r0
 8001570:	1d38      	adds	r0, r7, #4
 8001572:	e880 0006 	stmia.w	r0, {r1, r2}
 8001576:	461a      	mov	r2, r3
 8001578:	4623      	mov	r3, r4
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	4613      	mov	r3, r2
 800157e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b1f      	cmp	r3, #31
 8001584:	d902      	bls.n	800158c <ssd1306_WriteChar+0x24>
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	2b7e      	cmp	r3, #126	; 0x7e
 800158a:	d901      	bls.n	8001590 <ssd1306_WriteChar+0x28>
        return 0;
 800158c:	2300      	movs	r3, #0
 800158e:	e06d      	b.n	800166c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001590:	4b38      	ldr	r3, [pc, #224]	; (8001674 <ssd1306_WriteChar+0x10c>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	2b80      	cmp	r3, #128	; 0x80
 800159c:	dc06      	bgt.n	80015ac <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800159e:	4b35      	ldr	r3, [pc, #212]	; (8001674 <ssd1306_WriteChar+0x10c>)
 80015a0:	885b      	ldrh	r3, [r3, #2]
 80015a2:	461a      	mov	r2, r3
 80015a4:	797b      	ldrb	r3, [r7, #5]
 80015a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80015a8:	2b40      	cmp	r3, #64	; 0x40
 80015aa:	dd01      	ble.n	80015b0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e05d      	b.n	800166c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	e04c      	b.n	8001650 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3b20      	subs	r3, #32
 80015bc:	7979      	ldrb	r1, [r7, #5]
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4619      	mov	r1, r3
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	440b      	add	r3, r1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	e034      	b.n	8001640 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d012      	beq.n	800160c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80015e6:	4b23      	ldr	r3, [pc, #140]	; (8001674 <ssd1306_WriteChar+0x10c>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b2d8      	uxtb	r0, r3
 80015f4:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <ssd1306_WriteChar+0x10c>)
 80015f6:	885b      	ldrh	r3, [r3, #2]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4413      	add	r3, r2
 8001600:	b2db      	uxtb	r3, r3
 8001602:	7bba      	ldrb	r2, [r7, #14]
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff ff4f 	bl	80014a8 <ssd1306_DrawPixel>
 800160a:	e016      	b.n	800163a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <ssd1306_WriteChar+0x10c>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4413      	add	r3, r2
 8001618:	b2d8      	uxtb	r0, r3
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <ssd1306_WriteChar+0x10c>)
 800161c:	885b      	ldrh	r3, [r3, #2]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	4413      	add	r3, r2
 8001626:	b2d9      	uxtb	r1, r3
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	f7ff ff37 	bl	80014a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	3301      	adds	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	793b      	ldrb	r3, [r7, #4]
 8001642:	461a      	mov	r2, r3
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4293      	cmp	r3, r2
 8001648:	d3c5      	bcc.n	80015d6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3301      	adds	r3, #1
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	797b      	ldrb	r3, [r7, #5]
 8001652:	461a      	mov	r2, r3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4293      	cmp	r3, r2
 8001658:	d3ad      	bcc.n	80015b6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <ssd1306_WriteChar+0x10c>)
 800165c:	881a      	ldrh	r2, [r3, #0]
 800165e:	793b      	ldrb	r3, [r7, #4]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <ssd1306_WriteChar+0x10c>)
 8001668:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3724      	adds	r7, #36	; 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	20000ef8 	.word	0x20000ef8

08001678 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	1d38      	adds	r0, r7, #4
 8001682:	e880 0006 	stmia.w	r0, {r1, r2}
 8001686:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001688:	e012      	b.n	80016b0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	7818      	ldrb	r0, [r3, #0]
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	1d3a      	adds	r2, r7, #4
 8001692:	ca06      	ldmia	r2, {r1, r2}
 8001694:	f7ff ff68 	bl	8001568 <ssd1306_WriteChar>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d002      	beq.n	80016aa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	e008      	b.n	80016bc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e8      	bne.n	800168a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	781b      	ldrb	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	460a      	mov	r2, r1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	4613      	mov	r3, r2
 80016d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <ssd1306_SetCursor+0x2c>)
 80016da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <ssd1306_SetCursor+0x2c>)
 80016e2:	805a      	strh	r2, [r3, #2]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000ef8 	.word	0x20000ef8

080016f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_MspInit+0x54>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a11      	ldr	r2, [pc, #68]	; (8001748 <HAL_MspInit+0x54>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <HAL_MspInit+0x54>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_MspInit+0x54>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_MspInit+0x54>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_MspInit+0x54>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	210f      	movs	r1, #15
 8001736:	f06f 0001 	mvn.w	r0, #1
 800173a:	f000 fbf4 	bl	8001f26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	2019      	movs	r0, #25
 8001762:	f000 fbe0 	bl	8001f26 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001766:	2019      	movs	r0, #25
 8001768:	f000 fbf9 	bl	8001f5e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HAL_InitTick+0xa4>)
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_InitTick+0xa4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6453      	str	r3, [r2, #68]	; 0x44
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_InitTick+0xa4>)
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001788:	f107 0210 	add.w	r2, r7, #16
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f004 f990 	bl	8005ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001798:	f004 f96c 	bl	8005a74 <HAL_RCC_GetPCLK2Freq>
 800179c:	4603      	mov	r3, r0
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_InitTick+0xa8>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	3b01      	subs	r3, #1
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_InitTick+0xac>)
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <HAL_InitTick+0xb0>)
 80017b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <HAL_InitTick+0xac>)
 80017b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_InitTick+0xac>)
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_InitTick+0xac>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_InitTick+0xac>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017d0:	4809      	ldr	r0, [pc, #36]	; (80017f8 <HAL_InitTick+0xac>)
 80017d2:	f004 f9a1 	bl	8005b18 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d104      	bne.n	80017e6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017dc:	4806      	ldr	r0, [pc, #24]	; (80017f8 <HAL_InitTick+0xac>)
 80017de:	f004 f9f3 	bl	8005bc8 <HAL_TIM_Base_Start_IT>
 80017e2:	4603      	mov	r3, r0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3730      	adds	r7, #48	; 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	200055e0 	.word	0x200055e0
 80017fc:	40010000 	.word	0x40010000

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
	...

0800182c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001832:	f004 fa37 	bl	8005ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200055e0 	.word	0x200055e0

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
//  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//  LD1ON = !LD1ON;


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001844:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001848:	f001 feda 	bl	8003600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <ETH_IRQHandler+0x10>)
 8001856:	f000 ff5e 	bl	8002716 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20006f94 	.word	0x20006f94

08001864 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <OTG_FS_IRQHandler+0x10>)
 800186a:	f002 fc7a 	bl	8004162 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000d3bc 	.word	0x2000d3bc

08001878 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800188a:	f3af 8000 	nop.w
 800188e:	4601      	mov	r1, r0
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf0      	blt.n	800188a <_read+0x12>
	}

return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e009      	b.n	80018d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fc7b 	bl	80011c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf1      	blt.n	80018c4 <_write+0x12>
	}
	return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_close>:

int _close(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001910:	605a      	str	r2, [r3, #4]
	return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
	return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
	...

0800194c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <_sbrk+0x5c>)
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <_sbrk+0x60>)
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <_sbrk+0x64>)
 800196a:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <_sbrk+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	429a      	cmp	r2, r3
 800197a:	d205      	bcs.n	8001988 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <_sbrk+0x6c>)
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20020000 	.word	0x20020000
 80019ac:	00000400 	.word	0x00000400
 80019b0:	20000f00 	.word	0x20000f00
 80019b4:	2000d7c0 	.word	0x2000d7c0
 80019b8:	20005238 	.word	0x20005238

080019bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <MX_USART3_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_USART3_UART_Init+0x4c>)
 8001a00:	f004 fb2c 	bl	800605c <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f7ff fc57 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20005628 	.word	0x20005628
 8001a18:	40004800 	.word	0x40004800

08001a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <HAL_UART_MspInit+0x84>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12c      	bne.n	8001a98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_UART_MspInit+0x88>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <HAL_UART_MspInit+0x8c>)
 8001a94:	f001 fbe4 	bl	8003260 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40004800 	.word	0x40004800
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020c00 	.word	0x40020c00

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001ab0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ab2:	e003      	b.n	8001abc <LoopCopyDataInit>

08001ab4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ab6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ab8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aba:	3104      	adds	r1, #4

08001abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ac0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ac2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ac4:	d3f6      	bcc.n	8001ab4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ac8:	e002      	b.n	8001ad0 <LoopFillZerobss>

08001aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001aca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001acc:	f842 3b04 	str.w	r3, [r2], #4

08001ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ad2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ad4:	d3f9      	bcc.n	8001aca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad6:	f7ff ff71 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ada:	f018 fc9b 	bl	801a414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ade:	f7ff fb81 	bl	80011e4 <main>
  bx  lr
 8001ae2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ae4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ae8:	0801ed98 	.word	0x0801ed98
  ldr  r0, =_sdata
 8001aec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001af0:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8001af4:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8001af8:	2000d7bc 	.word	0x2000d7bc

08001afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_Init+0x40>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_Init+0x40>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_Init+0x40>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 f9f1 	bl	8001f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f7ff fe0c 	bl	800174c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fdde 	bl	80016f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_IncTick+0x1c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_IncTick+0x20>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a03      	ldr	r2, [pc, #12]	; (8001b64 <HAL_IncTick+0x20>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	20000034 	.word	0x20000034
 8001b64:	2000566c 	.word	0x2000566c

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <HAL_GetTick+0x10>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	2000566c 	.word	0x2000566c

08001b7c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff fff0 	bl	8001b68 <HAL_GetTick>
 8001b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d005      	beq.n	8001ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_Delay+0x44>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ba2:	bf00      	nop
 8001ba4:	f7ff ffe0 	bl	8001b68 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d8f7      	bhi.n	8001ba4 <HAL_Delay+0x28>
  {
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000034 	.word	0x20000034

08001bc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0ed      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fcbe 	bl	8000564 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff ffb6 	bl	8001b68 <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bfe:	e012      	b.n	8001c26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c00:	f7ff ffb2 	bl	8001b68 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d90b      	bls.n	8001c26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0c5      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0e5      	beq.n	8001c00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0202 	bic.w	r2, r2, #2
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff ff90 	bl	8001b68 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c4c:	f7ff ff8c 	bl	8001b68 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e09f      	b.n	8001db2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e5      	bne.n	8001c4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7e1b      	ldrb	r3, [r3, #24]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d108      	bne.n	8001c9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e007      	b.n	8001caa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7e5b      	ldrb	r3, [r3, #25]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e007      	b.n	8001cd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e9b      	ldrb	r3, [r3, #26]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d108      	bne.n	8001cee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e007      	b.n	8001cfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0220 	bic.w	r2, r2, #32
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7edb      	ldrb	r3, [r3, #27]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d108      	bne.n	8001d18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0210 	bic.w	r2, r2, #16
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e007      	b.n	8001d28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0210 	orr.w	r2, r2, #16
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7f1b      	ldrb	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d108      	bne.n	8001d42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e007      	b.n	8001d52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0208 	bic.w	r2, r2, #8
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7f5b      	ldrb	r3, [r3, #29]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0204 	orr.w	r2, r2, #4
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0204 	bic.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	ea42 0103 	orr.w	r1, r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4906      	ldr	r1, [pc, #24]	; (8001e54 <__NVIC_EnableIRQ+0x34>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff4f 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
 8001f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f38:	f7ff ff64 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	f7ff ffb2 	bl	8001eac <NVIC_EncodePriority>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff81 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f56:	bf00      	nop
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff57 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001f8c:	4ba3      	ldr	r3, [pc, #652]	; (800221c <HAL_ETH_Init+0x2a0>)
 8001f8e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e173      	b.n	800228a <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f005 ff1a 	bl	8007df0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	4b97      	ldr	r3, [pc, #604]	; (8002220 <HAL_ETH_Init+0x2a4>)
 8001fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc4:	4a96      	ldr	r2, [pc, #600]	; (8002220 <HAL_ETH_Init+0x2a4>)
 8001fc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fca:	6453      	str	r3, [r2, #68]	; 0x44
 8001fcc:	4b94      	ldr	r3, [pc, #592]	; (8002220 <HAL_ETH_Init+0x2a4>)
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fd8:	4b92      	ldr	r3, [pc, #584]	; (8002224 <HAL_ETH_Init+0x2a8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a91      	ldr	r2, [pc, #580]	; (8002224 <HAL_ETH_Init+0x2a8>)
 8001fde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fe2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fe4:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <HAL_ETH_Init+0x2a8>)
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	498d      	ldr	r1, [pc, #564]	; (8002224 <HAL_ETH_Init+0x2a8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002008:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800200a:	f7ff fdad 	bl	8001b68 <HAL_GetTick>
 800200e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002010:	e011      	b.n	8002036 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8002012:	f7ff fda9 	bl	8001b68 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002020:	d909      	bls.n	8002036 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e129      	b.n	800228a <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1e4      	bne.n	8002012 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f023 031c 	bic.w	r3, r3, #28
 8002056:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002058:	f003 fce0 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 800205c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4a71      	ldr	r2, [pc, #452]	; (8002228 <HAL_ETH_Init+0x2ac>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d908      	bls.n	8002078 <HAL_ETH_Init+0xfc>
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4a70      	ldr	r2, [pc, #448]	; (800222c <HAL_ETH_Init+0x2b0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d804      	bhi.n	8002078 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e01a      	b.n	80020ae <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4a6c      	ldr	r2, [pc, #432]	; (800222c <HAL_ETH_Init+0x2b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d908      	bls.n	8002092 <HAL_ETH_Init+0x116>
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	4a66      	ldr	r2, [pc, #408]	; (800221c <HAL_ETH_Init+0x2a0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d204      	bcs.n	8002092 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f043 030c 	orr.w	r3, r3, #12
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	e00d      	b.n	80020ae <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4a61      	ldr	r2, [pc, #388]	; (800221c <HAL_ETH_Init+0x2a0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d303      	bcc.n	80020a2 <HAL_ETH_Init+0x126>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4a64      	ldr	r2, [pc, #400]	; (8002230 <HAL_ETH_Init+0x2b4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d904      	bls.n	80020ac <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e000      	b.n	80020ae <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020ac:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80020b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020ba:	2100      	movs	r1, #0
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 fc08 	bl	80028d2 <HAL_ETH_WritePHYRegister>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80020cc:	6939      	ldr	r1, [r7, #16]
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fdbe 	bl	8002c50 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0d4      	b.n	800228a <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80020e0:	20ff      	movs	r0, #255	; 0xff
 80020e2:	f7ff fd4b 	bl	8001b7c <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80a2 	beq.w	8002234 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80020f0:	f7ff fd3a 	bl	8001b68 <HAL_GetTick>
 80020f4:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	461a      	mov	r2, r3
 80020fc:	2101      	movs	r1, #1
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fb7f 	bl	8002802 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8002104:	f7ff fd30 	bl	8001b68 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d90f      	bls.n	8002136 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800211a:	6939      	ldr	r1, [r7, #16]
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fd97 	bl	8002c50 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0a9      	b.n	800228a <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0da      	beq.n	80020f6 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002144:	2100      	movs	r1, #0
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fbc3 	bl	80028d2 <HAL_ETH_WritePHYRegister>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002156:	6939      	ldr	r1, [r7, #16]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fd79 	bl	8002c50 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e08f      	b.n	800228a <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800216a:	f7ff fcfd 	bl	8001b68 <HAL_GetTick>
 800216e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	461a      	mov	r2, r3
 8002176:	2101      	movs	r1, #1
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fb42 	bl	8002802 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800217e:	f7ff fcf3 	bl	8001b68 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d90f      	bls.n	80021b0 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fd5a 	bl	8002c50 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e06c      	b.n	800228a <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0da      	beq.n	8002170 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	461a      	mov	r2, r3
 80021c0:	2110      	movs	r1, #16
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 fb1d 	bl	8002802 <HAL_ETH_ReadPHYRegister>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021d2:	6939      	ldr	r1, [r7, #16]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fd3b 	bl	8002c50 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e051      	b.n	800228a <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d004      	beq.n	80021fa <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	e002      	b.n	8002200 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	e032      	b.n	8002278 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	e02d      	b.n	8002278 <HAL_ETH_Init+0x2fc>
 800221c:	03938700 	.word	0x03938700
 8002220:	40023800 	.word	0x40023800
 8002224:	40013800 	.word	0x40013800
 8002228:	01312cff 	.word	0x01312cff
 800222c:	02160ebf 	.word	0x02160ebf
 8002230:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	08db      	lsrs	r3, r3, #3
 800223a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002244:	4313      	orrs	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	2100      	movs	r1, #0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fb40 	bl	80028d2 <HAL_ETH_WritePHYRegister>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fcf6 	bl	8002c50 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e00c      	b.n	800228a <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002270:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002274:	f7ff fc82 	bl	8001b7c <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002278:	6939      	ldr	r1, [r7, #16]
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fce8 	bl	8002c50 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop

08002294 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_ETH_DMATxDescListInit+0x20>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e051      	b.n	8002358 <HAL_ETH_DMATxDescListInit+0xc4>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e030      	b.n	8002332 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	015b      	lsls	r3, r3, #5
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	4413      	add	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	3b01      	subs	r3, #1
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d208      	bcs.n	8002326 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4413      	add	r3, r2
 800231e:	461a      	mov	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	e002      	b.n	800232c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3ca      	bcc.n	80022d0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002344:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002362:	b480      	push	{r7}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_ETH_DMARxDescListInit+0x20>
 800237e:	2302      	movs	r3, #2
 8002380:	e055      	b.n	800242e <HAL_ETH_DMARxDescListInit+0xcc>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	e034      	b.n	8002408 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	015b      	lsls	r3, r3, #5
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023ae:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80023b6:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d208      	bcs.n	80023fc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	015b      	lsls	r3, r3, #5
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	4413      	add	r3, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	e002      	b.n	8002402 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3301      	adds	r3, #1
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d3c6      	bcc.n	800239e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800241a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_ETH_TransmitFrame+0x24>
 8002458:	2302      	movs	r3, #2
 800245a:	e0cc      	b.n	80025f6 <HAL_ETH_TransmitFrame+0x1be>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d109      	bne.n	8002486 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0b7      	b.n	80025f6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da09      	bge.n	80024a4 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2212      	movs	r2, #18
 8002494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0a8      	b.n	80025f6 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d915      	bls.n	80024da <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4a53      	ldr	r2, [pc, #332]	; (8002600 <HAL_ETH_TransmitFrame+0x1c8>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <HAL_ETH_TransmitFrame+0x1c8>)
 80024be:	fba3 1302 	umull	r1, r3, r3, r2
 80024c2:	0a9b      	lsrs	r3, r3, #10
 80024c4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e001      	b.n	80024de <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d11c      	bne.n	800251e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80024f2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024fe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800250e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
 800251c:	e04b      	b.n	80025b6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e044      	b.n	80025ae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002532:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002548:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002552:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3b01      	subs	r3, #1
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	429a      	cmp	r2, r3
 800255c:	d116      	bne.n	800258c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800256c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	4a24      	ldr	r2, [pc, #144]	; (8002604 <HAL_ETH_TransmitFrame+0x1cc>)
 8002572:	fb03 f202 	mul.w	r2, r3, r2
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	4413      	add	r3, r2
 800257a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800257e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800258a:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800259a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	3301      	adds	r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d3b6      	bcc.n	8002524 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00d      	beq.n	80025e4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d0:	461a      	mov	r2, r3
 80025d2:	2304      	movs	r3, #4
 80025d4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025de:	461a      	mov	r2, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	371c      	adds	r7, #28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	ac02b00b 	.word	0xac02b00b
 8002604:	fffffa0c 	.word	0xfffffa0c

08002608 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800261e:	2302      	movs	r3, #2
 8002620:	e074      	b.n	800270c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002632:	e05a      	b.n	80026ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3301      	adds	r3, #1
 8002638:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002648:	d10d      	bne.n	8002666 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28
 8002664:	e041      	b.n	80026ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10b      	bne.n	800268c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
 800268a:	e02e      	b.n	80026ea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d103      	bne.n	80026ae <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80026ba:	1f1a      	subs	r2, r3, #4
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	461a      	mov	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e010      	b.n	800270c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db02      	blt.n	80026fa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d99c      	bls.n	8002634 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d112      	bne.n	8002756 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f005 fc2b 	bl	8007f8c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273e:	461a      	mov	r2, r3
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002754:	e01a      	b.n	800278c <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d111      	bne.n	800278c <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f838 	bl	80027de <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002776:	461a      	mov	r2, r3
 8002778:	2301      	movs	r3, #1
 800277a:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002794:	461a      	mov	r2, r3
 8002796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279a:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ae:	d112      	bne.n	80027d6 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f81d 	bl	80027f0 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	461a      	mov	r2, r3
 80027c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	460b      	mov	r3, r1
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b82      	cmp	r3, #130	; 0x82
 8002822:	d101      	bne.n	8002828 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
 8002826:	e050      	b.n	80028ca <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2282      	movs	r2, #130	; 0x82
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 031c 	and.w	r3, r3, #28
 800283e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8a1b      	ldrh	r3, [r3, #16]
 8002844:	02db      	lsls	r3, r3, #11
 8002846:	b29b      	uxth	r3, r3
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0302 	bic.w	r3, r3, #2
 8002862:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002874:	f7ff f978 	bl	8001b68 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800287a:	e015      	b.n	80028a8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800287c:	f7ff f974 	bl	8001b68 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d309      	bcc.n	80028a0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e014      	b.n	80028ca <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1e4      	bne.n	800287c <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	460b      	mov	r3, r1
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b42      	cmp	r3, #66	; 0x42
 80028f2:	d101      	bne.n	80028f8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	e04e      	b.n	8002996 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2242      	movs	r2, #66	; 0x42
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f003 031c 	and.w	r3, r3, #28
 800290e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8a1b      	ldrh	r3, [r3, #16]
 8002914:	02db      	lsls	r3, r3, #11
 8002916:	b29b      	uxth	r3, r3
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	4313      	orrs	r3, r2
 800291c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	019b      	lsls	r3, r3, #6
 8002922:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f043 0302 	orr.w	r3, r3, #2
 8002932:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800294e:	f7ff f90b 	bl	8001b68 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002954:	e015      	b.n	8002982 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002956:	f7ff f907 	bl	8001b68 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002964:	d309      	bcc.n	800297a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e00d      	b.n	8002996 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e4      	bne.n	8002956 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_ETH_Start+0x16>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e01f      	b.n	80029f4 <HAL_ETH_Start+0x56>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb3f 	bl	8003048 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fb76 	bl	80030bc <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fc01 	bl	80031d8 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fbaa 	bl	8003130 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fbd1 	bl	8003184 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_ETH_Stop+0x16>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e01f      	b.n	8002a52 <HAL_ETH_Stop+0x56>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fb99 	bl	800315a <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fbc0 	bl	80031ae <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fb61 	bl	80030f6 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fbcf 	bl	80031d8 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fb21 	bl	8003082 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_ETH_ConfigMAC+0x1c>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e0e4      	b.n	8002c42 <HAL_ETH_ConfigMAC+0x1e6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80b1 	beq.w	8002bf2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <HAL_ETH_ConfigMAC+0x1f0>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002aa8:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8002aae:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8002ab4:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8002aba:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8002ac0:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8002ac6:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8002acc:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8002ad2:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8002ad8:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8002ade:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8002ae4:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8002aea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7ff f83a 	bl	8001b7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b18:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002b1e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002b24:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8002b2a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002b30:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002b36:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002b42:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b44:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7ff f814 	bl	8001b7c <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b64:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b6e:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b8c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002b92:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002b98:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8002b9e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002ba4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7fe ffdd 	bl	8001b7c <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7fe ffca 	bl	8001b7c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	61da      	str	r2, [r3, #28]
 8002bf0:	e01e      	b.n	8002c30 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c00:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7fe ffaa 	bl	8001b7c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	ff20810f 	.word	0xff20810f

08002c50 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b0b0      	sub	sp, #192	; 0xc0
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c74:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c9c:	e001      	b.n	8002ca2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cac:	2300      	movs	r3, #0
 8002cae:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002cbc:	2340      	movs	r3, #64	; 0x40
 8002cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d28:	4baa      	ldr	r3, [pc, #680]	; (8002fd4 <ETH_MACDMAConfig+0x384>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002d34:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8002d38:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002d3c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002d42:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8002d46:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8002d4a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8002d50:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8002d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8002d54:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002d56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8002d58:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8002d5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8002d5c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8002d60:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8002d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8002d64:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002d66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d78:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7fe fef9 	bl	8001b7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d92:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002d94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002d98:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002d9c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002da2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002da4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002da8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002dae:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002db4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002db8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002dc0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002dc2:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7fe fed4 	bl	8001b7c <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ddc:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002de6:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002df0:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002dfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e00:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e04:	4013      	ands	r3, r2
 8002e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e0e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002e14:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002e16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002e1a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002e1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002e20:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8002e26:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002e28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002e2c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002e2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e40:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7fe fe95 	bl	8001b7c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e5a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002e5c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8002e60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7fe fe80 	bl	8001b7c <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e84:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8e:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e98:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ee0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <ETH_MACDMAConfig+0x388>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002eec:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8002eee:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002ef0:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002ef2:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8002ef4:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002ef6:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002ef8:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002efa:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002efc:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002efe:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8002f00:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002f02:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8002f04:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002f08:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8002f0c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002f0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f20:	461a      	mov	r2, r3
 8002f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f26:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fe fe20 	bl	8001b7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f44:	461a      	mov	r2, r3
 8002f46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f4a:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002f50:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8002f54:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f58:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8002f5c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f60:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8002f62:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002f66:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f74:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7fe fdf9 	bl	8001b7c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f92:	461a      	mov	r2, r3
 8002f94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f98:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d10d      	bne.n	8002fbe <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fbc:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f808 	bl	8002fdc <ETH_MACAddressConfig>
}
 8002fcc:	bf00      	nop
 8002fce:	37c0      	adds	r7, #192	; 0xc0
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	ff20810f 	.word	0xff20810f
 8002fd8:	f8de3f23 	.word	0xf8de3f23

08002fdc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3305      	adds	r3, #5
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	3204      	adds	r2, #4
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	4b10      	ldr	r3, [pc, #64]	; (8003040 <ETH_MACAddressConfig+0x64>)
 8002ffe:	4413      	add	r3, r2
 8003000:	461a      	mov	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3303      	adds	r3, #3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	061a      	lsls	r2, r3, #24
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3302      	adds	r3, #2
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3301      	adds	r3, #1
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	4313      	orrs	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <ETH_MACAddressConfig+0x68>)
 800302e:	4413      	add	r3, r2
 8003030:	461a      	mov	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40028040 	.word	0x40028040
 8003044:	40028044 	.word	0x40028044

08003048 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0208 	orr.w	r2, r2, #8
 8003062:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800306c:	2001      	movs	r0, #1
 800306e:	f000 f8d9 	bl	8003224 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	601a      	str	r2, [r3, #0]
}
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0208 	bic.w	r2, r2, #8
 800309c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f000 f8bc 	bl	8003224 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	601a      	str	r2, [r3, #0]
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0204 	orr.w	r2, r2, #4
 80030d6:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f000 f89f 	bl	8003224 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0204 	bic.w	r2, r2, #4
 8003110:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800311a:	2001      	movs	r0, #1
 800311c:	f000 f882 	bl	8003224 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800314a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800314e:	6193      	str	r3, [r2, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003174:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003178:	6193      	str	r3, [r2, #24]
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031a2:	6193      	str	r3, [r2, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	f023 0302 	bic.w	r3, r3, #2
 80031c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031cc:	6193      	str	r3, [r2, #24]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031fa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003208:	2001      	movs	r0, #1
 800320a:	f000 f80b 	bl	8003224 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003218:	6193      	str	r3, [r2, #24]
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <ETH_Delay+0x34>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <ETH_Delay+0x38>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0a5b      	lsrs	r3, r3, #9
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003240:	bf00      	nop
  }
  while (Delay --);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	60fa      	str	r2, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f9      	bne.n	8003240 <ETH_Delay+0x1c>
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	2000002c 	.word	0x2000002c
 800325c:	10624dd3 	.word	0x10624dd3

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326e:	e16f      	b.n	8003550 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2101      	movs	r1, #1
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	4013      	ands	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8161 	beq.w	800354a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d005      	beq.n	80032a0 <HAL_GPIO_Init+0x40>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d130      	bne.n	8003302 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d6:	2201      	movs	r2, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0201 	and.w	r2, r3, #1
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d017      	beq.n	800333e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d123      	bne.n	8003392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	08da      	lsrs	r2, r3, #3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3208      	adds	r2, #8
 8003352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	08da      	lsrs	r2, r3, #3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3208      	adds	r2, #8
 800338c:	6939      	ldr	r1, [r7, #16]
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 0203 	and.w	r2, r3, #3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80bb 	beq.w	800354a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	4b64      	ldr	r3, [pc, #400]	; (800356c <HAL_GPIO_Init+0x30c>)
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	4a63      	ldr	r2, [pc, #396]	; (800356c <HAL_GPIO_Init+0x30c>)
 80033de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e2:	6453      	str	r3, [r2, #68]	; 0x44
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_GPIO_Init+0x30c>)
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033f0:	4a5f      	ldr	r2, [pc, #380]	; (8003570 <HAL_GPIO_Init+0x310>)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	220f      	movs	r2, #15
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a57      	ldr	r2, [pc, #348]	; (8003574 <HAL_GPIO_Init+0x314>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d031      	beq.n	8003480 <HAL_GPIO_Init+0x220>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a56      	ldr	r2, [pc, #344]	; (8003578 <HAL_GPIO_Init+0x318>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d02b      	beq.n	800347c <HAL_GPIO_Init+0x21c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a55      	ldr	r2, [pc, #340]	; (800357c <HAL_GPIO_Init+0x31c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d025      	beq.n	8003478 <HAL_GPIO_Init+0x218>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a54      	ldr	r2, [pc, #336]	; (8003580 <HAL_GPIO_Init+0x320>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d01f      	beq.n	8003474 <HAL_GPIO_Init+0x214>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a53      	ldr	r2, [pc, #332]	; (8003584 <HAL_GPIO_Init+0x324>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d019      	beq.n	8003470 <HAL_GPIO_Init+0x210>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_GPIO_Init+0x328>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_GPIO_Init+0x20c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a51      	ldr	r2, [pc, #324]	; (800358c <HAL_GPIO_Init+0x32c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00d      	beq.n	8003468 <HAL_GPIO_Init+0x208>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a50      	ldr	r2, [pc, #320]	; (8003590 <HAL_GPIO_Init+0x330>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <HAL_GPIO_Init+0x204>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a4f      	ldr	r2, [pc, #316]	; (8003594 <HAL_GPIO_Init+0x334>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_GPIO_Init+0x200>
 800345c:	2308      	movs	r3, #8
 800345e:	e010      	b.n	8003482 <HAL_GPIO_Init+0x222>
 8003460:	2309      	movs	r3, #9
 8003462:	e00e      	b.n	8003482 <HAL_GPIO_Init+0x222>
 8003464:	2307      	movs	r3, #7
 8003466:	e00c      	b.n	8003482 <HAL_GPIO_Init+0x222>
 8003468:	2306      	movs	r3, #6
 800346a:	e00a      	b.n	8003482 <HAL_GPIO_Init+0x222>
 800346c:	2305      	movs	r3, #5
 800346e:	e008      	b.n	8003482 <HAL_GPIO_Init+0x222>
 8003470:	2304      	movs	r3, #4
 8003472:	e006      	b.n	8003482 <HAL_GPIO_Init+0x222>
 8003474:	2303      	movs	r3, #3
 8003476:	e004      	b.n	8003482 <HAL_GPIO_Init+0x222>
 8003478:	2302      	movs	r3, #2
 800347a:	e002      	b.n	8003482 <HAL_GPIO_Init+0x222>
 800347c:	2301      	movs	r3, #1
 800347e:	e000      	b.n	8003482 <HAL_GPIO_Init+0x222>
 8003480:	2300      	movs	r3, #0
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	4093      	lsls	r3, r2
 800348c:	461a      	mov	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003494:	4936      	ldr	r1, [pc, #216]	; (8003570 <HAL_GPIO_Init+0x310>)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	089b      	lsrs	r3, r3, #2
 800349a:	3302      	adds	r3, #2
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034a2:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <HAL_GPIO_Init+0x338>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034c6:	4a34      	ldr	r2, [pc, #208]	; (8003598 <HAL_GPIO_Init+0x338>)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <HAL_GPIO_Init+0x338>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <HAL_GPIO_Init+0x338>)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034f6:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_GPIO_Init+0x338>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800351a:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_GPIO_Init+0x338>)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <HAL_GPIO_Init+0x338>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4013      	ands	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003544:	4a14      	ldr	r2, [pc, #80]	; (8003598 <HAL_GPIO_Init+0x338>)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	3301      	adds	r3, #1
 800354e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	f47f ae88 	bne.w	8003270 <HAL_GPIO_Init+0x10>
  }
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40023800 	.word	0x40023800
 8003570:	40013800 	.word	0x40013800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40021000 	.word	0x40021000
 8003588:	40021400 	.word	0x40021400
 800358c:	40021800 	.word	0x40021800
 8003590:	40021c00 	.word	0x40021c00
 8003594:	40022000 	.word	0x40022000
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	807b      	strh	r3, [r7, #2]
 80035a8:	4613      	mov	r3, r2
 80035aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035ac:	787b      	ldrb	r3, [r7, #1]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035b8:	e003      	b.n	80035c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43d9      	mvns	r1, r3
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	400b      	ands	r3, r1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	619a      	str	r2, [r3, #24]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd fa90 	bl	8000b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40013c00 	.word	0x40013c00

08003630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e12b      	b.n	800389a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fd fd5c 	bl	8001114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	; 0x24
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003694:	f002 f9cc 	bl	8005a30 <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4a81      	ldr	r2, [pc, #516]	; (80038a4 <HAL_I2C_Init+0x274>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d807      	bhi.n	80036b4 <HAL_I2C_Init+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a80      	ldr	r2, [pc, #512]	; (80038a8 <HAL_I2C_Init+0x278>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e006      	b.n	80036c2 <HAL_I2C_Init+0x92>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a7d      	ldr	r2, [pc, #500]	; (80038ac <HAL_I2C_Init+0x27c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0e7      	b.n	800389a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a78      	ldr	r2, [pc, #480]	; (80038b0 <HAL_I2C_Init+0x280>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9b      	lsrs	r3, r3, #18
 80036d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a6a      	ldr	r2, [pc, #424]	; (80038a4 <HAL_I2C_Init+0x274>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <HAL_I2C_Init+0xd4>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	e009      	b.n	8003718 <HAL_I2C_Init+0xe8>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	4a69      	ldr	r2, [pc, #420]	; (80038b4 <HAL_I2C_Init+0x284>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	3301      	adds	r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	430b      	orrs	r3, r1
 800371e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800372a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	495c      	ldr	r1, [pc, #368]	; (80038a4 <HAL_I2C_Init+0x274>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d819      	bhi.n	800376c <HAL_I2C_Init+0x13c>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e59      	subs	r1, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fbb1 f3f3 	udiv	r3, r1, r3
 8003746:	1c59      	adds	r1, r3, #1
 8003748:	f640 73fc 	movw	r3, #4092	; 0xffc
 800374c:	400b      	ands	r3, r1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_I2C_Init+0x138>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e59      	subs	r1, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003760:	3301      	adds	r3, #1
 8003762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003766:	e051      	b.n	800380c <HAL_I2C_Init+0x1dc>
 8003768:	2304      	movs	r3, #4
 800376a:	e04f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d111      	bne.n	8003798 <HAL_I2C_Init+0x168>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1e58      	subs	r0, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e012      	b.n	80037be <HAL_I2C_Init+0x18e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_I2C_Init+0x196>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e022      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_I2C_Init+0x1bc>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1e58      	subs	r0, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	440b      	add	r3, r1
 80037dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ea:	e00f      	b.n	800380c <HAL_I2C_Init+0x1dc>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	0099      	lsls	r1, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003802:	3301      	adds	r3, #1
 8003804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6809      	ldr	r1, [r1, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69da      	ldr	r2, [r3, #28]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800383a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6911      	ldr	r1, [r2, #16]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d2      	ldr	r2, [r2, #12]
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	430b      	orrs	r3, r1
 800384e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	000186a0 	.word	0x000186a0
 80038a8:	001e847f 	.word	0x001e847f
 80038ac:	003d08ff 	.word	0x003d08ff
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	10624dd3 	.word	0x10624dd3

080038b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	460b      	mov	r3, r1
 80038cc:	813b      	strh	r3, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038d2:	f7fe f949 	bl	8001b68 <HAL_GetTick>
 80038d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	f040 80d9 	bne.w	8003a98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2319      	movs	r3, #25
 80038ec:	2201      	movs	r2, #1
 80038ee:	496d      	ldr	r1, [pc, #436]	; (8003aa4 <HAL_I2C_Mem_Write+0x1ec>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f971 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0cc      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_I2C_Mem_Write+0x56>
 800390a:	2302      	movs	r3, #2
 800390c:	e0c5      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b01      	cmp	r3, #1
 8003922:	d007      	beq.n	8003934 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2221      	movs	r2, #33	; 0x21
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a4d      	ldr	r2, [pc, #308]	; (8003aa8 <HAL_I2C_Mem_Write+0x1f0>)
 8003974:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003976:	88f8      	ldrh	r0, [r7, #6]
 8003978:	893a      	ldrh	r2, [r7, #8]
 800397a:	8979      	ldrh	r1, [r7, #10]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4603      	mov	r3, r0
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f890 	bl	8003aac <I2C_RequestMemoryWrite>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d052      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e081      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f9f2 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d107      	bne.n	80039be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06b      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11b      	bne.n	8003a38 <HAL_I2C_Mem_Write+0x180>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1aa      	bne.n	8003996 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f9de 	bl	8003e06 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e016      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	00100002 	.word	0x00100002
 8003aa8:	ffff0000 	.word	0xffff0000

08003aac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	817b      	strh	r3, [r7, #10]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	813b      	strh	r3, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f878 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afc:	d103      	bne.n	8003b06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e05f      	b.n	8003bca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	492d      	ldr	r1, [pc, #180]	; (8003bd4 <I2C_RequestMemoryWrite+0x128>)
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f8b0 	bl	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e04c      	b.n	8003bca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f91a 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d107      	bne.n	8003b6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e02b      	b.n	8003bca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b78:	893b      	ldrh	r3, [r7, #8]
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	e021      	b.n	8003bc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b84:	893b      	ldrh	r3, [r7, #8]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	6a39      	ldr	r1, [r7, #32]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f8f4 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00d      	beq.n	8003bbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d107      	bne.n	8003bba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e005      	b.n	8003bca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bbe:	893b      	ldrh	r3, [r7, #8]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	00010002 	.word	0x00010002

08003bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be8:	e025      	b.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d021      	beq.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fd ffb9 	bl	8001b68 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e023      	b.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10d      	bne.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	43da      	mvns	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf0c      	ite	eq
 8003c52:	2301      	moveq	r3, #1
 8003c54:	2300      	movne	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	e00c      	b.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	43da      	mvns	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d0b6      	beq.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c94:	e051      	b.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca4:	d123      	bne.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e046      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d021      	beq.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7fd ff37 	bl	8001b68 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d116      	bne.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e020      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10c      	bne.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bf14      	ite	ne
 8003d56:	2301      	movne	r3, #1
 8003d58:	2300      	moveq	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	e00b      	b.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf14      	ite	ne
 8003d70:	2301      	movne	r3, #1
 8003d72:	2300      	moveq	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d18d      	bne.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d90:	e02d      	b.n	8003dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f878 	bl	8003e88 <I2C_IsAcknowledgeFailed>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e02d      	b.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d021      	beq.n	8003dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fd fedd 	bl	8001b68 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e007      	b.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df8:	2b80      	cmp	r3, #128	; 0x80
 8003dfa:	d1ca      	bne.n	8003d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e12:	e02d      	b.n	8003e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f837 	bl	8003e88 <I2C_IsAcknowledgeFailed>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e02d      	b.n	8003e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d021      	beq.n	8003e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2c:	f7fd fe9c 	bl	8001b68 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d302      	bcc.n	8003e42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e007      	b.n	8003e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d1ca      	bne.n	8003e14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9e:	d11b      	bne.n	8003ed8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ea8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f043 0204 	orr.w	r2, r3, #4
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e000      	b.n	8003eda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	b08f      	sub	sp, #60	; 0x3c
 8003ee8:	af0a      	add	r7, sp, #40	; 0x28
 8003eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e10f      	b.n	8004116 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f015 fe7d 	bl	8019c10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d102      	bne.n	8003f30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f002 fbaf 	bl	8006698 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	687e      	ldr	r6, [r7, #4]
 8003f42:	466d      	mov	r5, sp
 8003f44:	f106 0410 	add.w	r4, r6, #16
 8003f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f58:	1d33      	adds	r3, r6, #4
 8003f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5c:	6838      	ldr	r0, [r7, #0]
 8003f5e:	f002 fa91 	bl	8006484 <USB_CoreInit>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0d0      	b.n	8004116 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f002 fb9c 	bl	80066b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e04a      	b.n	800401c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	333d      	adds	r3, #61	; 0x3d
 8003f96:	2201      	movs	r2, #1
 8003f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	333c      	adds	r3, #60	; 0x3c
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fae:	7bfa      	ldrb	r2, [r7, #15]
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	b298      	uxth	r0, r3
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3342      	adds	r3, #66	; 0x42
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	333f      	adds	r3, #63	; 0x3f
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3344      	adds	r3, #68	; 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3348      	adds	r3, #72	; 0x48
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004002:	7bfa      	ldrb	r2, [r7, #15]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	3350      	adds	r3, #80	; 0x50
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	3301      	adds	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d3af      	bcc.n	8003f86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e044      	b.n	80040b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800402c:	7bfa      	ldrb	r2, [r7, #15]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800409a:	7bfa      	ldrb	r2, [r7, #15]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	3301      	adds	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d3b5      	bcc.n	800402c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	687e      	ldr	r6, [r7, #4]
 80040c8:	466d      	mov	r5, sp
 80040ca:	f106 0410 	add.w	r4, r6, #16
 80040ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040da:	e885 0003 	stmia.w	r5, {r0, r1}
 80040de:	1d33      	adds	r3, r6, #4
 80040e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f002 fb34 	bl	8006750 <USB_DevInit>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e00d      	b.n	8004116 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f003 fba5 	bl	800785e <USB_DevDisconnect>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800411e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_PCD_Start+0x16>
 8004130:	2302      	movs	r3, #2
 8004132:	e012      	b.n	800415a <HAL_PCD_Start+0x3c>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f002 fa99 	bl	8006678 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fb67 	bl	800781e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004162:	b590      	push	{r4, r7, lr}
 8004164:	b08d      	sub	sp, #52	; 0x34
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f003 fc1e 	bl	80079ba <USB_GetMode>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 838f 	bne.w	80048a4 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f003 fb87 	bl	800789e <USB_ReadInterrupts>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8385 	beq.w	80048a2 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f003 fb7e 	bl	800789e <USB_ReadInterrupts>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f002 0202 	and.w	r2, r2, #2
 80041ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f003 fb6c 	bl	800789e <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d161      	bne.n	8004294 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0210 	bic.w	r2, r2, #16
 80041de:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	0c5b      	lsrs	r3, r3, #17
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	2b02      	cmp	r3, #2
 800420a:	d124      	bne.n	8004256 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d035      	beq.n	8004284 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004226:	b29b      	uxth	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6a38      	ldr	r0, [r7, #32]
 800422c:	f003 f9a9 	bl	8007582 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423c:	441a      	add	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424e:	441a      	add	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	619a      	str	r2, [r3, #24]
 8004254:	e016      	b.n	8004284 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	0c5b      	lsrs	r3, r3, #17
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	2b06      	cmp	r3, #6
 8004260:	d110      	bne.n	8004284 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004268:	2208      	movs	r2, #8
 800426a:	4619      	mov	r1, r3
 800426c:	6a38      	ldr	r0, [r7, #32]
 800426e:	f003 f988 	bl	8007582 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427e:	441a      	add	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0210 	orr.w	r2, r2, #16
 8004292:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f003 fb00 	bl	800789e <USB_ReadInterrupts>
 800429e:	4603      	mov	r3, r0
 80042a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042a8:	d16e      	bne.n	8004388 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 fb05 	bl	80078c2 <USB_ReadDevAllOutEpInterrupt>
 80042b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042ba:	e062      	b.n	8004382 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d057      	beq.n	8004376 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f003 fb28 	bl	8007926 <USB_ReadDevOutEPInterrupt>
 80042d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	2301      	movs	r3, #1
 80042f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fda2 	bl	8004e40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00c      	beq.n	8004320 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	2308      	movs	r3, #8
 8004316:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fe9c 	bl	8005058 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	2310      	movs	r3, #16
 800433a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	2320      	movs	r3, #32
 8004356:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004374:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	3301      	adds	r3, #1
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d199      	bne.n	80042bc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f003 fa86 	bl	800789e <USB_ReadInterrupts>
 8004392:	4603      	mov	r3, r0
 8004394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800439c:	f040 80c0 	bne.w	8004520 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f003 faa5 	bl	80078f4 <USB_ReadDevAllInEpInterrupt>
 80043aa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80043b0:	e0b2      	b.n	8004518 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80a7 	beq.w	800450c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 fac9 	bl	8007960 <USB_ReadDevInEPInterrupt>
 80043ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d057      	beq.n	800448a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	2201      	movs	r2, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69f9      	ldr	r1, [r7, #28]
 80043f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043fa:	4013      	ands	r3, r2
 80043fc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	461a      	mov	r2, r3
 800440c:	2301      	movs	r3, #1
 800440e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d132      	bne.n	800447e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	3348      	adds	r3, #72	; 0x48
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4403      	add	r3, r0
 8004438:	3344      	adds	r3, #68	; 0x44
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4419      	add	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4403      	add	r3, r0
 800444c:	3348      	adds	r3, #72	; 0x48
 800444e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <HAL_PCD_IRQHandler+0x31c>
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3350      	adds	r3, #80	; 0x50
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d108      	bne.n	800447e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004476:	461a      	mov	r2, r3
 8004478:	2101      	movs	r1, #1
 800447a:	f003 facd 	bl	8007a18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f015 fc52 	bl	8019d2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	461a      	mov	r2, r3
 80044a2:	2308      	movs	r3, #8
 80044a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	461a      	mov	r2, r3
 80044be:	2310      	movs	r3, #16
 80044c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	461a      	mov	r2, r3
 80044da:	2340      	movs	r3, #64	; 0x40
 80044dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	461a      	mov	r2, r3
 80044f6:	2302      	movs	r3, #2
 80044f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fc0c 	bl	8004d24 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	3301      	adds	r3, #1
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	2b00      	cmp	r3, #0
 800451c:	f47f af49 	bne.w	80043b2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f003 f9ba 	bl	800789e <USB_ReadInterrupts>
 800452a:	4603      	mov	r3, r0
 800452c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004534:	d114      	bne.n	8004560 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004544:	f023 0301 	bic.w	r3, r3, #1
 8004548:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f015 fc66 	bl	8019e1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800455e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f003 f99a 	bl	800789e <USB_ReadInterrupts>
 800456a:	4603      	mov	r3, r0
 800456c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004574:	d112      	bne.n	800459c <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d102      	bne.n	800458c <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f015 fc22 	bl	8019dd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800459a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f003 f97c 	bl	800789e <USB_ReadInterrupts>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	f040 80c7 	bne.w	8004742 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2110      	movs	r1, #16
 80045ce:	4618      	mov	r0, r3
 80045d0:	f002 fa22 	bl	8006a18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d8:	e056      	b.n	8004688 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e6:	461a      	mov	r2, r3
 80045e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800460c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004628:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800462c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	4413      	add	r3, r2
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	461a      	mov	r2, r3
 800463c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004640:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004660:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	440a      	add	r2, r1
 8004678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004680:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	3301      	adds	r3, #1
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800468e:	429a      	cmp	r2, r3
 8004690:	d3a3      	bcc.n	80045da <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80046a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d016      	beq.n	80046dc <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	69fa      	ldr	r2, [r7, #28]
 80046ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046be:	f043 030b 	orr.w	r3, r3, #11
 80046c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d4:	f043 030b 	orr.w	r3, r3, #11
 80046d8:	6453      	str	r3, [r2, #68]	; 0x44
 80046da:	e015      	b.n	8004708 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80046f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004702:	f043 030b 	orr.w	r3, r3, #11
 8004706:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004716:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800471a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800472c:	461a      	mov	r2, r3
 800472e:	f003 f973 	bl	8007a18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f003 f8a9 	bl	800789e <USB_ReadInterrupts>
 800474c:	4603      	mov	r3, r0
 800474e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004756:	d124      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f003 f939 	bl	80079d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f002 f9b2 	bl	8006ad0 <USB_GetDevSpeed>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681c      	ldr	r4, [r3, #0]
 8004778:	f001 f950 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 800477c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004782:	b2db      	uxtb	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	4620      	mov	r0, r4
 8004788:	f001 fed4 	bl	8006534 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f015 faf6 	bl	8019d7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695a      	ldr	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80047a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f003 f879 	bl	800789e <USB_ReadInterrupts>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d10a      	bne.n	80047cc <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f015 fad3 	bl	8019d62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f002 0208 	and.w	r2, r2, #8
 80047ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f003 f864 	bl	800789e <USB_ReadInterrupts>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e0:	d10f      	bne.n	8004802 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f015 fb35 	bl	8019e5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695a      	ldr	r2, [r3, #20]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f003 f849 	bl	800789e <USB_ReadInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004816:	d10f      	bne.n	8004838 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	b2db      	uxtb	r3, r3
 8004820:	4619      	mov	r1, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f015 fb08 	bl	8019e38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f003 f82e 	bl	800789e <USB_ReadInterrupts>
 8004842:	4603      	mov	r3, r0
 8004844:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d10a      	bne.n	8004864 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f015 fb16 	bl	8019e80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f003 f818 	bl	800789e <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d115      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f015 fb06 	bl	8019e9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	e000      	b.n	80048a4 <HAL_PCD_IRQHandler+0x742>
      return;
 80048a2:	bf00      	nop
    }
  }
}
 80048a4:	3734      	adds	r7, #52	; 0x34
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}

080048aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_PCD_SetAddress+0x1a>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e013      	b.n	80048ec <HAL_PCD_SetAddress+0x42>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	4611      	mov	r1, r2
 80048dc:	4618      	mov	r0, r3
 80048de:	f002 ff79 	bl	80077d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	70fb      	strb	r3, [r7, #3]
 8004906:	460b      	mov	r3, r1
 8004908:	803b      	strh	r3, [r7, #0]
 800490a:	4613      	mov	r3, r2
 800490c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004916:	2b00      	cmp	r3, #0
 8004918:	da0f      	bge.n	800493a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	4613      	mov	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	3338      	adds	r3, #56	; 0x38
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	3304      	adds	r3, #4
 8004930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	705a      	strb	r2, [r3, #1]
 8004938:	e00f      	b.n	800495a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	4413      	add	r3, r2
 8004950:	3304      	adds	r3, #4
 8004952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004966:	883a      	ldrh	r2, [r7, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	78ba      	ldrb	r2, [r7, #2]
 8004970:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004984:	78bb      	ldrb	r3, [r7, #2]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d102      	bne.n	8004990 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_PCD_EP_Open+0xaa>
 800499a:	2302      	movs	r3, #2
 800499c:	e00e      	b.n	80049bc <HAL_PCD_EP_Open+0xc8>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68f9      	ldr	r1, [r7, #12]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f002 f8b3 	bl	8006b18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80049ba:	7afb      	ldrb	r3, [r7, #11]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	da0f      	bge.n	80049f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	3338      	adds	r3, #56	; 0x38
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	3304      	adds	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	705a      	strb	r2, [r3, #1]
 80049f6:	e00f      	b.n	8004a18 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 020f 	and.w	r2, r3, #15
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3304      	adds	r3, #4
 8004a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_PCD_EP_Close+0x6e>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e00e      	b.n	8004a50 <HAL_PCD_EP_Close+0x8c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f002 f8ef 	bl	8006c24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	460b      	mov	r3, r1
 8004a66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a68:	7afb      	ldrb	r3, [r7, #11]
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3304      	adds	r3, #4
 8004a80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2200      	movs	r2, #0
 8004a92:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2200      	movs	r2, #0
 8004a98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9a:	7afb      	ldrb	r3, [r7, #11]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d102      	bne.n	8004ab4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ab4:	7afb      	ldrb	r3, [r7, #11]
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	f002 fbca 	bl	8007264 <USB_EP0StartXfer>
 8004ad0:	e008      	b.n	8004ae4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	6979      	ldr	r1, [r7, #20]
 8004ae0:	f002 f97c 	bl	8006ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	f003 020f 	and.w	r2, r3, #15
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b10:	681b      	ldr	r3, [r3, #0]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	f003 020f 	and.w	r2, r3, #15
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	3338      	adds	r3, #56	; 0x38
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	3304      	adds	r3, #4
 8004b42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d102      	bne.n	8004b76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b76:	7afb      	ldrb	r3, [r7, #11]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6979      	ldr	r1, [r7, #20]
 8004b8e:	f002 fb69 	bl	8007264 <USB_EP0StartXfer>
 8004b92:	e008      	b.n	8004ba6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6979      	ldr	r1, [r7, #20]
 8004ba2:	f002 f91b 	bl	8006ddc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	f003 020f 	and.w	r2, r3, #15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d901      	bls.n	8004bce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e050      	b.n	8004c70 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da0f      	bge.n	8004bf6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	f003 020f 	and.w	r2, r3, #15
 8004bdc:	4613      	mov	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	3338      	adds	r3, #56	; 0x38
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	3304      	adds	r3, #4
 8004bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	705a      	strb	r2, [r3, #1]
 8004bf4:	e00d      	b.n	8004c12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4413      	add	r3, r2
 8004c08:	3304      	adds	r3, #4
 8004c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_PCD_EP_SetStall+0x82>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e01e      	b.n	8004c70 <HAL_PCD_EP_SetStall+0xc0>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f002 fcf5 	bl	8007630 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	b2d9      	uxtb	r1, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c60:	461a      	mov	r2, r3
 8004c62:	f002 fed9 	bl	8007a18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d901      	bls.n	8004c96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e042      	b.n	8004d1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da0f      	bge.n	8004cbe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	f003 020f 	and.w	r2, r3, #15
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	3338      	adds	r3, #56	; 0x38
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	705a      	strb	r2, [r3, #1]
 8004cbc:	e00f      	b.n	8004cde <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d101      	bne.n	8004cfe <HAL_PCD_EP_ClrStall+0x86>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	e00e      	b.n	8004d1c <HAL_PCD_EP_ClrStall+0xa4>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f002 fcfc 	bl	800770a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08a      	sub	sp, #40	; 0x28
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	3338      	adds	r3, #56	; 0x38
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	4413      	add	r3, r2
 8004d48:	3304      	adds	r3, #4
 8004d4a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d901      	bls.n	8004d5c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e06c      	b.n	8004e36 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d902      	bls.n	8004d78 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	3303      	adds	r3, #3
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d80:	e02b      	b.n	8004dda <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	695a      	ldr	r2, [r3, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d902      	bls.n	8004d9e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3303      	adds	r3, #3
 8004da2:	089b      	lsrs	r3, r3, #2
 8004da4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68d9      	ldr	r1, [r3, #12]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	4603      	mov	r3, r0
 8004dbc:	6978      	ldr	r0, [r7, #20]
 8004dbe:	f002 fba3 	bl	8007508 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d809      	bhi.n	8004e04 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699a      	ldr	r2, [r3, #24]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d203      	bcs.n	8004e04 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1be      	bne.n	8004d82 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d811      	bhi.n	8004e34 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	2201      	movs	r2, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	6939      	ldr	r1, [r7, #16]
 8004e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e30:	4013      	ands	r3, r2
 8004e32:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	333c      	adds	r3, #60	; 0x3c
 8004e58:	3304      	adds	r3, #4
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	f040 80a0 	bne.w	8004fb8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d015      	beq.n	8004eae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a72      	ldr	r2, [pc, #456]	; (8005050 <PCD_EP_OutXfrComplete_int+0x210>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	f240 80dd 	bls.w	8005046 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 80d7 	beq.w	8005046 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	6093      	str	r3, [r2, #8]
 8004eac:	e0cb      	b.n	8005046 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f003 0320 	and.w	r3, r3, #32
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	e0bc      	b.n	8005046 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f040 80b7 	bne.w	8005046 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a5d      	ldr	r2, [pc, #372]	; (8005050 <PCD_EP_OutXfrComplete_int+0x210>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d90f      	bls.n	8004f00 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efc:	6093      	str	r3, [r2, #8]
 8004efe:	e0a2      	b.n	8005046 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f12:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	0159      	lsls	r1, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004f26:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	1a9b      	subs	r3, r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4403      	add	r3, r0
 8004f36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004f3a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4403      	add	r3, r0
 8004f5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4419      	add	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4403      	add	r3, r0
 8004f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f78:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d114      	bne.n	8004faa <PCD_EP_OutXfrComplete_int+0x16a>
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	4613      	mov	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d108      	bne.n	8004faa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	f002 fd37 	bl	8007a18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f014 fea1 	bl	8019cf8 <HAL_PCD_DataOutStageCallback>
 8004fb6:	e046      	b.n	8005046 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4a26      	ldr	r2, [pc, #152]	; (8005054 <PCD_EP_OutXfrComplete_int+0x214>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d124      	bne.n	800500a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fdc:	6093      	str	r3, [r2, #8]
 8004fde:	e032      	b.n	8005046 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d008      	beq.n	8004ffc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	4619      	mov	r1, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f014 fe78 	bl	8019cf8 <HAL_PCD_DataOutStageCallback>
 8005008:	e01d      	b.n	8005046 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d114      	bne.n	800503a <PCD_EP_OutXfrComplete_int+0x1fa>
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005032:	461a      	mov	r2, r3
 8005034:	2100      	movs	r1, #0
 8005036:	f002 fcef 	bl	8007a18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f014 fe59 	bl	8019cf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	4f54300a 	.word	0x4f54300a
 8005054:	4f54310a 	.word	0x4f54310a

08005058 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	333c      	adds	r3, #60	; 0x3c
 8005070:	3304      	adds	r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d90e      	bls.n	80050ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005094:	2b00      	cmp	r3, #0
 8005096:	d009      	beq.n	80050ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a4:	461a      	mov	r2, r3
 80050a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f014 fe11 	bl	8019cd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d90c      	bls.n	80050d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d108      	bne.n	80050d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050cc:	461a      	mov	r2, r3
 80050ce:	2101      	movs	r1, #1
 80050d0:	f002 fca2 	bl	8007a18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	4f54300a 	.word	0x4f54300a

080050e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
 80050f0:	4613      	mov	r3, r2
 80050f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005102:	883b      	ldrh	r3, [r7, #0]
 8005104:	0419      	lsls	r1, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	430a      	orrs	r2, r1
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
 8005110:	e028      	b.n	8005164 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	4413      	add	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005120:	2300      	movs	r3, #0
 8005122:	73fb      	strb	r3, [r7, #15]
 8005124:	e00d      	b.n	8005142 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	3340      	adds	r3, #64	; 0x40
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4413      	add	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	3301      	adds	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	3b01      	subs	r3, #1
 8005148:	429a      	cmp	r2, r3
 800514a:	d3ec      	bcc.n	8005126 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800514c:	883b      	ldrh	r3, [r7, #0]
 800514e:	0418      	lsls	r0, r3, #16
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	3b01      	subs	r3, #1
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	4302      	orrs	r2, r0
 800515c:	3340      	adds	r3, #64	; 0x40
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	887a      	ldrh	r2, [r7, #2]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e236      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d050      	beq.n	8005250 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ae:	4b9e      	ldr	r3, [pc, #632]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d00c      	beq.n	80051d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ba:	4b9b      	ldr	r3, [pc, #620]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d112      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c6:	4b98      	ldr	r3, [pc, #608]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d2:	d10b      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	4b94      	ldr	r3, [pc, #592]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d036      	beq.n	800524e <HAL_RCC_OscConfig+0xbe>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d132      	bne.n	800524e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e211      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	4b8e      	ldr	r3, [pc, #568]	; (800542c <HAL_RCC_OscConfig+0x29c>)
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d013      	beq.n	8005226 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fe:	f7fc fcb3 	bl	8001b68 <HAL_GetTick>
 8005202:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005206:	f7fc fcaf 	bl	8001b68 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b64      	cmp	r3, #100	; 0x64
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e1fb      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005218:	4b83      	ldr	r3, [pc, #524]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x76>
 8005224:	e014      	b.n	8005250 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fc fc9f 	bl	8001b68 <HAL_GetTick>
 800522a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800522e:	f7fc fc9b 	bl	8001b68 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b64      	cmp	r3, #100	; 0x64
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e1e7      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005240:	4b79      	ldr	r3, [pc, #484]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x9e>
 800524c:	e000      	b.n	8005250 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800524e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d077      	beq.n	800534c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800525c:	4b72      	ldr	r3, [pc, #456]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00b      	beq.n	8005280 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005268:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005270:	2b08      	cmp	r3, #8
 8005272:	d126      	bne.n	80052c2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005274:	4b6c      	ldr	r3, [pc, #432]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d120      	bne.n	80052c2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005280:	4b69      	ldr	r3, [pc, #420]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_RCC_OscConfig+0x108>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d001      	beq.n	8005298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e1bb      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005298:	4b63      	ldr	r3, [pc, #396]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	21f8      	movs	r1, #248	; 0xf8
 80052a6:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	fa91 f1a1 	rbit	r1, r1
 80052ae:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	fab1 f181 	clz	r1, r1
 80052b6:	b2c9      	uxtb	r1, r1
 80052b8:	408b      	lsls	r3, r1
 80052ba:	495b      	ldr	r1, [pc, #364]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052c0:	e044      	b.n	800534c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02a      	beq.n	8005320 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052ca:	4b59      	ldr	r3, [pc, #356]	; (8005430 <HAL_RCC_OscConfig+0x2a0>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fc fc4a 	bl	8001b68 <HAL_GetTick>
 80052d4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052d8:	f7fc fc46 	bl	8001b68 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e192      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ea:	4b4f      	ldr	r3, [pc, #316]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b4c      	ldr	r3, [pc, #304]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	21f8      	movs	r1, #248	; 0xf8
 8005304:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005306:	6939      	ldr	r1, [r7, #16]
 8005308:	fa91 f1a1 	rbit	r1, r1
 800530c:	60f9      	str	r1, [r7, #12]
  return result;
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	fab1 f181 	clz	r1, r1
 8005314:	b2c9      	uxtb	r1, r1
 8005316:	408b      	lsls	r3, r1
 8005318:	4943      	ldr	r1, [pc, #268]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 800531a:	4313      	orrs	r3, r2
 800531c:	600b      	str	r3, [r1, #0]
 800531e:	e015      	b.n	800534c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005320:	4b43      	ldr	r3, [pc, #268]	; (8005430 <HAL_RCC_OscConfig+0x2a0>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005326:	f7fc fc1f 	bl	8001b68 <HAL_GetTick>
 800532a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532e:	f7fc fc1b 	bl	8001b68 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e167      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005340:	4b39      	ldr	r3, [pc, #228]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d030      	beq.n	80053ba <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d016      	beq.n	800538e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <HAL_RCC_OscConfig+0x2a4>)
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005366:	f7fc fbff 	bl	8001b68 <HAL_GetTick>
 800536a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800536e:	f7fc fbfb 	bl	8001b68 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e147      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005380:	4b29      	ldr	r3, [pc, #164]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 8005382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x1de>
 800538c:	e015      	b.n	80053ba <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800538e:	4b29      	ldr	r3, [pc, #164]	; (8005434 <HAL_RCC_OscConfig+0x2a4>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005394:	f7fc fbe8 	bl	8001b68 <HAL_GetTick>
 8005398:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800539c:	f7fc fbe4 	bl	8001b68 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e130      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ae:	4b1e      	ldr	r3, [pc, #120]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8087 	beq.w	80054d6 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ce:	4b16      	ldr	r3, [pc, #88]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d110      	bne.n	80053fc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a11      	ldr	r2, [pc, #68]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ea:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <HAL_RCC_OscConfig+0x298>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <HAL_RCC_OscConfig+0x2a8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a0d      	ldr	r2, [pc, #52]	; (8005438 <HAL_RCC_OscConfig+0x2a8>)
 8005402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005406:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_RCC_OscConfig+0x2a8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d122      	bne.n	800545a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005414:	4b08      	ldr	r3, [pc, #32]	; (8005438 <HAL_RCC_OscConfig+0x2a8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a07      	ldr	r2, [pc, #28]	; (8005438 <HAL_RCC_OscConfig+0x2a8>)
 800541a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005420:	f7fc fba2 	bl	8001b68 <HAL_GetTick>
 8005424:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005426:	e012      	b.n	800544e <HAL_RCC_OscConfig+0x2be>
 8005428:	40023800 	.word	0x40023800
 800542c:	40023802 	.word	0x40023802
 8005430:	42470000 	.word	0x42470000
 8005434:	42470e80 	.word	0x42470e80
 8005438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543c:	f7fc fb94 	bl	8001b68 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e0e0      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544e:	4b72      	ldr	r3, [pc, #456]	; (8005618 <HAL_RCC_OscConfig+0x488>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d0f0      	beq.n	800543c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	4b6f      	ldr	r3, [pc, #444]	; (800561c <HAL_RCC_OscConfig+0x48c>)
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d015      	beq.n	8005498 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546c:	f7fc fb7c 	bl	8001b68 <HAL_GetTick>
 8005470:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005472:	e00a      	b.n	800548a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fc fb78 	bl	8001b68 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e0c2      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548a:	4b65      	ldr	r3, [pc, #404]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ee      	beq.n	8005474 <HAL_RCC_OscConfig+0x2e4>
 8005496:	e014      	b.n	80054c2 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005498:	f7fc fb66 	bl	8001b68 <HAL_GetTick>
 800549c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800549e:	e00a      	b.n	80054b6 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054a0:	f7fc fb62 	bl	8001b68 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e0ac      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b6:	4b5a      	ldr	r3, [pc, #360]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1ee      	bne.n	80054a0 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ca:	4b55      	ldr	r3, [pc, #340]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	4a54      	ldr	r2, [pc, #336]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8097 	beq.w	800560e <HAL_RCC_OscConfig+0x47e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054e0:	4b4f      	ldr	r3, [pc, #316]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d061      	beq.n	80055b0 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d146      	bne.n	8005582 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f4:	4b4b      	ldr	r3, [pc, #300]	; (8005624 <HAL_RCC_OscConfig+0x494>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fc fb35 	bl	8001b68 <HAL_GetTick>
 80054fe:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005502:	f7fc fb31 	bl	8001b68 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b64      	cmp	r3, #100	; 0x64
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e07d      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005514:	4b42      	ldr	r3, [pc, #264]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f0      	bne.n	8005502 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005520:	4b3f      	ldr	r3, [pc, #252]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4b40      	ldr	r3, [pc, #256]	; (8005628 <HAL_RCC_OscConfig+0x498>)
 8005526:	4013      	ands	r3, r2
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	69d1      	ldr	r1, [r2, #28]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6a12      	ldr	r2, [r2, #32]
 8005530:	4311      	orrs	r1, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005536:	0192      	lsls	r2, r2, #6
 8005538:	4311      	orrs	r1, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800553e:	0612      	lsls	r2, r2, #24
 8005540:	4311      	orrs	r1, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005546:	0852      	lsrs	r2, r2, #1
 8005548:	3a01      	subs	r2, #1
 800554a:	0412      	lsls	r2, r2, #16
 800554c:	430a      	orrs	r2, r1
 800554e:	4934      	ldr	r1, [pc, #208]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005554:	4b33      	ldr	r3, [pc, #204]	; (8005624 <HAL_RCC_OscConfig+0x494>)
 8005556:	2201      	movs	r2, #1
 8005558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fc fb05 	bl	8001b68 <HAL_GetTick>
 800555e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005562:	f7fc fb01 	bl	8001b68 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b64      	cmp	r3, #100	; 0x64
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e04d      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005574:	4b2a      	ldr	r3, [pc, #168]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x3d2>
 8005580:	e045      	b.n	800560e <HAL_RCC_OscConfig+0x47e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005582:	4b28      	ldr	r3, [pc, #160]	; (8005624 <HAL_RCC_OscConfig+0x494>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005588:	f7fc faee 	bl	8001b68 <HAL_GetTick>
 800558c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005590:	f7fc faea 	bl	8001b68 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b64      	cmp	r3, #100	; 0x64
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e036      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a2:	4b1f      	ldr	r3, [pc, #124]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x400>
 80055ae:	e02e      	b.n	800560e <HAL_RCC_OscConfig+0x47e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e029      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80055bc:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_RCC_OscConfig+0x490>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d11c      	bne.n	800560a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d115      	bne.n	800560a <HAL_RCC_OscConfig+0x47a>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	099b      	lsrs	r3, r3, #6
 80055e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10d      	bne.n	800560a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x47a>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d001      	beq.n	800560e <HAL_RCC_OscConfig+0x47e>
        {
          return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3728      	adds	r7, #40	; 0x28
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40007000 	.word	0x40007000
 800561c:	40023870 	.word	0x40023870
 8005620:	40023800 	.word	0x40023800
 8005624:	42470060 	.word	0x42470060
 8005628:	f0bc8000 	.word	0xf0bc8000

0800562c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0d2      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005640:	4b6b      	ldr	r3, [pc, #428]	; (80057f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d90c      	bls.n	8005668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564e:	4b68      	ldr	r3, [pc, #416]	; (80057f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005656:	4b66      	ldr	r3, [pc, #408]	; (80057f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d001      	beq.n	8005668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0be      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d020      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005680:	4b5c      	ldr	r3, [pc, #368]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	4a5b      	ldr	r2, [pc, #364]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800568a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005698:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4a55      	ldr	r2, [pc, #340]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 800569e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a4:	4b53      	ldr	r3, [pc, #332]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	4950      	ldr	r1, [pc, #320]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d040      	beq.n	8005744 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d107      	bne.n	80056da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ca:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d115      	bne.n	8005702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e085      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d107      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e2:	4b44      	ldr	r3, [pc, #272]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e079      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f2:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e071      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005702:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f023 0203 	bic.w	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4939      	ldr	r1, [pc, #228]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005710:	4313      	orrs	r3, r2
 8005712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005714:	f7fc fa28 	bl	8001b68 <HAL_GetTick>
 8005718:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	e00a      	b.n	8005732 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800571c:	f7fc fa24 	bl	8001b68 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	f241 3288 	movw	r2, #5000	; 0x1388
 800572a:	4293      	cmp	r3, r2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e059      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 020c 	and.w	r2, r3, #12
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	429a      	cmp	r2, r3
 8005742:	d1eb      	bne.n	800571c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005744:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d20c      	bcs.n	800576c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b27      	ldr	r3, [pc, #156]	; (80057f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800575a:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e03c      	b.n	80057e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d008      	beq.n	800578a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005778:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	491b      	ldr	r1, [pc, #108]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005796:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4913      	ldr	r1, [pc, #76]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80057aa:	f000 f82b 	bl	8005804 <HAL_RCC_GetSysClockFreq>
 80057ae:	4601      	mov	r1, r0
 80057b0:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCC_ClockConfig+0x1c8>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b8:	22f0      	movs	r2, #240	; 0xf0
 80057ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	fa92 f2a2 	rbit	r2, r2
 80057c2:	60fa      	str	r2, [r7, #12]
  return result;
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	fab2 f282 	clz	r2, r2
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	40d3      	lsrs	r3, r2
 80057ce:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <HAL_RCC_ClockConfig+0x1cc>)
 80057d0:	5cd3      	ldrb	r3, [r2, r3]
 80057d2:	fa21 f303 	lsr.w	r3, r1, r3
 80057d6:	4a09      	ldr	r2, [pc, #36]	; (80057fc <HAL_RCC_ClockConfig+0x1d0>)
 80057d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_ClockConfig+0x1d4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fb ffb4 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023c00 	.word	0x40023c00
 80057f4:	40023800 	.word	0x40023800
 80057f8:	0801e6dc 	.word	0x0801e6dc
 80057fc:	2000002c 	.word	0x2000002c
 8005800:	20000030 	.word	0x20000030

08005804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005808:	b094      	sub	sp, #80	; 0x50
 800580a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
 8005810:	2300      	movs	r3, #0
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005814:	2300      	movs	r3, #0
 8005816:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800581c:	4b7c      	ldr	r3, [pc, #496]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 030c 	and.w	r3, r3, #12
 8005824:	2b08      	cmp	r3, #8
 8005826:	d00d      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x40>
 8005828:	2b08      	cmp	r3, #8
 800582a:	f200 80e7 	bhi.w	80059fc <HAL_RCC_GetSysClockFreq+0x1f8>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_RCC_GetSysClockFreq+0x34>
 8005832:	2b04      	cmp	r3, #4
 8005834:	d003      	beq.n	800583e <HAL_RCC_GetSysClockFreq+0x3a>
 8005836:	e0e1      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005838:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x210>)
 800583a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800583c:	e0e1      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800583e:	4b76      	ldr	r3, [pc, #472]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x214>)
 8005840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005842:	e0de      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005844:	4b72      	ldr	r3, [pc, #456]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800584c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800584e:	4b70      	ldr	r3, [pc, #448]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d065      	beq.n	8005926 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800585a:	4b6d      	ldr	r3, [pc, #436]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	099b      	lsrs	r3, r3, #6
 8005860:	2200      	movs	r2, #0
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
 8005864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800586c:	633b      	str	r3, [r7, #48]	; 0x30
 800586e:	2300      	movs	r3, #0
 8005870:	637b      	str	r3, [r7, #52]	; 0x34
 8005872:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005876:	4622      	mov	r2, r4
 8005878:	462b      	mov	r3, r5
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	0159      	lsls	r1, r3, #5
 8005884:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005888:	0150      	lsls	r0, r2, #5
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4621      	mov	r1, r4
 8005890:	1a51      	subs	r1, r2, r1
 8005892:	6139      	str	r1, [r7, #16]
 8005894:	4629      	mov	r1, r5
 8005896:	eb63 0301 	sbc.w	r3, r3, r1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058a8:	4659      	mov	r1, fp
 80058aa:	018b      	lsls	r3, r1, #6
 80058ac:	4651      	mov	r1, sl
 80058ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058b2:	4651      	mov	r1, sl
 80058b4:	018a      	lsls	r2, r1, #6
 80058b6:	46d4      	mov	ip, sl
 80058b8:	ebb2 080c 	subs.w	r8, r2, ip
 80058bc:	4659      	mov	r1, fp
 80058be:	eb63 0901 	sbc.w	r9, r3, r1
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058d6:	4690      	mov	r8, r2
 80058d8:	4699      	mov	r9, r3
 80058da:	4623      	mov	r3, r4
 80058dc:	eb18 0303 	adds.w	r3, r8, r3
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	462b      	mov	r3, r5
 80058e4:	eb49 0303 	adc.w	r3, r9, r3
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80058f6:	4629      	mov	r1, r5
 80058f8:	024b      	lsls	r3, r1, #9
 80058fa:	4620      	mov	r0, r4
 80058fc:	4629      	mov	r1, r5
 80058fe:	4604      	mov	r4, r0
 8005900:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005904:	4601      	mov	r1, r0
 8005906:	024a      	lsls	r2, r1, #9
 8005908:	4610      	mov	r0, r2
 800590a:	4619      	mov	r1, r3
 800590c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800590e:	2200      	movs	r2, #0
 8005910:	62bb      	str	r3, [r7, #40]	; 0x28
 8005912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005914:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005918:	f7fa fc6c 	bl	80001f4 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4613      	mov	r3, r2
 8005922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005924:	e05c      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005926:	4b3a      	ldr	r3, [pc, #232]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	099b      	lsrs	r3, r3, #6
 800592c:	2200      	movs	r2, #0
 800592e:	4618      	mov	r0, r3
 8005930:	4611      	mov	r1, r2
 8005932:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	2300      	movs	r3, #0
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
 800593c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f04f 0100 	mov.w	r1, #0
 800594c:	0159      	lsls	r1, r3, #5
 800594e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005952:	0150      	lsls	r0, r2, #5
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	46c4      	mov	ip, r8
 800595a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	468c      	mov	ip, r1
 8005964:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	f04f 0300 	mov.w	r3, #0
 8005970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800597c:	ebb2 040a 	subs.w	r4, r2, sl
 8005980:	eb63 050b 	sbc.w	r5, r3, fp
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	00eb      	lsls	r3, r5, #3
 800598e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005992:	00e2      	lsls	r2, r4, #3
 8005994:	4614      	mov	r4, r2
 8005996:	461d      	mov	r5, r3
 8005998:	4603      	mov	r3, r0
 800599a:	18e3      	adds	r3, r4, r3
 800599c:	603b      	str	r3, [r7, #0]
 800599e:	460b      	mov	r3, r1
 80059a0:	eb45 0303 	adc.w	r3, r5, r3
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059b2:	4629      	mov	r1, r5
 80059b4:	028b      	lsls	r3, r1, #10
 80059b6:	4620      	mov	r0, r4
 80059b8:	4629      	mov	r1, r5
 80059ba:	4604      	mov	r4, r0
 80059bc:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80059c0:	4601      	mov	r1, r0
 80059c2:	028a      	lsls	r2, r1, #10
 80059c4:	4610      	mov	r0, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	2200      	movs	r2, #0
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	61fa      	str	r2, [r7, #28]
 80059d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d4:	f7fa fc0e 	bl	80001f4 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4613      	mov	r3, r2
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x20c>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	3301      	adds	r3, #1
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80059f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x210>)
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3750      	adds	r7, #80	; 0x50
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	007a1200 	.word	0x007a1200

08005a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a20:	4b02      	ldr	r3, [pc, #8]	; (8005a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	2000002c 	.word	0x2000002c

08005a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005a36:	f7ff fff1 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a3a:	4601      	mov	r1, r0
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005a44:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005a48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	fa92 f2a2 	rbit	r2, r2
 8005a50:	603a      	str	r2, [r7, #0]
  return result;
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	fab2 f282 	clz	r2, r2
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	40d3      	lsrs	r3, r2
 8005a5c:	4a04      	ldr	r2, [pc, #16]	; (8005a70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005a5e:	5cd3      	ldrb	r3, [r2, r3]
 8005a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	0801e6ec 	.word	0x0801e6ec

08005a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005a7a:	f7ff ffcf 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a7e:	4601      	mov	r1, r0
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a88:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005a8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	fa92 f2a2 	rbit	r2, r2
 8005a94:	603a      	str	r2, [r7, #0]
  return result;
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	fab2 f282 	clz	r2, r2
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	40d3      	lsrs	r3, r2
 8005aa0:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005aa2:	5cd3      	ldrb	r3, [r2, r3]
 8005aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40023800 	.word	0x40023800
 8005ab4:	0801e6ec 	.word	0x0801e6ec

08005ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	220f      	movs	r2, #15
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ac8:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <HAL_RCC_GetClockConfig+0x58>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0203 	and.w	r2, r3, #3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <HAL_RCC_GetClockConfig+0x58>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_RCC_GetClockConfig+0x58>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005aec:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <HAL_RCC_GetClockConfig+0x58>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	08db      	lsrs	r3, r3, #3
 8005af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005afa:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_RCC_GetClockConfig+0x5c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 020f 	and.w	r2, r3, #15
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	601a      	str	r2, [r3, #0]
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	40023800 	.word	0x40023800
 8005b14:	40023c00 	.word	0x40023c00

08005b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e041      	b.n	8005bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d106      	bne.n	8005b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f839 	bl	8005bb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	4610      	mov	r0, r2
 8005b58:	f000 f9d0 	bl	8005efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d001      	beq.n	8005be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e04e      	b.n	8005c7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <HAL_TIM_Base_Start_IT+0xc0>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d022      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0a:	d01d      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1e      	ldr	r2, [pc, #120]	; (8005c8c <HAL_TIM_Base_Start_IT+0xc4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d018      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	; (8005c90 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <HAL_TIM_Base_Start_IT+0xcc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1a      	ldr	r2, [pc, #104]	; (8005c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIM_Base_Start_IT+0x80>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a17      	ldr	r2, [pc, #92]	; (8005ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d111      	bne.n	8005c6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d010      	beq.n	8005c7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6a:	e007      	b.n	8005c7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800

08005ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d122      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d11b      	bne.n	8005d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0202 	mvn.w	r2, #2
 8005cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8ed 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f8e0 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f8ef 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d122      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d11b      	bne.n	8005d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0204 	mvn.w	r2, #4
 8005d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8c3 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f8b6 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f8c5 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b08      	cmp	r3, #8
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0308 	and.w	r3, r3, #8
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0208 	mvn.w	r2, #8
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f899 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f88c 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f89b 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0310 	and.w	r3, r3, #16
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b10      	cmp	r3, #16
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0210 	mvn.w	r2, #16
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f86f 	bl	8005ec6 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f862 	bl	8005eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f871 	bl	8005ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0201 	mvn.w	r2, #1
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fb fa38 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b80      	cmp	r3, #128	; 0x80
 8005e34:	d10e      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b80      	cmp	r3, #128	; 0x80
 8005e42:	d107      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f8fb 	bl	800604a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d10e      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d107      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f835 	bl	8005eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d10e      	bne.n	8005eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d107      	bne.n	8005eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0220 	mvn.w	r2, #32
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8c6 	bl	8006038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eac:	bf00      	nop
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bc80      	pop	{r7}
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr

08005efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a3f      	ldr	r2, [pc, #252]	; (800600c <TIM_Base_SetConfig+0x110>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1a:	d00f      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a3c      	ldr	r2, [pc, #240]	; (8006010 <TIM_Base_SetConfig+0x114>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00b      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a3b      	ldr	r2, [pc, #236]	; (8006014 <TIM_Base_SetConfig+0x118>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a3a      	ldr	r2, [pc, #232]	; (8006018 <TIM_Base_SetConfig+0x11c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_Base_SetConfig+0x40>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a39      	ldr	r2, [pc, #228]	; (800601c <TIM_Base_SetConfig+0x120>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d108      	bne.n	8005f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a2e      	ldr	r2, [pc, #184]	; (800600c <TIM_Base_SetConfig+0x110>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5c:	d027      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a2b      	ldr	r2, [pc, #172]	; (8006010 <TIM_Base_SetConfig+0x114>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d023      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <TIM_Base_SetConfig+0x118>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d01f      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a29      	ldr	r2, [pc, #164]	; (8006018 <TIM_Base_SetConfig+0x11c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a28      	ldr	r2, [pc, #160]	; (800601c <TIM_Base_SetConfig+0x120>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d017      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a27      	ldr	r2, [pc, #156]	; (8006020 <TIM_Base_SetConfig+0x124>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a26      	ldr	r2, [pc, #152]	; (8006024 <TIM_Base_SetConfig+0x128>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00f      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a25      	ldr	r2, [pc, #148]	; (8006028 <TIM_Base_SetConfig+0x12c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00b      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a24      	ldr	r2, [pc, #144]	; (800602c <TIM_Base_SetConfig+0x130>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <TIM_Base_SetConfig+0x134>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d003      	beq.n	8005fae <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a22      	ldr	r2, [pc, #136]	; (8006034 <TIM_Base_SetConfig+0x138>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d108      	bne.n	8005fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a09      	ldr	r2, [pc, #36]	; (800600c <TIM_Base_SetConfig+0x110>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d003      	beq.n	8005ff4 <TIM_Base_SetConfig+0xf8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a0b      	ldr	r2, [pc, #44]	; (800601c <TIM_Base_SetConfig+0x120>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d103      	bne.n	8005ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	615a      	str	r2, [r3, #20]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr
 800600c:	40010000 	.word	0x40010000
 8006010:	40000400 	.word	0x40000400
 8006014:	40000800 	.word	0x40000800
 8006018:	40000c00 	.word	0x40000c00
 800601c:	40010400 	.word	0x40010400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800
 800602c:	40001800 	.word	0x40001800
 8006030:	40001c00 	.word	0x40001c00
 8006034:	40002000 	.word	0x40002000

08006038 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr

0800605c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e03f      	b.n	80060ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fcca 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	; 0x24
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800609e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f905 	bl	80062b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b08a      	sub	sp, #40	; 0x28
 80060fa:	af02      	add	r7, sp, #8
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	603b      	str	r3, [r7, #0]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b20      	cmp	r3, #32
 8006114:	d17c      	bne.n	8006210 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <HAL_UART_Transmit+0x2c>
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e075      	b.n	8006212 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_UART_Transmit+0x3e>
 8006130:	2302      	movs	r3, #2
 8006132:	e06e      	b.n	8006212 <HAL_UART_Transmit+0x11c>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2221      	movs	r2, #33	; 0x21
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800614a:	f7fb fd0d 	bl	8001b68 <HAL_GetTick>
 800614e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006164:	d108      	bne.n	8006178 <HAL_UART_Transmit+0x82>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e003      	b.n	8006180 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006188:	e02a      	b.n	80061e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2200      	movs	r2, #0
 8006192:	2180      	movs	r1, #128	; 0x80
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f840 	bl	800621a <UART_WaitOnFlagUntilTimeout>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e036      	b.n	8006212 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10b      	bne.n	80061c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	3302      	adds	r3, #2
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	e007      	b.n	80061d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	3301      	adds	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1cf      	bne.n	800618a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2140      	movs	r1, #64	; 0x40
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f810 	bl	800621a <UART_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e006      	b.n	8006212 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	4613      	mov	r3, r2
 8006228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622a:	e02c      	b.n	8006286 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d028      	beq.n	8006286 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <UART_WaitOnFlagUntilTimeout+0x30>
 800623a:	f7fb fc95 	bl	8001b68 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	429a      	cmp	r2, r3
 8006248:	d21d      	bcs.n	8006286 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006258:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e00f      	b.n	80062a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4013      	ands	r3, r2
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	429a      	cmp	r2, r3
 8006294:	bf0c      	ite	eq
 8006296:	2301      	moveq	r3, #1
 8006298:	2300      	movne	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	461a      	mov	r2, r3
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0c3      	beq.n	800622c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062f0:	f023 030c 	bic.w	r3, r3, #12
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	430b      	orrs	r3, r1
 80062fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a57      	ldr	r2, [pc, #348]	; (8006478 <UART_SetConfig+0x1c8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <UART_SetConfig+0x78>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a56      	ldr	r2, [pc, #344]	; (800647c <UART_SetConfig+0x1cc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d103      	bne.n	8006330 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006328:	f7ff fba4 	bl	8005a74 <HAL_RCC_GetPCLK2Freq>
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	e002      	b.n	8006336 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006330:	f7ff fb7e 	bl	8005a30 <HAL_RCC_GetPCLK1Freq>
 8006334:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800633e:	d14c      	bne.n	80063da <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009a      	lsls	r2, r3, #2
 800634a:	441a      	add	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	fbb2 f3f3 	udiv	r3, r2, r3
 8006356:	4a4a      	ldr	r2, [pc, #296]	; (8006480 <UART_SetConfig+0x1d0>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	0119      	lsls	r1, r3, #4
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009a      	lsls	r2, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	fbb2 f2f3 	udiv	r2, r2, r3
 8006376:	4b42      	ldr	r3, [pc, #264]	; (8006480 <UART_SetConfig+0x1d0>)
 8006378:	fba3 0302 	umull	r0, r3, r3, r2
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	2064      	movs	r0, #100	; 0x64
 8006380:	fb00 f303 	mul.w	r3, r0, r3
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	3332      	adds	r3, #50	; 0x32
 800638a:	4a3d      	ldr	r2, [pc, #244]	; (8006480 <UART_SetConfig+0x1d0>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006398:	4419      	add	r1, r3
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4613      	mov	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	009a      	lsls	r2, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b0:	4b33      	ldr	r3, [pc, #204]	; (8006480 <UART_SetConfig+0x1d0>)
 80063b2:	fba3 0302 	umull	r0, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	2064      	movs	r0, #100	; 0x64
 80063ba:	fb00 f303 	mul.w	r3, r0, r3
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	3332      	adds	r3, #50	; 0x32
 80063c4:	4a2e      	ldr	r2, [pc, #184]	; (8006480 <UART_SetConfig+0x1d0>)
 80063c6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	f003 0207 	and.w	r2, r3, #7
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	440a      	add	r2, r1
 80063d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063d8:	e04a      	b.n	8006470 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	009a      	lsls	r2, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <UART_SetConfig+0x1d0>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	0119      	lsls	r1, r3, #4
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009a      	lsls	r2, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <UART_SetConfig+0x1d0>)
 8006412:	fba3 0302 	umull	r0, r3, r3, r2
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2064      	movs	r0, #100	; 0x64
 800641a:	fb00 f303 	mul.w	r3, r0, r3
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	3332      	adds	r3, #50	; 0x32
 8006424:	4a16      	ldr	r2, [pc, #88]	; (8006480 <UART_SetConfig+0x1d0>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006430:	4419      	add	r1, r3
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	009a      	lsls	r2, r3, #2
 800643c:	441a      	add	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	fbb2 f2f3 	udiv	r2, r2, r3
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <UART_SetConfig+0x1d0>)
 800644a:	fba3 0302 	umull	r0, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2064      	movs	r0, #100	; 0x64
 8006452:	fb00 f303 	mul.w	r3, r0, r3
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	3332      	adds	r3, #50	; 0x32
 800645c:	4a08      	ldr	r2, [pc, #32]	; (8006480 <UART_SetConfig+0x1d0>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	440a      	add	r2, r1
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40011000 	.word	0x40011000
 800647c:	40011400 	.word	0x40011400
 8006480:	51eb851f 	.word	0x51eb851f

08006484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006484:	b084      	sub	sp, #16
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	f107 001c 	add.w	r0, r7, #28
 8006492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d122      	bne.n	80064e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d105      	bne.n	80064d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f001 fafa 	bl	8007ad0 <USB_CoreReset>
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e010      	b.n	8006504 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 faee 	bl	8007ad0 <USB_CoreReset>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	2b01      	cmp	r3, #1
 8006508:	d10b      	bne.n	8006522 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f043 0206 	orr.w	r2, r3, #6
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006522:	7bfb      	ldrb	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800652e:	b004      	add	sp, #16
 8006530:	4770      	bx	lr
	...

08006534 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d165      	bne.n	8006614 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a41      	ldr	r2, [pc, #260]	; (8006650 <USB_SetTurnaroundTime+0x11c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d906      	bls.n	800655e <USB_SetTurnaroundTime+0x2a>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	4a40      	ldr	r2, [pc, #256]	; (8006654 <USB_SetTurnaroundTime+0x120>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d202      	bcs.n	800655e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006558:	230f      	movs	r3, #15
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e062      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a3c      	ldr	r2, [pc, #240]	; (8006654 <USB_SetTurnaroundTime+0x120>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d306      	bcc.n	8006574 <USB_SetTurnaroundTime+0x40>
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4a3b      	ldr	r2, [pc, #236]	; (8006658 <USB_SetTurnaroundTime+0x124>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d202      	bcs.n	8006574 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800656e:	230e      	movs	r3, #14
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	e057      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4a38      	ldr	r2, [pc, #224]	; (8006658 <USB_SetTurnaroundTime+0x124>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d306      	bcc.n	800658a <USB_SetTurnaroundTime+0x56>
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4a37      	ldr	r2, [pc, #220]	; (800665c <USB_SetTurnaroundTime+0x128>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d202      	bcs.n	800658a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006584:	230d      	movs	r3, #13
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e04c      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4a33      	ldr	r2, [pc, #204]	; (800665c <USB_SetTurnaroundTime+0x128>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d306      	bcc.n	80065a0 <USB_SetTurnaroundTime+0x6c>
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	4a32      	ldr	r2, [pc, #200]	; (8006660 <USB_SetTurnaroundTime+0x12c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d802      	bhi.n	80065a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800659a:	230c      	movs	r3, #12
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e041      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <USB_SetTurnaroundTime+0x12c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d906      	bls.n	80065b6 <USB_SetTurnaroundTime+0x82>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4a2e      	ldr	r2, [pc, #184]	; (8006664 <USB_SetTurnaroundTime+0x130>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d802      	bhi.n	80065b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80065b0:	230b      	movs	r3, #11
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e036      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <USB_SetTurnaroundTime+0x130>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d906      	bls.n	80065cc <USB_SetTurnaroundTime+0x98>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4a29      	ldr	r2, [pc, #164]	; (8006668 <USB_SetTurnaroundTime+0x134>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d802      	bhi.n	80065cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065c6:	230a      	movs	r3, #10
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e02b      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a26      	ldr	r2, [pc, #152]	; (8006668 <USB_SetTurnaroundTime+0x134>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d906      	bls.n	80065e2 <USB_SetTurnaroundTime+0xae>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4a25      	ldr	r2, [pc, #148]	; (800666c <USB_SetTurnaroundTime+0x138>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d202      	bcs.n	80065e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065dc:	2309      	movs	r3, #9
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e020      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4a21      	ldr	r2, [pc, #132]	; (800666c <USB_SetTurnaroundTime+0x138>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d306      	bcc.n	80065f8 <USB_SetTurnaroundTime+0xc4>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	4a20      	ldr	r2, [pc, #128]	; (8006670 <USB_SetTurnaroundTime+0x13c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d802      	bhi.n	80065f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065f2:	2308      	movs	r3, #8
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e015      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <USB_SetTurnaroundTime+0x13c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d906      	bls.n	800660e <USB_SetTurnaroundTime+0xda>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <USB_SetTurnaroundTime+0x140>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d202      	bcs.n	800660e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006608:	2307      	movs	r3, #7
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	e00a      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800660e:	2306      	movs	r3, #6
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	e007      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d102      	bne.n	8006620 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800661a:	2309      	movs	r3, #9
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e001      	b.n	8006624 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006620:	2309      	movs	r3, #9
 8006622:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	029b      	lsls	r3, r3, #10
 8006638:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800663c:	431a      	orrs	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	bc80      	pop	{r7}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	00d8acbf 	.word	0x00d8acbf
 8006654:	00e4e1c0 	.word	0x00e4e1c0
 8006658:	00f42400 	.word	0x00f42400
 800665c:	01067380 	.word	0x01067380
 8006660:	011a499f 	.word	0x011a499f
 8006664:	01312cff 	.word	0x01312cff
 8006668:	014ca43f 	.word	0x014ca43f
 800666c:	016e3600 	.word	0x016e3600
 8006670:	01a6ab1f 	.word	0x01a6ab1f
 8006674:	01e84800 	.word	0x01e84800

08006678 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f043 0201 	orr.w	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f023 0201 	bic.w	r2, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d115      	bne.n	8006706 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066e6:	2001      	movs	r0, #1
 80066e8:	f7fb fa48 	bl	8001b7c <HAL_Delay>
      ms++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f001 f961 	bl	80079ba <USB_GetMode>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d01e      	beq.n	800673c <USB_SetCurrentMode+0x84>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b31      	cmp	r3, #49	; 0x31
 8006702:	d9f0      	bls.n	80066e6 <USB_SetCurrentMode+0x2e>
 8006704:	e01a      	b.n	800673c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d115      	bne.n	8006738 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006718:	2001      	movs	r0, #1
 800671a:	f7fb fa2f 	bl	8001b7c <HAL_Delay>
      ms++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 f948 	bl	80079ba <USB_GetMode>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <USB_SetCurrentMode+0x84>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b31      	cmp	r3, #49	; 0x31
 8006734:	d9f0      	bls.n	8006718 <USB_SetCurrentMode+0x60>
 8006736:	e001      	b.n	800673c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e005      	b.n	8006748 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b32      	cmp	r3, #50	; 0x32
 8006740:	d101      	bne.n	8006746 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006750:	b084      	sub	sp, #16
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800675e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	e009      	b.n	8006784 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3340      	adds	r3, #64	; 0x40
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	3301      	adds	r3, #1
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b0e      	cmp	r3, #14
 8006788:	d9f2      	bls.n	8006770 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800678a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678c:	2b00      	cmp	r3, #0
 800678e:	d11c      	bne.n	80067ca <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800679e:	f043 0302 	orr.w	r3, r3, #2
 80067a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
 80067c8:	e00b      	b.n	80067e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067e8:	461a      	mov	r2, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f4:	4619      	mov	r1, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	461a      	mov	r2, r3
 80067fe:	680b      	ldr	r3, [r1, #0]
 8006800:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	2b01      	cmp	r3, #1
 8006806:	d10c      	bne.n	8006822 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800680e:	2100      	movs	r1, #0
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f945 	bl	8006aa0 <USB_SetDevSpeed>
 8006816:	e008      	b.n	800682a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006818:	2101      	movs	r1, #1
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f940 	bl	8006aa0 <USB_SetDevSpeed>
 8006820:	e003      	b.n	800682a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006822:	2103      	movs	r1, #3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f93b 	bl	8006aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800682a:	2110      	movs	r1, #16
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f8f3 	bl	8006a18 <USB_FlushTxFifo>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 f90f 	bl	8006a60 <USB_FlushRxFifo>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	461a      	mov	r2, r3
 8006854:	2300      	movs	r3, #0
 8006856:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	461a      	mov	r2, r3
 800686c:	2300      	movs	r3, #0
 800686e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	e043      	b.n	80068fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800688c:	d118      	bne.n	80068c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a0:	461a      	mov	r2, r3
 80068a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	e013      	b.n	80068d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b6:	461a      	mov	r2, r3
 80068b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e008      	b.n	80068d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068de:	461a      	mov	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	461a      	mov	r2, r3
 80068f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	3301      	adds	r3, #1
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	429a      	cmp	r2, r3
 8006904:	d3b7      	bcc.n	8006876 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e043      	b.n	8006994 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006922:	d118      	bne.n	8006956 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006936:	461a      	mov	r2, r3
 8006938:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e013      	b.n	8006968 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	461a      	mov	r2, r3
 800694e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	e008      	b.n	8006968 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	461a      	mov	r2, r3
 8006964:	2300      	movs	r3, #0
 8006966:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	461a      	mov	r2, r3
 8006988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800698c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	3301      	adds	r3, #1
 8006992:	613b      	str	r3, [r7, #16]
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	429a      	cmp	r2, r3
 800699a:	d3b7      	bcc.n	800690c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d105      	bne.n	80069d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f043 0210 	orr.w	r2, r3, #16
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <USB_DevInit+0x2c4>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f043 0208 	orr.w	r2, r3, #8
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d107      	bne.n	8006a04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069fc:	f043 0304 	orr.w	r3, r3, #4
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a10:	b004      	add	sp, #16
 8006a12:	4770      	bx	lr
 8006a14:	803c3800 	.word	0x803c3800

08006a18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	019b      	lsls	r3, r3, #6
 8006a2a:	f043 0220 	orr.w	r2, r3, #32
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3301      	adds	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a08      	ldr	r2, [pc, #32]	; (8006a5c <USB_FlushTxFifo+0x44>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d901      	bls.n	8006a44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e006      	b.n	8006a52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d0f0      	beq.n	8006a32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr
 8006a5c:	00030d40 	.word	0x00030d40

08006a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	3301      	adds	r3, #1
 8006a76:	60fb      	str	r3, [r7, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a08      	ldr	r2, [pc, #32]	; (8006a9c <USB_FlushRxFifo+0x3c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d901      	bls.n	8006a84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e006      	b.n	8006a92 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f003 0310 	and.w	r3, r3, #16
 8006a8c:	2b10      	cmp	r3, #16
 8006a8e:	d0f0      	beq.n	8006a72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr
 8006a9c:	00030d40 	.word	0x00030d40

08006aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	78fb      	ldrb	r3, [r7, #3]
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr

08006ad0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 0306 	and.w	r3, r3, #6
 8006ae8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006af0:	2300      	movs	r3, #0
 8006af2:	75fb      	strb	r3, [r7, #23]
 8006af4:	e00a      	b.n	8006b0c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d002      	beq.n	8006b02 <USB_GetDevSpeed+0x32>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2b06      	cmp	r3, #6
 8006b00:	d102      	bne.n	8006b08 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b02:	2302      	movs	r3, #2
 8006b04:	75fb      	strb	r3, [r7, #23]
 8006b06:	e001      	b.n	8006b0c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b08:	230f      	movs	r3, #15
 8006b0a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d13a      	bne.n	8006baa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2101      	movs	r1, #1
 8006b46:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b52:	4313      	orrs	r3, r2
 8006b54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d155      	bne.n	8006c18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	78db      	ldrb	r3, [r3, #3]
 8006b86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	059b      	lsls	r3, r3, #22
 8006b8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b90:	4313      	orrs	r3, r2
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e036      	b.n	8006c18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb0:	69da      	ldr	r2, [r3, #28]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	2101      	movs	r1, #1
 8006bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc0:	041b      	lsls	r3, r3, #16
 8006bc2:	68f9      	ldr	r1, [r7, #12]
 8006bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d11a      	bne.n	8006c18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	78db      	ldrb	r3, [r3, #3]
 8006bfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	4313      	orrs	r3, r2
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr

08006c24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	785b      	ldrb	r3, [r3, #1]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d161      	bne.n	8006d04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c56:	d11f      	bne.n	8006c98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 030f 	and.w	r3, r3, #15
 8006ca8:	2101      	movs	r1, #1
 8006caa:	fa01 f303 	lsl.w	r3, r1, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cb8:	4013      	ands	r3, r2
 8006cba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	2101      	movs	r1, #1
 8006cce:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cdc:	4013      	ands	r3, r2
 8006cde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	0159      	lsls	r1, r3, #5
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	440b      	add	r3, r1
 8006cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4b35      	ldr	r3, [pc, #212]	; (8006dd4 <USB_DeactivateEndpoint+0x1b0>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	600b      	str	r3, [r1, #0]
 8006d02:	e060      	b.n	8006dc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d1a:	d11f      	bne.n	8006d5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d72:	041b      	lsls	r3, r3, #16
 8006d74:	43db      	mvns	r3, r3
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f303 	lsl.w	r3, r1, r3
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da0:	4013      	ands	r3, r2
 8006da2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	0159      	lsls	r1, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	440b      	add	r3, r1
 8006dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <USB_DeactivateEndpoint+0x1b4>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bc80      	pop	{r7}
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	ec337800 	.word	0xec337800
 8006dd8:	eff37800 	.word	0xeff37800

08006ddc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08a      	sub	sp, #40	; 0x28
 8006de0:	af02      	add	r7, sp, #8
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	4613      	mov	r3, r2
 8006de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	f040 815c 	bne.w	80070b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d132      	bne.n	8006e6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e64:	0cdb      	lsrs	r3, r3, #19
 8006e66:	04db      	lsls	r3, r3, #19
 8006e68:	6113      	str	r3, [r2, #16]
 8006e6a:	e074      	b.n	8006f56 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	0151      	lsls	r1, r2, #5
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	440a      	add	r2, r1
 8006e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e86:	0cdb      	lsrs	r3, r3, #19
 8006e88:	04db      	lsls	r3, r3, #19
 8006e8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ea6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006eaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6959      	ldr	r1, [r3, #20]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	440b      	add	r3, r1
 8006ec8:	1e59      	subs	r1, r3, #1
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ed2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ed4:	4b9d      	ldr	r3, [pc, #628]	; (800714c <USB_EPStartXfer+0x370>)
 8006ed6:	400b      	ands	r3, r1
 8006ed8:	69b9      	ldr	r1, [r7, #24]
 8006eda:	0148      	lsls	r0, r1, #5
 8006edc:	69f9      	ldr	r1, [r7, #28]
 8006ede:	4401      	add	r1, r0
 8006ee0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006efe:	69b9      	ldr	r1, [r7, #24]
 8006f00:	0148      	lsls	r0, r1, #5
 8006f02:	69f9      	ldr	r1, [r7, #28]
 8006f04:	4401      	add	r1, r0
 8006f06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	78db      	ldrb	r3, [r3, #3]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d11f      	bne.n	8006f56 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f54:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d14b      	bne.n	8006ff4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d009      	beq.n	8006f78 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f70:	461a      	mov	r2, r3
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	78db      	ldrb	r3, [r3, #3]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d128      	bne.n	8006fd2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d110      	bne.n	8006fb2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	e00f      	b.n	8006fd2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	e12f      	b.n	8007254 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	440a      	add	r2, r1
 800700a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007012:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	78db      	ldrb	r3, [r3, #3]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d015      	beq.n	8007048 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8117 	beq.w	8007254 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	2101      	movs	r1, #1
 8007038:	fa01 f303 	lsl.w	r3, r1, r3
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007042:	4313      	orrs	r3, r2
 8007044:	634b      	str	r3, [r1, #52]	; 0x34
 8007046:	e105      	b.n	8007254 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007054:	2b00      	cmp	r3, #0
 8007056:	d110      	bne.n	800707a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	69fa      	ldr	r2, [r7, #28]
 800706c:	440a      	add	r2, r1
 800706e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	e00f      	b.n	800709a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	69fa      	ldr	r2, [r7, #28]
 800708e:	440a      	add	r2, r1
 8007090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007098:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	68d9      	ldr	r1, [r3, #12]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	b298      	uxth	r0, r3
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	4603      	mov	r3, r0
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 fa2a 	bl	8007508 <USB_WritePacket>
 80070b4:	e0ce      	b.n	8007254 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d0:	0cdb      	lsrs	r3, r3, #19
 80070d2:	04db      	lsls	r3, r3, #19
 80070d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d126      	bne.n	8007150 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007118:	69b9      	ldr	r1, [r7, #24]
 800711a:	0148      	lsls	r0, r1, #5
 800711c:	69f9      	ldr	r1, [r7, #28]
 800711e:	4401      	add	r1, r0
 8007120:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007124:	4313      	orrs	r3, r2
 8007126:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007142:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007146:	6113      	str	r3, [r2, #16]
 8007148:	e036      	b.n	80071b8 <USB_EPStartXfer+0x3dc>
 800714a:	bf00      	nop
 800714c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	695a      	ldr	r2, [r3, #20]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	4413      	add	r3, r2
 800715a:	1e5a      	subs	r2, r3, #1
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	fbb2 f3f3 	udiv	r3, r2, r3
 8007164:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	4413      	add	r3, r2
 800716e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	8afb      	ldrh	r3, [r7, #22]
 8007176:	04d9      	lsls	r1, r3, #19
 8007178:	4b39      	ldr	r3, [pc, #228]	; (8007260 <USB_EPStartXfer+0x484>)
 800717a:	400b      	ands	r3, r1
 800717c:	69b9      	ldr	r1, [r7, #24]
 800717e:	0148      	lsls	r0, r1, #5
 8007180:	69f9      	ldr	r1, [r7, #28]
 8007182:	4401      	add	r1, r0
 8007184:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007188:	4313      	orrs	r3, r2
 800718a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	4413      	add	r3, r2
 8007194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	8af9      	ldrh	r1, [r7, #22]
 80071a0:	fb01 f303 	mul.w	r3, r1, r3
 80071a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a8:	69b9      	ldr	r1, [r7, #24]
 80071aa:	0148      	lsls	r0, r1, #5
 80071ac:	69f9      	ldr	r1, [r7, #28]
 80071ae:	4401      	add	r1, r0
 80071b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071b4:	4313      	orrs	r3, r2
 80071b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80071b8:	79fb      	ldrb	r3, [r7, #7]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d10d      	bne.n	80071da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68d9      	ldr	r1, [r3, #12]
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d6:	460a      	mov	r2, r1
 80071d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	78db      	ldrb	r3, [r3, #3]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d128      	bne.n	8007234 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d110      	bne.n	8007214 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	e00f      	b.n	8007234 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007232:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	0151      	lsls	r1, r2, #5
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	440a      	add	r2, r1
 800724a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800724e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	1ff80000 	.word	0x1ff80000

08007264 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b01      	cmp	r3, #1
 8007282:	f040 80cd 	bne.w	8007420 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d132      	bne.n	80072f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	0cdb      	lsrs	r3, r3, #19
 80072ee:	04db      	lsls	r3, r3, #19
 80072f0:	6113      	str	r3, [r2, #16]
 80072f2:	e04e      	b.n	8007392 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	0cdb      	lsrs	r3, r3, #19
 8007310:	04db      	lsls	r3, r3, #19
 8007312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007332:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007336:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	695a      	ldr	r2, [r3, #20]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	429a      	cmp	r2, r3
 8007342:	d903      	bls.n	800734c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	440a      	add	r2, r1
 8007362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007366:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800736a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007382:	6939      	ldr	r1, [r7, #16]
 8007384:	0148      	lsls	r0, r1, #5
 8007386:	6979      	ldr	r1, [r7, #20]
 8007388:	4401      	add	r1, r0
 800738a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800738e:	4313      	orrs	r3, r2
 8007390:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d11e      	bne.n	80073d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d009      	beq.n	80073b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	461a      	mov	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	e092      	b.n	80074fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	0151      	lsls	r1, r2, #5
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	440a      	add	r2, r1
 80073ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d07e      	beq.n	80074fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	2101      	movs	r1, #1
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	6979      	ldr	r1, [r7, #20]
 8007416:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800741a:	4313      	orrs	r3, r2
 800741c:	634b      	str	r3, [r1, #52]	; 0x34
 800741e:	e06d      	b.n	80074fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743a:	0cdb      	lsrs	r3, r3, #19
 800743c:	04db      	lsls	r3, r3, #19
 800743e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	440a      	add	r2, r1
 8007456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800745e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007462:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800748e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007492:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074aa:	6939      	ldr	r1, [r7, #16]
 80074ac:	0148      	lsls	r0, r1, #5
 80074ae:	6979      	ldr	r1, [r7, #20]
 80074b0:	4401      	add	r1, r0
 80074b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074b6:	4313      	orrs	r3, r2
 80074b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d10d      	bne.n	80074dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d009      	beq.n	80074dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	68d9      	ldr	r1, [r3, #12]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	460a      	mov	r2, r1
 80074da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	bc80      	pop	{r7}
 8007506:	4770      	bx	lr

08007508 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007508:	b480      	push	{r7}
 800750a:	b089      	sub	sp, #36	; 0x24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	4611      	mov	r1, r2
 8007514:	461a      	mov	r2, r3
 8007516:	460b      	mov	r3, r1
 8007518:	71fb      	strb	r3, [r7, #7]
 800751a:	4613      	mov	r3, r2
 800751c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800752a:	2b00      	cmp	r3, #0
 800752c:	d123      	bne.n	8007576 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800752e:	88bb      	ldrh	r3, [r7, #4]
 8007530:	3303      	adds	r3, #3
 8007532:	089b      	lsrs	r3, r3, #2
 8007534:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007536:	2300      	movs	r3, #0
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	e018      	b.n	800756e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800753c:	79fb      	ldrb	r3, [r7, #7]
 800753e:	031a      	lsls	r2, r3, #12
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	4413      	add	r3, r2
 8007544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007548:	461a      	mov	r2, r3
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	3301      	adds	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	3301      	adds	r3, #1
 800755a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	3301      	adds	r3, #1
 8007560:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	3301      	adds	r3, #1
 8007566:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	3301      	adds	r3, #1
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	69ba      	ldr	r2, [r7, #24]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	429a      	cmp	r2, r3
 8007574:	d3e2      	bcc.n	800753c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3724      	adds	r7, #36	; 0x24
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr

08007582 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007582:	b480      	push	{r7}
 8007584:	b08b      	sub	sp, #44	; 0x2c
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4613      	mov	r3, r2
 800758e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	089b      	lsrs	r3, r3, #2
 800759c:	b29b      	uxth	r3, r3
 800759e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075a8:	2300      	movs	r3, #0
 80075aa:	623b      	str	r3, [r7, #32]
 80075ac:	e014      	b.n	80075d8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b8:	601a      	str	r2, [r3, #0]
    pDest++;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	3301      	adds	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	3301      	adds	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	3301      	adds	r3, #1
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	3301      	adds	r3, #1
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	3301      	adds	r3, #1
 80075d6:	623b      	str	r3, [r7, #32]
 80075d8:	6a3a      	ldr	r2, [r7, #32]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d3e6      	bcc.n	80075ae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075e0:	8bfb      	ldrh	r3, [r7, #30]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d01e      	beq.n	8007624 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075f0:	461a      	mov	r2, r3
 80075f2:	f107 0310 	add.w	r3, r7, #16
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	fa22 f303 	lsr.w	r3, r2, r3
 8007606:	b2da      	uxtb	r2, r3
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	701a      	strb	r2, [r3, #0]
      i++;
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	3301      	adds	r3, #1
 8007610:	623b      	str	r3, [r7, #32]
      pDest++;
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	3301      	adds	r3, #1
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007618:	8bfb      	ldrh	r3, [r7, #30]
 800761a:	3b01      	subs	r3, #1
 800761c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800761e:	8bfb      	ldrh	r3, [r7, #30]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1ea      	bne.n	80075fa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007626:	4618      	mov	r0, r3
 8007628:	372c      	adds	r7, #44	; 0x2c
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	785b      	ldrb	r3, [r3, #1]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d12c      	bne.n	80076a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	db12      	blt.n	8007684 <USB_EPSetStall+0x54>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00f      	beq.n	8007684 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007682:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	e02b      	b.n	80076fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	db12      	blt.n	80076de <USB_EPSetStall+0xae>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00f      	beq.n	80076de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	0151      	lsls	r1, r2, #5
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	440a      	add	r2, r1
 80076d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr

0800770a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d128      	bne.n	8007778 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	0151      	lsls	r1, r2, #5
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	440a      	add	r2, r1
 800773c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007740:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007744:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	78db      	ldrb	r3, [r3, #3]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d003      	beq.n	8007756 <USB_EPClearStall+0x4c>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	78db      	ldrb	r3, [r3, #3]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d138      	bne.n	80077c8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e027      	b.n	80077c8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007796:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	78db      	ldrb	r3, [r3, #3]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d003      	beq.n	80077a8 <USB_EPClearStall+0x9e>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	78db      	ldrb	r3, [r3, #3]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d10f      	bne.n	80077c8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	bc80      	pop	{r7}
 800781c:	4770      	bx	lr

0800781e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007838:	f023 0303 	bic.w	r3, r3, #3
 800783c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800784c:	f023 0302 	bic.w	r3, r3, #2
 8007850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	bc80      	pop	{r7}
 800785c:	4770      	bx	lr

0800785e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007878:	f023 0303 	bic.w	r3, r3, #3
 800787c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr

0800789e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4013      	ands	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80078b6:	68fb      	ldr	r3, [r7, #12]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr

080078c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	4013      	ands	r3, r2
 80078e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	0c1b      	lsrs	r3, r3, #16
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr

080078f4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	4013      	ands	r3, r2
 8007916:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	b29b      	uxth	r3, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007926:	b480      	push	{r7}
 8007928:	b085      	sub	sp, #20
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	4013      	ands	r3, r2
 8007952:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007954:	68bb      	ldr	r3, [r7, #8]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr

08007960 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007982:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	fa22 f303 	lsr.w	r3, r2, r3
 8007990:	01db      	lsls	r3, r3, #7
 8007992:	b2db      	uxtb	r3, r3
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	4013      	ands	r3, r2
 80079ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80079ae:	68bb      	ldr	r3, [r7, #8]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr

080079ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f003 0301 	and.w	r3, r3, #1
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr

080079d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80079f2:	f023 0307 	bic.w	r3, r3, #7
 80079f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr

08007a18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	460b      	mov	r3, r1
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	333c      	adds	r3, #60	; 0x3c
 8007a2e:	3304      	adds	r3, #4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	4a25      	ldr	r2, [pc, #148]	; (8007acc <USB_EP0_OutStart+0xb4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d90a      	bls.n	8007a52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a4c:	d101      	bne.n	8007a52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e037      	b.n	8007ac2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a58:	461a      	mov	r2, r3
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a80:	f043 0318 	orr.w	r3, r3, #24
 8007a84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10f      	bne.n	8007ac0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007abe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr
 8007acc:	4f54300a 	.word	0x4f54300a

08007ad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a12      	ldr	r2, [pc, #72]	; (8007b30 <USB_CoreReset+0x60>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d901      	bls.n	8007aee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e01b      	b.n	8007b26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	daf2      	bge.n	8007adc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f043 0201 	orr.w	r2, r3, #1
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <USB_CoreReset+0x60>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d901      	bls.n	8007b18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e006      	b.n	8007b26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d0f0      	beq.n	8007b06 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr
 8007b30:	00030d40 	.word	0x00030d40

08007b34 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007b34:	b5b0      	push	{r4, r5, r7, lr}
 8007b36:	b08e      	sub	sp, #56	; 0x38
 8007b38:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007b3a:	4ba0      	ldr	r3, [pc, #640]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007b3c:	22c0      	movs	r2, #192	; 0xc0
 8007b3e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007b40:	4b9e      	ldr	r3, [pc, #632]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007b42:	22a8      	movs	r2, #168	; 0xa8
 8007b44:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007b46:	4b9d      	ldr	r3, [pc, #628]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 101;
 8007b4c:	4b9b      	ldr	r3, [pc, #620]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007b4e:	2265      	movs	r2, #101	; 0x65
 8007b50:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007b52:	4b9b      	ldr	r3, [pc, #620]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007b54:	22ff      	movs	r2, #255	; 0xff
 8007b56:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007b58:	4b99      	ldr	r3, [pc, #612]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007b5a:	22ff      	movs	r2, #255	; 0xff
 8007b5c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007b5e:	4b98      	ldr	r3, [pc, #608]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007b60:	22ff      	movs	r2, #255	; 0xff
 8007b62:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007b64:	4b96      	ldr	r3, [pc, #600]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007b6a:	4b96      	ldr	r3, [pc, #600]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007b6c:	22c0      	movs	r2, #192	; 0xc0
 8007b6e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007b70:	4b94      	ldr	r3, [pc, #592]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007b72:	22a8      	movs	r2, #168	; 0xa8
 8007b74:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8007b76:	4b93      	ldr	r3, [pc, #588]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007b78:	2201      	movs	r2, #1
 8007b7a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007b7c:	4b91      	ldr	r3, [pc, #580]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007b7e:	2201      	movs	r2, #1
 8007b80:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007b82:	2100      	movs	r1, #0
 8007b84:	2000      	movs	r0, #0
 8007b86:	f005 f8d3 	bl	800cd30 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007b8a:	4b8c      	ldr	r3, [pc, #560]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	061a      	lsls	r2, r3, #24
 8007b90:	4b8a      	ldr	r3, [pc, #552]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	431a      	orrs	r2, r3
 8007b98:	4b88      	ldr	r3, [pc, #544]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007b9a:	789b      	ldrb	r3, [r3, #2]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	4a86      	ldr	r2, [pc, #536]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007ba2:	78d2      	ldrb	r2, [r2, #3]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	061a      	lsls	r2, r3, #24
 8007ba8:	4b84      	ldr	r3, [pc, #528]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	0619      	lsls	r1, r3, #24
 8007bae:	4b83      	ldr	r3, [pc, #524]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	041b      	lsls	r3, r3, #16
 8007bb4:	4319      	orrs	r1, r3
 8007bb6:	4b81      	ldr	r3, [pc, #516]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bb8:	789b      	ldrb	r3, [r3, #2]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	497f      	ldr	r1, [pc, #508]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bc0:	78c9      	ldrb	r1, [r1, #3]
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	021b      	lsls	r3, r3, #8
 8007bc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	4b7b      	ldr	r3, [pc, #492]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	0619      	lsls	r1, r3, #24
 8007bd2:	4b7a      	ldr	r3, [pc, #488]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bd4:	785b      	ldrb	r3, [r3, #1]
 8007bd6:	041b      	lsls	r3, r3, #16
 8007bd8:	4319      	orrs	r1, r3
 8007bda:	4b78      	ldr	r3, [pc, #480]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bdc:	789b      	ldrb	r3, [r3, #2]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	430b      	orrs	r3, r1
 8007be2:	4976      	ldr	r1, [pc, #472]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007be4:	78c9      	ldrb	r1, [r1, #3]
 8007be6:	430b      	orrs	r3, r1
 8007be8:	0a1b      	lsrs	r3, r3, #8
 8007bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	4b72      	ldr	r3, [pc, #456]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	0619      	lsls	r1, r3, #24
 8007bf6:	4b71      	ldr	r3, [pc, #452]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007bf8:	785b      	ldrb	r3, [r3, #1]
 8007bfa:	041b      	lsls	r3, r3, #16
 8007bfc:	4319      	orrs	r1, r3
 8007bfe:	4b6f      	ldr	r3, [pc, #444]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007c00:	789b      	ldrb	r3, [r3, #2]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	430b      	orrs	r3, r1
 8007c06:	496d      	ldr	r1, [pc, #436]	; (8007dbc <MX_LWIP_Init+0x288>)
 8007c08:	78c9      	ldrb	r1, [r1, #3]
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	0e1b      	lsrs	r3, r3, #24
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	4a6d      	ldr	r2, [pc, #436]	; (8007dc8 <MX_LWIP_Init+0x294>)
 8007c12:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007c14:	4b6a      	ldr	r3, [pc, #424]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	061a      	lsls	r2, r3, #24
 8007c1a:	4b69      	ldr	r3, [pc, #420]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	041b      	lsls	r3, r3, #16
 8007c20:	431a      	orrs	r2, r3
 8007c22:	4b67      	ldr	r3, [pc, #412]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c24:	789b      	ldrb	r3, [r3, #2]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	4a65      	ldr	r2, [pc, #404]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c2c:	78d2      	ldrb	r2, [r2, #3]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	061a      	lsls	r2, r3, #24
 8007c32:	4b63      	ldr	r3, [pc, #396]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	0619      	lsls	r1, r3, #24
 8007c38:	4b61      	ldr	r3, [pc, #388]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	041b      	lsls	r3, r3, #16
 8007c3e:	4319      	orrs	r1, r3
 8007c40:	4b5f      	ldr	r3, [pc, #380]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c42:	789b      	ldrb	r3, [r3, #2]
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	430b      	orrs	r3, r1
 8007c48:	495d      	ldr	r1, [pc, #372]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c4a:	78c9      	ldrb	r1, [r1, #3]
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	021b      	lsls	r3, r3, #8
 8007c50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c54:	431a      	orrs	r2, r3
 8007c56:	4b5a      	ldr	r3, [pc, #360]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	0619      	lsls	r1, r3, #24
 8007c5c:	4b58      	ldr	r3, [pc, #352]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	041b      	lsls	r3, r3, #16
 8007c62:	4319      	orrs	r1, r3
 8007c64:	4b56      	ldr	r3, [pc, #344]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c66:	789b      	ldrb	r3, [r3, #2]
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	4954      	ldr	r1, [pc, #336]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c6e:	78c9      	ldrb	r1, [r1, #3]
 8007c70:	430b      	orrs	r3, r1
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	4b51      	ldr	r3, [pc, #324]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	0619      	lsls	r1, r3, #24
 8007c80:	4b4f      	ldr	r3, [pc, #316]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	041b      	lsls	r3, r3, #16
 8007c86:	4319      	orrs	r1, r3
 8007c88:	4b4d      	ldr	r3, [pc, #308]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c8a:	789b      	ldrb	r3, [r3, #2]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	430b      	orrs	r3, r1
 8007c90:	494b      	ldr	r1, [pc, #300]	; (8007dc0 <MX_LWIP_Init+0x28c>)
 8007c92:	78c9      	ldrb	r1, [r1, #3]
 8007c94:	430b      	orrs	r3, r1
 8007c96:	0e1b      	lsrs	r3, r3, #24
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	4a4c      	ldr	r2, [pc, #304]	; (8007dcc <MX_LWIP_Init+0x298>)
 8007c9c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007c9e:	4b49      	ldr	r3, [pc, #292]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	061a      	lsls	r2, r3, #24
 8007ca4:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	431a      	orrs	r2, r3
 8007cac:	4b45      	ldr	r3, [pc, #276]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007cae:	789b      	ldrb	r3, [r3, #2]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	4a43      	ldr	r2, [pc, #268]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007cb6:	78d2      	ldrb	r2, [r2, #3]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	061a      	lsls	r2, r3, #24
 8007cbc:	4b41      	ldr	r3, [pc, #260]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	0619      	lsls	r1, r3, #24
 8007cc2:	4b40      	ldr	r3, [pc, #256]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007cc4:	785b      	ldrb	r3, [r3, #1]
 8007cc6:	041b      	lsls	r3, r3, #16
 8007cc8:	4319      	orrs	r1, r3
 8007cca:	4b3e      	ldr	r3, [pc, #248]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007ccc:	789b      	ldrb	r3, [r3, #2]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	493c      	ldr	r1, [pc, #240]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007cd4:	78c9      	ldrb	r1, [r1, #3]
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	4b38      	ldr	r3, [pc, #224]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	0619      	lsls	r1, r3, #24
 8007ce6:	4b37      	ldr	r3, [pc, #220]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007ce8:	785b      	ldrb	r3, [r3, #1]
 8007cea:	041b      	lsls	r3, r3, #16
 8007cec:	4319      	orrs	r1, r3
 8007cee:	4b35      	ldr	r3, [pc, #212]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007cf0:	789b      	ldrb	r3, [r3, #2]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	4933      	ldr	r1, [pc, #204]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007cf8:	78c9      	ldrb	r1, [r1, #3]
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	0a1b      	lsrs	r3, r3, #8
 8007cfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d02:	431a      	orrs	r2, r3
 8007d04:	4b2f      	ldr	r3, [pc, #188]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	0619      	lsls	r1, r3, #24
 8007d0a:	4b2e      	ldr	r3, [pc, #184]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	041b      	lsls	r3, r3, #16
 8007d10:	4319      	orrs	r1, r3
 8007d12:	4b2c      	ldr	r3, [pc, #176]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007d14:	789b      	ldrb	r3, [r3, #2]
 8007d16:	021b      	lsls	r3, r3, #8
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	492a      	ldr	r1, [pc, #168]	; (8007dc4 <MX_LWIP_Init+0x290>)
 8007d1c:	78c9      	ldrb	r1, [r1, #3]
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	0e1b      	lsrs	r3, r3, #24
 8007d22:	4313      	orrs	r3, r2
 8007d24:	4a2a      	ldr	r2, [pc, #168]	; (8007dd0 <MX_LWIP_Init+0x29c>)
 8007d26:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007d28:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <MX_LWIP_Init+0x2a0>)
 8007d2a:	9302      	str	r3, [sp, #8]
 8007d2c:	4b2a      	ldr	r3, [pc, #168]	; (8007dd8 <MX_LWIP_Init+0x2a4>)
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	2300      	movs	r3, #0
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	4b26      	ldr	r3, [pc, #152]	; (8007dd0 <MX_LWIP_Init+0x29c>)
 8007d36:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <MX_LWIP_Init+0x298>)
 8007d38:	4923      	ldr	r1, [pc, #140]	; (8007dc8 <MX_LWIP_Init+0x294>)
 8007d3a:	4828      	ldr	r0, [pc, #160]	; (8007ddc <MX_LWIP_Init+0x2a8>)
 8007d3c:	f008 fbdc 	bl	80104f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007d40:	4826      	ldr	r0, [pc, #152]	; (8007ddc <MX_LWIP_Init+0x2a8>)
 8007d42:	f008 fcbb 	bl	80106bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007d46:	4b25      	ldr	r3, [pc, #148]	; (8007ddc <MX_LWIP_Init+0x2a8>)
 8007d48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007d4c:	089b      	lsrs	r3, r3, #2
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007d58:	4820      	ldr	r0, [pc, #128]	; (8007ddc <MX_LWIP_Init+0x2a8>)
 8007d5a:	f008 fcbd 	bl	80106d8 <netif_set_up>
 8007d5e:	e002      	b.n	8007d66 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007d60:	481e      	ldr	r0, [pc, #120]	; (8007ddc <MX_LWIP_Init+0x2a8>)
 8007d62:	f008 fcfd 	bl	8010760 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007d66:	491e      	ldr	r1, [pc, #120]	; (8007de0 <MX_LWIP_Init+0x2ac>)
 8007d68:	481c      	ldr	r0, [pc, #112]	; (8007ddc <MX_LWIP_Init+0x2a8>)
 8007d6a:	f008 fd66 	bl	801083a <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	623b      	str	r3, [r7, #32]
 8007d72:	2300      	movs	r3, #0
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8007d76:	f107 0320 	add.w	r3, r7, #32
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f002 f919 	bl	8009fb4 <osSemaphoreCreate>
 8007d82:	4603      	mov	r3, r0
 8007d84:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <MX_LWIP_Init+0x2b0>)
 8007d86:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8007d88:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <MX_LWIP_Init+0x2b4>)
 8007d8a:	4a14      	ldr	r2, [pc, #80]	; (8007ddc <MX_LWIP_Init+0x2a8>)
 8007d8c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007d8e:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <MX_LWIP_Init+0x2b0>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <MX_LWIP_Init+0x2b4>)
 8007d94:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8007d96:	4b15      	ldr	r3, [pc, #84]	; (8007dec <MX_LWIP_Init+0x2b8>)
 8007d98:	1d3c      	adds	r4, r7, #4
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007da0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007da4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8007da8:	1d3b      	adds	r3, r7, #4
 8007daa:	490f      	ldr	r1, [pc, #60]	; (8007de8 <MX_LWIP_Init+0x2b4>)
 8007dac:	4618      	mov	r0, r3
 8007dae:	f002 f805 	bl	8009dbc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007db2:	bf00      	nop
 8007db4:	3728      	adds	r7, #40	; 0x28
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bdb0      	pop	{r4, r5, r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	200056b8 	.word	0x200056b8
 8007dc0:	200056b4 	.word	0x200056b4
 8007dc4:	20005678 	.word	0x20005678
 8007dc8:	200056b0 	.word	0x200056b0
 8007dcc:	200056bc 	.word	0x200056bc
 8007dd0:	200056c0 	.word	0x200056c0
 8007dd4:	0800cc59 	.word	0x0800cc59
 8007dd8:	0800845d 	.word	0x0800845d
 8007ddc:	2000567c 	.word	0x2000567c
 8007de0:	08008541 	.word	0x08008541
 8007de4:	20000f04 	.word	0x20000f04
 8007de8:	20005670 	.word	0x20005670
 8007dec:	0801b9b0 	.word	0x0801b9b0

08007df0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08e      	sub	sp, #56	; 0x38
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	605a      	str	r2, [r3, #4]
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a59      	ldr	r2, [pc, #356]	; (8007f74 <HAL_ETH_MspInit+0x184>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	f040 80ac 	bne.w	8007f6c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007e14:	2300      	movs	r3, #0
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	4b57      	ldr	r3, [pc, #348]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	4a56      	ldr	r2, [pc, #344]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e22:	6313      	str	r3, [r2, #48]	; 0x30
 8007e24:	4b54      	ldr	r3, [pc, #336]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2c:	623b      	str	r3, [r7, #32]
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	2300      	movs	r3, #0
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	4b50      	ldr	r3, [pc, #320]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e38:	4a4f      	ldr	r2, [pc, #316]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8007e40:	4b4d      	ldr	r3, [pc, #308]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e48:	61fb      	str	r3, [r7, #28]
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61bb      	str	r3, [r7, #24]
 8007e50:	4b49      	ldr	r3, [pc, #292]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	4a48      	ldr	r2, [pc, #288]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8007e5c:	4b46      	ldr	r3, [pc, #280]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e64:	61bb      	str	r3, [r7, #24]
 8007e66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	4b42      	ldr	r3, [pc, #264]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	4a41      	ldr	r2, [pc, #260]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e72:	f043 0304 	orr.w	r3, r3, #4
 8007e76:	6313      	str	r3, [r2, #48]	; 0x30
 8007e78:	4b3f      	ldr	r3, [pc, #252]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	4b3b      	ldr	r3, [pc, #236]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8c:	4a3a      	ldr	r2, [pc, #232]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e8e:	f043 0301 	orr.w	r3, r3, #1
 8007e92:	6313      	str	r3, [r2, #48]	; 0x30
 8007e94:	4b38      	ldr	r3, [pc, #224]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	4b34      	ldr	r3, [pc, #208]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	4a33      	ldr	r2, [pc, #204]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007eaa:	f043 0302 	orr.w	r3, r3, #2
 8007eae:	6313      	str	r3, [r2, #48]	; 0x30
 8007eb0:	4b31      	ldr	r3, [pc, #196]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60bb      	str	r3, [r7, #8]
 8007ec0:	4b2d      	ldr	r3, [pc, #180]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	4a2c      	ldr	r2, [pc, #176]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eca:	6313      	str	r3, [r2, #48]	; 0x30
 8007ecc:	4b2a      	ldr	r3, [pc, #168]	; (8007f78 <HAL_ETH_MspInit+0x188>)
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	60bb      	str	r3, [r7, #8]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007ed8:	2332      	movs	r3, #50	; 0x32
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007edc:	2302      	movs	r3, #2
 8007ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ee8:	230b      	movs	r3, #11
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4822      	ldr	r0, [pc, #136]	; (8007f7c <HAL_ETH_MspInit+0x18c>)
 8007ef4:	f7fb f9b4 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007ef8:	2386      	movs	r3, #134	; 0x86
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efc:	2302      	movs	r3, #2
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f04:	2303      	movs	r3, #3
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007f08:	230b      	movs	r3, #11
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f10:	4619      	mov	r1, r3
 8007f12:	481b      	ldr	r0, [pc, #108]	; (8007f80 <HAL_ETH_MspInit+0x190>)
 8007f14:	f7fb f9a4 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f26:	2303      	movs	r3, #3
 8007f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007f2a:	230b      	movs	r3, #11
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f32:	4619      	mov	r1, r3
 8007f34:	4813      	ldr	r0, [pc, #76]	; (8007f84 <HAL_ETH_MspInit+0x194>)
 8007f36:	f7fb f993 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007f3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f40:	2302      	movs	r3, #2
 8007f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f44:	2300      	movs	r3, #0
 8007f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007f4c:	230b      	movs	r3, #11
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f54:	4619      	mov	r1, r3
 8007f56:	480c      	ldr	r0, [pc, #48]	; (8007f88 <HAL_ETH_MspInit+0x198>)
 8007f58:	f7fb f982 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2105      	movs	r1, #5
 8007f60:	203d      	movs	r0, #61	; 0x3d
 8007f62:	f7f9 ffe0 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007f66:	203d      	movs	r0, #61	; 0x3d
 8007f68:	f7f9 fff9 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	3738      	adds	r7, #56	; 0x38
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40028000 	.word	0x40028000
 8007f78:	40023800 	.word	0x40023800
 8007f7c:	40020800 	.word	0x40020800
 8007f80:	40020000 	.word	0x40020000
 8007f84:	40020400 	.word	0x40020400
 8007f88:	40021800 	.word	0x40021800

08007f8c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <HAL_ETH_RxCpltCallback+0x1c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f002 f88b 	bl	800a0b4 <osSemaphoreRelease>
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000f08 	.word	0x20000f08

08007fac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007fac:	b5b0      	push	{r4, r5, r7, lr}
 8007fae:	b090      	sub	sp, #64	; 0x40
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007fb8:	4b60      	ldr	r3, [pc, #384]	; (800813c <low_level_init+0x190>)
 8007fba:	4a61      	ldr	r2, [pc, #388]	; (8008140 <low_level_init+0x194>)
 8007fbc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007fbe:	4b5f      	ldr	r3, [pc, #380]	; (800813c <low_level_init+0x190>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007fc4:	4b5d      	ldr	r3, [pc, #372]	; (800813c <low_level_init+0x190>)
 8007fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fca:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007fcc:	4b5b      	ldr	r3, [pc, #364]	; (800813c <low_level_init+0x190>)
 8007fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fd2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007fd4:	4b59      	ldr	r3, [pc, #356]	; (800813c <low_level_init+0x190>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007fe0:	2380      	movs	r3, #128	; 0x80
 8007fe2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8007fe6:	23e1      	movs	r3, #225	; 0xe1
 8007fe8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007fec:	2300      	movs	r3, #0
 8007fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007ffe:	4a4f      	ldr	r2, [pc, #316]	; (800813c <low_level_init+0x190>)
 8008000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008004:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8008006:	4b4d      	ldr	r3, [pc, #308]	; (800813c <low_level_init+0x190>)
 8008008:	2201      	movs	r2, #1
 800800a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800800c:	4b4b      	ldr	r3, [pc, #300]	; (800813c <low_level_init+0x190>)
 800800e:	2200      	movs	r2, #0
 8008010:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008012:	4b4a      	ldr	r3, [pc, #296]	; (800813c <low_level_init+0x190>)
 8008014:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008018:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800801a:	4848      	ldr	r0, [pc, #288]	; (800813c <low_level_init+0x190>)
 800801c:	f7f9 ffae 	bl	8001f7c <HAL_ETH_Init>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8008026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800802a:	2b00      	cmp	r3, #0
 800802c:	d108      	bne.n	8008040 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008034:	f043 0304 	orr.w	r3, r3, #4
 8008038:	b2da      	uxtb	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008040:	2304      	movs	r3, #4
 8008042:	4a40      	ldr	r2, [pc, #256]	; (8008144 <low_level_init+0x198>)
 8008044:	4940      	ldr	r1, [pc, #256]	; (8008148 <low_level_init+0x19c>)
 8008046:	483d      	ldr	r0, [pc, #244]	; (800813c <low_level_init+0x190>)
 8008048:	f7fa f924 	bl	8002294 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800804c:	2304      	movs	r3, #4
 800804e:	4a3f      	ldr	r2, [pc, #252]	; (800814c <low_level_init+0x1a0>)
 8008050:	493f      	ldr	r1, [pc, #252]	; (8008150 <low_level_init+0x1a4>)
 8008052:	483a      	ldr	r0, [pc, #232]	; (800813c <low_level_init+0x190>)
 8008054:	f7fa f985 	bl	8002362 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2206      	movs	r2, #6
 800805c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008060:	4b36      	ldr	r3, [pc, #216]	; (800813c <low_level_init+0x190>)
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	781a      	ldrb	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800806c:	4b33      	ldr	r3, [pc, #204]	; (800813c <low_level_init+0x190>)
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	785a      	ldrb	r2, [r3, #1]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008078:	4b30      	ldr	r3, [pc, #192]	; (800813c <low_level_init+0x190>)
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	789a      	ldrb	r2, [r3, #2]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008084:	4b2d      	ldr	r3, [pc, #180]	; (800813c <low_level_init+0x190>)
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	78da      	ldrb	r2, [r3, #3]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008090:	4b2a      	ldr	r3, [pc, #168]	; (800813c <low_level_init+0x190>)
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	791a      	ldrb	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800809c:	4b27      	ldr	r3, [pc, #156]	; (800813c <low_level_init+0x190>)
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	795a      	ldrb	r2, [r3, #5]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80080ae:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80080b6:	f043 030a 	orr.w	r3, r3, #10
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80080c2:	2300      	movs	r3, #0
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	2300      	movs	r3, #0
 80080c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80080ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080ce:	2101      	movs	r1, #1
 80080d0:	4618      	mov	r0, r3
 80080d2:	f001 ff6f 	bl	8009fb4 <osSemaphoreCreate>
 80080d6:	4603      	mov	r3, r0
 80080d8:	4a1e      	ldr	r2, [pc, #120]	; (8008154 <low_level_init+0x1a8>)
 80080da:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80080dc:	4b1e      	ldr	r3, [pc, #120]	; (8008158 <low_level_init+0x1ac>)
 80080de:	f107 040c 	add.w	r4, r7, #12
 80080e2:	461d      	mov	r5, r3
 80080e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	6879      	ldr	r1, [r7, #4]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fe60 	bl	8009dbc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80080fc:	480f      	ldr	r0, [pc, #60]	; (800813c <low_level_init+0x190>)
 80080fe:	f7fa fc4e 	bl	800299e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008102:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008106:	461a      	mov	r2, r3
 8008108:	211d      	movs	r1, #29
 800810a:	480c      	ldr	r0, [pc, #48]	; (800813c <low_level_init+0x190>)
 800810c:	f7fa fb79 	bl	8002802 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f043 030b 	orr.w	r3, r3, #11
 8008116:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	461a      	mov	r2, r3
 800811c:	211d      	movs	r1, #29
 800811e:	4807      	ldr	r0, [pc, #28]	; (800813c <low_level_init+0x190>)
 8008120:	f7fa fbd7 	bl	80028d2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008124:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008128:	461a      	mov	r2, r3
 800812a:	211d      	movs	r1, #29
 800812c:	4803      	ldr	r0, [pc, #12]	; (800813c <low_level_init+0x190>)
 800812e:	f7fa fb68 	bl	8002802 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008132:	bf00      	nop
 8008134:	3740      	adds	r7, #64	; 0x40
 8008136:	46bd      	mov	sp, r7
 8008138:	bdb0      	pop	{r4, r5, r7, pc}
 800813a:	bf00      	nop
 800813c:	20006f94 	.word	0x20006f94
 8008140:	40028000 	.word	0x40028000
 8008144:	20006fdc 	.word	0x20006fdc
 8008148:	200056c4 	.word	0x200056c4
 800814c:	20005744 	.word	0x20005744
 8008150:	20006f14 	.word	0x20006f14
 8008154:	20000f08 	.word	0x20000f08
 8008158:	0801b9d4 	.word	0x0801b9d4

0800815c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08a      	sub	sp, #40	; 0x28
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008166:	4b4b      	ldr	r3, [pc, #300]	; (8008294 <low_level_output+0x138>)
 8008168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800817a:	2300      	movs	r3, #0
 800817c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800817e:	4b45      	ldr	r3, [pc, #276]	; (8008294 <low_level_output+0x138>)
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	623b      	str	r3, [r7, #32]
 800818c:	e05a      	b.n	8008244 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	da03      	bge.n	800819e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008196:	23f8      	movs	r3, #248	; 0xf8
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800819c:	e05c      	b.n	8008258 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	895b      	ldrh	r3, [r3, #10]
 80081a2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80081a8:	e02f      	b.n	800820a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80081aa:	69fa      	ldr	r2, [r7, #28]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	18d0      	adds	r0, r2, r3
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	18d1      	adds	r1, r2, r3
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80081be:	3304      	adds	r3, #4
 80081c0:	461a      	mov	r2, r3
 80081c2:	f012 f96f 	bl	801a4a4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	da03      	bge.n	80081dc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80081d4:	23f8      	movs	r3, #248	; 0xf8
 80081d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80081da:	e03d      	b.n	8008258 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80081ec:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80081f8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008204:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008206:	2300      	movs	r3, #0
 8008208:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	4413      	add	r3, r2
 8008210:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008214:	4293      	cmp	r3, r2
 8008216:	d8c8      	bhi.n	80081aa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	18d0      	adds	r0, r2, r3
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	4619      	mov	r1, r3
 800822a:	f012 f93b 	bl	801a4a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	623b      	str	r3, [r7, #32]
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1a1      	bne.n	800818e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800824a:	6979      	ldr	r1, [r7, #20]
 800824c:	4811      	ldr	r0, [pc, #68]	; (8008294 <low_level_output+0x138>)
 800824e:	f7fa f8f3 	bl	8002438 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008258:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <low_level_output+0x138>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800826a:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <low_level_output+0x138>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008272:	461a      	mov	r2, r3
 8008274:	2320      	movs	r3, #32
 8008276:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <low_level_output+0x138>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008280:	461a      	mov	r2, r3
 8008282:	2300      	movs	r3, #0
 8008284:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008286:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800828a:	4618      	mov	r0, r3
 800828c:	3728      	adds	r7, #40	; 0x28
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20006f94 	.word	0x20006f94

08008298 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	; 0x30
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80082bc:	484e      	ldr	r0, [pc, #312]	; (80083f8 <low_level_input+0x160>)
 80082be:	f7fa f9a3 	bl	8002608 <HAL_ETH_GetReceivedFrame_IT>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <low_level_input+0x34>

    return NULL;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e090      	b.n	80083ee <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80082cc:	4b4a      	ldr	r3, [pc, #296]	; (80083f8 <low_level_input+0x160>)
 80082ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80082d2:	4b49      	ldr	r3, [pc, #292]	; (80083f8 <low_level_input+0x160>)
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80082d8:	89fb      	ldrh	r3, [r7, #14]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d006      	beq.n	80082ec <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80082de:	89fb      	ldrh	r3, [r7, #14]
 80082e0:	2203      	movs	r2, #3
 80082e2:	4619      	mov	r1, r3
 80082e4:	2004      	movs	r0, #4
 80082e6:	f008 fb19 	bl	801091c <pbuf_alloc>
 80082ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d04b      	beq.n	800838a <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80082f2:	4b41      	ldr	r3, [pc, #260]	; (80083f8 <low_level_input+0x160>)
 80082f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f6:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008300:	e040      	b.n	8008384 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	895b      	ldrh	r3, [r3, #10]
 8008306:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800830c:	e021      	b.n	8008352 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	18d0      	adds	r0, r2, r3
 8008316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	18d1      	adds	r1, r2, r3
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008322:	3304      	adds	r3, #4
 8008324:	461a      	mov	r2, r3
 8008326:	f012 f8bd 	bl	801a4a4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4413      	add	r3, r2
 800833c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008340:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800834c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	4413      	add	r3, r2
 8008358:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800835c:	4293      	cmp	r3, r2
 800835e:	d8d6      	bhi.n	800830e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	18d0      	adds	r0, r2, r3
 8008368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	4619      	mov	r1, r3
 8008372:	f012 f897 	bl	801a4a4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	4413      	add	r3, r2
 800837c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800837e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1bb      	bne.n	8008302 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <low_level_input+0x160>)
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008390:	2300      	movs	r3, #0
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	e00b      	b.n	80083ae <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	3301      	adds	r3, #1
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	4b12      	ldr	r3, [pc, #72]	; (80083f8 <low_level_input+0x160>)
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d3ee      	bcc.n	8008396 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <low_level_input+0x160>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80083be:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <low_level_input+0x160>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00d      	beq.n	80083ec <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80083d0:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <low_level_input+0x160>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d8:	461a      	mov	r2, r3
 80083da:	2380      	movs	r3, #128	; 0x80
 80083dc:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80083de:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <low_level_input+0x160>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e6:	461a      	mov	r2, r3
 80083e8:	2300      	movs	r3, #0
 80083ea:	6093      	str	r3, [r2, #8]
  }
  return p;
 80083ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3730      	adds	r7, #48	; 0x30
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20006f94 	.word	0x20006f94

080083fc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008408:	4b12      	ldr	r3, [pc, #72]	; (8008454 <ethernetif_input+0x58>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f04f 31ff 	mov.w	r1, #4294967295
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fe01 	bl	800a018 <osSemaphoreWait>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f5      	bne.n	8008408 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800841c:	480e      	ldr	r0, [pc, #56]	; (8008458 <ethernetif_input+0x5c>)
 800841e:	f011 f9b7 	bl	8019790 <sys_mutex_lock>
        p = low_level_input( netif );
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff ff38 	bl	8008298 <low_level_input>
 8008428:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	68f9      	ldr	r1, [r7, #12]
 8008436:	68b8      	ldr	r0, [r7, #8]
 8008438:	4798      	blx	r3
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008440:	68b8      	ldr	r0, [r7, #8]
 8008442:	f008 fde3 	bl	801100c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8008446:	4804      	ldr	r0, [pc, #16]	; (8008458 <ethernetif_input+0x5c>)
 8008448:	f011 f9b1 	bl	80197ae <sys_mutex_unlock>
      } while(p!=NULL);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e4      	bne.n	800841c <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008452:	e7d9      	b.n	8008408 <ethernetif_input+0xc>
 8008454:	20000f08 	.word	0x20000f08
 8008458:	200087ac 	.word	0x200087ac

0800845c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <ethernetif_init+0x1c>
 800846a:	4b0e      	ldr	r3, [pc, #56]	; (80084a4 <ethernetif_init+0x48>)
 800846c:	f240 2236 	movw	r2, #566	; 0x236
 8008470:	490d      	ldr	r1, [pc, #52]	; (80084a8 <ethernetif_init+0x4c>)
 8008472:	480e      	ldr	r0, [pc, #56]	; (80084ac <ethernetif_init+0x50>)
 8008474:	f012 f908 	bl	801a688 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2273      	movs	r2, #115	; 0x73
 800847c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2274      	movs	r2, #116	; 0x74
 8008484:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <ethernetif_init+0x54>)
 800848c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a08      	ldr	r2, [pc, #32]	; (80084b4 <ethernetif_init+0x58>)
 8008492:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff fd89 	bl	8007fac <low_level_init>

  return ERR_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	0801b9f0 	.word	0x0801b9f0
 80084a8:	0801ba0c 	.word	0x0801ba0c
 80084ac:	0801ba1c 	.word	0x0801ba1c
 80084b0:	08017a1d 	.word	0x08017a1d
 80084b4:	0800815d 	.word	0x0800815d

080084b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80084bc:	f7f9 fb54 	bl	8001b68 <HAL_GetTick>
 80084c0:	4603      	mov	r3, r0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80084d8:	f107 0308 	add.w	r3, r7, #8
 80084dc:	461a      	mov	r2, r3
 80084de:	2101      	movs	r1, #1
 80084e0:	4816      	ldr	r0, [pc, #88]	; (800853c <ethernetif_set_link+0x74>)
 80084e2:	f7fa f98e 	bl	8002802 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d108      	bne.n	8008510 <ethernetif_set_link+0x48>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4618      	mov	r0, r3
 800850a:	f008 f94b 	bl	80107a4 <netif_set_link_up>
 800850e:	e011      	b.n	8008534 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008518:	089b      	lsrs	r3, r3, #2
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d007      	beq.n	8008534 <ethernetif_set_link+0x6c>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d104      	bne.n	8008534 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f008 f963 	bl	80107fa <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8008534:	20c8      	movs	r0, #200	; 0xc8
 8008536:	f001 fc8d 	bl	8009e54 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800853a:	e7cd      	b.n	80084d8 <ethernetif_set_link+0x10>
 800853c:	20006f94 	.word	0x20006f94

08008540 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008556:	089b      	lsrs	r3, r3, #2
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d05d      	beq.n	800861e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008562:	4b34      	ldr	r3, [pc, #208]	; (8008634 <ethernetif_update_config+0xf4>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d03f      	beq.n	80085ea <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800856a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800856e:	2100      	movs	r1, #0
 8008570:	4830      	ldr	r0, [pc, #192]	; (8008634 <ethernetif_update_config+0xf4>)
 8008572:	f7fa f9ae 	bl	80028d2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008576:	f7f9 faf7 	bl	8001b68 <HAL_GetTick>
 800857a:	4603      	mov	r3, r0
 800857c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	461a      	mov	r2, r3
 8008584:	2101      	movs	r1, #1
 8008586:	482b      	ldr	r0, [pc, #172]	; (8008634 <ethernetif_update_config+0xf4>)
 8008588:	f7fa f93b 	bl	8002802 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800858c:	f7f9 faec 	bl	8001b68 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800859a:	d828      	bhi.n	80085ee <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0eb      	beq.n	800857e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	461a      	mov	r2, r3
 80085ac:	2110      	movs	r1, #16
 80085ae:	4821      	ldr	r0, [pc, #132]	; (8008634 <ethernetif_update_config+0xf4>)
 80085b0:	f7fa f927 	bl	8002802 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d004      	beq.n	80085c8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80085be:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <ethernetif_update_config+0xf4>)
 80085c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085c4:	60da      	str	r2, [r3, #12]
 80085c6:	e002      	b.n	80085ce <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80085c8:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <ethernetif_update_config+0xf4>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80085d8:	4b16      	ldr	r3, [pc, #88]	; (8008634 <ethernetif_update_config+0xf4>)
 80085da:	2200      	movs	r2, #0
 80085dc:	609a      	str	r2, [r3, #8]
 80085de:	e016      	b.n	800860e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80085e0:	4b14      	ldr	r3, [pc, #80]	; (8008634 <ethernetif_update_config+0xf4>)
 80085e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085e6:	609a      	str	r2, [r3, #8]
 80085e8:	e011      	b.n	800860e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80085ea:	bf00      	nop
 80085ec:	e000      	b.n	80085f0 <ethernetif_update_config+0xb0>
          goto error;
 80085ee:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80085f0:	4b10      	ldr	r3, [pc, #64]	; (8008634 <ethernetif_update_config+0xf4>)
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	08db      	lsrs	r3, r3, #3
 80085f6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80085f8:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <ethernetif_update_config+0xf4>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	085b      	lsrs	r3, r3, #1
 80085fe:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008600:	4313      	orrs	r3, r2
 8008602:	b29b      	uxth	r3, r3
 8008604:	461a      	mov	r2, r3
 8008606:	2100      	movs	r1, #0
 8008608:	480a      	ldr	r0, [pc, #40]	; (8008634 <ethernetif_update_config+0xf4>)
 800860a:	f7fa f962 	bl	80028d2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800860e:	2100      	movs	r1, #0
 8008610:	4808      	ldr	r0, [pc, #32]	; (8008634 <ethernetif_update_config+0xf4>)
 8008612:	f7fa fa23 	bl	8002a5c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008616:	4807      	ldr	r0, [pc, #28]	; (8008634 <ethernetif_update_config+0xf4>)
 8008618:	f7fa f9c1 	bl	800299e <HAL_ETH_Start>
 800861c:	e002      	b.n	8008624 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800861e:	4805      	ldr	r0, [pc, #20]	; (8008634 <ethernetif_update_config+0xf4>)
 8008620:	f7fa f9ec 	bl	80029fc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f807 	bl	8008638 <ethernetif_notify_conn_changed>
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	20006f94 	.word	0x20006f94

08008638 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	bc80      	pop	{r7}
 8008648:	4770      	bx	lr

0800864a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7c1b      	ldrb	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d115      	bne.n	800868e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008666:	2202      	movs	r2, #2
 8008668:	2181      	movs	r1, #129	; 0x81
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f011 fc89 	bl	8019f82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800867a:	2202      	movs	r2, #2
 800867c:	2101      	movs	r1, #1
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f011 fc7f 	bl	8019f82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800868c:	e012      	b.n	80086b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800868e:	2340      	movs	r3, #64	; 0x40
 8008690:	2202      	movs	r2, #2
 8008692:	2181      	movs	r1, #129	; 0x81
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f011 fc74 	bl	8019f82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80086a0:	2340      	movs	r3, #64	; 0x40
 80086a2:	2202      	movs	r2, #2
 80086a4:	2101      	movs	r1, #1
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f011 fc6b 	bl	8019f82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80086b4:	2308      	movs	r3, #8
 80086b6:	2203      	movs	r2, #3
 80086b8:	2182      	movs	r1, #130	; 0x82
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f011 fc61 	bl	8019f82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80086c6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80086ca:	f011 fecb 	bl	801a464 <malloc>
 80086ce:	4603      	mov	r3, r0
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80086e2:	2301      	movs	r3, #1
 80086e4:	73fb      	strb	r3, [r7, #15]
 80086e6:	e026      	b.n	8008736 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7c1b      	ldrb	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d109      	bne.n	8008726 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800871c:	2101      	movs	r1, #1
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f011 fd1f 	bl	801a162 <USBD_LL_PrepareReceive>
 8008724:	e007      	b.n	8008736 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800872c:	2340      	movs	r3, #64	; 0x40
 800872e:	2101      	movs	r1, #1
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f011 fd16 	bl	801a162 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008750:	2181      	movs	r1, #129	; 0x81
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f011 fc3b 	bl	8019fce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800875e:	2101      	movs	r1, #1
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f011 fc34 	bl	8019fce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800876e:	2182      	movs	r1, #130	; 0x82
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f011 fc2c 	bl	8019fce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008796:	4618      	mov	r0, r3
 8008798:	f011 fe6c 	bl	801a474 <free>
    pdev->pClassData = NULL;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b086      	sub	sp, #24
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d039      	beq.n	800884c <USBD_CDC_Setup+0x9e>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d17f      	bne.n	80088dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	88db      	ldrh	r3, [r3, #6]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d029      	beq.n	8008838 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	b25b      	sxtb	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da11      	bge.n	8008812 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80087fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	88d2      	ldrh	r2, [r2, #6]
 8008800:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008802:	6939      	ldr	r1, [r7, #16]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	88db      	ldrh	r3, [r3, #6]
 8008808:	461a      	mov	r2, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fa13 	bl	8009c36 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008810:	e06b      	b.n	80088ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	785a      	ldrb	r2, [r3, #1]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	88db      	ldrh	r3, [r3, #6]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008828:	6939      	ldr	r1, [r7, #16]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	88db      	ldrh	r3, [r3, #6]
 800882e:	461a      	mov	r2, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 fa2e 	bl	8009c92 <USBD_CtlPrepareRx>
      break;
 8008836:	e058      	b.n	80088ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	7850      	ldrb	r0, [r2, #1]
 8008844:	2200      	movs	r2, #0
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	4798      	blx	r3
      break;
 800884a:	e04e      	b.n	80088ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	2b0b      	cmp	r3, #11
 8008852:	d02e      	beq.n	80088b2 <USBD_CDC_Setup+0x104>
 8008854:	2b0b      	cmp	r3, #11
 8008856:	dc38      	bgt.n	80088ca <USBD_CDC_Setup+0x11c>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <USBD_CDC_Setup+0xb4>
 800885c:	2b0a      	cmp	r3, #10
 800885e:	d014      	beq.n	800888a <USBD_CDC_Setup+0xdc>
 8008860:	e033      	b.n	80088ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008868:	2b03      	cmp	r3, #3
 800886a:	d107      	bne.n	800887c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800886c:	f107 030c 	add.w	r3, r7, #12
 8008870:	2202      	movs	r2, #2
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 f9de 	bl	8009c36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800887a:	e02e      	b.n	80088da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f96f 	bl	8009b62 <USBD_CtlError>
            ret = USBD_FAIL;
 8008884:	2302      	movs	r3, #2
 8008886:	75fb      	strb	r3, [r7, #23]
          break;
 8008888:	e027      	b.n	80088da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008890:	2b03      	cmp	r3, #3
 8008892:	d107      	bne.n	80088a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008894:	f107 030f 	add.w	r3, r7, #15
 8008898:	2201      	movs	r2, #1
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 f9ca 	bl	8009c36 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088a2:	e01a      	b.n	80088da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 f95b 	bl	8009b62 <USBD_CtlError>
            ret = USBD_FAIL;
 80088ac:	2302      	movs	r3, #2
 80088ae:	75fb      	strb	r3, [r7, #23]
          break;
 80088b0:	e013      	b.n	80088da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b8:	2b03      	cmp	r3, #3
 80088ba:	d00d      	beq.n	80088d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 f94f 	bl	8009b62 <USBD_CtlError>
            ret = USBD_FAIL;
 80088c4:	2302      	movs	r3, #2
 80088c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088c8:	e006      	b.n	80088d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f948 	bl	8009b62 <USBD_CtlError>
          ret = USBD_FAIL;
 80088d2:	2302      	movs	r3, #2
 80088d4:	75fb      	strb	r3, [r7, #23]
          break;
 80088d6:	e000      	b.n	80088da <USBD_CDC_Setup+0x12c>
          break;
 80088d8:	bf00      	nop
      }
      break;
 80088da:	e006      	b.n	80088ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 f93f 	bl	8009b62 <USBD_CtlError>
      ret = USBD_FAIL;
 80088e4:	2302      	movs	r3, #2
 80088e6:	75fb      	strb	r3, [r7, #23]
      break;
 80088e8:	bf00      	nop
  }

  return ret;
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008906:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800890e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d03a      	beq.n	8008990 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	331c      	adds	r3, #28
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d029      	beq.n	8008984 <USBD_CDC_DataIn+0x90>
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	6879      	ldr	r1, [r7, #4]
 8008934:	4613      	mov	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	331c      	adds	r3, #28
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	78f9      	ldrb	r1, [r7, #3]
 8008944:	68b8      	ldr	r0, [r7, #8]
 8008946:	460b      	mov	r3, r1
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	1a5b      	subs	r3, r3, r1
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4403      	add	r3, r0
 8008950:	3344      	adds	r3, #68	; 0x44
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	fbb2 f1f3 	udiv	r1, r2, r3
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d110      	bne.n	8008984 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008962:	78fa      	ldrb	r2, [r7, #3]
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	331c      	adds	r3, #28
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008976:	78f9      	ldrb	r1, [r7, #3]
 8008978:	2300      	movs	r3, #0
 800897a:	2200      	movs	r2, #0
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f011 fbcd 	bl	801a11c <USBD_LL_Transmit>
 8008982:	e003      	b.n	800898c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	e000      	b.n	8008992 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008990:	2302      	movs	r3, #2
  }
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f011 fbf8 	bl	801a1a8 <USBD_LL_GetRxDataSize>
 80089b8:	4602      	mov	r2, r0
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00d      	beq.n	80089e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80089de:	4611      	mov	r1, r2
 80089e0:	4798      	blx	r3

    return USBD_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e000      	b.n	80089e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80089e6:	2302      	movs	r3, #2
  }
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d015      	beq.n	8008a36 <USBD_CDC_EP0_RxReady+0x46>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a10:	2bff      	cmp	r3, #255	; 0xff
 8008a12:	d010      	beq.n	8008a36 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008a22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008a2a:	b292      	uxth	r2, r2
 8008a2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	22ff      	movs	r2, #255	; 0xff
 8008a32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2243      	movs	r2, #67	; 0x43
 8008a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008a4e:	4b03      	ldr	r3, [pc, #12]	; (8008a5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bc80      	pop	{r7}
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	200000c0 	.word	0x200000c0

08008a60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2243      	movs	r2, #67	; 0x43
 8008a6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008a6e:	4b03      	ldr	r3, [pc, #12]	; (8008a7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bc80      	pop	{r7}
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	2000007c 	.word	0x2000007c

08008a80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2243      	movs	r2, #67	; 0x43
 8008a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008a8e:	4b03      	ldr	r3, [pc, #12]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bc80      	pop	{r7}
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	20000104 	.word	0x20000104

08008aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	220a      	movs	r2, #10
 8008aac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008aae:	4b03      	ldr	r3, [pc, #12]	; (8008abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	20000038 	.word	0x20000038

08008ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008aca:	2302      	movs	r3, #2
 8008acc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b0a:	88fa      	ldrh	r2, [r7, #6]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr

08008b1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d017      	beq.n	8008b8e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	7c1b      	ldrb	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b70:	2101      	movs	r1, #1
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f011 faf5 	bl	801a162 <USBD_LL_PrepareReceive>
 8008b78:	e007      	b.n	8008b8a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b80:	2340      	movs	r3, #64	; 0x40
 8008b82:	2101      	movs	r1, #1
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f011 faec 	bl	801a162 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e000      	b.n	8008b90 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008b8e:	2302      	movs	r3, #2
  }
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008bac:	2302      	movs	r3, #2
 8008bae:	e01a      	b.n	8008be6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	79fa      	ldrb	r2, [r7, #7]
 8008bdc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f011 f96a 	bl	8019eb8 <USBD_LL_Init>

  return USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d006      	beq.n	8008c10 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
 8008c0e:	e001      	b.n	8008c14 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008c10:	2302      	movs	r3, #2
 8008c12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr

08008c20 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f011 f98f 	bl	8019f4c <USBD_LL_Start>

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr

08008c4c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	460b      	mov	r3, r1
 8008c56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00c      	beq.n	8008c80 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b082      	sub	sp, #8
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	78fa      	ldrb	r2, [r7, #3]
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3

  return USBD_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 ff11 	bl	8009aea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ce4:	f003 031f 	and.w	r3, r3, #31
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d016      	beq.n	8008d1a <USBD_LL_SetupStage+0x6a>
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d81c      	bhi.n	8008d2a <USBD_LL_SetupStage+0x7a>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <USBD_LL_SetupStage+0x4a>
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d008      	beq.n	8008d0a <USBD_LL_SetupStage+0x5a>
 8008cf8:	e017      	b.n	8008d2a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d00:	4619      	mov	r1, r3
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa04 	bl	8009110 <USBD_StdDevReq>
      break;
 8008d08:	e01a      	b.n	8008d40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa66 	bl	80091e4 <USBD_StdItfReq>
      break;
 8008d18:	e012      	b.n	8008d40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 faa6 	bl	8009274 <USBD_StdEPReq>
      break;
 8008d28:	e00a      	b.n	8008d40 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f011 f967 	bl	801a00c <USBD_LL_StallEP>
      break;
 8008d3e:	bf00      	nop
  }

  return USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b086      	sub	sp, #24
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	60f8      	str	r0, [r7, #12]
 8008d52:	460b      	mov	r3, r1
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d14b      	bne.n	8008df6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d134      	bne.n	8008dda <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	68da      	ldr	r2, [r3, #12]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d919      	bls.n	8008db0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	1ad2      	subs	r2, r2, r3
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d203      	bcs.n	8008d9e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	e002      	b.n	8008da4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 ff90 	bl	8009cce <USBD_CtlContinueRx>
 8008dae:	e038      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00a      	beq.n	8008dd2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d105      	bne.n	8008dd2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 ff8d 	bl	8009cf2 <USBD_CtlSendStatus>
 8008dd8:	e023      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008de0:	2b05      	cmp	r3, #5
 8008de2:	d11e      	bne.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008dec:	2100      	movs	r1, #0
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f011 f90c 	bl	801a00c <USBD_LL_StallEP>
 8008df4:	e015      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00d      	beq.n	8008e1e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d108      	bne.n	8008e1e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	7afa      	ldrb	r2, [r7, #11]
 8008e16:	4611      	mov	r1, r2
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	4798      	blx	r3
 8008e1c:	e001      	b.n	8008e22 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e000      	b.n	8008e24 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	460b      	mov	r3, r1
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008e3a:	7afb      	ldrb	r3, [r7, #11]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d17f      	bne.n	8008f40 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3314      	adds	r3, #20
 8008e44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d15c      	bne.n	8008f0a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d915      	bls.n	8008e88 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	1ad2      	subs	r2, r2, r3
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 fefa 	bl	8009c6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2100      	movs	r1, #0
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f011 f96e 	bl	801a162 <USBD_LL_PrepareReceive>
 8008e86:	e04e      	b.n	8008f26 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	6912      	ldr	r2, [r2, #16]
 8008e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e94:	fb01 f202 	mul.w	r2, r1, r2
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d11c      	bne.n	8008ed8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d316      	bcc.n	8008ed8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d20f      	bcs.n	8008ed8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fed6 	bl	8009c6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2100      	movs	r1, #0
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f011 f946 	bl	801a162 <USBD_LL_PrepareReceive>
 8008ed6:	e026      	b.n	8008f26 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d105      	bne.n	8008efa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008efa:	2180      	movs	r1, #128	; 0x80
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f011 f885 	bl	801a00c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f000 ff08 	bl	8009d18 <USBD_CtlReceiveStatus>
 8008f08:	e00d      	b.n	8008f26 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d004      	beq.n	8008f1e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d103      	bne.n	8008f26 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f1e:	2180      	movs	r1, #128	; 0x80
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f011 f873 	bl	801a00c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d11d      	bne.n	8008f6c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7ff fe81 	bl	8008c38 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f3e:	e015      	b.n	8008f6c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00d      	beq.n	8008f68 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d108      	bne.n	8008f68 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	7afa      	ldrb	r2, [r7, #11]
 8008f60:	4611      	mov	r1, r2
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
 8008f66:	e001      	b.n	8008f6c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e000      	b.n	8008f6e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f7e:	2340      	movs	r3, #64	; 0x40
 8008f80:	2200      	movs	r2, #0
 8008f82:	2100      	movs	r1, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f010 fffc 	bl	8019f82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2240      	movs	r2, #64	; 0x40
 8008f96:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f9a:	2340      	movs	r3, #64	; 0x40
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2180      	movs	r1, #128	; 0x80
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f010 ffee 	bl	8019f82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2240      	movs	r2, #64	; 0x40
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6852      	ldr	r2, [r2, #4]
 8008fe6:	b2d2      	uxtb	r2, r2
 8008fe8:	4611      	mov	r1, r2
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
  }

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	78fa      	ldrb	r2, [r7, #3]
 8009008:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2204      	movs	r2, #4
 800902e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	bc80      	pop	{r7}
 800903c:	4770      	bx	lr

0800903e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800903e:	b480      	push	{r7}
 8009040:	b083      	sub	sp, #12
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800904c:	2b04      	cmp	r3, #4
 800904e:	d105      	bne.n	800905c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	bc80      	pop	{r7}
 8009066:	4770      	bx	lr

08009068 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009076:	2b03      	cmp	r3, #3
 8009078:	d10b      	bne.n	8009092 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bc80      	pop	{r7}
 80090b2:	4770      	bx	lr

080090b4 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr

080090cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	bc80      	pop	{r7}
 80090de:	4770      	bx	lr

080090e0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	6852      	ldr	r2, [r2, #4]
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	4611      	mov	r1, r2
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009126:	2b40      	cmp	r3, #64	; 0x40
 8009128:	d005      	beq.n	8009136 <USBD_StdDevReq+0x26>
 800912a:	2b40      	cmp	r3, #64	; 0x40
 800912c:	d84f      	bhi.n	80091ce <USBD_StdDevReq+0xbe>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <USBD_StdDevReq+0x36>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d14b      	bne.n	80091ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
      break;
 8009144:	e048      	b.n	80091d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b09      	cmp	r3, #9
 800914c:	d839      	bhi.n	80091c2 <USBD_StdDevReq+0xb2>
 800914e:	a201      	add	r2, pc, #4	; (adr r2, 8009154 <USBD_StdDevReq+0x44>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091b9 	.word	0x080091b9
 800915c:	080091c3 	.word	0x080091c3
 8009160:	080091af 	.word	0x080091af
 8009164:	080091c3 	.word	0x080091c3
 8009168:	08009187 	.word	0x08009187
 800916c:	0800917d 	.word	0x0800917d
 8009170:	080091c3 	.word	0x080091c3
 8009174:	0800919b 	.word	0x0800919b
 8009178:	08009191 	.word	0x08009191
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9dc 	bl	800953c <USBD_GetDescriptor>
          break;
 8009184:	e022      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb3f 	bl	800980c <USBD_SetAddress>
          break;
 800918e:	e01d      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb7e 	bl	8009894 <USBD_SetConfig>
          break;
 8009198:	e018      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fc07 	bl	80099b0 <USBD_GetConfig>
          break;
 80091a2:	e013      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc37 	bl	8009a1a <USBD_GetStatus>
          break;
 80091ac:	e00e      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fc65 	bl	8009a80 <USBD_SetFeature>
          break;
 80091b6:	e009      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fc74 	bl	8009aa8 <USBD_ClrFeature>
          break;
 80091c0:	e004      	b.n	80091cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fccc 	bl	8009b62 <USBD_CtlError>
          break;
 80091ca:	bf00      	nop
      }
      break;
 80091cc:	e004      	b.n	80091d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fcc6 	bl	8009b62 <USBD_CtlError>
      break;
 80091d6:	bf00      	nop
  }

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop

080091e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091fa:	2b40      	cmp	r3, #64	; 0x40
 80091fc:	d005      	beq.n	800920a <USBD_StdItfReq+0x26>
 80091fe:	2b40      	cmp	r3, #64	; 0x40
 8009200:	d82e      	bhi.n	8009260 <USBD_StdItfReq+0x7c>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <USBD_StdItfReq+0x26>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d12a      	bne.n	8009260 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009210:	3b01      	subs	r3, #1
 8009212:	2b02      	cmp	r3, #2
 8009214:	d81d      	bhi.n	8009252 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	889b      	ldrh	r3, [r3, #4]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d813      	bhi.n	8009248 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	88db      	ldrh	r3, [r3, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d110      	bne.n	800925c <USBD_StdItfReq+0x78>
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fd56 	bl	8009cf2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009246:	e009      	b.n	800925c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc89 	bl	8009b62 <USBD_CtlError>
          break;
 8009250:	e004      	b.n	800925c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc84 	bl	8009b62 <USBD_CtlError>
          break;
 800925a:	e000      	b.n	800925e <USBD_StdItfReq+0x7a>
          break;
 800925c:	bf00      	nop
      }
      break;
 800925e:	e004      	b.n	800926a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fc7d 	bl	8009b62 <USBD_CtlError>
      break;
 8009268:	bf00      	nop
  }

  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	889b      	ldrh	r3, [r3, #4]
 8009286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009290:	2b40      	cmp	r3, #64	; 0x40
 8009292:	d007      	beq.n	80092a4 <USBD_StdEPReq+0x30>
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	f200 8146 	bhi.w	8009526 <USBD_StdEPReq+0x2b2>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <USBD_StdEPReq+0x40>
 800929e:	2b20      	cmp	r3, #32
 80092a0:	f040 8141 	bne.w	8009526 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
      break;
 80092b2:	e13d      	b.n	8009530 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d10a      	bne.n	80092d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	e12d      	b.n	8009532 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d007      	beq.n	80092ee <USBD_StdEPReq+0x7a>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	f300 811b 	bgt.w	800951a <USBD_StdEPReq+0x2a6>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d072      	beq.n	80093ce <USBD_StdEPReq+0x15a>
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d03a      	beq.n	8009362 <USBD_StdEPReq+0xee>
 80092ec:	e115      	b.n	800951a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d002      	beq.n	80092fe <USBD_StdEPReq+0x8a>
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d015      	beq.n	8009328 <USBD_StdEPReq+0xb4>
 80092fc:	e02b      	b.n	8009356 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <USBD_StdEPReq+0xaa>
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d009      	beq.n	800931e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f010 fe7c 	bl	801a00c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009314:	2180      	movs	r1, #128	; 0x80
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f010 fe78 	bl	801a00c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800931c:	e020      	b.n	8009360 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc1e 	bl	8009b62 <USBD_CtlError>
              break;
 8009326:	e01b      	b.n	8009360 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	885b      	ldrh	r3, [r3, #2]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10e      	bne.n	800934e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <USBD_StdEPReq+0xda>
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b80      	cmp	r3, #128	; 0x80
 800933a:	d008      	beq.n	800934e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	88db      	ldrh	r3, [r3, #6]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d104      	bne.n	800934e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f010 fe5f 	bl	801a00c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fccf 	bl	8009cf2 <USBD_CtlSendStatus>

              break;
 8009354:	e004      	b.n	8009360 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc02 	bl	8009b62 <USBD_CtlError>
              break;
 800935e:	bf00      	nop
          }
          break;
 8009360:	e0e0      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	2b02      	cmp	r3, #2
 800936a:	d002      	beq.n	8009372 <USBD_StdEPReq+0xfe>
 800936c:	2b03      	cmp	r3, #3
 800936e:	d015      	beq.n	800939c <USBD_StdEPReq+0x128>
 8009370:	e026      	b.n	80093c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00c      	beq.n	8009392 <USBD_StdEPReq+0x11e>
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b80      	cmp	r3, #128	; 0x80
 800937c:	d009      	beq.n	8009392 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f010 fe42 	bl	801a00c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009388:	2180      	movs	r1, #128	; 0x80
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f010 fe3e 	bl	801a00c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009390:	e01c      	b.n	80093cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fbe4 	bl	8009b62 <USBD_CtlError>
              break;
 800939a:	e017      	b.n	80093cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d112      	bne.n	80093ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f010 fe49 	bl	801a04a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc9a 	bl	8009cf2 <USBD_CtlSendStatus>
              }
              break;
 80093be:	e004      	b.n	80093ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fbcd 	bl	8009b62 <USBD_CtlError>
              break;
 80093c8:	e000      	b.n	80093cc <USBD_StdEPReq+0x158>
              break;
 80093ca:	bf00      	nop
          }
          break;
 80093cc:	e0aa      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d002      	beq.n	80093de <USBD_StdEPReq+0x16a>
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d032      	beq.n	8009442 <USBD_StdEPReq+0x1ce>
 80093dc:	e097      	b.n	800950e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <USBD_StdEPReq+0x180>
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b80      	cmp	r3, #128	; 0x80
 80093e8:	d004      	beq.n	80093f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fbb8 	bl	8009b62 <USBD_CtlError>
                break;
 80093f2:	e091      	b.n	8009518 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da0b      	bge.n	8009414 <USBD_StdEPReq+0x1a0>
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	3310      	adds	r3, #16
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	3304      	adds	r3, #4
 8009412:	e00b      	b.n	800942c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009414:	7bbb      	ldrb	r3, [r7, #14]
 8009416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4413      	add	r3, r2
 800942a:	3304      	adds	r3, #4
 800942c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fbfb 	bl	8009c36 <USBD_CtlSendData>
              break;
 8009440:	e06a      	b.n	8009518 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	da11      	bge.n	800946e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3318      	adds	r3, #24
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d117      	bne.n	8009494 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fb7b 	bl	8009b62 <USBD_CtlError>
                  break;
 800946c:	e054      	b.n	8009518 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	f003 020f 	and.w	r2, r3, #15
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fb68 	bl	8009b62 <USBD_CtlError>
                  break;
 8009492:	e041      	b.n	8009518 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da0b      	bge.n	80094b4 <USBD_StdEPReq+0x240>
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	3310      	adds	r3, #16
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	e00b      	b.n	80094cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <USBD_StdEPReq+0x266>
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b80      	cmp	r3, #128	; 0x80
 80094d8:	d103      	bne.n	80094e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e00e      	b.n	8009500 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f010 fdce 	bl	801a088 <USBD_LL_IsStallEP>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2201      	movs	r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	e002      	b.n	8009500 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2202      	movs	r2, #2
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fb95 	bl	8009c36 <USBD_CtlSendData>
              break;
 800950c:	e004      	b.n	8009518 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb26 	bl	8009b62 <USBD_CtlError>
              break;
 8009516:	bf00      	nop
          }
          break;
 8009518:	e004      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fb20 	bl	8009b62 <USBD_CtlError>
          break;
 8009522:	bf00      	nop
      }
      break;
 8009524:	e004      	b.n	8009530 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fb1a 	bl	8009b62 <USBD_CtlError>
      break;
 800952e:	bf00      	nop
  }

  return ret;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	885b      	ldrh	r3, [r3, #2]
 8009556:	0a1b      	lsrs	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	2b06      	cmp	r3, #6
 800955e:	f200 8128 	bhi.w	80097b2 <USBD_GetDescriptor+0x276>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <USBD_GetDescriptor+0x2c>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	08009585 	.word	0x08009585
 800956c:	0800959d 	.word	0x0800959d
 8009570:	080095dd 	.word	0x080095dd
 8009574:	080097b3 	.word	0x080097b3
 8009578:	080097b3 	.word	0x080097b3
 800957c:	08009753 	.word	0x08009753
 8009580:	0800977f 	.word	0x0800977f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	7c12      	ldrb	r2, [r2, #16]
 8009590:	f107 0108 	add.w	r1, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
      break;
 800959a:	e112      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7c1b      	ldrb	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10d      	bne.n	80095c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ac:	f107 0208 	add.w	r2, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	2202      	movs	r2, #2
 80095bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095be:	e100      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c8:	f107 0208 	add.w	r2, r7, #8
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	2202      	movs	r2, #2
 80095d8:	701a      	strb	r2, [r3, #0]
      break;
 80095da:	e0f2      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	f200 80ac 	bhi.w	8009740 <USBD_GetDescriptor+0x204>
 80095e8:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <USBD_GetDescriptor+0xb4>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009609 	.word	0x08009609
 80095f4:	0800963d 	.word	0x0800963d
 80095f8:	08009671 	.word	0x08009671
 80095fc:	080096a5 	.word	0x080096a5
 8009600:	080096d9 	.word	0x080096d9
 8009604:	0800970d 	.word	0x0800970d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	7c12      	ldrb	r2, [r2, #16]
 8009620:	f107 0108 	add.w	r1, r7, #8
 8009624:	4610      	mov	r0, r2
 8009626:	4798      	blx	r3
 8009628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800962a:	e091      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa97 	bl	8009b62 <USBD_CtlError>
            err++;
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	3301      	adds	r3, #1
 8009638:	72fb      	strb	r3, [r7, #11]
          break;
 800963a:	e089      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	7c12      	ldrb	r2, [r2, #16]
 8009654:	f107 0108 	add.w	r1, r7, #8
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800965e:	e077      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa7d 	bl	8009b62 <USBD_CtlError>
            err++;
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	3301      	adds	r3, #1
 800966c:	72fb      	strb	r3, [r7, #11]
          break;
 800966e:	e06f      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	7c12      	ldrb	r2, [r2, #16]
 8009688:	f107 0108 	add.w	r1, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009692:	e05d      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa63 	bl	8009b62 <USBD_CtlError>
            err++;
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	3301      	adds	r3, #1
 80096a0:	72fb      	strb	r3, [r7, #11]
          break;
 80096a2:	e055      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c6:	e043      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa49 	bl	8009b62 <USBD_CtlError>
            err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
          break;
 80096d6:	e03b      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7c12      	ldrb	r2, [r2, #16]
 80096f0:	f107 0108 	add.w	r1, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fa:	e029      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa2f 	bl	8009b62 <USBD_CtlError>
            err++;
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	3301      	adds	r3, #1
 8009708:	72fb      	strb	r3, [r7, #11]
          break;
 800970a:	e021      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e00f      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa15 	bl	8009b62 <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e007      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa0d 	bl	8009b62 <USBD_CtlError>
          err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800974e:	e038      	b.n	80097c2 <USBD_GetDescriptor+0x286>
 8009750:	e037      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7c1b      	ldrb	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009762:	f107 0208 	add.w	r2, r7, #8
 8009766:	4610      	mov	r0, r2
 8009768:	4798      	blx	r3
 800976a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800976c:	e029      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f9f6 	bl	8009b62 <USBD_CtlError>
        err++;
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	3301      	adds	r3, #1
 800977a:	72fb      	strb	r3, [r7, #11]
      break;
 800977c:	e021      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7c1b      	ldrb	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10d      	bne.n	80097a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	f107 0208 	add.w	r2, r7, #8
 8009792:	4610      	mov	r0, r2
 8009794:	4798      	blx	r3
 8009796:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	2207      	movs	r2, #7
 800979e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097a0:	e00f      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f9dc 	bl	8009b62 <USBD_CtlError>
        err++;
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	3301      	adds	r3, #1
 80097ae:	72fb      	strb	r3, [r7, #11]
      break;
 80097b0:	e007      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f9d4 	bl	8009b62 <USBD_CtlError>
      err++;
 80097ba:	7afb      	ldrb	r3, [r7, #11]
 80097bc:	3301      	adds	r3, #1
 80097be:	72fb      	strb	r3, [r7, #11]
      break;
 80097c0:	bf00      	nop
  }

  if (err != 0U)
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d11c      	bne.n	8009802 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097c8:	893b      	ldrh	r3, [r7, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d011      	beq.n	80097f2 <USBD_GetDescriptor+0x2b6>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	88db      	ldrh	r3, [r3, #6]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00d      	beq.n	80097f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	88da      	ldrh	r2, [r3, #6]
 80097da:	893b      	ldrh	r3, [r7, #8]
 80097dc:	4293      	cmp	r3, r2
 80097de:	bf28      	it	cs
 80097e0:	4613      	movcs	r3, r2
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097e6:	893b      	ldrh	r3, [r7, #8]
 80097e8:	461a      	mov	r2, r3
 80097ea:	68f9      	ldr	r1, [r7, #12]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fa22 	bl	8009c36 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88db      	ldrh	r3, [r3, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa79 	bl	8009cf2 <USBD_CtlSendStatus>
 8009800:	e000      	b.n	8009804 <USBD_GetDescriptor+0x2c8>
    return;
 8009802:	bf00      	nop
    }
  }
}
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	889b      	ldrh	r3, [r3, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d130      	bne.n	8009880 <USBD_SetAddress+0x74>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d12c      	bne.n	8009880 <USBD_SetAddress+0x74>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	885b      	ldrh	r3, [r3, #2]
 800982a:	2b7f      	cmp	r3, #127	; 0x7f
 800982c:	d828      	bhi.n	8009880 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009838:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009840:	2b03      	cmp	r3, #3
 8009842:	d104      	bne.n	800984e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f98b 	bl	8009b62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984c:	e01d      	b.n	800988a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7bfa      	ldrb	r2, [r7, #15]
 8009852:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f010 fc3f 	bl	801a0de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fa46 	bl	8009cf2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	e009      	b.n	800988a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	e004      	b.n	800988a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f96d 	bl	8009b62 <USBD_CtlError>
  }
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	4b41      	ldr	r3, [pc, #260]	; (80099ac <USBD_SetConfig+0x118>)
 80098a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098a8:	4b40      	ldr	r3, [pc, #256]	; (80099ac <USBD_SetConfig+0x118>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d904      	bls.n	80098ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f955 	bl	8009b62 <USBD_CtlError>
 80098b8:	e075      	b.n	80099a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d002      	beq.n	80098ca <USBD_SetConfig+0x36>
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d023      	beq.n	8009910 <USBD_SetConfig+0x7c>
 80098c8:	e062      	b.n	8009990 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098ca:	4b38      	ldr	r3, [pc, #224]	; (80099ac <USBD_SetConfig+0x118>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d01a      	beq.n	8009908 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098d2:	4b36      	ldr	r3, [pc, #216]	; (80099ac <USBD_SetConfig+0x118>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2203      	movs	r2, #3
 80098e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098e4:	4b31      	ldr	r3, [pc, #196]	; (80099ac <USBD_SetConfig+0x118>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f9ae 	bl	8008c4c <USBD_SetClassConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d104      	bne.n	8009900 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f932 	bl	8009b62 <USBD_CtlError>
            return;
 80098fe:	e052      	b.n	80099a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9f6 	bl	8009cf2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009906:	e04e      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f9f2 	bl	8009cf2 <USBD_CtlSendStatus>
        break;
 800990e:	e04a      	b.n	80099a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009910:	4b26      	ldr	r3, [pc, #152]	; (80099ac <USBD_SetConfig+0x118>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d112      	bne.n	800993e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009920:	4b22      	ldr	r3, [pc, #136]	; (80099ac <USBD_SetConfig+0x118>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800992a:	4b20      	ldr	r3, [pc, #128]	; (80099ac <USBD_SetConfig+0x118>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f9aa 	bl	8008c8a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f9db 	bl	8009cf2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800993c:	e033      	b.n	80099a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800993e:	4b1b      	ldr	r3, [pc, #108]	; (80099ac <USBD_SetConfig+0x118>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	429a      	cmp	r2, r3
 800994a:	d01d      	beq.n	8009988 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff f998 	bl	8008c8a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800995a:	4b14      	ldr	r3, [pc, #80]	; (80099ac <USBD_SetConfig+0x118>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009964:	4b11      	ldr	r3, [pc, #68]	; (80099ac <USBD_SetConfig+0x118>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff f96e 	bl	8008c4c <USBD_SetClassConfig>
 8009970:	4603      	mov	r3, r0
 8009972:	2b02      	cmp	r3, #2
 8009974:	d104      	bne.n	8009980 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f8f2 	bl	8009b62 <USBD_CtlError>
            return;
 800997e:	e012      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f9b6 	bl	8009cf2 <USBD_CtlSendStatus>
        break;
 8009986:	e00e      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f9b2 	bl	8009cf2 <USBD_CtlSendStatus>
        break;
 800998e:	e00a      	b.n	80099a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8e5 	bl	8009b62 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <USBD_SetConfig+0x118>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff f973 	bl	8008c8a <USBD_ClrClassConfig>
        break;
 80099a4:	bf00      	nop
    }
  }
}
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000f0c 	.word	0x20000f0c

080099b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	88db      	ldrh	r3, [r3, #6]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d004      	beq.n	80099cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8cc 	bl	8009b62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099ca:	e022      	b.n	8009a12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	dc02      	bgt.n	80099dc <USBD_GetConfig+0x2c>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dc03      	bgt.n	80099e2 <USBD_GetConfig+0x32>
 80099da:	e015      	b.n	8009a08 <USBD_GetConfig+0x58>
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d00b      	beq.n	80099f8 <USBD_GetConfig+0x48>
 80099e0:	e012      	b.n	8009a08 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3308      	adds	r3, #8
 80099ec:	2201      	movs	r2, #1
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f920 	bl	8009c36 <USBD_CtlSendData>
        break;
 80099f6:	e00c      	b.n	8009a12 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3304      	adds	r3, #4
 80099fc:	2201      	movs	r2, #1
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f918 	bl	8009c36 <USBD_CtlSendData>
        break;
 8009a06:	e004      	b.n	8009a12 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f8a9 	bl	8009b62 <USBD_CtlError>
        break;
 8009a10:	bf00      	nop
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d81e      	bhi.n	8009a6e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	88db      	ldrh	r3, [r3, #6]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d004      	beq.n	8009a42 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f891 	bl	8009b62 <USBD_CtlError>
        break;
 8009a40:	e01a      	b.n	8009a78 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f043 0202 	orr.w	r2, r3, #2
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	330c      	adds	r3, #12
 8009a62:	2202      	movs	r2, #2
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f8e5 	bl	8009c36 <USBD_CtlSendData>
      break;
 8009a6c:	e004      	b.n	8009a78 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f876 	bl	8009b62 <USBD_CtlError>
      break;
 8009a76:	bf00      	nop
  }
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	885b      	ldrh	r3, [r3, #2]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d106      	bne.n	8009aa0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f929 	bl	8009cf2 <USBD_CtlSendStatus>
  }
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d80b      	bhi.n	8009ad6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d10c      	bne.n	8009ae0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f90f 	bl	8009cf2 <USBD_CtlSendStatus>
      }
      break;
 8009ad4:	e004      	b.n	8009ae0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f842 	bl	8009b62 <USBD_CtlError>
      break;
 8009ade:	e000      	b.n	8009ae2 <USBD_ClrFeature+0x3a>
      break;
 8009ae0:	bf00      	nop
  }
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785a      	ldrb	r2, [r3, #1]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	3302      	adds	r3, #2
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3303      	adds	r3, #3
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	4413      	add	r3, r2
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	3304      	adds	r3, #4
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	3305      	adds	r3, #5
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	3306      	adds	r3, #6
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	3307      	adds	r3, #7
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4413      	add	r3, r2
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	80da      	strh	r2, [r3, #6]

}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bc80      	pop	{r7}
 8009b60:	4770      	bx	lr

08009b62 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b6c:	2180      	movs	r1, #128	; 0x80
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f010 fa4c 	bl	801a00c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b74:	2100      	movs	r1, #0
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f010 fa48 	bl	801a00c <USBD_LL_StallEP>
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b90:	2300      	movs	r3, #0
 8009b92:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d032      	beq.n	8009c00 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f834 	bl	8009c08 <USBD_GetLen>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	75fa      	strb	r2, [r7, #23]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	7812      	ldrb	r2, [r2, #0]
 8009bbe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	1c5a      	adds	r2, r3, #1
 8009bc4:	75fa      	strb	r2, [r7, #23]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4413      	add	r3, r2
 8009bcc:	2203      	movs	r2, #3
 8009bce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009bd0:	e012      	b.n	8009bf8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	60fa      	str	r2, [r7, #12]
 8009bd8:	7dfa      	ldrb	r2, [r7, #23]
 8009bda:	1c51      	adds	r1, r2, #1
 8009bdc:	75f9      	strb	r1, [r7, #23]
 8009bde:	4611      	mov	r1, r2
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	440a      	add	r2, r1
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	1c5a      	adds	r2, r3, #1
 8009bec:	75fa      	strb	r2, [r7, #23]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e8      	bne.n	8009bd2 <USBD_GetString+0x4e>
    }
  }
}
 8009c00:	bf00      	nop
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009c14:	e005      	b.n	8009c22 <USBD_GetLen+0x1a>
  {
    len++;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f5      	bne.n	8009c16 <USBD_GetLen+0xe>
  }

  return len;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bc80      	pop	{r7}
 8009c34:	4770      	bx	lr

08009c36 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b084      	sub	sp, #16
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	4613      	mov	r3, r2
 8009c42:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c4c:	88fa      	ldrh	r2, [r7, #6]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009c52:	88fa      	ldrh	r2, [r7, #6]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c58:	88fb      	ldrh	r3, [r7, #6]
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f010 fa5c 	bl	801a11c <USBD_LL_Transmit>

  return USBD_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	60b9      	str	r1, [r7, #8]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c7c:	88fb      	ldrh	r3, [r7, #6]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	2100      	movs	r1, #0
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f010 fa4a 	bl	801a11c <USBD_LL_Transmit>

  return USBD_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2203      	movs	r2, #3
 8009ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ca8:	88fa      	ldrh	r2, [r7, #6]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009cb0:	88fa      	ldrh	r2, [r7, #6]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cb8:	88fb      	ldrh	r3, [r7, #6]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f010 fa4f 	bl	801a162 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f010 fa3d 	bl	801a162 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2204      	movs	r2, #4
 8009cfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009d02:	2300      	movs	r3, #0
 8009d04:	2200      	movs	r2, #0
 8009d06:	2100      	movs	r1, #0
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f010 fa07 	bl	801a11c <USBD_LL_Transmit>

  return USBD_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2205      	movs	r2, #5
 8009d24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d28:	2300      	movs	r3, #0
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f010 fa17 	bl	801a162 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	4603      	mov	r3, r0
 8009d46:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d50:	2b84      	cmp	r3, #132	; 0x84
 8009d52:	d005      	beq.n	8009d60 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d54:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3303      	adds	r3, #3
 8009d5e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d60:	68fb      	ldr	r3, [r7, #12]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bc80      	pop	{r7}
 8009d6a:	4770      	bx	lr

08009d6c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d72:	f3ef 8305 	mrs	r3, IPSR
 8009d76:	607b      	str	r3, [r7, #4]
  return(result);
 8009d78:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	bf14      	ite	ne
 8009d7e:	2301      	movne	r3, #1
 8009d80:	2300      	moveq	r3, #0
 8009d82:	b2db      	uxtb	r3, r3
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bc80      	pop	{r7}
 8009d8c:	4770      	bx	lr

08009d8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d92:	f001 fc67 	bl	800b664 <vTaskStartScheduler>
  
  return osOK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009da0:	f7ff ffe4 	bl	8009d6c <inHandlerMode>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009daa:	f001 fd7d 	bl	800b8a8 <xTaskGetTickCountFromISR>
 8009dae:	4603      	mov	r3, r0
 8009db0:	e002      	b.n	8009db8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009db2:	f001 fd6b 	bl	800b88c <xTaskGetTickCount>
 8009db6:	4603      	mov	r3, r0
  }
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dbe:	b089      	sub	sp, #36	; 0x24
 8009dc0:	af04      	add	r7, sp, #16
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d020      	beq.n	8009e10 <osThreadCreate+0x54>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d01c      	beq.n	8009e10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685c      	ldr	r4, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681d      	ldr	r5, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691e      	ldr	r6, [r3, #16]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7ff ffa8 	bl	8009d3e <makeFreeRtosPriority>
 8009dee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009df8:	9202      	str	r2, [sp, #8]
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	9100      	str	r1, [sp, #0]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	4632      	mov	r2, r6
 8009e02:	4629      	mov	r1, r5
 8009e04:	4620      	mov	r0, r4
 8009e06:	f001 fa58 	bl	800b2ba <xTaskCreateStatic>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	60fb      	str	r3, [r7, #12]
 8009e0e:	e01c      	b.n	8009e4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685c      	ldr	r4, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009e1c:	b29e      	uxth	r6, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff ff8a 	bl	8009d3e <makeFreeRtosPriority>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	f107 030c 	add.w	r3, r7, #12
 8009e30:	9301      	str	r3, [sp, #4]
 8009e32:	9200      	str	r2, [sp, #0]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	4632      	mov	r2, r6
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f001 fa99 	bl	800b372 <xTaskCreate>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d001      	beq.n	8009e4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	e000      	b.n	8009e4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <osDelay+0x16>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	e000      	b.n	8009e6c <osDelay+0x18>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 fbc5 	bl	800b5fc <vTaskDelay>
  
  return osOK;
 8009e72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d007      	beq.n	8009e9c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	4619      	mov	r1, r3
 8009e92:	2001      	movs	r0, #1
 8009e94:	f000 fc3e 	bl	800a714 <xQueueCreateMutexStatic>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	e003      	b.n	8009ea4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	f000 fc21 	bl	800a6e4 <xQueueCreateMutex>
 8009ea2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <osMutexWait+0x18>
    return osErrorParameter;
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	e03a      	b.n	8009f3a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ece:	d103      	bne.n	8009ed8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	e009      	b.n	8009eec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d006      	beq.n	8009eec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <osMutexWait+0x40>
      ticks = 1;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009eec:	f7ff ff3e 	bl	8009d6c <inHandlerMode>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d017      	beq.n	8009f26 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009ef6:	f107 0308 	add.w	r3, r7, #8
 8009efa:	461a      	mov	r2, r3
 8009efc:	2100      	movs	r1, #0
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f001 f834 	bl	800af6c <xQueueReceiveFromISR>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d001      	beq.n	8009f0e <osMutexWait+0x62>
      return osErrorOS;
 8009f0a:	23ff      	movs	r3, #255	; 0xff
 8009f0c:	e015      	b.n	8009f3a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d011      	beq.n	8009f38 <osMutexWait+0x8c>
 8009f14:	4b0b      	ldr	r3, [pc, #44]	; (8009f44 <osMutexWait+0x98>)
 8009f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f1a:	601a      	str	r2, [r3, #0]
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	e008      	b.n	8009f38 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009f26:	68f9      	ldr	r1, [r7, #12]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 ff13 	bl	800ad54 <xQueueSemaphoreTake>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d001      	beq.n	8009f38 <osMutexWait+0x8c>
    return osErrorOS;
 8009f34:	23ff      	movs	r3, #255	; 0xff
 8009f36:	e000      	b.n	8009f3a <osMutexWait+0x8e>
  }
  
  return osOK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	e000ed04 	.word	0xe000ed04

08009f48 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f54:	2300      	movs	r3, #0
 8009f56:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009f58:	f7ff ff08 	bl	8009d6c <inHandlerMode>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d016      	beq.n	8009f90 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fd85 	bl	800aa78 <xQueueGiveFromISR>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d001      	beq.n	8009f78 <osMutexRelease+0x30>
      return osErrorOS;
 8009f74:	23ff      	movs	r3, #255	; 0xff
 8009f76:	e017      	b.n	8009fa8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d013      	beq.n	8009fa6 <osMutexRelease+0x5e>
 8009f7e:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <osMutexRelease+0x68>)
 8009f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	e00a      	b.n	8009fa6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009f90:	2300      	movs	r3, #0
 8009f92:	2200      	movs	r2, #0
 8009f94:	2100      	movs	r1, #0
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fbd8 	bl	800a74c <xQueueGenericSend>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d001      	beq.n	8009fa6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009fa2:	23ff      	movs	r3, #255	; 0xff
 8009fa4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00f      	beq.n	8009fe6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d10a      	bne.n	8009fe2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	2203      	movs	r2, #3
 8009fd2:	9200      	str	r2, [sp, #0]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	2001      	movs	r0, #1
 8009fda:	f000 fa95 	bl	800a508 <xQueueGenericCreateStatic>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	e016      	b.n	800a010 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e014      	b.n	800a010 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d110      	bne.n	800a00e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009fec:	2203      	movs	r2, #3
 8009fee:	2100      	movs	r1, #0
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	f000 fb00 	bl	800a5f6 <xQueueGenericCreate>
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <osSemaphoreCreate+0x56>
 8009ffe:	2300      	movs	r3, #0
 800a000:	2200      	movs	r2, #0
 800a002:	2100      	movs	r1, #0
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 fba1 	bl	800a74c <xQueueGenericSend>
      return sema;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	e000      	b.n	800a010 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a00e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a022:	2300      	movs	r3, #0
 800a024:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a02c:	2380      	movs	r3, #128	; 0x80
 800a02e:	e03a      	b.n	800a0a6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03a:	d103      	bne.n	800a044 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a03c:	f04f 33ff 	mov.w	r3, #4294967295
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	e009      	b.n	800a058 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <osSemaphoreWait+0x40>
      ticks = 1;
 800a054:	2301      	movs	r3, #1
 800a056:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a058:	f7ff fe88 	bl	8009d6c <inHandlerMode>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d017      	beq.n	800a092 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a062:	f107 0308 	add.w	r3, r7, #8
 800a066:	461a      	mov	r2, r3
 800a068:	2100      	movs	r1, #0
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 ff7e 	bl	800af6c <xQueueReceiveFromISR>
 800a070:	4603      	mov	r3, r0
 800a072:	2b01      	cmp	r3, #1
 800a074:	d001      	beq.n	800a07a <osSemaphoreWait+0x62>
      return osErrorOS;
 800a076:	23ff      	movs	r3, #255	; 0xff
 800a078:	e015      	b.n	800a0a6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d011      	beq.n	800a0a4 <osSemaphoreWait+0x8c>
 800a080:	4b0b      	ldr	r3, [pc, #44]	; (800a0b0 <osSemaphoreWait+0x98>)
 800a082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a086:	601a      	str	r2, [r3, #0]
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	e008      	b.n	800a0a4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a092:	68f9      	ldr	r1, [r7, #12]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fe5d 	bl	800ad54 <xQueueSemaphoreTake>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d001      	beq.n	800a0a4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a0a0:	23ff      	movs	r3, #255	; 0xff
 800a0a2:	e000      	b.n	800a0a6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	e000ed04 	.word	0xe000ed04

0800a0b4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a0c4:	f7ff fe52 	bl	8009d6c <inHandlerMode>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d016      	beq.n	800a0fc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a0ce:	f107 0308 	add.w	r3, r7, #8
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 fccf 	bl	800aa78 <xQueueGiveFromISR>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d001      	beq.n	800a0e4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a0e0:	23ff      	movs	r3, #255	; 0xff
 800a0e2:	e017      	b.n	800a114 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d013      	beq.n	800a112 <osSemaphoreRelease+0x5e>
 800a0ea:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <osSemaphoreRelease+0x68>)
 800a0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	e00a      	b.n	800a112 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fb22 	bl	800a74c <xQueueGenericSend>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d001      	beq.n	800a112 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a10e:	23ff      	movs	r3, #255	; 0xff
 800a110:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a112:	68fb      	ldr	r3, [r7, #12]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3710      	adds	r7, #16
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	e000ed04 	.word	0xe000ed04

0800a120 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a120:	b590      	push	{r4, r7, lr}
 800a122:	b085      	sub	sp, #20
 800a124:	af02      	add	r7, sp, #8
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d011      	beq.n	800a156 <osMessageCreate+0x36>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6859      	ldr	r1, [r3, #4]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	2400      	movs	r4, #0
 800a14c:	9400      	str	r4, [sp, #0]
 800a14e:	f000 f9db 	bl	800a508 <xQueueGenericCreateStatic>
 800a152:	4603      	mov	r3, r0
 800a154:	e008      	b.n	800a168 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	4619      	mov	r1, r3
 800a162:	f000 fa48 	bl	800a5f6 <xQueueGenericCreate>
 800a166:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd90      	pop	{r4, r7, pc}

0800a170 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <osMessagePut+0x1e>
    ticks = 1;
 800a18a:	2301      	movs	r3, #1
 800a18c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a18e:	f7ff fded 	bl	8009d6c <inHandlerMode>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d018      	beq.n	800a1ca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a198:	f107 0210 	add.w	r2, r7, #16
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 fbd0 	bl	800a948 <xQueueGenericSendFromISR>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d001      	beq.n	800a1b2 <osMessagePut+0x42>
      return osErrorOS;
 800a1ae:	23ff      	movs	r3, #255	; 0xff
 800a1b0:	e018      	b.n	800a1e4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d014      	beq.n	800a1e2 <osMessagePut+0x72>
 800a1b8:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <osMessagePut+0x7c>)
 800a1ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	e00b      	b.n	800a1e2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a1ca:	f107 0108 	add.w	r1, r7, #8
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 faba 	bl	800a74c <xQueueGenericSend>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d001      	beq.n	800a1e2 <osMessagePut+0x72>
      return osErrorOS;
 800a1de:	23ff      	movs	r3, #255	; 0xff
 800a1e0:	e000      	b.n	800a1e4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3718      	adds	r7, #24
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	e000ed04 	.word	0xe000ed04

0800a1f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a1f0:	b590      	push	{r4, r7, lr}
 800a1f2:	b08b      	sub	sp, #44	; 0x2c
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a20a:	2380      	movs	r3, #128	; 0x80
 800a20c:	617b      	str	r3, [r7, #20]
    return event;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	461c      	mov	r4, r3
 800a212:	f107 0314 	add.w	r3, r7, #20
 800a216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a21a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a21e:	e054      	b.n	800a2ca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a220:	2300      	movs	r3, #0
 800a222:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22e:	d103      	bne.n	800a238 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a230:	f04f 33ff 	mov.w	r3, #4294967295
 800a234:	627b      	str	r3, [r7, #36]	; 0x24
 800a236:	e009      	b.n	800a24c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <osMessageGet+0x5c>
      ticks = 1;
 800a248:	2301      	movs	r3, #1
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a24c:	f7ff fd8e 	bl	8009d6c <inHandlerMode>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d01c      	beq.n	800a290 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a256:	f107 0220 	add.w	r2, r7, #32
 800a25a:	f107 0314 	add.w	r3, r7, #20
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	68b8      	ldr	r0, [r7, #8]
 800a264:	f000 fe82 	bl	800af6c <xQueueReceiveFromISR>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d102      	bne.n	800a274 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a26e:	2310      	movs	r3, #16
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	e001      	b.n	800a278 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a274:	2300      	movs	r3, #0
 800a276:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d01d      	beq.n	800a2ba <osMessageGet+0xca>
 800a27e:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <osMessageGet+0xe4>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	e014      	b.n	800a2ba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a290:	f107 0314 	add.w	r3, r7, #20
 800a294:	3304      	adds	r3, #4
 800a296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a298:	4619      	mov	r1, r3
 800a29a:	68b8      	ldr	r0, [r7, #8]
 800a29c:	f000 fc7a 	bl	800ab94 <xQueueReceive>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d102      	bne.n	800a2ac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a2a6:	2310      	movs	r3, #16
 800a2a8:	617b      	str	r3, [r7, #20]
 800a2aa:	e006      	b.n	800a2ba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <osMessageGet+0xc6>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e000      	b.n	800a2b8 <osMessageGet+0xc8>
 800a2b6:	2340      	movs	r3, #64	; 0x40
 800a2b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	461c      	mov	r4, r3
 800a2be:	f107 0314 	add.w	r3, r7, #20
 800a2c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	372c      	adds	r7, #44	; 0x2c
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd90      	pop	{r4, r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	e000ed04 	.word	0xe000ed04

0800a2d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f103 0208 	add.w	r2, r3, #8
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f103 0208 	add.w	r2, r3, #8
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f103 0208 	add.w	r2, r3, #8
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	bc80      	pop	{r7}
 800a314:	4770      	bx	lr

0800a316 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	bc80      	pop	{r7}
 800a32c:	4770      	bx	lr

0800a32e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
}
 800a36a:	bf00      	nop
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	bc80      	pop	{r7}
 800a372:	4770      	bx	lr

0800a374 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	d103      	bne.n	800a394 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	60fb      	str	r3, [r7, #12]
 800a392:	e00c      	b.n	800a3ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3308      	adds	r3, #8
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	e002      	b.n	800a3a2 <vListInsert+0x2e>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d2f6      	bcs.n	800a39c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	601a      	str	r2, [r3, #0]
}
 800a3da:	bf00      	nop
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bc80      	pop	{r7}
 800a3e2:	4770      	bx	lr

0800a3e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6892      	ldr	r2, [r2, #8]
 800a3fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	6852      	ldr	r2, [r2, #4]
 800a404:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d103      	bne.n	800a418 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	1e5a      	subs	r2, r3, #1
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	bc80      	pop	{r7}
 800a434:	4770      	bx	lr
	...

0800a438 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a462:	f002 f873 	bl	800c54c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46e:	68f9      	ldr	r1, [r7, #12]
 800a470:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a472:	fb01 f303 	mul.w	r3, r1, r3
 800a476:	441a      	add	r2, r3
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a492:	3b01      	subs	r3, #1
 800a494:	68f9      	ldr	r1, [r7, #12]
 800a496:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	441a      	add	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	22ff      	movs	r2, #255	; 0xff
 800a4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d114      	bne.n	800a4e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01a      	beq.n	800a4f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3310      	adds	r3, #16
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f001 fb45 	bl	800bb54 <xTaskRemoveFromEventList>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d012      	beq.n	800a4f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <xQueueGenericReset+0xcc>)
 800a4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	e009      	b.n	800a4f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3310      	adds	r3, #16
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff fef6 	bl	800a2d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3324      	adds	r3, #36	; 0x24
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7ff fef1 	bl	800a2d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4f6:	f002 f859 	bl	800c5ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4fa:	2301      	movs	r3, #1
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	e000ed04 	.word	0xe000ed04

0800a508 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08e      	sub	sp, #56	; 0x38
 800a50c:	af02      	add	r7, sp, #8
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10a      	bne.n	800a532 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a52e:	bf00      	nop
 800a530:	e7fe      	b.n	800a530 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <xQueueGenericCreateStatic+0x52>
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <xQueueGenericCreateStatic+0x56>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e000      	b.n	800a560 <xQueueGenericCreateStatic+0x58>
 800a55e:	2300      	movs	r3, #0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10a      	bne.n	800a57a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	623b      	str	r3, [r7, #32]
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <xQueueGenericCreateStatic+0x7e>
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <xQueueGenericCreateStatic+0x82>
 800a586:	2301      	movs	r3, #1
 800a588:	e000      	b.n	800a58c <xQueueGenericCreateStatic+0x84>
 800a58a:	2300      	movs	r3, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	61fb      	str	r3, [r7, #28]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5a6:	2348      	movs	r3, #72	; 0x48
 800a5a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b48      	cmp	r3, #72	; 0x48
 800a5ae:	d00a      	beq.n	800a5c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	61bb      	str	r3, [r7, #24]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00d      	beq.n	800a5ec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 f843 	bl	800a672 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3730      	adds	r7, #48	; 0x30
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b08a      	sub	sp, #40	; 0x28
 800a5fa:	af02      	add	r7, sp, #8
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	4613      	mov	r3, r2
 800a602:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10a      	bne.n	800a620 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	613b      	str	r3, [r7, #16]
}
 800a61c:	bf00      	nop
 800a61e:	e7fe      	b.n	800a61e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d102      	bne.n	800a62c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a626:	2300      	movs	r3, #0
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	e004      	b.n	800a636 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	fb02 f303 	mul.w	r3, r2, r3
 800a634:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	3348      	adds	r3, #72	; 0x48
 800a63a:	4618      	mov	r0, r3
 800a63c:	f002 f886 	bl	800c74c <pvPortMalloc>
 800a640:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00f      	beq.n	800a668 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	3348      	adds	r3, #72	; 0x48
 800a64c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a656:	79fa      	ldrb	r2, [r7, #7]
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	4613      	mov	r3, r2
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 f805 	bl	800a672 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a668:	69bb      	ldr	r3, [r7, #24]
	}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d103      	bne.n	800a68e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e002      	b.n	800a694 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	69b8      	ldr	r0, [r7, #24]
 800a6a4:	f7ff fec8 	bl	800a438 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f838 	bl	800a74c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6939      	ldr	r1, [r7, #16]
 800a6fc:	6978      	ldr	r0, [r7, #20]
 800a6fe:	f7ff ff7a 	bl	800a5f6 <xQueueGenericCreate>
 800a702:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff ffd3 	bl	800a6b0 <prvInitialiseMutex>

		return pxNewQueue;
 800a70a:	68fb      	ldr	r3, [r7, #12]
	}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af02      	add	r7, sp, #8
 800a71a:	4603      	mov	r3, r0
 800a71c:	6039      	str	r1, [r7, #0]
 800a71e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a720:	2301      	movs	r3, #1
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	2300      	movs	r3, #0
 800a726:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a728:	79fb      	ldrb	r3, [r7, #7]
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2200      	movs	r2, #0
 800a730:	6939      	ldr	r1, [r7, #16]
 800a732:	6978      	ldr	r0, [r7, #20]
 800a734:	f7ff fee8 	bl	800a508 <xQueueGenericCreateStatic>
 800a738:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7ff ffb8 	bl	800a6b0 <prvInitialiseMutex>

		return pxNewQueue;
 800a740:	68fb      	ldr	r3, [r7, #12]
	}
 800a742:	4618      	mov	r0, r3
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
	...

0800a74c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b08e      	sub	sp, #56	; 0x38
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a75a:	2300      	movs	r3, #0
 800a75c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10a      	bne.n	800a77e <xQueueGenericSend+0x32>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a77a:	bf00      	nop
 800a77c:	e7fe      	b.n	800a77c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d103      	bne.n	800a78c <xQueueGenericSend+0x40>
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <xQueueGenericSend+0x44>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e000      	b.n	800a792 <xQueueGenericSend+0x46>
 800a790:	2300      	movs	r3, #0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <xQueueGenericSend+0x60>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d103      	bne.n	800a7ba <xQueueGenericSend+0x6e>
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d101      	bne.n	800a7be <xQueueGenericSend+0x72>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e000      	b.n	800a7c0 <xQueueGenericSend+0x74>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <xQueueGenericSend+0x8e>
	__asm volatile
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	623b      	str	r3, [r7, #32]
}
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7da:	f001 fb7f 	bl	800bedc <xTaskGetSchedulerState>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d102      	bne.n	800a7ea <xQueueGenericSend+0x9e>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <xQueueGenericSend+0xa2>
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e000      	b.n	800a7f0 <xQueueGenericSend+0xa4>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <xQueueGenericSend+0xbe>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	61fb      	str	r3, [r7, #28]
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a80a:	f001 fe9f 	bl	800c54c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	429a      	cmp	r2, r3
 800a818:	d302      	bcc.n	800a820 <xQueueGenericSend+0xd4>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d129      	bne.n	800a874 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a820:	683a      	ldr	r2, [r7, #0]
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a826:	f000 fc38 	bl	800b09a <prvCopyDataToQueue>
 800a82a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	d010      	beq.n	800a856 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	3324      	adds	r3, #36	; 0x24
 800a838:	4618      	mov	r0, r3
 800a83a:	f001 f98b 	bl	800bb54 <xTaskRemoveFromEventList>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d013      	beq.n	800a86c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a844:	4b3f      	ldr	r3, [pc, #252]	; (800a944 <xQueueGenericSend+0x1f8>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	e00a      	b.n	800a86c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d007      	beq.n	800a86c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a85c:	4b39      	ldr	r3, [pc, #228]	; (800a944 <xQueueGenericSend+0x1f8>)
 800a85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a86c:	f001 fe9e 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a870:	2301      	movs	r3, #1
 800a872:	e063      	b.n	800a93c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d103      	bne.n	800a882 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a87a:	f001 fe97 	bl	800c5ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a87e:	2300      	movs	r3, #0
 800a880:	e05c      	b.n	800a93c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a884:	2b00      	cmp	r3, #0
 800a886:	d106      	bne.n	800a896 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a888:	f107 0314 	add.w	r3, r7, #20
 800a88c:	4618      	mov	r0, r3
 800a88e:	f001 f9c3 	bl	800bc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a892:	2301      	movs	r3, #1
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a896:	f001 fe89 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a89a:	f000 ff4d 	bl	800b738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a89e:	f001 fe55 	bl	800c54c <vPortEnterCritical>
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8a8:	b25b      	sxtb	r3, r3
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ae:	d103      	bne.n	800a8b8 <xQueueGenericSend+0x16c>
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8be:	b25b      	sxtb	r3, r3
 800a8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c4:	d103      	bne.n	800a8ce <xQueueGenericSend+0x182>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ce:	f001 fe6d 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8d2:	1d3a      	adds	r2, r7, #4
 800a8d4:	f107 0314 	add.w	r3, r7, #20
 800a8d8:	4611      	mov	r1, r2
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 f9b2 	bl	800bc44 <xTaskCheckForTimeOut>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d124      	bne.n	800a930 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8e8:	f000 fccf 	bl	800b28a <prvIsQueueFull>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d018      	beq.n	800a924 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	3310      	adds	r3, #16
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f001 f906 	bl	800bb0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a902:	f000 fc5a 	bl	800b1ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a906:	f000 ff25 	bl	800b754 <xTaskResumeAll>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f47f af7c 	bne.w	800a80a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a912:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <xQueueGenericSend+0x1f8>)
 800a914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a918:	601a      	str	r2, [r3, #0]
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	e772      	b.n	800a80a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a926:	f000 fc48 	bl	800b1ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a92a:	f000 ff13 	bl	800b754 <xTaskResumeAll>
 800a92e:	e76c      	b.n	800a80a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a932:	f000 fc42 	bl	800b1ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a936:	f000 ff0d 	bl	800b754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a93a:	2300      	movs	r3, #0
		}
	}
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3738      	adds	r7, #56	; 0x38
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08e      	sub	sp, #56	; 0x38
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10a      	bne.n	800a976 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a972:	bf00      	nop
 800a974:	e7fe      	b.n	800a974 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <xQueueGenericSendFromISR+0x3c>
 800a97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <xQueueGenericSendFromISR+0x40>
 800a984:	2301      	movs	r3, #1
 800a986:	e000      	b.n	800a98a <xQueueGenericSendFromISR+0x42>
 800a988:	2300      	movs	r3, #0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d10a      	bne.n	800a9a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	623b      	str	r3, [r7, #32]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d103      	bne.n	800a9b2 <xQueueGenericSendFromISR+0x6a>
 800a9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d101      	bne.n	800a9b6 <xQueueGenericSendFromISR+0x6e>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e000      	b.n	800a9b8 <xQueueGenericSendFromISR+0x70>
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61fb      	str	r3, [r7, #28]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9d2:	f001 fe7d 	bl	800c6d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9d6:	f3ef 8211 	mrs	r2, BASEPRI
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	61ba      	str	r2, [r7, #24]
 800a9ec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d302      	bcc.n	800aa04 <xQueueGenericSendFromISR+0xbc>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d12c      	bne.n	800aa5e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa0e:	683a      	ldr	r2, [r7, #0]
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa14:	f000 fb41 	bl	800b09a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aa1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa20:	d112      	bne.n	800aa48 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d016      	beq.n	800aa58 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	3324      	adds	r3, #36	; 0x24
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f001 f890 	bl	800bb54 <xTaskRemoveFromEventList>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00e      	beq.n	800aa58 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	e007      	b.n	800aa58 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	b25a      	sxtb	r2, r3
 800aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aa5c:	e001      	b.n	800aa62 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3738      	adds	r7, #56	; 0x38
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08e      	sub	sp, #56	; 0x38
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d10a      	bne.n	800aaa2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	623b      	str	r3, [r7, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	e7fe      	b.n	800aaa0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	61fb      	str	r3, [r7, #28]
}
 800aabc:	bf00      	nop
 800aabe:	e7fe      	b.n	800aabe <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800aac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <xQueueGiveFromISR+0x58>
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <xQueueGiveFromISR+0x5c>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e000      	b.n	800aad6 <xQueueGiveFromISR+0x5e>
 800aad4:	2300      	movs	r3, #0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10a      	bne.n	800aaf0 <xQueueGiveFromISR+0x78>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	61bb      	str	r3, [r7, #24]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaf0:	f001 fdee 	bl	800c6d0 <vPortValidateInterruptPriority>
	__asm volatile
 800aaf4:	f3ef 8211 	mrs	r2, BASEPRI
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	617a      	str	r2, [r7, #20]
 800ab0a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ab0c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab14:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d22b      	bcs.n	800ab78 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3a:	d112      	bne.n	800ab62 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d016      	beq.n	800ab72 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	3324      	adds	r3, #36	; 0x24
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 f803 	bl	800bb54 <xTaskRemoveFromEventList>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00e      	beq.n	800ab72 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	e007      	b.n	800ab72 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab66:	3301      	adds	r3, #1
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	b25a      	sxtb	r2, r3
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab72:	2301      	movs	r3, #1
 800ab74:	637b      	str	r3, [r7, #52]	; 0x34
 800ab76:	e001      	b.n	800ab7c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f383 8811 	msr	BASEPRI, r3
}
 800ab86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3738      	adds	r7, #56	; 0x38
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08c      	sub	sp, #48	; 0x30
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aba0:	2300      	movs	r3, #0
 800aba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <xQueueReceive+0x30>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	623b      	str	r3, [r7, #32]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <xQueueReceive+0x3e>
 800abca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <xQueueReceive+0x42>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <xQueueReceive+0x44>
 800abd6:	2300      	movs	r3, #0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <xQueueReceive+0x5e>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	61fb      	str	r3, [r7, #28]
}
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abf2:	f001 f973 	bl	800bedc <xTaskGetSchedulerState>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <xQueueReceive+0x6e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <xQueueReceive+0x72>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e000      	b.n	800ac08 <xQueueReceive+0x74>
 800ac06:	2300      	movs	r3, #0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10a      	bne.n	800ac22 <xQueueReceive+0x8e>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	61bb      	str	r3, [r7, #24]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac22:	f001 fc93 	bl	800c54c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d01f      	beq.n	800ac72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac36:	f000 fa9a 	bl	800b16e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	1e5a      	subs	r2, r3, #1
 800ac3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00f      	beq.n	800ac6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac4c:	3310      	adds	r3, #16
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 ff80 	bl	800bb54 <xTaskRemoveFromEventList>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d007      	beq.n	800ac6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac5a:	4b3d      	ldr	r3, [pc, #244]	; (800ad50 <xQueueReceive+0x1bc>)
 800ac5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac6a:	f001 fc9f 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e069      	b.n	800ad46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d103      	bne.n	800ac80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac78:	f001 fc98 	bl	800c5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e062      	b.n	800ad46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac86:	f107 0310 	add.w	r3, r7, #16
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 ffc4 	bl	800bc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac90:	2301      	movs	r3, #1
 800ac92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac94:	f001 fc8a 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac98:	f000 fd4e 	bl	800b738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac9c:	f001 fc56 	bl	800c54c <vPortEnterCritical>
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aca6:	b25b      	sxtb	r3, r3
 800aca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acac:	d103      	bne.n	800acb6 <xQueueReceive+0x122>
 800acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acbc:	b25b      	sxtb	r3, r3
 800acbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc2:	d103      	bne.n	800accc <xQueueReceive+0x138>
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800accc:	f001 fc6e 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acd0:	1d3a      	adds	r2, r7, #4
 800acd2:	f107 0310 	add.w	r3, r7, #16
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 ffb3 	bl	800bc44 <xTaskCheckForTimeOut>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d123      	bne.n	800ad2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ace4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace6:	f000 faba 	bl	800b25e <prvIsQueueEmpty>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d017      	beq.n	800ad20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	3324      	adds	r3, #36	; 0x24
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	4611      	mov	r1, r2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f000 ff07 	bl	800bb0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad00:	f000 fa5b 	bl	800b1ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad04:	f000 fd26 	bl	800b754 <xTaskResumeAll>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d189      	bne.n	800ac22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad0e:	4b10      	ldr	r3, [pc, #64]	; (800ad50 <xQueueReceive+0x1bc>)
 800ad10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	e780      	b.n	800ac22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad22:	f000 fa4a 	bl	800b1ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad26:	f000 fd15 	bl	800b754 <xTaskResumeAll>
 800ad2a:	e77a      	b.n	800ac22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad2e:	f000 fa44 	bl	800b1ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad32:	f000 fd0f 	bl	800b754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad38:	f000 fa91 	bl	800b25e <prvIsQueueEmpty>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f43f af6f 	beq.w	800ac22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3730      	adds	r7, #48	; 0x30
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	e000ed04 	.word	0xe000ed04

0800ad54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08e      	sub	sp, #56	; 0x38
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad66:	2300      	movs	r3, #0
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	623b      	str	r3, [r7, #32]
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	61fb      	str	r3, [r7, #28]
}
 800ada0:	bf00      	nop
 800ada2:	e7fe      	b.n	800ada2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ada4:	f001 f89a 	bl	800bedc <xTaskGetSchedulerState>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <xQueueSemaphoreTake+0x60>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <xQueueSemaphoreTake+0x64>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e000      	b.n	800adba <xQueueSemaphoreTake+0x66>
 800adb8:	2300      	movs	r3, #0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10a      	bne.n	800add4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	61bb      	str	r3, [r7, #24]
}
 800add0:	bf00      	nop
 800add2:	e7fe      	b.n	800add2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800add4:	f001 fbba 	bl	800c54c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800addc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d024      	beq.n	800ae2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ade4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade6:	1e5a      	subs	r2, r3, #1
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d104      	bne.n	800adfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800adf4:	f001 fa3c 	bl	800c270 <pvTaskIncrementMutexHeldCount>
 800adf8:	4602      	mov	r2, r0
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00f      	beq.n	800ae26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae08:	3310      	adds	r3, #16
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 fea2 	bl	800bb54 <xTaskRemoveFromEventList>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d007      	beq.n	800ae26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae16:	4b54      	ldr	r3, [pc, #336]	; (800af68 <xQueueSemaphoreTake+0x214>)
 800ae18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1c:	601a      	str	r2, [r3, #0]
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae26:	f001 fbc1 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e097      	b.n	800af5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d111      	bne.n	800ae58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	617b      	str	r3, [r7, #20]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae50:	f001 fbac 	bl	800c5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae54:	2300      	movs	r3, #0
 800ae56:	e082      	b.n	800af5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d106      	bne.n	800ae6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae5e:	f107 030c 	add.w	r3, r7, #12
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fed8 	bl	800bc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae6c:	f001 fb9e 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae70:	f000 fc62 	bl	800b738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae74:	f001 fb6a 	bl	800c54c <vPortEnterCritical>
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae7e:	b25b      	sxtb	r3, r3
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae84:	d103      	bne.n	800ae8e <xQueueSemaphoreTake+0x13a>
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae94:	b25b      	sxtb	r3, r3
 800ae96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9a:	d103      	bne.n	800aea4 <xQueueSemaphoreTake+0x150>
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea4:	f001 fb82 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aea8:	463a      	mov	r2, r7
 800aeaa:	f107 030c 	add.w	r3, r7, #12
 800aeae:	4611      	mov	r1, r2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 fec7 	bl	800bc44 <xTaskCheckForTimeOut>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d132      	bne.n	800af22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aebe:	f000 f9ce 	bl	800b25e <prvIsQueueEmpty>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d026      	beq.n	800af16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d109      	bne.n	800aee4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aed0:	f001 fb3c 	bl	800c54c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800aed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f81d 	bl	800bf18 <xTaskPriorityInherit>
 800aede:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aee0:	f001 fb64 	bl	800c5ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee6:	3324      	adds	r3, #36	; 0x24
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	4611      	mov	r1, r2
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 fe0d 	bl	800bb0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aef4:	f000 f961 	bl	800b1ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aef8:	f000 fc2c 	bl	800b754 <xTaskResumeAll>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f47f af68 	bne.w	800add4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800af04:	4b18      	ldr	r3, [pc, #96]	; (800af68 <xQueueSemaphoreTake+0x214>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	e75e      	b.n	800add4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af18:	f000 f94f 	bl	800b1ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af1c:	f000 fc1a 	bl	800b754 <xTaskResumeAll>
 800af20:	e758      	b.n	800add4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af24:	f000 f949 	bl	800b1ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af28:	f000 fc14 	bl	800b754 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af2e:	f000 f996 	bl	800b25e <prvIsQueueEmpty>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	f43f af4d 	beq.w	800add4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00d      	beq.n	800af5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800af40:	f001 fb04 	bl	800c54c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af46:	f000 f891 	bl	800b06c <prvGetDisinheritPriorityAfterTimeout>
 800af4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af52:	4618      	mov	r0, r3
 800af54:	f001 f8ec 	bl	800c130 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af58:	f001 fb28 	bl	800c5ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3738      	adds	r7, #56	; 0x38
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	e000ed04 	.word	0xe000ed04

0800af6c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08e      	sub	sp, #56	; 0x38
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10a      	bne.n	800af98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	623b      	str	r3, [r7, #32]
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <xQueueReceiveFromISR+0x3a>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <xQueueReceiveFromISR+0x3e>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e000      	b.n	800afac <xQueueReceiveFromISR+0x40>
 800afaa:	2300      	movs	r3, #0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10a      	bne.n	800afc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	61fb      	str	r3, [r7, #28]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afc6:	f001 fb83 	bl	800c6d0 <vPortValidateInterruptPriority>
	__asm volatile
 800afca:	f3ef 8211 	mrs	r2, BASEPRI
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	61ba      	str	r2, [r7, #24]
 800afe0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800afe2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d02f      	beq.n	800b052 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800affc:	68b9      	ldr	r1, [r7, #8]
 800affe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b000:	f000 f8b5 	bl	800b16e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b006:	1e5a      	subs	r2, r3, #1
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b00c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b014:	d112      	bne.n	800b03c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d016      	beq.n	800b04c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b020:	3310      	adds	r3, #16
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fd96 	bl	800bb54 <xTaskRemoveFromEventList>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00e      	beq.n	800b04c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	601a      	str	r2, [r3, #0]
 800b03a:	e007      	b.n	800b04c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b040:	3301      	adds	r3, #1
 800b042:	b2db      	uxtb	r3, r3
 800b044:	b25a      	sxtb	r2, r3
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b04c:	2301      	movs	r3, #1
 800b04e:	637b      	str	r3, [r7, #52]	; 0x34
 800b050:	e001      	b.n	800b056 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b052:	2300      	movs	r3, #0
 800b054:	637b      	str	r3, [r7, #52]	; 0x34
 800b056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b058:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f383 8811 	msr	BASEPRI, r3
}
 800b060:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b064:	4618      	mov	r0, r3
 800b066:	3738      	adds	r7, #56	; 0x38
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d006      	beq.n	800b08a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f1c3 0307 	rsb	r3, r3, #7
 800b086:	60fb      	str	r3, [r7, #12]
 800b088:	e001      	b.n	800b08e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b08e:	68fb      	ldr	r3, [r7, #12]
	}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	bc80      	pop	{r7}
 800b098:	4770      	bx	lr

0800b09a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b086      	sub	sp, #24
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	60f8      	str	r0, [r7, #12]
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10d      	bne.n	800b0d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d14d      	bne.n	800b15c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f000 ffad 	bl	800c024 <xTaskPriorityDisinherit>
 800b0ca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	605a      	str	r2, [r3, #4]
 800b0d2:	e043      	b.n	800b15c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d119      	bne.n	800b10e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6898      	ldr	r0, [r3, #8]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68b9      	ldr	r1, [r7, #8]
 800b0e6:	f00f f9dd 	bl	801a4a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	689a      	ldr	r2, [r3, #8]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	441a      	add	r2, r3
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	689a      	ldr	r2, [r3, #8]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	429a      	cmp	r2, r3
 800b102:	d32b      	bcc.n	800b15c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	609a      	str	r2, [r3, #8]
 800b10c:	e026      	b.n	800b15c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	68d8      	ldr	r0, [r3, #12]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b116:	461a      	mov	r2, r3
 800b118:	68b9      	ldr	r1, [r7, #8]
 800b11a:	f00f f9c3 	bl	801a4a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b126:	425b      	negs	r3, r3
 800b128:	441a      	add	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d207      	bcs.n	800b14a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b142:	425b      	negs	r3, r3
 800b144:	441a      	add	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d105      	bne.n	800b15c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d002      	beq.n	800b15c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	3b01      	subs	r3, #1
 800b15a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	1c5a      	adds	r2, r3, #1
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b164:	697b      	ldr	r3, [r7, #20]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3718      	adds	r7, #24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b082      	sub	sp, #8
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
 800b176:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d018      	beq.n	800b1b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	68da      	ldr	r2, [r3, #12]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b188:	441a      	add	r2, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68da      	ldr	r2, [r3, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	429a      	cmp	r2, r3
 800b198:	d303      	bcc.n	800b1a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68d9      	ldr	r1, [r3, #12]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	6838      	ldr	r0, [r7, #0]
 800b1ae:	f00f f979 	bl	801a4a4 <memcpy>
	}
}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b084      	sub	sp, #16
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1c2:	f001 f9c3 	bl	800c54c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1ce:	e011      	b.n	800b1f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d012      	beq.n	800b1fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3324      	adds	r3, #36	; 0x24
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fcb9 	bl	800bb54 <xTaskRemoveFromEventList>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b1e8:	f000 fd8e 	bl	800bd08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	dce9      	bgt.n	800b1d0 <prvUnlockQueue+0x16>
 800b1fc:	e000      	b.n	800b200 <prvUnlockQueue+0x46>
					break;
 800b1fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	22ff      	movs	r2, #255	; 0xff
 800b204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b208:	f001 f9d0 	bl	800c5ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b20c:	f001 f99e 	bl	800c54c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b216:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b218:	e011      	b.n	800b23e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d012      	beq.n	800b248 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3310      	adds	r3, #16
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fc94 	bl	800bb54 <xTaskRemoveFromEventList>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b232:	f000 fd69 	bl	800bd08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b236:	7bbb      	ldrb	r3, [r7, #14]
 800b238:	3b01      	subs	r3, #1
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b23e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dce9      	bgt.n	800b21a <prvUnlockQueue+0x60>
 800b246:	e000      	b.n	800b24a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b248:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	22ff      	movs	r2, #255	; 0xff
 800b24e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b252:	f001 f9ab 	bl	800c5ac <vPortExitCritical>
}
 800b256:	bf00      	nop
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b084      	sub	sp, #16
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b266:	f001 f971 	bl	800c54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d102      	bne.n	800b278 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b272:	2301      	movs	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e001      	b.n	800b27c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b27c:	f001 f996 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800b280:	68fb      	ldr	r3, [r7, #12]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b292:	f001 f95b 	bl	800c54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d102      	bne.n	800b2a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e001      	b.n	800b2ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2ac:	f001 f97e 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b08e      	sub	sp, #56	; 0x38
 800b2be:	af04      	add	r7, sp, #16
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	607a      	str	r2, [r7, #4]
 800b2c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10a      	bne.n	800b2e4 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	623b      	str	r3, [r7, #32]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10a      	bne.n	800b300 <xTaskCreateStatic+0x46>
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	61fb      	str	r3, [r7, #28]
}
 800b2fc:	bf00      	nop
 800b2fe:	e7fe      	b.n	800b2fe <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b300:	23b4      	movs	r3, #180	; 0xb4
 800b302:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	2bb4      	cmp	r3, #180	; 0xb4
 800b308:	d00a      	beq.n	800b320 <xTaskCreateStatic+0x66>
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	61bb      	str	r3, [r7, #24]
}
 800b31c:	bf00      	nop
 800b31e:	e7fe      	b.n	800b31e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	2b00      	cmp	r3, #0
 800b324:	d01e      	beq.n	800b364 <xTaskCreateStatic+0xaa>
 800b326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01b      	beq.n	800b364 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b334:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b338:	2202      	movs	r2, #2
 800b33a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b33e:	2300      	movs	r3, #0
 800b340:	9303      	str	r3, [sp, #12]
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	9302      	str	r3, [sp, #8]
 800b346:	f107 0314 	add.w	r3, r7, #20
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	68b9      	ldr	r1, [r7, #8]
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 f850 	bl	800b3fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b35c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b35e:	f000 f8e3 	bl	800b528 <prvAddNewTaskToReadyList>
 800b362:	e001      	b.n	800b368 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b364:	2300      	movs	r3, #0
 800b366:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b368:	697b      	ldr	r3, [r7, #20]
	}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3728      	adds	r7, #40	; 0x28
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b372:	b580      	push	{r7, lr}
 800b374:	b08c      	sub	sp, #48	; 0x30
 800b376:	af04      	add	r7, sp, #16
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	603b      	str	r3, [r7, #0]
 800b37e:	4613      	mov	r3, r2
 800b380:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b382:	88fb      	ldrh	r3, [r7, #6]
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4618      	mov	r0, r3
 800b388:	f001 f9e0 	bl	800c74c <pvPortMalloc>
 800b38c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00e      	beq.n	800b3b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b394:	20b4      	movs	r0, #180	; 0xb4
 800b396:	f001 f9d9 	bl	800c74c <pvPortMalloc>
 800b39a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	631a      	str	r2, [r3, #48]	; 0x30
 800b3a8:	e005      	b.n	800b3b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b3aa:	6978      	ldr	r0, [r7, #20]
 800b3ac:	f001 fa92 	bl	800c8d4 <vPortFree>
 800b3b0:	e001      	b.n	800b3b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d017      	beq.n	800b3ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3c4:	88fa      	ldrh	r2, [r7, #6]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	9302      	str	r3, [sp, #8]
 800b3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68b9      	ldr	r1, [r7, #8]
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f000 f80e 	bl	800b3fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3e0:	69f8      	ldr	r0, [r7, #28]
 800b3e2:	f000 f8a1 	bl	800b528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	e002      	b.n	800b3f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3f2:	69bb      	ldr	r3, [r7, #24]
	}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3720      	adds	r7, #32
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b088      	sub	sp, #32
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b414:	3b01      	subs	r3, #1
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	f023 0307 	bic.w	r3, r3, #7
 800b422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f003 0307 	and.w	r3, r3, #7
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	617b      	str	r3, [r7, #20]
}
 800b440:	bf00      	nop
 800b442:	e7fe      	b.n	800b442 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b444:	2300      	movs	r3, #0
 800b446:	61fb      	str	r3, [r7, #28]
 800b448:	e012      	b.n	800b470 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	4413      	add	r3, r2
 800b450:	7819      	ldrb	r1, [r3, #0]
 800b452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	4413      	add	r3, r2
 800b458:	3334      	adds	r3, #52	; 0x34
 800b45a:	460a      	mov	r2, r1
 800b45c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	4413      	add	r3, r2
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d006      	beq.n	800b478 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	3301      	adds	r3, #1
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	2b0f      	cmp	r3, #15
 800b474:	d9e9      	bls.n	800b44a <prvInitialiseNewTask+0x4e>
 800b476:	e000      	b.n	800b47a <prvInitialiseNewTask+0x7e>
		{
			break;
 800b478:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	2b06      	cmp	r3, #6
 800b486:	d901      	bls.n	800b48c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b488:	2306      	movs	r3, #6
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b490:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b496:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	2200      	movs	r2, #0
 800b49c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe ff37 	bl	800a316 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	3318      	adds	r3, #24
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fe ff32 	bl	800a316 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	f1c3 0207 	rsb	r2, r3, #7
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4da:	334c      	adds	r3, #76	; 0x4c
 800b4dc:	2260      	movs	r2, #96	; 0x60
 800b4de:	2100      	movs	r1, #0
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f00e ffed 	bl	801a4c0 <memset>
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	4a0c      	ldr	r2, [pc, #48]	; (800b51c <prvInitialiseNewTask+0x120>)
 800b4ea:	651a      	str	r2, [r3, #80]	; 0x50
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	4a0c      	ldr	r2, [pc, #48]	; (800b520 <prvInitialiseNewTask+0x124>)
 800b4f0:	655a      	str	r2, [r3, #84]	; 0x54
 800b4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f4:	4a0b      	ldr	r2, [pc, #44]	; (800b524 <prvInitialiseNewTask+0x128>)
 800b4f6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	69b8      	ldr	r0, [r7, #24]
 800b4fe:	f000 ff31 	bl	800c364 <pxPortInitialiseStack>
 800b502:	4602      	mov	r2, r0
 800b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b506:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b512:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b514:	bf00      	nop
 800b516:	3720      	adds	r7, #32
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	0801ed10 	.word	0x0801ed10
 800b520:	0801ed30 	.word	0x0801ed30
 800b524:	0801ecf0 	.word	0x0801ecf0

0800b528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b530:	f001 f80c 	bl	800c54c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b534:	4b2a      	ldr	r3, [pc, #168]	; (800b5e0 <prvAddNewTaskToReadyList+0xb8>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3301      	adds	r3, #1
 800b53a:	4a29      	ldr	r2, [pc, #164]	; (800b5e0 <prvAddNewTaskToReadyList+0xb8>)
 800b53c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b53e:	4b29      	ldr	r3, [pc, #164]	; (800b5e4 <prvAddNewTaskToReadyList+0xbc>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d109      	bne.n	800b55a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b546:	4a27      	ldr	r2, [pc, #156]	; (800b5e4 <prvAddNewTaskToReadyList+0xbc>)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b54c:	4b24      	ldr	r3, [pc, #144]	; (800b5e0 <prvAddNewTaskToReadyList+0xb8>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d110      	bne.n	800b576 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b554:	f000 fbfc 	bl	800bd50 <prvInitialiseTaskLists>
 800b558:	e00d      	b.n	800b576 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b55a:	4b23      	ldr	r3, [pc, #140]	; (800b5e8 <prvAddNewTaskToReadyList+0xc0>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d109      	bne.n	800b576 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b562:	4b20      	ldr	r3, [pc, #128]	; (800b5e4 <prvAddNewTaskToReadyList+0xbc>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d802      	bhi.n	800b576 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b570:	4a1c      	ldr	r2, [pc, #112]	; (800b5e4 <prvAddNewTaskToReadyList+0xbc>)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b576:	4b1d      	ldr	r3, [pc, #116]	; (800b5ec <prvAddNewTaskToReadyList+0xc4>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	3301      	adds	r3, #1
 800b57c:	4a1b      	ldr	r2, [pc, #108]	; (800b5ec <prvAddNewTaskToReadyList+0xc4>)
 800b57e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	2201      	movs	r2, #1
 800b586:	409a      	lsls	r2, r3
 800b588:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <prvAddNewTaskToReadyList+0xc8>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	4a18      	ldr	r2, [pc, #96]	; (800b5f0 <prvAddNewTaskToReadyList+0xc8>)
 800b590:	6013      	str	r3, [r2, #0]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b596:	4613      	mov	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4a15      	ldr	r2, [pc, #84]	; (800b5f4 <prvAddNewTaskToReadyList+0xcc>)
 800b5a0:	441a      	add	r2, r3
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4610      	mov	r0, r2
 800b5aa:	f7fe fec0 	bl	800a32e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b5ae:	f000 fffd 	bl	800c5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b5b2:	4b0d      	ldr	r3, [pc, #52]	; (800b5e8 <prvAddNewTaskToReadyList+0xc0>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00e      	beq.n	800b5d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b5ba:	4b0a      	ldr	r3, [pc, #40]	; (800b5e4 <prvAddNewTaskToReadyList+0xbc>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d207      	bcs.n	800b5d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b5c8:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <prvAddNewTaskToReadyList+0xd0>)
 800b5ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5ce:	601a      	str	r2, [r3, #0]
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20001010 	.word	0x20001010
 800b5e4:	20000f10 	.word	0x20000f10
 800b5e8:	2000101c 	.word	0x2000101c
 800b5ec:	2000102c 	.word	0x2000102c
 800b5f0:	20001018 	.word	0x20001018
 800b5f4:	20000f14 	.word	0x20000f14
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d017      	beq.n	800b63e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b60e:	4b13      	ldr	r3, [pc, #76]	; (800b65c <vTaskDelay+0x60>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00a      	beq.n	800b62c <vTaskDelay+0x30>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	60bb      	str	r3, [r7, #8]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b62c:	f000 f884 	bl	800b738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b630:	2100      	movs	r1, #0
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fe30 	bl	800c298 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b638:	f000 f88c 	bl	800b754 <xTaskResumeAll>
 800b63c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d107      	bne.n	800b654 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b644:	4b06      	ldr	r3, [pc, #24]	; (800b660 <vTaskDelay+0x64>)
 800b646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b64a:	601a      	str	r2, [r3, #0]
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b654:	bf00      	nop
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	20001038 	.word	0x20001038
 800b660:	e000ed04 	.word	0xe000ed04

0800b664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08a      	sub	sp, #40	; 0x28
 800b668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b66e:	2300      	movs	r3, #0
 800b670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b672:	463a      	mov	r2, r7
 800b674:	1d39      	adds	r1, r7, #4
 800b676:	f107 0308 	add.w	r3, r7, #8
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f5 fa76 	bl	8000b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	9202      	str	r2, [sp, #8]
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	2300      	movs	r3, #0
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	2300      	movs	r3, #0
 800b690:	460a      	mov	r2, r1
 800b692:	4921      	ldr	r1, [pc, #132]	; (800b718 <vTaskStartScheduler+0xb4>)
 800b694:	4821      	ldr	r0, [pc, #132]	; (800b71c <vTaskStartScheduler+0xb8>)
 800b696:	f7ff fe10 	bl	800b2ba <xTaskCreateStatic>
 800b69a:	4603      	mov	r3, r0
 800b69c:	4a20      	ldr	r2, [pc, #128]	; (800b720 <vTaskStartScheduler+0xbc>)
 800b69e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b6a0:	4b1f      	ldr	r3, [pc, #124]	; (800b720 <vTaskStartScheduler+0xbc>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d002      	beq.n	800b6ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e001      	b.n	800b6b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d11b      	bne.n	800b6f0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	613b      	str	r3, [r7, #16]
}
 800b6ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6cc:	4b15      	ldr	r3, [pc, #84]	; (800b724 <vTaskStartScheduler+0xc0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	334c      	adds	r3, #76	; 0x4c
 800b6d2:	4a15      	ldr	r2, [pc, #84]	; (800b728 <vTaskStartScheduler+0xc4>)
 800b6d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6d6:	4b15      	ldr	r3, [pc, #84]	; (800b72c <vTaskStartScheduler+0xc8>)
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6de:	4b14      	ldr	r3, [pc, #80]	; (800b730 <vTaskStartScheduler+0xcc>)
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b6e4:	4b13      	ldr	r3, [pc, #76]	; (800b734 <vTaskStartScheduler+0xd0>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6ea:	f000 febd 	bl	800c468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6ee:	e00e      	b.n	800b70e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f6:	d10a      	bne.n	800b70e <vTaskStartScheduler+0xaa>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	60fb      	str	r3, [r7, #12]
}
 800b70a:	bf00      	nop
 800b70c:	e7fe      	b.n	800b70c <vTaskStartScheduler+0xa8>
}
 800b70e:	bf00      	nop
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	0801ba44 	.word	0x0801ba44
 800b71c:	0800bd21 	.word	0x0800bd21
 800b720:	20001034 	.word	0x20001034
 800b724:	20000f10 	.word	0x20000f10
 800b728:	200001bc 	.word	0x200001bc
 800b72c:	20001030 	.word	0x20001030
 800b730:	2000101c 	.word	0x2000101c
 800b734:	20001014 	.word	0x20001014

0800b738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b738:	b480      	push	{r7}
 800b73a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b73c:	4b04      	ldr	r3, [pc, #16]	; (800b750 <vTaskSuspendAll+0x18>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3301      	adds	r3, #1
 800b742:	4a03      	ldr	r2, [pc, #12]	; (800b750 <vTaskSuspendAll+0x18>)
 800b744:	6013      	str	r3, [r2, #0]
}
 800b746:	bf00      	nop
 800b748:	46bd      	mov	sp, r7
 800b74a:	bc80      	pop	{r7}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	20001038 	.word	0x20001038

0800b754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b75e:	2300      	movs	r3, #0
 800b760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b762:	4b41      	ldr	r3, [pc, #260]	; (800b868 <xTaskResumeAll+0x114>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10a      	bne.n	800b780 <xTaskResumeAll+0x2c>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	603b      	str	r3, [r7, #0]
}
 800b77c:	bf00      	nop
 800b77e:	e7fe      	b.n	800b77e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b780:	f000 fee4 	bl	800c54c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b784:	4b38      	ldr	r3, [pc, #224]	; (800b868 <xTaskResumeAll+0x114>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3b01      	subs	r3, #1
 800b78a:	4a37      	ldr	r2, [pc, #220]	; (800b868 <xTaskResumeAll+0x114>)
 800b78c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b78e:	4b36      	ldr	r3, [pc, #216]	; (800b868 <xTaskResumeAll+0x114>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d161      	bne.n	800b85a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b796:	4b35      	ldr	r3, [pc, #212]	; (800b86c <xTaskResumeAll+0x118>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d05d      	beq.n	800b85a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b79e:	e02e      	b.n	800b7fe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b7a0:	4b33      	ldr	r3, [pc, #204]	; (800b870 <xTaskResumeAll+0x11c>)
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3318      	adds	r3, #24
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe fe19 	bl	800a3e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe fe14 	bl	800a3e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	409a      	lsls	r2, r3
 800b7c4:	4b2b      	ldr	r3, [pc, #172]	; (800b874 <xTaskResumeAll+0x120>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	4a2a      	ldr	r2, [pc, #168]	; (800b874 <xTaskResumeAll+0x120>)
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4a27      	ldr	r2, [pc, #156]	; (800b878 <xTaskResumeAll+0x124>)
 800b7dc:	441a      	add	r2, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	4610      	mov	r0, r2
 800b7e6:	f7fe fda2 	bl	800a32e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ee:	4b23      	ldr	r3, [pc, #140]	; (800b87c <xTaskResumeAll+0x128>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d302      	bcc.n	800b7fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b7f8:	4b21      	ldr	r3, [pc, #132]	; (800b880 <xTaskResumeAll+0x12c>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7fe:	4b1c      	ldr	r3, [pc, #112]	; (800b870 <xTaskResumeAll+0x11c>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1cc      	bne.n	800b7a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b80c:	f000 fb42 	bl	800be94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b810:	4b1c      	ldr	r3, [pc, #112]	; (800b884 <xTaskResumeAll+0x130>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d010      	beq.n	800b83e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b81c:	f000 f856 	bl	800b8cc <xTaskIncrementTick>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b826:	4b16      	ldr	r3, [pc, #88]	; (800b880 <xTaskResumeAll+0x12c>)
 800b828:	2201      	movs	r2, #1
 800b82a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3b01      	subs	r3, #1
 800b830:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1f1      	bne.n	800b81c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b838:	4b12      	ldr	r3, [pc, #72]	; (800b884 <xTaskResumeAll+0x130>)
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b83e:	4b10      	ldr	r3, [pc, #64]	; (800b880 <xTaskResumeAll+0x12c>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d009      	beq.n	800b85a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b846:	2301      	movs	r3, #1
 800b848:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b84a:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <xTaskResumeAll+0x134>)
 800b84c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b85a:	f000 fea7 	bl	800c5ac <vPortExitCritical>

	return xAlreadyYielded;
 800b85e:	68bb      	ldr	r3, [r7, #8]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20001038 	.word	0x20001038
 800b86c:	20001010 	.word	0x20001010
 800b870:	20000fd0 	.word	0x20000fd0
 800b874:	20001018 	.word	0x20001018
 800b878:	20000f14 	.word	0x20000f14
 800b87c:	20000f10 	.word	0x20000f10
 800b880:	20001024 	.word	0x20001024
 800b884:	20001020 	.word	0x20001020
 800b888:	e000ed04 	.word	0xe000ed04

0800b88c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b892:	4b04      	ldr	r3, [pc, #16]	; (800b8a4 <xTaskGetTickCount+0x18>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b898:	687b      	ldr	r3, [r7, #4]
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	370c      	adds	r7, #12
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bc80      	pop	{r7}
 800b8a2:	4770      	bx	lr
 800b8a4:	20001014 	.word	0x20001014

0800b8a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8ae:	f000 ff0f 	bl	800c6d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b8b6:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <xTaskGetTickCountFromISR+0x20>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b8bc:	683b      	ldr	r3, [r7, #0]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20001014 	.word	0x20001014

0800b8cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8d6:	4b51      	ldr	r3, [pc, #324]	; (800ba1c <xTaskIncrementTick+0x150>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f040 808d 	bne.w	800b9fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8e0:	4b4f      	ldr	r3, [pc, #316]	; (800ba20 <xTaskIncrementTick+0x154>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8e8:	4a4d      	ldr	r2, [pc, #308]	; (800ba20 <xTaskIncrementTick+0x154>)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d120      	bne.n	800b936 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8f4:	4b4b      	ldr	r3, [pc, #300]	; (800ba24 <xTaskIncrementTick+0x158>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00a      	beq.n	800b914 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	603b      	str	r3, [r7, #0]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <xTaskIncrementTick+0x46>
 800b914:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <xTaskIncrementTick+0x158>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	4b43      	ldr	r3, [pc, #268]	; (800ba28 <xTaskIncrementTick+0x15c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a41      	ldr	r2, [pc, #260]	; (800ba24 <xTaskIncrementTick+0x158>)
 800b920:	6013      	str	r3, [r2, #0]
 800b922:	4a41      	ldr	r2, [pc, #260]	; (800ba28 <xTaskIncrementTick+0x15c>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	4b40      	ldr	r3, [pc, #256]	; (800ba2c <xTaskIncrementTick+0x160>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3301      	adds	r3, #1
 800b92e:	4a3f      	ldr	r2, [pc, #252]	; (800ba2c <xTaskIncrementTick+0x160>)
 800b930:	6013      	str	r3, [r2, #0]
 800b932:	f000 faaf 	bl	800be94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b936:	4b3e      	ldr	r3, [pc, #248]	; (800ba30 <xTaskIncrementTick+0x164>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d34d      	bcc.n	800b9dc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b940:	4b38      	ldr	r3, [pc, #224]	; (800ba24 <xTaskIncrementTick+0x158>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <xTaskIncrementTick+0x82>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e000      	b.n	800b950 <xTaskIncrementTick+0x84>
 800b94e:	2300      	movs	r3, #0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d004      	beq.n	800b95e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b954:	4b36      	ldr	r3, [pc, #216]	; (800ba30 <xTaskIncrementTick+0x164>)
 800b956:	f04f 32ff 	mov.w	r2, #4294967295
 800b95a:	601a      	str	r2, [r3, #0]
					break;
 800b95c:	e03e      	b.n	800b9dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b95e:	4b31      	ldr	r3, [pc, #196]	; (800ba24 <xTaskIncrementTick+0x158>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	429a      	cmp	r2, r3
 800b974:	d203      	bcs.n	800b97e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b976:	4a2e      	ldr	r2, [pc, #184]	; (800ba30 <xTaskIncrementTick+0x164>)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6013      	str	r3, [r2, #0]
						break;
 800b97c:	e02e      	b.n	800b9dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	3304      	adds	r3, #4
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe fd2e 	bl	800a3e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d004      	beq.n	800b99a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	3318      	adds	r3, #24
 800b994:	4618      	mov	r0, r3
 800b996:	f7fe fd25 	bl	800a3e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	2201      	movs	r2, #1
 800b9a0:	409a      	lsls	r2, r3
 800b9a2:	4b24      	ldr	r3, [pc, #144]	; (800ba34 <xTaskIncrementTick+0x168>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	4a22      	ldr	r2, [pc, #136]	; (800ba34 <xTaskIncrementTick+0x168>)
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4a1f      	ldr	r2, [pc, #124]	; (800ba38 <xTaskIncrementTick+0x16c>)
 800b9ba:	441a      	add	r2, r3
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7fe fcb3 	bl	800a32e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ba3c <xTaskIncrementTick+0x170>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d3b4      	bcc.n	800b940 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9da:	e7b1      	b.n	800b940 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9dc:	4b17      	ldr	r3, [pc, #92]	; (800ba3c <xTaskIncrementTick+0x170>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e2:	4915      	ldr	r1, [pc, #84]	; (800ba38 <xTaskIncrementTick+0x16c>)
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	440b      	add	r3, r1
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d907      	bls.n	800ba04 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e004      	b.n	800ba04 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b9fa:	4b11      	ldr	r3, [pc, #68]	; (800ba40 <xTaskIncrementTick+0x174>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	4a0f      	ldr	r2, [pc, #60]	; (800ba40 <xTaskIncrementTick+0x174>)
 800ba02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ba04:	4b0f      	ldr	r3, [pc, #60]	; (800ba44 <xTaskIncrementTick+0x178>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ba10:	697b      	ldr	r3, [r7, #20]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20001038 	.word	0x20001038
 800ba20:	20001014 	.word	0x20001014
 800ba24:	20000fc8 	.word	0x20000fc8
 800ba28:	20000fcc 	.word	0x20000fcc
 800ba2c:	20001028 	.word	0x20001028
 800ba30:	20001030 	.word	0x20001030
 800ba34:	20001018 	.word	0x20001018
 800ba38:	20000f14 	.word	0x20000f14
 800ba3c:	20000f10 	.word	0x20000f10
 800ba40:	20001020 	.word	0x20001020
 800ba44:	20001024 	.word	0x20001024

0800ba48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba4e:	4b29      	ldr	r3, [pc, #164]	; (800baf4 <vTaskSwitchContext+0xac>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba56:	4b28      	ldr	r3, [pc, #160]	; (800baf8 <vTaskSwitchContext+0xb0>)
 800ba58:	2201      	movs	r2, #1
 800ba5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba5c:	e044      	b.n	800bae8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ba5e:	4b26      	ldr	r3, [pc, #152]	; (800baf8 <vTaskSwitchContext+0xb0>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ba64:	4b25      	ldr	r3, [pc, #148]	; (800bafc <vTaskSwitchContext+0xb4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	fab3 f383 	clz	r3, r3
 800ba70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	f1c3 031f 	rsb	r3, r3, #31
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	4921      	ldr	r1, [pc, #132]	; (800bb00 <vTaskSwitchContext+0xb8>)
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	440b      	add	r3, r1
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d10a      	bne.n	800baa4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ba8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	607b      	str	r3, [r7, #4]
}
 800baa0:	bf00      	nop
 800baa2:	e7fe      	b.n	800baa2 <vTaskSwitchContext+0x5a>
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4a14      	ldr	r2, [pc, #80]	; (800bb00 <vTaskSwitchContext+0xb8>)
 800bab0:	4413      	add	r3, r2
 800bab2:	613b      	str	r3, [r7, #16]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	605a      	str	r2, [r3, #4]
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	3308      	adds	r3, #8
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d104      	bne.n	800bad4 <vTaskSwitchContext+0x8c>
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	605a      	str	r2, [r3, #4]
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	4a0a      	ldr	r2, [pc, #40]	; (800bb04 <vTaskSwitchContext+0xbc>)
 800badc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bade:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <vTaskSwitchContext+0xbc>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	334c      	adds	r3, #76	; 0x4c
 800bae4:	4a08      	ldr	r2, [pc, #32]	; (800bb08 <vTaskSwitchContext+0xc0>)
 800bae6:	6013      	str	r3, [r2, #0]
}
 800bae8:	bf00      	nop
 800baea:	371c      	adds	r7, #28
 800baec:	46bd      	mov	sp, r7
 800baee:	bc80      	pop	{r7}
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20001038 	.word	0x20001038
 800baf8:	20001024 	.word	0x20001024
 800bafc:	20001018 	.word	0x20001018
 800bb00:	20000f14 	.word	0x20000f14
 800bb04:	20000f10 	.word	0x20000f10
 800bb08:	200001bc 	.word	0x200001bc

0800bb0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60fb      	str	r3, [r7, #12]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb32:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vTaskPlaceOnEventList+0x44>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3318      	adds	r3, #24
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7fe fc1a 	bl	800a374 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb40:	2101      	movs	r1, #1
 800bb42:	6838      	ldr	r0, [r7, #0]
 800bb44:	f000 fba8 	bl	800c298 <prvAddCurrentTaskToDelayedList>
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20000f10 	.word	0x20000f10

0800bb54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10a      	bne.n	800bb80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60fb      	str	r3, [r7, #12]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	3318      	adds	r3, #24
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe fc2d 	bl	800a3e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8a:	4b1d      	ldr	r3, [pc, #116]	; (800bc00 <xTaskRemoveFromEventList+0xac>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d11c      	bne.n	800bbcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe fc24 	bl	800a3e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	2201      	movs	r2, #1
 800bba2:	409a      	lsls	r2, r3
 800bba4:	4b17      	ldr	r3, [pc, #92]	; (800bc04 <xTaskRemoveFromEventList+0xb0>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	4a16      	ldr	r2, [pc, #88]	; (800bc04 <xTaskRemoveFromEventList+0xb0>)
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4a13      	ldr	r2, [pc, #76]	; (800bc08 <xTaskRemoveFromEventList+0xb4>)
 800bbbc:	441a      	add	r2, r3
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	3304      	adds	r3, #4
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fe fbb2 	bl	800a32e <vListInsertEnd>
 800bbca:	e005      	b.n	800bbd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	3318      	adds	r3, #24
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	480e      	ldr	r0, [pc, #56]	; (800bc0c <xTaskRemoveFromEventList+0xb8>)
 800bbd4:	f7fe fbab 	bl	800a32e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbdc:	4b0c      	ldr	r3, [pc, #48]	; (800bc10 <xTaskRemoveFromEventList+0xbc>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d905      	bls.n	800bbf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbea:	4b0a      	ldr	r3, [pc, #40]	; (800bc14 <xTaskRemoveFromEventList+0xc0>)
 800bbec:	2201      	movs	r2, #1
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	e001      	b.n	800bbf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bbf6:	697b      	ldr	r3, [r7, #20]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20001038 	.word	0x20001038
 800bc04:	20001018 	.word	0x20001018
 800bc08:	20000f14 	.word	0x20000f14
 800bc0c:	20000fd0 	.word	0x20000fd0
 800bc10:	20000f10 	.word	0x20000f10
 800bc14:	20001024 	.word	0x20001024

0800bc18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc20:	4b06      	ldr	r3, [pc, #24]	; (800bc3c <vTaskInternalSetTimeOutState+0x24>)
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc28:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <vTaskInternalSetTimeOutState+0x28>)
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	605a      	str	r2, [r3, #4]
}
 800bc30:	bf00      	nop
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bc80      	pop	{r7}
 800bc38:	4770      	bx	lr
 800bc3a:	bf00      	nop
 800bc3c:	20001028 	.word	0x20001028
 800bc40:	20001014 	.word	0x20001014

0800bc44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc58:	f383 8811 	msr	BASEPRI, r3
 800bc5c:	f3bf 8f6f 	isb	sy
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	613b      	str	r3, [r7, #16]
}
 800bc66:	bf00      	nop
 800bc68:	e7fe      	b.n	800bc68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10a      	bne.n	800bc86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	60fb      	str	r3, [r7, #12]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc86:	f000 fc61 	bl	800c54c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc8a:	4b1d      	ldr	r3, [pc, #116]	; (800bd00 <xTaskCheckForTimeOut+0xbc>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca2:	d102      	bne.n	800bcaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bca4:	2300      	movs	r3, #0
 800bca6:	61fb      	str	r3, [r7, #28]
 800bca8:	e023      	b.n	800bcf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	4b15      	ldr	r3, [pc, #84]	; (800bd04 <xTaskCheckForTimeOut+0xc0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d007      	beq.n	800bcc6 <xTaskCheckForTimeOut+0x82>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d302      	bcc.n	800bcc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	61fb      	str	r3, [r7, #28]
 800bcc4:	e015      	b.n	800bcf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d20b      	bcs.n	800bce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	1ad2      	subs	r2, r2, r3
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff ff9b 	bl	800bc18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bce2:	2300      	movs	r3, #0
 800bce4:	61fb      	str	r3, [r7, #28]
 800bce6:	e004      	b.n	800bcf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2200      	movs	r2, #0
 800bcec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcf2:	f000 fc5b 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800bcf6:	69fb      	ldr	r3, [r7, #28]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3720      	adds	r7, #32
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20001014 	.word	0x20001014
 800bd04:	20001028 	.word	0x20001028

0800bd08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd08:	b480      	push	{r7}
 800bd0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd0c:	4b03      	ldr	r3, [pc, #12]	; (800bd1c <vTaskMissedYield+0x14>)
 800bd0e:	2201      	movs	r2, #1
 800bd10:	601a      	str	r2, [r3, #0]
}
 800bd12:	bf00      	nop
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bc80      	pop	{r7}
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	20001024 	.word	0x20001024

0800bd20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd28:	f000 f852 	bl	800bdd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd2c:	4b06      	ldr	r3, [pc, #24]	; (800bd48 <prvIdleTask+0x28>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d9f9      	bls.n	800bd28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd34:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <prvIdleTask+0x2c>)
 800bd36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd44:	e7f0      	b.n	800bd28 <prvIdleTask+0x8>
 800bd46:	bf00      	nop
 800bd48:	20000f14 	.word	0x20000f14
 800bd4c:	e000ed04 	.word	0xe000ed04

0800bd50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd56:	2300      	movs	r3, #0
 800bd58:	607b      	str	r3, [r7, #4]
 800bd5a:	e00c      	b.n	800bd76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	4413      	add	r3, r2
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	4a12      	ldr	r2, [pc, #72]	; (800bdb0 <prvInitialiseTaskLists+0x60>)
 800bd68:	4413      	add	r3, r2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe fab4 	bl	800a2d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3301      	adds	r3, #1
 800bd74:	607b      	str	r3, [r7, #4]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b06      	cmp	r3, #6
 800bd7a:	d9ef      	bls.n	800bd5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd7c:	480d      	ldr	r0, [pc, #52]	; (800bdb4 <prvInitialiseTaskLists+0x64>)
 800bd7e:	f7fe faab 	bl	800a2d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd82:	480d      	ldr	r0, [pc, #52]	; (800bdb8 <prvInitialiseTaskLists+0x68>)
 800bd84:	f7fe faa8 	bl	800a2d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd88:	480c      	ldr	r0, [pc, #48]	; (800bdbc <prvInitialiseTaskLists+0x6c>)
 800bd8a:	f7fe faa5 	bl	800a2d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd8e:	480c      	ldr	r0, [pc, #48]	; (800bdc0 <prvInitialiseTaskLists+0x70>)
 800bd90:	f7fe faa2 	bl	800a2d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd94:	480b      	ldr	r0, [pc, #44]	; (800bdc4 <prvInitialiseTaskLists+0x74>)
 800bd96:	f7fe fa9f 	bl	800a2d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd9a:	4b0b      	ldr	r3, [pc, #44]	; (800bdc8 <prvInitialiseTaskLists+0x78>)
 800bd9c:	4a05      	ldr	r2, [pc, #20]	; (800bdb4 <prvInitialiseTaskLists+0x64>)
 800bd9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bda0:	4b0a      	ldr	r3, [pc, #40]	; (800bdcc <prvInitialiseTaskLists+0x7c>)
 800bda2:	4a05      	ldr	r2, [pc, #20]	; (800bdb8 <prvInitialiseTaskLists+0x68>)
 800bda4:	601a      	str	r2, [r3, #0]
}
 800bda6:	bf00      	nop
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000f14 	.word	0x20000f14
 800bdb4:	20000fa0 	.word	0x20000fa0
 800bdb8:	20000fb4 	.word	0x20000fb4
 800bdbc:	20000fd0 	.word	0x20000fd0
 800bdc0:	20000fe4 	.word	0x20000fe4
 800bdc4:	20000ffc 	.word	0x20000ffc
 800bdc8:	20000fc8 	.word	0x20000fc8
 800bdcc:	20000fcc 	.word	0x20000fcc

0800bdd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdd6:	e019      	b.n	800be0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdd8:	f000 fbb8 	bl	800c54c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bddc:	4b10      	ldr	r3, [pc, #64]	; (800be20 <prvCheckTasksWaitingTermination+0x50>)
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fe fafb 	bl	800a3e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdee:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <prvCheckTasksWaitingTermination+0x54>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	4a0b      	ldr	r2, [pc, #44]	; (800be24 <prvCheckTasksWaitingTermination+0x54>)
 800bdf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdf8:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <prvCheckTasksWaitingTermination+0x58>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	4a0a      	ldr	r2, [pc, #40]	; (800be28 <prvCheckTasksWaitingTermination+0x58>)
 800be00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be02:	f000 fbd3 	bl	800c5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f810 	bl	800be2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be0c:	4b06      	ldr	r3, [pc, #24]	; (800be28 <prvCheckTasksWaitingTermination+0x58>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e1      	bne.n	800bdd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20000fe4 	.word	0x20000fe4
 800be24:	20001010 	.word	0x20001010
 800be28:	20000ff8 	.word	0x20000ff8

0800be2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	334c      	adds	r3, #76	; 0x4c
 800be38:	4618      	mov	r0, r3
 800be3a:	f00e fc4b 	bl	801a6d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d108      	bne.n	800be5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fd41 	bl	800c8d4 <vPortFree>
				vPortFree( pxTCB );
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fd3e 	bl	800c8d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be58:	e018      	b.n	800be8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800be60:	2b01      	cmp	r3, #1
 800be62:	d103      	bne.n	800be6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 fd35 	bl	800c8d4 <vPortFree>
	}
 800be6a:	e00f      	b.n	800be8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800be72:	2b02      	cmp	r3, #2
 800be74:	d00a      	beq.n	800be8c <prvDeleteTCB+0x60>
	__asm volatile
 800be76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	60fb      	str	r3, [r7, #12]
}
 800be88:	bf00      	nop
 800be8a:	e7fe      	b.n	800be8a <prvDeleteTCB+0x5e>
	}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be9a:	4b0e      	ldr	r3, [pc, #56]	; (800bed4 <prvResetNextTaskUnblockTime+0x40>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <prvResetNextTaskUnblockTime+0x14>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e000      	b.n	800beaa <prvResetNextTaskUnblockTime+0x16>
 800bea8:	2300      	movs	r3, #0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d004      	beq.n	800beb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800beae:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <prvResetNextTaskUnblockTime+0x44>)
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800beb6:	e008      	b.n	800beca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800beb8:	4b06      	ldr	r3, [pc, #24]	; (800bed4 <prvResetNextTaskUnblockTime+0x40>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	4a04      	ldr	r2, [pc, #16]	; (800bed8 <prvResetNextTaskUnblockTime+0x44>)
 800bec8:	6013      	str	r3, [r2, #0]
}
 800beca:	bf00      	nop
 800becc:	370c      	adds	r7, #12
 800bece:	46bd      	mov	sp, r7
 800bed0:	bc80      	pop	{r7}
 800bed2:	4770      	bx	lr
 800bed4:	20000fc8 	.word	0x20000fc8
 800bed8:	20001030 	.word	0x20001030

0800bedc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bee2:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <xTaskGetSchedulerState+0x34>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d102      	bne.n	800bef0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800beea:	2301      	movs	r3, #1
 800beec:	607b      	str	r3, [r7, #4]
 800beee:	e008      	b.n	800bf02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bef0:	4b08      	ldr	r3, [pc, #32]	; (800bf14 <xTaskGetSchedulerState+0x38>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d102      	bne.n	800befe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bef8:	2302      	movs	r3, #2
 800befa:	607b      	str	r3, [r7, #4]
 800befc:	e001      	b.n	800bf02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800befe:	2300      	movs	r3, #0
 800bf00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf02:	687b      	ldr	r3, [r7, #4]
	}
 800bf04:	4618      	mov	r0, r3
 800bf06:	370c      	adds	r7, #12
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bc80      	pop	{r7}
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	2000101c 	.word	0x2000101c
 800bf14:	20001038 	.word	0x20001038

0800bf18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d06e      	beq.n	800c00c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf32:	4b39      	ldr	r3, [pc, #228]	; (800c018 <xTaskPriorityInherit+0x100>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d25e      	bcs.n	800bffa <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	db06      	blt.n	800bf52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf44:	4b34      	ldr	r3, [pc, #208]	; (800c018 <xTaskPriorityInherit+0x100>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4a:	f1c3 0207 	rsb	r2, r3, #7
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	6959      	ldr	r1, [r3, #20]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4a2e      	ldr	r2, [pc, #184]	; (800c01c <xTaskPriorityInherit+0x104>)
 800bf64:	4413      	add	r3, r2
 800bf66:	4299      	cmp	r1, r3
 800bf68:	d101      	bne.n	800bf6e <xTaskPriorityInherit+0x56>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e000      	b.n	800bf70 <xTaskPriorityInherit+0x58>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d03a      	beq.n	800bfea <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	3304      	adds	r3, #4
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fe fa33 	bl	800a3e4 <uxListRemove>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d115      	bne.n	800bfb0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf88:	4924      	ldr	r1, [pc, #144]	; (800c01c <xTaskPriorityInherit+0x104>)
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	440b      	add	r3, r1
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10a      	bne.n	800bfb0 <xTaskPriorityInherit+0x98>
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa4:	43da      	mvns	r2, r3
 800bfa6:	4b1e      	ldr	r3, [pc, #120]	; (800c020 <xTaskPriorityInherit+0x108>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	4a1c      	ldr	r2, [pc, #112]	; (800c020 <xTaskPriorityInherit+0x108>)
 800bfae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfb0:	4b19      	ldr	r3, [pc, #100]	; (800c018 <xTaskPriorityInherit+0x100>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	409a      	lsls	r2, r3
 800bfc2:	4b17      	ldr	r3, [pc, #92]	; (800c020 <xTaskPriorityInherit+0x108>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	4a15      	ldr	r2, [pc, #84]	; (800c020 <xTaskPriorityInherit+0x108>)
 800bfca:	6013      	str	r3, [r2, #0]
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd0:	4613      	mov	r3, r2
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4a10      	ldr	r2, [pc, #64]	; (800c01c <xTaskPriorityInherit+0x104>)
 800bfda:	441a      	add	r2, r3
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4610      	mov	r0, r2
 800bfe4:	f7fe f9a3 	bl	800a32e <vListInsertEnd>
 800bfe8:	e004      	b.n	800bff4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfea:	4b0b      	ldr	r3, [pc, #44]	; (800c018 <xTaskPriorityInherit+0x100>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bff4:	2301      	movs	r3, #1
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	e008      	b.n	800c00c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bffe:	4b06      	ldr	r3, [pc, #24]	; (800c018 <xTaskPriorityInherit+0x100>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c004:	429a      	cmp	r2, r3
 800c006:	d201      	bcs.n	800c00c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c008:	2301      	movs	r3, #1
 800c00a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c00c:	68fb      	ldr	r3, [r7, #12]
	}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	20000f10 	.word	0x20000f10
 800c01c:	20000f14 	.word	0x20000f14
 800c020:	20001018 	.word	0x20001018

0800c024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c030:	2300      	movs	r3, #0
 800c032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d06e      	beq.n	800c118 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c03a:	4b3a      	ldr	r3, [pc, #232]	; (800c124 <xTaskPriorityDisinherit+0x100>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	429a      	cmp	r2, r3
 800c042:	d00a      	beq.n	800c05a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	60fb      	str	r3, [r7, #12]
}
 800c056:	bf00      	nop
 800c058:	e7fe      	b.n	800c058 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10a      	bne.n	800c078 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	60bb      	str	r3, [r7, #8]
}
 800c074:	bf00      	nop
 800c076:	e7fe      	b.n	800c076 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c07c:	1e5a      	subs	r2, r3, #1
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d044      	beq.n	800c118 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c092:	2b00      	cmp	r3, #0
 800c094:	d140      	bne.n	800c118 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	3304      	adds	r3, #4
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe f9a2 	bl	800a3e4 <uxListRemove>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d115      	bne.n	800c0d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0aa:	491f      	ldr	r1, [pc, #124]	; (800c128 <xTaskPriorityDisinherit+0x104>)
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	440b      	add	r3, r1
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10a      	bne.n	800c0d2 <xTaskPriorityDisinherit+0xae>
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c6:	43da      	mvns	r2, r3
 800c0c8:	4b18      	ldr	r3, [pc, #96]	; (800c12c <xTaskPriorityDisinherit+0x108>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	4a17      	ldr	r2, [pc, #92]	; (800c12c <xTaskPriorityDisinherit+0x108>)
 800c0d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0de:	f1c3 0207 	rsb	r2, r3, #7
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	409a      	lsls	r2, r3
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	; (800c12c <xTaskPriorityDisinherit+0x108>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	4a0d      	ldr	r2, [pc, #52]	; (800c12c <xTaskPriorityDisinherit+0x108>)
 800c0f6:	6013      	str	r3, [r2, #0]
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4413      	add	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4a08      	ldr	r2, [pc, #32]	; (800c128 <xTaskPriorityDisinherit+0x104>)
 800c106:	441a      	add	r2, r3
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	3304      	adds	r3, #4
 800c10c:	4619      	mov	r1, r3
 800c10e:	4610      	mov	r0, r2
 800c110:	f7fe f90d 	bl	800a32e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c114:	2301      	movs	r3, #1
 800c116:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c118:	697b      	ldr	r3, [r7, #20]
	}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20000f10 	.word	0x20000f10
 800c128:	20000f14 	.word	0x20000f14
 800c12c:	20001018 	.word	0x20001018

0800c130 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c130:	b580      	push	{r7, lr}
 800c132:	b088      	sub	sp, #32
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c13e:	2301      	movs	r3, #1
 800c140:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	f000 8088 	beq.w	800c25a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10a      	bne.n	800c168 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	60fb      	str	r3, [r7, #12]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d902      	bls.n	800c178 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	61fb      	str	r3, [r7, #28]
 800c176:	e002      	b.n	800c17e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c17c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	429a      	cmp	r2, r3
 800c186:	d068      	beq.n	800c25a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d163      	bne.n	800c25a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c192:	4b34      	ldr	r3, [pc, #208]	; (800c264 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	69ba      	ldr	r2, [r7, #24]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d10a      	bne.n	800c1b2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	60bb      	str	r3, [r7, #8]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	69fa      	ldr	r2, [r7, #28]
 800c1bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	699b      	ldr	r3, [r3, #24]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	db04      	blt.n	800c1d0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	f1c3 0207 	rsb	r2, r3, #7
 800c1cc:	69bb      	ldr	r3, [r7, #24]
 800c1ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	6959      	ldr	r1, [r3, #20]
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4a22      	ldr	r2, [pc, #136]	; (800c268 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1e0:	4413      	add	r3, r2
 800c1e2:	4299      	cmp	r1, r3
 800c1e4:	d101      	bne.n	800c1ea <vTaskPriorityDisinheritAfterTimeout+0xba>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e000      	b.n	800c1ec <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d034      	beq.n	800c25a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe f8f5 	bl	800a3e4 <uxListRemove>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d115      	bne.n	800c22c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c204:	4918      	ldr	r1, [pc, #96]	; (800c268 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c206:	4613      	mov	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	440b      	add	r3, r1
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21a:	2201      	movs	r2, #1
 800c21c:	fa02 f303 	lsl.w	r3, r2, r3
 800c220:	43da      	mvns	r2, r3
 800c222:	4b12      	ldr	r3, [pc, #72]	; (800c26c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4013      	ands	r3, r2
 800c228:	4a10      	ldr	r2, [pc, #64]	; (800c26c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c22a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c230:	2201      	movs	r2, #1
 800c232:	409a      	lsls	r2, r3
 800c234:	4b0d      	ldr	r3, [pc, #52]	; (800c26c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	4313      	orrs	r3, r2
 800c23a:	4a0c      	ldr	r2, [pc, #48]	; (800c26c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c242:	4613      	mov	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4413      	add	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4a07      	ldr	r2, [pc, #28]	; (800c268 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c24c:	441a      	add	r2, r3
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	3304      	adds	r3, #4
 800c252:	4619      	mov	r1, r3
 800c254:	4610      	mov	r0, r2
 800c256:	f7fe f86a 	bl	800a32e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c25a:	bf00      	nop
 800c25c:	3720      	adds	r7, #32
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20000f10 	.word	0x20000f10
 800c268:	20000f14 	.word	0x20000f14
 800c26c:	20001018 	.word	0x20001018

0800c270 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c270:	b480      	push	{r7}
 800c272:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c274:	4b07      	ldr	r3, [pc, #28]	; (800c294 <pvTaskIncrementMutexHeldCount+0x24>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d004      	beq.n	800c286 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c27c:	4b05      	ldr	r3, [pc, #20]	; (800c294 <pvTaskIncrementMutexHeldCount+0x24>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c282:	3201      	adds	r2, #1
 800c284:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c286:	4b03      	ldr	r3, [pc, #12]	; (800c294 <pvTaskIncrementMutexHeldCount+0x24>)
 800c288:	681b      	ldr	r3, [r3, #0]
	}
 800c28a:	4618      	mov	r0, r3
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bc80      	pop	{r7}
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	20000f10 	.word	0x20000f10

0800c298 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2a2:	4b29      	ldr	r3, [pc, #164]	; (800c348 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2a8:	4b28      	ldr	r3, [pc, #160]	; (800c34c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe f898 	bl	800a3e4 <uxListRemove>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d10b      	bne.n	800c2d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c2ba:	4b24      	ldr	r3, [pc, #144]	; (800c34c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c6:	43da      	mvns	r2, r3
 800c2c8:	4b21      	ldr	r3, [pc, #132]	; (800c350 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	4a20      	ldr	r2, [pc, #128]	; (800c350 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d8:	d10a      	bne.n	800c2f0 <prvAddCurrentTaskToDelayedList+0x58>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d007      	beq.n	800c2f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2e0:	4b1a      	ldr	r3, [pc, #104]	; (800c34c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	481a      	ldr	r0, [pc, #104]	; (800c354 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2ea:	f7fe f820 	bl	800a32e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2ee:	e026      	b.n	800c33e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2f8:	4b14      	ldr	r3, [pc, #80]	; (800c34c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	429a      	cmp	r2, r3
 800c306:	d209      	bcs.n	800c31c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c308:	4b13      	ldr	r3, [pc, #76]	; (800c358 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3304      	adds	r3, #4
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fe f82d 	bl	800a374 <vListInsert>
}
 800c31a:	e010      	b.n	800c33e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c31c:	4b0f      	ldr	r3, [pc, #60]	; (800c35c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	3304      	adds	r3, #4
 800c326:	4619      	mov	r1, r3
 800c328:	4610      	mov	r0, r2
 800c32a:	f7fe f823 	bl	800a374 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c32e:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	429a      	cmp	r2, r3
 800c336:	d202      	bcs.n	800c33e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c338:	4a09      	ldr	r2, [pc, #36]	; (800c360 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	6013      	str	r3, [r2, #0]
}
 800c33e:	bf00      	nop
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20001014 	.word	0x20001014
 800c34c:	20000f10 	.word	0x20000f10
 800c350:	20001018 	.word	0x20001018
 800c354:	20000ffc 	.word	0x20000ffc
 800c358:	20000fcc 	.word	0x20000fcc
 800c35c:	20000fc8 	.word	0x20000fc8
 800c360:	20001030 	.word	0x20001030

0800c364 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3b04      	subs	r3, #4
 800c374:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3b04      	subs	r3, #4
 800c382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	f023 0201 	bic.w	r2, r3, #1
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b04      	subs	r3, #4
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c394:	4a08      	ldr	r2, [pc, #32]	; (800c3b8 <pxPortInitialiseStack+0x54>)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	3b14      	subs	r3, #20
 800c39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3b20      	subs	r3, #32
 800c3aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bc80      	pop	{r7}
 800c3b6:	4770      	bx	lr
 800c3b8:	0800c3bd 	.word	0x0800c3bd

0800c3bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3c6:	4b12      	ldr	r3, [pc, #72]	; (800c410 <prvTaskExitError+0x54>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ce:	d00a      	beq.n	800c3e6 <prvTaskExitError+0x2a>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	60fb      	str	r3, [r7, #12]
}
 800c3e2:	bf00      	nop
 800c3e4:	e7fe      	b.n	800c3e4 <prvTaskExitError+0x28>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	60bb      	str	r3, [r7, #8]
}
 800c3f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3fa:	bf00      	nop
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0fc      	beq.n	800c3fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	bc80      	pop	{r7}
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	20000148 	.word	0x20000148
	...

0800c420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c420:	4b07      	ldr	r3, [pc, #28]	; (800c440 <pxCurrentTCBConst2>)
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	6808      	ldr	r0, [r1, #0]
 800c426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c42a:	f380 8809 	msr	PSP, r0
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8811 	msr	BASEPRI, r0
 800c43a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c43e:	4770      	bx	lr

0800c440 <pxCurrentTCBConst2>:
 800c440:	20000f10 	.word	0x20000f10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c448:	4806      	ldr	r0, [pc, #24]	; (800c464 <prvPortStartFirstTask+0x1c>)
 800c44a:	6800      	ldr	r0, [r0, #0]
 800c44c:	6800      	ldr	r0, [r0, #0]
 800c44e:	f380 8808 	msr	MSP, r0
 800c452:	b662      	cpsie	i
 800c454:	b661      	cpsie	f
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	df00      	svc	0
 800c460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c462:	bf00      	nop
 800c464:	e000ed08 	.word	0xe000ed08

0800c468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c46e:	4b32      	ldr	r3, [pc, #200]	; (800c538 <xPortStartScheduler+0xd0>)
 800c470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	22ff      	movs	r2, #255	; 0xff
 800c47e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	b2db      	uxtb	r3, r3
 800c486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c488:	78fb      	ldrb	r3, [r7, #3]
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c490:	b2da      	uxtb	r2, r3
 800c492:	4b2a      	ldr	r3, [pc, #168]	; (800c53c <xPortStartScheduler+0xd4>)
 800c494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c496:	4b2a      	ldr	r3, [pc, #168]	; (800c540 <xPortStartScheduler+0xd8>)
 800c498:	2207      	movs	r2, #7
 800c49a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c49c:	e009      	b.n	800c4b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c49e:	4b28      	ldr	r3, [pc, #160]	; (800c540 <xPortStartScheduler+0xd8>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	4a26      	ldr	r2, [pc, #152]	; (800c540 <xPortStartScheduler+0xd8>)
 800c4a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4a8:	78fb      	ldrb	r3, [r7, #3]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4b2:	78fb      	ldrb	r3, [r7, #3]
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ba:	2b80      	cmp	r3, #128	; 0x80
 800c4bc:	d0ef      	beq.n	800c49e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4be:	4b20      	ldr	r3, [pc, #128]	; (800c540 <xPortStartScheduler+0xd8>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f1c3 0307 	rsb	r3, r3, #7
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	d00a      	beq.n	800c4e0 <xPortStartScheduler+0x78>
	__asm volatile
 800c4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ce:	f383 8811 	msr	BASEPRI, r3
 800c4d2:	f3bf 8f6f 	isb	sy
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	60bb      	str	r3, [r7, #8]
}
 800c4dc:	bf00      	nop
 800c4de:	e7fe      	b.n	800c4de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4e0:	4b17      	ldr	r3, [pc, #92]	; (800c540 <xPortStartScheduler+0xd8>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	021b      	lsls	r3, r3, #8
 800c4e6:	4a16      	ldr	r2, [pc, #88]	; (800c540 <xPortStartScheduler+0xd8>)
 800c4e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4ea:	4b15      	ldr	r3, [pc, #84]	; (800c540 <xPortStartScheduler+0xd8>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c4f2:	4a13      	ldr	r2, [pc, #76]	; (800c540 <xPortStartScheduler+0xd8>)
 800c4f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4fe:	4b11      	ldr	r3, [pc, #68]	; (800c544 <xPortStartScheduler+0xdc>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a10      	ldr	r2, [pc, #64]	; (800c544 <xPortStartScheduler+0xdc>)
 800c504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c50a:	4b0e      	ldr	r3, [pc, #56]	; (800c544 <xPortStartScheduler+0xdc>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a0d      	ldr	r2, [pc, #52]	; (800c544 <xPortStartScheduler+0xdc>)
 800c510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c516:	f000 f8b9 	bl	800c68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c51a:	4b0b      	ldr	r3, [pc, #44]	; (800c548 <xPortStartScheduler+0xe0>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c520:	f7ff ff92 	bl	800c448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c524:	f7ff fa90 	bl	800ba48 <vTaskSwitchContext>
	prvTaskExitError();
 800c528:	f7ff ff48 	bl	800c3bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c52c:	2300      	movs	r3, #0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	e000e400 	.word	0xe000e400
 800c53c:	2000103c 	.word	0x2000103c
 800c540:	20001040 	.word	0x20001040
 800c544:	e000ed20 	.word	0xe000ed20
 800c548:	20000148 	.word	0x20000148

0800c54c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
	__asm volatile
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	607b      	str	r3, [r7, #4]
}
 800c564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c566:	4b0f      	ldr	r3, [pc, #60]	; (800c5a4 <vPortEnterCritical+0x58>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	3301      	adds	r3, #1
 800c56c:	4a0d      	ldr	r2, [pc, #52]	; (800c5a4 <vPortEnterCritical+0x58>)
 800c56e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c570:	4b0c      	ldr	r3, [pc, #48]	; (800c5a4 <vPortEnterCritical+0x58>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d10f      	bne.n	800c598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c578:	4b0b      	ldr	r3, [pc, #44]	; (800c5a8 <vPortEnterCritical+0x5c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <vPortEnterCritical+0x4c>
	__asm volatile
 800c582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c586:	f383 8811 	msr	BASEPRI, r3
 800c58a:	f3bf 8f6f 	isb	sy
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	603b      	str	r3, [r7, #0]
}
 800c594:	bf00      	nop
 800c596:	e7fe      	b.n	800c596 <vPortEnterCritical+0x4a>
	}
}
 800c598:	bf00      	nop
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bc80      	pop	{r7}
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	20000148 	.word	0x20000148
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5b2:	4b11      	ldr	r3, [pc, #68]	; (800c5f8 <vPortExitCritical+0x4c>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10a      	bne.n	800c5d0 <vPortExitCritical+0x24>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	607b      	str	r3, [r7, #4]
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5d0:	4b09      	ldr	r3, [pc, #36]	; (800c5f8 <vPortExitCritical+0x4c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	4a08      	ldr	r2, [pc, #32]	; (800c5f8 <vPortExitCritical+0x4c>)
 800c5d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5da:	4b07      	ldr	r3, [pc, #28]	; (800c5f8 <vPortExitCritical+0x4c>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d105      	bne.n	800c5ee <vPortExitCritical+0x42>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	f383 8811 	msr	BASEPRI, r3
}
 800c5ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5ee:	bf00      	nop
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bc80      	pop	{r7}
 800c5f6:	4770      	bx	lr
 800c5f8:	20000148 	.word	0x20000148
 800c5fc:	00000000 	.word	0x00000000

0800c600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c600:	f3ef 8009 	mrs	r0, PSP
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	4b0d      	ldr	r3, [pc, #52]	; (800c640 <pxCurrentTCBConst>)
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c610:	6010      	str	r0, [r2, #0]
 800c612:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c61a:	f380 8811 	msr	BASEPRI, r0
 800c61e:	f7ff fa13 	bl	800ba48 <vTaskSwitchContext>
 800c622:	f04f 0000 	mov.w	r0, #0
 800c626:	f380 8811 	msr	BASEPRI, r0
 800c62a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c62e:	6819      	ldr	r1, [r3, #0]
 800c630:	6808      	ldr	r0, [r1, #0]
 800c632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c636:	f380 8809 	msr	PSP, r0
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	4770      	bx	lr

0800c640 <pxCurrentTCBConst>:
 800c640:	20000f10 	.word	0x20000f10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop

0800c648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	607b      	str	r3, [r7, #4]
}
 800c660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c662:	f7ff f933 	bl	800b8cc <xTaskIncrementTick>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d003      	beq.n	800c674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c66c:	4b06      	ldr	r3, [pc, #24]	; (800c688 <SysTick_Handler+0x40>)
 800c66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	2300      	movs	r3, #0
 800c676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	f383 8811 	msr	BASEPRI, r3
}
 800c67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	e000ed04 	.word	0xe000ed04

0800c68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c690:	4b0a      	ldr	r3, [pc, #40]	; (800c6bc <vPortSetupTimerInterrupt+0x30>)
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c696:	4b0a      	ldr	r3, [pc, #40]	; (800c6c0 <vPortSetupTimerInterrupt+0x34>)
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c69c:	4b09      	ldr	r3, [pc, #36]	; (800c6c4 <vPortSetupTimerInterrupt+0x38>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a09      	ldr	r2, [pc, #36]	; (800c6c8 <vPortSetupTimerInterrupt+0x3c>)
 800c6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a6:	099b      	lsrs	r3, r3, #6
 800c6a8:	4a08      	ldr	r2, [pc, #32]	; (800c6cc <vPortSetupTimerInterrupt+0x40>)
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ae:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <vPortSetupTimerInterrupt+0x30>)
 800c6b0:	2207      	movs	r2, #7
 800c6b2:	601a      	str	r2, [r3, #0]
}
 800c6b4:	bf00      	nop
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bc80      	pop	{r7}
 800c6ba:	4770      	bx	lr
 800c6bc:	e000e010 	.word	0xe000e010
 800c6c0:	e000e018 	.word	0xe000e018
 800c6c4:	2000002c 	.word	0x2000002c
 800c6c8:	10624dd3 	.word	0x10624dd3
 800c6cc:	e000e014 	.word	0xe000e014

0800c6d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6d6:	f3ef 8305 	mrs	r3, IPSR
 800c6da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b0f      	cmp	r3, #15
 800c6e0:	d914      	bls.n	800c70c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6e2:	4a16      	ldr	r2, [pc, #88]	; (800c73c <vPortValidateInterruptPriority+0x6c>)
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c6ec:	4b14      	ldr	r3, [pc, #80]	; (800c740 <vPortValidateInterruptPriority+0x70>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	7afa      	ldrb	r2, [r7, #11]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d20a      	bcs.n	800c70c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	607b      	str	r3, [r7, #4]
}
 800c708:	bf00      	nop
 800c70a:	e7fe      	b.n	800c70a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c70c:	4b0d      	ldr	r3, [pc, #52]	; (800c744 <vPortValidateInterruptPriority+0x74>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c714:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <vPortValidateInterruptPriority+0x78>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d90a      	bls.n	800c732 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	603b      	str	r3, [r7, #0]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <vPortValidateInterruptPriority+0x60>
	}
 800c732:	bf00      	nop
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	bc80      	pop	{r7}
 800c73a:	4770      	bx	lr
 800c73c:	e000e3f0 	.word	0xe000e3f0
 800c740:	2000103c 	.word	0x2000103c
 800c744:	e000ed0c 	.word	0xe000ed0c
 800c748:	20001040 	.word	0x20001040

0800c74c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08a      	sub	sp, #40	; 0x28
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c754:	2300      	movs	r3, #0
 800c756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c758:	f7fe ffee 	bl	800b738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c75c:	4b58      	ldr	r3, [pc, #352]	; (800c8c0 <pvPortMalloc+0x174>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d101      	bne.n	800c768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c764:	f000 f910 	bl	800c988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c768:	4b56      	ldr	r3, [pc, #344]	; (800c8c4 <pvPortMalloc+0x178>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4013      	ands	r3, r2
 800c770:	2b00      	cmp	r3, #0
 800c772:	f040 808e 	bne.w	800c892 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01d      	beq.n	800c7b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c77c:	2208      	movs	r2, #8
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4413      	add	r3, r2
 800c782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f003 0307 	and.w	r3, r3, #7
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d014      	beq.n	800c7b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f023 0307 	bic.w	r3, r3, #7
 800c794:	3308      	adds	r3, #8
 800c796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00a      	beq.n	800c7b8 <pvPortMalloc+0x6c>
	__asm volatile
 800c7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a6:	f383 8811 	msr	BASEPRI, r3
 800c7aa:	f3bf 8f6f 	isb	sy
 800c7ae:	f3bf 8f4f 	dsb	sy
 800c7b2:	617b      	str	r3, [r7, #20]
}
 800c7b4:	bf00      	nop
 800c7b6:	e7fe      	b.n	800c7b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d069      	beq.n	800c892 <pvPortMalloc+0x146>
 800c7be:	4b42      	ldr	r3, [pc, #264]	; (800c8c8 <pvPortMalloc+0x17c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d864      	bhi.n	800c892 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7c8:	4b40      	ldr	r3, [pc, #256]	; (800c8cc <pvPortMalloc+0x180>)
 800c7ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7cc:	4b3f      	ldr	r3, [pc, #252]	; (800c8cc <pvPortMalloc+0x180>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7d2:	e004      	b.n	800c7de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d903      	bls.n	800c7f0 <pvPortMalloc+0xa4>
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1f1      	bne.n	800c7d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7f0:	4b33      	ldr	r3, [pc, #204]	; (800c8c0 <pvPortMalloc+0x174>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d04b      	beq.n	800c892 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2208      	movs	r2, #8
 800c800:	4413      	add	r3, r2
 800c802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	685a      	ldr	r2, [r3, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	1ad2      	subs	r2, r2, r3
 800c814:	2308      	movs	r3, #8
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	429a      	cmp	r2, r3
 800c81a:	d91f      	bls.n	800c85c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4413      	add	r3, r2
 800c822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	f003 0307 	and.w	r3, r3, #7
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <pvPortMalloc+0xf8>
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	613b      	str	r3, [r7, #16]
}
 800c840:	bf00      	nop
 800c842:	e7fe      	b.n	800c842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	1ad2      	subs	r2, r2, r3
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c856:	69b8      	ldr	r0, [r7, #24]
 800c858:	f000 f8f8 	bl	800ca4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c85c:	4b1a      	ldr	r3, [pc, #104]	; (800c8c8 <pvPortMalloc+0x17c>)
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	4a18      	ldr	r2, [pc, #96]	; (800c8c8 <pvPortMalloc+0x17c>)
 800c868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c86a:	4b17      	ldr	r3, [pc, #92]	; (800c8c8 <pvPortMalloc+0x17c>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	4b18      	ldr	r3, [pc, #96]	; (800c8d0 <pvPortMalloc+0x184>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	429a      	cmp	r2, r3
 800c874:	d203      	bcs.n	800c87e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c876:	4b14      	ldr	r3, [pc, #80]	; (800c8c8 <pvPortMalloc+0x17c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a15      	ldr	r2, [pc, #84]	; (800c8d0 <pvPortMalloc+0x184>)
 800c87c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	4b10      	ldr	r3, [pc, #64]	; (800c8c4 <pvPortMalloc+0x178>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	431a      	orrs	r2, r3
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	2200      	movs	r2, #0
 800c890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c892:	f7fe ff5f 	bl	800b754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	f003 0307 	and.w	r3, r3, #7
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00a      	beq.n	800c8b6 <pvPortMalloc+0x16a>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	f383 8811 	msr	BASEPRI, r3
 800c8a8:	f3bf 8f6f 	isb	sy
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	60fb      	str	r3, [r7, #12]
}
 800c8b2:	bf00      	nop
 800c8b4:	e7fe      	b.n	800c8b4 <pvPortMalloc+0x168>
	return pvReturn;
 800c8b6:	69fb      	ldr	r3, [r7, #28]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3728      	adds	r7, #40	; 0x28
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20004c4c 	.word	0x20004c4c
 800c8c4:	20004c58 	.word	0x20004c58
 800c8c8:	20004c50 	.word	0x20004c50
 800c8cc:	20004c44 	.word	0x20004c44
 800c8d0:	20004c54 	.word	0x20004c54

0800c8d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d048      	beq.n	800c978 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8e6:	2308      	movs	r3, #8
 800c8e8:	425b      	negs	r3, r3
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	685a      	ldr	r2, [r3, #4]
 800c8f8:	4b21      	ldr	r3, [pc, #132]	; (800c980 <vPortFree+0xac>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4013      	ands	r3, r2
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10a      	bne.n	800c918 <vPortFree+0x44>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	60fb      	str	r3, [r7, #12]
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00a      	beq.n	800c936 <vPortFree+0x62>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	60bb      	str	r3, [r7, #8]
}
 800c932:	bf00      	nop
 800c934:	e7fe      	b.n	800c934 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	685a      	ldr	r2, [r3, #4]
 800c93a:	4b11      	ldr	r3, [pc, #68]	; (800c980 <vPortFree+0xac>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4013      	ands	r3, r2
 800c940:	2b00      	cmp	r3, #0
 800c942:	d019      	beq.n	800c978 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d115      	bne.n	800c978 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	4b0b      	ldr	r3, [pc, #44]	; (800c980 <vPortFree+0xac>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	43db      	mvns	r3, r3
 800c956:	401a      	ands	r2, r3
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c95c:	f7fe feec 	bl	800b738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	685a      	ldr	r2, [r3, #4]
 800c964:	4b07      	ldr	r3, [pc, #28]	; (800c984 <vPortFree+0xb0>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4413      	add	r3, r2
 800c96a:	4a06      	ldr	r2, [pc, #24]	; (800c984 <vPortFree+0xb0>)
 800c96c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c96e:	6938      	ldr	r0, [r7, #16]
 800c970:	f000 f86c 	bl	800ca4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c974:	f7fe feee 	bl	800b754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c978:	bf00      	nop
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20004c58 	.word	0x20004c58
 800c984:	20004c50 	.word	0x20004c50

0800c988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c98e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c994:	4b27      	ldr	r3, [pc, #156]	; (800ca34 <prvHeapInit+0xac>)
 800c996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f003 0307 	and.w	r3, r3, #7
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3307      	adds	r3, #7
 800c9a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f023 0307 	bic.w	r3, r3, #7
 800c9ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	4a1f      	ldr	r2, [pc, #124]	; (800ca34 <prvHeapInit+0xac>)
 800c9b8:	4413      	add	r3, r2
 800c9ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9c0:	4a1d      	ldr	r2, [pc, #116]	; (800ca38 <prvHeapInit+0xb0>)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9c6:	4b1c      	ldr	r3, [pc, #112]	; (800ca38 <prvHeapInit+0xb0>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9d4:	2208      	movs	r2, #8
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	1a9b      	subs	r3, r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f023 0307 	bic.w	r3, r3, #7
 800c9e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	4a15      	ldr	r2, [pc, #84]	; (800ca3c <prvHeapInit+0xb4>)
 800c9e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9ea:	4b14      	ldr	r3, [pc, #80]	; (800ca3c <prvHeapInit+0xb4>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9f2:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <prvHeapInit+0xb4>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	1ad2      	subs	r2, r2, r3
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca08:	4b0c      	ldr	r3, [pc, #48]	; (800ca3c <prvHeapInit+0xb4>)
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	4a0a      	ldr	r2, [pc, #40]	; (800ca40 <prvHeapInit+0xb8>)
 800ca16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	4a09      	ldr	r2, [pc, #36]	; (800ca44 <prvHeapInit+0xbc>)
 800ca1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca20:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <prvHeapInit+0xc0>)
 800ca22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ca26:	601a      	str	r2, [r3, #0]
}
 800ca28:	bf00      	nop
 800ca2a:	3714      	adds	r7, #20
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bc80      	pop	{r7}
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	20001044 	.word	0x20001044
 800ca38:	20004c44 	.word	0x20004c44
 800ca3c:	20004c4c 	.word	0x20004c4c
 800ca40:	20004c54 	.word	0x20004c54
 800ca44:	20004c50 	.word	0x20004c50
 800ca48:	20004c58 	.word	0x20004c58

0800ca4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca54:	4b27      	ldr	r3, [pc, #156]	; (800caf4 <prvInsertBlockIntoFreeList+0xa8>)
 800ca56:	60fb      	str	r3, [r7, #12]
 800ca58:	e002      	b.n	800ca60 <prvInsertBlockIntoFreeList+0x14>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d8f7      	bhi.n	800ca5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	4413      	add	r3, r2
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d108      	bne.n	800ca8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	685a      	ldr	r2, [r3, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	441a      	add	r2, r3
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	441a      	add	r2, r3
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d118      	bne.n	800cad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <prvInsertBlockIntoFreeList+0xac>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d00d      	beq.n	800caca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	441a      	add	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	601a      	str	r2, [r3, #0]
 800cac8:	e008      	b.n	800cadc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800caca:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <prvInsertBlockIntoFreeList+0xac>)
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	e003      	b.n	800cadc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d002      	beq.n	800caea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caea:	bf00      	nop
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	bc80      	pop	{r7}
 800caf2:	4770      	bx	lr
 800caf4:	20004c44 	.word	0x20004c44
 800caf8:	20004c4c 	.word	0x20004c4c

0800cafc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800cb04:	4b2b      	ldr	r3, [pc, #172]	; (800cbb4 <tcpip_thread+0xb8>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d005      	beq.n	800cb18 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800cb0c:	4b29      	ldr	r3, [pc, #164]	; (800cbb4 <tcpip_thread+0xb8>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a29      	ldr	r2, [pc, #164]	; (800cbb8 <tcpip_thread+0xbc>)
 800cb12:	6812      	ldr	r2, [r2, #0]
 800cb14:	4610      	mov	r0, r2
 800cb16:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800cb18:	4828      	ldr	r0, [pc, #160]	; (800cbbc <tcpip_thread+0xc0>)
 800cb1a:	f00c fe39 	bl	8019790 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800cb1e:	4827      	ldr	r0, [pc, #156]	; (800cbbc <tcpip_thread+0xc0>)
 800cb20:	f00c fe45 	bl	80197ae <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800cb24:	f107 030c 	add.w	r3, r7, #12
 800cb28:	4619      	mov	r1, r3
 800cb2a:	4825      	ldr	r0, [pc, #148]	; (800cbc0 <tcpip_thread+0xc4>)
 800cb2c:	f00a f9dc 	bl	8016ee8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cb30:	4822      	ldr	r0, [pc, #136]	; (800cbbc <tcpip_thread+0xc0>)
 800cb32:	f00c fe2d 	bl	8019790 <sys_mutex_lock>
    if (msg == NULL) {
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d106      	bne.n	800cb4a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cb3c:	4b21      	ldr	r3, [pc, #132]	; (800cbc4 <tcpip_thread+0xc8>)
 800cb3e:	2269      	movs	r2, #105	; 0x69
 800cb40:	4921      	ldr	r1, [pc, #132]	; (800cbc8 <tcpip_thread+0xcc>)
 800cb42:	4822      	ldr	r0, [pc, #136]	; (800cbcc <tcpip_thread+0xd0>)
 800cb44:	f00d fda0 	bl	801a688 <iprintf>
      continue;
 800cb48:	e032      	b.n	800cbb0 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b04      	cmp	r3, #4
 800cb50:	d020      	beq.n	800cb94 <tcpip_thread+0x98>
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	dc25      	bgt.n	800cba2 <tcpip_thread+0xa6>
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d002      	beq.n	800cb60 <tcpip_thread+0x64>
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d00e      	beq.n	800cb7c <tcpip_thread+0x80>
 800cb5e:	e020      	b.n	800cba2 <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	6850      	ldr	r0, [r2, #4]
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	6892      	ldr	r2, [r2, #8]
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4619      	mov	r1, r3
 800cb74:	2009      	movs	r0, #9
 800cb76:	f003 fc8f 	bl	8010498 <memp_free>
      break;
 800cb7a:	e019      	b.n	800cbb0 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	6892      	ldr	r2, [r2, #8]
 800cb84:	4610      	mov	r0, r2
 800cb86:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	2008      	movs	r0, #8
 800cb8e:	f003 fc83 	bl	8010498 <memp_free>
      break;
 800cb92:	e00d      	b.n	800cbb0 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	6892      	ldr	r2, [r2, #8]
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	4798      	blx	r3
      break;
 800cba0:	e006      	b.n	800cbb0 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cba2:	4b08      	ldr	r3, [pc, #32]	; (800cbc4 <tcpip_thread+0xc8>)
 800cba4:	229b      	movs	r2, #155	; 0x9b
 800cba6:	4908      	ldr	r1, [pc, #32]	; (800cbc8 <tcpip_thread+0xcc>)
 800cba8:	4808      	ldr	r0, [pc, #32]	; (800cbcc <tcpip_thread+0xd0>)
 800cbaa:	f00d fd6d 	bl	801a688 <iprintf>
      break;
 800cbae:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800cbb0:	e7b5      	b.n	800cb1e <tcpip_thread+0x22>
 800cbb2:	bf00      	nop
 800cbb4:	20004c5c 	.word	0x20004c5c
 800cbb8:	20004c60 	.word	0x20004c60
 800cbbc:	200087ac 	.word	0x200087ac
 800cbc0:	20004c64 	.word	0x20004c64
 800cbc4:	0801ba4c 	.word	0x0801ba4c
 800cbc8:	0801ba7c 	.word	0x0801ba7c
 800cbcc:	0801ba9c 	.word	0x0801ba9c

0800cbd0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800cbdc:	481a      	ldr	r0, [pc, #104]	; (800cc48 <tcpip_inpkt+0x78>)
 800cbde:	f00c fd9c 	bl	801971a <sys_mbox_valid>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d105      	bne.n	800cbf4 <tcpip_inpkt+0x24>
 800cbe8:	4b18      	ldr	r3, [pc, #96]	; (800cc4c <tcpip_inpkt+0x7c>)
 800cbea:	22b5      	movs	r2, #181	; 0xb5
 800cbec:	4918      	ldr	r1, [pc, #96]	; (800cc50 <tcpip_inpkt+0x80>)
 800cbee:	4819      	ldr	r0, [pc, #100]	; (800cc54 <tcpip_inpkt+0x84>)
 800cbf0:	f00d fd4a 	bl	801a688 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800cbf4:	2009      	movs	r0, #9
 800cbf6:	f003 fbfd 	bl	80103f4 <memp_malloc>
 800cbfa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d102      	bne.n	800cc08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800cc02:	f04f 33ff 	mov.w	r3, #4294967295
 800cc06:	e01a      	b.n	800cc3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800cc20:	6979      	ldr	r1, [r7, #20]
 800cc22:	4809      	ldr	r0, [pc, #36]	; (800cc48 <tcpip_inpkt+0x78>)
 800cc24:	f00c fd20 	bl	8019668 <sys_mbox_trypost>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d006      	beq.n	800cc3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cc2e:	6979      	ldr	r1, [r7, #20]
 800cc30:	2009      	movs	r0, #9
 800cc32:	f003 fc31 	bl	8010498 <memp_free>
    return ERR_MEM;
 800cc36:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3a:	e000      	b.n	800cc3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800cc3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3718      	adds	r7, #24
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	20004c64 	.word	0x20004c64
 800cc4c:	0801ba4c 	.word	0x0801ba4c
 800cc50:	0801bac4 	.word	0x0801bac4
 800cc54:	0801ba9c 	.word	0x0801ba9c

0800cc58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cc68:	f003 0318 	and.w	r3, r3, #24
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d006      	beq.n	800cc7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800cc70:	4a08      	ldr	r2, [pc, #32]	; (800cc94 <tcpip_input+0x3c>)
 800cc72:	6839      	ldr	r1, [r7, #0]
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff ffab 	bl	800cbd0 <tcpip_inpkt>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	e005      	b.n	800cc8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800cc7e:	4a06      	ldr	r2, [pc, #24]	; (800cc98 <tcpip_input+0x40>)
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7ff ffa4 	bl	800cbd0 <tcpip_inpkt>
 800cc88:	4603      	mov	r3, r0
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3708      	adds	r7, #8
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	0801943d 	.word	0x0801943d
 800cc98:	080183f9 	.word	0x080183f9

0800cc9c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	4613      	mov	r3, r2
 800cca8:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800ccaa:	481d      	ldr	r0, [pc, #116]	; (800cd20 <tcpip_callback_with_block+0x84>)
 800ccac:	f00c fd35 	bl	801971a <sys_mbox_valid>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d105      	bne.n	800ccc2 <tcpip_callback_with_block+0x26>
 800ccb6:	4b1b      	ldr	r3, [pc, #108]	; (800cd24 <tcpip_callback_with_block+0x88>)
 800ccb8:	22ee      	movs	r2, #238	; 0xee
 800ccba:	491b      	ldr	r1, [pc, #108]	; (800cd28 <tcpip_callback_with_block+0x8c>)
 800ccbc:	481b      	ldr	r0, [pc, #108]	; (800cd2c <tcpip_callback_with_block+0x90>)
 800ccbe:	f00d fce3 	bl	801a688 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ccc2:	2008      	movs	r0, #8
 800ccc4:	f003 fb96 	bl	80103f4 <memp_malloc>
 800ccc8:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d102      	bne.n	800ccd6 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800ccd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd4:	e01f      	b.n	800cd16 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	2203      	movs	r2, #3
 800ccda:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	609a      	str	r2, [r3, #8]
  if (block) {
 800cce8:	79fb      	ldrb	r3, [r7, #7]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d004      	beq.n	800ccf8 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800ccee:	6979      	ldr	r1, [r7, #20]
 800ccf0:	480b      	ldr	r0, [pc, #44]	; (800cd20 <tcpip_callback_with_block+0x84>)
 800ccf2:	f00c fca3 	bl	801963c <sys_mbox_post>
 800ccf6:	e00d      	b.n	800cd14 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800ccf8:	6979      	ldr	r1, [r7, #20]
 800ccfa:	4809      	ldr	r0, [pc, #36]	; (800cd20 <tcpip_callback_with_block+0x84>)
 800ccfc:	f00c fcb4 	bl	8019668 <sys_mbox_trypost>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d006      	beq.n	800cd14 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cd06:	6979      	ldr	r1, [r7, #20]
 800cd08:	2008      	movs	r0, #8
 800cd0a:	f003 fbc5 	bl	8010498 <memp_free>
      return ERR_MEM;
 800cd0e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd12:	e000      	b.n	800cd16 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20004c64 	.word	0x20004c64
 800cd24:	0801ba4c 	.word	0x0801ba4c
 800cd28:	0801bac4 	.word	0x0801bac4
 800cd2c:	0801ba9c 	.word	0x0801ba9c

0800cd30 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af02      	add	r7, sp, #8
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cd3a:	f002 ff93 	bl	800fc64 <lwip_init>

  tcpip_init_done = initfunc;
 800cd3e:	4a17      	ldr	r2, [pc, #92]	; (800cd9c <tcpip_init+0x6c>)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cd44:	4a16      	ldr	r2, [pc, #88]	; (800cda0 <tcpip_init+0x70>)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cd4a:	2106      	movs	r1, #6
 800cd4c:	4815      	ldr	r0, [pc, #84]	; (800cda4 <tcpip_init+0x74>)
 800cd4e:	f00c fc53 	bl	80195f8 <sys_mbox_new>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d006      	beq.n	800cd66 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cd58:	4b13      	ldr	r3, [pc, #76]	; (800cda8 <tcpip_init+0x78>)
 800cd5a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800cd5e:	4913      	ldr	r1, [pc, #76]	; (800cdac <tcpip_init+0x7c>)
 800cd60:	4813      	ldr	r0, [pc, #76]	; (800cdb0 <tcpip_init+0x80>)
 800cd62:	f00d fc91 	bl	801a688 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cd66:	4813      	ldr	r0, [pc, #76]	; (800cdb4 <tcpip_init+0x84>)
 800cd68:	f00c fcf6 	bl	8019758 <sys_mutex_new>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d006      	beq.n	800cd80 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cd72:	4b0d      	ldr	r3, [pc, #52]	; (800cda8 <tcpip_init+0x78>)
 800cd74:	f240 12d9 	movw	r2, #473	; 0x1d9
 800cd78:	490f      	ldr	r1, [pc, #60]	; (800cdb8 <tcpip_init+0x88>)
 800cd7a:	480d      	ldr	r0, [pc, #52]	; (800cdb0 <tcpip_init+0x80>)
 800cd7c:	f00d fc84 	bl	801a688 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cd80:	2300      	movs	r3, #0
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd88:	2200      	movs	r2, #0
 800cd8a:	490c      	ldr	r1, [pc, #48]	; (800cdbc <tcpip_init+0x8c>)
 800cd8c:	480c      	ldr	r0, [pc, #48]	; (800cdc0 <tcpip_init+0x90>)
 800cd8e:	f00c fd1b 	bl	80197c8 <sys_thread_new>
}
 800cd92:	bf00      	nop
 800cd94:	3708      	adds	r7, #8
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20004c5c 	.word	0x20004c5c
 800cda0:	20004c60 	.word	0x20004c60
 800cda4:	20004c64 	.word	0x20004c64
 800cda8:	0801ba4c 	.word	0x0801ba4c
 800cdac:	0801bad4 	.word	0x0801bad4
 800cdb0:	0801ba9c 	.word	0x0801ba9c
 800cdb4:	200087ac 	.word	0x200087ac
 800cdb8:	0801baf8 	.word	0x0801baf8
 800cdbc:	0800cafd 	.word	0x0800cafd
 800cdc0:	0801bb1c 	.word	0x0801bb1c

0800cdc4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <fs_open+0x16>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d102      	bne.n	800cde0 <fs_open+0x1c>
     return ERR_ARG;
 800cdda:	f06f 030f 	mvn.w	r3, #15
 800cdde:	e028      	b.n	800ce32 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800cde0:	4b16      	ldr	r3, [pc, #88]	; (800ce3c <fs_open+0x78>)
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e020      	b.n	800ce28 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	4619      	mov	r1, r3
 800cdec:	6838      	ldr	r0, [r7, #0]
 800cdee:	f7f3 f9ef 	bl	80001d0 <strcmp>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d114      	bne.n	800ce22 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	689a      	ldr	r2, [r3, #8]
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	68da      	ldr	r2, [r3, #12]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	68da      	ldr	r2, [r3, #12]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	7c1a      	ldrb	r2, [r3, #16]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e007      	b.n	800ce32 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1db      	bne.n	800cde6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ce2e:	f06f 0305 	mvn.w	r3, #5
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	0801eb78 	.word	0x0801eb78

0800ce40 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ce48:	bf00      	nop
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bc80      	pop	{r7}
 800ce50:	4770      	bx	lr

0800ce52 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ce52:	b480      	push	{r7}
 800ce54:	b083      	sub	sp, #12
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	685a      	ldr	r2, [r3, #4]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	1ad3      	subs	r3, r2, r3
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	370c      	adds	r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bc80      	pop	{r7}
 800ce6c:	4770      	bx	lr

0800ce6e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b082      	sub	sp, #8
 800ce72:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800ce74:	20dc      	movs	r0, #220	; 0xdc
 800ce76:	f003 f94d 	bl	8010114 <mem_malloc>
 800ce7a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d004      	beq.n	800ce8c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800ce82:	22dc      	movs	r2, #220	; 0xdc
 800ce84:	2100      	movs	r1, #0
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f00d fb1a 	bl	801a4c0 <memset>
  }
  return ret;
 800ce8c:	687b      	ldr	r3, [r7, #4]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b082      	sub	sp, #8
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f002 ffdd 	bl	800fe64 <mem_free>
  }
}
 800ceaa:	bf00      	nop
 800ceac:	3708      	adds	r7, #8
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b082      	sub	sp, #8
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ceba:	22b0      	movs	r2, #176	; 0xb0
 800cebc:	2100      	movs	r1, #0
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f00d fafe 	bl	801a4c0 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800cec4:	bf00      	nop
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ced2:	20b0      	movs	r0, #176	; 0xb0
 800ced4:	f003 f91e 	bl	8010114 <mem_malloc>
 800ced8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d002      	beq.n	800cee6 <http_state_alloc+0x1a>
    http_state_init(ret);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff ffe6 	bl	800ceb2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800cee6:	687b      	ldr	r3, [r7, #4]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	695b      	ldr	r3, [r3, #20]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d007      	beq.n	800cf10 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff ff9b 	bl	800ce40 <fs_close>
    hs->handle = NULL;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d007      	beq.n	800cf28 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7ff ffba 	bl	800ce96 <http_ssi_state_free>
    hs->ssi = NULL;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6a1b      	ldr	r3, [r3, #32]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f004 f869 	bl	801100c <pbuf_free>
    hs->req = NULL;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d005      	beq.n	800cf62 <http_state_free+0x1a>
    http_state_eof(hs);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff ffca 	bl	800cef0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f002 ff81 	bl	800fe64 <mem_free>
  }
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
	...

0800cf6c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b086      	sub	sp, #24
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d106      	bne.n	800cf8e <http_write+0x22>
 800cf80:	4b2c      	ldr	r3, [pc, #176]	; (800d034 <http_write+0xc8>)
 800cf82:	f44f 7204 	mov.w	r2, #528	; 0x210
 800cf86:	492c      	ldr	r1, [pc, #176]	; (800d038 <http_write+0xcc>)
 800cf88:	482c      	ldr	r0, [pc, #176]	; (800d03c <http_write+0xd0>)
 800cf8a:	f00d fb7d 	bl	801a688 <iprintf>
  len = *length;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800cf94:	8afb      	ldrh	r3, [r7, #22]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <http_write+0x32>
    return ERR_OK;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e045      	b.n	800d02a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfa4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800cfa6:	8aba      	ldrh	r2, [r7, #20]
 800cfa8:	8afb      	ldrh	r3, [r7, #22]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d201      	bcs.n	800cfb2 <http_write+0x46>
    len = max_len;
 800cfae:	8abb      	ldrh	r3, [r7, #20]
 800cfb0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800cfba:	8afa      	ldrh	r2, [r7, #22]
 800cfbc:	8abb      	ldrh	r3, [r7, #20]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d901      	bls.n	800cfc6 <http_write+0x5a>
    len = max_len;
 800cfc2:	8abb      	ldrh	r3, [r7, #20]
 800cfc4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800cfc6:	78fb      	ldrb	r3, [r7, #3]
 800cfc8:	8afa      	ldrh	r2, [r7, #22]
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f008 fc4d 	bl	801586c <tcp_write>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800cfd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfde:	d10f      	bne.n	800d000 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d004      	beq.n	800cff4 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 800cff0:	2b08      	cmp	r3, #8
 800cff2:	d902      	bls.n	800cffa <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 800cff4:	2301      	movs	r3, #1
 800cff6:	82fb      	strh	r3, [r7, #22]
 800cff8:	e002      	b.n	800d000 <http_write+0x94>
      } else {
        len /= 2;
 800cffa:	8afb      	ldrh	r3, [r7, #22]
 800cffc:	085b      	lsrs	r3, r3, #1
 800cffe:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800d000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d008:	d102      	bne.n	800d010 <http_write+0xa4>
 800d00a:	8afb      	ldrh	r3, [r7, #22]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d8da      	bhi.n	800cfc6 <http_write+0x5a>

  if (err == ERR_OK) {
 800d010:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d103      	bne.n	800d020 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	8afa      	ldrh	r2, [r7, #22]
 800d01c:	801a      	strh	r2, [r3, #0]
 800d01e:	e002      	b.n	800d026 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800d026:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	0801bb98 	.word	0x0801bb98
 800d038:	0801bbd0 	.word	0x0801bbd0
 800d03c:	0801bbe0 	.word	0x0801bbe0

0800d040 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	4613      	mov	r3, r2
 800d04c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800d04e:	2100      	movs	r1, #0
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f005 fdd3 	bl	8012bfc <tcp_arg>
  tcp_recv(pcb, NULL);
 800d056:	2100      	movs	r1, #0
 800d058:	68f8      	ldr	r0, [r7, #12]
 800d05a:	f005 fddf 	bl	8012c1c <tcp_recv>
  tcp_err(pcb, NULL);
 800d05e:	2100      	movs	r1, #0
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f005 fe1d 	bl	8012ca0 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800d066:	2200      	movs	r2, #0
 800d068:	2100      	movs	r1, #0
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f005 fe50 	bl	8012d10 <tcp_poll>
  tcp_sent(pcb, NULL);
 800d070:	2100      	movs	r1, #0
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f005 fdf4 	bl	8012c60 <tcp_sent>
  if (hs != NULL) {
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d002      	beq.n	800d084 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800d07e:	68b8      	ldr	r0, [r7, #8]
 800d080:	f7ff ff62 	bl	800cf48 <http_state_free>
  }

  if (abort_conn) {
 800d084:	79fb      	ldrb	r3, [r7, #7]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f004 fd22 	bl	8011ad4 <tcp_abort>
    return ERR_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	e00f      	b.n	800d0b4 <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f004 fc53 	bl	8011940 <tcp_close>
 800d09a:	4603      	mov	r3, r0
 800d09c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800d09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d004      	beq.n	800d0b0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d0a6:	2204      	movs	r2, #4
 800d0a8:	4904      	ldr	r1, [pc, #16]	; (800d0bc <http_close_or_abort_conn+0x7c>)
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f005 fe30 	bl	8012d10 <tcp_poll>
  }
  return err;
 800d0b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3718      	adds	r7, #24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	0800e09b 	.word	0x0800e09b

0800d0c0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7ff ffb6 	bl	800d040 <http_close_or_abort_conn>
 800d0d4:	4603      	mov	r3, r0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3708      	adds	r7, #8
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800d0e8:	6839      	ldr	r1, [r7, #0]
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff ffe8 	bl	800d0c0 <http_close_conn>
  }
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <extract_uri_parameters+0x18>
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <extract_uri_parameters+0x1c>
      return(0);
 800d110:	2300      	movs	r3, #0
 800d112:	e04b      	b.n	800d1ac <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800d118:	2300      	movs	r3, #0
 800d11a:	613b      	str	r3, [r7, #16]
 800d11c:	e03f      	b.n	800d19e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	320c      	adds	r2, #12
 800d124:	6979      	ldr	r1, [r7, #20]
 800d126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800d12e:	2126      	movs	r1, #38	; 0x26
 800d130:	6978      	ldr	r0, [r7, #20]
 800d132:	f00d fb9e 	bl	801a872 <strchr>
 800d136:	6178      	str	r0, [r7, #20]
    if(pair) {
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d006      	beq.n	800d14c <extract_uri_parameters+0x54>
      *pair = '\0';
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2200      	movs	r2, #0
 800d142:	701a      	strb	r2, [r3, #0]
      pair++;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	3301      	adds	r3, #1
 800d148:	617b      	str	r3, [r7, #20]
 800d14a:	e00c      	b.n	800d166 <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800d14c:	2120      	movs	r1, #32
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f00d fb8f 	bl	801a872 <strchr>
 800d154:	6178      	str	r0, [r7, #20]
        if(pair) {
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <extract_uri_parameters+0x6a>
            *pair = '\0';
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	2200      	movs	r2, #0
 800d160:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800d166:	213d      	movs	r1, #61	; 0x3d
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f00d fb82 	bl	801a872 <strchr>
 800d16e:	60f8      	str	r0, [r7, #12]
    if(equals) {
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00a      	beq.n	800d18c <extract_uri_parameters+0x94>
      *equals = '\0';
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	1c59      	adds	r1, r3, #1
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	321c      	adds	r2, #28
 800d186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800d18a:	e005      	b.n	800d198 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	693a      	ldr	r2, [r7, #16]
 800d190:	321c      	adds	r2, #28
 800d192:	2100      	movs	r1, #0
 800d194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	3301      	adds	r3, #1
 800d19c:	613b      	str	r3, [r7, #16]
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	2b0f      	cmp	r3, #15
 800d1a2:	dc02      	bgt.n	800d1aa <extract_uri_parameters+0xb2>
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1b9      	bne.n	800d11e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800d1aa:	693b      	ldr	r3, [r7, #16]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3718      	adds	r7, #24
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d106      	bne.n	800d1d0 <get_tag_insert+0x1c>
 800d1c2:	4b51      	ldr	r3, [pc, #324]	; (800d308 <get_tag_insert+0x154>)
 800d1c4:	f240 22fb 	movw	r2, #763	; 0x2fb
 800d1c8:	4950      	ldr	r1, [pc, #320]	; (800d30c <get_tag_insert+0x158>)
 800d1ca:	4851      	ldr	r0, [pc, #324]	; (800d310 <get_tag_insert+0x15c>)
 800d1cc:	f00d fa5c 	bl	801a688 <iprintf>
  ssi = hs->ssi;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d106      	bne.n	800d1ea <get_tag_insert+0x36>
 800d1dc:	4b4a      	ldr	r3, [pc, #296]	; (800d308 <get_tag_insert+0x154>)
 800d1de:	f240 22fd 	movw	r2, #765	; 0x2fd
 800d1e2:	494c      	ldr	r1, [pc, #304]	; (800d314 <get_tag_insert+0x160>)
 800d1e4:	484a      	ldr	r0, [pc, #296]	; (800d310 <get_tag_insert+0x15c>)
 800d1e6:	f00d fa4f 	bl	801a688 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 800d1ea:	4b4b      	ldr	r3, [pc, #300]	; (800d318 <get_tag_insert+0x164>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d02e      	beq.n	800d250 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 800d1f2:	4b4a      	ldr	r3, [pc, #296]	; (800d31c <get_tag_insert+0x168>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d02a      	beq.n	800d250 <get_tag_insert+0x9c>
 800d1fa:	4b49      	ldr	r3, [pc, #292]	; (800d320 <get_tag_insert+0x16c>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d026      	beq.n	800d250 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 800d202:	2300      	movs	r3, #0
 800d204:	617b      	str	r3, [r7, #20]
 800d206:	e01e      	b.n	800d246 <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	f103 0011 	add.w	r0, r3, #17
 800d20e:	4b43      	ldr	r3, [pc, #268]	; (800d31c <get_tag_insert+0x168>)
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	4413      	add	r3, r2
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4619      	mov	r1, r3
 800d21c:	f7f2 ffd8 	bl	80001d0 <strcmp>
 800d220:	4603      	mov	r3, r0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10c      	bne.n	800d240 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 800d226:	4b3c      	ldr	r3, [pc, #240]	; (800d318 <get_tag_insert+0x164>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	693a      	ldr	r2, [r7, #16]
 800d22c:	f102 011a 	add.w	r1, r2, #26
 800d230:	22c0      	movs	r2, #192	; 0xc0
 800d232:	6978      	ldr	r0, [r7, #20]
 800d234:	4798      	blx	r3
 800d236:	4603      	mov	r3, r0
 800d238:	461a      	mov	r2, r3
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800d23e:	e060      	b.n	800d302 <get_tag_insert+0x14e>
    for(tag = 0; tag < g_iNumTags; tag++) {
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	3301      	adds	r3, #1
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	4b36      	ldr	r3, [pc, #216]	; (800d320 <get_tag_insert+0x16c>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	dbdb      	blt.n	800d208 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	3311      	adds	r3, #17
 800d254:	4618      	mov	r0, r3
 800d256:	f7f2 ffc5 	bl	80001e4 <strlen>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2ba6      	cmp	r3, #166	; 0xa6
 800d25e:	d818      	bhi.n	800d292 <get_tag_insert+0xde>
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	3311      	adds	r3, #17
 800d264:	4618      	mov	r0, r3
 800d266:	f7f2 ffbd 	bl	80001e4 <strlen>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b09      	cmp	r3, #9
 800d26e:	d810      	bhi.n	800d292 <get_tag_insert+0xde>
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	3311      	adds	r3, #17
 800d274:	4618      	mov	r0, r3
 800d276:	f7f2 ffb5 	bl	80001e4 <strlen>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2ba6      	cmp	r3, #166	; 0xa6
 800d27e:	d806      	bhi.n	800d28e <get_tag_insert+0xda>
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	3311      	adds	r3, #17
 800d284:	4618      	mov	r0, r3
 800d286:	f7f2 ffad 	bl	80001e4 <strlen>
 800d28a:	4603      	mov	r3, r0
 800d28c:	e002      	b.n	800d294 <get_tag_insert+0xe0>
 800d28e:	23a7      	movs	r3, #167	; 0xa7
 800d290:	e000      	b.n	800d294 <get_tag_insert+0xe0>
 800d292:	2309      	movs	r3, #9
 800d294:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	331a      	adds	r3, #26
 800d29a:	2212      	movs	r2, #18
 800d29c:	4921      	ldr	r1, [pc, #132]	; (800d324 <get_tag_insert+0x170>)
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f00d f900 	bl	801a4a4 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	3311      	adds	r3, #17
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	f00d f8f7 	bl	801a4a4 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3312      	adds	r3, #18
 800d2ba:	3318      	adds	r3, #24
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	4413      	add	r3, r2
 800d2c0:	3302      	adds	r3, #2
 800d2c2:	2207      	movs	r2, #7
 800d2c4:	4918      	ldr	r1, [pc, #96]	; (800d328 <get_tag_insert+0x174>)
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f00d f8ec 	bl	801a4a4 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3319      	adds	r3, #25
 800d2d0:	693a      	ldr	r2, [r7, #16]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	769a      	strb	r2, [r3, #26]

  len = strlen(ssi->tag_insert);
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	331a      	adds	r3, #26
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7f2 ff81 	bl	80001e4 <strlen>
 800d2e2:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ea:	d306      	bcc.n	800d2fa <get_tag_insert+0x146>
 800d2ec:	4b06      	ldr	r3, [pc, #24]	; (800d308 <get_tag_insert+0x154>)
 800d2ee:	f240 3236 	movw	r2, #822	; 0x336
 800d2f2:	490e      	ldr	r1, [pc, #56]	; (800d32c <get_tag_insert+0x178>)
 800d2f4:	4806      	ldr	r0, [pc, #24]	; (800d310 <get_tag_insert+0x15c>)
 800d2f6:	f00d f9c7 	bl	801a688 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	81da      	strh	r2, [r3, #14]
}
 800d302:	3718      	adds	r7, #24
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	0801bb98 	.word	0x0801bb98
 800d30c:	0801bc08 	.word	0x0801bc08
 800d310:	0801bbe0 	.word	0x0801bbe0
 800d314:	0801bc14 	.word	0x0801bc14
 800d318:	200087b4 	.word	0x200087b4
 800d31c:	200087c4 	.word	0x200087c4
 800d320:	200087bc 	.word	0x200087bc
 800d324:	0801bc20 	.word	0x0801bc20
 800d328:	0801bc34 	.word	0x0801bc34
 800d32c:	0801bc3c 	.word	0x0801bc3c

0800d330 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d105      	bne.n	800d34e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800d342:	6839      	ldr	r1, [r7, #0]
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff feca 	bl	800d0de <http_eof>
    return 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	e016      	b.n	800d37c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	4618      	mov	r0, r3
 800d354:	f7ff fd7d 	bl	800ce52 <fs_bytes_left>
 800d358:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dc05      	bgt.n	800d36c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7ff febb 	bl	800d0de <http_eof>
    return 0;
 800d368:	2300      	movs	r3, #0
 800d36a:	e007      	b.n	800d37c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800d36c:	4b05      	ldr	r3, [pc, #20]	; (800d384 <http_check_eof+0x54>)
 800d36e:	f240 4283 	movw	r2, #1155	; 0x483
 800d372:	4905      	ldr	r1, [pc, #20]	; (800d388 <http_check_eof+0x58>)
 800d374:	4805      	ldr	r0, [pc, #20]	; (800d38c <http_check_eof+0x5c>)
 800d376:	f00d f987 	bl	801a688 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800d37a:	2301      	movs	r3, #1
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	0801bb98 	.word	0x0801bb98
 800d388:	0801bc4c 	.word	0x0801bc4c
 800d38c:	0801bbe0 	.word	0x0801bbe0

0800d390 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d803      	bhi.n	800d3b2 <http_send_data_nonssi+0x22>
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	e001      	b.n	800d3b6 <http_send_data_nonssi+0x26>
 800d3b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3b6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	6999      	ldr	r1, [r3, #24]
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	bf14      	ite	ne
 800d3c4:	2301      	movne	r3, #1
 800d3c6:	2300      	moveq	r3, #0
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f107 020c 	add.w	r2, r7, #12
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7ff fdcc 	bl	800cf6c <http_write>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800d3d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d10d      	bne.n	800d3fc <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	89ba      	ldrh	r2, [r7, #12]
 800d3ea:	441a      	add	r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	89ba      	ldrh	r2, [r7, #12]
 800d3f6:	1a9a      	subs	r2, r3, r2
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3710      	adds	r7, #16
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}
	...

0800d408 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d106      	bne.n	800d434 <http_send_data_ssi+0x2c>
 800d426:	4b8e      	ldr	r3, [pc, #568]	; (800d660 <http_send_data_ssi+0x258>)
 800d428:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800d42c:	498d      	ldr	r1, [pc, #564]	; (800d664 <http_send_data_ssi+0x25c>)
 800d42e:	488e      	ldr	r0, [pc, #568]	; (800d668 <http_send_data_ssi+0x260>)
 800d430:	f00d f92a 	bl	801a688 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d43a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	429a      	cmp	r2, r3
 800d446:	f240 8249 	bls.w	800d8dc <http_send_data_ssi+0x4d4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	699b      	ldr	r3, [r3, #24]
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d458:	4293      	cmp	r3, r2
 800d45a:	dc06      	bgt.n	800d46a <http_send_data_ssi+0x62>
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	699b      	ldr	r3, [r3, #24]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	b29b      	uxth	r3, r3
 800d468:	e001      	b.n	800d46e <http_send_data_ssi+0x66>
 800d46a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d46e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	6999      	ldr	r1, [r3, #24]
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	2b00      	cmp	r3, #0
 800d47a:	bf14      	ite	ne
 800d47c:	2301      	movne	r3, #1
 800d47e:	2300      	moveq	r3, #0
 800d480:	b2db      	uxtb	r3, r3
 800d482:	f107 020e 	add.w	r2, r7, #14
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff fd70 	bl	800cf6c <http_write>
 800d48c:	4603      	mov	r3, r0
 800d48e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800d490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10d      	bne.n	800d4b4 <http_send_data_ssi+0xac>
      data_to_send = 1;
 800d498:	2301      	movs	r3, #1
 800d49a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	699b      	ldr	r3, [r3, #24]
 800d4a0:	89fa      	ldrh	r2, [r7, #14]
 800d4a2:	441a      	add	r2, r3
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	89fa      	ldrh	r2, [r7, #14]
 800d4ae:	1a9a      	subs	r2, r3, r2
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f040 820e 	bne.w	800d8dc <http_send_data_ssi+0x4d4>
      return data_to_send;
 800d4c0:	7dbb      	ldrb	r3, [r7, #22]
 800d4c2:	e257      	b.n	800d974 <http_send_data_ssi+0x56c>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800d4c4:	89fb      	ldrh	r3, [r7, #14]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d101      	bne.n	800d4ce <http_send_data_ssi+0xc6>
      return data_to_send;
 800d4ca:	7dbb      	ldrb	r3, [r7, #22]
 800d4cc:	e252      	b.n	800d974 <http_send_data_ssi+0x56c>
    }
    switch(ssi->tag_state) {
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800d4d4:	2b04      	cmp	r3, #4
 800d4d6:	f200 8200 	bhi.w	800d8da <http_send_data_ssi+0x4d2>
 800d4da:	a201      	add	r2, pc, #4	; (adr r2, 800d4e0 <http_send_data_ssi+0xd8>)
 800d4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e0:	0800d4f5 	.word	0x0800d4f5
 800d4e4:	0800d527 	.word	0x0800d527
 800d4e8:	0800d57f 	.word	0x0800d57f
 800d4ec:	0800d6bb 	.word	0x0800d6bb
 800d4f0:	0800d7f5 	.word	0x0800d7f5
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	781a      	ldrb	r2, [r3, #0]
 800d4fa:	4b5c      	ldr	r3, [pc, #368]	; (800d66c <http_send_data_ssi+0x264>)
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d106      	bne.n	800d510 <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          ssi->tag_index = 1;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	2201      	movs	r2, #1
 800d50e:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	1e5a      	subs	r2, r3, #1
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	601a      	str	r2, [r3, #0]
        break;
 800d524:	e1da      	b.n	800d8dc <http_send_data_ssi+0x4d4>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	899b      	ldrh	r3, [r3, #12]
 800d52a:	2b05      	cmp	r3, #5
 800d52c:	d107      	bne.n	800d53e <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	2200      	movs	r2, #0
 800d532:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	2202      	movs	r2, #2
 800d538:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 800d53c:	e1ce      	b.n	800d8dc <http_send_data_ssi+0x4d4>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	781a      	ldrb	r2, [r3, #0]
 800d544:	4949      	ldr	r1, [pc, #292]	; (800d66c <http_send_data_ssi+0x264>)
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	899b      	ldrh	r3, [r3, #12]
 800d54a:	440b      	add	r3, r1
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d106      	bne.n	800d560 <http_send_data_ssi+0x158>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	899b      	ldrh	r3, [r3, #12]
 800d556:	3301      	adds	r3, #1
 800d558:	b29a      	uxth	r2, r3
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	819a      	strh	r2, [r3, #12]
 800d55e:	e003      	b.n	800d568 <http_send_data_ssi+0x160>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	1e5a      	subs	r2, r3, #1
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	1c5a      	adds	r2, r3, #1
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	601a      	str	r2, [r3, #0]
        }
        break;
 800d57c:	e1ae      	b.n	800d8dc <http_send_data_ssi+0x4d4>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	899b      	ldrh	r3, [r3, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d11e      	bne.n	800d5c4 <http_send_data_ssi+0x1bc>
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	2b20      	cmp	r3, #32
 800d58e:	d00e      	beq.n	800d5ae <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d596:	2b09      	cmp	r3, #9
 800d598:	d009      	beq.n	800d5ae <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b0a      	cmp	r3, #10
 800d5a2:	d004      	beq.n	800d5ae <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d5aa:	2b0d      	cmp	r3, #13
 800d5ac:	d10a      	bne.n	800d5c4 <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	1e5a      	subs	r2, r3, #1
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	601a      	str	r2, [r3, #0]
          break;
 800d5c2:	e18b      	b.n	800d8dc <http_send_data_ssi+0x4d4>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	781a      	ldrb	r2, [r3, #0]
 800d5ca:	4b29      	ldr	r3, [pc, #164]	; (800d670 <http_send_data_ssi+0x268>)
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d013      	beq.n	800d5fa <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 800d5d8:	2b20      	cmp	r3, #32
 800d5da:	d00e      	beq.n	800d5fa <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	2b09      	cmp	r3, #9
 800d5e4:	d009      	beq.n	800d5fa <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800d5ec:	2b0a      	cmp	r3, #10
 800d5ee:	d004      	beq.n	800d5fa <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b0d      	cmp	r3, #13
 800d5f8:	d13e      	bne.n	800d678 <http_send_data_ssi+0x270>

          if(ssi->tag_index == 0) {
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	899b      	ldrh	r3, [r3, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d104      	bne.n	800d60c <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	2200      	movs	r2, #0
 800d606:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          if(ssi->tag_index == 0) {
 800d60a:	e04b      	b.n	800d6a4 <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	2203      	movs	r2, #3
 800d610:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	899b      	ldrh	r3, [r3, #12]
 800d618:	2bff      	cmp	r3, #255	; 0xff
 800d61a:	d906      	bls.n	800d62a <http_send_data_ssi+0x222>
 800d61c:	4b10      	ldr	r3, [pc, #64]	; (800d660 <http_send_data_ssi+0x258>)
 800d61e:	f240 521b 	movw	r2, #1307	; 0x51b
 800d622:	4914      	ldr	r1, [pc, #80]	; (800d674 <http_send_data_ssi+0x26c>)
 800d624:	4810      	ldr	r0, [pc, #64]	; (800d668 <http_send_data_ssi+0x260>)
 800d626:	f00d f82f 	bl	801a688 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	899b      	ldrh	r3, [r3, #12]
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	899b      	ldrh	r3, [r3, #12]
 800d638:	461a      	mov	r2, r3
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	4413      	add	r3, r2
 800d63e:	2200      	movs	r2, #0
 800d640:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	781a      	ldrb	r2, [r3, #0]
 800d648:	4b09      	ldr	r3, [pc, #36]	; (800d670 <http_send_data_ssi+0x268>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d103      	bne.n	800d658 <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2201      	movs	r2, #1
 800d654:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800d656:	e025      	b.n	800d6a4 <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	2200      	movs	r2, #0
 800d65c:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800d65e:	e021      	b.n	800d6a4 <http_send_data_ssi+0x29c>
 800d660:	0801bb98 	.word	0x0801bb98
 800d664:	0801bc14 	.word	0x0801bc14
 800d668:	0801bbe0 	.word	0x0801bbe0
 800d66c:	0801bb8c 	.word	0x0801bb8c
 800d670:	0801bb94 	.word	0x0801bb94
 800d674:	0801bc84 	.word	0x0801bc84
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	899b      	ldrh	r3, [r3, #12]
 800d67c:	2b07      	cmp	r3, #7
 800d67e:	d80d      	bhi.n	800d69c <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	899b      	ldrh	r3, [r3, #12]
 800d688:	1c59      	adds	r1, r3, #1
 800d68a:	b288      	uxth	r0, r1
 800d68c:	6939      	ldr	r1, [r7, #16]
 800d68e:	8188      	strh	r0, [r1, #12]
 800d690:	4619      	mov	r1, r3
 800d692:	7812      	ldrb	r2, [r2, #0]
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	440b      	add	r3, r1
 800d698:	745a      	strb	r2, [r3, #17]
 800d69a:	e003      	b.n	800d6a4 <http_send_data_ssi+0x29c>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	1e5a      	subs	r2, r3, #1
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	601a      	str	r2, [r3, #0]

        break;
 800d6b8:	e110      	b.n	800d8dc <http_send_data_ssi+0x4d4>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	899b      	ldrh	r3, [r3, #12]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d11e      	bne.n	800d700 <http_send_data_ssi+0x2f8>
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b20      	cmp	r3, #32
 800d6ca:	d00e      	beq.n	800d6ea <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800d6d2:	2b09      	cmp	r3, #9
 800d6d4:	d009      	beq.n	800d6ea <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b0a      	cmp	r3, #10
 800d6de:	d004      	beq.n	800d6ea <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800d6e6:	2b0d      	cmp	r3, #13
 800d6e8:	d10a      	bne.n	800d700 <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	1e5a      	subs	r2, r3, #1
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	601a      	str	r2, [r3, #0]
          break;
 800d6fe:	e0ed      	b.n	800d8dc <http_send_data_ssi+0x4d4>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	781a      	ldrb	r2, [r3, #0]
 800d706:	4987      	ldr	r1, [pc, #540]	; (800d924 <http_send_data_ssi+0x51c>)
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	899b      	ldrh	r3, [r3, #12]
 800d70c:	440b      	add	r3, r1
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	429a      	cmp	r2, r3
 800d712:	d160      	bne.n	800d7d6 <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	1e5a      	subs	r2, r3, #1
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	1c5a      	adds	r2, r3, #1
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	899b      	ldrh	r3, [r3, #12]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d14b      	bne.n	800d7c8 <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800d730:	6838      	ldr	r0, [r7, #0]
 800d732:	f7ff fd3f 	bl	800d1b4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	2200      	movs	r2, #0
 800d73a:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2204      	movs	r2, #4
 800d740:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
            ssi->tag_end = ssi->parsed;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	685a      	ldr	r2, [r3, #4]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	429a      	cmp	r2, r3
 800d756:	f240 80c1 	bls.w	800d8dc <http_send_data_ssi+0x4d4>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	685a      	ldr	r2, [r3, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d768:	4293      	cmp	r3, r2
 800d76a:	dc06      	bgt.n	800d77a <http_send_data_ssi+0x372>
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	699b      	ldr	r3, [r3, #24]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	b29b      	uxth	r3, r3
 800d778:	e001      	b.n	800d77e <http_send_data_ssi+0x376>
 800d77a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d77e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	6999      	ldr	r1, [r3, #24]
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d788:	2b00      	cmp	r3, #0
 800d78a:	bf14      	ite	ne
 800d78c:	2301      	movne	r3, #1
 800d78e:	2300      	moveq	r3, #0
 800d790:	b2db      	uxtb	r3, r3
 800d792:	f107 020e 	add.w	r2, r7, #14
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fbe8 	bl	800cf6c <http_write>
 800d79c:	4603      	mov	r3, r0
 800d79e:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800d7a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	f040 8099 	bne.w	800d8dc <http_send_data_ssi+0x4d4>
                data_to_send = 1;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	89fa      	ldrh	r2, [r7, #14]
 800d7b4:	441a      	add	r2, r3
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7be:	89fa      	ldrh	r2, [r7, #14]
 800d7c0:	1a9a      	subs	r2, r3, r2
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	625a      	str	r2, [r3, #36]	; 0x24
 800d7c6:	e089      	b.n	800d8dc <http_send_data_ssi+0x4d4>
              }
            }
          } else {
            ssi->tag_index++;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	899b      	ldrh	r3, [r3, #12]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	819a      	strh	r2, [r3, #12]
 800d7d4:	e082      	b.n	800d8dc <http_send_data_ssi+0x4d4>
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	1e5a      	subs	r2, r3, #1
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	1c5a      	adds	r2, r3, #1
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
        }
        break;
 800d7f2:	e073      	b.n	800d8dc <http_send_data_ssi+0x4d4>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	685a      	ldr	r2, [r3, #4]
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d93b      	bls.n	800d878 <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	699b      	ldr	r3, [r3, #24]
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d80e:	4293      	cmp	r3, r2
 800d810:	dc06      	bgt.n	800d820 <http_send_data_ssi+0x418>
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	699b      	ldr	r3, [r3, #24]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	e001      	b.n	800d824 <http_send_data_ssi+0x41c>
 800d820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d824:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800d826:	89fb      	ldrh	r3, [r7, #14]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d010      	beq.n	800d84e <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	6999      	ldr	r1, [r3, #24]
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	2b00      	cmp	r3, #0
 800d836:	bf14      	ite	ne
 800d838:	2301      	movne	r3, #1
 800d83a:	2300      	moveq	r3, #0
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	f107 020e 	add.w	r2, r7, #14
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f7ff fb92 	bl	800cf6c <http_write>
 800d848:	4603      	mov	r3, r0
 800d84a:	75fb      	strb	r3, [r7, #23]
 800d84c:	e001      	b.n	800d852 <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800d852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d140      	bne.n	800d8dc <http_send_data_ssi+0x4d4>
            data_to_send = 1;
 800d85a:	2301      	movs	r3, #1
 800d85c:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	699b      	ldr	r3, [r3, #24]
 800d862:	89fa      	ldrh	r2, [r7, #14]
 800d864:	441a      	add	r2, r3
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86e:	89fa      	ldrh	r2, [r7, #14]
 800d870:	1a9a      	subs	r2, r3, r2
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	625a      	str	r2, [r3, #36]	; 0x24
 800d876:	e031      	b.n	800d8dc <http_send_data_ssi+0x4d4>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	899a      	ldrh	r2, [r3, #12]
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	89db      	ldrh	r3, [r3, #14]
 800d880:	429a      	cmp	r2, r3
 800d882:	d222      	bcs.n	800d8ca <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	89da      	ldrh	r2, [r3, #14]
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	899b      	ldrh	r3, [r3, #12]
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	b29b      	uxth	r3, r3
 800d890:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	899b      	ldrh	r3, [r3, #12]
 800d896:	3318      	adds	r3, #24
 800d898:	693a      	ldr	r2, [r7, #16]
 800d89a:	4413      	add	r3, r2
 800d89c:	1c99      	adds	r1, r3, #2
 800d89e:	f107 020e 	add.w	r2, r7, #14
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff fb61 	bl	800cf6c <http_write>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800d8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d112      	bne.n	800d8dc <http_send_data_ssi+0x4d4>
              data_to_send = 1;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	899a      	ldrh	r2, [r3, #12]
 800d8be:	89fb      	ldrh	r3, [r7, #14]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	819a      	strh	r2, [r3, #12]
 800d8c8:	e008      	b.n	800d8dc <http_send_data_ssi+0x4d4>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800d8d8:	e000      	b.n	800d8dc <http_send_data_ssi+0x4d4>
        default:
          break;
 800d8da:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d004      	beq.n	800d8ee <http_send_data_ssi+0x4e6>
 800d8e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f43f adeb 	beq.w	800d4c4 <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800d8f4:	2b04      	cmp	r3, #4
 800d8f6:	d03c      	beq.n	800d972 <http_send_data_ssi+0x56a>
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	429a      	cmp	r2, r3
 800d902:	d936      	bls.n	800d972 <http_send_data_ssi+0x56a>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d912:	4293      	cmp	r3, r2
 800d914:	dc08      	bgt.n	800d928 <http_send_data_ssi+0x520>
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	699b      	ldr	r3, [r3, #24]
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	b29b      	uxth	r3, r3
 800d922:	e003      	b.n	800d92c <http_send_data_ssi+0x524>
 800d924:	0801bb94 	.word	0x0801bb94
 800d928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d92c:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	6999      	ldr	r1, [r3, #24]
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d936:	2b00      	cmp	r3, #0
 800d938:	bf14      	ite	ne
 800d93a:	2301      	movne	r3, #1
 800d93c:	2300      	moveq	r3, #0
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f107 020e 	add.w	r2, r7, #14
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f7ff fb11 	bl	800cf6c <http_write>
 800d94a:	4603      	mov	r3, r0
 800d94c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800d94e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10d      	bne.n	800d972 <http_send_data_ssi+0x56a>
      data_to_send = 1;
 800d956:	2301      	movs	r3, #1
 800d958:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	89fa      	ldrh	r2, [r7, #14]
 800d960:	441a      	add	r2, r3
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96a:	89fa      	ldrh	r2, [r7, #14]
 800d96c:	1a9a      	subs	r2, r3, r2
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800d972:	7dbb      	ldrb	r3, [r7, #22]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800d986:	2300      	movs	r3, #0
 800d988:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <http_send+0x18>
    return 0;
 800d990:	2300      	movs	r3, #0
 800d992:	e030      	b.n	800d9f6 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d108      	bne.n	800d9ae <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff fcc6 	bl	800d330 <http_check_eof>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <http_send+0x32>
      return 0;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	e023      	b.n	800d9f6 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d006      	beq.n	800d9c4 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff fd25 	bl	800d408 <http_send_data_ssi>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	73fb      	strb	r3, [r7, #15]
 800d9c2:	e005      	b.n	800d9d0 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7ff fce2 	bl	800d390 <http_send_data_nonssi>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10d      	bne.n	800d9f4 <http_send+0x78>
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fa38 	bl	800ce52 <fs_bytes_left>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	dc05      	bgt.n	800d9f4 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f7ff fb77 	bl	800d0de <http_eof>
    return 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	e000      	b.n	800d9f6 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	4a1c      	ldr	r2, [pc, #112]	; (800da80 <http_get_404_file+0x80>)
 800da0e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4619      	mov	r1, r3
 800da18:	4610      	mov	r0, r2
 800da1a:	f7ff f9d3 	bl	800cdc4 <fs_open>
 800da1e:	4603      	mov	r3, r0
 800da20:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800da22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d024      	beq.n	800da74 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	4a15      	ldr	r2, [pc, #84]	; (800da84 <http_get_404_file+0x84>)
 800da2e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4619      	mov	r1, r3
 800da38:	4610      	mov	r0, r2
 800da3a:	f7ff f9c3 	bl	800cdc4 <fs_open>
 800da3e:	4603      	mov	r3, r0
 800da40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800da42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d014      	beq.n	800da74 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	4a0e      	ldr	r2, [pc, #56]	; (800da88 <http_get_404_file+0x88>)
 800da4e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4619      	mov	r1, r3
 800da58:	4610      	mov	r0, r2
 800da5a:	f7ff f9b3 	bl	800cdc4 <fs_open>
 800da5e:	4603      	mov	r3, r0
 800da60:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800da62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d004      	beq.n	800da74 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2200      	movs	r2, #0
 800da6e:	601a      	str	r2, [r3, #0]
        return NULL;
 800da70:	2300      	movs	r3, #0
 800da72:	e000      	b.n	800da76 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800da74:	687b      	ldr	r3, [r7, #4]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	0801bc9c 	.word	0x0801bc9c
 800da84:	0801bca8 	.word	0x0801bca8
 800da88:	0801bcb4 	.word	0x0801bcb4

0800da8c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08e      	sub	sp, #56	; 0x38
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d106      	bne.n	800dab0 <http_parse_request+0x24>
 800daa2:	4b65      	ldr	r3, [pc, #404]	; (800dc38 <http_parse_request+0x1ac>)
 800daa4:	f240 727e 	movw	r2, #1918	; 0x77e
 800daa8:	4964      	ldr	r1, [pc, #400]	; (800dc3c <http_parse_request+0x1b0>)
 800daaa:	4865      	ldr	r0, [pc, #404]	; (800dc40 <http_parse_request+0x1b4>)
 800daac:	f00c fdec 	bl	801a688 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d106      	bne.n	800dac4 <http_parse_request+0x38>
 800dab6:	4b60      	ldr	r3, [pc, #384]	; (800dc38 <http_parse_request+0x1ac>)
 800dab8:	f240 727f 	movw	r2, #1919	; 0x77f
 800dabc:	4961      	ldr	r1, [pc, #388]	; (800dc44 <http_parse_request+0x1b8>)
 800dabe:	4860      	ldr	r0, [pc, #384]	; (800dc40 <http_parse_request+0x1b4>)
 800dac0:	f00c fde2 	bl	801a688 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	695b      	ldr	r3, [r3, #20]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d103      	bne.n	800dad4 <http_parse_request+0x48>
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	699b      	ldr	r3, [r3, #24]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800dad4:	f06f 0307 	mvn.w	r3, #7
 800dad8:	e0a9      	b.n	800dc2e <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	6a1b      	ldr	r3, [r3, #32]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d103      	bne.n	800daea <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae6:	621a      	str	r2, [r3, #32]
 800dae8:	e005      	b.n	800daf6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6a1b      	ldr	r3, [r3, #32]
 800daee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daf0:	4618      	mov	r0, r3
 800daf2:	f003 fb63 	bl	80111bc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800daf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800daf8:	f003 fb38 	bl	801116c <pbuf_ref>

  if (hs->req->next != NULL) {
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	6a1b      	ldr	r3, [r3, #32]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d012      	beq.n	800db2c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	891b      	ldrh	r3, [r3, #8]
 800db0c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800db10:	4293      	cmp	r3, r2
 800db12:	bf28      	it	cs
 800db14:	4613      	movcs	r3, r2
 800db16:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	6a18      	ldr	r0, [r3, #32]
 800db1c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800db1e:	2300      	movs	r3, #0
 800db20:	4949      	ldr	r1, [pc, #292]	; (800dc48 <http_parse_request+0x1bc>)
 800db22:	f003 fc6d 	bl	8011400 <pbuf_copy_partial>
    data = httpd_req_buf;
 800db26:	4b48      	ldr	r3, [pc, #288]	; (800dc48 <http_parse_request+0x1bc>)
 800db28:	637b      	str	r3, [r7, #52]	; 0x34
 800db2a:	e005      	b.n	800db38 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	895b      	ldrh	r3, [r3, #10]
 800db36:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800db38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800db3a:	2b06      	cmp	r3, #6
 800db3c:	d962      	bls.n	800dc04 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800db3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800db40:	461a      	mov	r2, r3
 800db42:	4942      	ldr	r1, [pc, #264]	; (800dc4c <http_parse_request+0x1c0>)
 800db44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db46:	f002 f824 	bl	800fb92 <lwip_strnstr>
 800db4a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800db4c:	6a3b      	ldr	r3, [r7, #32]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d058      	beq.n	800dc04 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800db52:	2300      	movs	r3, #0
 800db54:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800db56:	2204      	movs	r2, #4
 800db58:	493d      	ldr	r1, [pc, #244]	; (800dc50 <http_parse_request+0x1c4>)
 800db5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db5c:	f00c fe9e 	bl	801a89c <strncmp>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d116      	bne.n	800db94 <http_parse_request+0x108>
        sp1 = data + 3;
 800db66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db68:	3303      	adds	r3, #3
 800db6a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	b29b      	uxth	r3, r3
 800db76:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	3301      	adds	r3, #1
 800db80:	8b7a      	ldrh	r2, [r7, #26]
 800db82:	4934      	ldr	r1, [pc, #208]	; (800dc54 <http_parse_request+0x1c8>)
 800db84:	4618      	mov	r0, r3
 800db86:	f002 f804 	bl	800fb92 <lwip_strnstr>
 800db8a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d111      	bne.n	800dbb6 <http_parse_request+0x12a>
 800db92:	e006      	b.n	800dba2 <http_parse_request+0x116>
        data[4] = 0;
 800db94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db96:	3304      	adds	r3, #4
 800db98:	2200      	movs	r2, #0
 800db9a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800db9c:	f06f 030f 	mvn.w	r3, #15
 800dba0:	e045      	b.n	800dc2e <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	3301      	adds	r3, #1
 800dba6:	8b7a      	ldrh	r2, [r7, #26]
 800dba8:	4928      	ldr	r1, [pc, #160]	; (800dc4c <http_parse_request+0x1c0>)
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f001 fff1 	bl	800fb92 <lwip_strnstr>
 800dbb0:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbbc:	1ad3      	subs	r3, r2, r3
 800dbbe:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d01e      	beq.n	800dc04 <http_parse_request+0x178>
 800dbc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d91a      	bls.n	800dc04 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800dbce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	4921      	ldr	r1, [pc, #132]	; (800dc58 <http_parse_request+0x1cc>)
 800dbd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dbd6:	f001 ffdc 	bl	800fb92 <lwip_strnstr>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d011      	beq.n	800dc04 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800dbec:	8b3b      	ldrh	r3, [r7, #24]
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800dbf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbf8:	6979      	ldr	r1, [r7, #20]
 800dbfa:	68b8      	ldr	r0, [r7, #8]
 800dbfc:	f000 f82e 	bl	800dc5c <http_find_file>
 800dc00:	4603      	mov	r3, r0
 800dc02:	e014      	b.n	800dc2e <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	6a1b      	ldr	r3, [r3, #32]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f003 fa99 	bl	8011140 <pbuf_clen>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	6a1b      	ldr	r3, [r3, #32]
 800dc16:	891b      	ldrh	r3, [r3, #8]
 800dc18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc1c:	d205      	bcs.n	800dc2a <http_parse_request+0x19e>
 800dc1e:	8a7b      	ldrh	r3, [r7, #18]
 800dc20:	2b05      	cmp	r3, #5
 800dc22:	d802      	bhi.n	800dc2a <http_parse_request+0x19e>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800dc24:	f06f 0304 	mvn.w	r3, #4
 800dc28:	e001      	b.n	800dc2e <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800dc2a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3738      	adds	r7, #56	; 0x38
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	0801bb98 	.word	0x0801bb98
 800dc3c:	0801bcc0 	.word	0x0801bcc0
 800dc40:	0801bbe0 	.word	0x0801bbe0
 800dc44:	0801bc08 	.word	0x0801bc08
 800dc48:	20004c68 	.word	0x20004c68
 800dc4c:	0801bccc 	.word	0x0801bccc
 800dc50:	0801bcd0 	.word	0x0801bcd0
 800dc54:	0801bcd8 	.word	0x0801bcd8
 800dc58:	0801bcdc 	.word	0x0801bcdc

0800dc5c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800dc5c:	b590      	push	{r4, r7, lr}
 800dc5e:	b097      	sub	sp, #92	; 0x5c
 800dc60:	af02      	add	r7, sp, #8
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	64bb      	str	r3, [r7, #72]	; 0x48
  char *params = NULL;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800dc70:	2300      	movs	r3, #0
 800dc72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7f2 fab3 	bl	80001e4 <strlen>
 800dc7e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d06c      	beq.n	800dd60 <http_find_file+0x104>
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	4413      	add	r3, r2
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	2b2f      	cmp	r3, #47	; 0x2f
 800dc92:	d165      	bne.n	800dd60 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800dc94:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 800dc96:	4a97      	ldr	r2, [pc, #604]	; (800def4 <http_find_file+0x298>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d102      	bne.n	800dca2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d15e      	bne.n	800dd60 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800dca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca4:	3b01      	subs	r3, #1
 800dca6:	2b3f      	cmp	r3, #63	; 0x3f
 800dca8:	bf28      	it	cs
 800dcaa:	233f      	movcs	r3, #63	; 0x3f
 800dcac:	62bb      	str	r3, [r7, #40]	; 0x28
    if (copy_len > 0) {
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00a      	beq.n	800dcca <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcb8:	4619      	mov	r1, r3
 800dcba:	488e      	ldr	r0, [pc, #568]	; (800def4 <http_find_file+0x298>)
 800dcbc:	f00c fbf2 	bl	801a4a4 <memcpy>
      http_uri_buf[copy_len] = 0;
 800dcc0:	4a8c      	ldr	r2, [pc, #560]	; (800def4 <http_find_file+0x298>)
 800dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc4:	4413      	add	r3, r2
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800dcca:	2300      	movs	r3, #0
 800dccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcce:	e044      	b.n	800dd5a <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d022      	beq.n	800dd1c <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800dcdc:	627b      	str	r3, [r7, #36]	; 0x24
        if (len_left > 0) {
 800dcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d018      	beq.n	800dd16 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800dce4:	4a84      	ldr	r2, [pc, #528]	; (800def8 <http_find_file+0x29c>)
 800dce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7f2 fa79 	bl	80001e4 <strlen>
 800dcf2:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800dcf4:	6a3a      	ldr	r2, [r7, #32]
 800dcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf8:	4293      	cmp	r3, r2
 800dcfa:	bf28      	it	cs
 800dcfc:	4613      	movcs	r3, r2
 800dcfe:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 800dd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd02:	4a7c      	ldr	r2, [pc, #496]	; (800def4 <http_find_file+0x298>)
 800dd04:	1898      	adds	r0, r3, r2
 800dd06:	4a7c      	ldr	r2, [pc, #496]	; (800def8 <http_find_file+0x29c>)
 800dd08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd0a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd0e:	69fa      	ldr	r2, [r7, #28]
 800dd10:	4619      	mov	r1, r3
 800dd12:	f00c fbc7 	bl	801a4a4 <memcpy>
        }
        file_name = http_uri_buf;
 800dd16:	4b77      	ldr	r3, [pc, #476]	; (800def4 <http_find_file+0x298>)
 800dd18:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd1a:	e004      	b.n	800dd26 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 800dd1c:	4a76      	ldr	r2, [pc, #472]	; (800def8 <http_find_file+0x29c>)
 800dd1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd24:	63bb      	str	r3, [r7, #56]	; 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7ff f84a 	bl	800cdc4 <fs_open>
 800dd30:	4603      	mov	r3, r0
 800dd32:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 800dd34:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d10b      	bne.n	800dd54 <http_find_file+0xf8>
        uri = file_name;
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	64bb      	str	r3, [r7, #72]	; 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 800dd44:	4a6c      	ldr	r2, [pc, #432]	; (800def8 <http_find_file+0x29c>)
 800dd46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd48:	00db      	lsls	r3, r3, #3
 800dd4a:	4413      	add	r3, r2
 800dd4c:	791b      	ldrb	r3, [r3, #4]
 800dd4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800dd52:	e005      	b.n	800dd60 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800dd54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd56:	3301      	adds	r3, #1
 800dd58:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd5c:	2b04      	cmp	r3, #4
 800dd5e:	d9b7      	bls.n	800dcd0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800dd60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f040 80ab 	bne.w	800debe <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	213f      	movs	r1, #63	; 0x3f
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f00c fd80 	bl	801a872 <strchr>
 800dd72:	6478      	str	r0, [r7, #68]	; 0x44
    if (params != NULL) {
 800dd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d005      	beq.n	800dd86 <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800dd7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	701a      	strb	r2, [r3, #0]
      params++;
 800dd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd82:	3301      	adds	r3, #1
 800dd84:	647b      	str	r3, [r7, #68]	; 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800dd86:	4b5d      	ldr	r3, [pc, #372]	; (800defc <http_find_file+0x2a0>)
 800dd88:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8c:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800dd8e:	4b5c      	ldr	r3, [pc, #368]	; (800df00 <http_find_file+0x2a4>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d034      	beq.n	800de00 <http_find_file+0x1a4>
 800dd96:	4b5b      	ldr	r3, [pc, #364]	; (800df04 <http_find_file+0x2a8>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d030      	beq.n	800de00 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800dd9e:	2300      	movs	r3, #0
 800dda0:	643b      	str	r3, [r7, #64]	; 0x40
 800dda2:	e028      	b.n	800ddf6 <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 800dda4:	68b8      	ldr	r0, [r7, #8]
 800dda6:	4b57      	ldr	r3, [pc, #348]	; (800df04 <http_find_file+0x2a8>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddac:	00db      	lsls	r3, r3, #3
 800ddae:	4413      	add	r3, r2
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	f7f2 fa0c 	bl	80001d0 <strcmp>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d118      	bne.n	800ddf0 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800ddbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f7ff f999 	bl	800d0f8 <extract_uri_parameters>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	4a4c      	ldr	r2, [pc, #304]	; (800defc <http_find_file+0x2a0>)
 800ddca:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800ddcc:	4b4d      	ldr	r3, [pc, #308]	; (800df04 <http_find_file+0x2a8>)
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddd2:	00db      	lsls	r3, r3, #3
 800ddd4:	4413      	add	r3, r2
 800ddd6:	685c      	ldr	r4, [r3, #4]
 800ddd8:	4b48      	ldr	r3, [pc, #288]	; (800defc <http_find_file+0x2a0>)
 800ddda:	6819      	ldr	r1, [r3, #0]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                          hs->param_vals);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3370      	adds	r3, #112	; 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800dde6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dde8:	47a0      	blx	r4
 800ddea:	4603      	mov	r3, r0
 800ddec:	60bb      	str	r3, [r7, #8]
           break;
 800ddee:	e007      	b.n	800de00 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 800ddf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	643b      	str	r3, [r7, #64]	; 0x40
 800ddf6:	4b42      	ldr	r3, [pc, #264]	; (800df00 <http_find_file+0x2a4>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	dbd1      	blt.n	800dda4 <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	68ba      	ldr	r2, [r7, #8]
 800de04:	4611      	mov	r1, r2
 800de06:	4618      	mov	r0, r3
 800de08:	f7fe ffdc 	bl	800cdc4 <fs_open>
 800de0c:	4603      	mov	r3, r0
 800de0e:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 800de10:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <http_find_file+0x1c2>
       file = &hs->file_handle;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	64bb      	str	r3, [r7, #72]	; 0x48
 800de1c:	e006      	b.n	800de2c <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 800de1e:	f107 0308 	add.w	r3, r7, #8
 800de22:	4619      	mov	r1, r3
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f7ff fdeb 	bl	800da00 <http_get_404_file>
 800de2a:	64b8      	str	r0, [r7, #72]	; 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800de2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d045      	beq.n	800debe <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 800de32:	2300      	movs	r3, #0
 800de34:	637b      	str	r3, [r7, #52]	; 0x34
      char* param = (char*)strstr(uri, "?");
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	213f      	movs	r1, #63	; 0x3f
 800de3a:	4618      	mov	r0, r3
 800de3c:	f00c fd19 	bl	801a872 <strchr>
 800de40:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	2200      	movs	r2, #0
 800de4c:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	633b      	str	r3, [r7, #48]	; 0x30
      ext = uri;
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	637b      	str	r3, [r7, #52]	; 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800de56:	212e      	movs	r1, #46	; 0x2e
 800de58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de5a:	f00c fd0a 	bl	801a872 <strchr>
 800de5e:	6338      	str	r0, [r7, #48]	; 0x30
 800de60:	e009      	b.n	800de76 <http_find_file+0x21a>
      {
         ext = sub;
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	637b      	str	r3, [r7, #52]	; 0x34
         sub++;
 800de66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de68:	3301      	adds	r3, #1
 800de6a:	633b      	str	r3, [r7, #48]	; 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800de6c:	212e      	movs	r1, #46	; 0x2e
 800de6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de70:	f00c fcff 	bl	801a872 <strchr>
 800de74:	6338      	str	r0, [r7, #48]	; 0x30
 800de76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1f2      	bne.n	800de62 <http_find_file+0x206>
      }
      tag_check = 0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800de82:	2300      	movs	r3, #0
 800de84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de86:	e011      	b.n	800deac <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800de88:	4a1f      	ldr	r2, [pc, #124]	; (800df08 <http_find_file+0x2ac>)
 800de8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de90:	4619      	mov	r1, r3
 800de92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800de94:	f001 feb3 	bl	800fbfe <lwip_stricmp>
 800de98:	4603      	mov	r3, r0
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d103      	bne.n	800dea6 <http_find_file+0x24a>
          tag_check = 1;
 800de9e:	2301      	movs	r3, #1
 800dea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 800dea4:	e005      	b.n	800deb2 <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800dea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea8:	3301      	adds	r3, #1
 800deaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800deac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deae:	2b03      	cmp	r3, #3
 800deb0:	d9ea      	bls.n	800de88 <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <http_find_file+0x262>
         *param = '?';
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	223f      	movs	r2, #63	; 0x3f
 800debc:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800debe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d106      	bne.n	800ded2 <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800dec4:	f107 0308 	add.w	r3, r7, #8
 800dec8:	4619      	mov	r1, r3
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f7ff fd98 	bl	800da00 <http_get_404_file>
 800ded0:	64b8      	str	r0, [r7, #72]	; 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800ded2:	68ba      	ldr	r2, [r7, #8]
 800ded4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	4613      	mov	r3, r2
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 f811 	bl	800df0c <http_init_file>
 800deea:	4603      	mov	r3, r0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3754      	adds	r7, #84	; 0x54
 800def0:	46bd      	mov	sp, r7
 800def2:	bd90      	pop	{r4, r7, pc}
 800def4:	20005068 	.word	0x20005068
 800def8:	0801eb9c 	.word	0x0801eb9c
 800defc:	200087b8 	.word	0x200087b8
 800df00:	200087b0 	.word	0x200087b0
 800df04:	200087c0 	.word	0x200087c0
 800df08:	0801eb8c 	.word	0x0801eb8c

0800df0c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b088      	sub	sp, #32
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
 800df18:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d072      	beq.n	800e006 <http_init_file+0xfa>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 800df20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df24:	2b00      	cmp	r3, #0
 800df26:	d01c      	beq.n	800df62 <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800df28:	f7fe ffa1 	bl	800ce6e <http_ssi_state_alloc>
 800df2c:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d016      	beq.n	800df62 <http_init_file+0x56>
        ssi->tag_index = 0;
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2200      	movs	r2, #0
 800df38:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	2200      	movs	r2, #0
 800df3e:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
        ssi->parsed = file->data;
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	461a      	mov	r2, r3
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	69fa      	ldr	r2, [r7, #28]
 800df60:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	da06      	bge.n	800df86 <http_init_file+0x7a>
 800df78:	4b2c      	ldr	r3, [pc, #176]	; (800e02c <http_init_file+0x120>)
 800df7a:	f640 02cf 	movw	r2, #2255	; 0x8cf
 800df7e:	492c      	ldr	r1, [pc, #176]	; (800e030 <http_init_file+0x124>)
 800df80:	482c      	ldr	r0, [pc, #176]	; (800e034 <http_init_file+0x128>)
 800df82:	f00c fb81 	bl	801a688 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	461a      	mov	r2, r3
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	695b      	ldr	r3, [r3, #20]
 800df9c:	7c1b      	ldrb	r3, [r3, #16]
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <http_init_file+0xa8>
 800dfa6:	4b21      	ldr	r3, [pc, #132]	; (800e02c <http_init_file+0x120>)
 800dfa8:	f640 02de 	movw	r2, #2270	; 0x8de
 800dfac:	4922      	ldr	r1, [pc, #136]	; (800e038 <http_init_file+0x12c>)
 800dfae:	4821      	ldr	r0, [pc, #132]	; (800e034 <http_init_file+0x128>)
 800dfb0:	f00c fb6a 	bl	801a688 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d032      	beq.n	800e020 <http_init_file+0x114>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	695b      	ldr	r3, [r3, #20]
 800dfbe:	7c1b      	ldrb	r3, [r3, #16]
 800dfc0:	f003 0301 	and.w	r3, r3, #1
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d02b      	beq.n	800e020 <http_init_file+0x114>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6998      	ldr	r0, [r3, #24]
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	491a      	ldr	r1, [pc, #104]	; (800e03c <http_init_file+0x130>)
 800dfd4:	f001 fddd 	bl	800fb92 <lwip_strnstr>
 800dfd8:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01f      	beq.n	800e020 <http_init_file+0x114>
        size_t diff = file_start + 4 - hs->file;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	1d1a      	adds	r2, r3, #4
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	699a      	ldr	r2, [r3, #24]
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	441a      	add	r2, r3
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	1ad2      	subs	r2, r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	625a      	str	r2, [r3, #36]	; 0x24
 800e004:	e00c      	b.n	800e020 <http_init_file+0x114>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2200      	movs	r2, #0
 800e00a:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3720      	adds	r7, #32
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	0801bb98 	.word	0x0801bb98
 800e030:	0801bce4 	.word	0x0801bce4
 800e034:	0801bbe0 	.word	0x0801bbe0
 800e038:	0801bd04 	.word	0x0801bd04
 800e03c:	0801bcdc 	.word	0x0801bcdc

0800e040 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	460b      	mov	r3, r1
 800e04a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d002      	beq.n	800e05c <http_err+0x1c>
    http_state_free(hs);
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7fe ff76 	bl	800cf48 <http_state_free>
  }
}
 800e05c:	bf00      	nop
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	4613      	mov	r3, r2
 800e070:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d101      	bne.n	800e080 <http_sent+0x1c>
    return ERR_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	e008      	b.n	800e092 <http_sent+0x2e>
  }

  hs->retries = 0;
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	2200      	movs	r2, #0
 800e084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800e088:	6979      	ldr	r1, [r7, #20]
 800e08a:	68b8      	ldr	r0, [r7, #8]
 800e08c:	f7ff fc76 	bl	800d97c <http_send>

  return ERR_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b084      	sub	sp, #16
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d107      	bne.n	800e0be <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800e0ae:	2100      	movs	r1, #0
 800e0b0:	6838      	ldr	r0, [r7, #0]
 800e0b2:	f7ff f805 	bl	800d0c0 <http_close_conn>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e024      	b.n	800e108 <http_poll+0x6e>
  } else {
    hs->retries++;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0d4:	2b04      	cmp	r3, #4
 800e0d6:	d105      	bne.n	800e0e4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800e0d8:	68f9      	ldr	r1, [r7, #12]
 800e0da:	6838      	ldr	r0, [r7, #0]
 800e0dc:	f7fe fff0 	bl	800d0c0 <http_close_conn>
      return ERR_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e011      	b.n	800e108 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d00d      	beq.n	800e106 <http_poll+0x6c>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	695b      	ldr	r3, [r3, #20]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d009      	beq.n	800e106 <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800e0f2:	68f9      	ldr	r1, [r7, #12]
 800e0f4:	6838      	ldr	r0, [r7, #0]
 800e0f6:	f7ff fc41 	bl	800d97c <http_send>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 800e100:	6838      	ldr	r0, [r7, #0]
 800e102:	f008 f865 	bl	80161d0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3710      	adds	r7, #16
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	607a      	str	r2, [r7, #4]
 800e11c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800e122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d105      	bne.n	800e136 <http_recv+0x26>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <http_recv+0x26>
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d111      	bne.n	800e15a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d008      	beq.n	800e14e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	891b      	ldrh	r3, [r3, #8]
 800e140:	4619      	mov	r1, r3
 800e142:	68b8      	ldr	r0, [r7, #8]
 800e144:	f003 fe6c 	bl	8011e20 <tcp_recved>
      pbuf_free(p);
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f002 ff5f 	bl	801100c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800e14e:	6979      	ldr	r1, [r7, #20]
 800e150:	68b8      	ldr	r0, [r7, #8]
 800e152:	f7fe ffb5 	bl	800d0c0 <http_close_conn>
    return ERR_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	e055      	b.n	800e206 <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	891b      	ldrh	r3, [r3, #8]
 800e15e:	4619      	mov	r1, r3
 800e160:	68b8      	ldr	r0, [r7, #8]
 800e162:	f003 fe5d 	bl	8011e20 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	695b      	ldr	r3, [r3, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d147      	bne.n	800e1fe <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	6979      	ldr	r1, [r7, #20]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7ff fc8a 	bl	800da8c <http_parse_request>
 800e178:	4603      	mov	r3, r0
 800e17a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800e17c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d015      	beq.n	800e1b0 <http_recv+0xa0>
 800e184:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e188:	f113 0f05 	cmn.w	r3, #5
 800e18c:	d010      	beq.n	800e1b0 <http_recv+0xa0>
 800e18e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e192:	f113 0f10 	cmn.w	r3, #16
 800e196:	d00b      	beq.n	800e1b0 <http_recv+0xa0>
 800e198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e19c:	f113 0f08 	cmn.w	r3, #8
 800e1a0:	d006      	beq.n	800e1b0 <http_recv+0xa0>
 800e1a2:	4b1b      	ldr	r3, [pc, #108]	; (800e210 <http_recv+0x100>)
 800e1a4:	f640 12b4 	movw	r2, #2484	; 0x9b4
 800e1a8:	491a      	ldr	r1, [pc, #104]	; (800e214 <http_recv+0x104>)
 800e1aa:	481b      	ldr	r0, [pc, #108]	; (800e218 <http_recv+0x108>)
 800e1ac:	f00c fa6c 	bl	801a688 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800e1b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1b4:	f113 0f05 	cmn.w	r3, #5
 800e1b8:	d00b      	beq.n	800e1d2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	6a1b      	ldr	r3, [r3, #32]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d007      	beq.n	800e1d2 <http_recv+0xc2>
          pbuf_free(hs->req);
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f002 ff20 	bl	801100c <pbuf_free>
          hs->req = NULL;
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f002 ff1a 	bl	801100c <pbuf_free>
      if (parsed == ERR_OK) {
 800e1d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d104      	bne.n	800e1ea <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 800e1e0:	6979      	ldr	r1, [r7, #20]
 800e1e2:	68b8      	ldr	r0, [r7, #8]
 800e1e4:	f7ff fbca 	bl	800d97c <http_send>
 800e1e8:	e00c      	b.n	800e204 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800e1ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e1ee:	f113 0f10 	cmn.w	r3, #16
 800e1f2:	d107      	bne.n	800e204 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800e1f4:	6979      	ldr	r1, [r7, #20]
 800e1f6:	68b8      	ldr	r0, [r7, #8]
 800e1f8:	f7fe ff62 	bl	800d0c0 <http_close_conn>
 800e1fc:	e002      	b.n	800e204 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f002 ff04 	bl	801100c <pbuf_free>
    }
  }
  return ERR_OK;
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	3718      	adds	r7, #24
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	0801bb98 	.word	0x0801bb98
 800e214:	0801bd30 	.word	0x0801bd30
 800e218:	0801bbe0 	.word	0x0801bbe0

0800e21c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b086      	sub	sp, #24
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	4613      	mov	r3, r2
 800e228:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800e22a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d102      	bne.n	800e238 <http_accept+0x1c>
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d102      	bne.n	800e23e <http_accept+0x22>
    return ERR_VAL;
 800e238:	f06f 0305 	mvn.w	r3, #5
 800e23c:	e025      	b.n	800e28a <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800e23e:	2101      	movs	r1, #1
 800e240:	68b8      	ldr	r0, [r7, #8]
 800e242:	f004 fb3b 	bl	80128bc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800e246:	f7fe fe41 	bl	800cecc <http_state_alloc>
 800e24a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d102      	bne.n	800e258 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800e252:	f04f 33ff 	mov.w	r3, #4294967295
 800e256:	e018      	b.n	800e28a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	68ba      	ldr	r2, [r7, #8]
 800e25c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 800e25e:	6979      	ldr	r1, [r7, #20]
 800e260:	68b8      	ldr	r0, [r7, #8]
 800e262:	f004 fccb 	bl	8012bfc <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800e266:	490b      	ldr	r1, [pc, #44]	; (800e294 <http_accept+0x78>)
 800e268:	68b8      	ldr	r0, [r7, #8]
 800e26a:	f004 fcd7 	bl	8012c1c <tcp_recv>
  tcp_err(pcb, http_err);
 800e26e:	490a      	ldr	r1, [pc, #40]	; (800e298 <http_accept+0x7c>)
 800e270:	68b8      	ldr	r0, [r7, #8]
 800e272:	f004 fd15 	bl	8012ca0 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800e276:	2204      	movs	r2, #4
 800e278:	4908      	ldr	r1, [pc, #32]	; (800e29c <http_accept+0x80>)
 800e27a:	68b8      	ldr	r0, [r7, #8]
 800e27c:	f004 fd48 	bl	8012d10 <tcp_poll>
  tcp_sent(pcb, http_sent);
 800e280:	4907      	ldr	r1, [pc, #28]	; (800e2a0 <http_accept+0x84>)
 800e282:	68b8      	ldr	r0, [r7, #8]
 800e284:	f004 fcec 	bl	8012c60 <tcp_sent>

  return ERR_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	0800e111 	.word	0x0800e111
 800e298:	0800e041 	.word	0x0800e041
 800e29c:	0800e09b 	.word	0x0800e09b
 800e2a0:	0800e065 	.word	0x0800e065

0800e2a4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 800e2aa:	202e      	movs	r0, #46	; 0x2e
 800e2ac:	f004 fc98 	bl	8012be0 <tcp_new_ip_type>
 800e2b0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d106      	bne.n	800e2c6 <httpd_init+0x22>
 800e2b8:	4b19      	ldr	r3, [pc, #100]	; (800e320 <httpd_init+0x7c>)
 800e2ba:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 800e2be:	4919      	ldr	r1, [pc, #100]	; (800e324 <httpd_init+0x80>)
 800e2c0:	4819      	ldr	r0, [pc, #100]	; (800e328 <httpd_init+0x84>)
 800e2c2:	f00c f9e1 	bl	801a688 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f004 faf7 	bl	80128bc <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 800e2ce:	2250      	movs	r2, #80	; 0x50
 800e2d0:	4916      	ldr	r1, [pc, #88]	; (800e32c <httpd_init+0x88>)
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f003 fc0a 	bl	8011aec <tcp_bind>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800e2dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d006      	beq.n	800e2f2 <httpd_init+0x4e>
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <httpd_init+0x7c>)
 800e2e6:	f640 2215 	movw	r2, #2581	; 0xa15
 800e2ea:	4911      	ldr	r1, [pc, #68]	; (800e330 <httpd_init+0x8c>)
 800e2ec:	480e      	ldr	r0, [pc, #56]	; (800e328 <httpd_init+0x84>)
 800e2ee:	f00c f9cb 	bl	801a688 <iprintf>
  pcb = tcp_listen(pcb);
 800e2f2:	21ff      	movs	r1, #255	; 0xff
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f003 fc9b 	bl	8011c30 <tcp_listen_with_backlog>
 800e2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d106      	bne.n	800e310 <httpd_init+0x6c>
 800e302:	4b07      	ldr	r3, [pc, #28]	; (800e320 <httpd_init+0x7c>)
 800e304:	f640 2217 	movw	r2, #2583	; 0xa17
 800e308:	490a      	ldr	r1, [pc, #40]	; (800e334 <httpd_init+0x90>)
 800e30a:	4807      	ldr	r0, [pc, #28]	; (800e328 <httpd_init+0x84>)
 800e30c:	f00c f9bc 	bl	801a688 <iprintf>
  tcp_accept(pcb, http_accept);
 800e310:	4909      	ldr	r1, [pc, #36]	; (800e338 <httpd_init+0x94>)
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f004 fce6 	bl	8012ce4 <tcp_accept>
}
 800e318:	bf00      	nop
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	0801bb98 	.word	0x0801bb98
 800e324:	0801bd5c 	.word	0x0801bd5c
 800e328:	0801bbe0 	.word	0x0801bbe0
 800e32c:	0801ecd4 	.word	0x0801ecd4
 800e330:	0801bd78 	.word	0x0801bd78
 800e334:	0801bd94 	.word	0x0801bd94
 800e338:	0800e21d 	.word	0x0800e21d

0800e33c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d106      	bne.n	800e35c <http_set_ssi_handler+0x20>
 800e34e:	4b14      	ldr	r3, [pc, #80]	; (800e3a0 <http_set_ssi_handler+0x64>)
 800e350:	f640 2228 	movw	r2, #2600	; 0xa28
 800e354:	4913      	ldr	r1, [pc, #76]	; (800e3a4 <http_set_ssi_handler+0x68>)
 800e356:	4814      	ldr	r0, [pc, #80]	; (800e3a8 <http_set_ssi_handler+0x6c>)
 800e358:	f00c f996 	bl	801a688 <iprintf>
  g_pfnSSIHandler = ssi_handler;
 800e35c:	4a13      	ldr	r2, [pc, #76]	; (800e3ac <http_set_ssi_handler+0x70>)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d106      	bne.n	800e376 <http_set_ssi_handler+0x3a>
 800e368:	4b0d      	ldr	r3, [pc, #52]	; (800e3a0 <http_set_ssi_handler+0x64>)
 800e36a:	f640 222f 	movw	r2, #2607	; 0xa2f
 800e36e:	4910      	ldr	r1, [pc, #64]	; (800e3b0 <http_set_ssi_handler+0x74>)
 800e370:	480d      	ldr	r0, [pc, #52]	; (800e3a8 <http_set_ssi_handler+0x6c>)
 800e372:	f00c f989 	bl	801a688 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	dc06      	bgt.n	800e38a <http_set_ssi_handler+0x4e>
 800e37c:	4b08      	ldr	r3, [pc, #32]	; (800e3a0 <http_set_ssi_handler+0x64>)
 800e37e:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 800e382:	490c      	ldr	r1, [pc, #48]	; (800e3b4 <http_set_ssi_handler+0x78>)
 800e384:	4808      	ldr	r0, [pc, #32]	; (800e3a8 <http_set_ssi_handler+0x6c>)
 800e386:	f00c f97f 	bl	801a688 <iprintf>

  g_ppcTags = tags;
 800e38a:	4a0b      	ldr	r2, [pc, #44]	; (800e3b8 <http_set_ssi_handler+0x7c>)
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 800e390:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <http_set_ssi_handler+0x80>)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800e396:	bf00      	nop
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	0801bb98 	.word	0x0801bb98
 800e3a4:	0801bdb4 	.word	0x0801bdb4
 800e3a8:	0801bbe0 	.word	0x0801bbe0
 800e3ac:	200087b4 	.word	0x200087b4
 800e3b0:	0801bdcc 	.word	0x0801bdcc
 800e3b4:	0801bddc 	.word	0x0801bddc
 800e3b8:	200087c4 	.word	0x200087c4
 800e3bc:	200087bc 	.word	0x200087bc

0800e3c0 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d106      	bne.n	800e3de <http_set_cgi_handlers+0x1e>
 800e3d0:	4b0d      	ldr	r3, [pc, #52]	; (800e408 <http_set_cgi_handlers+0x48>)
 800e3d2:	f640 2242 	movw	r2, #2626	; 0xa42
 800e3d6:	490d      	ldr	r1, [pc, #52]	; (800e40c <http_set_cgi_handlers+0x4c>)
 800e3d8:	480d      	ldr	r0, [pc, #52]	; (800e410 <http_set_cgi_handlers+0x50>)
 800e3da:	f00c f955 	bl	801a688 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dc06      	bgt.n	800e3f2 <http_set_cgi_handlers+0x32>
 800e3e4:	4b08      	ldr	r3, [pc, #32]	; (800e408 <http_set_cgi_handlers+0x48>)
 800e3e6:	f640 2243 	movw	r2, #2627	; 0xa43
 800e3ea:	490a      	ldr	r1, [pc, #40]	; (800e414 <http_set_cgi_handlers+0x54>)
 800e3ec:	4808      	ldr	r0, [pc, #32]	; (800e410 <http_set_cgi_handlers+0x50>)
 800e3ee:	f00c f94b 	bl	801a688 <iprintf>

  g_pCGIs = cgis;
 800e3f2:	4a09      	ldr	r2, [pc, #36]	; (800e418 <http_set_cgi_handlers+0x58>)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 800e3f8:	4a08      	ldr	r2, [pc, #32]	; (800e41c <http_set_cgi_handlers+0x5c>)
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	6013      	str	r3, [r2, #0]
}
 800e3fe:	bf00      	nop
 800e400:	3708      	adds	r7, #8
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	0801bb98 	.word	0x0801bb98
 800e40c:	0801bdf4 	.word	0x0801bdf4
 800e410:	0801bbe0 	.word	0x0801bbe0
 800e414:	0801be04 	.word	0x0801be04
 800e418:	200087c0 	.word	0x200087c0
 800e41c:	200087b0 	.word	0x200087b0

0800e420 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 800e420:	b480      	push	{r7}
 800e422:	b083      	sub	sp, #12
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	88db      	ldrh	r3, [r3, #6]
 800e42c:	3301      	adds	r3, #1
 800e42e:	b29a      	uxth	r2, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	88db      	ldrh	r3, [r3, #6]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d105      	bne.n	800e448 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	88db      	ldrh	r3, [r3, #6]
 800e440:	3301      	adds	r3, #1
 800e442:	b29a      	uxth	r2, r3
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	88db      	ldrh	r3, [r3, #6]
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	bc80      	pop	{r7}
 800e454:	4770      	bx	lr
	...

0800e458 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct tcp_pcb *tpcb)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 800e462:	2300      	movs	r3, #0
 800e464:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	885b      	ldrh	r3, [r3, #2]
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	8811      	ldrh	r1, [r2, #0]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	8852      	ldrh	r2, [r2, #2]
 800e478:	1a8a      	subs	r2, r1, r2
 800e47a:	b292      	uxth	r2, r2
 800e47c:	4293      	cmp	r3, r2
 800e47e:	bfa8      	it	ge
 800e480:	4613      	movge	r3, r2
 800e482:	817b      	strh	r3, [r7, #10]
  u16_t send_len = tcp_sndbuf(tpcb);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e48a:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d105      	bne.n	800e49e <mqtt_output_send+0x46>
 800e492:	4b3a      	ldr	r3, [pc, #232]	; (800e57c <mqtt_output_send+0x124>)
 800e494:	22d3      	movs	r2, #211	; 0xd3
 800e496:	493a      	ldr	r1, [pc, #232]	; (800e580 <mqtt_output_send+0x128>)
 800e498:	483a      	ldr	r0, [pc, #232]	; (800e584 <mqtt_output_send+0x12c>)
 800e49a:	f00c f8f5 	bl	801a688 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 800e49e:	89bb      	ldrh	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d066      	beq.n	800e572 <mqtt_output_send+0x11a>
 800e4a4:	897b      	ldrh	r3, [r7, #10]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d063      	beq.n	800e572 <mqtt_output_send+0x11a>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                send_len, ringbuf_lin_len, ((rb)->get & MQTT_RINGBUF_IDX_MASK), ((rb)->put & MQTT_RINGBUF_IDX_MASK)));

  if (send_len > ringbuf_lin_len) {
 800e4aa:	89ba      	ldrh	r2, [r7, #12]
 800e4ac:	897b      	ldrh	r3, [r7, #10]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d90e      	bls.n	800e4d0 <mqtt_output_send+0x78>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 800e4b2:	897b      	ldrh	r3, [r7, #10]
 800e4b4:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	881a      	ldrh	r2, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	885b      	ldrh	r3, [r3, #2]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	897a      	ldrh	r2, [r7, #10]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	bf34      	ite	cc
 800e4c8:	2301      	movcc	r3, #1
 800e4ca:	2300      	movcs	r3, #0
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	73bb      	strb	r3, [r7, #14]
  }
  err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	885b      	ldrh	r3, [r3, #2]
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	4413      	add	r3, r2
 800e4da:	1d19      	adds	r1, r3, #4
 800e4dc:	7bbb      	ldrb	r3, [r7, #14]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d001      	beq.n	800e4e6 <mqtt_output_send+0x8e>
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	e000      	b.n	800e4e8 <mqtt_output_send+0x90>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	89ba      	ldrh	r2, [r7, #12]
 800e4ea:	6838      	ldr	r0, [r7, #0]
 800e4ec:	f007 f9be 	bl	801586c <tcp_write>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 800e4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d12b      	bne.n	800e554 <mqtt_output_send+0xfc>
 800e4fc:	7bbb      	ldrb	r3, [r7, #14]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d028      	beq.n	800e554 <mqtt_output_send+0xfc>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	885a      	ldrh	r2, [r3, #2]
 800e506:	89bb      	ldrh	r3, [r7, #12]
 800e508:	4413      	add	r3, r2
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	805a      	strh	r2, [r3, #2]
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	885b      	ldrh	r3, [r3, #2]
 800e514:	b2db      	uxtb	r3, r3
 800e516:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	8811      	ldrh	r1, [r2, #0]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	8852      	ldrh	r2, [r2, #2]
 800e522:	1a8a      	subs	r2, r1, r2
 800e524:	b292      	uxth	r2, r2
 800e526:	4293      	cmp	r3, r2
 800e528:	bfa8      	it	ge
 800e52a:	4613      	movge	r3, r2
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e532:	4293      	cmp	r3, r2
 800e534:	bfa8      	it	ge
 800e536:	4613      	movge	r3, r2
 800e538:	81bb      	strh	r3, [r7, #12]
    err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	885b      	ldrh	r3, [r3, #2]
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	4413      	add	r3, r2
 800e544:	1d19      	adds	r1, r3, #4
 800e546:	89ba      	ldrh	r2, [r7, #12]
 800e548:	2301      	movs	r3, #1
 800e54a:	6838      	ldr	r0, [r7, #0]
 800e54c:	f007 f98e 	bl	801586c <tcp_write>
 800e550:	4603      	mov	r3, r0
 800e552:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 800e554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10b      	bne.n	800e574 <mqtt_output_send+0x11c>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	885a      	ldrh	r2, [r3, #2]
 800e560:	89bb      	ldrh	r3, [r7, #12]
 800e562:	4413      	add	r3, r2
 800e564:	b29a      	uxth	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	805a      	strh	r2, [r3, #2]
    /* Flush */
    tcp_output(tpcb);
 800e56a:	6838      	ldr	r0, [r7, #0]
 800e56c:	f007 fe30 	bl	80161d0 <tcp_output>
 800e570:	e000      	b.n	800e574 <mqtt_output_send+0x11c>
    return;
 800e572:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	0801be20 	.word	0x0801be20
 800e580:	0801be58 	.word	0x0801be58
 800e584:	0801be78 	.word	0x0801be78

0800e588 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	607a      	str	r2, [r7, #4]
 800e592:	603b      	str	r3, [r7, #0]
 800e594:	460b      	mov	r3, r1
 800e596:	817b      	strh	r3, [r7, #10]
  struct mqtt_request_t *r = NULL;
 800e598:	2300      	movs	r3, #0
 800e59a:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <mqtt_create_request+0x28>
 800e5a2:	4b19      	ldr	r3, [pc, #100]	; (800e608 <mqtt_create_request+0x80>)
 800e5a4:	f240 1205 	movw	r2, #261	; 0x105
 800e5a8:	4918      	ldr	r1, [pc, #96]	; (800e60c <mqtt_create_request+0x84>)
 800e5aa:	4819      	ldr	r0, [pc, #100]	; (800e610 <mqtt_create_request+0x88>)
 800e5ac:	f00c f86c 	bl	801a688 <iprintf>
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	74fb      	strb	r3, [r7, #19]
 800e5b4:	e01f      	b.n	800e5f6 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800e5b6:	7cfb      	ldrb	r3, [r7, #19]
 800e5b8:	011b      	lsls	r3, r3, #4
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	4413      	add	r3, r2
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	7cfb      	ldrb	r3, [r7, #19]
 800e5c2:	011b      	lsls	r3, r3, #4
 800e5c4:	68f9      	ldr	r1, [r7, #12]
 800e5c6:	440b      	add	r3, r1
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d111      	bne.n	800e5f0 <mqtt_create_request+0x68>
      r = &r_objs[n];
 800e5cc:	7cfb      	ldrb	r3, [r7, #19]
 800e5ce:	011b      	lsls	r3, r3, #4
 800e5d0:	68fa      	ldr	r2, [r7, #12]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	897a      	ldrh	r2, [r7, #10]
 800e5ec:	819a      	strh	r2, [r3, #12]
      break;
 800e5ee:	e005      	b.n	800e5fc <mqtt_create_request+0x74>
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 800e5f0:	7cfb      	ldrb	r3, [r7, #19]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	74fb      	strb	r3, [r7, #19]
 800e5f6:	7cfb      	ldrb	r3, [r7, #19]
 800e5f8:	2b03      	cmp	r3, #3
 800e5fa:	d9dc      	bls.n	800e5b6 <mqtt_create_request+0x2e>
    }
  }
  return r;
 800e5fc:	697b      	ldr	r3, [r7, #20]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3718      	adds	r7, #24
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	0801be20 	.word	0x0801be20
 800e60c:	0801bea0 	.word	0x0801bea0
 800e610:	0801be78 	.word	0x0801be78

0800e614 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800e61e:	2300      	movs	r3, #0
 800e620:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 800e622:	2300      	movs	r3, #0
 800e624:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d106      	bne.n	800e63a <mqtt_append_request+0x26>
 800e62c:	4b1b      	ldr	r3, [pc, #108]	; (800e69c <mqtt_append_request+0x88>)
 800e62e:	f240 1221 	movw	r2, #289	; 0x121
 800e632:	491b      	ldr	r1, [pc, #108]	; (800e6a0 <mqtt_append_request+0x8c>)
 800e634:	481b      	ldr	r0, [pc, #108]	; (800e6a4 <mqtt_append_request+0x90>)
 800e636:	f00c f827 	bl	801a688 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	e00a      	b.n	800e658 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	89da      	ldrh	r2, [r3, #14]
 800e646:	8a7b      	ldrh	r3, [r7, #18]
 800e648:	4413      	add	r3, r2
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	827b      	strh	r3, [r7, #18]
    head = iter;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1f1      	bne.n	800e642 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800e65e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e662:	2b1e      	cmp	r3, #30
 800e664:	dd06      	ble.n	800e674 <mqtt_append_request+0x60>
 800e666:	4b0d      	ldr	r3, [pc, #52]	; (800e69c <mqtt_append_request+0x88>)
 800e668:	f240 1229 	movw	r2, #297	; 0x129
 800e66c:	490e      	ldr	r1, [pc, #56]	; (800e6a8 <mqtt_append_request+0x94>)
 800e66e:	480d      	ldr	r0, [pc, #52]	; (800e6a4 <mqtt_append_request+0x90>)
 800e670:	f00c f80a 	bl	801a688 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800e674:	8a7b      	ldrh	r3, [r7, #18]
 800e676:	f1c3 031e 	rsb	r3, r3, #30
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d103      	bne.n	800e68e <mqtt_append_request+0x7a>
    *tail = r;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 800e68c:	e002      	b.n	800e694 <mqtt_append_request+0x80>
    head->next = r;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	601a      	str	r2, [r3, #0]
}
 800e694:	bf00      	nop
 800e696:	3718      	adds	r7, #24
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}
 800e69c:	0801be20 	.word	0x0801be20
 800e6a0:	0801bec4 	.word	0x0801bec4
 800e6a4:	0801be78 	.word	0x0801be78
 800e6a8:	0801bee8 	.word	0x0801bee8

0800e6ac <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800e6ac:	b480      	push	{r7}
 800e6ae:	b083      	sub	sp, #12
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <mqtt_delete_request+0x14>
    r->next = r;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	601a      	str	r2, [r3, #0]
  }
}
 800e6c0:	bf00      	nop
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bc80      	pop	{r7}
 800e6c8:	4770      	bx	lr
	...

0800e6cc <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	2300      	movs	r3, #0
 800e6de:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d106      	bne.n	800e6f4 <mqtt_take_request+0x28>
 800e6e6:	4b1f      	ldr	r3, [pc, #124]	; (800e764 <mqtt_take_request+0x98>)
 800e6e8:	f240 1249 	movw	r2, #329	; 0x149
 800e6ec:	491e      	ldr	r1, [pc, #120]	; (800e768 <mqtt_take_request+0x9c>)
 800e6ee:	481f      	ldr	r0, [pc, #124]	; (800e76c <mqtt_take_request+0xa0>)
 800e6f0:	f00b ffca 	bl	801a688 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	60fb      	str	r3, [r7, #12]
 800e6fa:	e009      	b.n	800e710 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	899b      	ldrh	r3, [r3, #12]
 800e700:	887a      	ldrh	r2, [r7, #2]
 800e702:	429a      	cmp	r2, r3
 800e704:	d008      	beq.n	800e718 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	60fb      	str	r3, [r7, #12]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1f2      	bne.n	800e6fc <mqtt_take_request+0x30>
 800e716:	e000      	b.n	800e71a <mqtt_take_request+0x4e>
      break;
 800e718:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d01c      	beq.n	800e75a <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d104      	bne.n	800e730 <mqtt_take_request+0x64>
      *tail= iter->next;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	e003      	b.n	800e738 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d009      	beq.n	800e754 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	89d9      	ldrh	r1, [r3, #14]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	89da      	ldrh	r2, [r3, #14]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	440a      	add	r2, r1
 800e750:	b292      	uxth	r2, r2
 800e752:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800e75a:	68fb      	ldr	r3, [r7, #12]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3710      	adds	r7, #16
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	0801be20 	.word	0x0801be20
 800e768:	0801bf20 	.word	0x0801bf20
 800e76c:	0801be78 	.word	0x0801be78

0800e770 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	460b      	mov	r3, r1
 800e77a:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <mqtt_request_time_elapsed+0x20>
 800e782:	4b21      	ldr	r3, [pc, #132]	; (800e808 <mqtt_request_time_elapsed+0x98>)
 800e784:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e788:	4920      	ldr	r1, [pc, #128]	; (800e80c <mqtt_request_time_elapsed+0x9c>)
 800e78a:	4821      	ldr	r0, [pc, #132]	; (800e810 <mqtt_request_time_elapsed+0xa0>)
 800e78c:	f00b ff7c 	bl	801a688 <iprintf>
  r = *tail;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800e796:	e02c      	b.n	800e7f2 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800e798:	78fb      	ldrb	r3, [r7, #3]
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	89db      	ldrh	r3, [r3, #14]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d31c      	bcc.n	800e7de <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	89db      	ldrh	r3, [r3, #14]
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	78fa      	ldrb	r2, [r7, #3]
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d007      	beq.n	800e7d0 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	6892      	ldr	r2, [r2, #8]
 800e7c8:	f06f 0102 	mvn.w	r1, #2
 800e7cc:	4610      	mov	r0, r2
 800e7ce:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f7ff ff6b 	bl	800e6ac <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t * const volatile *)tail;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	60fb      	str	r3, [r7, #12]
 800e7dc:	e009      	b.n	800e7f2 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	89da      	ldrh	r2, [r3, #14]
 800e7e2:	78fb      	ldrb	r3, [r7, #3]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	81da      	strh	r2, [r3, #14]
      t = 0;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800e7f2:	78fb      	ldrb	r3, [r7, #3]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <mqtt_request_time_elapsed+0x8e>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1cc      	bne.n	800e798 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800e7fe:	bf00      	nop
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	0801be20 	.word	0x0801be20
 800e80c:	0801bf40 	.word	0x0801bf40
 800e810:	0801be78 	.word	0x0801be78

0800e814 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <mqtt_clear_requests+0x1c>
 800e822:	4b0e      	ldr	r3, [pc, #56]	; (800e85c <mqtt_clear_requests+0x48>)
 800e824:	f240 1289 	movw	r2, #393	; 0x189
 800e828:	490d      	ldr	r1, [pc, #52]	; (800e860 <mqtt_clear_requests+0x4c>)
 800e82a:	480e      	ldr	r0, [pc, #56]	; (800e864 <mqtt_clear_requests+0x50>)
 800e82c:	f00b ff2c 	bl	801a688 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	60fb      	str	r3, [r7, #12]
 800e836:	e007      	b.n	800e848 <mqtt_clear_requests+0x34>
    next = iter->next;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f7ff ff34 	bl	800e6ac <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d1f4      	bne.n	800e838 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]
}
 800e854:	bf00      	nop
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	0801be20 	.word	0x0801be20
 800e860:	0801bf68 	.word	0x0801bf68
 800e864:	0801be78 	.word	0x0801be78

0800e868 <mqtt_init_requests>:
 * Initialize all request items
 * @param r_objs Pointer to request objects
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d106      	bne.n	800e884 <mqtt_init_requests+0x1c>
 800e876:	4b0f      	ldr	r3, [pc, #60]	; (800e8b4 <mqtt_init_requests+0x4c>)
 800e878:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e87c:	490e      	ldr	r1, [pc, #56]	; (800e8b8 <mqtt_init_requests+0x50>)
 800e87e:	480f      	ldr	r0, [pc, #60]	; (800e8bc <mqtt_init_requests+0x54>)
 800e880:	f00b ff02 	bl	801a688 <iprintf>
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 800e884:	2300      	movs	r3, #0
 800e886:	73fb      	strb	r3, [r7, #15]
 800e888:	e00b      	b.n	800e8a2 <mqtt_init_requests+0x3a>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800e88a:	7bfb      	ldrb	r3, [r7, #15]
 800e88c:	011a      	lsls	r2, r3, #4
 800e88e:	7bfb      	ldrb	r3, [r7, #15]
 800e890:	011b      	lsls	r3, r3, #4
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	440b      	add	r3, r1
 800e896:	6879      	ldr	r1, [r7, #4]
 800e898:	440a      	add	r2, r1
 800e89a:	601a      	str	r2, [r3, #0]
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	73fb      	strb	r3, [r7, #15]
 800e8a2:	7bfb      	ldrb	r3, [r7, #15]
 800e8a4:	2b03      	cmp	r3, #3
 800e8a6:	d9f0      	bls.n	800e88a <mqtt_init_requests+0x22>
  }
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	0801be20 	.word	0x0801be20
 800e8b8:	0801bf8c 	.word	0x0801bf8c
 800e8bc:	0801be78 	.word	0x0801be78

0800e8c0 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	1c5a      	adds	r2, r3, #1
 800e8d2:	b291      	uxth	r1, r2
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	8011      	strh	r1, [r2, #0]
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	4413      	add	r3, r2
 800e8de:	78fa      	ldrb	r2, [r7, #3]
 800e8e0:	711a      	strb	r2, [r3, #4]
}
 800e8e2:	bf00      	nop
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bc80      	pop	{r7}
 800e8ea:	4770      	bx	lr

0800e8ec <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800e8f8:	887b      	ldrh	r3, [r7, #2]
 800e8fa:	0a1b      	lsrs	r3, r3, #8
 800e8fc:	b299      	uxth	r1, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	b290      	uxth	r0, r2
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	8010      	strh	r0, [r2, #0]
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	b2c9      	uxtb	r1, r1
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	4413      	add	r3, r2
 800e912:	460a      	mov	r2, r1
 800e914:	711a      	strb	r2, [r3, #4]
  mqtt_ringbuf_put(rb, value & 0xff);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	b291      	uxth	r1, r2
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	8011      	strh	r1, [r2, #0]
 800e922:	b2db      	uxtb	r3, r3
 800e924:	887a      	ldrh	r2, [r7, #2]
 800e926:	b2d1      	uxtb	r1, r2
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4413      	add	r3, r2
 800e92c:	460a      	mov	r2, r1
 800e92e:	711a      	strb	r2, [r3, #4]
}
 800e930:	bf00      	nop
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	bc80      	pop	{r7}
 800e938:	4770      	bx	lr

0800e93a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800e93a:	b480      	push	{r7}
 800e93c:	b087      	sub	sp, #28
 800e93e:	af00      	add	r7, sp, #0
 800e940:	60f8      	str	r0, [r7, #12]
 800e942:	60b9      	str	r1, [r7, #8]
 800e944:	4613      	mov	r3, r2
 800e946:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 800e948:	2300      	movs	r3, #0
 800e94a:	82fb      	strh	r3, [r7, #22]
 800e94c:	e011      	b.n	800e972 <mqtt_output_append_buf+0x38>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800e94e:	8afb      	ldrh	r3, [r7, #22]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	441a      	add	r2, r3
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	1c59      	adds	r1, r3, #1
 800e95a:	b288      	uxth	r0, r1
 800e95c:	68f9      	ldr	r1, [r7, #12]
 800e95e:	8008      	strh	r0, [r1, #0]
 800e960:	b2db      	uxtb	r3, r3
 800e962:	7811      	ldrb	r1, [r2, #0]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	4413      	add	r3, r2
 800e968:	460a      	mov	r2, r1
 800e96a:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 800e96c:	8afb      	ldrh	r3, [r7, #22]
 800e96e:	3301      	adds	r3, #1
 800e970:	82fb      	strh	r3, [r7, #22]
 800e972:	8afa      	ldrh	r2, [r7, #22]
 800e974:	88fb      	ldrh	r3, [r7, #6]
 800e976:	429a      	cmp	r2, r3
 800e978:	d3e9      	bcc.n	800e94e <mqtt_output_append_buf+0x14>
  }
}
 800e97a:	bf00      	nop
 800e97c:	bf00      	nop
 800e97e:	371c      	adds	r7, #28
 800e980:	46bd      	mov	sp, r7
 800e982:	bc80      	pop	{r7}
 800e984:	4770      	bx	lr

0800e986 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800e986:	b480      	push	{r7}
 800e988:	b087      	sub	sp, #28
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	4613      	mov	r3, r2
 800e992:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800e994:	88fb      	ldrh	r3, [r7, #6]
 800e996:	0a1b      	lsrs	r3, r3, #8
 800e998:	b299      	uxth	r1, r3
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	1c5a      	adds	r2, r3, #1
 800e9a0:	b290      	uxth	r0, r2
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	8010      	strh	r0, [r2, #0]
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	b2c9      	uxtb	r1, r1
 800e9aa:	68fa      	ldr	r2, [r7, #12]
 800e9ac:	4413      	add	r3, r2
 800e9ae:	460a      	mov	r2, r1
 800e9b0:	711a      	strb	r2, [r3, #4]
  mqtt_ringbuf_put(rb, length & 0xff);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	b291      	uxth	r1, r2
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	8011      	strh	r1, [r2, #0]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	88fa      	ldrh	r2, [r7, #6]
 800e9c2:	b2d1      	uxtb	r1, r2
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	460a      	mov	r2, r1
 800e9ca:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	82fb      	strh	r3, [r7, #22]
 800e9d0:	e011      	b.n	800e9f6 <mqtt_output_append_string+0x70>
    mqtt_ringbuf_put(rb, str[n]);
 800e9d2:	8afb      	ldrh	r3, [r7, #22]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	441a      	add	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	1c59      	adds	r1, r3, #1
 800e9de:	b288      	uxth	r0, r1
 800e9e0:	68f9      	ldr	r1, [r7, #12]
 800e9e2:	8008      	strh	r0, [r1, #0]
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	7811      	ldrb	r1, [r2, #0]
 800e9e8:	68fa      	ldr	r2, [r7, #12]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	460a      	mov	r2, r1
 800e9ee:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 800e9f0:	8afb      	ldrh	r3, [r7, #22]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	82fb      	strh	r3, [r7, #22]
 800e9f6:	8afa      	ldrh	r2, [r7, #22]
 800e9f8:	88fb      	ldrh	r3, [r7, #6]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d3e9      	bcc.n	800e9d2 <mqtt_output_append_string+0x4c>
  }
}
 800e9fe:	bf00      	nop
 800ea00:	bf00      	nop
 800ea02:	371c      	adds	r7, #28
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bc80      	pop	{r7}
 800ea08:	4770      	bx	lr

0800ea0a <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
                 u8_t qos, u8_t retain, u16_t r_length)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	4608      	mov	r0, r1
 800ea14:	4611      	mov	r1, r2
 800ea16:	461a      	mov	r2, r3
 800ea18:	4603      	mov	r3, r0
 800ea1a:	70fb      	strb	r3, [r7, #3]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	70bb      	strb	r3, [r7, #2]
 800ea20:	4613      	mov	r3, r2
 800ea22:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 800ea24:	78fb      	ldrb	r3, [r7, #3]
 800ea26:	011b      	lsls	r3, r3, #4
 800ea28:	b25a      	sxtb	r2, r3
 800ea2a:	78bb      	ldrb	r3, [r7, #2]
 800ea2c:	00db      	lsls	r3, r3, #3
 800ea2e:	b25b      	sxtb	r3, r3
 800ea30:	f003 0308 	and.w	r3, r3, #8
 800ea34:	b25b      	sxtb	r3, r3
 800ea36:	4313      	orrs	r3, r2
 800ea38:	b25a      	sxtb	r2, r3
 800ea3a:	787b      	ldrb	r3, [r7, #1]
 800ea3c:	005b      	lsls	r3, r3, #1
 800ea3e:	b25b      	sxtb	r3, r3
 800ea40:	f003 0306 	and.w	r3, r3, #6
 800ea44:	b25b      	sxtb	r3, r3
 800ea46:	4313      	orrs	r3, r2
 800ea48:	b25a      	sxtb	r2, r3
 800ea4a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800ea4e:	f003 0301 	and.w	r3, r3, #1
 800ea52:	b25b      	sxtb	r3, r3
 800ea54:	4313      	orrs	r3, r2
 800ea56:	b25b      	sxtb	r3, r3
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff ff2f 	bl	800e8c0 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800ea62:	8abb      	ldrh	r3, [r7, #20]
 800ea64:	b25b      	sxtb	r3, r3
 800ea66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	8aba      	ldrh	r2, [r7, #20]
 800ea6e:	2a7f      	cmp	r2, #127	; 0x7f
 800ea70:	d902      	bls.n	800ea78 <mqtt_output_append_fixed_header+0x6e>
 800ea72:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800ea76:	e000      	b.n	800ea7a <mqtt_output_append_fixed_header+0x70>
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7ff ff1c 	bl	800e8c0 <mqtt_output_append_u8>
    r_length >>= 7;
 800ea88:	8abb      	ldrh	r3, [r7, #20]
 800ea8a:	09db      	lsrs	r3, r3, #7
 800ea8c:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800ea8e:	8abb      	ldrh	r3, [r7, #20]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1e6      	bne.n	800ea62 <mqtt_output_append_fixed_header+0x58>
}
 800ea94:	bf00      	nop
 800ea96:	bf00      	nop
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
	...

0800eaa0 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800eaac:	887b      	ldrh	r3, [r7, #2]
 800eaae:	3301      	adds	r3, #1
 800eab0:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d106      	bne.n	800eac6 <mqtt_output_check_space+0x26>
 800eab8:	4b10      	ldr	r3, [pc, #64]	; (800eafc <mqtt_output_check_space+0x5c>)
 800eaba:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800eabe:	4910      	ldr	r1, [pc, #64]	; (800eb00 <mqtt_output_check_space+0x60>)
 800eac0:	4810      	ldr	r0, [pc, #64]	; (800eb04 <mqtt_output_check_space+0x64>)
 800eac2:	f00b fde1 	bl	801a688 <iprintf>

 /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800eac6:	89fb      	ldrh	r3, [r7, #14]
 800eac8:	3301      	adds	r3, #1
 800eaca:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800eacc:	887b      	ldrh	r3, [r7, #2]
 800eace:	09db      	lsrs	r3, r3, #7
 800ead0:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800ead2:	887b      	ldrh	r3, [r7, #2]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1f6      	bne.n	800eac6 <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800ead8:	89fa      	ldrh	r2, [r7, #14]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	8819      	ldrh	r1, [r3, #0]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	885b      	ldrh	r3, [r3, #2]
 800eae2:	1acb      	subs	r3, r1, r3
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800eaea:	429a      	cmp	r2, r3
 800eaec:	bfd4      	ite	le
 800eaee:	2301      	movle	r3, #1
 800eaf0:	2300      	movgt	r3, #0
 800eaf2:	b2db      	uxtb	r3, r3
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3710      	adds	r7, #16
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	0801be20 	.word	0x0801be20
 800eb00:	0801bfb0 	.word	0x0801bfb0
 800eb04:	0801be78 	.word	0x0801be78

0800eb08 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	460b      	mov	r3, r1
 800eb12:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d106      	bne.n	800eb28 <mqtt_close+0x20>
 800eb1a:	4b27      	ldr	r3, [pc, #156]	; (800ebb8 <mqtt_close+0xb0>)
 800eb1c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 800eb20:	4926      	ldr	r1, [pc, #152]	; (800ebbc <mqtt_close+0xb4>)
 800eb22:	4827      	ldr	r0, [pc, #156]	; (800ebc0 <mqtt_close+0xb8>)
 800eb24:	f00b fdb0 	bl	801a688 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d024      	beq.n	800eb7a <mqtt_close+0x72>
    err_t res;
    tcp_recv(client->conn, NULL);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	2100      	movs	r1, #0
 800eb36:	4618      	mov	r0, r3
 800eb38:	f004 f870 	bl	8012c1c <tcp_recv>
    tcp_err(client->conn,  NULL);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	2100      	movs	r1, #0
 800eb42:	4618      	mov	r0, r3
 800eb44:	f004 f8ac 	bl	8012ca0 <tcp_err>
    tcp_sent(client->conn, NULL);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f004 f886 	bl	8012c60 <tcp_sent>
    res = tcp_close(client->conn);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f002 fef1 	bl	8011940 <tcp_close>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800eb62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d004      	beq.n	800eb74 <mqtt_close+0x6c>
      tcp_abort(client->conn);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f002 ffb0 	bl	8011ad4 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	3318      	adds	r3, #24
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff fe48 	bl	800e814 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800eb84:	6879      	ldr	r1, [r7, #4]
 800eb86:	480f      	ldr	r0, [pc, #60]	; (800ebc4 <mqtt_close+0xbc>)
 800eb88:	f008 f8f0 	bl	8016d6c <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7a9b      	ldrb	r3, [r3, #10]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00d      	beq.n	800ebb0 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	695b      	ldr	r3, [r3, #20]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d006      	beq.n	800ebb0 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	6911      	ldr	r1, [r2, #16]
 800ebaa:	887a      	ldrh	r2, [r7, #2]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	4798      	blx	r3
    }
  }
}
 800ebb0:	bf00      	nop
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}
 800ebb8:	0801be20 	.word	0x0801be20
 800ebbc:	0801bfd4 	.word	0x0801bfd4
 800ebc0:	0801be78 	.word	0x0801be78
 800ebc4:	0800ebc9 	.word	0x0800ebc9

0800ebc8 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af02      	add	r7, sp, #8
 800ebce:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d106      	bne.n	800ebec <mqtt_cyclic_timer+0x24>
 800ebde:	4b42      	ldr	r3, [pc, #264]	; (800ece8 <mqtt_cyclic_timer+0x120>)
 800ebe0:	f240 2225 	movw	r2, #549	; 0x225
 800ebe4:	4941      	ldr	r1, [pc, #260]	; (800ecec <mqtt_cyclic_timer+0x124>)
 800ebe6:	4842      	ldr	r0, [pc, #264]	; (800ecf0 <mqtt_cyclic_timer+0x128>)
 800ebe8:	f00b fd4e 	bl	801a688 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	7a9b      	ldrb	r3, [r3, #10]
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d115      	bne.n	800ec20 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	881b      	ldrh	r3, [r3, #0]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	881b      	ldrh	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	4613      	mov	r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4413      	add	r3, r2
 800ec0c:	2b63      	cmp	r3, #99	; 0x63
 800ec0e:	dd5e      	ble.n	800ecce <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800ec10:	f240 1101 	movw	r1, #257	; 0x101
 800ec14:	68b8      	ldr	r0, [r7, #8]
 800ec16:	f7ff ff77 	bl	800eb08 <mqtt_close>
      restart_timer = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	73fb      	strb	r3, [r7, #15]
 800ec1e:	e056      	b.n	800ecce <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	7a9b      	ldrb	r3, [r3, #10]
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d150      	bne.n	800ecca <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	3318      	adds	r3, #24
 800ec2c:	2105      	movs	r1, #5
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff fd9e 	bl	800e770 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	885b      	ldrh	r3, [r3, #2]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d048      	beq.n	800ecce <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	889b      	ldrh	r3, [r3, #4]
 800ec40:	3301      	adds	r3, #1
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive/2)) {
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	889b      	ldrh	r3, [r3, #4]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	4613      	mov	r3, r2
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	441a      	add	r2, r3
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	885b      	ldrh	r3, [r3, #2]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	885b      	ldrh	r3, [r3, #2]
 800ec5e:	085b      	lsrs	r3, r3, #1
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	440b      	add	r3, r1
 800ec64:	429a      	cmp	r2, r3
 800ec66:	dd06      	ble.n	800ec76 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800ec68:	f240 1101 	movw	r1, #257	; 0x101
 800ec6c:	68b8      	ldr	r0, [r7, #8]
 800ec6e:	f7ff ff4b 	bl	800eb08 <mqtt_close>
        restart_timer = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	881b      	ldrh	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	4613      	mov	r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	4413      	add	r3, r2
 800ec82:	68ba      	ldr	r2, [r7, #8]
 800ec84:	8852      	ldrh	r2, [r2, #2]
 800ec86:	4293      	cmp	r3, r2
 800ec88:	db18      	blt.n	800ecbc <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	33ec      	adds	r3, #236	; 0xec
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7ff ff05 	bl	800eaa0 <mqtt_output_check_space>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d018      	beq.n	800ecce <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800eca2:	2300      	movs	r3, #0
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	2300      	movs	r3, #0
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	2300      	movs	r3, #0
 800ecac:	2200      	movs	r2, #0
 800ecae:	210c      	movs	r1, #12
 800ecb0:	f7ff feab 	bl	800ea0a <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	801a      	strh	r2, [r3, #0]
 800ecba:	e008      	b.n	800ecce <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	881b      	ldrh	r3, [r3, #0]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	801a      	strh	r2, [r3, #0]
 800ecc8:	e001      	b.n	800ecce <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d005      	beq.n	800ece0 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	4907      	ldr	r1, [pc, #28]	; (800ecf4 <mqtt_cyclic_timer+0x12c>)
 800ecd8:	f241 3088 	movw	r0, #5000	; 0x1388
 800ecdc:	f007 ffa2 	bl	8016c24 <sys_timeout>
  }
}
 800ece0:	bf00      	nop
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	0801be20 	.word	0x0801be20
 800ecec:	0801bff0 	.word	0x0801bff0
 800ecf0:	0801be78 	.word	0x0801be78
 800ecf4:	0800ebc9 	.word	0x0800ebc9

0800ecf8 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b086      	sub	sp, #24
 800ecfc:	af02      	add	r7, sp, #8
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	4608      	mov	r0, r1
 800ed02:	4611      	mov	r1, r2
 800ed04:	461a      	mov	r2, r3
 800ed06:	4603      	mov	r3, r0
 800ed08:	70fb      	strb	r3, [r7, #3]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	803b      	strh	r3, [r7, #0]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	33ec      	adds	r3, #236	; 0xec
 800ed1a:	2102      	movs	r1, #2
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff febf 	bl	800eaa0 <mqtt_output_check_space>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d01c      	beq.n	800ed62 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ed2e:	78bb      	ldrb	r3, [r7, #2]
 800ed30:	78f9      	ldrb	r1, [r7, #3]
 800ed32:	2202      	movs	r2, #2
 800ed34:	9201      	str	r2, [sp, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	9200      	str	r2, [sp, #0]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f7ff fe65 	bl	800ea0a <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	33ec      	adds	r3, #236	; 0xec
 800ed44:	883a      	ldrh	r2, [r7, #0]
 800ed46:	4611      	mov	r1, r2
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff fdcf 	bl	800e8ec <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f7ff fb7c 	bl	800e458 <mqtt_output_send>
 800ed60:	e001      	b.n	800ed66 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                  mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800ed62:	23ff      	movs	r3, #255	; 0xff
 800ed64:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800ed66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00c      	beq.n	800eda0 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	6890      	ldr	r0, [r2, #8]
 800ed8e:	78fa      	ldrb	r2, [r7, #3]
 800ed90:	2a02      	cmp	r2, #2
 800ed92:	d801      	bhi.n	800ed98 <mqtt_incomming_suback+0x26>
 800ed94:	2200      	movs	r2, #0
 800ed96:	e001      	b.n	800ed9c <mqtt_incomming_suback+0x2a>
 800ed98:	f06f 020c 	mvn.w	r2, #12
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	4798      	blx	r3
  }
}
 800eda0:	bf00      	nop
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
  mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800eda8:	b590      	push	{r4, r7, lr}
 800edaa:	b08d      	sub	sp, #52	; 0x34
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	607b      	str	r3, [r7, #4]
 800edb2:	460b      	mov	r3, r1
 800edb4:	72fb      	strb	r3, [r7, #11]
 800edb6:	4613      	mov	r3, r2
 800edb8:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800edba:	2300      	movs	r3, #0
 800edbc:	85fb      	strh	r3, [r7, #46]	; 0x2e

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800edc4:	7afb      	ldrb	r3, [r7, #11]
 800edc6:	4413      	add	r3, r2
 800edc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800edd0:	091b      	lsrs	r3, r3, #4
 800edd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  u16_t pkt_id = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	843b      	strh	r3, [r7, #32]

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800edda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d11f      	bne.n	800ee22 <mqtt_message_received+0x7a>
    if (client->conn_state == MQTT_CONNECTING) {
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	7a9b      	ldrb	r3, [r3, #10]
 800ede6:	2b02      	cmp	r3, #2
 800ede8:	f040 8119 	bne.w	800f01e <mqtt_message_received+0x276>
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	3301      	adds	r3, #1
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800edf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f040 8111 	bne.w	800f01e <mqtt_message_received+0x276>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2200      	movs	r2, #0
 800ee00:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2203      	movs	r2, #3
 800ee06:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	695b      	ldr	r3, [r3, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f000 8106 	beq.w	800f01e <mqtt_message_received+0x276>
          client->connect_cb(client, client->connect_arg, res);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	68fa      	ldr	r2, [r7, #12]
 800ee18:	6911      	ldr	r1, [r2, #16]
 800ee1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	4798      	blx	r3
 800ee20:	e0fd      	b.n	800f01e <mqtt_message_received+0x276>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800ee22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee26:	2b0d      	cmp	r3, #13
 800ee28:	f000 80f9 	beq.w	800f01e <mqtt_message_received+0x276>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800ee2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	f040 8096 	bne.w	800ef62 <mqtt_message_received+0x1ba>
    u16_t payload_offset = 0;
 800ee36:	2300      	movs	r3, #0
 800ee38:	85bb      	strh	r3, [r7, #44]	; 0x2c
    u16_t payload_length = length;
 800ee3a:	893b      	ldrh	r3, [r7, #8]
 800ee3c:	857b      	strh	r3, [r7, #42]	; 0x2a
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ee44:	105b      	asrs	r3, r3, #1
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	f003 0303 	and.w	r3, r3, #3
 800ee4c:	76fb      	strb	r3, [r7, #27]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee52:	2b80      	cmp	r3, #128	; 0x80
 800ee54:	d85a      	bhi.n	800ef0c <mqtt_message_received+0x164>
      /* Should have topic and pkt id*/
      uint8_t *topic;
      uint16_t after_topic;
      u8_t bkp;
      u16_t topic_len = var_hdr_payload[0];
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	833b      	strh	r3, [r7, #24]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800ee5c:	8b3b      	ldrh	r3, [r7, #24]
 800ee5e:	021b      	lsls	r3, r3, #8
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee64:	3301      	adds	r3, #1
 800ee66:	781b      	ldrb	r3, [r3, #0]
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	4413      	add	r3, r2
 800ee6c:	833b      	strh	r3, [r7, #24]

      topic = var_hdr_payload + 2;
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee70:	3302      	adds	r3, #2
 800ee72:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800ee74:	8b3b      	ldrh	r3, [r7, #24]
 800ee76:	3302      	adds	r3, #2
 800ee78:	853b      	strh	r3, [r7, #40]	; 0x28
      /* Check length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos? 2 : 1)) > length) {
 800ee7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee7c:	7efa      	ldrb	r2, [r7, #27]
 800ee7e:	2a00      	cmp	r2, #0
 800ee80:	d001      	beq.n	800ee86 <mqtt_message_received+0xde>
 800ee82:	2202      	movs	r2, #2
 800ee84:	e000      	b.n	800ee88 <mqtt_message_received+0xe0>
 800ee86:	2201      	movs	r2, #1
 800ee88:	441a      	add	r2, r3
 800ee8a:	893b      	ldrh	r3, [r7, #8]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	f300 80c8 	bgt.w	800f022 <mqtt_message_received+0x27a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800ee92:	7efb      	ldrb	r3, [r7, #27]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d014      	beq.n	800eec2 <mqtt_message_received+0x11a>
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800ee98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee9c:	4413      	add	r3, r2
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	021b      	lsls	r3, r3, #8
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eea8:	3301      	adds	r3, #1
 800eeaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eeac:	440b      	add	r3, r1
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	4413      	add	r3, r2
 800eeb4:	b29a      	uxth	r2, r3
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800eeba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eebc:	3302      	adds	r3, #2
 800eebe:	853b      	strh	r3, [r7, #40]	; 0x28
 800eec0:	e002      	b.n	800eec8 <mqtt_message_received+0x120>
      } else {
        client->inpub_pkt_id = 0;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2200      	movs	r2, #0
 800eec6:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800eec8:	8b3b      	ldrh	r3, [r7, #24]
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	4413      	add	r3, r2
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800eed2:	8b3b      	ldrh	r3, [r7, #24]
 800eed4:	697a      	ldr	r2, [r7, #20]
 800eed6:	4413      	add	r3, r2
 800eed8:	2200      	movs	r2, #0
 800eeda:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800eedc:	893a      	ldrh	r2, [r7, #8]
 800eede:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	857b      	strh	r3, [r7, #42]	; 0x2a
      payload_offset = after_topic;
 800eee4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eee6:	85bb      	strh	r3, [r7, #44]	; 0x2c

      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %d\n",
                                    qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d008      	beq.n	800ef02 <mqtt_message_received+0x15a>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800eef8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	440a      	add	r2, r1
 800eefe:	6979      	ldr	r1, [r7, #20]
 800ef00:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800ef02:	8b3b      	ldrh	r3, [r7, #24]
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	4413      	add	r3, r2
 800ef08:	7cfa      	ldrb	r2, [r7, #19]
 800ef0a:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800ef0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d103      	bne.n	800ef1a <mqtt_message_received+0x172>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f040 8082 	bne.w	800f01e <mqtt_message_received+0x276>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800ef22:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ef24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef26:	18d1      	adds	r1, r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	bf0c      	ite	eq
 800ef2e:	2301      	moveq	r3, #1
 800ef30:	2300      	movne	r3, #0
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ef36:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d16f      	bne.n	800f01e <mqtt_message_received+0x276>
 800ef3e:	7efb      	ldrb	r3, [r7, #27]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d06c      	beq.n	800f01e <mqtt_message_received+0x276>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800ef44:	7efb      	ldrb	r3, [r7, #27]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d101      	bne.n	800ef4e <mqtt_message_received+0x1a6>
 800ef4a:	2304      	movs	r3, #4
 800ef4c:	e000      	b.n	800ef50 <mqtt_message_received+0x1a8>
 800ef4e:	2305      	movs	r3, #5
 800ef50:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                      mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	891a      	ldrh	r2, [r3, #8]
 800ef56:	7cb9      	ldrb	r1, [r7, #18]
 800ef58:	2300      	movs	r3, #0
 800ef5a:	68f8      	ldr	r0, [r7, #12]
 800ef5c:	f7ff fecc 	bl	800ecf8 <pub_ack_rec_rel_response>
 800ef60:	e05d      	b.n	800f01e <mqtt_message_received+0x276>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	021b      	lsls	r3, r3, #8
 800ef6a:	843b      	strh	r3, [r7, #32]
    pkt_id |= (u16_t)var_hdr_payload[1];
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	3301      	adds	r3, #1
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	8c3b      	ldrh	r3, [r7, #32]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	843b      	strh	r3, [r7, #32]
    if (pkt_id == 0) {
 800ef7a:	8c3b      	ldrh	r3, [r7, #32]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d052      	beq.n	800f026 <mqtt_message_received+0x27e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800ef80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef84:	2b05      	cmp	r3, #5
 800ef86:	d106      	bne.n	800ef96 <mqtt_message_received+0x1ee>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n",pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800ef88:	8c3a      	ldrh	r2, [r7, #32]
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	2106      	movs	r1, #6
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f7ff feb2 	bl	800ecf8 <pub_ack_rec_rel_response>
 800ef94:	e043      	b.n	800f01e <mqtt_message_received+0x276>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800ef96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ef9a:	2b06      	cmp	r3, #6
 800ef9c:	d106      	bne.n	800efac <mqtt_message_received+0x204>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n",pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800ef9e:	8c3a      	ldrh	r2, [r7, #32]
 800efa0:	2300      	movs	r3, #0
 800efa2:	2107      	movs	r1, #7
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f7ff fea7 	bl	800ecf8 <pub_ack_rec_rel_response>
 800efaa:	e038      	b.n	800f01e <mqtt_message_received+0x276>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800efac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efb0:	2b09      	cmp	r3, #9
 800efb2:	d00b      	beq.n	800efcc <mqtt_message_received+0x224>
 800efb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efb8:	2b0b      	cmp	r3, #11
 800efba:	d007      	beq.n	800efcc <mqtt_message_received+0x224>
 800efbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efc0:	2b07      	cmp	r3, #7
 800efc2:	d003      	beq.n	800efcc <mqtt_message_received+0x224>
              pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800efc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efc8:	2b04      	cmp	r3, #4
 800efca:	d12e      	bne.n	800f02a <mqtt_message_received+0x282>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	3318      	adds	r3, #24
 800efd0:	8c3a      	ldrh	r2, [r7, #32]
 800efd2:	4611      	mov	r1, r2
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff fb79 	bl	800e6cc <mqtt_take_request>
 800efda:	61f8      	str	r0, [r7, #28]
      if (r != NULL) {
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d01c      	beq.n	800f01c <mqtt_message_received+0x274>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800efe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efe6:	2b09      	cmp	r3, #9
 800efe8:	d10a      	bne.n	800f000 <mqtt_message_received+0x258>
          if (length < 3) {
 800efea:	893b      	ldrh	r3, [r7, #8]
 800efec:	2b02      	cmp	r3, #2
 800efee:	d91e      	bls.n	800f02e <mqtt_message_received+0x286>
            LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	3302      	adds	r3, #2
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	4619      	mov	r1, r3
 800eff8:	69f8      	ldr	r0, [r7, #28]
 800effa:	f7ff feba 	bl	800ed72 <mqtt_incomming_suback>
 800effe:	e00a      	b.n	800f016 <mqtt_message_received+0x26e>
          }
        } else if (r->cb != NULL) {
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d006      	beq.n	800f016 <mqtt_message_received+0x26e>
          r->cb(r->arg, ERR_OK);
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	69fa      	ldr	r2, [r7, #28]
 800f00e:	6892      	ldr	r2, [r2, #8]
 800f010:	2100      	movs	r1, #0
 800f012:	4610      	mov	r0, r2
 800f014:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800f016:	69f8      	ldr	r0, [r7, #28]
 800f018:	f7ff fb48 	bl	800e6ac <mqtt_delete_request>
              pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800f01c:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800f01e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f020:	e008      	b.n	800f034 <mqtt_message_received+0x28c>
        goto out_disconnect;
 800f022:	bf00      	nop
 800f024:	e004      	b.n	800f030 <mqtt_message_received+0x288>
      goto out_disconnect;
 800f026:	bf00      	nop
 800f028:	e002      	b.n	800f030 <mqtt_message_received+0x288>
      goto out_disconnect;
 800f02a:	bf00      	nop
 800f02c:	e000      	b.n	800f030 <mqtt_message_received+0x288>
            goto out_disconnect;
 800f02e:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800f030:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800f034:	4618      	mov	r0, r3
 800f036:	3734      	adds	r7, #52	; 0x34
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd90      	pop	{r4, r7, pc}

0800f03c <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b088      	sub	sp, #32
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800f052:	2300      	movs	r3, #0
 800f054:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800f056:	e0bc      	b.n	800f1d2 <mqtt_parse_incoming+0x196>
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800f058:	7dfb      	ldrb	r3, [r7, #23]
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d903      	bls.n	800f066 <mqtt_parse_incoming+0x2a>
 800f05e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800f062:	2b00      	cmp	r3, #0
 800f064:	da4d      	bge.n	800f102 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800f066:	7dfa      	ldrb	r2, [r7, #23]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d206      	bcs.n	800f07e <mqtt_parse_incoming+0x42>
        b = client->rx_buffer[fixed_hdr_idx];
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	687a      	ldr	r2, [r7, #4]
 800f074:	4413      	add	r3, r2
 800f076:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f07a:	75bb      	strb	r3, [r7, #22]
 800f07c:	e012      	b.n	800f0a4 <mqtt_parse_incoming+0x68>
      } else {
        b = pbuf_get_at(p, in_offset++);
 800f07e:	8bfb      	ldrh	r3, [r7, #30]
 800f080:	1c5a      	adds	r2, r3, #1
 800f082:	83fa      	strh	r2, [r7, #30]
 800f084:	4619      	mov	r1, r3
 800f086:	6838      	ldr	r0, [r7, #0]
 800f088:	f002 fa5c 	bl	8011544 <pbuf_get_at>
 800f08c:	4603      	mov	r3, r0
 800f08e:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f094:	1c59      	adds	r1, r3, #1
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	6691      	str	r1, [r2, #104]	; 0x68
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	4413      	add	r3, r2
 800f09e:	7dba      	ldrb	r2, [r7, #22]
 800f0a0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	f240 8090 	bls.w	800f1d2 <mqtt_parse_incoming+0x196>
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800f0b2:	7dbb      	ldrb	r3, [r7, #22]
 800f0b4:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800f0b8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ba:	1e9a      	subs	r2, r3, #2
 800f0bc:	4613      	mov	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	1a9b      	subs	r3, r3, r2
 800f0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800f0c6:	69ba      	ldr	r2, [r7, #24]
 800f0c8:	4313      	orrs	r3, r2
 800f0ca:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800f0cc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	db7e      	blt.n	800f1d2 <mqtt_parse_incoming+0x196>
          LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_parse_incoming: Remaining length after fixed header: %d\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10b      	bne.n	800f0f2 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800f0da:	7df9      	ldrb	r1, [r7, #23]
 800f0dc:	2300      	movs	r3, #0
 800f0de:	2200      	movs	r2, #0
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f7ff fe61 	bl	800eda8 <mqtt_message_received>
            client->msg_idx = 0;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	75fb      	strb	r3, [r7, #23]
 800f0f0:	e06f      	b.n	800f1d2 <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800f0f2:	7dfa      	ldrb	r2, [r7, #23]
 800f0f4:	69bb      	ldr	r3, [r7, #24]
 800f0f6:	441a      	add	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800f100:	e067      	b.n	800f1d2 <mqtt_parse_incoming+0x196>
        }
      }
    } else {
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f106:	7dfb      	ldrb	r3, [r7, #23]
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	7dfa      	ldrb	r2, [r7, #23]
 800f10c:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800f110:	fbb3 f1f2 	udiv	r1, r3, r2
 800f114:	fb01 f202 	mul.w	r2, r1, r2
 800f118:	1a9b      	subs	r3, r3, r2
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
 800f11e:	b29b      	uxth	r3, r3
 800f120:	4413      	add	r3, r2
 800f122:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	891a      	ldrh	r2, [r3, #8]
 800f128:	8bfb      	ldrh	r3, [r7, #30]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	461a      	mov	r2, r3
 800f130:	69bb      	ldr	r3, [r7, #24]
 800f132:	4293      	cmp	r3, r2
 800f134:	d905      	bls.n	800f142 <mqtt_parse_incoming+0x106>
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	891a      	ldrh	r2, [r3, #8]
 800f13a:	8bfb      	ldrh	r3, [r7, #30]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	b29b      	uxth	r3, r3
 800f140:	e001      	b.n	800f146 <mqtt_parse_incoming+0x10a>
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	b29b      	uxth	r3, r3
 800f146:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800f148:	8a7b      	ldrh	r3, [r7, #18]
 800f14a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800f14e:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800f150:	8aba      	ldrh	r2, [r7, #20]
 800f152:	8a3b      	ldrh	r3, [r7, #16]
 800f154:	429a      	cmp	r2, r3
 800f156:	d901      	bls.n	800f15c <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800f158:	8a3b      	ldrh	r3, [r7, #16]
 800f15a:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800f162:	8a7b      	ldrh	r3, [r7, #18]
 800f164:	18d1      	adds	r1, r2, r3
 800f166:	8bfb      	ldrh	r3, [r7, #30]
 800f168:	8aba      	ldrh	r2, [r7, #20]
 800f16a:	6838      	ldr	r0, [r7, #0]
 800f16c:	f002 f948 	bl	8011400 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f174:	8abb      	ldrh	r3, [r7, #20]
 800f176:	441a      	add	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800f17c:	8bfa      	ldrh	r2, [r7, #30]
 800f17e:	8abb      	ldrh	r3, [r7, #20]
 800f180:	4413      	add	r3, r2
 800f182:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800f184:	8abb      	ldrh	r3, [r7, #20]
 800f186:	69ba      	ldr	r2, [r7, #24]
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_parse_incoming: msg_idx: %d, cpy_len: %d, remaining %d\n", client->msg_idx, cpy_len, msg_rem_len));
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d003      	beq.n	800f19a <mqtt_parse_incoming+0x15e>
 800f192:	8aba      	ldrh	r2, [r7, #20]
 800f194:	8a3b      	ldrh	r3, [r7, #16]
 800f196:	429a      	cmp	r2, r3
 800f198:	d11b      	bne.n	800f1d2 <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800f19a:	8a7a      	ldrh	r2, [r7, #18]
 800f19c:	8abb      	ldrh	r3, [r7, #20]
 800f19e:	4413      	add	r3, r2
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	7dfb      	ldrb	r3, [r7, #23]
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	b29a      	uxth	r2, r3
 800f1aa:	7df9      	ldrb	r1, [r7, #23]
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f7ff fdfa 	bl	800eda8 <mqtt_message_received>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800f1b8:	89fb      	ldrh	r3, [r7, #14]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <mqtt_parse_incoming+0x186>
          return res;
 800f1be:	89fb      	ldrh	r3, [r7, #14]
 800f1c0:	e00e      	b.n	800f1e0 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d104      	bne.n	800f1d2 <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	891b      	ldrh	r3, [r3, #8]
 800f1d6:	8bfa      	ldrh	r2, [r7, #30]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	f4ff af3d 	bcc.w	800f058 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800f1de:	2300      	movs	r3, #0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3720      	adds	r7, #32
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	60b9      	str	r1, [r7, #8]
 800f1f2:	607a      	str	r2, [r7, #4]
 800f1f4:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d106      	bne.n	800f20e <mqtt_tcp_recv_cb+0x26>
 800f200:	4b24      	ldr	r3, [pc, #144]	; (800f294 <mqtt_tcp_recv_cb+0xac>)
 800f202:	f240 325f 	movw	r2, #863	; 0x35f
 800f206:	4924      	ldr	r1, [pc, #144]	; (800f298 <mqtt_tcp_recv_cb+0xb0>)
 800f208:	4824      	ldr	r0, [pc, #144]	; (800f29c <mqtt_tcp_recv_cb+0xb4>)
 800f20a:	f00b fa3d 	bl	801a688 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	429a      	cmp	r2, r3
 800f216:	d006      	beq.n	800f226 <mqtt_tcp_recv_cb+0x3e>
 800f218:	4b1e      	ldr	r3, [pc, #120]	; (800f294 <mqtt_tcp_recv_cb+0xac>)
 800f21a:	f44f 7258 	mov.w	r2, #864	; 0x360
 800f21e:	4920      	ldr	r1, [pc, #128]	; (800f2a0 <mqtt_tcp_recv_cb+0xb8>)
 800f220:	481e      	ldr	r0, [pc, #120]	; (800f29c <mqtt_tcp_recv_cb+0xb4>)
 800f222:	f00b fa31 	bl	801a688 <iprintf>

  if (p == NULL) {
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d105      	bne.n	800f238 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800f22c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f230:	6978      	ldr	r0, [r7, #20]
 800f232:	f7ff fc69 	bl	800eb08 <mqtt_close>
 800f236:	e027      	b.n	800f288 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800f238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d005      	beq.n	800f24c <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f001 fee3 	bl	801100c <pbuf_free>
      return err;
 800f246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f24a:	e01e      	b.n	800f28a <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    tcp_recved(pcb, p->tot_len);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	891b      	ldrh	r3, [r3, #8]
 800f250:	4619      	mov	r1, r3
 800f252:	68b8      	ldr	r0, [r7, #8]
 800f254:	f002 fde4 	bl	8011e20 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800f258:	6879      	ldr	r1, [r7, #4]
 800f25a:	6978      	ldr	r0, [r7, #20]
 800f25c:	f7ff feee 	bl	800f03c <mqtt_parse_incoming>
 800f260:	4603      	mov	r3, r0
 800f262:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f001 fed1 	bl	801100c <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800f26a:	8a7b      	ldrh	r3, [r7, #18]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d004      	beq.n	800f27a <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800f270:	8a7b      	ldrh	r3, [r7, #18]
 800f272:	4619      	mov	r1, r3
 800f274:	6978      	ldr	r0, [r7, #20]
 800f276:	f7ff fc47 	bl	800eb08 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	885b      	ldrh	r3, [r3, #2]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d002      	beq.n	800f288 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2200      	movs	r2, #0
 800f286:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3718      	adds	r7, #24
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
 800f292:	bf00      	nop
 800f294:	0801be20 	.word	0x0801be20
 800f298:	0801c014 	.word	0x0801c014
 800f29c:	0801be78 	.word	0x0801be78
 800f2a0:	0801c038 	.word	0x0801c038

0800f2a4 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b086      	sub	sp, #24
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	7a9b      	ldrb	r3, [r3, #10]
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d127      	bne.n	800f30e <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800f2ca:	e00d      	b.n	800f2e8 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d006      	beq.n	800f2e2 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	693a      	ldr	r2, [r7, #16]
 800f2da:	6892      	ldr	r2, [r2, #8]
 800f2dc:	2100      	movs	r1, #0
 800f2de:	4610      	mov	r0, r2
 800f2e0:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800f2e2:	6938      	ldr	r0, [r7, #16]
 800f2e4:	f7ff f9e2 	bl	800e6ac <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	3318      	adds	r3, #24
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7ff f9ec 	bl	800e6cc <mqtt_take_request>
 800f2f4:	6138      	str	r0, [r7, #16]
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d1e7      	bne.n	800f2cc <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	4619      	mov	r1, r3
 800f308:	4610      	mov	r0, r2
 800f30a:	f7ff f8a5 	bl	800e458 <mqtt_output_send>
  }
  return ERR_OK;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	3718      	adds	r7, #24
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d106      	bne.n	800f33c <mqtt_tcp_err_cb+0x24>
 800f32e:	4b09      	ldr	r3, [pc, #36]	; (800f354 <mqtt_tcp_err_cb+0x3c>)
 800f330:	f240 32ae 	movw	r2, #942	; 0x3ae
 800f334:	4908      	ldr	r1, [pc, #32]	; (800f358 <mqtt_tcp_err_cb+0x40>)
 800f336:	4809      	ldr	r0, [pc, #36]	; (800f35c <mqtt_tcp_err_cb+0x44>)
 800f338:	f00b f9a6 	bl	801a688 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2200      	movs	r2, #0
 800f340:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800f342:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f346:	68f8      	ldr	r0, [r7, #12]
 800f348:	f7ff fbde 	bl	800eb08 <mqtt_close>
}
 800f34c:	bf00      	nop
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	0801be20 	.word	0x0801be20
 800f358:	0801c060 	.word	0x0801c060
 800f35c:	0801be78 	.word	0x0801be78

0800f360 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct tcp_pcb *tpcb)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	7a9b      	ldrb	r3, [r3, #10]
 800f372:	2b03      	cmp	r3, #3
 800f374:	d105      	bne.n	800f382 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	33ec      	adds	r3, #236	; 0xec
 800f37a:	6839      	ldr	r1, [r7, #0]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff f86b 	bl	800e458 <mqtt_output_send>
  }
  return ERR_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3710      	adds	r7, #16
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	4613      	mov	r3, r2
 800f398:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t* client = (mqtt_client_t *)arg;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800f39e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d002      	beq.n	800f3ac <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800f3a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f3aa:	e025      	b.n	800f3f8 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  tcp_recv(tpcb, mqtt_tcp_recv_cb);
 800f3b2:	4913      	ldr	r1, [pc, #76]	; (800f400 <mqtt_tcp_connect_cb+0x74>)
 800f3b4:	68b8      	ldr	r0, [r7, #8]
 800f3b6:	f003 fc31 	bl	8012c1c <tcp_recv>
  tcp_sent(tpcb, mqtt_tcp_sent_cb);
 800f3ba:	4912      	ldr	r1, [pc, #72]	; (800f404 <mqtt_tcp_connect_cb+0x78>)
 800f3bc:	68b8      	ldr	r0, [r7, #8]
 800f3be:	f003 fc4f 	bl	8012c60 <tcp_sent>
  tcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800f3c2:	2202      	movs	r2, #2
 800f3c4:	4910      	ldr	r1, [pc, #64]	; (800f408 <mqtt_tcp_connect_cb+0x7c>)
 800f3c6:	68b8      	ldr	r0, [r7, #8]
 800f3c8:	f003 fca2 	bl	8012d10 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	2202      	movs	r2, #2
 800f3d0:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	490d      	ldr	r1, [pc, #52]	; (800f40c <mqtt_tcp_connect_cb+0x80>)
 800f3d6:	f241 3088 	movw	r0, #5000	; 0x1388
 800f3da:	f007 fc23 	bl	8016c24 <sys_timeout>
  client->cyclic_tick = 0;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f3ea:	697b      	ldr	r3, [r7, #20]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	f7ff f831 	bl	800e458 <mqtt_output_send>

  return ERR_OK;
 800f3f6:	2300      	movs	r3, #0
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3718      	adds	r7, #24
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	0800f1e9 	.word	0x0800f1e9
 800f404:	0800f2a5 	.word	0x0800f2a5
 800f408:	0800f361 	.word	0x0800f361
 800f40c:	0800ebc9 	.word	0x0800ebc9

0800f410 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08c      	sub	sp, #48	; 0x30
 800f414:	af02      	add	r7, sp, #8
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	807b      	strh	r3, [r7, #2]
  size_t topic_strlen;
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d106      	bne.n	800f432 <mqtt_publish+0x22>
 800f424:	4b5c      	ldr	r3, [pc, #368]	; (800f598 <mqtt_publish+0x188>)
 800f426:	f240 420b 	movw	r2, #1035	; 0x40b
 800f42a:	495c      	ldr	r1, [pc, #368]	; (800f59c <mqtt_publish+0x18c>)
 800f42c:	485c      	ldr	r0, [pc, #368]	; (800f5a0 <mqtt_publish+0x190>)
 800f42e:	f00b f92b 	bl	801a688 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d106      	bne.n	800f446 <mqtt_publish+0x36>
 800f438:	4b57      	ldr	r3, [pc, #348]	; (800f598 <mqtt_publish+0x188>)
 800f43a:	f240 420c 	movw	r2, #1036	; 0x40c
 800f43e:	4959      	ldr	r1, [pc, #356]	; (800f5a4 <mqtt_publish+0x194>)
 800f440:	4857      	ldr	r0, [pc, #348]	; (800f5a0 <mqtt_publish+0x190>)
 800f442:	f00b f921 	bl	801a688 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	7a9b      	ldrb	r3, [r3, #10]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d109      	bne.n	800f462 <mqtt_publish+0x52>
 800f44e:	4b52      	ldr	r3, [pc, #328]	; (800f598 <mqtt_publish+0x188>)
 800f450:	f240 420d 	movw	r2, #1037	; 0x40d
 800f454:	4954      	ldr	r1, [pc, #336]	; (800f5a8 <mqtt_publish+0x198>)
 800f456:	4852      	ldr	r0, [pc, #328]	; (800f5a0 <mqtt_publish+0x190>)
 800f458:	f00b f916 	bl	801a688 <iprintf>
 800f45c:	f06f 030a 	mvn.w	r3, #10
 800f460:	e095      	b.n	800f58e <mqtt_publish+0x17e>

  topic_strlen = strlen(topic);
 800f462:	68b8      	ldr	r0, [r7, #8]
 800f464:	f7f0 febe 	bl	80001e4 <strlen>
 800f468:	6238      	str	r0, [r7, #32]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800f46a:	6a3b      	ldr	r3, [r7, #32]
 800f46c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800f470:	4293      	cmp	r3, r2
 800f472:	d909      	bls.n	800f488 <mqtt_publish+0x78>
 800f474:	4b48      	ldr	r3, [pc, #288]	; (800f598 <mqtt_publish+0x188>)
 800f476:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800f47a:	494c      	ldr	r1, [pc, #304]	; (800f5ac <mqtt_publish+0x19c>)
 800f47c:	4848      	ldr	r0, [pc, #288]	; (800f5a0 <mqtt_publish+0x190>)
 800f47e:	f00b f903 	bl	801a688 <iprintf>
 800f482:	f06f 030f 	mvn.w	r3, #15
 800f486:	e082      	b.n	800f58e <mqtt_publish+0x17e>
  topic_len = (u16_t)topic_strlen;
 800f488:	6a3b      	ldr	r3, [r7, #32]
 800f48a:	83fb      	strh	r3, [r7, #30]
  total_len = 2 + topic_len + payload_length;
 800f48c:	8bfb      	ldrh	r3, [r7, #30]
 800f48e:	1c9a      	adds	r2, r3, #2
 800f490:	887b      	ldrh	r3, [r7, #2]
 800f492:	4413      	add	r3, r2
 800f494:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800f496:	69bb      	ldr	r3, [r7, #24]
 800f498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f49c:	d309      	bcc.n	800f4b2 <mqtt_publish+0xa2>
 800f49e:	4b3e      	ldr	r3, [pc, #248]	; (800f598 <mqtt_publish+0x188>)
 800f4a0:	f240 4213 	movw	r2, #1043	; 0x413
 800f4a4:	4942      	ldr	r1, [pc, #264]	; (800f5b0 <mqtt_publish+0x1a0>)
 800f4a6:	483e      	ldr	r0, [pc, #248]	; (800f5a0 <mqtt_publish+0x190>)
 800f4a8:	f00b f8ee 	bl	801a688 <iprintf>
 800f4ac:	f06f 030f 	mvn.w	r3, #15
 800f4b0:	e06d      	b.n	800f58e <mqtt_publish+0x17e>
  remaining_length = (u16_t)total_len;
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  if (qos > 0) {
 800f4b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d008      	beq.n	800f4d0 <mqtt_publish+0xc0>
    remaining_length += 2;
 800f4be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4c0:	3302      	adds	r3, #2
 800f4c2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f7fe ffab 	bl	800e420 <msg_generate_packet_id>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f4ce:	e001      	b.n	800f4d4 <mqtt_publish+0xc4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f103 001c 	add.w	r0, r3, #28
 800f4da:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800f4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4e0:	f7ff f852 	bl	800e588 <mqtt_create_request>
 800f4e4:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d102      	bne.n	800f4f2 <mqtt_publish+0xe2>
    return ERR_MEM;
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f0:	e04d      	b.n	800f58e <mqtt_publish+0x17e>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	33ec      	adds	r3, #236	; 0xec
 800f4f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f4f8:	4611      	mov	r1, r2
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff fad0 	bl	800eaa0 <mqtt_output_check_space>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d105      	bne.n	800f512 <mqtt_publish+0x102>
    mqtt_delete_request(r);
 800f506:	6978      	ldr	r0, [r7, #20]
 800f508:	f7ff f8d0 	bl	800e6ac <mqtt_delete_request>
    return ERR_MEM;
 800f50c:	f04f 33ff 	mov.w	r3, #4294967295
 800f510:	e03d      	b.n	800f58e <mqtt_publish+0x17e>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f518:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800f51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f51e:	9301      	str	r3, [sp, #4]
 800f520:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	4613      	mov	r3, r2
 800f528:	2200      	movs	r2, #0
 800f52a:	2103      	movs	r1, #3
 800f52c:	f7ff fa6d 	bl	800ea0a <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	33ec      	adds	r3, #236	; 0xec
 800f534:	8bfa      	ldrh	r2, [r7, #30]
 800f536:	68b9      	ldr	r1, [r7, #8]
 800f538:	4618      	mov	r0, r3
 800f53a:	f7ff fa24 	bl	800e986 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800f53e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800f542:	2b00      	cmp	r3, #0
 800f544:	d006      	beq.n	800f554 <mqtt_publish+0x144>
    mqtt_output_append_u16(&client->output, pkt_id);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	33ec      	adds	r3, #236	; 0xec
 800f54a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f54c:	4611      	mov	r1, r2
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff f9cc 	bl	800e8ec <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d009      	beq.n	800f56e <mqtt_publish+0x15e>
 800f55a:	887b      	ldrh	r3, [r7, #2]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d006      	beq.n	800f56e <mqtt_publish+0x15e>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	33ec      	adds	r3, #236	; 0xec
 800f564:	887a      	ldrh	r2, [r7, #2]
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	4618      	mov	r0, r3
 800f56a:	f7ff f9e6 	bl	800e93a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3318      	adds	r3, #24
 800f572:	6979      	ldr	r1, [r7, #20]
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff f84d 	bl	800e614 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	68db      	ldr	r3, [r3, #12]
 800f584:	4619      	mov	r1, r3
 800f586:	4610      	mov	r0, r2
 800f588:	f7fe ff66 	bl	800e458 <mqtt_output_send>
  return ERR_OK;
 800f58c:	2300      	movs	r3, #0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3728      	adds	r7, #40	; 0x28
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}
 800f596:	bf00      	nop
 800f598:	0801be20 	.word	0x0801be20
 800f59c:	0801c080 	.word	0x0801c080
 800f5a0:	0801be78 	.word	0x0801be78
 800f5a4:	0801c0a0 	.word	0x0801c0a0
 800f5a8:	0801c0bc 	.word	0x0801c0bc
 800f5ac:	0801c0dc 	.word	0x0801c0dc
 800f5b0:	0801c100 	.word	0x0801c100

0800f5b4 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b08c      	sub	sp, #48	; 0x30
 800f5b8:	af02      	add	r7, sp, #8
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	603b      	str	r3, [r7, #0]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	71fb      	strb	r3, [r7, #7]
  u16_t topic_len;
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d106      	bne.n	800f5d8 <mqtt_sub_unsub+0x24>
 800f5ca:	4b5d      	ldr	r3, [pc, #372]	; (800f740 <mqtt_sub_unsub+0x18c>)
 800f5cc:	f240 4255 	movw	r2, #1109	; 0x455
 800f5d0:	495c      	ldr	r1, [pc, #368]	; (800f744 <mqtt_sub_unsub+0x190>)
 800f5d2:	485d      	ldr	r0, [pc, #372]	; (800f748 <mqtt_sub_unsub+0x194>)
 800f5d4:	f00b f858 	bl	801a688 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d106      	bne.n	800f5ec <mqtt_sub_unsub+0x38>
 800f5de:	4b58      	ldr	r3, [pc, #352]	; (800f740 <mqtt_sub_unsub+0x18c>)
 800f5e0:	f240 4256 	movw	r2, #1110	; 0x456
 800f5e4:	4959      	ldr	r1, [pc, #356]	; (800f74c <mqtt_sub_unsub+0x198>)
 800f5e6:	4858      	ldr	r0, [pc, #352]	; (800f748 <mqtt_sub_unsub+0x194>)
 800f5e8:	f00b f84e 	bl	801a688 <iprintf>

  topic_strlen = strlen(topic);
 800f5ec:	68b8      	ldr	r0, [r7, #8]
 800f5ee:	f7f0 fdf9 	bl	80001e4 <strlen>
 800f5f2:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d909      	bls.n	800f612 <mqtt_sub_unsub+0x5e>
 800f5fe:	4b50      	ldr	r3, [pc, #320]	; (800f740 <mqtt_sub_unsub+0x18c>)
 800f600:	f240 4259 	movw	r2, #1113	; 0x459
 800f604:	4952      	ldr	r1, [pc, #328]	; (800f750 <mqtt_sub_unsub+0x19c>)
 800f606:	4850      	ldr	r0, [pc, #320]	; (800f748 <mqtt_sub_unsub+0x194>)
 800f608:	f00b f83e 	bl	801a688 <iprintf>
 800f60c:	f06f 030f 	mvn.w	r3, #15
 800f610:	e091      	b.n	800f736 <mqtt_sub_unsub+0x182>
  topic_len = (u16_t)topic_strlen;
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800f616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f618:	3304      	adds	r3, #4
 800f61a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f61e:	2a00      	cmp	r2, #0
 800f620:	bf14      	ite	ne
 800f622:	2201      	movne	r2, #1
 800f624:	2200      	moveq	r2, #0
 800f626:	b2d2      	uxtb	r2, r2
 800f628:	4413      	add	r3, r2
 800f62a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f632:	d309      	bcc.n	800f648 <mqtt_sub_unsub+0x94>
 800f634:	4b42      	ldr	r3, [pc, #264]	; (800f740 <mqtt_sub_unsub+0x18c>)
 800f636:	f240 425d 	movw	r2, #1117	; 0x45d
 800f63a:	4946      	ldr	r1, [pc, #280]	; (800f754 <mqtt_sub_unsub+0x1a0>)
 800f63c:	4842      	ldr	r0, [pc, #264]	; (800f748 <mqtt_sub_unsub+0x194>)
 800f63e:	f00b f823 	bl	801a688 <iprintf>
 800f642:	f06f 030f 	mvn.w	r3, #15
 800f646:	e076      	b.n	800f736 <mqtt_sub_unsub+0x182>
  remaining_length = (u16_t)total_len;
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800f64c:	79fb      	ldrb	r3, [r7, #7]
 800f64e:	2b02      	cmp	r3, #2
 800f650:	d906      	bls.n	800f660 <mqtt_sub_unsub+0xac>
 800f652:	4b3b      	ldr	r3, [pc, #236]	; (800f740 <mqtt_sub_unsub+0x18c>)
 800f654:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800f658:	493f      	ldr	r1, [pc, #252]	; (800f758 <mqtt_sub_unsub+0x1a4>)
 800f65a:	483b      	ldr	r0, [pc, #236]	; (800f748 <mqtt_sub_unsub+0x194>)
 800f65c:	f00b f814 	bl	801a688 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	7a9b      	ldrb	r3, [r3, #10]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d102      	bne.n	800f66e <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 800f668:	f06f 030a 	mvn.w	r3, #10
 800f66c:	e063      	b.n	800f736 <mqtt_sub_unsub+0x182>
  }

  pkt_id = msg_generate_packet_id(client);
 800f66e:	68f8      	ldr	r0, [r7, #12]
 800f670:	f7fe fed6 	bl	800e420 <msg_generate_packet_id>
 800f674:	4603      	mov	r3, r0
 800f676:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	f103 001c 	add.w	r0, r3, #28
 800f67e:	8b39      	ldrh	r1, [r7, #24]
 800f680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f682:	683a      	ldr	r2, [r7, #0]
 800f684:	f7fe ff80 	bl	800e588 <mqtt_create_request>
 800f688:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d102      	bne.n	800f696 <mqtt_sub_unsub+0xe2>
    return ERR_MEM;
 800f690:	f04f 33ff 	mov.w	r3, #4294967295
 800f694:	e04f      	b.n	800f736 <mqtt_sub_unsub+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	33ec      	adds	r3, #236	; 0xec
 800f69a:	8b7a      	ldrh	r2, [r7, #26]
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff f9fe 	bl	800eaa0 <mqtt_output_check_space>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d105      	bne.n	800f6b6 <mqtt_sub_unsub+0x102>
    mqtt_delete_request(r);
 800f6aa:	6978      	ldr	r0, [r7, #20]
 800f6ac:	f7fe fffe 	bl	800e6ac <mqtt_delete_request>
    return ERR_MEM;
 800f6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6b4:	e03f      	b.n	800f736 <mqtt_sub_unsub+0x182>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800f6bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d001      	beq.n	800f6c8 <mqtt_sub_unsub+0x114>
 800f6c4:	2108      	movs	r1, #8
 800f6c6:	e000      	b.n	800f6ca <mqtt_sub_unsub+0x116>
 800f6c8:	210a      	movs	r1, #10
 800f6ca:	8b7b      	ldrh	r3, [r7, #26]
 800f6cc:	9301      	str	r3, [sp, #4]
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	9300      	str	r3, [sp, #0]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	f7ff f998 	bl	800ea0a <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	33ec      	adds	r3, #236	; 0xec
 800f6de:	8b3a      	ldrh	r2, [r7, #24]
 800f6e0:	4611      	mov	r1, r2
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7ff f902 	bl	800e8ec <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	33ec      	adds	r3, #236	; 0xec
 800f6ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f6ee:	68b9      	ldr	r1, [r7, #8]
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7ff f948 	bl	800e986 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 800f6f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d00b      	beq.n	800f716 <mqtt_sub_unsub+0x162>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	2b02      	cmp	r3, #2
 800f708:	bf28      	it	cs
 800f70a:	2302      	movcs	r3, #2
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	4619      	mov	r1, r3
 800f710:	4610      	mov	r0, r2
 800f712:	f7ff f8d5 	bl	800e8c0 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3318      	adds	r3, #24
 800f71a:	6979      	ldr	r1, [r7, #20]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7fe ff79 	bl	800e614 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	4619      	mov	r1, r3
 800f72e:	4610      	mov	r0, r2
 800f730:	f7fe fe92 	bl	800e458 <mqtt_output_send>
  return ERR_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3728      	adds	r7, #40	; 0x28
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	0801be20 	.word	0x0801be20
 800f744:	0801c124 	.word	0x0801c124
 800f748:	0801be78 	.word	0x0801be78
 800f74c:	0801c144 	.word	0x0801c144
 800f750:	0801c164 	.word	0x0801c164
 800f754:	0801c18c 	.word	0x0801c18c
 800f758:	0801c1b4 	.word	0x0801c1b4

0800f75c <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                             mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
 800f768:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d106      	bne.n	800f77e <mqtt_set_inpub_callback+0x22>
 800f770:	4b09      	ldr	r3, [pc, #36]	; (800f798 <mqtt_set_inpub_callback+0x3c>)
 800f772:	f240 428f 	movw	r2, #1167	; 0x48f
 800f776:	4909      	ldr	r1, [pc, #36]	; (800f79c <mqtt_set_inpub_callback+0x40>)
 800f778:	4809      	ldr	r0, [pc, #36]	; (800f7a0 <mqtt_set_inpub_callback+0x44>)
 800f77a:	f00a ff85 	bl	801a688 <iprintf>
  client->data_cb = data_cb;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	68ba      	ldr	r2, [r7, #8]
 800f788:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	683a      	ldr	r2, [r7, #0]
 800f78e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800f790:	bf00      	nop
 800f792:	3710      	adds	r7, #16
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	0801be20 	.word	0x0801be20
 800f79c:	0801c1cc 	.word	0x0801c1cc
 800f7a0:	0801be78 	.word	0x0801be78

0800f7a4 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b08a      	sub	sp, #40	; 0x28
 800f7a8:	af02      	add	r7, sp, #8
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	603b      	str	r3, [r7, #0]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800f7b4:	230a      	movs	r3, #10
 800f7b6:	83bb      	strh	r3, [r7, #28]
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	76fb      	strb	r3, [r7, #27]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	76bb      	strb	r3, [r7, #26]
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	767b      	strb	r3, [r7, #25]

  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d106      	bne.n	800f7d8 <mqtt_client_connect+0x34>
 800f7ca:	4b7c      	ldr	r3, [pc, #496]	; (800f9bc <mqtt_client_connect+0x218>)
 800f7cc:	f240 42bb 	movw	r2, #1211	; 0x4bb
 800f7d0:	497b      	ldr	r1, [pc, #492]	; (800f9c0 <mqtt_client_connect+0x21c>)
 800f7d2:	487c      	ldr	r0, [pc, #496]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f7d4:	f00a ff58 	bl	801a688 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d106      	bne.n	800f7ec <mqtt_client_connect+0x48>
 800f7de:	4b77      	ldr	r3, [pc, #476]	; (800f9bc <mqtt_client_connect+0x218>)
 800f7e0:	f240 42bc 	movw	r2, #1212	; 0x4bc
 800f7e4:	4978      	ldr	r1, [pc, #480]	; (800f9c8 <mqtt_client_connect+0x224>)
 800f7e6:	4877      	ldr	r0, [pc, #476]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f7e8:	f00a ff4e 	bl	801a688 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d106      	bne.n	800f800 <mqtt_client_connect+0x5c>
 800f7f2:	4b72      	ldr	r3, [pc, #456]	; (800f9bc <mqtt_client_connect+0x218>)
 800f7f4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f7f8:	4974      	ldr	r1, [pc, #464]	; (800f9cc <mqtt_client_connect+0x228>)
 800f7fa:	4872      	ldr	r0, [pc, #456]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f7fc:	f00a ff44 	bl	801a688 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d106      	bne.n	800f816 <mqtt_client_connect+0x72>
 800f808:	4b6c      	ldr	r3, [pc, #432]	; (800f9bc <mqtt_client_connect+0x218>)
 800f80a:	f240 42be 	movw	r2, #1214	; 0x4be
 800f80e:	4970      	ldr	r1, [pc, #448]	; (800f9d0 <mqtt_client_connect+0x22c>)
 800f810:	486c      	ldr	r0, [pc, #432]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f812:	f00a ff39 	bl	801a688 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	7a9b      	ldrb	r3, [r3, #10]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d002      	beq.n	800f824 <mqtt_client_connect+0x80>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800f81e:	f06f 0309 	mvn.w	r3, #9
 800f822:	e164      	b.n	800faee <mqtt_client_connect+0x34a>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800f824:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800f828:	2100      	movs	r1, #0
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f00a fe48 	bl	801a4c0 <memset>
  client->connect_arg = arg;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f834:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	683a      	ldr	r2, [r7, #0]
 800f83a:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	899a      	ldrh	r2, [r3, #12]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	331c      	adds	r3, #28
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff f80d 	bl	800e868 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d06a      	beq.n	800f92c <mqtt_client_connect+0x188>
 800f856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f858:	695b      	ldr	r3, [r3, #20]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d066      	beq.n	800f92c <mqtt_client_connect+0x188>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800f85e:	7efb      	ldrb	r3, [r7, #27]
 800f860:	f043 0304 	orr.w	r3, r3, #4
 800f864:	76fb      	strb	r3, [r7, #27]
    flags |= (client_info->will_qos & 3) << 3;
 800f866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f868:	7e1b      	ldrb	r3, [r3, #24]
 800f86a:	00db      	lsls	r3, r3, #3
 800f86c:	b25b      	sxtb	r3, r3
 800f86e:	f003 0318 	and.w	r3, r3, #24
 800f872:	b25a      	sxtb	r2, r3
 800f874:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f878:	4313      	orrs	r3, r2
 800f87a:	b25b      	sxtb	r3, r3
 800f87c:	76fb      	strb	r3, [r7, #27]
    if (client_info->will_retain) {
 800f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f880:	7e5b      	ldrb	r3, [r3, #25]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d003      	beq.n	800f88e <mqtt_client_connect+0xea>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800f886:	7efb      	ldrb	r3, [r7, #27]
 800f888:	f043 0320 	orr.w	r3, r3, #32
 800f88c:	76fb      	strb	r3, [r7, #27]
    }
    len = strlen(client_info->will_topic);
 800f88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f890:	691b      	ldr	r3, [r3, #16]
 800f892:	4618      	mov	r0, r3
 800f894:	f7f0 fca6 	bl	80001e4 <strlen>
 800f898:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2bff      	cmp	r3, #255	; 0xff
 800f89e:	d909      	bls.n	800f8b4 <mqtt_client_connect+0x110>
 800f8a0:	4b46      	ldr	r3, [pc, #280]	; (800f9bc <mqtt_client_connect+0x218>)
 800f8a2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f8a6:	494b      	ldr	r1, [pc, #300]	; (800f9d4 <mqtt_client_connect+0x230>)
 800f8a8:	4846      	ldr	r0, [pc, #280]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f8aa:	f00a feed 	bl	801a688 <iprintf>
 800f8ae:	f06f 0305 	mvn.w	r3, #5
 800f8b2:	e11c      	b.n	800faee <mqtt_client_connect+0x34a>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d109      	bne.n	800f8ce <mqtt_client_connect+0x12a>
 800f8ba:	4b40      	ldr	r3, [pc, #256]	; (800f9bc <mqtt_client_connect+0x218>)
 800f8bc:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f8c0:	4945      	ldr	r1, [pc, #276]	; (800f9d8 <mqtt_client_connect+0x234>)
 800f8c2:	4840      	ldr	r0, [pc, #256]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f8c4:	f00a fee0 	bl	801a688 <iprintf>
 800f8c8:	f06f 0305 	mvn.w	r3, #5
 800f8cc:	e10f      	b.n	800faee <mqtt_client_connect+0x34a>
    will_topic_len = (u8_t)len;
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	76bb      	strb	r3, [r7, #26]
    len = strlen(client_info->will_msg);
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	695b      	ldr	r3, [r3, #20]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7f0 fc84 	bl	80001e4 <strlen>
 800f8dc:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2bff      	cmp	r3, #255	; 0xff
 800f8e2:	d909      	bls.n	800f8f8 <mqtt_client_connect+0x154>
 800f8e4:	4b35      	ldr	r3, [pc, #212]	; (800f9bc <mqtt_client_connect+0x218>)
 800f8e6:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 800f8ea:	493c      	ldr	r1, [pc, #240]	; (800f9dc <mqtt_client_connect+0x238>)
 800f8ec:	4835      	ldr	r0, [pc, #212]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f8ee:	f00a fecb 	bl	801a688 <iprintf>
 800f8f2:	f06f 0305 	mvn.w	r3, #5
 800f8f6:	e0fa      	b.n	800faee <mqtt_client_connect+0x34a>
    will_msg_len = (u8_t)len;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	767b      	strb	r3, [r7, #25]
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800f8fc:	8bbb      	ldrh	r3, [r7, #28]
 800f8fe:	1c9a      	adds	r2, r3, #2
 800f900:	7ebb      	ldrb	r3, [r7, #26]
 800f902:	4413      	add	r3, r2
 800f904:	1c9a      	adds	r2, r3, #2
 800f906:	7e7b      	ldrb	r3, [r7, #25]
 800f908:	4413      	add	r3, r2
 800f90a:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f912:	d309      	bcc.n	800f928 <mqtt_client_connect+0x184>
 800f914:	4b29      	ldr	r3, [pc, #164]	; (800f9bc <mqtt_client_connect+0x218>)
 800f916:	f240 42db 	movw	r2, #1243	; 0x4db
 800f91a:	4931      	ldr	r1, [pc, #196]	; (800f9e0 <mqtt_client_connect+0x23c>)
 800f91c:	4829      	ldr	r0, [pc, #164]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f91e:	f00a feb3 	bl	801a688 <iprintf>
 800f922:	f06f 0305 	mvn.w	r3, #5
 800f926:	e0e2      	b.n	800faee <mqtt_client_connect+0x34a>
    remaining_length = (u16_t)len;
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	83bb      	strh	r3, [r7, #28]
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800f92c:	7efb      	ldrb	r3, [r7, #27]
 800f92e:	f043 0302 	orr.w	r3, r3, #2
 800f932:	76fb      	strb	r3, [r7, #27]

  len = strlen(client_info->client_id);
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	4618      	mov	r0, r3
 800f93a:	f7f0 fc53 	bl	80001e4 <strlen>
 800f93e:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f946:	d309      	bcc.n	800f95c <mqtt_client_connect+0x1b8>
 800f948:	4b1c      	ldr	r3, [pc, #112]	; (800f9bc <mqtt_client_connect+0x218>)
 800f94a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f94e:	4925      	ldr	r1, [pc, #148]	; (800f9e4 <mqtt_client_connect+0x240>)
 800f950:	481c      	ldr	r0, [pc, #112]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f952:	f00a fe99 	bl	801a688 <iprintf>
 800f956:	f06f 0305 	mvn.w	r3, #5
 800f95a:	e0c8      	b.n	800faee <mqtt_client_connect+0x34a>
  client_id_length = (u16_t)len;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 800f960:	8bbb      	ldrh	r3, [r7, #28]
 800f962:	1c9a      	adds	r2, r3, #2
 800f964:	8a7b      	ldrh	r3, [r7, #18]
 800f966:	4413      	add	r3, r2
 800f968:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f970:	d309      	bcc.n	800f986 <mqtt_client_connect+0x1e2>
 800f972:	4b12      	ldr	r3, [pc, #72]	; (800f9bc <mqtt_client_connect+0x218>)
 800f974:	f240 42e6 	movw	r2, #1254	; 0x4e6
 800f978:	4919      	ldr	r1, [pc, #100]	; (800f9e0 <mqtt_client_connect+0x23c>)
 800f97a:	4812      	ldr	r0, [pc, #72]	; (800f9c4 <mqtt_client_connect+0x220>)
 800f97c:	f00a fe84 	bl	801a688 <iprintf>
 800f980:	f06f 0305 	mvn.w	r3, #5
 800f984:	e0b3      	b.n	800faee <mqtt_client_connect+0x34a>
  remaining_length = (u16_t)len;
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	83bb      	strh	r3, [r7, #28]

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	33ec      	adds	r3, #236	; 0xec
 800f98e:	8bba      	ldrh	r2, [r7, #28]
 800f990:	4611      	mov	r1, r2
 800f992:	4618      	mov	r0, r3
 800f994:	f7ff f884 	bl	800eaa0 <mqtt_output_check_space>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d102      	bne.n	800f9a4 <mqtt_client_connect+0x200>
    return ERR_MEM;
 800f99e:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a2:	e0a4      	b.n	800faee <mqtt_client_connect+0x34a>
  }

  client->conn = tcp_new();
 800f9a4:	f003 f914 	bl	8012bd0 <tcp_new>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	60da      	str	r2, [r3, #12]
  if (client->conn == NULL) {
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d118      	bne.n	800f9e8 <mqtt_client_connect+0x244>
    return ERR_MEM;
 800f9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ba:	e098      	b.n	800faee <mqtt_client_connect+0x34a>
 800f9bc:	0801be20 	.word	0x0801be20
 800f9c0:	0801c1f4 	.word	0x0801c1f4
 800f9c4:	0801be78 	.word	0x0801be78
 800f9c8:	0801c218 	.word	0x0801c218
 800f9cc:	0801c240 	.word	0x0801c240
 800f9d0:	0801c26c 	.word	0x0801c26c
 800f9d4:	0801c2a0 	.word	0x0801c2a0
 800f9d8:	0801c2e0 	.word	0x0801c2e0
 800f9dc:	0801c320 	.word	0x0801c320
 800f9e0:	0801c35c 	.word	0x0801c35c
 800f9e4:	0801c38c 	.word	0x0801c38c
  }

  /* Set arg pointer for callbacks */
  tcp_arg(client->conn, client);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	68f9      	ldr	r1, [r7, #12]
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f003 f904 	bl	8012bfc <tcp_arg>
  /* Any local address, pick random local port number */
  err = tcp_bind(client->conn, IP_ADDR_ANY, 0);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	493f      	ldr	r1, [pc, #252]	; (800faf8 <mqtt_client_connect+0x354>)
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f002 f875 	bl	8011aec <tcp_bind>
 800fa02:	4603      	mov	r3, r0
 800fa04:	77fb      	strb	r3, [r7, #31]
  if (err != ERR_OK) {
 800fa06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d162      	bne.n	800fad4 <mqtt_client_connect+0x330>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = tcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	68d8      	ldr	r0, [r3, #12]
 800fa12:	88fa      	ldrh	r2, [r7, #6]
 800fa14:	4b39      	ldr	r3, [pc, #228]	; (800fafc <mqtt_client_connect+0x358>)
 800fa16:	68b9      	ldr	r1, [r7, #8]
 800fa18:	f002 faa0 	bl	8011f5c <tcp_connect>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	77fb      	strb	r3, [r7, #31]
  if (err != ERR_OK) {
 800fa20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d157      	bne.n	800fad8 <mqtt_client_connect+0x334>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  tcp_err(client->conn, mqtt_tcp_err_cb);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	4934      	ldr	r1, [pc, #208]	; (800fb00 <mqtt_client_connect+0x35c>)
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f003 f936 	bl	8012ca0 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2201      	movs	r2, #1
 800fa38:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800fa40:	8bbb      	ldrh	r3, [r7, #28]
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	2300      	movs	r3, #0
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	2300      	movs	r3, #0
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2101      	movs	r1, #1
 800fa4e:	f7fe ffdc 	bl	800ea0a <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	33ec      	adds	r3, #236	; 0xec
 800fa56:	2204      	movs	r2, #4
 800fa58:	492a      	ldr	r1, [pc, #168]	; (800fb04 <mqtt_client_connect+0x360>)
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fe ff93 	bl	800e986 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	33ec      	adds	r3, #236	; 0xec
 800fa64:	2104      	movs	r1, #4
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fe ff2a 	bl	800e8c0 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	33ec      	adds	r3, #236	; 0xec
 800fa70:	7efa      	ldrb	r2, [r7, #27]
 800fa72:	4611      	mov	r1, r2
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fe ff23 	bl	800e8c0 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800fa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa82:	899b      	ldrh	r3, [r3, #12]
 800fa84:	4619      	mov	r1, r3
 800fa86:	4610      	mov	r0, r2
 800fa88:	f7fe ff30 	bl	800e8ec <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	8a7a      	ldrh	r2, [r7, #18]
 800fa98:	4619      	mov	r1, r3
 800fa9a:	f7fe ff74 	bl	800e986 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800fa9e:	7efb      	ldrb	r3, [r7, #27]
 800faa0:	f003 0304 	and.w	r3, r3, #4
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d013      	beq.n	800fad0 <mqtt_client_connect+0x32c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800faae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fab0:	691b      	ldr	r3, [r3, #16]
 800fab2:	7eba      	ldrb	r2, [r7, #26]
 800fab4:	b292      	uxth	r2, r2
 800fab6:	4619      	mov	r1, r3
 800fab8:	f7fe ff65 	bl	800e986 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800fac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac4:	695b      	ldr	r3, [r3, #20]
 800fac6:	7e7a      	ldrb	r2, [r7, #25]
 800fac8:	b292      	uxth	r2, r2
 800faca:	4619      	mov	r1, r3
 800facc:	f7fe ff5b 	bl	800e986 <mqtt_output_append_string>
  }
  return ERR_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	e00c      	b.n	800faee <mqtt_client_connect+0x34a>
    goto tcp_fail;
 800fad4:	bf00      	nop
 800fad6:	e000      	b.n	800fada <mqtt_client_connect+0x336>
    goto tcp_fail;
 800fad8:	bf00      	nop

tcp_fail:
  tcp_abort(client->conn);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	4618      	mov	r0, r3
 800fae0:	f001 fff8 	bl	8011ad4 <tcp_abort>
  client->conn = NULL;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	60da      	str	r2, [r3, #12]
  return err;
 800faea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3720      	adds	r7, #32
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	0801ecd4 	.word	0x0801ecd4
 800fafc:	0800f38d 	.word	0x0800f38d
 800fb00:	0800f319 	.word	0x0800f319
 800fb04:	0801c3c8 	.word	0x0801c3c8

0800fb08 <mqtt_client_is_connected>:
 * @param client MQTT client
 * @return 1 if connected to server, 0 otherwise
 */
u8_t
mqtt_client_is_connected(mqtt_client_t *client)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d106      	bne.n	800fb24 <mqtt_client_is_connected+0x1c>
 800fb16:	4b09      	ldr	r3, [pc, #36]	; (800fb3c <mqtt_client_is_connected+0x34>)
 800fb18:	f240 523a 	movw	r2, #1338	; 0x53a
 800fb1c:	4908      	ldr	r1, [pc, #32]	; (800fb40 <mqtt_client_is_connected+0x38>)
 800fb1e:	4809      	ldr	r0, [pc, #36]	; (800fb44 <mqtt_client_is_connected+0x3c>)
 800fb20:	f00a fdb2 	bl	801a688 <iprintf>
  return client->conn_state == MQTT_CONNECTED;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	7a9b      	ldrb	r3, [r3, #10]
 800fb28:	2b03      	cmp	r3, #3
 800fb2a:	bf0c      	ite	eq
 800fb2c:	2301      	moveq	r3, #1
 800fb2e:	2300      	movne	r3, #0
 800fb30:	b2db      	uxtb	r3, r3
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}
 800fb3a:	bf00      	nop
 800fb3c:	0801be20 	.word	0x0801be20
 800fb40:	0801c3f0 	.word	0x0801c3f0
 800fb44:	0801be78 	.word	0x0801be78

0800fb48 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800fb52:	88fb      	ldrh	r3, [r7, #6]
 800fb54:	ba5b      	rev16	r3, r3
 800fb56:	b29b      	uxth	r3, r3
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	370c      	adds	r7, #12
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bc80      	pop	{r7}
 800fb60:	4770      	bx	lr

0800fb62 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fb62:	b480      	push	{r7}
 800fb64:	b083      	sub	sp, #12
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	061a      	lsls	r2, r3, #24
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	021b      	lsls	r3, r3, #8
 800fb72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fb76:	431a      	orrs	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	0a1b      	lsrs	r3, r3, #8
 800fb7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fb80:	431a      	orrs	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	0e1b      	lsrs	r3, r3, #24
 800fb86:	4313      	orrs	r3, r2
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bc80      	pop	{r7}
 800fb90:	4770      	bx	lr

0800fb92 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800fb92:	b580      	push	{r7, lr}
 800fb94:	b086      	sub	sp, #24
 800fb96:	af00      	add	r7, sp, #0
 800fb98:	60f8      	str	r0, [r7, #12]
 800fb9a:	60b9      	str	r1, [r7, #8]
 800fb9c:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 800fb9e:	68b8      	ldr	r0, [r7, #8]
 800fba0:	f7f0 fb20 	bl	80001e4 <strlen>
 800fba4:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d101      	bne.n	800fbb0 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	e022      	b.n	800fbf6 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	617b      	str	r3, [r7, #20]
 800fbb4:	e012      	b.n	800fbdc <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	781a      	ldrb	r2, [r3, #0]
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d109      	bne.n	800fbd6 <lwip_strnstr+0x44>
 800fbc2:	693a      	ldr	r2, [r7, #16]
 800fbc4:	68b9      	ldr	r1, [r7, #8]
 800fbc6:	6978      	ldr	r0, [r7, #20]
 800fbc8:	f00a fe68 	bl	801a89c <strncmp>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	e00f      	b.n	800fbf6 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	617b      	str	r3, [r7, #20]
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d007      	beq.n	800fbf4 <lwip_strnstr+0x62>
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	441a      	add	r2, r3
 800fbea:	68f9      	ldr	r1, [r7, #12]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	440b      	add	r3, r1
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d9e0      	bls.n	800fbb6 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800fbf4:	2300      	movs	r3, #0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3718      	adds	r7, #24
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 800fbfe:	b480      	push	{r7}
 800fc00:	b085      	sub	sp, #20
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	1c5a      	adds	r2, r3, #1
 800fc0c:	607a      	str	r2, [r7, #4]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	1c5a      	adds	r2, r3, #1
 800fc16:	603a      	str	r2, [r7, #0]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800fc1c:	7bfa      	ldrb	r2, [r7, #15]
 800fc1e:	7bbb      	ldrb	r3, [r7, #14]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d016      	beq.n	800fc52 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800fc24:	7bfb      	ldrb	r3, [r7, #15]
 800fc26:	f043 0320 	orr.w	r3, r3, #32
 800fc2a:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800fc2c:	7b7b      	ldrb	r3, [r7, #13]
 800fc2e:	2b60      	cmp	r3, #96	; 0x60
 800fc30:	d90c      	bls.n	800fc4c <lwip_stricmp+0x4e>
 800fc32:	7b7b      	ldrb	r3, [r7, #13]
 800fc34:	2b7a      	cmp	r3, #122	; 0x7a
 800fc36:	d809      	bhi.n	800fc4c <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800fc38:	7bbb      	ldrb	r3, [r7, #14]
 800fc3a:	f043 0320 	orr.w	r3, r3, #32
 800fc3e:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800fc40:	7b7a      	ldrb	r2, [r7, #13]
 800fc42:	7b3b      	ldrb	r3, [r7, #12]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d003      	beq.n	800fc50 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800fc48:	2301      	movs	r3, #1
 800fc4a:	e006      	b.n	800fc5a <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	e004      	b.n	800fc5a <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800fc50:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800fc52:	7bfb      	ldrb	r3, [r7, #15]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d1d7      	bne.n	800fc08 <lwip_stricmp+0xa>
  return 0;
 800fc58:	2300      	movs	r3, #0
}
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3714      	adds	r7, #20
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bc80      	pop	{r7}
 800fc62:	4770      	bx	lr

0800fc64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fc6e:	f009 fd65 	bl	801973c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fc72:	f000 f8a7 	bl	800fdc4 <mem_init>
  memp_init();
 800fc76:	f000 fb71 	bl	801035c <memp_init>
  pbuf_init();
  netif_init();
 800fc7a:	f000 fc37 	bl	80104ec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fc7e:	f007 f959 	bl	8016f34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fc82:	f001 fc98 	bl	80115b6 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800fc86:	f006 ffa5 	bl	8016bd4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fc8a:	bf00      	nop
 800fc8c:	3708      	adds	r7, #8
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
	...

0800fc94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fc9c:	4b40      	ldr	r3, [pc, #256]	; (800fda0 <plug_holes+0x10c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d206      	bcs.n	800fcb4 <plug_holes+0x20>
 800fca6:	4b3f      	ldr	r3, [pc, #252]	; (800fda4 <plug_holes+0x110>)
 800fca8:	f240 125d 	movw	r2, #349	; 0x15d
 800fcac:	493e      	ldr	r1, [pc, #248]	; (800fda8 <plug_holes+0x114>)
 800fcae:	483f      	ldr	r0, [pc, #252]	; (800fdac <plug_holes+0x118>)
 800fcb0:	f00a fcea 	bl	801a688 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fcb4:	4b3e      	ldr	r3, [pc, #248]	; (800fdb0 <plug_holes+0x11c>)
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d306      	bcc.n	800fccc <plug_holes+0x38>
 800fcbe:	4b39      	ldr	r3, [pc, #228]	; (800fda4 <plug_holes+0x110>)
 800fcc0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fcc4:	493b      	ldr	r1, [pc, #236]	; (800fdb4 <plug_holes+0x120>)
 800fcc6:	4839      	ldr	r0, [pc, #228]	; (800fdac <plug_holes+0x118>)
 800fcc8:	f00a fcde 	bl	801a688 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	791b      	ldrb	r3, [r3, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d006      	beq.n	800fce2 <plug_holes+0x4e>
 800fcd4:	4b33      	ldr	r3, [pc, #204]	; (800fda4 <plug_holes+0x110>)
 800fcd6:	f240 125f 	movw	r2, #351	; 0x15f
 800fcda:	4937      	ldr	r1, [pc, #220]	; (800fdb8 <plug_holes+0x124>)
 800fcdc:	4833      	ldr	r0, [pc, #204]	; (800fdac <plug_holes+0x118>)
 800fcde:	f00a fcd3 	bl	801a688 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fcea:	d906      	bls.n	800fcfa <plug_holes+0x66>
 800fcec:	4b2d      	ldr	r3, [pc, #180]	; (800fda4 <plug_holes+0x110>)
 800fcee:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800fcf2:	4932      	ldr	r1, [pc, #200]	; (800fdbc <plug_holes+0x128>)
 800fcf4:	482d      	ldr	r0, [pc, #180]	; (800fdac <plug_holes+0x118>)
 800fcf6:	f00a fcc7 	bl	801a688 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800fcfa:	4b29      	ldr	r3, [pc, #164]	; (800fda0 <plug_holes+0x10c>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	8812      	ldrh	r2, [r2, #0]
 800fd02:	4413      	add	r3, r2
 800fd04:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d01f      	beq.n	800fd4e <plug_holes+0xba>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	791b      	ldrb	r3, [r3, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d11b      	bne.n	800fd4e <plug_holes+0xba>
 800fd16:	4b26      	ldr	r3, [pc, #152]	; (800fdb0 <plug_holes+0x11c>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d016      	beq.n	800fd4e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fd20:	4b27      	ldr	r3, [pc, #156]	; (800fdc0 <plug_holes+0x12c>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d102      	bne.n	800fd30 <plug_holes+0x9c>
      lfree = mem;
 800fd2a:	4a25      	ldr	r2, [pc, #148]	; (800fdc0 <plug_holes+0x12c>)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	881a      	ldrh	r2, [r3, #0]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800fd38:	4b19      	ldr	r3, [pc, #100]	; (800fda0 <plug_holes+0x10c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	1ad1      	subs	r1, r2, r3
 800fd40:	4b17      	ldr	r3, [pc, #92]	; (800fda0 <plug_holes+0x10c>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	68fa      	ldr	r2, [r7, #12]
 800fd46:	8812      	ldrh	r2, [r2, #0]
 800fd48:	4413      	add	r3, r2
 800fd4a:	b28a      	uxth	r2, r1
 800fd4c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800fd4e:	4b14      	ldr	r3, [pc, #80]	; (800fda0 <plug_holes+0x10c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	8852      	ldrh	r2, [r2, #2]
 800fd56:	4413      	add	r3, r2
 800fd58:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fd5a:	68ba      	ldr	r2, [r7, #8]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d01a      	beq.n	800fd98 <plug_holes+0x104>
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	791b      	ldrb	r3, [r3, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d116      	bne.n	800fd98 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fd6a:	4b15      	ldr	r3, [pc, #84]	; (800fdc0 <plug_holes+0x12c>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	687a      	ldr	r2, [r7, #4]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d102      	bne.n	800fd7a <plug_holes+0xe6>
      lfree = pmem;
 800fd74:	4a12      	ldr	r2, [pc, #72]	; (800fdc0 <plug_holes+0x12c>)
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	881a      	ldrh	r2, [r3, #0]
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800fd82:	4b07      	ldr	r3, [pc, #28]	; (800fda0 <plug_holes+0x10c>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	1ad1      	subs	r1, r2, r3
 800fd8a:	4b05      	ldr	r3, [pc, #20]	; (800fda0 <plug_holes+0x10c>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	8812      	ldrh	r2, [r2, #0]
 800fd92:	4413      	add	r3, r2
 800fd94:	b28a      	uxth	r2, r1
 800fd96:	805a      	strh	r2, [r3, #2]
  }
}
 800fd98:	bf00      	nop
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	200050a8 	.word	0x200050a8
 800fda4:	0801c41c 	.word	0x0801c41c
 800fda8:	0801c44c 	.word	0x0801c44c
 800fdac:	0801c464 	.word	0x0801c464
 800fdb0:	200050ac 	.word	0x200050ac
 800fdb4:	0801c48c 	.word	0x0801c48c
 800fdb8:	0801c4a8 	.word	0x0801c4a8
 800fdbc:	0801c4c4 	.word	0x0801c4c4
 800fdc0:	200050b0 	.word	0x200050b0

0800fdc4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fdca:	4b1e      	ldr	r3, [pc, #120]	; (800fe44 <mem_init+0x80>)
 800fdcc:	3303      	adds	r3, #3
 800fdce:	f023 0303 	bic.w	r3, r3, #3
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	4b1c      	ldr	r3, [pc, #112]	; (800fe48 <mem_init+0x84>)
 800fdd6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fdd8:	4b1b      	ldr	r3, [pc, #108]	; (800fe48 <mem_init+0x84>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fde4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800fdf2:	4b15      	ldr	r3, [pc, #84]	; (800fe48 <mem_init+0x84>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800fdfa:	4a14      	ldr	r2, [pc, #80]	; (800fe4c <mem_init+0x88>)
 800fdfc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fdfe:	4b13      	ldr	r3, [pc, #76]	; (800fe4c <mem_init+0x88>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2201      	movs	r2, #1
 800fe04:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fe06:	4b11      	ldr	r3, [pc, #68]	; (800fe4c <mem_init+0x88>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fe0e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fe10:	4b0e      	ldr	r3, [pc, #56]	; (800fe4c <mem_init+0x88>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800fe18:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fe1a:	4b0b      	ldr	r3, [pc, #44]	; (800fe48 <mem_init+0x84>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	4a0c      	ldr	r2, [pc, #48]	; (800fe50 <mem_init+0x8c>)
 800fe20:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fe22:	480c      	ldr	r0, [pc, #48]	; (800fe54 <mem_init+0x90>)
 800fe24:	f009 fc98 	bl	8019758 <sys_mutex_new>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d006      	beq.n	800fe3c <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fe2e:	4b0a      	ldr	r3, [pc, #40]	; (800fe58 <mem_init+0x94>)
 800fe30:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fe34:	4909      	ldr	r1, [pc, #36]	; (800fe5c <mem_init+0x98>)
 800fe36:	480a      	ldr	r0, [pc, #40]	; (800fe60 <mem_init+0x9c>)
 800fe38:	f00a fc26 	bl	801a688 <iprintf>
  }
}
 800fe3c:	bf00      	nop
 800fe3e:	3708      	adds	r7, #8
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}
 800fe44:	200087e0 	.word	0x200087e0
 800fe48:	200050a8 	.word	0x200050a8
 800fe4c:	200050ac 	.word	0x200050ac
 800fe50:	200050b0 	.word	0x200050b0
 800fe54:	200050b4 	.word	0x200050b4
 800fe58:	0801c41c 	.word	0x0801c41c
 800fe5c:	0801c4f0 	.word	0x0801c4f0
 800fe60:	0801c464 	.word	0x0801c464

0800fe64 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d050      	beq.n	800ff14 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f003 0303 	and.w	r3, r3, #3
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d006      	beq.n	800fe8a <mem_free+0x26>
 800fe7c:	4b27      	ldr	r3, [pc, #156]	; (800ff1c <mem_free+0xb8>)
 800fe7e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800fe82:	4927      	ldr	r1, [pc, #156]	; (800ff20 <mem_free+0xbc>)
 800fe84:	4827      	ldr	r0, [pc, #156]	; (800ff24 <mem_free+0xc0>)
 800fe86:	f00a fbff 	bl	801a688 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe8a:	4b27      	ldr	r3, [pc, #156]	; (800ff28 <mem_free+0xc4>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d304      	bcc.n	800fe9e <mem_free+0x3a>
 800fe94:	4b25      	ldr	r3, [pc, #148]	; (800ff2c <mem_free+0xc8>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d306      	bcc.n	800feac <mem_free+0x48>
 800fe9e:	4b1f      	ldr	r3, [pc, #124]	; (800ff1c <mem_free+0xb8>)
 800fea0:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800fea4:	4922      	ldr	r1, [pc, #136]	; (800ff30 <mem_free+0xcc>)
 800fea6:	481f      	ldr	r0, [pc, #124]	; (800ff24 <mem_free+0xc0>)
 800fea8:	f00a fbee 	bl	801a688 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800feac:	4b1e      	ldr	r3, [pc, #120]	; (800ff28 <mem_free+0xc4>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d304      	bcc.n	800fec0 <mem_free+0x5c>
 800feb6:	4b1d      	ldr	r3, [pc, #116]	; (800ff2c <mem_free+0xc8>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	429a      	cmp	r2, r3
 800febe:	d306      	bcc.n	800fece <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800fec0:	f009 fca8 	bl	8019814 <sys_arch_protect>
 800fec4:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800fec6:	68b8      	ldr	r0, [r7, #8]
 800fec8:	f009 fcb2 	bl	8019830 <sys_arch_unprotect>
    return;
 800fecc:	e023      	b.n	800ff16 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fece:	4819      	ldr	r0, [pc, #100]	; (800ff34 <mem_free+0xd0>)
 800fed0:	f009 fc5e 	bl	8019790 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	3b08      	subs	r3, #8
 800fed8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	791b      	ldrb	r3, [r3, #4]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d106      	bne.n	800fef0 <mem_free+0x8c>
 800fee2:	4b0e      	ldr	r3, [pc, #56]	; (800ff1c <mem_free+0xb8>)
 800fee4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800fee8:	4913      	ldr	r1, [pc, #76]	; (800ff38 <mem_free+0xd4>)
 800feea:	480e      	ldr	r0, [pc, #56]	; (800ff24 <mem_free+0xc0>)
 800feec:	f00a fbcc 	bl	801a688 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2200      	movs	r2, #0
 800fef4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fef6:	4b11      	ldr	r3, [pc, #68]	; (800ff3c <mem_free+0xd8>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68fa      	ldr	r2, [r7, #12]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d202      	bcs.n	800ff06 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ff00:	4a0e      	ldr	r2, [pc, #56]	; (800ff3c <mem_free+0xd8>)
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ff06:	68f8      	ldr	r0, [r7, #12]
 800ff08:	f7ff fec4 	bl	800fc94 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ff0c:	4809      	ldr	r0, [pc, #36]	; (800ff34 <mem_free+0xd0>)
 800ff0e:	f009 fc4e 	bl	80197ae <sys_mutex_unlock>
 800ff12:	e000      	b.n	800ff16 <mem_free+0xb2>
    return;
 800ff14:	bf00      	nop
}
 800ff16:	3710      	adds	r7, #16
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	0801c41c 	.word	0x0801c41c
 800ff20:	0801c50c 	.word	0x0801c50c
 800ff24:	0801c464 	.word	0x0801c464
 800ff28:	200050a8 	.word	0x200050a8
 800ff2c:	200050ac 	.word	0x200050ac
 800ff30:	0801c530 	.word	0x0801c530
 800ff34:	200050b4 	.word	0x200050b4
 800ff38:	0801c548 	.word	0x0801c548
 800ff3c:	200050b0 	.word	0x200050b0

0800ff40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b088      	sub	sp, #32
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ff4c:	887b      	ldrh	r3, [r7, #2]
 800ff4e:	3303      	adds	r3, #3
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	f023 0303 	bic.w	r3, r3, #3
 800ff56:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800ff58:	887b      	ldrh	r3, [r7, #2]
 800ff5a:	2b0b      	cmp	r3, #11
 800ff5c:	d801      	bhi.n	800ff62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ff5e:	230c      	movs	r3, #12
 800ff60:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ff62:	887b      	ldrh	r3, [r7, #2]
 800ff64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff68:	d901      	bls.n	800ff6e <mem_trim+0x2e>
    return NULL;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	e0bd      	b.n	80100ea <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ff6e:	4b61      	ldr	r3, [pc, #388]	; (80100f4 <mem_trim+0x1b4>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d304      	bcc.n	800ff82 <mem_trim+0x42>
 800ff78:	4b5f      	ldr	r3, [pc, #380]	; (80100f8 <mem_trim+0x1b8>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	687a      	ldr	r2, [r7, #4]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d306      	bcc.n	800ff90 <mem_trim+0x50>
 800ff82:	4b5e      	ldr	r3, [pc, #376]	; (80100fc <mem_trim+0x1bc>)
 800ff84:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ff88:	495d      	ldr	r1, [pc, #372]	; (8010100 <mem_trim+0x1c0>)
 800ff8a:	485e      	ldr	r0, [pc, #376]	; (8010104 <mem_trim+0x1c4>)
 800ff8c:	f00a fb7c 	bl	801a688 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ff90:	4b58      	ldr	r3, [pc, #352]	; (80100f4 <mem_trim+0x1b4>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	687a      	ldr	r2, [r7, #4]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d304      	bcc.n	800ffa4 <mem_trim+0x64>
 800ff9a:	4b57      	ldr	r3, [pc, #348]	; (80100f8 <mem_trim+0x1b8>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d307      	bcc.n	800ffb4 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800ffa4:	f009 fc36 	bl	8019814 <sys_arch_protect>
 800ffa8:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800ffaa:	68f8      	ldr	r0, [r7, #12]
 800ffac:	f009 fc40 	bl	8019830 <sys_arch_unprotect>
    return rmem;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	e09a      	b.n	80100ea <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3b08      	subs	r3, #8
 800ffb8:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ffba:	4b4e      	ldr	r3, [pc, #312]	; (80100f4 <mem_trim+0x1b4>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	69fa      	ldr	r2, [r7, #28]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	881a      	ldrh	r2, [r3, #0]
 800ffc8:	8b7b      	ldrh	r3, [r7, #26]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	3b08      	subs	r3, #8
 800ffd0:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ffd2:	887a      	ldrh	r2, [r7, #2]
 800ffd4:	8b3b      	ldrh	r3, [r7, #24]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d906      	bls.n	800ffe8 <mem_trim+0xa8>
 800ffda:	4b48      	ldr	r3, [pc, #288]	; (80100fc <mem_trim+0x1bc>)
 800ffdc:	f240 2206 	movw	r2, #518	; 0x206
 800ffe0:	4949      	ldr	r1, [pc, #292]	; (8010108 <mem_trim+0x1c8>)
 800ffe2:	4848      	ldr	r0, [pc, #288]	; (8010104 <mem_trim+0x1c4>)
 800ffe4:	f00a fb50 	bl	801a688 <iprintf>
  if (newsize > size) {
 800ffe8:	887a      	ldrh	r2, [r7, #2]
 800ffea:	8b3b      	ldrh	r3, [r7, #24]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d901      	bls.n	800fff4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800fff0:	2300      	movs	r3, #0
 800fff2:	e07a      	b.n	80100ea <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800fff4:	887a      	ldrh	r2, [r7, #2]
 800fff6:	8b3b      	ldrh	r3, [r7, #24]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d101      	bne.n	8010000 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	e074      	b.n	80100ea <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010000:	4842      	ldr	r0, [pc, #264]	; (801010c <mem_trim+0x1cc>)
 8010002:	f009 fbc5 	bl	8019790 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8010006:	4b3b      	ldr	r3, [pc, #236]	; (80100f4 <mem_trim+0x1b4>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	69fa      	ldr	r2, [r7, #28]
 801000c:	8812      	ldrh	r2, [r2, #0]
 801000e:	4413      	add	r3, r2
 8010010:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	791b      	ldrb	r3, [r3, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d131      	bne.n	801007e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8010020:	8b7a      	ldrh	r2, [r7, #26]
 8010022:	887b      	ldrh	r3, [r7, #2]
 8010024:	4413      	add	r3, r2
 8010026:	b29b      	uxth	r3, r3
 8010028:	3308      	adds	r3, #8
 801002a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 801002c:	4b38      	ldr	r3, [pc, #224]	; (8010110 <mem_trim+0x1d0>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	429a      	cmp	r2, r3
 8010034:	d105      	bne.n	8010042 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8010036:	4b2f      	ldr	r3, [pc, #188]	; (80100f4 <mem_trim+0x1b4>)
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	8a7b      	ldrh	r3, [r7, #18]
 801003c:	4413      	add	r3, r2
 801003e:	4a34      	ldr	r2, [pc, #208]	; (8010110 <mem_trim+0x1d0>)
 8010040:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8010042:	4b2c      	ldr	r3, [pc, #176]	; (80100f4 <mem_trim+0x1b4>)
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	8a7b      	ldrh	r3, [r7, #18]
 8010048:	4413      	add	r3, r2
 801004a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	2200      	movs	r2, #0
 8010050:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	8a3a      	ldrh	r2, [r7, #16]
 8010056:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	8b7a      	ldrh	r2, [r7, #26]
 801005c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	8a7a      	ldrh	r2, [r7, #18]
 8010062:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	881b      	ldrh	r3, [r3, #0]
 8010068:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801006c:	d039      	beq.n	80100e2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 801006e:	4b21      	ldr	r3, [pc, #132]	; (80100f4 <mem_trim+0x1b4>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	697a      	ldr	r2, [r7, #20]
 8010074:	8812      	ldrh	r2, [r2, #0]
 8010076:	4413      	add	r3, r2
 8010078:	8a7a      	ldrh	r2, [r7, #18]
 801007a:	805a      	strh	r2, [r3, #2]
 801007c:	e031      	b.n	80100e2 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801007e:	887b      	ldrh	r3, [r7, #2]
 8010080:	f103 0214 	add.w	r2, r3, #20
 8010084:	8b3b      	ldrh	r3, [r7, #24]
 8010086:	429a      	cmp	r2, r3
 8010088:	d82b      	bhi.n	80100e2 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 801008a:	8b7a      	ldrh	r2, [r7, #26]
 801008c:	887b      	ldrh	r3, [r7, #2]
 801008e:	4413      	add	r3, r2
 8010090:	b29b      	uxth	r3, r3
 8010092:	3308      	adds	r3, #8
 8010094:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8010096:	4b17      	ldr	r3, [pc, #92]	; (80100f4 <mem_trim+0x1b4>)
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	8a7b      	ldrh	r3, [r7, #18]
 801009c:	4413      	add	r3, r2
 801009e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 80100a0:	4b1b      	ldr	r3, [pc, #108]	; (8010110 <mem_trim+0x1d0>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	697a      	ldr	r2, [r7, #20]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d202      	bcs.n	80100b0 <mem_trim+0x170>
      lfree = mem2;
 80100aa:	4a19      	ldr	r2, [pc, #100]	; (8010110 <mem_trim+0x1d0>)
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	2200      	movs	r2, #0
 80100b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	881a      	ldrh	r2, [r3, #0]
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	8b7a      	ldrh	r2, [r7, #26]
 80100c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	8a7a      	ldrh	r2, [r7, #18]
 80100c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100d2:	d006      	beq.n	80100e2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80100d4:	4b07      	ldr	r3, [pc, #28]	; (80100f4 <mem_trim+0x1b4>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	8812      	ldrh	r2, [r2, #0]
 80100dc:	4413      	add	r3, r2
 80100de:	8a7a      	ldrh	r2, [r7, #18]
 80100e0:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80100e2:	480a      	ldr	r0, [pc, #40]	; (801010c <mem_trim+0x1cc>)
 80100e4:	f009 fb63 	bl	80197ae <sys_mutex_unlock>
  return rmem;
 80100e8:	687b      	ldr	r3, [r7, #4]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3720      	adds	r7, #32
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	200050a8 	.word	0x200050a8
 80100f8:	200050ac 	.word	0x200050ac
 80100fc:	0801c41c 	.word	0x0801c41c
 8010100:	0801c55c 	.word	0x0801c55c
 8010104:	0801c464 	.word	0x0801c464
 8010108:	0801c574 	.word	0x0801c574
 801010c:	200050b4 	.word	0x200050b4
 8010110:	200050b0 	.word	0x200050b0

08010114 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b088      	sub	sp, #32
 8010118:	af00      	add	r7, sp, #0
 801011a:	4603      	mov	r3, r0
 801011c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 801011e:	88fb      	ldrh	r3, [r7, #6]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d101      	bne.n	8010128 <mem_malloc+0x14>
    return NULL;
 8010124:	2300      	movs	r3, #0
 8010126:	e0d0      	b.n	80102ca <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8010128:	88fb      	ldrh	r3, [r7, #6]
 801012a:	3303      	adds	r3, #3
 801012c:	b29b      	uxth	r3, r3
 801012e:	f023 0303 	bic.w	r3, r3, #3
 8010132:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8010134:	88fb      	ldrh	r3, [r7, #6]
 8010136:	2b0b      	cmp	r3, #11
 8010138:	d801      	bhi.n	801013e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801013a:	230c      	movs	r3, #12
 801013c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 801013e:	88fb      	ldrh	r3, [r7, #6]
 8010140:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010144:	d901      	bls.n	801014a <mem_malloc+0x36>
    return NULL;
 8010146:	2300      	movs	r3, #0
 8010148:	e0bf      	b.n	80102ca <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801014a:	4862      	ldr	r0, [pc, #392]	; (80102d4 <mem_malloc+0x1c0>)
 801014c:	f009 fb20 	bl	8019790 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8010150:	4b61      	ldr	r3, [pc, #388]	; (80102d8 <mem_malloc+0x1c4>)
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	4b61      	ldr	r3, [pc, #388]	; (80102dc <mem_malloc+0x1c8>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	83fb      	strh	r3, [r7, #30]
 801015c:	e0aa      	b.n	80102b4 <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 801015e:	4b5f      	ldr	r3, [pc, #380]	; (80102dc <mem_malloc+0x1c8>)
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	8bfb      	ldrh	r3, [r7, #30]
 8010164:	4413      	add	r3, r2
 8010166:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	791b      	ldrb	r3, [r3, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	f040 809b 	bne.w	80102a8 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	881b      	ldrh	r3, [r3, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	8bfb      	ldrh	r3, [r7, #30]
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	f1a3 0208 	sub.w	r2, r3, #8
 8010180:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8010182:	429a      	cmp	r2, r3
 8010184:	f0c0 8090 	bcc.w	80102a8 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	881b      	ldrh	r3, [r3, #0]
 801018c:	461a      	mov	r2, r3
 801018e:	8bfb      	ldrh	r3, [r7, #30]
 8010190:	1ad3      	subs	r3, r2, r3
 8010192:	f1a3 0208 	sub.w	r2, r3, #8
 8010196:	88fb      	ldrh	r3, [r7, #6]
 8010198:	3314      	adds	r3, #20
 801019a:	429a      	cmp	r2, r3
 801019c:	d327      	bcc.n	80101ee <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 801019e:	8bfa      	ldrh	r2, [r7, #30]
 80101a0:	88fb      	ldrh	r3, [r7, #6]
 80101a2:	4413      	add	r3, r2
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	3308      	adds	r3, #8
 80101a8:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80101aa:	4b4c      	ldr	r3, [pc, #304]	; (80102dc <mem_malloc+0x1c8>)
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	8a7b      	ldrh	r3, [r7, #18]
 80101b0:	4413      	add	r3, r2
 80101b2:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2200      	movs	r2, #0
 80101b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	881a      	ldrh	r2, [r3, #0]
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	8bfa      	ldrh	r2, [r7, #30]
 80101c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	8a7a      	ldrh	r2, [r7, #18]
 80101cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2201      	movs	r2, #1
 80101d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80101dc:	d00a      	beq.n	80101f4 <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80101de:	4b3f      	ldr	r3, [pc, #252]	; (80102dc <mem_malloc+0x1c8>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68fa      	ldr	r2, [r7, #12]
 80101e4:	8812      	ldrh	r2, [r2, #0]
 80101e6:	4413      	add	r3, r2
 80101e8:	8a7a      	ldrh	r2, [r7, #18]
 80101ea:	805a      	strh	r2, [r3, #2]
 80101ec:	e002      	b.n	80101f4 <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	2201      	movs	r2, #1
 80101f2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80101f4:	4b38      	ldr	r3, [pc, #224]	; (80102d8 <mem_malloc+0x1c4>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	697a      	ldr	r2, [r7, #20]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d127      	bne.n	801024e <mem_malloc+0x13a>
          struct mem *cur = lfree;
 80101fe:	4b36      	ldr	r3, [pc, #216]	; (80102d8 <mem_malloc+0x1c4>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010204:	e005      	b.n	8010212 <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8010206:	4b35      	ldr	r3, [pc, #212]	; (80102dc <mem_malloc+0x1c8>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	69ba      	ldr	r2, [r7, #24]
 801020c:	8812      	ldrh	r2, [r2, #0]
 801020e:	4413      	add	r3, r2
 8010210:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	791b      	ldrb	r3, [r3, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d004      	beq.n	8010224 <mem_malloc+0x110>
 801021a:	4b31      	ldr	r3, [pc, #196]	; (80102e0 <mem_malloc+0x1cc>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	69ba      	ldr	r2, [r7, #24]
 8010220:	429a      	cmp	r2, r3
 8010222:	d1f0      	bne.n	8010206 <mem_malloc+0xf2>
          }
          lfree = cur;
 8010224:	4a2c      	ldr	r2, [pc, #176]	; (80102d8 <mem_malloc+0x1c4>)
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801022a:	4b2b      	ldr	r3, [pc, #172]	; (80102d8 <mem_malloc+0x1c4>)
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	4b2c      	ldr	r3, [pc, #176]	; (80102e0 <mem_malloc+0x1cc>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	429a      	cmp	r2, r3
 8010234:	d00b      	beq.n	801024e <mem_malloc+0x13a>
 8010236:	4b28      	ldr	r3, [pc, #160]	; (80102d8 <mem_malloc+0x1c4>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	791b      	ldrb	r3, [r3, #4]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d006      	beq.n	801024e <mem_malloc+0x13a>
 8010240:	4b28      	ldr	r3, [pc, #160]	; (80102e4 <mem_malloc+0x1d0>)
 8010242:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010246:	4928      	ldr	r1, [pc, #160]	; (80102e8 <mem_malloc+0x1d4>)
 8010248:	4828      	ldr	r0, [pc, #160]	; (80102ec <mem_malloc+0x1d8>)
 801024a:	f00a fa1d 	bl	801a688 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801024e:	4821      	ldr	r0, [pc, #132]	; (80102d4 <mem_malloc+0x1c0>)
 8010250:	f009 faad 	bl	80197ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010254:	88fa      	ldrh	r2, [r7, #6]
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	4413      	add	r3, r2
 801025a:	3308      	adds	r3, #8
 801025c:	4a20      	ldr	r2, [pc, #128]	; (80102e0 <mem_malloc+0x1cc>)
 801025e:	6812      	ldr	r2, [r2, #0]
 8010260:	4293      	cmp	r3, r2
 8010262:	d906      	bls.n	8010272 <mem_malloc+0x15e>
 8010264:	4b1f      	ldr	r3, [pc, #124]	; (80102e4 <mem_malloc+0x1d0>)
 8010266:	f240 22d3 	movw	r2, #723	; 0x2d3
 801026a:	4921      	ldr	r1, [pc, #132]	; (80102f0 <mem_malloc+0x1dc>)
 801026c:	481f      	ldr	r0, [pc, #124]	; (80102ec <mem_malloc+0x1d8>)
 801026e:	f00a fa0b 	bl	801a688 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	f003 0303 	and.w	r3, r3, #3
 8010278:	2b00      	cmp	r3, #0
 801027a:	d006      	beq.n	801028a <mem_malloc+0x176>
 801027c:	4b19      	ldr	r3, [pc, #100]	; (80102e4 <mem_malloc+0x1d0>)
 801027e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010282:	491c      	ldr	r1, [pc, #112]	; (80102f4 <mem_malloc+0x1e0>)
 8010284:	4819      	ldr	r0, [pc, #100]	; (80102ec <mem_malloc+0x1d8>)
 8010286:	f00a f9ff 	bl	801a688 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	f003 0303 	and.w	r3, r3, #3
 8010290:	2b00      	cmp	r3, #0
 8010292:	d006      	beq.n	80102a2 <mem_malloc+0x18e>
 8010294:	4b13      	ldr	r3, [pc, #76]	; (80102e4 <mem_malloc+0x1d0>)
 8010296:	f240 22d7 	movw	r2, #727	; 0x2d7
 801029a:	4917      	ldr	r1, [pc, #92]	; (80102f8 <mem_malloc+0x1e4>)
 801029c:	4813      	ldr	r0, [pc, #76]	; (80102ec <mem_malloc+0x1d8>)
 801029e:	f00a f9f3 	bl	801a688 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	3308      	adds	r3, #8
 80102a6:	e010      	b.n	80102ca <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80102a8:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <mem_malloc+0x1c8>)
 80102aa:	681a      	ldr	r2, [r3, #0]
 80102ac:	8bfb      	ldrh	r3, [r7, #30]
 80102ae:	4413      	add	r3, r2
 80102b0:	881b      	ldrh	r3, [r3, #0]
 80102b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80102b4:	8bfa      	ldrh	r2, [r7, #30]
 80102b6:	88fb      	ldrh	r3, [r7, #6]
 80102b8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80102bc:	429a      	cmp	r2, r3
 80102be:	f4ff af4e 	bcc.w	801015e <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80102c2:	4804      	ldr	r0, [pc, #16]	; (80102d4 <mem_malloc+0x1c0>)
 80102c4:	f009 fa73 	bl	80197ae <sys_mutex_unlock>
  return NULL;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3720      	adds	r7, #32
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	200050b4 	.word	0x200050b4
 80102d8:	200050b0 	.word	0x200050b0
 80102dc:	200050a8 	.word	0x200050a8
 80102e0:	200050ac 	.word	0x200050ac
 80102e4:	0801c41c 	.word	0x0801c41c
 80102e8:	0801c594 	.word	0x0801c594
 80102ec:	0801c464 	.word	0x0801c464
 80102f0:	0801c5b0 	.word	0x0801c5b0
 80102f4:	0801c5e0 	.word	0x0801c5e0
 80102f8:	0801c610 	.word	0x0801c610

080102fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80102fc:	b480      	push	{r7}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	2200      	movs	r2, #0
 801030a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	3303      	adds	r3, #3
 8010312:	f023 0303 	bic.w	r3, r3, #3
 8010316:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010318:	2300      	movs	r3, #0
 801031a:	60fb      	str	r3, [r7, #12]
 801031c:	e011      	b.n	8010342 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	68ba      	ldr	r2, [r7, #8]
 801032e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	881b      	ldrh	r3, [r3, #0]
 8010334:	461a      	mov	r2, r3
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	4413      	add	r3, r2
 801033a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	3301      	adds	r3, #1
 8010340:	60fb      	str	r3, [r7, #12]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	885b      	ldrh	r3, [r3, #2]
 8010346:	461a      	mov	r2, r3
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	4293      	cmp	r3, r2
 801034c:	dbe7      	blt.n	801031e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801034e:	bf00      	nop
 8010350:	bf00      	nop
 8010352:	3714      	adds	r7, #20
 8010354:	46bd      	mov	sp, r7
 8010356:	bc80      	pop	{r7}
 8010358:	4770      	bx	lr
	...

0801035c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010362:	2300      	movs	r3, #0
 8010364:	80fb      	strh	r3, [r7, #6]
 8010366:	e009      	b.n	801037c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010368:	88fb      	ldrh	r3, [r7, #6]
 801036a:	4a08      	ldr	r2, [pc, #32]	; (801038c <memp_init+0x30>)
 801036c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010370:	4618      	mov	r0, r3
 8010372:	f7ff ffc3 	bl	80102fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010376:	88fb      	ldrh	r3, [r7, #6]
 8010378:	3301      	adds	r3, #1
 801037a:	80fb      	strh	r3, [r7, #6]
 801037c:	88fb      	ldrh	r3, [r7, #6]
 801037e:	2b0c      	cmp	r3, #12
 8010380:	d9f2      	bls.n	8010368 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010382:	bf00      	nop
 8010384:	bf00      	nop
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	0801ec60 	.word	0x0801ec60

08010390 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010398:	f009 fa3c 	bl	8019814 <sys_arch_protect>
 801039c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d015      	beq.n	80103d8 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	689b      	ldr	r3, [r3, #8]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	6812      	ldr	r2, [r2, #0]
 80103b4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	f003 0303 	and.w	r3, r3, #3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d006      	beq.n	80103ce <do_memp_malloc_pool+0x3e>
 80103c0:	4b09      	ldr	r3, [pc, #36]	; (80103e8 <do_memp_malloc_pool+0x58>)
 80103c2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80103c6:	4909      	ldr	r1, [pc, #36]	; (80103ec <do_memp_malloc_pool+0x5c>)
 80103c8:	4809      	ldr	r0, [pc, #36]	; (80103f0 <do_memp_malloc_pool+0x60>)
 80103ca:	f00a f95d 	bl	801a688 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f009 fa2e 	bl	8019830 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	e003      	b.n	80103e0 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f009 fa29 	bl	8019830 <sys_arch_unprotect>
  return NULL;
 80103de:	2300      	movs	r3, #0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3710      	adds	r7, #16
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	0801c634 	.word	0x0801c634
 80103ec:	0801c664 	.word	0x0801c664
 80103f0:	0801c688 	.word	0x0801c688

080103f4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b084      	sub	sp, #16
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	4603      	mov	r3, r0
 80103fc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80103fe:	79fb      	ldrb	r3, [r7, #7]
 8010400:	2b0c      	cmp	r3, #12
 8010402:	d908      	bls.n	8010416 <memp_malloc+0x22>
 8010404:	4b0a      	ldr	r3, [pc, #40]	; (8010430 <memp_malloc+0x3c>)
 8010406:	f240 1287 	movw	r2, #391	; 0x187
 801040a:	490a      	ldr	r1, [pc, #40]	; (8010434 <memp_malloc+0x40>)
 801040c:	480a      	ldr	r0, [pc, #40]	; (8010438 <memp_malloc+0x44>)
 801040e:	f00a f93b 	bl	801a688 <iprintf>
 8010412:	2300      	movs	r3, #0
 8010414:	e008      	b.n	8010428 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	4a08      	ldr	r2, [pc, #32]	; (801043c <memp_malloc+0x48>)
 801041a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff ffb6 	bl	8010390 <do_memp_malloc_pool>
 8010424:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010426:	68fb      	ldr	r3, [r7, #12]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	0801c634 	.word	0x0801c634
 8010434:	0801c6c4 	.word	0x0801c6c4
 8010438:	0801c688 	.word	0x0801c688
 801043c:	0801ec60 	.word	0x0801ec60

08010440 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b084      	sub	sp, #16
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	f003 0303 	and.w	r3, r3, #3
 8010450:	2b00      	cmp	r3, #0
 8010452:	d006      	beq.n	8010462 <do_memp_free_pool+0x22>
 8010454:	4b0d      	ldr	r3, [pc, #52]	; (801048c <do_memp_free_pool+0x4c>)
 8010456:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801045a:	490d      	ldr	r1, [pc, #52]	; (8010490 <do_memp_free_pool+0x50>)
 801045c:	480d      	ldr	r0, [pc, #52]	; (8010494 <do_memp_free_pool+0x54>)
 801045e:	f00a f913 	bl	801a688 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010466:	f009 f9d5 	bl	8019814 <sys_arch_protect>
 801046a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	689b      	ldr	r3, [r3, #8]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	68fa      	ldr	r2, [r7, #12]
 801047c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801047e:	68b8      	ldr	r0, [r7, #8]
 8010480:	f009 f9d6 	bl	8019830 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010484:	bf00      	nop
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	0801c634 	.word	0x0801c634
 8010490:	0801c6e4 	.word	0x0801c6e4
 8010494:	0801c688 	.word	0x0801c688

08010498 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	4603      	mov	r3, r0
 80104a0:	6039      	str	r1, [r7, #0]
 80104a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80104a4:	79fb      	ldrb	r3, [r7, #7]
 80104a6:	2b0c      	cmp	r3, #12
 80104a8:	d907      	bls.n	80104ba <memp_free+0x22>
 80104aa:	4b0c      	ldr	r3, [pc, #48]	; (80104dc <memp_free+0x44>)
 80104ac:	f240 12db 	movw	r2, #475	; 0x1db
 80104b0:	490b      	ldr	r1, [pc, #44]	; (80104e0 <memp_free+0x48>)
 80104b2:	480c      	ldr	r0, [pc, #48]	; (80104e4 <memp_free+0x4c>)
 80104b4:	f00a f8e8 	bl	801a688 <iprintf>
 80104b8:	e00c      	b.n	80104d4 <memp_free+0x3c>

  if (mem == NULL) {
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d008      	beq.n	80104d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80104c0:	79fb      	ldrb	r3, [r7, #7]
 80104c2:	4a09      	ldr	r2, [pc, #36]	; (80104e8 <memp_free+0x50>)
 80104c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104c8:	6839      	ldr	r1, [r7, #0]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7ff ffb8 	bl	8010440 <do_memp_free_pool>
 80104d0:	e000      	b.n	80104d4 <memp_free+0x3c>
    return;
 80104d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80104d4:	3708      	adds	r7, #8
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	0801c634 	.word	0x0801c634
 80104e0:	0801c704 	.word	0x0801c704
 80104e4:	0801c688 	.word	0x0801c688
 80104e8:	0801ec60 	.word	0x0801ec60

080104ec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80104ec:	b480      	push	{r7}
 80104ee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80104f0:	bf00      	nop
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bc80      	pop	{r7}
 80104f6:	4770      	bx	lr

080104f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b084      	sub	sp, #16
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]
 8010504:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d105      	bne.n	8010518 <netif_add+0x20>
 801050c:	4b21      	ldr	r3, [pc, #132]	; (8010594 <netif_add+0x9c>)
 801050e:	22fb      	movs	r2, #251	; 0xfb
 8010510:	4921      	ldr	r1, [pc, #132]	; (8010598 <netif_add+0xa0>)
 8010512:	4822      	ldr	r0, [pc, #136]	; (801059c <netif_add+0xa4>)
 8010514:	f00a f8b8 	bl	801a688 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2200      	movs	r2, #0
 801051c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2200      	movs	r2, #0
 8010522:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2200      	movs	r2, #0
 8010528:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2200      	movs	r2, #0
 801052e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2203      	movs	r2, #3
 8010536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	69ba      	ldr	r2, [r7, #24]
 8010544:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8010546:	4b16      	ldr	r3, [pc, #88]	; (80105a0 <netif_add+0xa8>)
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	1c5a      	adds	r2, r3, #1
 801054c:	b2d1      	uxtb	r1, r2
 801054e:	4a14      	ldr	r2, [pc, #80]	; (80105a0 <netif_add+0xa8>)
 8010550:	7011      	strb	r1, [r2, #0]
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6a3a      	ldr	r2, [r7, #32]
 801055c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	68b9      	ldr	r1, [r7, #8]
 8010564:	68f8      	ldr	r0, [r7, #12]
 8010566:	f000 f81f 	bl	80105a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	4798      	blx	r3
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <netif_add+0x82>
    return NULL;
 8010576:	2300      	movs	r3, #0
 8010578:	e007      	b.n	801058a <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801057a:	4b0a      	ldr	r3, [pc, #40]	; (80105a4 <netif_add+0xac>)
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010582:	4a08      	ldr	r2, [pc, #32]	; (80105a4 <netif_add+0xac>)
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8010588:	68fb      	ldr	r3, [r7, #12]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	0801c720 	.word	0x0801c720
 8010598:	0801c754 	.word	0x0801c754
 801059c:	0801c76c 	.word	0x0801c76c
 80105a0:	200050ec 	.word	0x200050ec
 80105a4:	2000bec8 	.word	0x2000bec8

080105a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	60f8      	str	r0, [r7, #12]
 80105b0:	60b9      	str	r1, [r7, #8]
 80105b2:	607a      	str	r2, [r7, #4]
 80105b4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <netif_set_addr+0x1c>
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d10c      	bne.n	80105de <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 80105c4:	68b9      	ldr	r1, [r7, #8]
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f000 f81a 	bl	8010600 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 80105cc:	6879      	ldr	r1, [r7, #4]
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f000 f861 	bl	8010696 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80105d4:	6839      	ldr	r1, [r7, #0]
 80105d6:	68f8      	ldr	r0, [r7, #12]
 80105d8:	f000 f84a 	bl	8010670 <netif_set_gw>
 80105dc:	e00c      	b.n	80105f8 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 80105de:	6879      	ldr	r1, [r7, #4]
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f000 f858 	bl	8010696 <netif_set_netmask>
    netif_set_gw(netif, gw);
 80105e6:	6839      	ldr	r1, [r7, #0]
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	f000 f841 	bl	8010670 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 80105ee:	68b9      	ldr	r1, [r7, #8]
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f000 f805 	bl	8010600 <netif_set_ipaddr>
  }
}
 80105f6:	bf00      	nop
 80105f8:	bf00      	nop
 80105fa:	3710      	adds	r7, #16
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b084      	sub	sp, #16
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d003      	beq.n	8010618 <netif_set_ipaddr+0x18>
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	60fb      	str	r3, [r7, #12]
 8010616:	e002      	b.n	801061e <netif_set_ipaddr+0x1e>
 8010618:	4b14      	ldr	r3, [pc, #80]	; (801066c <netif_set_ipaddr+0x6c>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3304      	adds	r3, #4
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	429a      	cmp	r2, r3
 8010628:	d01c      	beq.n	8010664 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	3304      	adds	r3, #4
 801062e:	f107 020c 	add.w	r2, r7, #12
 8010632:	4611      	mov	r1, r2
 8010634:	4618      	mov	r0, r3
 8010636:	f002 fca9 	bl	8012f8c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	3304      	adds	r3, #4
 801063e:	f107 020c 	add.w	r2, r7, #12
 8010642:	4611      	mov	r1, r2
 8010644:	4618      	mov	r0, r3
 8010646:	f006 fd9b 	bl	8017180 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <netif_set_ipaddr+0x56>
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	e000      	b.n	8010658 <netif_set_ipaddr+0x58>
 8010656:	2300      	movs	r3, #0
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801065c:	2101      	movs	r1, #1
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 f85d 	bl	801071e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8010664:	bf00      	nop
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	0801ecd4 	.word	0x0801ecd4

08010670 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <netif_set_gw+0x16>
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	e000      	b.n	8010688 <netif_set_gw+0x18>
 8010686:	2300      	movs	r3, #0
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 801068c:	bf00      	nop
 801068e:	370c      	adds	r7, #12
 8010690:	46bd      	mov	sp, r7
 8010692:	bc80      	pop	{r7}
 8010694:	4770      	bx	lr

08010696 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8010696:	b480      	push	{r7}
 8010698:	b083      	sub	sp, #12
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
 801069e:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d002      	beq.n	80106ac <netif_set_netmask+0x16>
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	e000      	b.n	80106ae <netif_set_netmask+0x18>
 80106ac:	2300      	movs	r3, #0
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 80106b2:	bf00      	nop
 80106b4:	370c      	adds	r7, #12
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bc80      	pop	{r7}
 80106ba:	4770      	bx	lr

080106bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80106c4:	4a03      	ldr	r2, [pc, #12]	; (80106d4 <netif_set_default+0x18>)
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80106ca:	bf00      	nop
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bc80      	pop	{r7}
 80106d2:	4770      	bx	lr
 80106d4:	2000becc 	.word	0x2000becc

080106d8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106e6:	f003 0301 	and.w	r3, r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d113      	bne.n	8010716 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106f4:	f043 0301 	orr.w	r3, r3, #1
 80106f8:	b2da      	uxtb	r2, r3
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010706:	f003 0304 	and.w	r3, r3, #4
 801070a:	2b00      	cmp	r3, #0
 801070c:	d003      	beq.n	8010716 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 801070e:	2103      	movs	r1, #3
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 f804 	bl	801071e <netif_issue_reports>
    }
  }
}
 8010716:	bf00      	nop
 8010718:	3708      	adds	r7, #8
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b082      	sub	sp, #8
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
 8010726:	460b      	mov	r3, r1
 8010728:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801072a:	78fb      	ldrb	r3, [r7, #3]
 801072c:	f003 0301 	and.w	r3, r3, #1
 8010730:	2b00      	cmp	r3, #0
 8010732:	d011      	beq.n	8010758 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	3304      	adds	r3, #4
 8010738:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00c      	beq.n	8010758 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010744:	f003 0308 	and.w	r3, r3, #8
 8010748:	2b00      	cmp	r3, #0
 801074a:	d005      	beq.n	8010758 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	3304      	adds	r3, #4
 8010750:	4619      	mov	r1, r3
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f007 fc46 	bl	8017fe4 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8010758:	bf00      	nop
 801075a:	3708      	adds	r7, #8
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801076e:	f003 0301 	and.w	r3, r3, #1
 8010772:	2b00      	cmp	r3, #0
 8010774:	d012      	beq.n	801079c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801077c:	f023 0301 	bic.w	r3, r3, #1
 8010780:	b2da      	uxtb	r2, r3
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801078e:	f003 0308 	and.w	r3, r3, #8
 8010792:	2b00      	cmp	r3, #0
 8010794:	d002      	beq.n	801079c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f006 ffea 	bl	8017770 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801079c:	bf00      	nop
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80107b2:	f003 0304 	and.w	r3, r3, #4
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d11b      	bne.n	80107f2 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80107c0:	f043 0304 	orr.w	r3, r3, #4
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80107d2:	f003 0301 	and.w	r3, r3, #1
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d003      	beq.n	80107e2 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80107da:	2103      	movs	r1, #3
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff ff9e 	bl	801071e <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	69db      	ldr	r3, [r3, #28]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d003      	beq.n	80107f2 <netif_set_link_up+0x4e>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	69db      	ldr	r3, [r3, #28]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	4798      	blx	r3
  }
}
 80107f2:	bf00      	nop
 80107f4:	3708      	adds	r7, #8
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b082      	sub	sp, #8
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010808:	f003 0304 	and.w	r3, r3, #4
 801080c:	2b00      	cmp	r3, #0
 801080e:	d010      	beq.n	8010832 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010816:	f023 0304 	bic.w	r3, r3, #4
 801081a:	b2da      	uxtb	r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	69db      	ldr	r3, [r3, #28]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d003      	beq.n	8010832 <netif_set_link_down+0x38>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	69db      	ldr	r3, [r3, #28]
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	4798      	blx	r3
  }
}
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801083a:	b480      	push	{r7}
 801083c:	b083      	sub	sp, #12
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	6039      	str	r1, [r7, #0]
  if (netif) {
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d002      	beq.n	8010850 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	61da      	str	r2, [r3, #28]
  }
}
 8010850:	bf00      	nop
 8010852:	370c      	adds	r7, #12
 8010854:	46bd      	mov	sp, r7
 8010856:	bc80      	pop	{r7}
 8010858:	4770      	bx	lr
	...

0801085c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010862:	f008 ffd7 	bl	8019814 <sys_arch_protect>
 8010866:	6038      	str	r0, [r7, #0]
 8010868:	4b0f      	ldr	r3, [pc, #60]	; (80108a8 <pbuf_free_ooseq+0x4c>)
 801086a:	2200      	movs	r2, #0
 801086c:	701a      	strb	r2, [r3, #0]
 801086e:	6838      	ldr	r0, [r7, #0]
 8010870:	f008 ffde 	bl	8019830 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010874:	4b0d      	ldr	r3, [pc, #52]	; (80108ac <pbuf_free_ooseq+0x50>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	607b      	str	r3, [r7, #4]
 801087a:	e00f      	b.n	801089c <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010880:	2b00      	cmp	r3, #0
 8010882:	d008      	beq.n	8010896 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010888:	4618      	mov	r0, r3
 801088a:	f001 ffea 	bl	8012862 <tcp_segs_free>
      pcb->ooseq = NULL;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2200      	movs	r2, #0
 8010892:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8010894:	e005      	b.n	80108a2 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	607b      	str	r3, [r7, #4]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1ec      	bne.n	801087c <pbuf_free_ooseq+0x20>
    }
  }
}
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	2000bed0 	.word	0x2000bed0
 80108ac:	2000bed8 	.word	0x2000bed8

080108b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80108b8:	f7ff ffd0 	bl	801085c <pbuf_free_ooseq>
}
 80108bc:	bf00      	nop
 80108be:	3708      	adds	r7, #8
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80108ca:	f008 ffa3 	bl	8019814 <sys_arch_protect>
 80108ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80108d0:	4b10      	ldr	r3, [pc, #64]	; (8010914 <pbuf_pool_is_empty+0x50>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80108d6:	4b0f      	ldr	r3, [pc, #60]	; (8010914 <pbuf_pool_is_empty+0x50>)
 80108d8:	2201      	movs	r2, #1
 80108da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f008 ffa7 	bl	8019830 <sys_arch_unprotect>

  if (!queued) {
 80108e2:	78fb      	ldrb	r3, [r7, #3]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d110      	bne.n	801090a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80108e8:	2200      	movs	r2, #0
 80108ea:	2100      	movs	r1, #0
 80108ec:	480a      	ldr	r0, [pc, #40]	; (8010918 <pbuf_pool_is_empty+0x54>)
 80108ee:	f7fc f9d5 	bl	800cc9c <tcpip_callback_with_block>
 80108f2:	4603      	mov	r3, r0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d008      	beq.n	801090a <pbuf_pool_is_empty+0x46>
 80108f8:	f008 ff8c 	bl	8019814 <sys_arch_protect>
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	4b05      	ldr	r3, [pc, #20]	; (8010914 <pbuf_pool_is_empty+0x50>)
 8010900:	2200      	movs	r2, #0
 8010902:	701a      	strb	r2, [r3, #0]
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f008 ff93 	bl	8019830 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801090a:	bf00      	nop
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	2000bed0 	.word	0x2000bed0
 8010918:	080108b1 	.word	0x080108b1

0801091c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b088      	sub	sp, #32
 8010920:	af00      	add	r7, sp, #0
 8010922:	4603      	mov	r3, r0
 8010924:	71fb      	strb	r3, [r7, #7]
 8010926:	460b      	mov	r3, r1
 8010928:	80bb      	strh	r3, [r7, #4]
 801092a:	4613      	mov	r3, r2
 801092c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	2b04      	cmp	r3, #4
 8010932:	d81c      	bhi.n	801096e <pbuf_alloc+0x52>
 8010934:	a201      	add	r2, pc, #4	; (adr r2, 801093c <pbuf_alloc+0x20>)
 8010936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093a:	bf00      	nop
 801093c:	08010951 	.word	0x08010951
 8010940:	08010957 	.word	0x08010957
 8010944:	0801095d 	.word	0x0801095d
 8010948:	08010963 	.word	0x08010963
 801094c:	08010969 	.word	0x08010969
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010950:	2336      	movs	r3, #54	; 0x36
 8010952:	82fb      	strh	r3, [r7, #22]
    break;
 8010954:	e014      	b.n	8010980 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010956:	2322      	movs	r3, #34	; 0x22
 8010958:	82fb      	strh	r3, [r7, #22]
    break;
 801095a:	e011      	b.n	8010980 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801095c:	230e      	movs	r3, #14
 801095e:	82fb      	strh	r3, [r7, #22]
    break;
 8010960:	e00e      	b.n	8010980 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8010962:	2300      	movs	r3, #0
 8010964:	82fb      	strh	r3, [r7, #22]
    break;
 8010966:	e00b      	b.n	8010980 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8010968:	2300      	movs	r3, #0
 801096a:	82fb      	strh	r3, [r7, #22]
    break;
 801096c:	e008      	b.n	8010980 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 801096e:	4ba1      	ldr	r3, [pc, #644]	; (8010bf4 <pbuf_alloc+0x2d8>)
 8010970:	f44f 728b 	mov.w	r2, #278	; 0x116
 8010974:	49a0      	ldr	r1, [pc, #640]	; (8010bf8 <pbuf_alloc+0x2dc>)
 8010976:	48a1      	ldr	r0, [pc, #644]	; (8010bfc <pbuf_alloc+0x2e0>)
 8010978:	f009 fe86 	bl	801a688 <iprintf>
    return NULL;
 801097c:	2300      	movs	r3, #0
 801097e:	e15c      	b.n	8010c3a <pbuf_alloc+0x31e>
  }

  switch (type) {
 8010980:	79bb      	ldrb	r3, [r7, #6]
 8010982:	2b03      	cmp	r3, #3
 8010984:	d00d      	beq.n	80109a2 <pbuf_alloc+0x86>
 8010986:	2b03      	cmp	r3, #3
 8010988:	f300 8146 	bgt.w	8010c18 <pbuf_alloc+0x2fc>
 801098c:	2b00      	cmp	r3, #0
 801098e:	f000 80d0 	beq.w	8010b32 <pbuf_alloc+0x216>
 8010992:	2b00      	cmp	r3, #0
 8010994:	f2c0 8140 	blt.w	8010c18 <pbuf_alloc+0x2fc>
 8010998:	3b01      	subs	r3, #1
 801099a:	2b01      	cmp	r3, #1
 801099c:	f200 813c 	bhi.w	8010c18 <pbuf_alloc+0x2fc>
 80109a0:	e10d      	b.n	8010bbe <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80109a2:	200c      	movs	r0, #12
 80109a4:	f7ff fd26 	bl	80103f4 <memp_malloc>
 80109a8:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d103      	bne.n	80109b8 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80109b0:	f7ff ff88 	bl	80108c4 <pbuf_pool_is_empty>
      return NULL;
 80109b4:	2300      	movs	r3, #0
 80109b6:	e140      	b.n	8010c3a <pbuf_alloc+0x31e>
    }
    p->type = type;
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	79ba      	ldrb	r2, [r7, #6]
 80109bc:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	2200      	movs	r2, #0
 80109c2:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80109c4:	8afb      	ldrh	r3, [r7, #22]
 80109c6:	3310      	adds	r3, #16
 80109c8:	69fa      	ldr	r2, [r7, #28]
 80109ca:	4413      	add	r3, r2
 80109cc:	3303      	adds	r3, #3
 80109ce:	f023 0303 	bic.w	r3, r3, #3
 80109d2:	461a      	mov	r2, r3
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	f003 0303 	and.w	r3, r3, #3
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d006      	beq.n	80109f2 <pbuf_alloc+0xd6>
 80109e4:	4b83      	ldr	r3, [pc, #524]	; (8010bf4 <pbuf_alloc+0x2d8>)
 80109e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80109ea:	4985      	ldr	r1, [pc, #532]	; (8010c00 <pbuf_alloc+0x2e4>)
 80109ec:	4883      	ldr	r0, [pc, #524]	; (8010bfc <pbuf_alloc+0x2e0>)
 80109ee:	f009 fe4b 	bl	801a688 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	88ba      	ldrh	r2, [r7, #4]
 80109f6:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80109f8:	8afb      	ldrh	r3, [r7, #22]
 80109fa:	3303      	adds	r3, #3
 80109fc:	f023 0303 	bic.w	r3, r3, #3
 8010a00:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8010a04:	88bb      	ldrh	r3, [r7, #4]
 8010a06:	4293      	cmp	r3, r2
 8010a08:	bf28      	it	cs
 8010a0a:	4613      	movcs	r3, r2
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	69fb      	ldr	r3, [r7, #28]
 8010a10:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010a12:	69fb      	ldr	r3, [r7, #28]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	69fa      	ldr	r2, [r7, #28]
 8010a18:	8952      	ldrh	r2, [r2, #10]
 8010a1a:	441a      	add	r2, r3
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010a22:	429a      	cmp	r2, r3
 8010a24:	d906      	bls.n	8010a34 <pbuf_alloc+0x118>
 8010a26:	4b73      	ldr	r3, [pc, #460]	; (8010bf4 <pbuf_alloc+0x2d8>)
 8010a28:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010a2c:	4975      	ldr	r1, [pc, #468]	; (8010c04 <pbuf_alloc+0x2e8>)
 8010a2e:	4873      	ldr	r0, [pc, #460]	; (8010bfc <pbuf_alloc+0x2e0>)
 8010a30:	f009 fe2a 	bl	801a688 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010a34:	8afb      	ldrh	r3, [r7, #22]
 8010a36:	3303      	adds	r3, #3
 8010a38:	f023 0303 	bic.w	r3, r3, #3
 8010a3c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010a40:	d106      	bne.n	8010a50 <pbuf_alloc+0x134>
 8010a42:	4b6c      	ldr	r3, [pc, #432]	; (8010bf4 <pbuf_alloc+0x2d8>)
 8010a44:	f240 1231 	movw	r2, #305	; 0x131
 8010a48:	496f      	ldr	r1, [pc, #444]	; (8010c08 <pbuf_alloc+0x2ec>)
 8010a4a:	486c      	ldr	r0, [pc, #432]	; (8010bfc <pbuf_alloc+0x2e0>)
 8010a4c:	f009 fe1c 	bl	801a688 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	2201      	movs	r2, #1
 8010a54:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8010a5a:	88bb      	ldrh	r3, [r7, #4]
 8010a5c:	69fa      	ldr	r2, [r7, #28]
 8010a5e:	8952      	ldrh	r2, [r2, #10]
 8010a60:	1a9b      	subs	r3, r3, r2
 8010a62:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8010a64:	e061      	b.n	8010b2a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010a66:	200c      	movs	r0, #12
 8010a68:	f7ff fcc4 	bl	80103f4 <memp_malloc>
 8010a6c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d106      	bne.n	8010a82 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8010a74:	f7ff ff26 	bl	80108c4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8010a78:	69f8      	ldr	r0, [r7, #28]
 8010a7a:	f000 fac7 	bl	801100c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	e0db      	b.n	8010c3a <pbuf_alloc+0x31e>
      }
      q->type = type;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	79ba      	ldrb	r2, [r7, #6]
 8010a86:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2200      	movs	r2, #0
 8010a92:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	68fa      	ldr	r2, [r7, #12]
 8010a98:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	dd06      	ble.n	8010ab2 <pbuf_alloc+0x196>
 8010aa4:	4b53      	ldr	r3, [pc, #332]	; (8010bf4 <pbuf_alloc+0x2d8>)
 8010aa6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8010aaa:	4958      	ldr	r1, [pc, #352]	; (8010c0c <pbuf_alloc+0x2f0>)
 8010aac:	4853      	ldr	r0, [pc, #332]	; (8010bfc <pbuf_alloc+0x2e0>)
 8010aae:	f009 fdeb 	bl	801a688 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010ac2:	bf28      	it	cs
 8010ac4:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f103 0210 	add.w	r2, r3, #16
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	685b      	ldr	r3, [r3, #4]
 8010adc:	f003 0303 	and.w	r3, r3, #3
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d006      	beq.n	8010af2 <pbuf_alloc+0x1d6>
 8010ae4:	4b43      	ldr	r3, [pc, #268]	; (8010bf4 <pbuf_alloc+0x2d8>)
 8010ae6:	f240 1251 	movw	r2, #337	; 0x151
 8010aea:	4949      	ldr	r1, [pc, #292]	; (8010c10 <pbuf_alloc+0x2f4>)
 8010aec:	4843      	ldr	r0, [pc, #268]	; (8010bfc <pbuf_alloc+0x2e0>)
 8010aee:	f009 fdcb 	bl	801a688 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8010af2:	69fb      	ldr	r3, [r7, #28]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	69fa      	ldr	r2, [r7, #28]
 8010af8:	8952      	ldrh	r2, [r2, #10]
 8010afa:	441a      	add	r2, r3
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d906      	bls.n	8010b14 <pbuf_alloc+0x1f8>
 8010b06:	4b3b      	ldr	r3, [pc, #236]	; (8010bf4 <pbuf_alloc+0x2d8>)
 8010b08:	f240 1253 	movw	r2, #339	; 0x153
 8010b0c:	493d      	ldr	r1, [pc, #244]	; (8010c04 <pbuf_alloc+0x2e8>)
 8010b0e:	483b      	ldr	r0, [pc, #236]	; (8010bfc <pbuf_alloc+0x2e0>)
 8010b10:	f009 fdba 	bl	801a688 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2201      	movs	r2, #1
 8010b18:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	895b      	ldrh	r3, [r3, #10]
 8010b1e:	461a      	mov	r2, r3
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	1a9b      	subs	r3, r3, r2
 8010b24:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	dc9a      	bgt.n	8010a66 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8010b30:	e07c      	b.n	8010c2c <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8010b32:	8afb      	ldrh	r3, [r7, #22]
 8010b34:	3313      	adds	r3, #19
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	f023 0303 	bic.w	r3, r3, #3
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	88bb      	ldrh	r3, [r7, #4]
 8010b40:	3303      	adds	r3, #3
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	f023 0303 	bic.w	r3, r3, #3
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	4413      	add	r3, r2
 8010b4c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8010b4e:	897a      	ldrh	r2, [r7, #10]
 8010b50:	88bb      	ldrh	r3, [r7, #4]
 8010b52:	3303      	adds	r3, #3
 8010b54:	f023 0303 	bic.w	r3, r3, #3
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d201      	bcs.n	8010b60 <pbuf_alloc+0x244>
        return NULL;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	e06c      	b.n	8010c3a <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8010b60:	897b      	ldrh	r3, [r7, #10]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7ff fad6 	bl	8010114 <mem_malloc>
 8010b68:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d101      	bne.n	8010b74 <pbuf_alloc+0x258>
      return NULL;
 8010b70:	2300      	movs	r3, #0
 8010b72:	e062      	b.n	8010c3a <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8010b74:	8afb      	ldrh	r3, [r7, #22]
 8010b76:	3310      	adds	r3, #16
 8010b78:	69fa      	ldr	r2, [r7, #28]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	3303      	adds	r3, #3
 8010b7e:	f023 0303 	bic.w	r3, r3, #3
 8010b82:	461a      	mov	r2, r3
 8010b84:	69fb      	ldr	r3, [r7, #28]
 8010b86:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8010b88:	69fb      	ldr	r3, [r7, #28]
 8010b8a:	88ba      	ldrh	r2, [r7, #4]
 8010b8c:	811a      	strh	r2, [r3, #8]
 8010b8e:	69fb      	ldr	r3, [r7, #28]
 8010b90:	891a      	ldrh	r2, [r3, #8]
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	601a      	str	r2, [r3, #0]
    p->type = type;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	79ba      	ldrb	r2, [r7, #6]
 8010ba0:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	f003 0303 	and.w	r3, r3, #3
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d03d      	beq.n	8010c2a <pbuf_alloc+0x30e>
 8010bae:	4b11      	ldr	r3, [pc, #68]	; (8010bf4 <pbuf_alloc+0x2d8>)
 8010bb0:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8010bb4:	4917      	ldr	r1, [pc, #92]	; (8010c14 <pbuf_alloc+0x2f8>)
 8010bb6:	4811      	ldr	r0, [pc, #68]	; (8010bfc <pbuf_alloc+0x2e0>)
 8010bb8:	f009 fd66 	bl	801a688 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8010bbc:	e035      	b.n	8010c2a <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010bbe:	200b      	movs	r0, #11
 8010bc0:	f7ff fc18 	bl	80103f4 <memp_malloc>
 8010bc4:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d101      	bne.n	8010bd0 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	e034      	b.n	8010c3a <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	88ba      	ldrh	r2, [r7, #4]
 8010bda:	811a      	strh	r2, [r3, #8]
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	891a      	ldrh	r2, [r3, #8]
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	2200      	movs	r2, #0
 8010be8:	601a      	str	r2, [r3, #0]
    p->type = type;
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	79ba      	ldrb	r2, [r7, #6]
 8010bee:	731a      	strb	r2, [r3, #12]
    break;
 8010bf0:	e01c      	b.n	8010c2c <pbuf_alloc+0x310>
 8010bf2:	bf00      	nop
 8010bf4:	0801c794 	.word	0x0801c794
 8010bf8:	0801c7c4 	.word	0x0801c7c4
 8010bfc:	0801c7e0 	.word	0x0801c7e0
 8010c00:	0801c808 	.word	0x0801c808
 8010c04:	0801c838 	.word	0x0801c838
 8010c08:	0801c86c 	.word	0x0801c86c
 8010c0c:	0801c8a0 	.word	0x0801c8a0
 8010c10:	0801c8b4 	.word	0x0801c8b4
 8010c14:	0801c8e4 	.word	0x0801c8e4
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010c18:	4b0a      	ldr	r3, [pc, #40]	; (8010c44 <pbuf_alloc+0x328>)
 8010c1a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8010c1e:	490a      	ldr	r1, [pc, #40]	; (8010c48 <pbuf_alloc+0x32c>)
 8010c20:	480a      	ldr	r0, [pc, #40]	; (8010c4c <pbuf_alloc+0x330>)
 8010c22:	f009 fd31 	bl	801a688 <iprintf>
    return NULL;
 8010c26:	2300      	movs	r3, #0
 8010c28:	e007      	b.n	8010c3a <pbuf_alloc+0x31e>
    break;
 8010c2a:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	2200      	movs	r2, #0
 8010c36:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010c38:	69fb      	ldr	r3, [r7, #28]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3720      	adds	r7, #32
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	0801c794 	.word	0x0801c794
 8010c48:	0801c910 	.word	0x0801c910
 8010c4c:	0801c7e0 	.word	0x0801c7e0

08010c50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	603b      	str	r3, [r7, #0]
 8010c58:	4603      	mov	r3, r0
 8010c5a:	71fb      	strb	r3, [r7, #7]
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	80bb      	strh	r3, [r7, #4]
 8010c60:	4613      	mov	r3, r2
 8010c62:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8010c64:	79fb      	ldrb	r3, [r7, #7]
 8010c66:	2b04      	cmp	r3, #4
 8010c68:	d81b      	bhi.n	8010ca2 <pbuf_alloced_custom+0x52>
 8010c6a:	a201      	add	r2, pc, #4	; (adr r2, 8010c70 <pbuf_alloced_custom+0x20>)
 8010c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c70:	08010c85 	.word	0x08010c85
 8010c74:	08010c8b 	.word	0x08010c8b
 8010c78:	08010c91 	.word	0x08010c91
 8010c7c:	08010c97 	.word	0x08010c97
 8010c80:	08010c9d 	.word	0x08010c9d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8010c84:	2336      	movs	r3, #54	; 0x36
 8010c86:	81fb      	strh	r3, [r7, #14]
    break;
 8010c88:	e014      	b.n	8010cb4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8010c8a:	2322      	movs	r3, #34	; 0x22
 8010c8c:	81fb      	strh	r3, [r7, #14]
    break;
 8010c8e:	e011      	b.n	8010cb4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8010c90:	230e      	movs	r3, #14
 8010c92:	81fb      	strh	r3, [r7, #14]
    break;
 8010c94:	e00e      	b.n	8010cb4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8010c96:	2300      	movs	r3, #0
 8010c98:	81fb      	strh	r3, [r7, #14]
    break;
 8010c9a:	e00b      	b.n	8010cb4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	81fb      	strh	r3, [r7, #14]
    break;
 8010ca0:	e008      	b.n	8010cb4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8010ca2:	4b1d      	ldr	r3, [pc, #116]	; (8010d18 <pbuf_alloced_custom+0xc8>)
 8010ca4:	f240 12c5 	movw	r2, #453	; 0x1c5
 8010ca8:	491c      	ldr	r1, [pc, #112]	; (8010d1c <pbuf_alloced_custom+0xcc>)
 8010caa:	481d      	ldr	r0, [pc, #116]	; (8010d20 <pbuf_alloced_custom+0xd0>)
 8010cac:	f009 fcec 	bl	801a688 <iprintf>
    return NULL;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	e02d      	b.n	8010d10 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010cb4:	89fb      	ldrh	r3, [r7, #14]
 8010cb6:	3303      	adds	r3, #3
 8010cb8:	f023 0203 	bic.w	r2, r3, #3
 8010cbc:	88bb      	ldrh	r3, [r7, #4]
 8010cbe:	441a      	add	r2, r3
 8010cc0:	8bbb      	ldrh	r3, [r7, #28]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d901      	bls.n	8010cca <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	e022      	b.n	8010d10 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8010cd0:	69bb      	ldr	r3, [r7, #24]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d008      	beq.n	8010ce8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010cd6:	89fb      	ldrh	r3, [r7, #14]
 8010cd8:	3303      	adds	r3, #3
 8010cda:	f023 0303 	bic.w	r3, r3, #3
 8010cde:	69ba      	ldr	r2, [r7, #24]
 8010ce0:	441a      	add	r2, r3
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	605a      	str	r2, [r3, #4]
 8010ce6:	e002      	b.n	8010cee <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	2200      	movs	r2, #0
 8010cec:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2202      	movs	r2, #2
 8010cf2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	88ba      	ldrh	r2, [r7, #4]
 8010cf8:	811a      	strh	r2, [r3, #8]
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	891a      	ldrh	r2, [r3, #8]
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	79ba      	ldrb	r2, [r7, #6]
 8010d06:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8010d0e:	683b      	ldr	r3, [r7, #0]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3710      	adds	r7, #16
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	0801c794 	.word	0x0801c794
 8010d1c:	0801c92c 	.word	0x0801c92c
 8010d20:	0801c7e0 	.word	0x0801c7e0

08010d24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b086      	sub	sp, #24
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <pbuf_realloc+0x20>
 8010d36:	4b4b      	ldr	r3, [pc, #300]	; (8010e64 <pbuf_realloc+0x140>)
 8010d38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8010d3c:	494a      	ldr	r1, [pc, #296]	; (8010e68 <pbuf_realloc+0x144>)
 8010d3e:	484b      	ldr	r0, [pc, #300]	; (8010e6c <pbuf_realloc+0x148>)
 8010d40:	f009 fca2 	bl	801a688 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	7b1b      	ldrb	r3, [r3, #12]
 8010d48:	2b03      	cmp	r3, #3
 8010d4a:	d012      	beq.n	8010d72 <pbuf_realloc+0x4e>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	7b1b      	ldrb	r3, [r3, #12]
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d00e      	beq.n	8010d72 <pbuf_realloc+0x4e>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	7b1b      	ldrb	r3, [r3, #12]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00a      	beq.n	8010d72 <pbuf_realloc+0x4e>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	7b1b      	ldrb	r3, [r3, #12]
 8010d60:	2b02      	cmp	r3, #2
 8010d62:	d006      	beq.n	8010d72 <pbuf_realloc+0x4e>
 8010d64:	4b3f      	ldr	r3, [pc, #252]	; (8010e64 <pbuf_realloc+0x140>)
 8010d66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010d6a:	4941      	ldr	r1, [pc, #260]	; (8010e70 <pbuf_realloc+0x14c>)
 8010d6c:	483f      	ldr	r0, [pc, #252]	; (8010e6c <pbuf_realloc+0x148>)
 8010d6e:	f009 fc8b 	bl	801a688 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	891b      	ldrh	r3, [r3, #8]
 8010d76:	887a      	ldrh	r2, [r7, #2]
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d26e      	bcs.n	8010e5a <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8010d7c:	887b      	ldrh	r3, [r7, #2]
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	8912      	ldrh	r2, [r2, #8]
 8010d82:	1a9b      	subs	r3, r3, r2
 8010d84:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010d86:	887b      	ldrh	r3, [r7, #2]
 8010d88:	827b      	strh	r3, [r7, #18]
  q = p;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010d8e:	e025      	b.n	8010ddc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	895b      	ldrh	r3, [r3, #10]
 8010d94:	8a7a      	ldrh	r2, [r7, #18]
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010da0:	4293      	cmp	r3, r2
 8010da2:	dd06      	ble.n	8010db2 <pbuf_realloc+0x8e>
 8010da4:	4b2f      	ldr	r3, [pc, #188]	; (8010e64 <pbuf_realloc+0x140>)
 8010da6:	f240 220b 	movw	r2, #523	; 0x20b
 8010daa:	4932      	ldr	r1, [pc, #200]	; (8010e74 <pbuf_realloc+0x150>)
 8010dac:	482f      	ldr	r0, [pc, #188]	; (8010e6c <pbuf_realloc+0x148>)
 8010dae:	f009 fc6b 	bl	801a688 <iprintf>
    q->tot_len += (u16_t)grow;
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	891a      	ldrh	r2, [r3, #8]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	4413      	add	r3, r2
 8010dbc:	b29a      	uxth	r2, r3
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d106      	bne.n	8010ddc <pbuf_realloc+0xb8>
 8010dce:	4b25      	ldr	r3, [pc, #148]	; (8010e64 <pbuf_realloc+0x140>)
 8010dd0:	f240 220f 	movw	r2, #527	; 0x20f
 8010dd4:	4928      	ldr	r1, [pc, #160]	; (8010e78 <pbuf_realloc+0x154>)
 8010dd6:	4825      	ldr	r0, [pc, #148]	; (8010e6c <pbuf_realloc+0x148>)
 8010dd8:	f009 fc56 	bl	801a688 <iprintf>
  while (rem_len > q->len) {
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	895b      	ldrh	r3, [r3, #10]
 8010de0:	8a7a      	ldrh	r2, [r7, #18]
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d8d4      	bhi.n	8010d90 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	7b1b      	ldrb	r3, [r3, #12]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d121      	bne.n	8010e32 <pbuf_realloc+0x10e>
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	895b      	ldrh	r3, [r3, #10]
 8010df2:	8a7a      	ldrh	r2, [r7, #18]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d01c      	beq.n	8010e32 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	7b5b      	ldrb	r3, [r3, #13]
 8010dfc:	f003 0302 	and.w	r3, r3, #2
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d116      	bne.n	8010e32 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	685a      	ldr	r2, [r3, #4]
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	b29a      	uxth	r2, r3
 8010e0e:	8a7b      	ldrh	r3, [r7, #18]
 8010e10:	4413      	add	r3, r2
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	4619      	mov	r1, r3
 8010e16:	6978      	ldr	r0, [r7, #20]
 8010e18:	f7ff f892 	bl	800ff40 <mem_trim>
 8010e1c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d106      	bne.n	8010e32 <pbuf_realloc+0x10e>
 8010e24:	4b0f      	ldr	r3, [pc, #60]	; (8010e64 <pbuf_realloc+0x140>)
 8010e26:	f240 221d 	movw	r2, #541	; 0x21d
 8010e2a:	4914      	ldr	r1, [pc, #80]	; (8010e7c <pbuf_realloc+0x158>)
 8010e2c:	480f      	ldr	r0, [pc, #60]	; (8010e6c <pbuf_realloc+0x148>)
 8010e2e:	f009 fc2b 	bl	801a688 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	8a7a      	ldrh	r2, [r7, #18]
 8010e36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	895a      	ldrh	r2, [r3, #10]
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d004      	beq.n	8010e52 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 f8dd 	bl	801100c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	2200      	movs	r2, #0
 8010e56:	601a      	str	r2, [r3, #0]
 8010e58:	e000      	b.n	8010e5c <pbuf_realloc+0x138>
    return;
 8010e5a:	bf00      	nop

}
 8010e5c:	3718      	adds	r7, #24
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	0801c794 	.word	0x0801c794
 8010e68:	0801c950 	.word	0x0801c950
 8010e6c:	0801c7e0 	.word	0x0801c7e0
 8010e70:	0801c968 	.word	0x0801c968
 8010e74:	0801c984 	.word	0x0801c984
 8010e78:	0801c998 	.word	0x0801c998
 8010e7c:	0801c9b0 	.word	0x0801c9b0

08010e80 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	460b      	mov	r3, r1
 8010e8a:	807b      	strh	r3, [r7, #2]
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d106      	bne.n	8010ea4 <pbuf_header_impl+0x24>
 8010e96:	4b46      	ldr	r3, [pc, #280]	; (8010fb0 <pbuf_header_impl+0x130>)
 8010e98:	f240 223f 	movw	r2, #575	; 0x23f
 8010e9c:	4945      	ldr	r1, [pc, #276]	; (8010fb4 <pbuf_header_impl+0x134>)
 8010e9e:	4846      	ldr	r0, [pc, #280]	; (8010fb8 <pbuf_header_impl+0x138>)
 8010ea0:	f009 fbf2 	bl	801a688 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8010ea4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d002      	beq.n	8010eb2 <pbuf_header_impl+0x32>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d101      	bne.n	8010eb6 <pbuf_header_impl+0x36>
    return 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e078      	b.n	8010fa8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8010eb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	da10      	bge.n	8010ee0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8010ebe:	887b      	ldrh	r3, [r7, #2]
 8010ec0:	425b      	negs	r3, r3
 8010ec2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	895b      	ldrh	r3, [r3, #10]
 8010ec8:	89fa      	ldrh	r2, [r7, #14]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d90a      	bls.n	8010ee4 <pbuf_header_impl+0x64>
 8010ece:	4b38      	ldr	r3, [pc, #224]	; (8010fb0 <pbuf_header_impl+0x130>)
 8010ed0:	f240 2247 	movw	r2, #583	; 0x247
 8010ed4:	4939      	ldr	r1, [pc, #228]	; (8010fbc <pbuf_header_impl+0x13c>)
 8010ed6:	4838      	ldr	r0, [pc, #224]	; (8010fb8 <pbuf_header_impl+0x138>)
 8010ed8:	f009 fbd6 	bl	801a688 <iprintf>
 8010edc:	2301      	movs	r3, #1
 8010ede:	e063      	b.n	8010fa8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8010ee0:	887b      	ldrh	r3, [r7, #2]
 8010ee2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	7b1b      	ldrb	r3, [r3, #12]
 8010ee8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8010ef0:	89bb      	ldrh	r3, [r7, #12]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d002      	beq.n	8010efc <pbuf_header_impl+0x7c>
 8010ef6:	89bb      	ldrh	r3, [r7, #12]
 8010ef8:	2b03      	cmp	r3, #3
 8010efa:	d112      	bne.n	8010f22 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	685a      	ldr	r2, [r3, #4]
 8010f00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f04:	425b      	negs	r3, r3
 8010f06:	441a      	add	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	685a      	ldr	r2, [r3, #4]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	3310      	adds	r3, #16
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d238      	bcs.n	8010f8a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	e042      	b.n	8010fa8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8010f22:	89bb      	ldrh	r3, [r7, #12]
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	d002      	beq.n	8010f2e <pbuf_header_impl+0xae>
 8010f28:	89bb      	ldrh	r3, [r7, #12]
 8010f2a:	2b01      	cmp	r3, #1
 8010f2c:	d124      	bne.n	8010f78 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010f2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	da0d      	bge.n	8010f52 <pbuf_header_impl+0xd2>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	895b      	ldrh	r3, [r3, #10]
 8010f3a:	89fa      	ldrh	r2, [r7, #14]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d808      	bhi.n	8010f52 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	685a      	ldr	r2, [r3, #4]
 8010f44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f48:	425b      	negs	r3, r3
 8010f4a:	441a      	add	r2, r3
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	605a      	str	r2, [r3, #4]
 8010f50:	e011      	b.n	8010f76 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8010f52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	dd0b      	ble.n	8010f72 <pbuf_header_impl+0xf2>
 8010f5a:	787b      	ldrb	r3, [r7, #1]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d008      	beq.n	8010f72 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	685a      	ldr	r2, [r3, #4]
 8010f64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010f68:	425b      	negs	r3, r3
 8010f6a:	441a      	add	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	605a      	str	r2, [r3, #4]
 8010f70:	e001      	b.n	8010f76 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010f72:	2301      	movs	r3, #1
 8010f74:	e018      	b.n	8010fa8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8010f76:	e008      	b.n	8010f8a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8010f78:	4b0d      	ldr	r3, [pc, #52]	; (8010fb0 <pbuf_header_impl+0x130>)
 8010f7a:	f240 2277 	movw	r2, #631	; 0x277
 8010f7e:	4910      	ldr	r1, [pc, #64]	; (8010fc0 <pbuf_header_impl+0x140>)
 8010f80:	480d      	ldr	r0, [pc, #52]	; (8010fb8 <pbuf_header_impl+0x138>)
 8010f82:	f009 fb81 	bl	801a688 <iprintf>
    return 1;
 8010f86:	2301      	movs	r3, #1
 8010f88:	e00e      	b.n	8010fa8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	895a      	ldrh	r2, [r3, #10]
 8010f8e:	887b      	ldrh	r3, [r7, #2]
 8010f90:	4413      	add	r3, r2
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	891a      	ldrh	r2, [r3, #8]
 8010f9c:	887b      	ldrh	r3, [r7, #2]
 8010f9e:	4413      	add	r3, r2
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010fa6:	2300      	movs	r3, #0
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	0801c794 	.word	0x0801c794
 8010fb4:	0801c9cc 	.word	0x0801c9cc
 8010fb8:	0801c7e0 	.word	0x0801c7e0
 8010fbc:	0801c9d8 	.word	0x0801c9d8
 8010fc0:	0801c9f8 	.word	0x0801c9f8

08010fc4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8010fd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7ff ff51 	bl	8010e80 <pbuf_header_impl>
 8010fde:	4603      	mov	r3, r0
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010ff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7ff ff3f 	bl	8010e80 <pbuf_header_impl>
 8011002:	4603      	mov	r3, r0
}
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d10b      	bne.n	8011032 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d106      	bne.n	801102e <pbuf_free+0x22>
 8011020:	4b41      	ldr	r3, [pc, #260]	; (8011128 <pbuf_free+0x11c>)
 8011022:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011026:	4941      	ldr	r1, [pc, #260]	; (801112c <pbuf_free+0x120>)
 8011028:	4841      	ldr	r0, [pc, #260]	; (8011130 <pbuf_free+0x124>)
 801102a:	f009 fb2d 	bl	801a688 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801102e:	2300      	movs	r3, #0
 8011030:	e076      	b.n	8011120 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	7b1b      	ldrb	r3, [r3, #12]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d012      	beq.n	8011060 <pbuf_free+0x54>
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	7b1b      	ldrb	r3, [r3, #12]
 801103e:	2b01      	cmp	r3, #1
 8011040:	d00e      	beq.n	8011060 <pbuf_free+0x54>
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	7b1b      	ldrb	r3, [r3, #12]
 8011046:	2b02      	cmp	r3, #2
 8011048:	d00a      	beq.n	8011060 <pbuf_free+0x54>
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	7b1b      	ldrb	r3, [r3, #12]
 801104e:	2b03      	cmp	r3, #3
 8011050:	d006      	beq.n	8011060 <pbuf_free+0x54>
 8011052:	4b35      	ldr	r3, [pc, #212]	; (8011128 <pbuf_free+0x11c>)
 8011054:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011058:	4936      	ldr	r1, [pc, #216]	; (8011134 <pbuf_free+0x128>)
 801105a:	4835      	ldr	r0, [pc, #212]	; (8011130 <pbuf_free+0x124>)
 801105c:	f009 fb14 	bl	801a688 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8011060:	2300      	movs	r3, #0
 8011062:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011064:	e058      	b.n	8011118 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011066:	f008 fbd5 	bl	8019814 <sys_arch_protect>
 801106a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	89db      	ldrh	r3, [r3, #14]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d106      	bne.n	8011082 <pbuf_free+0x76>
 8011074:	4b2c      	ldr	r3, [pc, #176]	; (8011128 <pbuf_free+0x11c>)
 8011076:	f240 22eb 	movw	r2, #747	; 0x2eb
 801107a:	492f      	ldr	r1, [pc, #188]	; (8011138 <pbuf_free+0x12c>)
 801107c:	482c      	ldr	r0, [pc, #176]	; (8011130 <pbuf_free+0x124>)
 801107e:	f009 fb03 	bl	801a688 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	89db      	ldrh	r3, [r3, #14]
 8011086:	3b01      	subs	r3, #1
 8011088:	b29a      	uxth	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	81da      	strh	r2, [r3, #14]
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	89db      	ldrh	r3, [r3, #14]
 8011092:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8011094:	69b8      	ldr	r0, [r7, #24]
 8011096:	f008 fbcb 	bl	8019830 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801109a:	8afb      	ldrh	r3, [r7, #22]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d139      	bne.n	8011114 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	7b1b      	ldrb	r3, [r3, #12]
 80110aa:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	7b5b      	ldrb	r3, [r3, #13]
 80110b0:	f003 0302 	and.w	r3, r3, #2
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d011      	beq.n	80110dc <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	691b      	ldr	r3, [r3, #16]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d106      	bne.n	80110d2 <pbuf_free+0xc6>
 80110c4:	4b18      	ldr	r3, [pc, #96]	; (8011128 <pbuf_free+0x11c>)
 80110c6:	f240 22f9 	movw	r2, #761	; 0x2f9
 80110ca:	491c      	ldr	r1, [pc, #112]	; (801113c <pbuf_free+0x130>)
 80110cc:	4818      	ldr	r0, [pc, #96]	; (8011130 <pbuf_free+0x124>)
 80110ce:	f009 fadb 	bl	801a688 <iprintf>
        pc->custom_free_function(p);
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	691b      	ldr	r3, [r3, #16]
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	4798      	blx	r3
 80110da:	e015      	b.n	8011108 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80110dc:	89fb      	ldrh	r3, [r7, #14]
 80110de:	2b03      	cmp	r3, #3
 80110e0:	d104      	bne.n	80110ec <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 80110e2:	6879      	ldr	r1, [r7, #4]
 80110e4:	200c      	movs	r0, #12
 80110e6:	f7ff f9d7 	bl	8010498 <memp_free>
 80110ea:	e00d      	b.n	8011108 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80110ec:	89fb      	ldrh	r3, [r7, #14]
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d002      	beq.n	80110f8 <pbuf_free+0xec>
 80110f2:	89fb      	ldrh	r3, [r7, #14]
 80110f4:	2b02      	cmp	r3, #2
 80110f6:	d104      	bne.n	8011102 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 80110f8:	6879      	ldr	r1, [r7, #4]
 80110fa:	200b      	movs	r0, #11
 80110fc:	f7ff f9cc 	bl	8010498 <memp_free>
 8011100:	e002      	b.n	8011108 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7fe feae 	bl	800fe64 <mem_free>
        }
      }
      count++;
 8011108:	7ffb      	ldrb	r3, [r7, #31]
 801110a:	3301      	adds	r3, #1
 801110c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	607b      	str	r3, [r7, #4]
 8011112:	e001      	b.n	8011118 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8011114:	2300      	movs	r3, #0
 8011116:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1a3      	bne.n	8011066 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801111e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011120:	4618      	mov	r0, r3
 8011122:	3720      	adds	r7, #32
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	0801c794 	.word	0x0801c794
 801112c:	0801c9cc 	.word	0x0801c9cc
 8011130:	0801c7e0 	.word	0x0801c7e0
 8011134:	0801ca08 	.word	0x0801ca08
 8011138:	0801ca20 	.word	0x0801ca20
 801113c:	0801ca38 	.word	0x0801ca38

08011140 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011148:	2300      	movs	r3, #0
 801114a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801114c:	e005      	b.n	801115a <pbuf_clen+0x1a>
    ++len;
 801114e:	89fb      	ldrh	r3, [r7, #14]
 8011150:	3301      	adds	r3, #1
 8011152:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d1f6      	bne.n	801114e <pbuf_clen+0xe>
  }
  return len;
 8011160:	89fb      	ldrh	r3, [r7, #14]
}
 8011162:	4618      	mov	r0, r3
 8011164:	3714      	adds	r7, #20
 8011166:	46bd      	mov	sp, r7
 8011168:	bc80      	pop	{r7}
 801116a:	4770      	bx	lr

0801116c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b084      	sub	sp, #16
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d016      	beq.n	80111a8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801117a:	f008 fb4b 	bl	8019814 <sys_arch_protect>
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	89db      	ldrh	r3, [r3, #14]
 8011184:	3301      	adds	r3, #1
 8011186:	b29a      	uxth	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	81da      	strh	r2, [r3, #14]
 801118c:	68f8      	ldr	r0, [r7, #12]
 801118e:	f008 fb4f 	bl	8019830 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	89db      	ldrh	r3, [r3, #14]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d106      	bne.n	80111a8 <pbuf_ref+0x3c>
 801119a:	4b05      	ldr	r3, [pc, #20]	; (80111b0 <pbuf_ref+0x44>)
 801119c:	f240 3239 	movw	r2, #825	; 0x339
 80111a0:	4904      	ldr	r1, [pc, #16]	; (80111b4 <pbuf_ref+0x48>)
 80111a2:	4805      	ldr	r0, [pc, #20]	; (80111b8 <pbuf_ref+0x4c>)
 80111a4:	f009 fa70 	bl	801a688 <iprintf>
  }
}
 80111a8:	bf00      	nop
 80111aa:	3710      	adds	r7, #16
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	0801c794 	.word	0x0801c794
 80111b4:	0801ca5c 	.word	0x0801ca5c
 80111b8:	0801c7e0 	.word	0x0801c7e0

080111bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d002      	beq.n	80111d2 <pbuf_cat+0x16>
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d107      	bne.n	80111e2 <pbuf_cat+0x26>
 80111d2:	4b20      	ldr	r3, [pc, #128]	; (8011254 <pbuf_cat+0x98>)
 80111d4:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80111d8:	491f      	ldr	r1, [pc, #124]	; (8011258 <pbuf_cat+0x9c>)
 80111da:	4820      	ldr	r0, [pc, #128]	; (801125c <pbuf_cat+0xa0>)
 80111dc:	f009 fa54 	bl	801a688 <iprintf>
 80111e0:	e034      	b.n	801124c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	60fb      	str	r3, [r7, #12]
 80111e6:	e00a      	b.n	80111fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	891a      	ldrh	r2, [r3, #8]
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	891b      	ldrh	r3, [r3, #8]
 80111f0:	4413      	add	r3, r2
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	60fb      	str	r3, [r7, #12]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d1f0      	bne.n	80111e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	891a      	ldrh	r2, [r3, #8]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	895b      	ldrh	r3, [r3, #10]
 801120e:	429a      	cmp	r2, r3
 8011210:	d006      	beq.n	8011220 <pbuf_cat+0x64>
 8011212:	4b10      	ldr	r3, [pc, #64]	; (8011254 <pbuf_cat+0x98>)
 8011214:	f240 3255 	movw	r2, #853	; 0x355
 8011218:	4911      	ldr	r1, [pc, #68]	; (8011260 <pbuf_cat+0xa4>)
 801121a:	4810      	ldr	r0, [pc, #64]	; (801125c <pbuf_cat+0xa0>)
 801121c:	f009 fa34 	bl	801a688 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d006      	beq.n	8011236 <pbuf_cat+0x7a>
 8011228:	4b0a      	ldr	r3, [pc, #40]	; (8011254 <pbuf_cat+0x98>)
 801122a:	f240 3256 	movw	r2, #854	; 0x356
 801122e:	490d      	ldr	r1, [pc, #52]	; (8011264 <pbuf_cat+0xa8>)
 8011230:	480a      	ldr	r0, [pc, #40]	; (801125c <pbuf_cat+0xa0>)
 8011232:	f009 fa29 	bl	801a688 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	891a      	ldrh	r2, [r3, #8]
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	891b      	ldrh	r3, [r3, #8]
 801123e:	4413      	add	r3, r2
 8011240:	b29a      	uxth	r2, r3
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	683a      	ldr	r2, [r7, #0]
 801124a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
 8011252:	bf00      	nop
 8011254:	0801c794 	.word	0x0801c794
 8011258:	0801ca70 	.word	0x0801ca70
 801125c:	0801c7e0 	.word	0x0801c7e0
 8011260:	0801caa8 	.word	0x0801caa8
 8011264:	0801cad8 	.word	0x0801cad8

08011268 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8011272:	2300      	movs	r3, #0
 8011274:	81fb      	strh	r3, [r7, #14]
 8011276:	2300      	movs	r3, #0
 8011278:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d008      	beq.n	8011292 <pbuf_copy+0x2a>
 8011280:	683b      	ldr	r3, [r7, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d005      	beq.n	8011292 <pbuf_copy+0x2a>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	891a      	ldrh	r2, [r3, #8]
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	891b      	ldrh	r3, [r3, #8]
 801128e:	429a      	cmp	r2, r3
 8011290:	d209      	bcs.n	80112a6 <pbuf_copy+0x3e>
 8011292:	4b54      	ldr	r3, [pc, #336]	; (80113e4 <pbuf_copy+0x17c>)
 8011294:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8011298:	4953      	ldr	r1, [pc, #332]	; (80113e8 <pbuf_copy+0x180>)
 801129a:	4854      	ldr	r0, [pc, #336]	; (80113ec <pbuf_copy+0x184>)
 801129c:	f009 f9f4 	bl	801a688 <iprintf>
 80112a0:	f06f 030f 	mvn.w	r3, #15
 80112a4:	e099      	b.n	80113da <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	895b      	ldrh	r3, [r3, #10]
 80112aa:	461a      	mov	r2, r3
 80112ac:	89fb      	ldrh	r3, [r7, #14]
 80112ae:	1ad2      	subs	r2, r2, r3
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	895b      	ldrh	r3, [r3, #10]
 80112b4:	4619      	mov	r1, r3
 80112b6:	89bb      	ldrh	r3, [r7, #12]
 80112b8:	1acb      	subs	r3, r1, r3
 80112ba:	429a      	cmp	r2, r3
 80112bc:	db05      	blt.n	80112ca <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	895a      	ldrh	r2, [r3, #10]
 80112c2:	89bb      	ldrh	r3, [r7, #12]
 80112c4:	1ad3      	subs	r3, r2, r3
 80112c6:	817b      	strh	r3, [r7, #10]
 80112c8:	e004      	b.n	80112d4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	895a      	ldrh	r2, [r3, #10]
 80112ce:	89fb      	ldrh	r3, [r7, #14]
 80112d0:	1ad3      	subs	r3, r2, r3
 80112d2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	685a      	ldr	r2, [r3, #4]
 80112d8:	89fb      	ldrh	r3, [r7, #14]
 80112da:	18d0      	adds	r0, r2, r3
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	685a      	ldr	r2, [r3, #4]
 80112e0:	89bb      	ldrh	r3, [r7, #12]
 80112e2:	4413      	add	r3, r2
 80112e4:	897a      	ldrh	r2, [r7, #10]
 80112e6:	4619      	mov	r1, r3
 80112e8:	f009 f8dc 	bl	801a4a4 <memcpy>
    offset_to += len;
 80112ec:	89fa      	ldrh	r2, [r7, #14]
 80112ee:	897b      	ldrh	r3, [r7, #10]
 80112f0:	4413      	add	r3, r2
 80112f2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80112f4:	89ba      	ldrh	r2, [r7, #12]
 80112f6:	897b      	ldrh	r3, [r7, #10]
 80112f8:	4413      	add	r3, r2
 80112fa:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	895b      	ldrh	r3, [r3, #10]
 8011300:	89fa      	ldrh	r2, [r7, #14]
 8011302:	429a      	cmp	r2, r3
 8011304:	d906      	bls.n	8011314 <pbuf_copy+0xac>
 8011306:	4b37      	ldr	r3, [pc, #220]	; (80113e4 <pbuf_copy+0x17c>)
 8011308:	f240 32cd 	movw	r2, #973	; 0x3cd
 801130c:	4938      	ldr	r1, [pc, #224]	; (80113f0 <pbuf_copy+0x188>)
 801130e:	4837      	ldr	r0, [pc, #220]	; (80113ec <pbuf_copy+0x184>)
 8011310:	f009 f9ba 	bl	801a688 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	895b      	ldrh	r3, [r3, #10]
 8011318:	89ba      	ldrh	r2, [r7, #12]
 801131a:	429a      	cmp	r2, r3
 801131c:	d906      	bls.n	801132c <pbuf_copy+0xc4>
 801131e:	4b31      	ldr	r3, [pc, #196]	; (80113e4 <pbuf_copy+0x17c>)
 8011320:	f240 32ce 	movw	r2, #974	; 0x3ce
 8011324:	4933      	ldr	r1, [pc, #204]	; (80113f4 <pbuf_copy+0x18c>)
 8011326:	4831      	ldr	r0, [pc, #196]	; (80113ec <pbuf_copy+0x184>)
 8011328:	f009 f9ae 	bl	801a688 <iprintf>
    if (offset_from >= p_from->len) {
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	895b      	ldrh	r3, [r3, #10]
 8011330:	89ba      	ldrh	r2, [r7, #12]
 8011332:	429a      	cmp	r2, r3
 8011334:	d304      	bcc.n	8011340 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011336:	2300      	movs	r3, #0
 8011338:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	895b      	ldrh	r3, [r3, #10]
 8011344:	89fa      	ldrh	r2, [r7, #14]
 8011346:	429a      	cmp	r2, r3
 8011348:	d114      	bne.n	8011374 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801134a:	2300      	movs	r3, #0
 801134c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10c      	bne.n	8011374 <pbuf_copy+0x10c>
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d009      	beq.n	8011374 <pbuf_copy+0x10c>
 8011360:	4b20      	ldr	r3, [pc, #128]	; (80113e4 <pbuf_copy+0x17c>)
 8011362:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011366:	4924      	ldr	r1, [pc, #144]	; (80113f8 <pbuf_copy+0x190>)
 8011368:	4820      	ldr	r0, [pc, #128]	; (80113ec <pbuf_copy+0x184>)
 801136a:	f009 f98d 	bl	801a688 <iprintf>
 801136e:	f06f 030f 	mvn.w	r3, #15
 8011372:	e032      	b.n	80113da <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d013      	beq.n	80113a2 <pbuf_copy+0x13a>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	895a      	ldrh	r2, [r3, #10]
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	891b      	ldrh	r3, [r3, #8]
 8011382:	429a      	cmp	r2, r3
 8011384:	d10d      	bne.n	80113a2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d009      	beq.n	80113a2 <pbuf_copy+0x13a>
 801138e:	4b15      	ldr	r3, [pc, #84]	; (80113e4 <pbuf_copy+0x17c>)
 8011390:	f240 32dd 	movw	r2, #989	; 0x3dd
 8011394:	4919      	ldr	r1, [pc, #100]	; (80113fc <pbuf_copy+0x194>)
 8011396:	4815      	ldr	r0, [pc, #84]	; (80113ec <pbuf_copy+0x184>)
 8011398:	f009 f976 	bl	801a688 <iprintf>
 801139c:	f06f 0305 	mvn.w	r3, #5
 80113a0:	e01b      	b.n	80113da <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d013      	beq.n	80113d0 <pbuf_copy+0x168>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	895a      	ldrh	r2, [r3, #10]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	891b      	ldrh	r3, [r3, #8]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d10d      	bne.n	80113d0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d009      	beq.n	80113d0 <pbuf_copy+0x168>
 80113bc:	4b09      	ldr	r3, [pc, #36]	; (80113e4 <pbuf_copy+0x17c>)
 80113be:	f240 32e2 	movw	r2, #994	; 0x3e2
 80113c2:	490e      	ldr	r1, [pc, #56]	; (80113fc <pbuf_copy+0x194>)
 80113c4:	4809      	ldr	r0, [pc, #36]	; (80113ec <pbuf_copy+0x184>)
 80113c6:	f009 f95f 	bl	801a688 <iprintf>
 80113ca:	f06f 0305 	mvn.w	r3, #5
 80113ce:	e004      	b.n	80113da <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	f47f af67 	bne.w	80112a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80113d8:	2300      	movs	r3, #0
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3710      	adds	r7, #16
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop
 80113e4:	0801c794 	.word	0x0801c794
 80113e8:	0801cb24 	.word	0x0801cb24
 80113ec:	0801c7e0 	.word	0x0801c7e0
 80113f0:	0801cb54 	.word	0x0801cb54
 80113f4:	0801cb6c 	.word	0x0801cb6c
 80113f8:	0801cb88 	.word	0x0801cb88
 80113fc:	0801cb98 	.word	0x0801cb98

08011400 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b088      	sub	sp, #32
 8011404:	af00      	add	r7, sp, #0
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	60b9      	str	r1, [r7, #8]
 801140a:	4611      	mov	r1, r2
 801140c:	461a      	mov	r2, r3
 801140e:	460b      	mov	r3, r1
 8011410:	80fb      	strh	r3, [r7, #6]
 8011412:	4613      	mov	r3, r2
 8011414:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011416:	2300      	movs	r3, #0
 8011418:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d108      	bne.n	8011432 <pbuf_copy_partial+0x32>
 8011420:	4b30      	ldr	r3, [pc, #192]	; (80114e4 <pbuf_copy_partial+0xe4>)
 8011422:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8011426:	4930      	ldr	r1, [pc, #192]	; (80114e8 <pbuf_copy_partial+0xe8>)
 8011428:	4830      	ldr	r0, [pc, #192]	; (80114ec <pbuf_copy_partial+0xec>)
 801142a:	f009 f92d 	bl	801a688 <iprintf>
 801142e:	2300      	movs	r3, #0
 8011430:	e054      	b.n	80114dc <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d108      	bne.n	801144a <pbuf_copy_partial+0x4a>
 8011438:	4b2a      	ldr	r3, [pc, #168]	; (80114e4 <pbuf_copy_partial+0xe4>)
 801143a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801143e:	492c      	ldr	r1, [pc, #176]	; (80114f0 <pbuf_copy_partial+0xf0>)
 8011440:	482a      	ldr	r0, [pc, #168]	; (80114ec <pbuf_copy_partial+0xec>)
 8011442:	f009 f921 	bl	801a688 <iprintf>
 8011446:	2300      	movs	r3, #0
 8011448:	e048      	b.n	80114dc <pbuf_copy_partial+0xdc>

  left = 0;
 801144a:	2300      	movs	r3, #0
 801144c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d002      	beq.n	801145a <pbuf_copy_partial+0x5a>
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d101      	bne.n	801145e <pbuf_copy_partial+0x5e>
    return 0;
 801145a:	2300      	movs	r3, #0
 801145c:	e03e      	b.n	80114dc <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	61fb      	str	r3, [r7, #28]
 8011462:	e034      	b.n	80114ce <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8011464:	88bb      	ldrh	r3, [r7, #4]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00a      	beq.n	8011480 <pbuf_copy_partial+0x80>
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	895b      	ldrh	r3, [r3, #10]
 801146e:	88ba      	ldrh	r2, [r7, #4]
 8011470:	429a      	cmp	r2, r3
 8011472:	d305      	bcc.n	8011480 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	895b      	ldrh	r3, [r3, #10]
 8011478:	88ba      	ldrh	r2, [r7, #4]
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	80bb      	strh	r3, [r7, #4]
 801147e:	e023      	b.n	80114c8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	895a      	ldrh	r2, [r3, #10]
 8011484:	88bb      	ldrh	r3, [r7, #4]
 8011486:	1ad3      	subs	r3, r2, r3
 8011488:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801148a:	8b3a      	ldrh	r2, [r7, #24]
 801148c:	88fb      	ldrh	r3, [r7, #6]
 801148e:	429a      	cmp	r2, r3
 8011490:	d901      	bls.n	8011496 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8011492:	88fb      	ldrh	r3, [r7, #6]
 8011494:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8011496:	8b7b      	ldrh	r3, [r7, #26]
 8011498:	68ba      	ldr	r2, [r7, #8]
 801149a:	18d0      	adds	r0, r2, r3
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	685a      	ldr	r2, [r3, #4]
 80114a0:	88bb      	ldrh	r3, [r7, #4]
 80114a2:	4413      	add	r3, r2
 80114a4:	8b3a      	ldrh	r2, [r7, #24]
 80114a6:	4619      	mov	r1, r3
 80114a8:	f008 fffc 	bl	801a4a4 <memcpy>
      copied_total += buf_copy_len;
 80114ac:	8afa      	ldrh	r2, [r7, #22]
 80114ae:	8b3b      	ldrh	r3, [r7, #24]
 80114b0:	4413      	add	r3, r2
 80114b2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80114b4:	8b7a      	ldrh	r2, [r7, #26]
 80114b6:	8b3b      	ldrh	r3, [r7, #24]
 80114b8:	4413      	add	r3, r2
 80114ba:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80114bc:	88fa      	ldrh	r2, [r7, #6]
 80114be:	8b3b      	ldrh	r3, [r7, #24]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80114c4:	2300      	movs	r3, #0
 80114c6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	61fb      	str	r3, [r7, #28]
 80114ce:	88fb      	ldrh	r3, [r7, #6]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d002      	beq.n	80114da <pbuf_copy_partial+0xda>
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1c4      	bne.n	8011464 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80114da:	8afb      	ldrh	r3, [r7, #22]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3720      	adds	r7, #32
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	0801c794 	.word	0x0801c794
 80114e8:	0801cbc4 	.word	0x0801cbc4
 80114ec:	0801c7e0 	.word	0x0801c7e0
 80114f0:	0801cbe4 	.word	0x0801cbe4

080114f4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b087      	sub	sp, #28
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	460b      	mov	r3, r1
 80114fe:	607a      	str	r2, [r7, #4]
 8011500:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011502:	897b      	ldrh	r3, [r7, #10]
 8011504:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801150a:	e007      	b.n	801151c <pbuf_skip_const+0x28>
    offset_left -= q->len;
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	895b      	ldrh	r3, [r3, #10]
 8011510:	8afa      	ldrh	r2, [r7, #22]
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d004      	beq.n	801152c <pbuf_skip_const+0x38>
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	895b      	ldrh	r3, [r3, #10]
 8011526:	8afa      	ldrh	r2, [r7, #22]
 8011528:	429a      	cmp	r2, r3
 801152a:	d2ef      	bcs.n	801150c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d002      	beq.n	8011538 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	8afa      	ldrh	r2, [r7, #22]
 8011536:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8011538:	693b      	ldr	r3, [r7, #16]
}
 801153a:	4618      	mov	r0, r3
 801153c:	371c      	adds	r7, #28
 801153e:	46bd      	mov	sp, r7
 8011540:	bc80      	pop	{r7}
 8011542:	4770      	bx	lr

08011544 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	460b      	mov	r3, r1
 801154e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8011550:	887b      	ldrh	r3, [r7, #2]
 8011552:	4619      	mov	r1, r3
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 f80c 	bl	8011572 <pbuf_try_get_at>
 801155a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	2b00      	cmp	r3, #0
 8011560:	db02      	blt.n	8011568 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	b2db      	uxtb	r3, r3
 8011566:	e000      	b.n	801156a <pbuf_get_at+0x26>
  }
  return 0;
 8011568:	2300      	movs	r3, #0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3710      	adds	r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b084      	sub	sp, #16
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	460b      	mov	r3, r1
 801157c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
 801157e:	f107 020a 	add.w	r2, r7, #10
 8011582:	887b      	ldrh	r3, [r7, #2]
 8011584:	4619      	mov	r1, r3
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f7ff ffb4 	bl	80114f4 <pbuf_skip_const>
 801158c:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d00a      	beq.n	80115aa <pbuf_try_get_at+0x38>
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	895a      	ldrh	r2, [r3, #10]
 8011598:	897b      	ldrh	r3, [r7, #10]
 801159a:	429a      	cmp	r2, r3
 801159c:	d905      	bls.n	80115aa <pbuf_try_get_at+0x38>
    return ((u8_t*)q->payload)[q_idx];
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	897a      	ldrh	r2, [r7, #10]
 80115a4:	4413      	add	r3, r2
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	e001      	b.n	80115ae <pbuf_try_get_at+0x3c>
  }
  return -1;
 80115aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3710      	adds	r7, #16
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80115b6:	b480      	push	{r7}
 80115b8:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80115ba:	bf00      	nop
 80115bc:	46bd      	mov	sp, r7
 80115be:	bc80      	pop	{r7}
 80115c0:	4770      	bx	lr
	...

080115c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80115c8:	f001 f87e 	bl	80126c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80115cc:	4b07      	ldr	r3, [pc, #28]	; (80115ec <tcp_tmr+0x28>)
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	3301      	adds	r3, #1
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	4b05      	ldr	r3, [pc, #20]	; (80115ec <tcp_tmr+0x28>)
 80115d6:	701a      	strb	r2, [r3, #0]
 80115d8:	4b04      	ldr	r3, [pc, #16]	; (80115ec <tcp_tmr+0x28>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	f003 0301 	and.w	r3, r3, #1
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d001      	beq.n	80115e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80115e4:	f000 fdae 	bl	8012144 <tcp_slowtmr>
  }
}
 80115e8:	bf00      	nop
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	200050ed 	.word	0x200050ed

080115f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b085      	sub	sp, #20
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	60fb      	str	r3, [r7, #12]
 80115fe:	e00a      	b.n	8011616 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011604:	683a      	ldr	r2, [r7, #0]
 8011606:	429a      	cmp	r2, r3
 8011608:	d102      	bne.n	8011610 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2200      	movs	r2, #0
 801160e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	60fb      	str	r3, [r7, #12]
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1f1      	bne.n	8011600 <tcp_remove_listener+0x10>
      }
   }
}
 801161c:	bf00      	nop
 801161e:	bf00      	nop
 8011620:	3714      	adds	r7, #20
 8011622:	46bd      	mov	sp, r7
 8011624:	bc80      	pop	{r7}
 8011626:	4770      	bx	lr

08011628 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d105      	bne.n	8011642 <tcp_listen_closed+0x1a>
 8011636:	4b13      	ldr	r3, [pc, #76]	; (8011684 <tcp_listen_closed+0x5c>)
 8011638:	22c0      	movs	r2, #192	; 0xc0
 801163a:	4913      	ldr	r1, [pc, #76]	; (8011688 <tcp_listen_closed+0x60>)
 801163c:	4813      	ldr	r0, [pc, #76]	; (801168c <tcp_listen_closed+0x64>)
 801163e:	f009 f823 	bl	801a688 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	7d1b      	ldrb	r3, [r3, #20]
 8011646:	2b01      	cmp	r3, #1
 8011648:	d005      	beq.n	8011656 <tcp_listen_closed+0x2e>
 801164a:	4b0e      	ldr	r3, [pc, #56]	; (8011684 <tcp_listen_closed+0x5c>)
 801164c:	22c1      	movs	r2, #193	; 0xc1
 801164e:	4910      	ldr	r1, [pc, #64]	; (8011690 <tcp_listen_closed+0x68>)
 8011650:	480e      	ldr	r0, [pc, #56]	; (801168c <tcp_listen_closed+0x64>)
 8011652:	f009 f819 	bl	801a688 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011656:	2301      	movs	r3, #1
 8011658:	60fb      	str	r3, [r7, #12]
 801165a:	e00b      	b.n	8011674 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 801165c:	4a0d      	ldr	r2, [pc, #52]	; (8011694 <tcp_listen_closed+0x6c>)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	6879      	ldr	r1, [r7, #4]
 8011668:	4618      	mov	r0, r3
 801166a:	f7ff ffc1 	bl	80115f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	3301      	adds	r3, #1
 8011672:	60fb      	str	r3, [r7, #12]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2b03      	cmp	r3, #3
 8011678:	d9f0      	bls.n	801165c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801167a:	bf00      	nop
 801167c:	bf00      	nop
 801167e:	3710      	adds	r7, #16
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}
 8011684:	0801cd18 	.word	0x0801cd18
 8011688:	0801cd48 	.word	0x0801cd48
 801168c:	0801cd54 	.word	0x0801cd54
 8011690:	0801cd7c 	.word	0x0801cd7c
 8011694:	0801ecac 	.word	0x0801ecac

08011698 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011698:	b5b0      	push	{r4, r5, r7, lr}
 801169a:	b086      	sub	sp, #24
 801169c:	af02      	add	r7, sp, #8
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	460b      	mov	r3, r1
 80116a2:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80116a4:	78fb      	ldrb	r3, [r7, #3]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d075      	beq.n	8011796 <tcp_close_shutdown+0xfe>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	7d1b      	ldrb	r3, [r3, #20]
 80116ae:	2b04      	cmp	r3, #4
 80116b0:	d003      	beq.n	80116ba <tcp_close_shutdown+0x22>
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	7d1b      	ldrb	r3, [r3, #20]
 80116b6:	2b07      	cmp	r3, #7
 80116b8:	d16d      	bne.n	8011796 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d104      	bne.n	80116cc <tcp_close_shutdown+0x34>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80116ca:	d064      	beq.n	8011796 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	7e9b      	ldrb	r3, [r3, #26]
 80116d0:	f003 0310 	and.w	r3, r3, #16
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d106      	bne.n	80116e6 <tcp_close_shutdown+0x4e>
 80116d8:	4b5b      	ldr	r3, [pc, #364]	; (8011848 <tcp_close_shutdown+0x1b0>)
 80116da:	f240 120f 	movw	r2, #271	; 0x10f
 80116de:	495b      	ldr	r1, [pc, #364]	; (801184c <tcp_close_shutdown+0x1b4>)
 80116e0:	485b      	ldr	r0, [pc, #364]	; (8011850 <tcp_close_shutdown+0x1b8>)
 80116e2:	f008 ffd1 	bl	801a688 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80116ee:	687c      	ldr	r4, [r7, #4]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	1d1d      	adds	r5, r3, #4
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	8adb      	ldrh	r3, [r3, #22]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	8b12      	ldrh	r2, [r2, #24]
 80116fc:	9201      	str	r2, [sp, #4]
 80116fe:	9300      	str	r3, [sp, #0]
 8011700:	462b      	mov	r3, r5
 8011702:	4622      	mov	r2, r4
 8011704:	f004 ffe8 	bl	80166d8 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f001 fb25 	bl	8012d58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801170e:	4b51      	ldr	r3, [pc, #324]	; (8011854 <tcp_close_shutdown+0x1bc>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	687a      	ldr	r2, [r7, #4]
 8011714:	429a      	cmp	r2, r3
 8011716:	d105      	bne.n	8011724 <tcp_close_shutdown+0x8c>
 8011718:	4b4e      	ldr	r3, [pc, #312]	; (8011854 <tcp_close_shutdown+0x1bc>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	4a4d      	ldr	r2, [pc, #308]	; (8011854 <tcp_close_shutdown+0x1bc>)
 8011720:	6013      	str	r3, [r2, #0]
 8011722:	e013      	b.n	801174c <tcp_close_shutdown+0xb4>
 8011724:	4b4b      	ldr	r3, [pc, #300]	; (8011854 <tcp_close_shutdown+0x1bc>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	60fb      	str	r3, [r7, #12]
 801172a:	e00c      	b.n	8011746 <tcp_close_shutdown+0xae>
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	68db      	ldr	r3, [r3, #12]
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	429a      	cmp	r2, r3
 8011734:	d104      	bne.n	8011740 <tcp_close_shutdown+0xa8>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	68da      	ldr	r2, [r3, #12]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	60da      	str	r2, [r3, #12]
 801173e:	e005      	b.n	801174c <tcp_close_shutdown+0xb4>
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	68db      	ldr	r3, [r3, #12]
 8011744:	60fb      	str	r3, [r7, #12]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d1ef      	bne.n	801172c <tcp_close_shutdown+0x94>
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	60da      	str	r2, [r3, #12]
 8011752:	4b41      	ldr	r3, [pc, #260]	; (8011858 <tcp_close_shutdown+0x1c0>)
 8011754:	2201      	movs	r2, #1
 8011756:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	7d1b      	ldrb	r3, [r3, #20]
 801175c:	2b04      	cmp	r3, #4
 801175e:	d10c      	bne.n	801177a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	220a      	movs	r2, #10
 8011764:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011766:	4b3d      	ldr	r3, [pc, #244]	; (801185c <tcp_close_shutdown+0x1c4>)
 8011768:	681a      	ldr	r2, [r3, #0]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	60da      	str	r2, [r3, #12]
 801176e:	4a3b      	ldr	r2, [pc, #236]	; (801185c <tcp_close_shutdown+0x1c4>)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	f005 f9f8 	bl	8016b68 <tcp_timer_needed>
 8011778:	e00b      	b.n	8011792 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801177a:	4b39      	ldr	r3, [pc, #228]	; (8011860 <tcp_close_shutdown+0x1c8>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	429a      	cmp	r2, r3
 8011782:	d102      	bne.n	801178a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8011784:	f003 fe48 	bl	8015418 <tcp_trigger_input_pcb_close>
 8011788:	e003      	b.n	8011792 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801178a:	6879      	ldr	r1, [r7, #4]
 801178c:	2001      	movs	r0, #1
 801178e:	f7fe fe83 	bl	8010498 <memp_free>
        }
      }
      return ERR_OK;
 8011792:	2300      	movs	r3, #0
 8011794:	e053      	b.n	801183e <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	7d1b      	ldrb	r3, [r3, #20]
 801179a:	2b02      	cmp	r3, #2
 801179c:	d03d      	beq.n	801181a <tcp_close_shutdown+0x182>
 801179e:	2b02      	cmp	r3, #2
 80117a0:	dc47      	bgt.n	8011832 <tcp_close_shutdown+0x19a>
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d002      	beq.n	80117ac <tcp_close_shutdown+0x114>
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d02b      	beq.n	8011802 <tcp_close_shutdown+0x16a>
 80117aa:	e042      	b.n	8011832 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	8adb      	ldrh	r3, [r3, #22]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d021      	beq.n	80117f8 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80117b4:	4b2b      	ldr	r3, [pc, #172]	; (8011864 <tcp_close_shutdown+0x1cc>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d105      	bne.n	80117ca <tcp_close_shutdown+0x132>
 80117be:	4b29      	ldr	r3, [pc, #164]	; (8011864 <tcp_close_shutdown+0x1cc>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	4a27      	ldr	r2, [pc, #156]	; (8011864 <tcp_close_shutdown+0x1cc>)
 80117c6:	6013      	str	r3, [r2, #0]
 80117c8:	e013      	b.n	80117f2 <tcp_close_shutdown+0x15a>
 80117ca:	4b26      	ldr	r3, [pc, #152]	; (8011864 <tcp_close_shutdown+0x1cc>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	60bb      	str	r3, [r7, #8]
 80117d0:	e00c      	b.n	80117ec <tcp_close_shutdown+0x154>
 80117d2:	68bb      	ldr	r3, [r7, #8]
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d104      	bne.n	80117e6 <tcp_close_shutdown+0x14e>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	68da      	ldr	r2, [r3, #12]
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	60da      	str	r2, [r3, #12]
 80117e4:	e005      	b.n	80117f2 <tcp_close_shutdown+0x15a>
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	60bb      	str	r3, [r7, #8]
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1ef      	bne.n	80117d2 <tcp_close_shutdown+0x13a>
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2200      	movs	r2, #0
 80117f6:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 80117f8:	6879      	ldr	r1, [r7, #4]
 80117fa:	2001      	movs	r0, #1
 80117fc:	f7fe fe4c 	bl	8010498 <memp_free>
    break;
 8011800:	e01c      	b.n	801183c <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7ff ff10 	bl	8011628 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011808:	6879      	ldr	r1, [r7, #4]
 801180a:	4817      	ldr	r0, [pc, #92]	; (8011868 <tcp_close_shutdown+0x1d0>)
 801180c:	f001 fae6 	bl	8012ddc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011810:	6879      	ldr	r1, [r7, #4]
 8011812:	2002      	movs	r0, #2
 8011814:	f7fe fe40 	bl	8010498 <memp_free>
    break;
 8011818:	e010      	b.n	801183c <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 801181a:	6879      	ldr	r1, [r7, #4]
 801181c:	480d      	ldr	r0, [pc, #52]	; (8011854 <tcp_close_shutdown+0x1bc>)
 801181e:	f001 fadd 	bl	8012ddc <tcp_pcb_remove>
 8011822:	4b0d      	ldr	r3, [pc, #52]	; (8011858 <tcp_close_shutdown+0x1c0>)
 8011824:	2201      	movs	r2, #1
 8011826:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8011828:	6879      	ldr	r1, [r7, #4]
 801182a:	2001      	movs	r0, #1
 801182c:	f7fe fe34 	bl	8010498 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8011830:	e004      	b.n	801183c <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f000 f81a 	bl	801186c <tcp_close_shutdown_fin>
 8011838:	4603      	mov	r3, r0
 801183a:	e000      	b.n	801183e <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 801183c:	2300      	movs	r3, #0
}
 801183e:	4618      	mov	r0, r3
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bdb0      	pop	{r4, r5, r7, pc}
 8011846:	bf00      	nop
 8011848:	0801cd18 	.word	0x0801cd18
 801184c:	0801cd94 	.word	0x0801cd94
 8011850:	0801cd54 	.word	0x0801cd54
 8011854:	2000bed8 	.word	0x2000bed8
 8011858:	2000bed4 	.word	0x2000bed4
 801185c:	2000bee8 	.word	0x2000bee8
 8011860:	2000beec 	.word	0x2000beec
 8011864:	2000bee4 	.word	0x2000bee4
 8011868:	2000bee0 	.word	0x2000bee0

0801186c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b084      	sub	sp, #16
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d106      	bne.n	8011888 <tcp_close_shutdown_fin+0x1c>
 801187a:	4b2e      	ldr	r3, [pc, #184]	; (8011934 <tcp_close_shutdown_fin+0xc8>)
 801187c:	f240 124d 	movw	r2, #333	; 0x14d
 8011880:	492d      	ldr	r1, [pc, #180]	; (8011938 <tcp_close_shutdown_fin+0xcc>)
 8011882:	482e      	ldr	r0, [pc, #184]	; (801193c <tcp_close_shutdown_fin+0xd0>)
 8011884:	f008 ff00 	bl	801a688 <iprintf>

  switch (pcb->state) {
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	7d1b      	ldrb	r3, [r3, #20]
 801188c:	2b07      	cmp	r3, #7
 801188e:	d020      	beq.n	80118d2 <tcp_close_shutdown_fin+0x66>
 8011890:	2b07      	cmp	r3, #7
 8011892:	dc2b      	bgt.n	80118ec <tcp_close_shutdown_fin+0x80>
 8011894:	2b03      	cmp	r3, #3
 8011896:	d002      	beq.n	801189e <tcp_close_shutdown_fin+0x32>
 8011898:	2b04      	cmp	r3, #4
 801189a:	d00d      	beq.n	80118b8 <tcp_close_shutdown_fin+0x4c>
 801189c:	e026      	b.n	80118ec <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f003 fe44 	bl	801552c <tcp_send_fin>
 80118a4:	4603      	mov	r3, r0
 80118a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80118a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d11f      	bne.n	80118f0 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	2205      	movs	r2, #5
 80118b4:	751a      	strb	r2, [r3, #20]
    }
    break;
 80118b6:	e01b      	b.n	80118f0 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f003 fe37 	bl	801552c <tcp_send_fin>
 80118be:	4603      	mov	r3, r0
 80118c0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80118c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d114      	bne.n	80118f4 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2205      	movs	r2, #5
 80118ce:	751a      	strb	r2, [r3, #20]
    }
    break;
 80118d0:	e010      	b.n	80118f4 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f003 fe2a 	bl	801552c <tcp_send_fin>
 80118d8:	4603      	mov	r3, r0
 80118da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80118dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d109      	bne.n	80118f8 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2209      	movs	r2, #9
 80118e8:	751a      	strb	r2, [r3, #20]
    }
    break;
 80118ea:	e005      	b.n	80118f8 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80118ec:	2300      	movs	r3, #0
 80118ee:	e01c      	b.n	801192a <tcp_close_shutdown_fin+0xbe>
    break;
 80118f0:	bf00      	nop
 80118f2:	e002      	b.n	80118fa <tcp_close_shutdown_fin+0x8e>
    break;
 80118f4:	bf00      	nop
 80118f6:	e000      	b.n	80118fa <tcp_close_shutdown_fin+0x8e>
    break;
 80118f8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80118fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d103      	bne.n	801190a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f004 fc64 	bl	80161d0 <tcp_output>
 8011908:	e00d      	b.n	8011926 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801190e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011912:	d108      	bne.n	8011926 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	7e9b      	ldrb	r3, [r3, #26]
 8011918:	f043 0308 	orr.w	r3, r3, #8
 801191c:	b2da      	uxtb	r2, r3
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011922:	2300      	movs	r3, #0
 8011924:	e001      	b.n	801192a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011926:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	0801cd18 	.word	0x0801cd18
 8011938:	0801cd48 	.word	0x0801cd48
 801193c:	0801cd54 	.word	0x0801cd54

08011940 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	7d1b      	ldrb	r3, [r3, #20]
 801194c:	2b01      	cmp	r3, #1
 801194e:	d006      	beq.n	801195e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	7e9b      	ldrb	r3, [r3, #26]
 8011954:	f043 0310 	orr.w	r3, r3, #16
 8011958:	b2da      	uxtb	r2, r3
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801195e:	2101      	movs	r1, #1
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f7ff fe99 	bl	8011698 <tcp_close_shutdown>
 8011966:	4603      	mov	r3, r0
}
 8011968:	4618      	mov	r0, r3
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b08c      	sub	sp, #48	; 0x30
 8011974:	af02      	add	r7, sp, #8
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	7d1b      	ldrb	r3, [r3, #20]
 801197e:	2b01      	cmp	r3, #1
 8011980:	d106      	bne.n	8011990 <tcp_abandon+0x20>
 8011982:	4b4d      	ldr	r3, [pc, #308]	; (8011ab8 <tcp_abandon+0x148>)
 8011984:	f240 12df 	movw	r2, #479	; 0x1df
 8011988:	494c      	ldr	r1, [pc, #304]	; (8011abc <tcp_abandon+0x14c>)
 801198a:	484d      	ldr	r0, [pc, #308]	; (8011ac0 <tcp_abandon+0x150>)
 801198c:	f008 fe7c 	bl	801a688 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	7d1b      	ldrb	r3, [r3, #20]
 8011994:	2b0a      	cmp	r3, #10
 8011996:	d108      	bne.n	80119aa <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011998:	6879      	ldr	r1, [r7, #4]
 801199a:	484a      	ldr	r0, [pc, #296]	; (8011ac4 <tcp_abandon+0x154>)
 801199c:	f001 fa1e 	bl	8012ddc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80119a0:	6879      	ldr	r1, [r7, #4]
 80119a2:	2001      	movs	r0, #1
 80119a4:	f7fe fd78 	bl	8010498 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80119a8:	e081      	b.n	8011aae <tcp_abandon+0x13e>
    int send_rst = 0;
 80119aa:	2300      	movs	r3, #0
 80119ac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80119ae:	2300      	movs	r3, #0
 80119b0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119bc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119c4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	691b      	ldr	r3, [r3, #16]
 80119ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	7d1b      	ldrb	r3, [r3, #20]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d126      	bne.n	8011a22 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	8adb      	ldrh	r3, [r3, #22]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d02e      	beq.n	8011a3a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80119dc:	4b3a      	ldr	r3, [pc, #232]	; (8011ac8 <tcp_abandon+0x158>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	687a      	ldr	r2, [r7, #4]
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d105      	bne.n	80119f2 <tcp_abandon+0x82>
 80119e6:	4b38      	ldr	r3, [pc, #224]	; (8011ac8 <tcp_abandon+0x158>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	4a36      	ldr	r2, [pc, #216]	; (8011ac8 <tcp_abandon+0x158>)
 80119ee:	6013      	str	r3, [r2, #0]
 80119f0:	e013      	b.n	8011a1a <tcp_abandon+0xaa>
 80119f2:	4b35      	ldr	r3, [pc, #212]	; (8011ac8 <tcp_abandon+0x158>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	61fb      	str	r3, [r7, #28]
 80119f8:	e00c      	b.n	8011a14 <tcp_abandon+0xa4>
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	68db      	ldr	r3, [r3, #12]
 80119fe:	687a      	ldr	r2, [r7, #4]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d104      	bne.n	8011a0e <tcp_abandon+0x9e>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	68da      	ldr	r2, [r3, #12]
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	60da      	str	r2, [r3, #12]
 8011a0c:	e005      	b.n	8011a1a <tcp_abandon+0xaa>
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	68db      	ldr	r3, [r3, #12]
 8011a12:	61fb      	str	r3, [r7, #28]
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d1ef      	bne.n	80119fa <tcp_abandon+0x8a>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	60da      	str	r2, [r3, #12]
 8011a20:	e00b      	b.n	8011a3a <tcp_abandon+0xca>
      send_rst = reset;
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	8adb      	ldrh	r3, [r3, #22]
 8011a2a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011a2c:	6879      	ldr	r1, [r7, #4]
 8011a2e:	4827      	ldr	r0, [pc, #156]	; (8011acc <tcp_abandon+0x15c>)
 8011a30:	f001 f9d4 	bl	8012ddc <tcp_pcb_remove>
 8011a34:	4b26      	ldr	r3, [pc, #152]	; (8011ad0 <tcp_abandon+0x160>)
 8011a36:	2201      	movs	r2, #1
 8011a38:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d004      	beq.n	8011a4c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a46:	4618      	mov	r0, r3
 8011a48:	f000 ff0b 	bl	8012862 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d004      	beq.n	8011a5e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f000 ff02 	bl	8012862 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d004      	beq.n	8011a70 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f000 fef9 	bl	8012862 <tcp_segs_free>
    if (send_rst) {
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00c      	beq.n	8011a90 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	1d19      	adds	r1, r3, #4
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	8b1b      	ldrh	r3, [r3, #24]
 8011a80:	9301      	str	r3, [sp, #4]
 8011a82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	460b      	mov	r3, r1
 8011a88:	6979      	ldr	r1, [r7, #20]
 8011a8a:	69b8      	ldr	r0, [r7, #24]
 8011a8c:	f004 fe24 	bl	80166d8 <tcp_rst>
    last_state = pcb->state;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	7d1b      	ldrb	r3, [r3, #20]
 8011a94:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8011a96:	6879      	ldr	r1, [r7, #4]
 8011a98:	2001      	movs	r0, #1
 8011a9a:	f7fe fcfd 	bl	8010498 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d004      	beq.n	8011aae <tcp_abandon+0x13e>
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	f06f 010c 	mvn.w	r1, #12
 8011aaa:	68f8      	ldr	r0, [r7, #12]
 8011aac:	4798      	blx	r3
}
 8011aae:	bf00      	nop
 8011ab0:	3728      	adds	r7, #40	; 0x28
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	bd80      	pop	{r7, pc}
 8011ab6:	bf00      	nop
 8011ab8:	0801cd18 	.word	0x0801cd18
 8011abc:	0801cdb0 	.word	0x0801cdb0
 8011ac0:	0801cd54 	.word	0x0801cd54
 8011ac4:	2000bee8 	.word	0x2000bee8
 8011ac8:	2000bee4 	.word	0x2000bee4
 8011acc:	2000bed8 	.word	0x2000bed8
 8011ad0:	2000bed4 	.word	0x2000bed4

08011ad4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b082      	sub	sp, #8
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011adc:	2101      	movs	r1, #1
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f7ff ff46 	bl	8011970 <tcp_abandon>
}
 8011ae4:	bf00      	nop
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b088      	sub	sp, #32
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	60b9      	str	r1, [r7, #8]
 8011af6:	4613      	mov	r3, r2
 8011af8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011afa:	2304      	movs	r3, #4
 8011afc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011afe:	68bb      	ldr	r3, [r7, #8]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d101      	bne.n	8011b08 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011b04:	4b3c      	ldr	r3, [pc, #240]	; (8011bf8 <tcp_bind+0x10c>)
 8011b06:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d002      	beq.n	8011b14 <tcp_bind+0x28>
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d102      	bne.n	8011b1a <tcp_bind+0x2e>
    return ERR_VAL;
 8011b14:	f06f 0305 	mvn.w	r3, #5
 8011b18:	e06a      	b.n	8011bf0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	7d1b      	ldrb	r3, [r3, #20]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d009      	beq.n	8011b36 <tcp_bind+0x4a>
 8011b22:	4b36      	ldr	r3, [pc, #216]	; (8011bfc <tcp_bind+0x110>)
 8011b24:	f44f 7211 	mov.w	r2, #580	; 0x244
 8011b28:	4935      	ldr	r1, [pc, #212]	; (8011c00 <tcp_bind+0x114>)
 8011b2a:	4836      	ldr	r0, [pc, #216]	; (8011c04 <tcp_bind+0x118>)
 8011b2c:	f008 fdac 	bl	801a688 <iprintf>
 8011b30:	f06f 0305 	mvn.w	r3, #5
 8011b34:	e05c      	b.n	8011bf0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8011b36:	88fb      	ldrh	r3, [r7, #6]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d109      	bne.n	8011b50 <tcp_bind+0x64>
    port = tcp_new_port();
 8011b3c:	f000 f9ca 	bl	8011ed4 <tcp_new_port>
 8011b40:	4603      	mov	r3, r0
 8011b42:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011b44:	88fb      	ldrh	r3, [r7, #6]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d135      	bne.n	8011bb6 <tcp_bind+0xca>
      return ERR_BUF;
 8011b4a:	f06f 0301 	mvn.w	r3, #1
 8011b4e:	e04f      	b.n	8011bf0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011b50:	2300      	movs	r3, #0
 8011b52:	61fb      	str	r3, [r7, #28]
 8011b54:	e02b      	b.n	8011bae <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011b56:	4a2c      	ldr	r2, [pc, #176]	; (8011c08 <tcp_bind+0x11c>)
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	61bb      	str	r3, [r7, #24]
 8011b62:	e01e      	b.n	8011ba2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	8adb      	ldrh	r3, [r3, #22]
 8011b68:	88fa      	ldrh	r2, [r7, #6]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d116      	bne.n	8011b9c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011b6e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d010      	beq.n	8011b96 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8011b74:	69bb      	ldr	r3, [r7, #24]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d00c      	beq.n	8011b96 <tcp_bind+0xaa>
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d009      	beq.n	8011b96 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d005      	beq.n	8011b96 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d102      	bne.n	8011b9c <tcp_bind+0xb0>
              return ERR_USE;
 8011b96:	f06f 0307 	mvn.w	r3, #7
 8011b9a:	e029      	b.n	8011bf0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011b9c:	69bb      	ldr	r3, [r7, #24]
 8011b9e:	68db      	ldr	r3, [r3, #12]
 8011ba0:	61bb      	str	r3, [r7, #24]
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d1dd      	bne.n	8011b64 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	3301      	adds	r3, #1
 8011bac:	61fb      	str	r3, [r7, #28]
 8011bae:	69fa      	ldr	r2, [r7, #28]
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	dbcf      	blt.n	8011b56 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d00c      	beq.n	8011bd6 <tcp_bind+0xea>
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d008      	beq.n	8011bd6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d002      	beq.n	8011bd0 <tcp_bind+0xe4>
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	e000      	b.n	8011bd2 <tcp_bind+0xe6>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	88fa      	ldrh	r2, [r7, #6]
 8011bda:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011bdc:	4b0b      	ldr	r3, [pc, #44]	; (8011c0c <tcp_bind+0x120>)
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	60da      	str	r2, [r3, #12]
 8011be4:	4a09      	ldr	r2, [pc, #36]	; (8011c0c <tcp_bind+0x120>)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	6013      	str	r3, [r2, #0]
 8011bea:	f004 ffbd 	bl	8016b68 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011bee:	2300      	movs	r3, #0
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3720      	adds	r7, #32
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	0801ecd4 	.word	0x0801ecd4
 8011bfc:	0801cd18 	.word	0x0801cd18
 8011c00:	0801cde4 	.word	0x0801cde4
 8011c04:	0801cd54 	.word	0x0801cd54
 8011c08:	0801ecac 	.word	0x0801ecac
 8011c0c:	2000bee4 	.word	0x2000bee4

08011c10 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	4613      	mov	r3, r2
 8011c1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8011c1e:	68b8      	ldr	r0, [r7, #8]
 8011c20:	f7ff ff58 	bl	8011ad4 <tcp_abort>

  return ERR_ABRT;
 8011c24:	f06f 030c 	mvn.w	r3, #12
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3710      	adds	r7, #16
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8011c3c:	78fb      	ldrb	r3, [r7, #3]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	4619      	mov	r1, r3
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 f806 	bl	8011c54 <tcp_listen_with_backlog_and_err>
 8011c48:	4603      	mov	r3, r0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
	...

08011c54 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b088      	sub	sp, #32
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	607a      	str	r2, [r7, #4]
 8011c60:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011c62:	2300      	movs	r3, #0
 8011c64:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	7d1b      	ldrb	r3, [r3, #20]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d009      	beq.n	8011c82 <tcp_listen_with_backlog_and_err+0x2e>
 8011c6e:	4b3f      	ldr	r3, [pc, #252]	; (8011d6c <tcp_listen_with_backlog_and_err+0x118>)
 8011c70:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8011c74:	493e      	ldr	r1, [pc, #248]	; (8011d70 <tcp_listen_with_backlog_and_err+0x11c>)
 8011c76:	483f      	ldr	r0, [pc, #252]	; (8011d74 <tcp_listen_with_backlog_and_err+0x120>)
 8011c78:	f008 fd06 	bl	801a688 <iprintf>
 8011c7c:	23f1      	movs	r3, #241	; 0xf1
 8011c7e:	76fb      	strb	r3, [r7, #27]
 8011c80:	e069      	b.n	8011d56 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	7d1b      	ldrb	r3, [r3, #20]
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d104      	bne.n	8011c94 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011c8e:	23f7      	movs	r3, #247	; 0xf7
 8011c90:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011c92:	e060      	b.n	8011d56 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011c94:	2002      	movs	r0, #2
 8011c96:	f7fe fbad 	bl	80103f4 <memp_malloc>
 8011c9a:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d102      	bne.n	8011ca8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8011ca2:	23ff      	movs	r3, #255	; 0xff
 8011ca4:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011ca6:	e056      	b.n	8011d56 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	691a      	ldr	r2, [r3, #16]
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	8ada      	ldrh	r2, [r3, #22]
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	2201      	movs	r2, #1
 8011cbc:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	7d5a      	ldrb	r2, [r3, #21]
 8011cc2:	69fb      	ldr	r3, [r7, #28]
 8011cc4:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	7a1a      	ldrb	r2, [r3, #8]
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	7a9a      	ldrb	r2, [r3, #10]
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	7a5a      	ldrb	r2, [r3, #9]
 8011cda:	69fb      	ldr	r3, [r7, #28]
 8011cdc:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	8adb      	ldrh	r3, [r3, #22]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d021      	beq.n	8011d32 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011cee:	4b22      	ldr	r3, [pc, #136]	; (8011d78 <tcp_listen_with_backlog_and_err+0x124>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	68fa      	ldr	r2, [r7, #12]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d105      	bne.n	8011d04 <tcp_listen_with_backlog_and_err+0xb0>
 8011cf8:	4b1f      	ldr	r3, [pc, #124]	; (8011d78 <tcp_listen_with_backlog_and_err+0x124>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	68db      	ldr	r3, [r3, #12]
 8011cfe:	4a1e      	ldr	r2, [pc, #120]	; (8011d78 <tcp_listen_with_backlog_and_err+0x124>)
 8011d00:	6013      	str	r3, [r2, #0]
 8011d02:	e013      	b.n	8011d2c <tcp_listen_with_backlog_and_err+0xd8>
 8011d04:	4b1c      	ldr	r3, [pc, #112]	; (8011d78 <tcp_listen_with_backlog_and_err+0x124>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	617b      	str	r3, [r7, #20]
 8011d0a:	e00c      	b.n	8011d26 <tcp_listen_with_backlog_and_err+0xd2>
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	68fa      	ldr	r2, [r7, #12]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d104      	bne.n	8011d20 <tcp_listen_with_backlog_and_err+0xcc>
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	68da      	ldr	r2, [r3, #12]
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	60da      	str	r2, [r3, #12]
 8011d1e:	e005      	b.n	8011d2c <tcp_listen_with_backlog_and_err+0xd8>
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	617b      	str	r3, [r7, #20]
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1ef      	bne.n	8011d0c <tcp_listen_with_backlog_and_err+0xb8>
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8011d32:	68f9      	ldr	r1, [r7, #12]
 8011d34:	2001      	movs	r0, #1
 8011d36:	f7fe fbaf 	bl	8010498 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	4a0f      	ldr	r2, [pc, #60]	; (8011d7c <tcp_listen_with_backlog_and_err+0x128>)
 8011d3e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8011d40:	4b0f      	ldr	r3, [pc, #60]	; (8011d80 <tcp_listen_with_backlog_and_err+0x12c>)
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	60da      	str	r2, [r3, #12]
 8011d48:	4a0d      	ldr	r2, [pc, #52]	; (8011d80 <tcp_listen_with_backlog_and_err+0x12c>)
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	6013      	str	r3, [r2, #0]
 8011d4e:	f004 ff0b 	bl	8016b68 <tcp_timer_needed>
  res = ERR_OK;
 8011d52:	2300      	movs	r3, #0
 8011d54:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d002      	beq.n	8011d62 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	7efa      	ldrb	r2, [r7, #27]
 8011d60:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011d62:	69fb      	ldr	r3, [r7, #28]
}
 8011d64:	4618      	mov	r0, r3
 8011d66:	3720      	adds	r7, #32
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	0801cd18 	.word	0x0801cd18
 8011d70:	0801ce0c 	.word	0x0801ce0c
 8011d74:	0801cd54 	.word	0x0801cd54
 8011d78:	2000bee4 	.word	0x2000bee4
 8011d7c:	08011c11 	.word	0x08011c11
 8011d80:	2000bee0 	.word	0x2000bee0

08011d84 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011d94:	4413      	add	r3, r2
 8011d96:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011da0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011da4:	bf28      	it	cs
 8011da6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011daa:	b292      	uxth	r2, r2
 8011dac:	4413      	add	r3, r2
 8011dae:	68fa      	ldr	r2, [r7, #12]
 8011db0:	1ad3      	subs	r3, r2, r3
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	db08      	blt.n	8011dc8 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	1ad3      	subs	r3, r2, r3
 8011dc6:	e020      	b.n	8011e0a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd0:	1ad3      	subs	r3, r2, r3
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	dd03      	ble.n	8011dde <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011ddc:	e014      	b.n	8011e08 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011df0:	d306      	bcc.n	8011e00 <tcp_update_rcv_ann_wnd+0x7c>
 8011df2:	4b08      	ldr	r3, [pc, #32]	; (8011e14 <tcp_update_rcv_ann_wnd+0x90>)
 8011df4:	f44f 7242 	mov.w	r2, #776	; 0x308
 8011df8:	4907      	ldr	r1, [pc, #28]	; (8011e18 <tcp_update_rcv_ann_wnd+0x94>)
 8011dfa:	4808      	ldr	r0, [pc, #32]	; (8011e1c <tcp_update_rcv_ann_wnd+0x98>)
 8011dfc:	f008 fc44 	bl	801a688 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	b29a      	uxth	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011e08:	2300      	movs	r3, #0
  }
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	0801cd18 	.word	0x0801cd18
 8011e18:	0801ce30 	.word	0x0801ce30
 8011e1c:	0801cd54 	.word	0x0801cd54

08011e20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	460b      	mov	r3, r1
 8011e2a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	7d1b      	ldrb	r3, [r3, #20]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d106      	bne.n	8011e42 <tcp_recved+0x22>
 8011e34:	4b23      	ldr	r3, [pc, #140]	; (8011ec4 <tcp_recved+0xa4>)
 8011e36:	f240 321f 	movw	r2, #799	; 0x31f
 8011e3a:	4923      	ldr	r1, [pc, #140]	; (8011ec8 <tcp_recved+0xa8>)
 8011e3c:	4823      	ldr	r0, [pc, #140]	; (8011ecc <tcp_recved+0xac>)
 8011e3e:	f008 fc23 	bl	801a688 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e46:	887b      	ldrh	r3, [r7, #2]
 8011e48:	4413      	add	r3, r2
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e54:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011e58:	d904      	bls.n	8011e64 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011e60:	851a      	strh	r2, [r3, #40]	; 0x28
 8011e62:	e017      	b.n	8011e94 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d113      	bne.n	8011e94 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	7d1b      	ldrb	r3, [r3, #20]
 8011e70:	2b07      	cmp	r3, #7
 8011e72:	d003      	beq.n	8011e7c <tcp_recved+0x5c>
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	7d1b      	ldrb	r3, [r3, #20]
 8011e78:	2b09      	cmp	r3, #9
 8011e7a:	d104      	bne.n	8011e86 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011e82:	851a      	strh	r2, [r3, #40]	; 0x28
 8011e84:	e006      	b.n	8011e94 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8011e86:	4b0f      	ldr	r3, [pc, #60]	; (8011ec4 <tcp_recved+0xa4>)
 8011e88:	f240 322d 	movw	r2, #813	; 0x32d
 8011e8c:	4910      	ldr	r1, [pc, #64]	; (8011ed0 <tcp_recved+0xb0>)
 8011e8e:	480f      	ldr	r0, [pc, #60]	; (8011ecc <tcp_recved+0xac>)
 8011e90:	f008 fbfa 	bl	801a688 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f7ff ff75 	bl	8011d84 <tcp_update_rcv_ann_wnd>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011ea4:	db09      	blt.n	8011eba <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	7e9b      	ldrb	r3, [r3, #26]
 8011eaa:	f043 0302 	orr.w	r3, r3, #2
 8011eae:	b2da      	uxtb	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f004 f98b 	bl	80161d0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011eba:	bf00      	nop
 8011ebc:	3710      	adds	r7, #16
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	bd80      	pop	{r7, pc}
 8011ec2:	bf00      	nop
 8011ec4:	0801cd18 	.word	0x0801cd18
 8011ec8:	0801ce4c 	.word	0x0801ce4c
 8011ecc:	0801cd54 	.word	0x0801cd54
 8011ed0:	0801ce74 	.word	0x0801ce74

08011ed4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8011ede:	4b1d      	ldr	r3, [pc, #116]	; (8011f54 <tcp_new_port+0x80>)
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	1c5a      	adds	r2, r3, #1
 8011ee4:	b291      	uxth	r1, r2
 8011ee6:	4a1b      	ldr	r2, [pc, #108]	; (8011f54 <tcp_new_port+0x80>)
 8011ee8:	8011      	strh	r1, [r2, #0]
 8011eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d103      	bne.n	8011efa <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011ef2:	4b18      	ldr	r3, [pc, #96]	; (8011f54 <tcp_new_port+0x80>)
 8011ef4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011ef8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011efa:	2300      	movs	r3, #0
 8011efc:	71fb      	strb	r3, [r7, #7]
 8011efe:	e01e      	b.n	8011f3e <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011f00:	79fb      	ldrb	r3, [r7, #7]
 8011f02:	4a15      	ldr	r2, [pc, #84]	; (8011f58 <tcp_new_port+0x84>)
 8011f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	603b      	str	r3, [r7, #0]
 8011f0c:	e011      	b.n	8011f32 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	8ada      	ldrh	r2, [r3, #22]
 8011f12:	4b10      	ldr	r3, [pc, #64]	; (8011f54 <tcp_new_port+0x80>)
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d108      	bne.n	8011f2c <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011f1a:	88bb      	ldrh	r3, [r7, #4]
 8011f1c:	3301      	adds	r3, #1
 8011f1e:	80bb      	strh	r3, [r7, #4]
 8011f20:	88bb      	ldrh	r3, [r7, #4]
 8011f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f26:	d3da      	bcc.n	8011ede <tcp_new_port+0xa>
          return 0;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	e00d      	b.n	8011f48 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	603b      	str	r3, [r7, #0]
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1ea      	bne.n	8011f0e <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011f38:	79fb      	ldrb	r3, [r7, #7]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	71fb      	strb	r3, [r7, #7]
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	2b03      	cmp	r3, #3
 8011f42:	d9dd      	bls.n	8011f00 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011f44:	4b03      	ldr	r3, [pc, #12]	; (8011f54 <tcp_new_port+0x80>)
 8011f46:	881b      	ldrh	r3, [r3, #0]
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	370c      	adds	r7, #12
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bc80      	pop	{r7}
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	2000014c 	.word	0x2000014c
 8011f58:	0801ecac 	.word	0x0801ecac

08011f5c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b08a      	sub	sp, #40	; 0x28
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	603b      	str	r3, [r7, #0]
 8011f68:	4613      	mov	r3, r2
 8011f6a:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d002      	beq.n	8011f78 <tcp_connect+0x1c>
 8011f72:	68bb      	ldr	r3, [r7, #8]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d102      	bne.n	8011f7e <tcp_connect+0x22>
    return ERR_VAL;
 8011f78:	f06f 0305 	mvn.w	r3, #5
 8011f7c:	e0d1      	b.n	8012122 <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	7d1b      	ldrb	r3, [r3, #20]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d009      	beq.n	8011f9a <tcp_connect+0x3e>
 8011f86:	4b69      	ldr	r3, [pc, #420]	; (801212c <tcp_connect+0x1d0>)
 8011f88:	f44f 725e 	mov.w	r2, #888	; 0x378
 8011f8c:	4968      	ldr	r1, [pc, #416]	; (8012130 <tcp_connect+0x1d4>)
 8011f8e:	4869      	ldr	r0, [pc, #420]	; (8012134 <tcp_connect+0x1d8>)
 8011f90:	f008 fb7a 	bl	801a688 <iprintf>
 8011f94:	f06f 0309 	mvn.w	r3, #9
 8011f98:	e0c3      	b.n	8012122 <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d002      	beq.n	8011fa6 <tcp_connect+0x4a>
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	e000      	b.n	8011fa8 <tcp_connect+0x4c>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	68fa      	ldr	r2, [r7, #12]
 8011faa:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	88fa      	ldrh	r2, [r7, #6]
 8011fb0:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d003      	beq.n	8011fc0 <tcp_connect+0x64>
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d11a      	bne.n	8011ff6 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	3304      	adds	r3, #4
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f006 f9ad 	bl	8018324 <ip4_route>
 8011fca:	6238      	str	r0, [r7, #32]
 8011fcc:	6a3b      	ldr	r3, [r7, #32]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d002      	beq.n	8011fd8 <tcp_connect+0x7c>
 8011fd2:	6a3b      	ldr	r3, [r7, #32]
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	e000      	b.n	8011fda <tcp_connect+0x7e>
 8011fd8:	2300      	movs	r3, #0
 8011fda:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 8011fdc:	6a3b      	ldr	r3, [r7, #32]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d002      	beq.n	8011fe8 <tcp_connect+0x8c>
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d102      	bne.n	8011fee <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 8011fe8:	f06f 0303 	mvn.w	r3, #3
 8011fec:	e099      	b.n	8012122 <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	8adb      	ldrh	r3, [r3, #22]
 8011ffa:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	8adb      	ldrh	r3, [r3, #22]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d10c      	bne.n	801201e <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 8012004:	f7ff ff66 	bl	8011ed4 <tcp_new_port>
 8012008:	4603      	mov	r3, r0
 801200a:	461a      	mov	r2, r3
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	8adb      	ldrh	r3, [r3, #22]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d102      	bne.n	801201e <tcp_connect+0xc2>
      return ERR_BUF;
 8012018:	f06f 0301 	mvn.w	r3, #1
 801201c:	e081      	b.n	8012122 <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 801201e:	68f8      	ldr	r0, [r7, #12]
 8012020:	f000 ff58 	bl	8012ed4 <tcp_next_iss>
 8012024:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2200      	movs	r2, #0
 801202a:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	697a      	ldr	r2, [r7, #20]
 8012030:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	1e5a      	subs	r2, r3, #1
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	1e5a      	subs	r2, r3, #1
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	1e5a      	subs	r2, r3, #1
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012050:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012068:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012072:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	3304      	adds	r3, #4
 801207c:	4619      	mov	r1, r3
 801207e:	4610      	mov	r0, r2
 8012080:	f000 ff3e 	bl	8012f00 <tcp_eff_send_mss_impl>
 8012084:	4603      	mov	r3, r0
 8012086:	461a      	mov	r2, r3
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2201      	movs	r2, #1
 8012090:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	683a      	ldr	r2, [r7, #0]
 8012098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801209c:	2102      	movs	r1, #2
 801209e:	68f8      	ldr	r0, [r7, #12]
 80120a0:	f003 ff3e 	bl	8015f20 <tcp_enqueue_flags>
 80120a4:	4603      	mov	r3, r0
 80120a6:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80120a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d136      	bne.n	801211e <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	2202      	movs	r2, #2
 80120b4:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80120b6:	8b7b      	ldrh	r3, [r7, #26]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d021      	beq.n	8012100 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80120bc:	4b1e      	ldr	r3, [pc, #120]	; (8012138 <tcp_connect+0x1dc>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	68fa      	ldr	r2, [r7, #12]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d105      	bne.n	80120d2 <tcp_connect+0x176>
 80120c6:	4b1c      	ldr	r3, [pc, #112]	; (8012138 <tcp_connect+0x1dc>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	4a1a      	ldr	r2, [pc, #104]	; (8012138 <tcp_connect+0x1dc>)
 80120ce:	6013      	str	r3, [r2, #0]
 80120d0:	e013      	b.n	80120fa <tcp_connect+0x19e>
 80120d2:	4b19      	ldr	r3, [pc, #100]	; (8012138 <tcp_connect+0x1dc>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	627b      	str	r3, [r7, #36]	; 0x24
 80120d8:	e00c      	b.n	80120f4 <tcp_connect+0x198>
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	68fa      	ldr	r2, [r7, #12]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d104      	bne.n	80120ee <tcp_connect+0x192>
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	68da      	ldr	r2, [r3, #12]
 80120e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ea:	60da      	str	r2, [r3, #12]
 80120ec:	e005      	b.n	80120fa <tcp_connect+0x19e>
 80120ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f0:	68db      	ldr	r3, [r3, #12]
 80120f2:	627b      	str	r3, [r7, #36]	; 0x24
 80120f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1ef      	bne.n	80120da <tcp_connect+0x17e>
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8012100:	4b0e      	ldr	r3, [pc, #56]	; (801213c <tcp_connect+0x1e0>)
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	60da      	str	r2, [r3, #12]
 8012108:	4a0c      	ldr	r2, [pc, #48]	; (801213c <tcp_connect+0x1e0>)
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	6013      	str	r3, [r2, #0]
 801210e:	f004 fd2b 	bl	8016b68 <tcp_timer_needed>
 8012112:	4b0b      	ldr	r3, [pc, #44]	; (8012140 <tcp_connect+0x1e4>)
 8012114:	2201      	movs	r2, #1
 8012116:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	f004 f859 	bl	80161d0 <tcp_output>
  }
  return ret;
 801211e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012122:	4618      	mov	r0, r3
 8012124:	3728      	adds	r7, #40	; 0x28
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	0801cd18 	.word	0x0801cd18
 8012130:	0801ce98 	.word	0x0801ce98
 8012134:	0801cd54 	.word	0x0801cd54
 8012138:	2000bee4 	.word	0x2000bee4
 801213c:	2000bed8 	.word	0x2000bed8
 8012140:	2000bed4 	.word	0x2000bed4

08012144 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012144:	b5b0      	push	{r4, r5, r7, lr}
 8012146:	b08c      	sub	sp, #48	; 0x30
 8012148:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801214a:	2300      	movs	r3, #0
 801214c:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 801214e:	4b97      	ldr	r3, [pc, #604]	; (80123ac <tcp_slowtmr+0x268>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	3301      	adds	r3, #1
 8012154:	4a95      	ldr	r2, [pc, #596]	; (80123ac <tcp_slowtmr+0x268>)
 8012156:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012158:	4b95      	ldr	r3, [pc, #596]	; (80123b0 <tcp_slowtmr+0x26c>)
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	3301      	adds	r3, #1
 801215e:	b2da      	uxtb	r2, r3
 8012160:	4b93      	ldr	r3, [pc, #588]	; (80123b0 <tcp_slowtmr+0x26c>)
 8012162:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012164:	2300      	movs	r3, #0
 8012166:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8012168:	4b92      	ldr	r3, [pc, #584]	; (80123b4 <tcp_slowtmr+0x270>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801216e:	e227      	b.n	80125c0 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012172:	7d1b      	ldrb	r3, [r3, #20]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d106      	bne.n	8012186 <tcp_slowtmr+0x42>
 8012178:	4b8f      	ldr	r3, [pc, #572]	; (80123b8 <tcp_slowtmr+0x274>)
 801217a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 801217e:	498f      	ldr	r1, [pc, #572]	; (80123bc <tcp_slowtmr+0x278>)
 8012180:	488f      	ldr	r0, [pc, #572]	; (80123c0 <tcp_slowtmr+0x27c>)
 8012182:	f008 fa81 	bl	801a688 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	7d1b      	ldrb	r3, [r3, #20]
 801218a:	2b01      	cmp	r3, #1
 801218c:	d106      	bne.n	801219c <tcp_slowtmr+0x58>
 801218e:	4b8a      	ldr	r3, [pc, #552]	; (80123b8 <tcp_slowtmr+0x274>)
 8012190:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012194:	498b      	ldr	r1, [pc, #556]	; (80123c4 <tcp_slowtmr+0x280>)
 8012196:	488a      	ldr	r0, [pc, #552]	; (80123c0 <tcp_slowtmr+0x27c>)
 8012198:	f008 fa76 	bl	801a688 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219e:	7d1b      	ldrb	r3, [r3, #20]
 80121a0:	2b0a      	cmp	r3, #10
 80121a2:	d106      	bne.n	80121b2 <tcp_slowtmr+0x6e>
 80121a4:	4b84      	ldr	r3, [pc, #528]	; (80123b8 <tcp_slowtmr+0x274>)
 80121a6:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80121aa:	4987      	ldr	r1, [pc, #540]	; (80123c8 <tcp_slowtmr+0x284>)
 80121ac:	4884      	ldr	r0, [pc, #528]	; (80123c0 <tcp_slowtmr+0x27c>)
 80121ae:	f008 fa6b 	bl	801a688 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80121b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b4:	7f5a      	ldrb	r2, [r3, #29]
 80121b6:	4b7e      	ldr	r3, [pc, #504]	; (80123b0 <tcp_slowtmr+0x26c>)
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d103      	bne.n	80121c6 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80121be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80121c4:	e1fc      	b.n	80125c0 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80121c6:	4b7a      	ldr	r3, [pc, #488]	; (80123b0 <tcp_slowtmr+0x26c>)
 80121c8:	781a      	ldrb	r2, [r3, #0]
 80121ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121cc:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80121d2:	2300      	movs	r3, #0
 80121d4:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	7d1b      	ldrb	r3, [r3, #20]
 80121da:	2b02      	cmp	r3, #2
 80121dc:	d108      	bne.n	80121f0 <tcp_slowtmr+0xac>
 80121de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80121e4:	2b05      	cmp	r3, #5
 80121e6:	d903      	bls.n	80121f0 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80121e8:	7ffb      	ldrb	r3, [r7, #31]
 80121ea:	3301      	adds	r3, #1
 80121ec:	77fb      	strb	r3, [r7, #31]
 80121ee:	e0a2      	b.n	8012336 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80121f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80121f6:	2b0b      	cmp	r3, #11
 80121f8:	d903      	bls.n	8012202 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80121fa:	7ffb      	ldrb	r3, [r7, #31]
 80121fc:	3301      	adds	r3, #1
 80121fe:	77fb      	strb	r3, [r7, #31]
 8012200:	e099      	b.n	8012336 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012204:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012208:	2b00      	cmp	r3, #0
 801220a:	d032      	beq.n	8012272 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012212:	3b01      	subs	r3, #1
 8012214:	4a6d      	ldr	r2, [pc, #436]	; (80123cc <tcp_slowtmr+0x288>)
 8012216:	5cd3      	ldrb	r3, [r2, r3]
 8012218:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 801221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012220:	7cfa      	ldrb	r2, [r7, #19]
 8012222:	429a      	cmp	r2, r3
 8012224:	d907      	bls.n	8012236 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8012226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012228:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801222c:	3301      	adds	r3, #1
 801222e:	b2da      	uxtb	r2, r3
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8012236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012238:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801223c:	7cfa      	ldrb	r2, [r7, #19]
 801223e:	429a      	cmp	r2, r3
 8012240:	d879      	bhi.n	8012336 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8012242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012244:	f004 fbcf 	bl	80169e6 <tcp_zero_window_probe>
 8012248:	4603      	mov	r3, r0
 801224a:	2b00      	cmp	r3, #0
 801224c:	d173      	bne.n	8012336 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	2200      	movs	r2, #0
 8012252:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012258:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801225c:	2b06      	cmp	r3, #6
 801225e:	d86a      	bhi.n	8012336 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8012260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012262:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012266:	3301      	adds	r3, #1
 8012268:	b2da      	uxtb	r2, r3
 801226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8012270:	e061      	b.n	8012336 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8012272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012274:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012278:	2b00      	cmp	r3, #0
 801227a:	db08      	blt.n	801228e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 801227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012282:	b29b      	uxth	r3, r3
 8012284:	3301      	adds	r3, #1
 8012286:	b29b      	uxth	r3, r3
 8012288:	b21a      	sxth	r2, r3
 801228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801228c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 801228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012292:	2b00      	cmp	r3, #0
 8012294:	d04f      	beq.n	8012336 <tcp_slowtmr+0x1f2>
 8012296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012298:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80122a2:	429a      	cmp	r2, r3
 80122a4:	db47      	blt.n	8012336 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80122a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a8:	7d1b      	ldrb	r3, [r3, #20]
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d018      	beq.n	80122e0 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80122ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122b4:	2b0c      	cmp	r3, #12
 80122b6:	bf28      	it	cs
 80122b8:	230c      	movcs	r3, #12
 80122ba:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80122bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122c2:	10db      	asrs	r3, r3, #3
 80122c4:	b21b      	sxth	r3, r3
 80122c6:	461a      	mov	r2, r3
 80122c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122ce:	4413      	add	r3, r2
 80122d0:	7dfa      	ldrb	r2, [r7, #23]
 80122d2:	493f      	ldr	r1, [pc, #252]	; (80123d0 <tcp_slowtmr+0x28c>)
 80122d4:	5c8a      	ldrb	r2, [r1, r2]
 80122d6:	4093      	lsls	r3, r2
 80122d8:	b21a      	sxth	r2, r3
 80122da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	2200      	movs	r2, #0
 80122e4:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80122e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80122ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122f2:	4293      	cmp	r3, r2
 80122f4:	bf28      	it	cs
 80122f6:	4613      	movcs	r3, r2
 80122f8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80122fa:	8abb      	ldrh	r3, [r7, #20]
 80122fc:	085b      	lsrs	r3, r3, #1
 80122fe:	b29a      	uxth	r2, r3
 8012300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012302:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012308:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012310:	005b      	lsls	r3, r3, #1
 8012312:	b29b      	uxth	r3, r3
 8012314:	429a      	cmp	r2, r3
 8012316:	d206      	bcs.n	8012326 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801231c:	005b      	lsls	r3, r3, #1
 801231e:	b29a      	uxth	r2, r3
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8012326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012328:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8012330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012332:	f004 fa47 	bl	80167c4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012338:	7d1b      	ldrb	r3, [r3, #20]
 801233a:	2b06      	cmp	r3, #6
 801233c:	d10f      	bne.n	801235e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012340:	7e9b      	ldrb	r3, [r3, #26]
 8012342:	f003 0310 	and.w	r3, r3, #16
 8012346:	2b00      	cmp	r3, #0
 8012348:	d009      	beq.n	801235e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801234a:	4b18      	ldr	r3, [pc, #96]	; (80123ac <tcp_slowtmr+0x268>)
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012350:	6a1b      	ldr	r3, [r3, #32]
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	2b28      	cmp	r3, #40	; 0x28
 8012356:	d902      	bls.n	801235e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012358:	7ffb      	ldrb	r3, [r7, #31]
 801235a:	3301      	adds	r3, #1
 801235c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012360:	7a1b      	ldrb	r3, [r3, #8]
 8012362:	f003 0308 	and.w	r3, r3, #8
 8012366:	2b00      	cmp	r3, #0
 8012368:	d05d      	beq.n	8012426 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 801236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801236e:	2b04      	cmp	r3, #4
 8012370:	d003      	beq.n	801237a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8012372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012374:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8012376:	2b07      	cmp	r3, #7
 8012378:	d155      	bne.n	8012426 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801237a:	4b0c      	ldr	r3, [pc, #48]	; (80123ac <tcp_slowtmr+0x268>)
 801237c:	681a      	ldr	r2, [r3, #0]
 801237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012380:	6a1b      	ldr	r3, [r3, #32]
 8012382:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8012384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801238a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801238e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012392:	4910      	ldr	r1, [pc, #64]	; (80123d4 <tcp_slowtmr+0x290>)
 8012394:	fba1 1303 	umull	r1, r3, r1, r3
 8012398:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801239a:	429a      	cmp	r2, r3
 801239c:	d91c      	bls.n	80123d8 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801239e:	7ffb      	ldrb	r3, [r7, #31]
 80123a0:	3301      	adds	r3, #1
 80123a2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80123a4:	7fbb      	ldrb	r3, [r7, #30]
 80123a6:	3301      	adds	r3, #1
 80123a8:	77bb      	strb	r3, [r7, #30]
 80123aa:	e03c      	b.n	8012426 <tcp_slowtmr+0x2e2>
 80123ac:	2000bedc 	.word	0x2000bedc
 80123b0:	200050ee 	.word	0x200050ee
 80123b4:	2000bed8 	.word	0x2000bed8
 80123b8:	0801cd18 	.word	0x0801cd18
 80123bc:	0801cec8 	.word	0x0801cec8
 80123c0:	0801cd54 	.word	0x0801cd54
 80123c4:	0801cef4 	.word	0x0801cef4
 80123c8:	0801cf20 	.word	0x0801cf20
 80123cc:	0801eca4 	.word	0x0801eca4
 80123d0:	0801ec94 	.word	0x0801ec94
 80123d4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80123d8:	4b97      	ldr	r3, [pc, #604]	; (8012638 <tcp_slowtmr+0x4f4>)
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123de:	6a1b      	ldr	r3, [r3, #32]
 80123e0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80123e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80123e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ea:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80123ee:	4618      	mov	r0, r3
 80123f0:	4b92      	ldr	r3, [pc, #584]	; (801263c <tcp_slowtmr+0x4f8>)
 80123f2:	fb00 f303 	mul.w	r3, r0, r3
 80123f6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80123f8:	4991      	ldr	r1, [pc, #580]	; (8012640 <tcp_slowtmr+0x4fc>)
 80123fa:	fba1 1303 	umull	r1, r3, r1, r3
 80123fe:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012400:	429a      	cmp	r2, r3
 8012402:	d910      	bls.n	8012426 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8012404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012406:	f004 fab1 	bl	801696c <tcp_keepalive>
 801240a:	4603      	mov	r3, r0
 801240c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 801240e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d107      	bne.n	8012426 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8012416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012418:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801241c:	3301      	adds	r3, #1
 801241e:	b2da      	uxtb	r2, r3
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801242a:	2b00      	cmp	r3, #0
 801242c:	d016      	beq.n	801245c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 801242e:	4b82      	ldr	r3, [pc, #520]	; (8012638 <tcp_slowtmr+0x4f4>)
 8012430:	681a      	ldr	r2, [r3, #0]
 8012432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012434:	6a1b      	ldr	r3, [r3, #32]
 8012436:	1ad2      	subs	r2, r2, r3
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801243e:	4619      	mov	r1, r3
 8012440:	460b      	mov	r3, r1
 8012442:	005b      	lsls	r3, r3, #1
 8012444:	440b      	add	r3, r1
 8012446:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012448:	429a      	cmp	r2, r3
 801244a:	d307      	bcc.n	801245c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 801244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012450:	4618      	mov	r0, r3
 8012452:	f000 fa06 	bl	8012862 <tcp_segs_free>
      pcb->ooseq = NULL;
 8012456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012458:	2200      	movs	r2, #0
 801245a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245e:	7d1b      	ldrb	r3, [r3, #20]
 8012460:	2b03      	cmp	r3, #3
 8012462:	d109      	bne.n	8012478 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012464:	4b74      	ldr	r3, [pc, #464]	; (8012638 <tcp_slowtmr+0x4f4>)
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	6a1b      	ldr	r3, [r3, #32]
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	2b28      	cmp	r3, #40	; 0x28
 8012470:	d902      	bls.n	8012478 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012472:	7ffb      	ldrb	r3, [r7, #31]
 8012474:	3301      	adds	r3, #1
 8012476:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247a:	7d1b      	ldrb	r3, [r3, #20]
 801247c:	2b09      	cmp	r3, #9
 801247e:	d109      	bne.n	8012494 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012480:	4b6d      	ldr	r3, [pc, #436]	; (8012638 <tcp_slowtmr+0x4f4>)
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012486:	6a1b      	ldr	r3, [r3, #32]
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	2bf0      	cmp	r3, #240	; 0xf0
 801248c:	d902      	bls.n	8012494 <tcp_slowtmr+0x350>
        ++pcb_remove;
 801248e:	7ffb      	ldrb	r3, [r7, #31]
 8012490:	3301      	adds	r3, #1
 8012492:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012494:	7ffb      	ldrb	r3, [r7, #31]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d05d      	beq.n	8012556 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124a0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80124a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124a4:	f000 fc58 	bl	8012d58 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80124a8:	6a3b      	ldr	r3, [r7, #32]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d010      	beq.n	80124d0 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80124ae:	4b65      	ldr	r3, [pc, #404]	; (8012644 <tcp_slowtmr+0x500>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d106      	bne.n	80124c6 <tcp_slowtmr+0x382>
 80124b8:	4b63      	ldr	r3, [pc, #396]	; (8012648 <tcp_slowtmr+0x504>)
 80124ba:	f240 4289 	movw	r2, #1161	; 0x489
 80124be:	4963      	ldr	r1, [pc, #396]	; (801264c <tcp_slowtmr+0x508>)
 80124c0:	4863      	ldr	r0, [pc, #396]	; (8012650 <tcp_slowtmr+0x50c>)
 80124c2:	f008 f8e1 	bl	801a688 <iprintf>
        prev->next = pcb->next;
 80124c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c8:	68da      	ldr	r2, [r3, #12]
 80124ca:	6a3b      	ldr	r3, [r7, #32]
 80124cc:	60da      	str	r2, [r3, #12]
 80124ce:	e00f      	b.n	80124f0 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80124d0:	4b5c      	ldr	r3, [pc, #368]	; (8012644 <tcp_slowtmr+0x500>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d006      	beq.n	80124e8 <tcp_slowtmr+0x3a4>
 80124da:	4b5b      	ldr	r3, [pc, #364]	; (8012648 <tcp_slowtmr+0x504>)
 80124dc:	f240 428d 	movw	r2, #1165	; 0x48d
 80124e0:	495c      	ldr	r1, [pc, #368]	; (8012654 <tcp_slowtmr+0x510>)
 80124e2:	485b      	ldr	r0, [pc, #364]	; (8012650 <tcp_slowtmr+0x50c>)
 80124e4:	f008 f8d0 	bl	801a688 <iprintf>
        tcp_active_pcbs = pcb->next;
 80124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	4a55      	ldr	r2, [pc, #340]	; (8012644 <tcp_slowtmr+0x500>)
 80124ee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80124f0:	7fbb      	ldrb	r3, [r7, #30]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d010      	beq.n	8012518 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80124f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80124fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80124fe:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8012500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012502:	1d1d      	adds	r5, r3, #4
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	8adb      	ldrh	r3, [r3, #22]
 8012508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801250a:	8b12      	ldrh	r2, [r2, #24]
 801250c:	9201      	str	r2, [sp, #4]
 801250e:	9300      	str	r3, [sp, #0]
 8012510:	462b      	mov	r3, r5
 8012512:	4622      	mov	r2, r4
 8012514:	f004 f8e0 	bl	80166d8 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251a:	691b      	ldr	r3, [r3, #16]
 801251c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012520:	7d1b      	ldrb	r3, [r3, #20]
 8012522:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012526:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801252e:	6839      	ldr	r1, [r7, #0]
 8012530:	2001      	movs	r0, #1
 8012532:	f7fd ffb1 	bl	8010498 <memp_free>

      tcp_active_pcbs_changed = 0;
 8012536:	4b48      	ldr	r3, [pc, #288]	; (8012658 <tcp_slowtmr+0x514>)
 8012538:	2200      	movs	r2, #0
 801253a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d004      	beq.n	801254c <tcp_slowtmr+0x408>
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f06f 010c 	mvn.w	r1, #12
 8012548:	68b8      	ldr	r0, [r7, #8]
 801254a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801254c:	4b42      	ldr	r3, [pc, #264]	; (8012658 <tcp_slowtmr+0x514>)
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d035      	beq.n	80125c0 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8012554:	e606      	b.n	8012164 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012558:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	68db      	ldr	r3, [r3, #12]
 801255e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012560:	6a3b      	ldr	r3, [r7, #32]
 8012562:	7edb      	ldrb	r3, [r3, #27]
 8012564:	3301      	adds	r3, #1
 8012566:	b2da      	uxtb	r2, r3
 8012568:	6a3b      	ldr	r3, [r7, #32]
 801256a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 801256c:	6a3b      	ldr	r3, [r7, #32]
 801256e:	7eda      	ldrb	r2, [r3, #27]
 8012570:	6a3b      	ldr	r3, [r7, #32]
 8012572:	7f1b      	ldrb	r3, [r3, #28]
 8012574:	429a      	cmp	r2, r3
 8012576:	d323      	bcc.n	80125c0 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8012578:	6a3b      	ldr	r3, [r7, #32]
 801257a:	2200      	movs	r2, #0
 801257c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801257e:	4b36      	ldr	r3, [pc, #216]	; (8012658 <tcp_slowtmr+0x514>)
 8012580:	2200      	movs	r2, #0
 8012582:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012584:	6a3b      	ldr	r3, [r7, #32]
 8012586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801258a:	2b00      	cmp	r3, #0
 801258c:	d00a      	beq.n	80125a4 <tcp_slowtmr+0x460>
 801258e:	6a3b      	ldr	r3, [r7, #32]
 8012590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012594:	6a3a      	ldr	r2, [r7, #32]
 8012596:	6912      	ldr	r2, [r2, #16]
 8012598:	6a39      	ldr	r1, [r7, #32]
 801259a:	4610      	mov	r0, r2
 801259c:	4798      	blx	r3
 801259e:	4603      	mov	r3, r0
 80125a0:	777b      	strb	r3, [r7, #29]
 80125a2:	e001      	b.n	80125a8 <tcp_slowtmr+0x464>
 80125a4:	2300      	movs	r3, #0
 80125a6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 80125a8:	4b2b      	ldr	r3, [pc, #172]	; (8012658 <tcp_slowtmr+0x514>)
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d000      	beq.n	80125b2 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 80125b0:	e5d8      	b.n	8012164 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80125b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d102      	bne.n	80125c0 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80125ba:	6a38      	ldr	r0, [r7, #32]
 80125bc:	f003 fe08 	bl	80161d0 <tcp_output>
  while (pcb != NULL) {
 80125c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f47f add4 	bne.w	8012170 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80125c8:	2300      	movs	r3, #0
 80125ca:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80125cc:	4b23      	ldr	r3, [pc, #140]	; (801265c <tcp_slowtmr+0x518>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80125d2:	e068      	b.n	80126a6 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80125d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d6:	7d1b      	ldrb	r3, [r3, #20]
 80125d8:	2b0a      	cmp	r3, #10
 80125da:	d006      	beq.n	80125ea <tcp_slowtmr+0x4a6>
 80125dc:	4b1a      	ldr	r3, [pc, #104]	; (8012648 <tcp_slowtmr+0x504>)
 80125de:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80125e2:	491f      	ldr	r1, [pc, #124]	; (8012660 <tcp_slowtmr+0x51c>)
 80125e4:	481a      	ldr	r0, [pc, #104]	; (8012650 <tcp_slowtmr+0x50c>)
 80125e6:	f008 f84f 	bl	801a688 <iprintf>
    pcb_remove = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80125ee:	4b12      	ldr	r3, [pc, #72]	; (8012638 <tcp_slowtmr+0x4f4>)
 80125f0:	681a      	ldr	r2, [r3, #0]
 80125f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f4:	6a1b      	ldr	r3, [r3, #32]
 80125f6:	1ad3      	subs	r3, r2, r3
 80125f8:	2bf0      	cmp	r3, #240	; 0xf0
 80125fa:	d902      	bls.n	8012602 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80125fc:	7ffb      	ldrb	r3, [r7, #31]
 80125fe:	3301      	adds	r3, #1
 8012600:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012602:	7ffb      	ldrb	r3, [r7, #31]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d049      	beq.n	801269c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801260a:	f000 fba5 	bl	8012d58 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801260e:	6a3b      	ldr	r3, [r7, #32]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d029      	beq.n	8012668 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012614:	4b11      	ldr	r3, [pc, #68]	; (801265c <tcp_slowtmr+0x518>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801261a:	429a      	cmp	r2, r3
 801261c:	d106      	bne.n	801262c <tcp_slowtmr+0x4e8>
 801261e:	4b0a      	ldr	r3, [pc, #40]	; (8012648 <tcp_slowtmr+0x504>)
 8012620:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8012624:	490f      	ldr	r1, [pc, #60]	; (8012664 <tcp_slowtmr+0x520>)
 8012626:	480a      	ldr	r0, [pc, #40]	; (8012650 <tcp_slowtmr+0x50c>)
 8012628:	f008 f82e 	bl	801a688 <iprintf>
        prev->next = pcb->next;
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	68da      	ldr	r2, [r3, #12]
 8012630:	6a3b      	ldr	r3, [r7, #32]
 8012632:	60da      	str	r2, [r3, #12]
 8012634:	e028      	b.n	8012688 <tcp_slowtmr+0x544>
 8012636:	bf00      	nop
 8012638:	2000bedc 	.word	0x2000bedc
 801263c:	000124f8 	.word	0x000124f8
 8012640:	10624dd3 	.word	0x10624dd3
 8012644:	2000bed8 	.word	0x2000bed8
 8012648:	0801cd18 	.word	0x0801cd18
 801264c:	0801cf50 	.word	0x0801cf50
 8012650:	0801cd54 	.word	0x0801cd54
 8012654:	0801cf7c 	.word	0x0801cf7c
 8012658:	2000bed4 	.word	0x2000bed4
 801265c:	2000bee8 	.word	0x2000bee8
 8012660:	0801cfa8 	.word	0x0801cfa8
 8012664:	0801cfd8 	.word	0x0801cfd8
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012668:	4b13      	ldr	r3, [pc, #76]	; (80126b8 <tcp_slowtmr+0x574>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801266e:	429a      	cmp	r2, r3
 8012670:	d006      	beq.n	8012680 <tcp_slowtmr+0x53c>
 8012672:	4b12      	ldr	r3, [pc, #72]	; (80126bc <tcp_slowtmr+0x578>)
 8012674:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8012678:	4911      	ldr	r1, [pc, #68]	; (80126c0 <tcp_slowtmr+0x57c>)
 801267a:	4812      	ldr	r0, [pc, #72]	; (80126c4 <tcp_slowtmr+0x580>)
 801267c:	f008 f804 	bl	801a688 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	4a0c      	ldr	r2, [pc, #48]	; (80126b8 <tcp_slowtmr+0x574>)
 8012686:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 801268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8012692:	69b9      	ldr	r1, [r7, #24]
 8012694:	2001      	movs	r0, #1
 8012696:	f7fd feff 	bl	8010498 <memp_free>
 801269a:	e004      	b.n	80126a6 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 801269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80126a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80126a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d193      	bne.n	80125d4 <tcp_slowtmr+0x490>
    }
  }
}
 80126ac:	bf00      	nop
 80126ae:	bf00      	nop
 80126b0:	3728      	adds	r7, #40	; 0x28
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bdb0      	pop	{r4, r5, r7, pc}
 80126b6:	bf00      	nop
 80126b8:	2000bee8 	.word	0x2000bee8
 80126bc:	0801cd18 	.word	0x0801cd18
 80126c0:	0801d000 	.word	0x0801d000
 80126c4:	0801cd54 	.word	0x0801cd54

080126c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80126ce:	4b2d      	ldr	r3, [pc, #180]	; (8012784 <tcp_fasttmr+0xbc>)
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	3301      	adds	r3, #1
 80126d4:	b2da      	uxtb	r2, r3
 80126d6:	4b2b      	ldr	r3, [pc, #172]	; (8012784 <tcp_fasttmr+0xbc>)
 80126d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80126da:	4b2b      	ldr	r3, [pc, #172]	; (8012788 <tcp_fasttmr+0xc0>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80126e0:	e048      	b.n	8012774 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	7f5a      	ldrb	r2, [r3, #29]
 80126e6:	4b27      	ldr	r3, [pc, #156]	; (8012784 <tcp_fasttmr+0xbc>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d03f      	beq.n	801276e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80126ee:	4b25      	ldr	r3, [pc, #148]	; (8012784 <tcp_fasttmr+0xbc>)
 80126f0:	781a      	ldrb	r2, [r3, #0]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	7e9b      	ldrb	r3, [r3, #26]
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d010      	beq.n	8012724 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	7e9b      	ldrb	r3, [r3, #26]
 8012706:	f043 0302 	orr.w	r3, r3, #2
 801270a:	b2da      	uxtb	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f003 fd5d 	bl	80161d0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	7e9b      	ldrb	r3, [r3, #26]
 801271a:	f023 0303 	bic.w	r3, r3, #3
 801271e:	b2da      	uxtb	r2, r3
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	7e9b      	ldrb	r3, [r3, #26]
 8012728:	f003 0308 	and.w	r3, r3, #8
 801272c:	2b00      	cmp	r3, #0
 801272e:	d009      	beq.n	8012744 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	7e9b      	ldrb	r3, [r3, #26]
 8012734:	f023 0308 	bic.w	r3, r3, #8
 8012738:	b2da      	uxtb	r2, r3
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7ff f894 	bl	801186c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801274e:	2b00      	cmp	r3, #0
 8012750:	d00a      	beq.n	8012768 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012752:	4b0e      	ldr	r3, [pc, #56]	; (801278c <tcp_fasttmr+0xc4>)
 8012754:	2200      	movs	r2, #0
 8012756:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 f819 	bl	8012790 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801275e:	4b0b      	ldr	r3, [pc, #44]	; (801278c <tcp_fasttmr+0xc4>)
 8012760:	781b      	ldrb	r3, [r3, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d000      	beq.n	8012768 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012766:	e7b8      	b.n	80126da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	607b      	str	r3, [r7, #4]
 801276c:	e002      	b.n	8012774 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d1b3      	bne.n	80126e2 <tcp_fasttmr+0x1a>
    }
  }
}
 801277a:	bf00      	nop
 801277c:	bf00      	nop
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}
 8012784:	200050ee 	.word	0x200050ee
 8012788:	2000bed8 	.word	0x2000bed8
 801278c:	2000bed4 	.word	0x2000bed4

08012790 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012790:	b590      	push	{r4, r7, lr}
 8012792:	b085      	sub	sp, #20
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801279c:	7b5b      	ldrb	r3, [r3, #13]
 801279e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127a4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2200      	movs	r2, #0
 80127aa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00b      	beq.n	80127ce <tcp_process_refused_data+0x3e>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6918      	ldr	r0, [r3, #16]
 80127c0:	2300      	movs	r3, #0
 80127c2:	68ba      	ldr	r2, [r7, #8]
 80127c4:	6879      	ldr	r1, [r7, #4]
 80127c6:	47a0      	blx	r4
 80127c8:	4603      	mov	r3, r0
 80127ca:	73fb      	strb	r3, [r7, #15]
 80127cc:	e007      	b.n	80127de <tcp_process_refused_data+0x4e>
 80127ce:	2300      	movs	r3, #0
 80127d0:	68ba      	ldr	r2, [r7, #8]
 80127d2:	6879      	ldr	r1, [r7, #4]
 80127d4:	2000      	movs	r0, #0
 80127d6:	f000 f89b 	bl	8012910 <tcp_recv_null>
 80127da:	4603      	mov	r3, r0
 80127dc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80127de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d12a      	bne.n	801283c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80127e6:	7bbb      	ldrb	r3, [r7, #14]
 80127e8:	f003 0320 	and.w	r3, r3, #32
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d033      	beq.n	8012858 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80127f8:	d005      	beq.n	8012806 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127fe:	3301      	adds	r3, #1
 8012800:	b29a      	uxth	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801280c:	2b00      	cmp	r3, #0
 801280e:	d00b      	beq.n	8012828 <tcp_process_refused_data+0x98>
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6918      	ldr	r0, [r3, #16]
 801281a:	2300      	movs	r3, #0
 801281c:	2200      	movs	r2, #0
 801281e:	6879      	ldr	r1, [r7, #4]
 8012820:	47a0      	blx	r4
 8012822:	4603      	mov	r3, r0
 8012824:	73fb      	strb	r3, [r7, #15]
 8012826:	e001      	b.n	801282c <tcp_process_refused_data+0x9c>
 8012828:	2300      	movs	r3, #0
 801282a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801282c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012830:	f113 0f0d 	cmn.w	r3, #13
 8012834:	d110      	bne.n	8012858 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8012836:	f06f 030c 	mvn.w	r3, #12
 801283a:	e00e      	b.n	801285a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801283c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012840:	f113 0f0d 	cmn.w	r3, #13
 8012844:	d102      	bne.n	801284c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012846:	f06f 030c 	mvn.w	r3, #12
 801284a:	e006      	b.n	801285a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	68ba      	ldr	r2, [r7, #8]
 8012850:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8012852:	f06f 0304 	mvn.w	r3, #4
 8012856:	e000      	b.n	801285a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8012858:	2300      	movs	r3, #0
}
 801285a:	4618      	mov	r0, r3
 801285c:	3714      	adds	r7, #20
 801285e:	46bd      	mov	sp, r7
 8012860:	bd90      	pop	{r4, r7, pc}

08012862 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012862:	b580      	push	{r7, lr}
 8012864:	b084      	sub	sp, #16
 8012866:	af00      	add	r7, sp, #0
 8012868:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801286a:	e007      	b.n	801287c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f000 f80a 	bl	801288c <tcp_seg_free>
    seg = next;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d1f4      	bne.n	801286c <tcp_segs_free+0xa>
  }
}
 8012882:	bf00      	nop
 8012884:	bf00      	nop
 8012886:	3710      	adds	r7, #16
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00c      	beq.n	80128b4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	685b      	ldr	r3, [r3, #4]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d004      	beq.n	80128ac <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fbb0 	bl	801100c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80128ac:	6879      	ldr	r1, [r7, #4]
 80128ae:	2003      	movs	r0, #3
 80128b0:	f7fd fdf2 	bl	8010498 <memp_free>
  }
}
 80128b4:	bf00      	nop
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}

080128bc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80128bc:	b480      	push	{r7}
 80128be:	b083      	sub	sp, #12
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	78fa      	ldrb	r2, [r7, #3]
 80128cc:	755a      	strb	r2, [r3, #21]
}
 80128ce:	bf00      	nop
 80128d0:	370c      	adds	r7, #12
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bc80      	pop	{r7}
 80128d6:	4770      	bx	lr

080128d8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b084      	sub	sp, #16
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80128e0:	2003      	movs	r0, #3
 80128e2:	f7fd fd87 	bl	80103f4 <memp_malloc>
 80128e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d101      	bne.n	80128f2 <tcp_seg_copy+0x1a>
    return NULL;
 80128ee:	2300      	movs	r3, #0
 80128f0:	e00a      	b.n	8012908 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80128f2:	2210      	movs	r2, #16
 80128f4:	6879      	ldr	r1, [r7, #4]
 80128f6:	68f8      	ldr	r0, [r7, #12]
 80128f8:	f007 fdd4 	bl	801a4a4 <memcpy>
  pbuf_ref(cseg->p);
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	685b      	ldr	r3, [r3, #4]
 8012900:	4618      	mov	r0, r3
 8012902:	f7fe fc33 	bl	801116c <pbuf_ref>
  return cseg;
 8012906:	68fb      	ldr	r3, [r7, #12]
}
 8012908:	4618      	mov	r0, r3
 801290a:	3710      	adds	r7, #16
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
 801291c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d009      	beq.n	8012938 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	891b      	ldrh	r3, [r3, #8]
 8012928:	4619      	mov	r1, r3
 801292a:	68b8      	ldr	r0, [r7, #8]
 801292c:	f7ff fa78 	bl	8011e20 <tcp_recved>
    pbuf_free(p);
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f7fe fb6b 	bl	801100c <pbuf_free>
 8012936:	e008      	b.n	801294a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8012938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d104      	bne.n	801294a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8012940:	68b8      	ldr	r0, [r7, #8]
 8012942:	f7fe fffd 	bl	8011940 <tcp_close>
 8012946:	4603      	mov	r3, r0
 8012948:	e000      	b.n	801294c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801294a:	2300      	movs	r3, #0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b086      	sub	sp, #24
 8012958:	af00      	add	r7, sp, #0
 801295a:	4603      	mov	r3, r0
 801295c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012962:	2b00      	cmp	r3, #0
 8012964:	db01      	blt.n	801296a <tcp_kill_prio+0x16>
 8012966:	79fb      	ldrb	r3, [r7, #7]
 8012968:	e000      	b.n	801296c <tcp_kill_prio+0x18>
 801296a:	237f      	movs	r3, #127	; 0x7f
 801296c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 801296e:	2300      	movs	r3, #0
 8012970:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012972:	2300      	movs	r3, #0
 8012974:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012976:	4b16      	ldr	r3, [pc, #88]	; (80129d0 <tcp_kill_prio+0x7c>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	617b      	str	r3, [r7, #20]
 801297c:	e01a      	b.n	80129b4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	7d5b      	ldrb	r3, [r3, #21]
 8012982:	7afa      	ldrb	r2, [r7, #11]
 8012984:	429a      	cmp	r2, r3
 8012986:	d312      	bcc.n	80129ae <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012988:	4b12      	ldr	r3, [pc, #72]	; (80129d4 <tcp_kill_prio+0x80>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	6a1b      	ldr	r3, [r3, #32]
 8012990:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8012992:	68fa      	ldr	r2, [r7, #12]
 8012994:	429a      	cmp	r2, r3
 8012996:	d80a      	bhi.n	80129ae <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8012998:	4b0e      	ldr	r3, [pc, #56]	; (80129d4 <tcp_kill_prio+0x80>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	6a1b      	ldr	r3, [r3, #32]
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	7d5b      	ldrb	r3, [r3, #21]
 80129ac:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	617b      	str	r3, [r7, #20]
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d1e1      	bne.n	801297e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d002      	beq.n	80129c6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80129c0:	6938      	ldr	r0, [r7, #16]
 80129c2:	f7ff f887 	bl	8011ad4 <tcp_abort>
  }
}
 80129c6:	bf00      	nop
 80129c8:	3718      	adds	r7, #24
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	2000bed8 	.word	0x2000bed8
 80129d4:	2000bedc 	.word	0x2000bedc

080129d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	4603      	mov	r3, r0
 80129e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80129e2:	79fb      	ldrb	r3, [r7, #7]
 80129e4:	2b08      	cmp	r3, #8
 80129e6:	d009      	beq.n	80129fc <tcp_kill_state+0x24>
 80129e8:	79fb      	ldrb	r3, [r7, #7]
 80129ea:	2b09      	cmp	r3, #9
 80129ec:	d006      	beq.n	80129fc <tcp_kill_state+0x24>
 80129ee:	4b1a      	ldr	r3, [pc, #104]	; (8012a58 <tcp_kill_state+0x80>)
 80129f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80129f4:	4919      	ldr	r1, [pc, #100]	; (8012a5c <tcp_kill_state+0x84>)
 80129f6:	481a      	ldr	r0, [pc, #104]	; (8012a60 <tcp_kill_state+0x88>)
 80129f8:	f007 fe46 	bl	801a688 <iprintf>

  inactivity = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012a00:	2300      	movs	r3, #0
 8012a02:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a04:	4b17      	ldr	r3, [pc, #92]	; (8012a64 <tcp_kill_state+0x8c>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	617b      	str	r3, [r7, #20]
 8012a0a:	e017      	b.n	8012a3c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	7d1b      	ldrb	r3, [r3, #20]
 8012a10:	79fa      	ldrb	r2, [r7, #7]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d10f      	bne.n	8012a36 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012a16:	4b14      	ldr	r3, [pc, #80]	; (8012a68 <tcp_kill_state+0x90>)
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	6a1b      	ldr	r3, [r3, #32]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	68fa      	ldr	r2, [r7, #12]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d807      	bhi.n	8012a36 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012a26:	4b10      	ldr	r3, [pc, #64]	; (8012a68 <tcp_kill_state+0x90>)
 8012a28:	681a      	ldr	r2, [r3, #0]
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	6a1b      	ldr	r3, [r3, #32]
 8012a2e:	1ad3      	subs	r3, r2, r3
 8012a30:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	617b      	str	r3, [r7, #20]
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d1e4      	bne.n	8012a0c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d003      	beq.n	8012a50 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012a48:	2100      	movs	r1, #0
 8012a4a:	6938      	ldr	r0, [r7, #16]
 8012a4c:	f7fe ff90 	bl	8011970 <tcp_abandon>
  }
}
 8012a50:	bf00      	nop
 8012a52:	3718      	adds	r7, #24
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	0801cd18 	.word	0x0801cd18
 8012a5c:	0801d028 	.word	0x0801d028
 8012a60:	0801cd54 	.word	0x0801cd54
 8012a64:	2000bed8 	.word	0x2000bed8
 8012a68:	2000bedc 	.word	0x2000bedc

08012a6c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b084      	sub	sp, #16
 8012a70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012a72:	2300      	movs	r3, #0
 8012a74:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012a76:	2300      	movs	r3, #0
 8012a78:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a7a:	4b12      	ldr	r3, [pc, #72]	; (8012ac4 <tcp_kill_timewait+0x58>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	60fb      	str	r3, [r7, #12]
 8012a80:	e012      	b.n	8012aa8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012a82:	4b11      	ldr	r3, [pc, #68]	; (8012ac8 <tcp_kill_timewait+0x5c>)
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	6a1b      	ldr	r3, [r3, #32]
 8012a8a:	1ad3      	subs	r3, r2, r3
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d807      	bhi.n	8012aa2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012a92:	4b0d      	ldr	r3, [pc, #52]	; (8012ac8 <tcp_kill_timewait+0x5c>)
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6a1b      	ldr	r3, [r3, #32]
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	60fb      	str	r3, [r7, #12]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d1e9      	bne.n	8012a82 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d002      	beq.n	8012aba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012ab4:	68b8      	ldr	r0, [r7, #8]
 8012ab6:	f7ff f80d 	bl	8011ad4 <tcp_abort>
  }
}
 8012aba:	bf00      	nop
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	2000bee8 	.word	0x2000bee8
 8012ac8:	2000bedc 	.word	0x2000bedc

08012acc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ad6:	2001      	movs	r0, #1
 8012ad8:	f7fd fc8c 	bl	80103f4 <memp_malloc>
 8012adc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d124      	bne.n	8012b2e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012ae4:	f7ff ffc2 	bl	8012a6c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ae8:	2001      	movs	r0, #1
 8012aea:	f7fd fc83 	bl	80103f4 <memp_malloc>
 8012aee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d11b      	bne.n	8012b2e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012af6:	2009      	movs	r0, #9
 8012af8:	f7ff ff6e 	bl	80129d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012afc:	2001      	movs	r0, #1
 8012afe:	f7fd fc79 	bl	80103f4 <memp_malloc>
 8012b02:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d111      	bne.n	8012b2e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012b0a:	2008      	movs	r0, #8
 8012b0c:	f7ff ff64 	bl	80129d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012b10:	2001      	movs	r0, #1
 8012b12:	f7fd fc6f 	bl	80103f4 <memp_malloc>
 8012b16:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d107      	bne.n	8012b2e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012b1e:	79fb      	ldrb	r3, [r7, #7]
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7ff ff17 	bl	8012954 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012b26:	2001      	movs	r0, #1
 8012b28:	f7fd fc64 	bl	80103f4 <memp_malloc>
 8012b2c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d03f      	beq.n	8012bb4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012b34:	2298      	movs	r2, #152	; 0x98
 8012b36:	2100      	movs	r1, #0
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	f007 fcc1 	bl	801a4c0 <memset>
    pcb->prio = prio;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	79fa      	ldrb	r2, [r7, #7]
 8012b42:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012b4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012b54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	22ff      	movs	r2, #255	; 0xff
 8012b62:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012b6a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2206      	movs	r2, #6
 8012b70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2206      	movs	r2, #6
 8012b78:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b80:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	2201      	movs	r2, #1
 8012b86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012b8a:	4b0d      	ldr	r3, [pc, #52]	; (8012bc0 <tcp_alloc+0xf4>)
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012b92:	4b0c      	ldr	r3, [pc, #48]	; (8012bc4 <tcp_alloc+0xf8>)
 8012b94:	781a      	ldrb	r2, [r3, #0]
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012ba0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	4a08      	ldr	r2, [pc, #32]	; (8012bc8 <tcp_alloc+0xfc>)
 8012ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	4a07      	ldr	r2, [pc, #28]	; (8012bcc <tcp_alloc+0x100>)
 8012bb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3710      	adds	r7, #16
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	2000bedc 	.word	0x2000bedc
 8012bc4:	200050ee 	.word	0x200050ee
 8012bc8:	08012911 	.word	0x08012911
 8012bcc:	006ddd00 	.word	0x006ddd00

08012bd0 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8012bd4:	2040      	movs	r0, #64	; 0x40
 8012bd6:	f7ff ff79 	bl	8012acc <tcp_alloc>
 8012bda:	4603      	mov	r3, r0
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	4603      	mov	r3, r0
 8012be8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012bea:	2040      	movs	r0, #64	; 0x40
 8012bec:	f7ff ff6e 	bl	8012acc <tcp_alloc>
 8012bf0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3710      	adds	r7, #16
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}

08012bfc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
 8012c04:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d002      	beq.n	8012c12 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	683a      	ldr	r2, [r7, #0]
 8012c10:	611a      	str	r2, [r3, #16]
  }
}
 8012c12:	bf00      	nop
 8012c14:	370c      	adds	r7, #12
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bc80      	pop	{r7}
 8012c1a:	4770      	bx	lr

08012c1c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b082      	sub	sp, #8
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
 8012c24:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d00e      	beq.n	8012c4a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	7d1b      	ldrb	r3, [r3, #20]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d106      	bne.n	8012c42 <tcp_recv+0x26>
 8012c34:	4b07      	ldr	r3, [pc, #28]	; (8012c54 <tcp_recv+0x38>)
 8012c36:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8012c3a:	4907      	ldr	r1, [pc, #28]	; (8012c58 <tcp_recv+0x3c>)
 8012c3c:	4807      	ldr	r0, [pc, #28]	; (8012c5c <tcp_recv+0x40>)
 8012c3e:	f007 fd23 	bl	801a688 <iprintf>
    pcb->recv = recv;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	683a      	ldr	r2, [r7, #0]
 8012c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012c4a:	bf00      	nop
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
 8012c52:	bf00      	nop
 8012c54:	0801cd18 	.word	0x0801cd18
 8012c58:	0801d038 	.word	0x0801d038
 8012c5c:	0801cd54 	.word	0x0801cd54

08012c60 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00d      	beq.n	8012c8c <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	7d1b      	ldrb	r3, [r3, #20]
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d106      	bne.n	8012c86 <tcp_sent+0x26>
 8012c78:	4b06      	ldr	r3, [pc, #24]	; (8012c94 <tcp_sent+0x34>)
 8012c7a:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8012c7e:	4906      	ldr	r1, [pc, #24]	; (8012c98 <tcp_sent+0x38>)
 8012c80:	4806      	ldr	r0, [pc, #24]	; (8012c9c <tcp_sent+0x3c>)
 8012c82:	f007 fd01 	bl	801a688 <iprintf>
    pcb->sent = sent;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	683a      	ldr	r2, [r7, #0]
 8012c8a:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8012c8c:	bf00      	nop
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	0801cd18 	.word	0x0801cd18
 8012c98:	0801d060 	.word	0x0801d060
 8012c9c:	0801cd54 	.word	0x0801cd54

08012ca0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b082      	sub	sp, #8
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
 8012ca8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00e      	beq.n	8012cce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	7d1b      	ldrb	r3, [r3, #20]
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d106      	bne.n	8012cc6 <tcp_err+0x26>
 8012cb8:	4b07      	ldr	r3, [pc, #28]	; (8012cd8 <tcp_err+0x38>)
 8012cba:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8012cbe:	4907      	ldr	r1, [pc, #28]	; (8012cdc <tcp_err+0x3c>)
 8012cc0:	4807      	ldr	r0, [pc, #28]	; (8012ce0 <tcp_err+0x40>)
 8012cc2:	f007 fce1 	bl	801a688 <iprintf>
    pcb->errf = err;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	683a      	ldr	r2, [r7, #0]
 8012cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8012cce:	bf00      	nop
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	0801cd18 	.word	0x0801cd18
 8012cdc:	0801d088 	.word	0x0801d088
 8012ce0:	0801cd54 	.word	0x0801cd54

08012ce4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012ce4:	b480      	push	{r7}
 8012ce6:	b085      	sub	sp, #20
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d008      	beq.n	8012d06 <tcp_accept+0x22>
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	7d1b      	ldrb	r3, [r3, #20]
 8012cf8:	2b01      	cmp	r3, #1
 8012cfa:	d104      	bne.n	8012d06 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	683a      	ldr	r2, [r7, #0]
 8012d04:	619a      	str	r2, [r3, #24]
  }
}
 8012d06:	bf00      	nop
 8012d08:	3714      	adds	r7, #20
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bc80      	pop	{r7}
 8012d0e:	4770      	bx	lr

08012d10 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	60f8      	str	r0, [r7, #12]
 8012d18:	60b9      	str	r1, [r7, #8]
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	7d1b      	ldrb	r3, [r3, #20]
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d106      	bne.n	8012d34 <tcp_poll+0x24>
 8012d26:	4b09      	ldr	r3, [pc, #36]	; (8012d4c <tcp_poll+0x3c>)
 8012d28:	f240 7203 	movw	r2, #1795	; 0x703
 8012d2c:	4908      	ldr	r1, [pc, #32]	; (8012d50 <tcp_poll+0x40>)
 8012d2e:	4809      	ldr	r0, [pc, #36]	; (8012d54 <tcp_poll+0x44>)
 8012d30:	f007 fcaa 	bl	801a688 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	68ba      	ldr	r2, [r7, #8]
 8012d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	79fa      	ldrb	r2, [r7, #7]
 8012d40:	771a      	strb	r2, [r3, #28]
}
 8012d42:	bf00      	nop
 8012d44:	3710      	adds	r7, #16
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	0801cd18 	.word	0x0801cd18
 8012d50:	0801d0b0 	.word	0x0801d0b0
 8012d54:	0801cd54 	.word	0x0801cd54

08012d58 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	7d1b      	ldrb	r3, [r3, #20]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d034      	beq.n	8012dd2 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012d6c:	2b0a      	cmp	r3, #10
 8012d6e:	d030      	beq.n	8012dd2 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d02c      	beq.n	8012dd2 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d007      	beq.n	8012d90 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7fe f941 	bl	801100c <pbuf_free>
      pcb->refused_data = NULL;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7ff fd64 	bl	8012862 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012da6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7ff fd58 	bl	8012862 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7ff fd53 	bl	8012862 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	669a      	str	r2, [r3, #104]	; 0x68
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8012dd2:	bf00      	nop
 8012dd4:	3708      	adds	r7, #8
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
	...

08012ddc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	683a      	ldr	r2, [r7, #0]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d105      	bne.n	8012dfc <tcp_pcb_remove+0x20>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	68da      	ldr	r2, [r3, #12]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	e013      	b.n	8012e24 <tcp_pcb_remove+0x48>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	60fb      	str	r3, [r7, #12]
 8012e02:	e00c      	b.n	8012e1e <tcp_pcb_remove+0x42>
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	683a      	ldr	r2, [r7, #0]
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	d104      	bne.n	8012e18 <tcp_pcb_remove+0x3c>
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	68da      	ldr	r2, [r3, #12]
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	60da      	str	r2, [r3, #12]
 8012e16:	e005      	b.n	8012e24 <tcp_pcb_remove+0x48>
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	60fb      	str	r3, [r7, #12]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d1ef      	bne.n	8012e04 <tcp_pcb_remove+0x28>
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	2200      	movs	r2, #0
 8012e28:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012e2a:	6838      	ldr	r0, [r7, #0]
 8012e2c:	f7ff ff94 	bl	8012d58 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	7d1b      	ldrb	r3, [r3, #20]
 8012e34:	2b0a      	cmp	r3, #10
 8012e36:	d013      	beq.n	8012e60 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	d00f      	beq.n	8012e60 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	7e9b      	ldrb	r3, [r3, #26]
 8012e44:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d009      	beq.n	8012e60 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	7e9b      	ldrb	r3, [r3, #26]
 8012e50:	f043 0302 	orr.w	r3, r3, #2
 8012e54:	b2da      	uxtb	r2, r3
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012e5a:	6838      	ldr	r0, [r7, #0]
 8012e5c:	f003 f9b8 	bl	80161d0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	7d1b      	ldrb	r3, [r3, #20]
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d020      	beq.n	8012eaa <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d006      	beq.n	8012e7e <tcp_pcb_remove+0xa2>
 8012e70:	4b13      	ldr	r3, [pc, #76]	; (8012ec0 <tcp_pcb_remove+0xe4>)
 8012e72:	f240 7253 	movw	r2, #1875	; 0x753
 8012e76:	4913      	ldr	r1, [pc, #76]	; (8012ec4 <tcp_pcb_remove+0xe8>)
 8012e78:	4813      	ldr	r0, [pc, #76]	; (8012ec8 <tcp_pcb_remove+0xec>)
 8012e7a:	f007 fc05 	bl	801a688 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d006      	beq.n	8012e94 <tcp_pcb_remove+0xb8>
 8012e86:	4b0e      	ldr	r3, [pc, #56]	; (8012ec0 <tcp_pcb_remove+0xe4>)
 8012e88:	f240 7254 	movw	r2, #1876	; 0x754
 8012e8c:	490f      	ldr	r1, [pc, #60]	; (8012ecc <tcp_pcb_remove+0xf0>)
 8012e8e:	480e      	ldr	r0, [pc, #56]	; (8012ec8 <tcp_pcb_remove+0xec>)
 8012e90:	f007 fbfa 	bl	801a688 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d006      	beq.n	8012eaa <tcp_pcb_remove+0xce>
 8012e9c:	4b08      	ldr	r3, [pc, #32]	; (8012ec0 <tcp_pcb_remove+0xe4>)
 8012e9e:	f240 7256 	movw	r2, #1878	; 0x756
 8012ea2:	490b      	ldr	r1, [pc, #44]	; (8012ed0 <tcp_pcb_remove+0xf4>)
 8012ea4:	4808      	ldr	r0, [pc, #32]	; (8012ec8 <tcp_pcb_remove+0xec>)
 8012ea6:	f007 fbef 	bl	801a688 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	2200      	movs	r2, #0
 8012eae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012eb6:	bf00      	nop
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	0801cd18 	.word	0x0801cd18
 8012ec4:	0801d0d0 	.word	0x0801d0d0
 8012ec8:	0801cd54 	.word	0x0801cd54
 8012ecc:	0801d0e8 	.word	0x0801d0e8
 8012ed0:	0801d104 	.word	0x0801d104

08012ed4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012edc:	4b06      	ldr	r3, [pc, #24]	; (8012ef8 <tcp_next_iss+0x24>)
 8012ede:	681a      	ldr	r2, [r3, #0]
 8012ee0:	4b06      	ldr	r3, [pc, #24]	; (8012efc <tcp_next_iss+0x28>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	4a04      	ldr	r2, [pc, #16]	; (8012ef8 <tcp_next_iss+0x24>)
 8012ee8:	6013      	str	r3, [r2, #0]
  return iss;
 8012eea:	4b03      	ldr	r3, [pc, #12]	; (8012ef8 <tcp_next_iss+0x24>)
 8012eec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	370c      	adds	r7, #12
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bc80      	pop	{r7}
 8012ef6:	4770      	bx	lr
 8012ef8:	20000150 	.word	0x20000150
 8012efc:	2000bedc 	.word	0x2000bedc

08012f00 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	4603      	mov	r3, r0
 8012f08:	6039      	str	r1, [r7, #0]
 8012f0a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8012f0c:	6838      	ldr	r0, [r7, #0]
 8012f0e:	f005 fa09 	bl	8018324 <ip4_route>
 8012f12:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d101      	bne.n	8012f1e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8012f1a:	88fb      	ldrh	r3, [r7, #6]
 8012f1c:	e010      	b.n	8012f40 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012f22:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012f24:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d008      	beq.n	8012f3e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8012f2c:	897b      	ldrh	r3, [r7, #10]
 8012f2e:	3b28      	subs	r3, #40	; 0x28
 8012f30:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012f32:	893a      	ldrh	r2, [r7, #8]
 8012f34:	88fb      	ldrh	r3, [r7, #6]
 8012f36:	4293      	cmp	r3, r2
 8012f38:	bf28      	it	cs
 8012f3a:	4613      	movcs	r3, r2
 8012f3c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8012f3e:	88fb      	ldrh	r3, [r7, #6]
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012f52:	683b      	ldr	r3, [r7, #0]
 8012f54:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012f56:	e011      	b.n	8012f7c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	429a      	cmp	r2, r3
 8012f62:	d108      	bne.n	8012f76 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f7fe fdb2 	bl	8011ad4 <tcp_abort>
      pcb = next;
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	60fb      	str	r3, [r7, #12]
 8012f74:	e002      	b.n	8012f7c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d1ea      	bne.n	8012f58 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8012f82:	bf00      	nop
 8012f84:	bf00      	nop
 8012f86:	3710      	adds	r7, #16
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b084      	sub	sp, #16
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d02c      	beq.n	8012ff6 <tcp_netif_ip_addr_changed+0x6a>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d028      	beq.n	8012ff6 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012fa4:	4b16      	ldr	r3, [pc, #88]	; (8013000 <tcp_netif_ip_addr_changed+0x74>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	4619      	mov	r1, r3
 8012faa:	6878      	ldr	r0, [r7, #4]
 8012fac:	f7ff ffcc 	bl	8012f48 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012fb0:	4b14      	ldr	r3, [pc, #80]	; (8013004 <tcp_netif_ip_addr_changed+0x78>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7ff ffc6 	bl	8012f48 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d019      	beq.n	8012ff6 <tcp_netif_ip_addr_changed+0x6a>
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d015      	beq.n	8012ff6 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8012fca:	4b0f      	ldr	r3, [pc, #60]	; (8013008 <tcp_netif_ip_addr_changed+0x7c>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	60fb      	str	r3, [r7, #12]
 8012fd0:	e00e      	b.n	8012ff0 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d103      	bne.n	8012fec <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	681a      	ldr	r2, [r3, #0]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	60fb      	str	r3, [r7, #12]
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d1ed      	bne.n	8012fd2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012ff6:	bf00      	nop
 8012ff8:	3710      	adds	r7, #16
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	2000bed8 	.word	0x2000bed8
 8013004:	2000bee4 	.word	0x2000bee4
 8013008:	2000bee0 	.word	0x2000bee0

0801300c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801300c:	b590      	push	{r4, r7, lr}
 801300e:	b08b      	sub	sp, #44	; 0x2c
 8013010:	af02      	add	r7, sp, #8
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	4a82      	ldr	r2, [pc, #520]	; (8013224 <tcp_input+0x218>)
 801301c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	895b      	ldrh	r3, [r3, #10]
 8013022:	2b13      	cmp	r3, #19
 8013024:	f240 8398 	bls.w	8013758 <tcp_input+0x74c>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013028:	4b7f      	ldr	r3, [pc, #508]	; (8013228 <tcp_input+0x21c>)
 801302a:	695b      	ldr	r3, [r3, #20]
 801302c:	4a7e      	ldr	r2, [pc, #504]	; (8013228 <tcp_input+0x21c>)
 801302e:	6812      	ldr	r2, [r2, #0]
 8013030:	4611      	mov	r1, r2
 8013032:	4618      	mov	r0, r3
 8013034:	f005 fbf2 	bl	801881c <ip4_addr_isbroadcast_u32>
 8013038:	4603      	mov	r3, r0
 801303a:	2b00      	cmp	r3, #0
 801303c:	f040 838e 	bne.w	801375c <tcp_input+0x750>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013040:	4b79      	ldr	r3, [pc, #484]	; (8013228 <tcp_input+0x21c>)
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013048:	2be0      	cmp	r3, #224	; 0xe0
 801304a:	f000 8387 	beq.w	801375c <tcp_input+0x750>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801304e:	4b75      	ldr	r3, [pc, #468]	; (8013224 <tcp_input+0x218>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	899b      	ldrh	r3, [r3, #12]
 8013054:	b29b      	uxth	r3, r3
 8013056:	4618      	mov	r0, r3
 8013058:	f7fc fd76 	bl	800fb48 <lwip_htons>
 801305c:	4603      	mov	r3, r0
 801305e:	0b1b      	lsrs	r3, r3, #12
 8013060:	b29b      	uxth	r3, r3
 8013062:	b2db      	uxtb	r3, r3
 8013064:	009b      	lsls	r3, r3, #2
 8013066:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013068:	7cbb      	ldrb	r3, [r7, #18]
 801306a:	2b13      	cmp	r3, #19
 801306c:	f240 8378 	bls.w	8013760 <tcp_input+0x754>
 8013070:	7cbb      	ldrb	r3, [r7, #18]
 8013072:	b29a      	uxth	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	891b      	ldrh	r3, [r3, #8]
 8013078:	429a      	cmp	r2, r3
 801307a:	f200 8371 	bhi.w	8013760 <tcp_input+0x754>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801307e:	7cbb      	ldrb	r3, [r7, #18]
 8013080:	b29b      	uxth	r3, r3
 8013082:	3b14      	subs	r3, #20
 8013084:	b29a      	uxth	r2, r3
 8013086:	4b69      	ldr	r3, [pc, #420]	; (801322c <tcp_input+0x220>)
 8013088:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801308a:	4b69      	ldr	r3, [pc, #420]	; (8013230 <tcp_input+0x224>)
 801308c:	2200      	movs	r2, #0
 801308e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	895a      	ldrh	r2, [r3, #10]
 8013094:	7cbb      	ldrb	r3, [r7, #18]
 8013096:	b29b      	uxth	r3, r3
 8013098:	429a      	cmp	r2, r3
 801309a:	d30d      	bcc.n	80130b8 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801309c:	4b63      	ldr	r3, [pc, #396]	; (801322c <tcp_input+0x220>)
 801309e:	881a      	ldrh	r2, [r3, #0]
 80130a0:	4b64      	ldr	r3, [pc, #400]	; (8013234 <tcp_input+0x228>)
 80130a2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80130a4:	7cbb      	ldrb	r3, [r7, #18]
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	425b      	negs	r3, r3
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	b21b      	sxth	r3, r3
 80130ae:	4619      	mov	r1, r3
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7fd ff87 	bl	8010fc4 <pbuf_header>
 80130b6:	e055      	b.n	8013164 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d105      	bne.n	80130cc <tcp_input+0xc0>
 80130c0:	4b5d      	ldr	r3, [pc, #372]	; (8013238 <tcp_input+0x22c>)
 80130c2:	22b2      	movs	r2, #178	; 0xb2
 80130c4:	495d      	ldr	r1, [pc, #372]	; (801323c <tcp_input+0x230>)
 80130c6:	485e      	ldr	r0, [pc, #376]	; (8013240 <tcp_input+0x234>)
 80130c8:	f007 fade 	bl	801a688 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 80130cc:	f06f 0113 	mvn.w	r1, #19
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7fd ff77 	bl	8010fc4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	895a      	ldrh	r2, [r3, #10]
 80130da:	4b56      	ldr	r3, [pc, #344]	; (8013234 <tcp_input+0x228>)
 80130dc:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80130de:	4b53      	ldr	r3, [pc, #332]	; (801322c <tcp_input+0x220>)
 80130e0:	881a      	ldrh	r2, [r3, #0]
 80130e2:	4b54      	ldr	r3, [pc, #336]	; (8013234 <tcp_input+0x228>)
 80130e4:	881b      	ldrh	r3, [r3, #0]
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80130ea:	4b52      	ldr	r3, [pc, #328]	; (8013234 <tcp_input+0x228>)
 80130ec:	881b      	ldrh	r3, [r3, #0]
 80130ee:	425b      	negs	r3, r3
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	b21b      	sxth	r3, r3
 80130f4:	4619      	mov	r1, r3
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f7fd ff64 	bl	8010fc4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	895b      	ldrh	r3, [r3, #10]
 8013102:	8a3a      	ldrh	r2, [r7, #16]
 8013104:	429a      	cmp	r2, r3
 8013106:	f200 832d 	bhi.w	8013764 <tcp_input+0x758>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	4a47      	ldr	r2, [pc, #284]	; (8013230 <tcp_input+0x224>)
 8013112:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681a      	ldr	r2, [r3, #0]
 8013118:	8a3b      	ldrh	r3, [r7, #16]
 801311a:	425b      	negs	r3, r3
 801311c:	b29b      	uxth	r3, r3
 801311e:	b21b      	sxth	r3, r3
 8013120:	4619      	mov	r1, r3
 8013122:	4610      	mov	r0, r2
 8013124:	f7fd ff4e 	bl	8010fc4 <pbuf_header>
    p->tot_len -= opt2len;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	891a      	ldrh	r2, [r3, #8]
 801312c:	8a3b      	ldrh	r3, [r7, #16]
 801312e:	1ad3      	subs	r3, r2, r3
 8013130:	b29a      	uxth	r2, r3
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	895b      	ldrh	r3, [r3, #10]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d005      	beq.n	801314a <tcp_input+0x13e>
 801313e:	4b3e      	ldr	r3, [pc, #248]	; (8013238 <tcp_input+0x22c>)
 8013140:	22cf      	movs	r2, #207	; 0xcf
 8013142:	4940      	ldr	r1, [pc, #256]	; (8013244 <tcp_input+0x238>)
 8013144:	483e      	ldr	r0, [pc, #248]	; (8013240 <tcp_input+0x234>)
 8013146:	f007 fa9f 	bl	801a688 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	891a      	ldrh	r2, [r3, #8]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	891b      	ldrh	r3, [r3, #8]
 8013154:	429a      	cmp	r2, r3
 8013156:	d005      	beq.n	8013164 <tcp_input+0x158>
 8013158:	4b37      	ldr	r3, [pc, #220]	; (8013238 <tcp_input+0x22c>)
 801315a:	22d0      	movs	r2, #208	; 0xd0
 801315c:	493a      	ldr	r1, [pc, #232]	; (8013248 <tcp_input+0x23c>)
 801315e:	4838      	ldr	r0, [pc, #224]	; (8013240 <tcp_input+0x234>)
 8013160:	f007 fa92 	bl	801a688 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013164:	4b2f      	ldr	r3, [pc, #188]	; (8013224 <tcp_input+0x218>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	881b      	ldrh	r3, [r3, #0]
 801316a:	b29b      	uxth	r3, r3
 801316c:	4a2d      	ldr	r2, [pc, #180]	; (8013224 <tcp_input+0x218>)
 801316e:	6814      	ldr	r4, [r2, #0]
 8013170:	4618      	mov	r0, r3
 8013172:	f7fc fce9 	bl	800fb48 <lwip_htons>
 8013176:	4603      	mov	r3, r0
 8013178:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801317a:	4b2a      	ldr	r3, [pc, #168]	; (8013224 <tcp_input+0x218>)
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	885b      	ldrh	r3, [r3, #2]
 8013180:	b29b      	uxth	r3, r3
 8013182:	4a28      	ldr	r2, [pc, #160]	; (8013224 <tcp_input+0x218>)
 8013184:	6814      	ldr	r4, [r2, #0]
 8013186:	4618      	mov	r0, r3
 8013188:	f7fc fcde 	bl	800fb48 <lwip_htons>
 801318c:	4603      	mov	r3, r0
 801318e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013190:	4b24      	ldr	r3, [pc, #144]	; (8013224 <tcp_input+0x218>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	4a23      	ldr	r2, [pc, #140]	; (8013224 <tcp_input+0x218>)
 8013198:	6814      	ldr	r4, [r2, #0]
 801319a:	4618      	mov	r0, r3
 801319c:	f7fc fce1 	bl	800fb62 <lwip_htonl>
 80131a0:	4603      	mov	r3, r0
 80131a2:	6063      	str	r3, [r4, #4]
 80131a4:	6863      	ldr	r3, [r4, #4]
 80131a6:	4a29      	ldr	r2, [pc, #164]	; (801324c <tcp_input+0x240>)
 80131a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80131aa:	4b1e      	ldr	r3, [pc, #120]	; (8013224 <tcp_input+0x218>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	689b      	ldr	r3, [r3, #8]
 80131b0:	4a1c      	ldr	r2, [pc, #112]	; (8013224 <tcp_input+0x218>)
 80131b2:	6814      	ldr	r4, [r2, #0]
 80131b4:	4618      	mov	r0, r3
 80131b6:	f7fc fcd4 	bl	800fb62 <lwip_htonl>
 80131ba:	4603      	mov	r3, r0
 80131bc:	60a3      	str	r3, [r4, #8]
 80131be:	68a3      	ldr	r3, [r4, #8]
 80131c0:	4a23      	ldr	r2, [pc, #140]	; (8013250 <tcp_input+0x244>)
 80131c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80131c4:	4b17      	ldr	r3, [pc, #92]	; (8013224 <tcp_input+0x218>)
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	89db      	ldrh	r3, [r3, #14]
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	4a15      	ldr	r2, [pc, #84]	; (8013224 <tcp_input+0x218>)
 80131ce:	6814      	ldr	r4, [r2, #0]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fc fcb9 	bl	800fb48 <lwip_htons>
 80131d6:	4603      	mov	r3, r0
 80131d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80131da:	4b12      	ldr	r3, [pc, #72]	; (8013224 <tcp_input+0x218>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	899b      	ldrh	r3, [r3, #12]
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fc fcb0 	bl	800fb48 <lwip_htons>
 80131e8:	4603      	mov	r3, r0
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80131f0:	b2da      	uxtb	r2, r3
 80131f2:	4b18      	ldr	r3, [pc, #96]	; (8013254 <tcp_input+0x248>)
 80131f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	891a      	ldrh	r2, [r3, #8]
 80131fa:	4b16      	ldr	r3, [pc, #88]	; (8013254 <tcp_input+0x248>)
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	f003 0303 	and.w	r3, r3, #3
 8013202:	2b00      	cmp	r3, #0
 8013204:	bf14      	ite	ne
 8013206:	2301      	movne	r3, #1
 8013208:	2300      	moveq	r3, #0
 801320a:	b2db      	uxtb	r3, r3
 801320c:	b29b      	uxth	r3, r3
 801320e:	4413      	add	r3, r2
 8013210:	b29a      	uxth	r2, r3
 8013212:	4b11      	ldr	r3, [pc, #68]	; (8013258 <tcp_input+0x24c>)
 8013214:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013216:	2300      	movs	r3, #0
 8013218:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801321a:	4b10      	ldr	r3, [pc, #64]	; (801325c <tcp_input+0x250>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	61fb      	str	r3, [r7, #28]
 8013220:	e082      	b.n	8013328 <tcp_input+0x31c>
 8013222:	bf00      	nop
 8013224:	20005100 	.word	0x20005100
 8013228:	200087c8 	.word	0x200087c8
 801322c:	20005104 	.word	0x20005104
 8013230:	20005108 	.word	0x20005108
 8013234:	20005106 	.word	0x20005106
 8013238:	0801d11c 	.word	0x0801d11c
 801323c:	0801d150 	.word	0x0801d150
 8013240:	0801d160 	.word	0x0801d160
 8013244:	0801d188 	.word	0x0801d188
 8013248:	0801d194 	.word	0x0801d194
 801324c:	20005110 	.word	0x20005110
 8013250:	20005114 	.word	0x20005114
 8013254:	2000511c 	.word	0x2000511c
 8013258:	2000511a 	.word	0x2000511a
 801325c:	2000bed8 	.word	0x2000bed8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013260:	69fb      	ldr	r3, [r7, #28]
 8013262:	7d1b      	ldrb	r3, [r3, #20]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d105      	bne.n	8013274 <tcp_input+0x268>
 8013268:	4b6e      	ldr	r3, [pc, #440]	; (8013424 <tcp_input+0x418>)
 801326a:	22e2      	movs	r2, #226	; 0xe2
 801326c:	496e      	ldr	r1, [pc, #440]	; (8013428 <tcp_input+0x41c>)
 801326e:	486f      	ldr	r0, [pc, #444]	; (801342c <tcp_input+0x420>)
 8013270:	f007 fa0a 	bl	801a688 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013274:	69fb      	ldr	r3, [r7, #28]
 8013276:	7d1b      	ldrb	r3, [r3, #20]
 8013278:	2b0a      	cmp	r3, #10
 801327a:	d105      	bne.n	8013288 <tcp_input+0x27c>
 801327c:	4b69      	ldr	r3, [pc, #420]	; (8013424 <tcp_input+0x418>)
 801327e:	22e3      	movs	r2, #227	; 0xe3
 8013280:	496b      	ldr	r1, [pc, #428]	; (8013430 <tcp_input+0x424>)
 8013282:	486a      	ldr	r0, [pc, #424]	; (801342c <tcp_input+0x420>)
 8013284:	f007 fa00 	bl	801a688 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013288:	69fb      	ldr	r3, [r7, #28]
 801328a:	7d1b      	ldrb	r3, [r3, #20]
 801328c:	2b01      	cmp	r3, #1
 801328e:	d105      	bne.n	801329c <tcp_input+0x290>
 8013290:	4b64      	ldr	r3, [pc, #400]	; (8013424 <tcp_input+0x418>)
 8013292:	22e4      	movs	r2, #228	; 0xe4
 8013294:	4967      	ldr	r1, [pc, #412]	; (8013434 <tcp_input+0x428>)
 8013296:	4865      	ldr	r0, [pc, #404]	; (801342c <tcp_input+0x420>)
 8013298:	f007 f9f6 	bl	801a688 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801329c:	69fb      	ldr	r3, [r7, #28]
 801329e:	8b1a      	ldrh	r2, [r3, #24]
 80132a0:	4b65      	ldr	r3, [pc, #404]	; (8013438 <tcp_input+0x42c>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	881b      	ldrh	r3, [r3, #0]
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d138      	bne.n	801331e <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	8ada      	ldrh	r2, [r3, #22]
 80132b0:	4b61      	ldr	r3, [pc, #388]	; (8013438 <tcp_input+0x42c>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	885b      	ldrh	r3, [r3, #2]
 80132b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d130      	bne.n	801331e <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	685a      	ldr	r2, [r3, #4]
 80132c0:	4b5e      	ldr	r3, [pc, #376]	; (801343c <tcp_input+0x430>)
 80132c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d12a      	bne.n	801331e <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	4b5b      	ldr	r3, [pc, #364]	; (801343c <tcp_input+0x430>)
 80132ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d124      	bne.n	801331e <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	69fa      	ldr	r2, [r7, #28]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d105      	bne.n	80132ea <tcp_input+0x2de>
 80132de:	4b51      	ldr	r3, [pc, #324]	; (8013424 <tcp_input+0x418>)
 80132e0:	22ec      	movs	r2, #236	; 0xec
 80132e2:	4957      	ldr	r1, [pc, #348]	; (8013440 <tcp_input+0x434>)
 80132e4:	4851      	ldr	r0, [pc, #324]	; (801342c <tcp_input+0x420>)
 80132e6:	f007 f9cf 	bl	801a688 <iprintf>
      if (prev != NULL) {
 80132ea:	69bb      	ldr	r3, [r7, #24]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00a      	beq.n	8013306 <tcp_input+0x2fa>
        prev->next = pcb->next;
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	68da      	ldr	r2, [r3, #12]
 80132f4:	69bb      	ldr	r3, [r7, #24]
 80132f6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80132f8:	4b52      	ldr	r3, [pc, #328]	; (8013444 <tcp_input+0x438>)
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	69fb      	ldr	r3, [r7, #28]
 80132fe:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013300:	4a50      	ldr	r2, [pc, #320]	; (8013444 <tcp_input+0x438>)
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013306:	69fb      	ldr	r3, [r7, #28]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	69fa      	ldr	r2, [r7, #28]
 801330c:	429a      	cmp	r2, r3
 801330e:	d10f      	bne.n	8013330 <tcp_input+0x324>
 8013310:	4b44      	ldr	r3, [pc, #272]	; (8013424 <tcp_input+0x418>)
 8013312:	22f4      	movs	r2, #244	; 0xf4
 8013314:	494c      	ldr	r1, [pc, #304]	; (8013448 <tcp_input+0x43c>)
 8013316:	4845      	ldr	r0, [pc, #276]	; (801342c <tcp_input+0x420>)
 8013318:	f007 f9b6 	bl	801a688 <iprintf>
      break;
 801331c:	e008      	b.n	8013330 <tcp_input+0x324>
    }
    prev = pcb;
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013322:	69fb      	ldr	r3, [r7, #28]
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	61fb      	str	r3, [r7, #28]
 8013328:	69fb      	ldr	r3, [r7, #28]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d198      	bne.n	8013260 <tcp_input+0x254>
 801332e:	e000      	b.n	8013332 <tcp_input+0x326>
      break;
 8013330:	bf00      	nop
  }

  if (pcb == NULL) {
 8013332:	69fb      	ldr	r3, [r7, #28]
 8013334:	2b00      	cmp	r3, #0
 8013336:	f040 808f 	bne.w	8013458 <tcp_input+0x44c>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801333a:	4b44      	ldr	r3, [pc, #272]	; (801344c <tcp_input+0x440>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	61fb      	str	r3, [r7, #28]
 8013340:	e02f      	b.n	80133a2 <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	7d1b      	ldrb	r3, [r3, #20]
 8013346:	2b0a      	cmp	r3, #10
 8013348:	d005      	beq.n	8013356 <tcp_input+0x34a>
 801334a:	4b36      	ldr	r3, [pc, #216]	; (8013424 <tcp_input+0x418>)
 801334c:	22fe      	movs	r2, #254	; 0xfe
 801334e:	4940      	ldr	r1, [pc, #256]	; (8013450 <tcp_input+0x444>)
 8013350:	4836      	ldr	r0, [pc, #216]	; (801342c <tcp_input+0x420>)
 8013352:	f007 f999 	bl	801a688 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	8b1a      	ldrh	r2, [r3, #24]
 801335a:	4b37      	ldr	r3, [pc, #220]	; (8013438 <tcp_input+0x42c>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	881b      	ldrh	r3, [r3, #0]
 8013360:	b29b      	uxth	r3, r3
 8013362:	429a      	cmp	r2, r3
 8013364:	d11a      	bne.n	801339c <tcp_input+0x390>
          pcb->local_port == tcphdr->dest &&
 8013366:	69fb      	ldr	r3, [r7, #28]
 8013368:	8ada      	ldrh	r2, [r3, #22]
 801336a:	4b33      	ldr	r3, [pc, #204]	; (8013438 <tcp_input+0x42c>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	885b      	ldrh	r3, [r3, #2]
 8013370:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013372:	429a      	cmp	r2, r3
 8013374:	d112      	bne.n	801339c <tcp_input+0x390>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013376:	69fb      	ldr	r3, [r7, #28]
 8013378:	685a      	ldr	r2, [r3, #4]
 801337a:	4b30      	ldr	r3, [pc, #192]	; (801343c <tcp_input+0x430>)
 801337c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801337e:	429a      	cmp	r2, r3
 8013380:	d10c      	bne.n	801339c <tcp_input+0x390>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	4b2d      	ldr	r3, [pc, #180]	; (801343c <tcp_input+0x430>)
 8013388:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801338a:	429a      	cmp	r2, r3
 801338c:	d106      	bne.n	801339c <tcp_input+0x390>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801338e:	69f8      	ldr	r0, [r7, #28]
 8013390:	f000 fb16 	bl	80139c0 <tcp_timewait_input>
        pbuf_free(p);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7fd fe39 	bl	801100c <pbuf_free>
        return;
 801339a:	e1e9      	b.n	8013770 <tcp_input+0x764>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801339c:	69fb      	ldr	r3, [r7, #28]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	61fb      	str	r3, [r7, #28]
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d1cc      	bne.n	8013342 <tcp_input+0x336>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80133ac:	4b29      	ldr	r3, [pc, #164]	; (8013454 <tcp_input+0x448>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	617b      	str	r3, [r7, #20]
 80133b2:	e019      	b.n	80133e8 <tcp_input+0x3dc>
      if (lpcb->local_port == tcphdr->dest) {
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	8ada      	ldrh	r2, [r3, #22]
 80133b8:	4b1f      	ldr	r3, [pc, #124]	; (8013438 <tcp_input+0x42c>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	885b      	ldrh	r3, [r3, #2]
 80133be:	b29b      	uxth	r3, r3
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d10c      	bne.n	80133de <tcp_input+0x3d2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	4b1c      	ldr	r3, [pc, #112]	; (801343c <tcp_input+0x430>)
 80133ca:	695b      	ldr	r3, [r3, #20]
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d00f      	beq.n	80133f0 <tcp_input+0x3e4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00d      	beq.n	80133f2 <tcp_input+0x3e6>
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d009      	beq.n	80133f2 <tcp_input+0x3e6>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	617b      	str	r3, [r7, #20]
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d1e2      	bne.n	80133b4 <tcp_input+0x3a8>
 80133ee:	e000      	b.n	80133f2 <tcp_input+0x3e6>
            break;
 80133f0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d02f      	beq.n	8013458 <tcp_input+0x44c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00a      	beq.n	8013414 <tcp_input+0x408>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80133fe:	697b      	ldr	r3, [r7, #20]
 8013400:	68da      	ldr	r2, [r3, #12]
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013406:	4b13      	ldr	r3, [pc, #76]	; (8013454 <tcp_input+0x448>)
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801340e:	4a11      	ldr	r2, [pc, #68]	; (8013454 <tcp_input+0x448>)
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8013414:	6978      	ldr	r0, [r7, #20]
 8013416:	f000 f9f3 	bl	8013800 <tcp_listen_input>
      pbuf_free(p);
 801341a:	6878      	ldr	r0, [r7, #4]
 801341c:	f7fd fdf6 	bl	801100c <pbuf_free>
      return;
 8013420:	e1a6      	b.n	8013770 <tcp_input+0x764>
 8013422:	bf00      	nop
 8013424:	0801d11c 	.word	0x0801d11c
 8013428:	0801d1b4 	.word	0x0801d1b4
 801342c:	0801d160 	.word	0x0801d160
 8013430:	0801d1dc 	.word	0x0801d1dc
 8013434:	0801d208 	.word	0x0801d208
 8013438:	20005100 	.word	0x20005100
 801343c:	200087c8 	.word	0x200087c8
 8013440:	0801d230 	.word	0x0801d230
 8013444:	2000bed8 	.word	0x2000bed8
 8013448:	0801d25c 	.word	0x0801d25c
 801344c:	2000bee8 	.word	0x2000bee8
 8013450:	0801d288 	.word	0x0801d288
 8013454:	2000bee0 	.word	0x2000bee0
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8013458:	69fb      	ldr	r3, [r7, #28]
 801345a:	2b00      	cmp	r3, #0
 801345c:	f000 8156 	beq.w	801370c <tcp_input+0x700>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013460:	4b94      	ldr	r3, [pc, #592]	; (80136b4 <tcp_input+0x6a8>)
 8013462:	2200      	movs	r2, #0
 8013464:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	891a      	ldrh	r2, [r3, #8]
 801346a:	4b92      	ldr	r3, [pc, #584]	; (80136b4 <tcp_input+0x6a8>)
 801346c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801346e:	4a91      	ldr	r2, [pc, #580]	; (80136b4 <tcp_input+0x6a8>)
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013474:	4b90      	ldr	r3, [pc, #576]	; (80136b8 <tcp_input+0x6ac>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a8e      	ldr	r2, [pc, #568]	; (80136b4 <tcp_input+0x6a8>)
 801347a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801347c:	4b8f      	ldr	r3, [pc, #572]	; (80136bc <tcp_input+0x6b0>)
 801347e:	2200      	movs	r2, #0
 8013480:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013482:	4b8f      	ldr	r3, [pc, #572]	; (80136c0 <tcp_input+0x6b4>)
 8013484:	2200      	movs	r2, #0
 8013486:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013488:	4b8e      	ldr	r3, [pc, #568]	; (80136c4 <tcp_input+0x6b8>)
 801348a:	2200      	movs	r2, #0
 801348c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801348e:	4b8e      	ldr	r3, [pc, #568]	; (80136c8 <tcp_input+0x6bc>)
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	f003 0308 	and.w	r3, r3, #8
 8013496:	2b00      	cmp	r3, #0
 8013498:	d006      	beq.n	80134a8 <tcp_input+0x49c>
      p->flags |= PBUF_FLAG_PUSH;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	7b5b      	ldrb	r3, [r3, #13]
 801349e:	f043 0301 	orr.w	r3, r3, #1
 80134a2:	b2da      	uxtb	r2, r3
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80134a8:	69fb      	ldr	r3, [r7, #28]
 80134aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d017      	beq.n	80134e0 <tcp_input+0x4d4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80134b0:	69f8      	ldr	r0, [r7, #28]
 80134b2:	f7ff f96d 	bl	8012790 <tcp_process_refused_data>
 80134b6:	4603      	mov	r3, r0
 80134b8:	f113 0f0d 	cmn.w	r3, #13
 80134bc:	d007      	beq.n	80134ce <tcp_input+0x4c2>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80134be:	69fb      	ldr	r3, [r7, #28]
 80134c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00c      	beq.n	80134e0 <tcp_input+0x4d4>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80134c6:	4b81      	ldr	r3, [pc, #516]	; (80136cc <tcp_input+0x6c0>)
 80134c8:	881b      	ldrh	r3, [r3, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d008      	beq.n	80134e0 <tcp_input+0x4d4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	f040 80e2 	bne.w	801369c <tcp_input+0x690>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80134d8:	69f8      	ldr	r0, [r7, #28]
 80134da:	f002 fe1d 	bl	8016118 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80134de:	e0dd      	b.n	801369c <tcp_input+0x690>
      }
    }
    tcp_input_pcb = pcb;
 80134e0:	4a7b      	ldr	r2, [pc, #492]	; (80136d0 <tcp_input+0x6c4>)
 80134e2:	69fb      	ldr	r3, [r7, #28]
 80134e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80134e6:	69f8      	ldr	r0, [r7, #28]
 80134e8:	f000 fad2 	bl	8013a90 <tcp_process>
 80134ec:	4603      	mov	r3, r0
 80134ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80134f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80134f4:	f113 0f0d 	cmn.w	r3, #13
 80134f8:	f000 80d2 	beq.w	80136a0 <tcp_input+0x694>
      if (recv_flags & TF_RESET) {
 80134fc:	4b70      	ldr	r3, [pc, #448]	; (80136c0 <tcp_input+0x6b4>)
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	f003 0308 	and.w	r3, r3, #8
 8013504:	2b00      	cmp	r3, #0
 8013506:	d016      	beq.n	8013536 <tcp_input+0x52a>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801350e:	2b00      	cmp	r3, #0
 8013510:	d008      	beq.n	8013524 <tcp_input+0x518>
 8013512:	69fb      	ldr	r3, [r7, #28]
 8013514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013518:	69fa      	ldr	r2, [r7, #28]
 801351a:	6912      	ldr	r2, [r2, #16]
 801351c:	f06f 010d 	mvn.w	r1, #13
 8013520:	4610      	mov	r0, r2
 8013522:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013524:	69f9      	ldr	r1, [r7, #28]
 8013526:	486b      	ldr	r0, [pc, #428]	; (80136d4 <tcp_input+0x6c8>)
 8013528:	f7ff fc58 	bl	8012ddc <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 801352c:	69f9      	ldr	r1, [r7, #28]
 801352e:	2001      	movs	r0, #1
 8013530:	f7fc ffb2 	bl	8010498 <memp_free>
 8013534:	e0d7      	b.n	80136e6 <tcp_input+0x6da>
      } else {
        err = ERR_OK;
 8013536:	2300      	movs	r3, #0
 8013538:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801353a:	4b62      	ldr	r3, [pc, #392]	; (80136c4 <tcp_input+0x6b8>)
 801353c:	881b      	ldrh	r3, [r3, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d01b      	beq.n	801357a <tcp_input+0x56e>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013542:	4b60      	ldr	r3, [pc, #384]	; (80136c4 <tcp_input+0x6b8>)
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801354c:	2b00      	cmp	r3, #0
 801354e:	d009      	beq.n	8013564 <tcp_input+0x558>
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013554:	69fa      	ldr	r2, [r7, #28]
 8013556:	6910      	ldr	r0, [r2, #16]
 8013558:	89fa      	ldrh	r2, [r7, #14]
 801355a:	69f9      	ldr	r1, [r7, #28]
 801355c:	4798      	blx	r3
 801355e:	4603      	mov	r3, r0
 8013560:	74fb      	strb	r3, [r7, #19]
 8013562:	e001      	b.n	8013568 <tcp_input+0x55c>
 8013564:	2300      	movs	r3, #0
 8013566:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013568:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801356c:	f113 0f0d 	cmn.w	r3, #13
 8013570:	f000 8098 	beq.w	80136a4 <tcp_input+0x698>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013574:	4b53      	ldr	r3, [pc, #332]	; (80136c4 <tcp_input+0x6b8>)
 8013576:	2200      	movs	r2, #0
 8013578:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801357a:	69f8      	ldr	r0, [r7, #28]
 801357c:	f000 f90e 	bl	801379c <tcp_input_delayed_close>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	f040 8090 	bne.w	80136a8 <tcp_input+0x69c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013588:	4b4c      	ldr	r3, [pc, #304]	; (80136bc <tcp_input+0x6b0>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d041      	beq.n	8013614 <tcp_input+0x608>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013594:	2b00      	cmp	r3, #0
 8013596:	d006      	beq.n	80135a6 <tcp_input+0x59a>
 8013598:	4b4f      	ldr	r3, [pc, #316]	; (80136d8 <tcp_input+0x6cc>)
 801359a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 801359e:	494f      	ldr	r1, [pc, #316]	; (80136dc <tcp_input+0x6d0>)
 80135a0:	484f      	ldr	r0, [pc, #316]	; (80136e0 <tcp_input+0x6d4>)
 80135a2:	f007 f871 	bl	801a688 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80135a6:	69fb      	ldr	r3, [r7, #28]
 80135a8:	7e9b      	ldrb	r3, [r3, #26]
 80135aa:	f003 0310 	and.w	r3, r3, #16
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d008      	beq.n	80135c4 <tcp_input+0x5b8>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80135b2:	4b42      	ldr	r3, [pc, #264]	; (80136bc <tcp_input+0x6b0>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fd fd28 	bl	801100c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80135bc:	69f8      	ldr	r0, [r7, #28]
 80135be:	f7fe fa89 	bl	8011ad4 <tcp_abort>
            goto aborted;
 80135c2:	e090      	b.n	80136e6 <tcp_input+0x6da>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d00c      	beq.n	80135e8 <tcp_input+0x5dc>
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	6918      	ldr	r0, [r3, #16]
 80135d8:	4b38      	ldr	r3, [pc, #224]	; (80136bc <tcp_input+0x6b0>)
 80135da:	681a      	ldr	r2, [r3, #0]
 80135dc:	2300      	movs	r3, #0
 80135de:	69f9      	ldr	r1, [r7, #28]
 80135e0:	47a0      	blx	r4
 80135e2:	4603      	mov	r3, r0
 80135e4:	74fb      	strb	r3, [r7, #19]
 80135e6:	e008      	b.n	80135fa <tcp_input+0x5ee>
 80135e8:	4b34      	ldr	r3, [pc, #208]	; (80136bc <tcp_input+0x6b0>)
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	2300      	movs	r3, #0
 80135ee:	69f9      	ldr	r1, [r7, #28]
 80135f0:	2000      	movs	r0, #0
 80135f2:	f7ff f98d 	bl	8012910 <tcp_recv_null>
 80135f6:	4603      	mov	r3, r0
 80135f8:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80135fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80135fe:	f113 0f0d 	cmn.w	r3, #13
 8013602:	d053      	beq.n	80136ac <tcp_input+0x6a0>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013604:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d003      	beq.n	8013614 <tcp_input+0x608>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801360c:	4b2b      	ldr	r3, [pc, #172]	; (80136bc <tcp_input+0x6b0>)
 801360e:	681a      	ldr	r2, [r3, #0]
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013614:	4b2a      	ldr	r3, [pc, #168]	; (80136c0 <tcp_input+0x6b4>)
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	f003 0320 	and.w	r3, r3, #32
 801361c:	2b00      	cmp	r3, #0
 801361e:	d030      	beq.n	8013682 <tcp_input+0x676>
          if (pcb->refused_data != NULL) {
 8013620:	69fb      	ldr	r3, [r7, #28]
 8013622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013624:	2b00      	cmp	r3, #0
 8013626:	d009      	beq.n	801363c <tcp_input+0x630>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801362c:	7b5a      	ldrb	r2, [r3, #13]
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013632:	f042 0220 	orr.w	r2, r2, #32
 8013636:	b2d2      	uxtb	r2, r2
 8013638:	735a      	strb	r2, [r3, #13]
 801363a:	e022      	b.n	8013682 <tcp_input+0x676>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013640:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013644:	d005      	beq.n	8013652 <tcp_input+0x646>
              pcb->rcv_wnd++;
 8013646:	69fb      	ldr	r3, [r7, #28]
 8013648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801364a:	3301      	adds	r3, #1
 801364c:	b29a      	uxth	r2, r3
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013652:	69fb      	ldr	r3, [r7, #28]
 8013654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00b      	beq.n	8013674 <tcp_input+0x668>
 801365c:	69fb      	ldr	r3, [r7, #28]
 801365e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8013662:	69fb      	ldr	r3, [r7, #28]
 8013664:	6918      	ldr	r0, [r3, #16]
 8013666:	2300      	movs	r3, #0
 8013668:	2200      	movs	r2, #0
 801366a:	69f9      	ldr	r1, [r7, #28]
 801366c:	47a0      	blx	r4
 801366e:	4603      	mov	r3, r0
 8013670:	74fb      	strb	r3, [r7, #19]
 8013672:	e001      	b.n	8013678 <tcp_input+0x66c>
 8013674:	2300      	movs	r3, #0
 8013676:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013678:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801367c:	f113 0f0d 	cmn.w	r3, #13
 8013680:	d016      	beq.n	80136b0 <tcp_input+0x6a4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013682:	4b13      	ldr	r3, [pc, #76]	; (80136d0 <tcp_input+0x6c4>)
 8013684:	2200      	movs	r2, #0
 8013686:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013688:	69f8      	ldr	r0, [r7, #28]
 801368a:	f000 f887 	bl	801379c <tcp_input_delayed_close>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	d127      	bne.n	80136e4 <tcp_input+0x6d8>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013694:	69f8      	ldr	r0, [r7, #28]
 8013696:	f002 fd9b 	bl	80161d0 <tcp_output>
 801369a:	e024      	b.n	80136e6 <tcp_input+0x6da>
        goto aborted;
 801369c:	bf00      	nop
 801369e:	e022      	b.n	80136e6 <tcp_input+0x6da>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80136a0:	bf00      	nop
 80136a2:	e020      	b.n	80136e6 <tcp_input+0x6da>
              goto aborted;
 80136a4:	bf00      	nop
 80136a6:	e01e      	b.n	80136e6 <tcp_input+0x6da>
          goto aborted;
 80136a8:	bf00      	nop
 80136aa:	e01c      	b.n	80136e6 <tcp_input+0x6da>
            goto aborted;
 80136ac:	bf00      	nop
 80136ae:	e01a      	b.n	80136e6 <tcp_input+0x6da>
              goto aborted;
 80136b0:	bf00      	nop
 80136b2:	e018      	b.n	80136e6 <tcp_input+0x6da>
 80136b4:	200050f0 	.word	0x200050f0
 80136b8:	20005100 	.word	0x20005100
 80136bc:	20005120 	.word	0x20005120
 80136c0:	2000511d 	.word	0x2000511d
 80136c4:	20005118 	.word	0x20005118
 80136c8:	2000511c 	.word	0x2000511c
 80136cc:	2000511a 	.word	0x2000511a
 80136d0:	2000beec 	.word	0x2000beec
 80136d4:	2000bed8 	.word	0x2000bed8
 80136d8:	0801d11c 	.word	0x0801d11c
 80136dc:	0801d2b8 	.word	0x0801d2b8
 80136e0:	0801d160 	.word	0x0801d160
          goto aborted;
 80136e4:	bf00      	nop
    tcp_input_pcb = NULL;
 80136e6:	4b24      	ldr	r3, [pc, #144]	; (8013778 <tcp_input+0x76c>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80136ec:	4b23      	ldr	r3, [pc, #140]	; (801377c <tcp_input+0x770>)
 80136ee:	2200      	movs	r2, #0
 80136f0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80136f2:	4b23      	ldr	r3, [pc, #140]	; (8013780 <tcp_input+0x774>)
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d039      	beq.n	801376e <tcp_input+0x762>
    {
      pbuf_free(inseg.p);
 80136fa:	4b21      	ldr	r3, [pc, #132]	; (8013780 <tcp_input+0x774>)
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fd fc84 	bl	801100c <pbuf_free>
      inseg.p = NULL;
 8013704:	4b1e      	ldr	r3, [pc, #120]	; (8013780 <tcp_input+0x774>)
 8013706:	2200      	movs	r2, #0
 8013708:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801370a:	e030      	b.n	801376e <tcp_input+0x762>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801370c:	4b1d      	ldr	r3, [pc, #116]	; (8013784 <tcp_input+0x778>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	899b      	ldrh	r3, [r3, #12]
 8013712:	b29b      	uxth	r3, r3
 8013714:	4618      	mov	r0, r3
 8013716:	f7fc fa17 	bl	800fb48 <lwip_htons>
 801371a:	4603      	mov	r3, r0
 801371c:	f003 0304 	and.w	r3, r3, #4
 8013720:	2b00      	cmp	r3, #0
 8013722:	d115      	bne.n	8013750 <tcp_input+0x744>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013724:	4b18      	ldr	r3, [pc, #96]	; (8013788 <tcp_input+0x77c>)
 8013726:	6818      	ldr	r0, [r3, #0]
 8013728:	4b18      	ldr	r3, [pc, #96]	; (801378c <tcp_input+0x780>)
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	461a      	mov	r2, r3
 801372e:	4b18      	ldr	r3, [pc, #96]	; (8013790 <tcp_input+0x784>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013734:	4b13      	ldr	r3, [pc, #76]	; (8013784 <tcp_input+0x778>)
 8013736:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013738:	885b      	ldrh	r3, [r3, #2]
 801373a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801373c:	4a11      	ldr	r2, [pc, #68]	; (8013784 <tcp_input+0x778>)
 801373e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013740:	8812      	ldrh	r2, [r2, #0]
 8013742:	b292      	uxth	r2, r2
 8013744:	9201      	str	r2, [sp, #4]
 8013746:	9300      	str	r3, [sp, #0]
 8013748:	4b12      	ldr	r3, [pc, #72]	; (8013794 <tcp_input+0x788>)
 801374a:	4a13      	ldr	r2, [pc, #76]	; (8013798 <tcp_input+0x78c>)
 801374c:	f002 ffc4 	bl	80166d8 <tcp_rst>
    pbuf_free(p);
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7fd fc5b 	bl	801100c <pbuf_free>
  return;
 8013756:	e00a      	b.n	801376e <tcp_input+0x762>
    goto dropped;
 8013758:	bf00      	nop
 801375a:	e004      	b.n	8013766 <tcp_input+0x75a>
    goto dropped;
 801375c:	bf00      	nop
 801375e:	e002      	b.n	8013766 <tcp_input+0x75a>
    goto dropped;
 8013760:	bf00      	nop
 8013762:	e000      	b.n	8013766 <tcp_input+0x75a>
      goto dropped;
 8013764:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7fd fc50 	bl	801100c <pbuf_free>
 801376c:	e000      	b.n	8013770 <tcp_input+0x764>
  return;
 801376e:	bf00      	nop
}
 8013770:	3724      	adds	r7, #36	; 0x24
 8013772:	46bd      	mov	sp, r7
 8013774:	bd90      	pop	{r4, r7, pc}
 8013776:	bf00      	nop
 8013778:	2000beec 	.word	0x2000beec
 801377c:	20005120 	.word	0x20005120
 8013780:	200050f0 	.word	0x200050f0
 8013784:	20005100 	.word	0x20005100
 8013788:	20005114 	.word	0x20005114
 801378c:	2000511a 	.word	0x2000511a
 8013790:	20005110 	.word	0x20005110
 8013794:	200087d8 	.word	0x200087d8
 8013798:	200087dc 	.word	0x200087dc

0801379c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80137a4:	4b14      	ldr	r3, [pc, #80]	; (80137f8 <tcp_input_delayed_close+0x5c>)
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	f003 0310 	and.w	r3, r3, #16
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d01d      	beq.n	80137ec <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	7e9b      	ldrb	r3, [r3, #26]
 80137b4:	f003 0310 	and.w	r3, r3, #16
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d10d      	bne.n	80137d8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d008      	beq.n	80137d8 <tcp_input_delayed_close+0x3c>
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	6912      	ldr	r2, [r2, #16]
 80137d0:	f06f 010e 	mvn.w	r1, #14
 80137d4:	4610      	mov	r0, r2
 80137d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80137d8:	6879      	ldr	r1, [r7, #4]
 80137da:	4808      	ldr	r0, [pc, #32]	; (80137fc <tcp_input_delayed_close+0x60>)
 80137dc:	f7ff fafe 	bl	8012ddc <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80137e0:	6879      	ldr	r1, [r7, #4]
 80137e2:	2001      	movs	r0, #1
 80137e4:	f7fc fe58 	bl	8010498 <memp_free>
    return 1;
 80137e8:	2301      	movs	r3, #1
 80137ea:	e000      	b.n	80137ee <tcp_input_delayed_close+0x52>
  }
  return 0;
 80137ec:	2300      	movs	r3, #0
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3708      	adds	r7, #8
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	2000511d 	.word	0x2000511d
 80137fc:	2000bed8 	.word	0x2000bed8

08013800 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b088      	sub	sp, #32
 8013804:	af02      	add	r7, sp, #8
 8013806:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013808:	4b63      	ldr	r3, [pc, #396]	; (8013998 <tcp_listen_input+0x198>)
 801380a:	781b      	ldrb	r3, [r3, #0]
 801380c:	f003 0304 	and.w	r3, r3, #4
 8013810:	2b00      	cmp	r3, #0
 8013812:	f040 80bb 	bne.w	801398c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013816:	4b60      	ldr	r3, [pc, #384]	; (8013998 <tcp_listen_input+0x198>)
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	f003 0310 	and.w	r3, r3, #16
 801381e:	2b00      	cmp	r3, #0
 8013820:	d016      	beq.n	8013850 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013822:	4b5e      	ldr	r3, [pc, #376]	; (801399c <tcp_listen_input+0x19c>)
 8013824:	6818      	ldr	r0, [r3, #0]
 8013826:	4b5e      	ldr	r3, [pc, #376]	; (80139a0 <tcp_listen_input+0x1a0>)
 8013828:	881b      	ldrh	r3, [r3, #0]
 801382a:	461a      	mov	r2, r3
 801382c:	4b5d      	ldr	r3, [pc, #372]	; (80139a4 <tcp_listen_input+0x1a4>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013832:	4b5d      	ldr	r3, [pc, #372]	; (80139a8 <tcp_listen_input+0x1a8>)
 8013834:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013836:	885b      	ldrh	r3, [r3, #2]
 8013838:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801383a:	4a5b      	ldr	r2, [pc, #364]	; (80139a8 <tcp_listen_input+0x1a8>)
 801383c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801383e:	8812      	ldrh	r2, [r2, #0]
 8013840:	b292      	uxth	r2, r2
 8013842:	9201      	str	r2, [sp, #4]
 8013844:	9300      	str	r3, [sp, #0]
 8013846:	4b59      	ldr	r3, [pc, #356]	; (80139ac <tcp_listen_input+0x1ac>)
 8013848:	4a59      	ldr	r2, [pc, #356]	; (80139b0 <tcp_listen_input+0x1b0>)
 801384a:	f002 ff45 	bl	80166d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801384e:	e09f      	b.n	8013990 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8013850:	4b51      	ldr	r3, [pc, #324]	; (8013998 <tcp_listen_input+0x198>)
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	f003 0302 	and.w	r3, r3, #2
 8013858:	2b00      	cmp	r3, #0
 801385a:	f000 8099 	beq.w	8013990 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	7d5b      	ldrb	r3, [r3, #21]
 8013862:	4618      	mov	r0, r3
 8013864:	f7ff f932 	bl	8012acc <tcp_alloc>
 8013868:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d111      	bne.n	8013894 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d00a      	beq.n	801388e <tcp_listen_input+0x8e>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	699b      	ldr	r3, [r3, #24]
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	6910      	ldr	r0, [r2, #16]
 8013880:	f04f 32ff 	mov.w	r2, #4294967295
 8013884:	2100      	movs	r1, #0
 8013886:	4798      	blx	r3
 8013888:	4603      	mov	r3, r0
 801388a:	73bb      	strb	r3, [r7, #14]
      return;
 801388c:	e081      	b.n	8013992 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801388e:	23f0      	movs	r3, #240	; 0xf0
 8013890:	73bb      	strb	r3, [r7, #14]
      return;
 8013892:	e07e      	b.n	8013992 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013894:	4b47      	ldr	r3, [pc, #284]	; (80139b4 <tcp_listen_input+0x1b4>)
 8013896:	695a      	ldr	r2, [r3, #20]
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801389c:	4b45      	ldr	r3, [pc, #276]	; (80139b4 <tcp_listen_input+0x1b4>)
 801389e:	691a      	ldr	r2, [r3, #16]
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	8ada      	ldrh	r2, [r3, #22]
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80138ac:	4b3e      	ldr	r3, [pc, #248]	; (80139a8 <tcp_listen_input+0x1a8>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	881b      	ldrh	r3, [r3, #0]
 80138b2:	b29a      	uxth	r2, r3
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	2203      	movs	r2, #3
 80138bc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80138be:	4b39      	ldr	r3, [pc, #228]	; (80139a4 <tcp_listen_input+0x1a4>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	1c5a      	adds	r2, r3, #1
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80138d0:	6978      	ldr	r0, [r7, #20]
 80138d2:	f7ff faff 	bl	8012ed4 <tcp_next_iss>
 80138d6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	693a      	ldr	r2, [r7, #16]
 80138dc:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	693a      	ldr	r2, [r7, #16]
 80138e2:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	693a      	ldr	r2, [r7, #16]
 80138e8:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	693a      	ldr	r2, [r7, #16]
 80138ee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80138f0:	4b2c      	ldr	r3, [pc, #176]	; (80139a4 <tcp_listen_input+0x1a4>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	1e5a      	subs	r2, r3, #1
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	691a      	ldr	r2, [r3, #16]
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	687a      	ldr	r2, [r7, #4]
 8013906:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	7a1b      	ldrb	r3, [r3, #8]
 801390c:	f003 030c 	and.w	r3, r3, #12
 8013910:	b2da      	uxtb	r2, r3
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013916:	4b28      	ldr	r3, [pc, #160]	; (80139b8 <tcp_listen_input+0x1b8>)
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	60da      	str	r2, [r3, #12]
 801391e:	4a26      	ldr	r2, [pc, #152]	; (80139b8 <tcp_listen_input+0x1b8>)
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	6013      	str	r3, [r2, #0]
 8013924:	f003 f920 	bl	8016b68 <tcp_timer_needed>
 8013928:	4b24      	ldr	r3, [pc, #144]	; (80139bc <tcp_listen_input+0x1bc>)
 801392a:	2201      	movs	r2, #1
 801392c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801392e:	6978      	ldr	r0, [r7, #20]
 8013930:	f001 fd0c 	bl	801534c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013934:	4b1c      	ldr	r3, [pc, #112]	; (80139a8 <tcp_listen_input+0x1a8>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	89db      	ldrh	r3, [r3, #14]
 801393a:	b29a      	uxth	r2, r3
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	3304      	adds	r3, #4
 8013956:	4619      	mov	r1, r3
 8013958:	4610      	mov	r0, r2
 801395a:	f7ff fad1 	bl	8012f00 <tcp_eff_send_mss_impl>
 801395e:	4603      	mov	r3, r0
 8013960:	461a      	mov	r2, r3
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013966:	2112      	movs	r1, #18
 8013968:	6978      	ldr	r0, [r7, #20]
 801396a:	f002 fad9 	bl	8015f20 <tcp_enqueue_flags>
 801396e:	4603      	mov	r3, r0
 8013970:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d004      	beq.n	8013984 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801397a:	2100      	movs	r1, #0
 801397c:	6978      	ldr	r0, [r7, #20]
 801397e:	f7fd fff7 	bl	8011970 <tcp_abandon>
      return;
 8013982:	e006      	b.n	8013992 <tcp_listen_input+0x192>
    tcp_output(npcb);
 8013984:	6978      	ldr	r0, [r7, #20]
 8013986:	f002 fc23 	bl	80161d0 <tcp_output>
  return;
 801398a:	e001      	b.n	8013990 <tcp_listen_input+0x190>
    return;
 801398c:	bf00      	nop
 801398e:	e000      	b.n	8013992 <tcp_listen_input+0x192>
  return;
 8013990:	bf00      	nop
}
 8013992:	3718      	adds	r7, #24
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	2000511c 	.word	0x2000511c
 801399c:	20005114 	.word	0x20005114
 80139a0:	2000511a 	.word	0x2000511a
 80139a4:	20005110 	.word	0x20005110
 80139a8:	20005100 	.word	0x20005100
 80139ac:	200087d8 	.word	0x200087d8
 80139b0:	200087dc 	.word	0x200087dc
 80139b4:	200087c8 	.word	0x200087c8
 80139b8:	2000bed8 	.word	0x2000bed8
 80139bc:	2000bed4 	.word	0x2000bed4

080139c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af02      	add	r7, sp, #8
 80139c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80139c8:	4b29      	ldr	r3, [pc, #164]	; (8013a70 <tcp_timewait_input+0xb0>)
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	f003 0304 	and.w	r3, r3, #4
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d146      	bne.n	8013a62 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80139d4:	4b26      	ldr	r3, [pc, #152]	; (8013a70 <tcp_timewait_input+0xb0>)
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	f003 0302 	and.w	r3, r3, #2
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d027      	beq.n	8013a30 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80139e0:	4b24      	ldr	r3, [pc, #144]	; (8013a74 <tcp_timewait_input+0xb4>)
 80139e2:	681a      	ldr	r2, [r3, #0]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e8:	1ad3      	subs	r3, r2, r3
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	db2a      	blt.n	8013a44 <tcp_timewait_input+0x84>
 80139ee:	4b21      	ldr	r3, [pc, #132]	; (8013a74 <tcp_timewait_input+0xb4>)
 80139f0:	681a      	ldr	r2, [r3, #0]
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f6:	6879      	ldr	r1, [r7, #4]
 80139f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80139fa:	440b      	add	r3, r1
 80139fc:	1ad3      	subs	r3, r2, r3
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	dc20      	bgt.n	8013a44 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a02:	4b1d      	ldr	r3, [pc, #116]	; (8013a78 <tcp_timewait_input+0xb8>)
 8013a04:	6818      	ldr	r0, [r3, #0]
 8013a06:	4b1d      	ldr	r3, [pc, #116]	; (8013a7c <tcp_timewait_input+0xbc>)
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	461a      	mov	r2, r3
 8013a0c:	4b19      	ldr	r3, [pc, #100]	; (8013a74 <tcp_timewait_input+0xb4>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a12:	4b1b      	ldr	r3, [pc, #108]	; (8013a80 <tcp_timewait_input+0xc0>)
 8013a14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a16:	885b      	ldrh	r3, [r3, #2]
 8013a18:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a1a:	4a19      	ldr	r2, [pc, #100]	; (8013a80 <tcp_timewait_input+0xc0>)
 8013a1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a1e:	8812      	ldrh	r2, [r2, #0]
 8013a20:	b292      	uxth	r2, r2
 8013a22:	9201      	str	r2, [sp, #4]
 8013a24:	9300      	str	r3, [sp, #0]
 8013a26:	4b17      	ldr	r3, [pc, #92]	; (8013a84 <tcp_timewait_input+0xc4>)
 8013a28:	4a17      	ldr	r2, [pc, #92]	; (8013a88 <tcp_timewait_input+0xc8>)
 8013a2a:	f002 fe55 	bl	80166d8 <tcp_rst>
      return;
 8013a2e:	e01b      	b.n	8013a68 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8013a30:	4b0f      	ldr	r3, [pc, #60]	; (8013a70 <tcp_timewait_input+0xb0>)
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	f003 0301 	and.w	r3, r3, #1
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d003      	beq.n	8013a44 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013a3c:	4b13      	ldr	r3, [pc, #76]	; (8013a8c <tcp_timewait_input+0xcc>)
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013a44:	4b0d      	ldr	r3, [pc, #52]	; (8013a7c <tcp_timewait_input+0xbc>)
 8013a46:	881b      	ldrh	r3, [r3, #0]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d00c      	beq.n	8013a66 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	7e9b      	ldrb	r3, [r3, #26]
 8013a50:	f043 0302 	orr.w	r3, r3, #2
 8013a54:	b2da      	uxtb	r2, r3
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f002 fbb8 	bl	80161d0 <tcp_output>
  }
  return;
 8013a60:	e001      	b.n	8013a66 <tcp_timewait_input+0xa6>
    return;
 8013a62:	bf00      	nop
 8013a64:	e000      	b.n	8013a68 <tcp_timewait_input+0xa8>
  return;
 8013a66:	bf00      	nop
}
 8013a68:	3708      	adds	r7, #8
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}
 8013a6e:	bf00      	nop
 8013a70:	2000511c 	.word	0x2000511c
 8013a74:	20005110 	.word	0x20005110
 8013a78:	20005114 	.word	0x20005114
 8013a7c:	2000511a 	.word	0x2000511a
 8013a80:	20005100 	.word	0x20005100
 8013a84:	200087d8 	.word	0x200087d8
 8013a88:	200087dc 	.word	0x200087dc
 8013a8c:	2000bedc 	.word	0x2000bedc

08013a90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b08a      	sub	sp, #40	; 0x28
 8013a94:	af02      	add	r7, sp, #8
 8013a96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013a98:	2300      	movs	r3, #0
 8013a9a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013aa0:	4b93      	ldr	r3, [pc, #588]	; (8013cf0 <tcp_process+0x260>)
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	f003 0304 	and.w	r3, r3, #4
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d04e      	beq.n	8013b4a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	7d1b      	ldrb	r3, [r3, #20]
 8013ab0:	2b02      	cmp	r3, #2
 8013ab2:	d108      	bne.n	8013ac6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ab8:	4b8e      	ldr	r3, [pc, #568]	; (8013cf4 <tcp_process+0x264>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d123      	bne.n	8013b08 <tcp_process+0x78>
        acceptable = 1;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	76fb      	strb	r3, [r7, #27]
 8013ac4:	e020      	b.n	8013b08 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013aca:	4b8b      	ldr	r3, [pc, #556]	; (8013cf8 <tcp_process+0x268>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	429a      	cmp	r2, r3
 8013ad0:	d102      	bne.n	8013ad8 <tcp_process+0x48>
        acceptable = 1;
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	76fb      	strb	r3, [r7, #27]
 8013ad6:	e017      	b.n	8013b08 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013ad8:	4b87      	ldr	r3, [pc, #540]	; (8013cf8 <tcp_process+0x268>)
 8013ada:	681a      	ldr	r2, [r3, #0]
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	db10      	blt.n	8013b08 <tcp_process+0x78>
 8013ae6:	4b84      	ldr	r3, [pc, #528]	; (8013cf8 <tcp_process+0x268>)
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aee:	6879      	ldr	r1, [r7, #4]
 8013af0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013af2:	440b      	add	r3, r1
 8013af4:	1ad3      	subs	r3, r2, r3
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	dc06      	bgt.n	8013b08 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	7e9b      	ldrb	r3, [r3, #26]
 8013afe:	f043 0302 	orr.w	r3, r3, #2
 8013b02:	b2da      	uxtb	r2, r3
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013b08:	7efb      	ldrb	r3, [r7, #27]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d01b      	beq.n	8013b46 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	7d1b      	ldrb	r3, [r3, #20]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d106      	bne.n	8013b24 <tcp_process+0x94>
 8013b16:	4b79      	ldr	r3, [pc, #484]	; (8013cfc <tcp_process+0x26c>)
 8013b18:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013b1c:	4978      	ldr	r1, [pc, #480]	; (8013d00 <tcp_process+0x270>)
 8013b1e:	4879      	ldr	r0, [pc, #484]	; (8013d04 <tcp_process+0x274>)
 8013b20:	f006 fdb2 	bl	801a688 <iprintf>
      recv_flags |= TF_RESET;
 8013b24:	4b78      	ldr	r3, [pc, #480]	; (8013d08 <tcp_process+0x278>)
 8013b26:	781b      	ldrb	r3, [r3, #0]
 8013b28:	f043 0308 	orr.w	r3, r3, #8
 8013b2c:	b2da      	uxtb	r2, r3
 8013b2e:	4b76      	ldr	r3, [pc, #472]	; (8013d08 <tcp_process+0x278>)
 8013b30:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	7e9b      	ldrb	r3, [r3, #26]
 8013b36:	f023 0301 	bic.w	r3, r3, #1
 8013b3a:	b2da      	uxtb	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8013b40:	f06f 030d 	mvn.w	r3, #13
 8013b44:	e348      	b.n	80141d8 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013b46:	2300      	movs	r3, #0
 8013b48:	e346      	b.n	80141d8 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013b4a:	4b69      	ldr	r3, [pc, #420]	; (8013cf0 <tcp_process+0x260>)
 8013b4c:	781b      	ldrb	r3, [r3, #0]
 8013b4e:	f003 0302 	and.w	r3, r3, #2
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d010      	beq.n	8013b78 <tcp_process+0xe8>
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	7d1b      	ldrb	r3, [r3, #20]
 8013b5a:	2b02      	cmp	r3, #2
 8013b5c:	d00c      	beq.n	8013b78 <tcp_process+0xe8>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	7d1b      	ldrb	r3, [r3, #20]
 8013b62:	2b03      	cmp	r3, #3
 8013b64:	d008      	beq.n	8013b78 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	7e9b      	ldrb	r3, [r3, #26]
 8013b6a:	f043 0302 	orr.w	r3, r3, #2
 8013b6e:	b2da      	uxtb	r2, r3
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8013b74:	2300      	movs	r3, #0
 8013b76:	e32f      	b.n	80141d8 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	7e9b      	ldrb	r3, [r3, #26]
 8013b7c:	f003 0310 	and.w	r3, r3, #16
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d103      	bne.n	8013b8c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013b84:	4b61      	ldr	r3, [pc, #388]	; (8013d0c <tcp_process+0x27c>)
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f001 fbd9 	bl	801534c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	7d1b      	ldrb	r3, [r3, #20]
 8013b9e:	3b02      	subs	r3, #2
 8013ba0:	2b07      	cmp	r3, #7
 8013ba2:	f200 8309 	bhi.w	80141b8 <tcp_process+0x728>
 8013ba6:	a201      	add	r2, pc, #4	; (adr r2, 8013bac <tcp_process+0x11c>)
 8013ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bac:	08013bcd 	.word	0x08013bcd
 8013bb0:	08013dc3 	.word	0x08013dc3
 8013bb4:	08013f1b 	.word	0x08013f1b
 8013bb8:	08013f45 	.word	0x08013f45
 8013bbc:	08014067 	.word	0x08014067
 8013bc0:	08013f1b 	.word	0x08013f1b
 8013bc4:	080140f3 	.word	0x080140f3
 8013bc8:	08014183 	.word	0x08014183
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013bcc:	4b48      	ldr	r3, [pc, #288]	; (8013cf0 <tcp_process+0x260>)
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	f003 0310 	and.w	r3, r3, #16
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f000 80ca 	beq.w	8013d6e <tcp_process+0x2de>
 8013bda:	4b45      	ldr	r3, [pc, #276]	; (8013cf0 <tcp_process+0x260>)
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	f003 0302 	and.w	r3, r3, #2
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f000 80c3 	beq.w	8013d6e <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bec:	1c5a      	adds	r2, r3, #1
 8013bee:	4b41      	ldr	r3, [pc, #260]	; (8013cf4 <tcp_process+0x264>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	429a      	cmp	r2, r3
 8013bf4:	f040 80bb 	bne.w	8013d6e <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8013bf8:	4b3f      	ldr	r3, [pc, #252]	; (8013cf8 <tcp_process+0x268>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	1c5a      	adds	r2, r3, #1
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8013c0a:	4b3a      	ldr	r3, [pc, #232]	; (8013cf4 <tcp_process+0x264>)
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8013c12:	4b3f      	ldr	r3, [pc, #252]	; (8013d10 <tcp_process+0x280>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	89db      	ldrh	r3, [r3, #14]
 8013c18:	b29a      	uxth	r2, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013c2c:	4b32      	ldr	r3, [pc, #200]	; (8013cf8 <tcp_process+0x268>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	1e5a      	subs	r2, r3, #1
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2204      	movs	r2, #4
 8013c3a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	3304      	adds	r3, #4
 8013c44:	4619      	mov	r1, r3
 8013c46:	4610      	mov	r0, r2
 8013c48:	f7ff f95a 	bl	8012f00 <tcp_eff_send_mss_impl>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	461a      	mov	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c58:	005b      	lsls	r3, r3, #1
 8013c5a:	f241 121c 	movw	r2, #4380	; 0x111c
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	bf38      	it	cc
 8013c62:	461a      	movcc	r2, r3
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	4293      	cmp	r3, r2
 8013c6c:	bf28      	it	cs
 8013c6e:	4613      	movcs	r3, r2
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d106      	bne.n	8013c90 <tcp_process+0x200>
 8013c82:	4b1e      	ldr	r3, [pc, #120]	; (8013cfc <tcp_process+0x26c>)
 8013c84:	f240 321a 	movw	r2, #794	; 0x31a
 8013c88:	4922      	ldr	r1, [pc, #136]	; (8013d14 <tcp_process+0x284>)
 8013c8a:	481e      	ldr	r0, [pc, #120]	; (8013d04 <tcp_process+0x274>)
 8013c8c:	f006 fcfc 	bl	801a688 <iprintf>
      --pcb->snd_queuelen;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c96:	3b01      	subs	r3, #1
 8013c98:	b29a      	uxth	r2, r3
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ca4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d111      	bne.n	8013cd0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cb0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8013cb2:	69fb      	ldr	r3, [r7, #28]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d106      	bne.n	8013cc6 <tcp_process+0x236>
 8013cb8:	4b10      	ldr	r3, [pc, #64]	; (8013cfc <tcp_process+0x26c>)
 8013cba:	f240 3222 	movw	r2, #802	; 0x322
 8013cbe:	4916      	ldr	r1, [pc, #88]	; (8013d18 <tcp_process+0x288>)
 8013cc0:	4810      	ldr	r0, [pc, #64]	; (8013d04 <tcp_process+0x274>)
 8013cc2:	f006 fce1 	bl	801a688 <iprintf>
        pcb->unsent = rseg->next;
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	669a      	str	r2, [r3, #104]	; 0x68
 8013cce:	e003      	b.n	8013cd8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8013cd8:	69f8      	ldr	r0, [r7, #28]
 8013cda:	f7fe fdd7 	bl	801288c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d11a      	bne.n	8013d1c <tcp_process+0x28c>
        pcb->rtime = -1;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cec:	861a      	strh	r2, [r3, #48]	; 0x30
 8013cee:	e01c      	b.n	8013d2a <tcp_process+0x29a>
 8013cf0:	2000511c 	.word	0x2000511c
 8013cf4:	20005114 	.word	0x20005114
 8013cf8:	20005110 	.word	0x20005110
 8013cfc:	0801d11c 	.word	0x0801d11c
 8013d00:	0801d2d4 	.word	0x0801d2d4
 8013d04:	0801d160 	.word	0x0801d160
 8013d08:	2000511d 	.word	0x2000511d
 8013d0c:	2000bedc 	.word	0x2000bedc
 8013d10:	20005100 	.word	0x20005100
 8013d14:	0801d2f4 	.word	0x0801d2f4
 8013d18:	0801d30c 	.word	0x0801d30c
      } else {
        pcb->rtime = 0;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2200      	movs	r2, #0
 8013d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d00a      	beq.n	8013d4a <tcp_process+0x2ba>
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	6910      	ldr	r0, [r2, #16]
 8013d3e:	2200      	movs	r2, #0
 8013d40:	6879      	ldr	r1, [r7, #4]
 8013d42:	4798      	blx	r3
 8013d44:	4603      	mov	r3, r0
 8013d46:	76bb      	strb	r3, [r7, #26]
 8013d48:	e001      	b.n	8013d4e <tcp_process+0x2be>
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8013d4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013d52:	f113 0f0d 	cmn.w	r3, #13
 8013d56:	d102      	bne.n	8013d5e <tcp_process+0x2ce>
        return ERR_ABRT;
 8013d58:	f06f 030c 	mvn.w	r3, #12
 8013d5c:	e23c      	b.n	80141d8 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	7e9b      	ldrb	r3, [r3, #26]
 8013d62:	f043 0302 	orr.w	r3, r3, #2
 8013d66:	b2da      	uxtb	r2, r3
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8013d6c:	e226      	b.n	80141bc <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8013d6e:	4b93      	ldr	r3, [pc, #588]	; (8013fbc <tcp_process+0x52c>)
 8013d70:	781b      	ldrb	r3, [r3, #0]
 8013d72:	f003 0310 	and.w	r3, r3, #16
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f000 8220 	beq.w	80141bc <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d7c:	4b90      	ldr	r3, [pc, #576]	; (8013fc0 <tcp_process+0x530>)
 8013d7e:	6818      	ldr	r0, [r3, #0]
 8013d80:	4b90      	ldr	r3, [pc, #576]	; (8013fc4 <tcp_process+0x534>)
 8013d82:	881b      	ldrh	r3, [r3, #0]
 8013d84:	461a      	mov	r2, r3
 8013d86:	4b90      	ldr	r3, [pc, #576]	; (8013fc8 <tcp_process+0x538>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d8c:	4b8f      	ldr	r3, [pc, #572]	; (8013fcc <tcp_process+0x53c>)
 8013d8e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d90:	885b      	ldrh	r3, [r3, #2]
 8013d92:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d94:	4a8d      	ldr	r2, [pc, #564]	; (8013fcc <tcp_process+0x53c>)
 8013d96:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d98:	8812      	ldrh	r2, [r2, #0]
 8013d9a:	b292      	uxth	r2, r2
 8013d9c:	9201      	str	r2, [sp, #4]
 8013d9e:	9300      	str	r3, [sp, #0]
 8013da0:	4b8b      	ldr	r3, [pc, #556]	; (8013fd0 <tcp_process+0x540>)
 8013da2:	4a8c      	ldr	r2, [pc, #560]	; (8013fd4 <tcp_process+0x544>)
 8013da4:	f002 fc98 	bl	80166d8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013dae:	2b05      	cmp	r3, #5
 8013db0:	f200 8204 	bhi.w	80141bc <tcp_process+0x72c>
        pcb->rtime = 0;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2200      	movs	r2, #0
 8013db8:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f002 fd02 	bl	80167c4 <tcp_rexmit_rto>
    break;
 8013dc0:	e1fc      	b.n	80141bc <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8013dc2:	4b7e      	ldr	r3, [pc, #504]	; (8013fbc <tcp_process+0x52c>)
 8013dc4:	781b      	ldrb	r3, [r3, #0]
 8013dc6:	f003 0310 	and.w	r3, r3, #16
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f000 8091 	beq.w	8013ef2 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8013dd0:	4b7b      	ldr	r3, [pc, #492]	; (8013fc0 <tcp_process+0x530>)
 8013dd2:	681a      	ldr	r2, [r3, #0]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dd8:	1ad3      	subs	r3, r2, r3
 8013dda:	3b01      	subs	r3, #1
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	db71      	blt.n	8013ec4 <tcp_process+0x434>
 8013de0:	4b77      	ldr	r3, [pc, #476]	; (8013fc0 <tcp_process+0x530>)
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013de8:	1ad3      	subs	r3, r2, r3
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	dc6a      	bgt.n	8013ec4 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2204      	movs	r2, #4
 8013df2:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d00b      	beq.n	8013e14 <tcp_process+0x384>
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e00:	699b      	ldr	r3, [r3, #24]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d106      	bne.n	8013e14 <tcp_process+0x384>
 8013e06:	4b74      	ldr	r3, [pc, #464]	; (8013fd8 <tcp_process+0x548>)
 8013e08:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013e0c:	4973      	ldr	r1, [pc, #460]	; (8013fdc <tcp_process+0x54c>)
 8013e0e:	4874      	ldr	r0, [pc, #464]	; (8013fe0 <tcp_process+0x550>)
 8013e10:	f006 fc3a 	bl	801a688 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d102      	bne.n	8013e22 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8013e1c:	23fa      	movs	r3, #250	; 0xfa
 8013e1e:	76bb      	strb	r3, [r7, #26]
 8013e20:	e011      	b.n	8013e46 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e26:	699b      	ldr	r3, [r3, #24]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d00a      	beq.n	8013e42 <tcp_process+0x3b2>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013e30:	699b      	ldr	r3, [r3, #24]
 8013e32:	687a      	ldr	r2, [r7, #4]
 8013e34:	6910      	ldr	r0, [r2, #16]
 8013e36:	2200      	movs	r2, #0
 8013e38:	6879      	ldr	r1, [r7, #4]
 8013e3a:	4798      	blx	r3
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	76bb      	strb	r3, [r7, #26]
 8013e40:	e001      	b.n	8013e46 <tcp_process+0x3b6>
 8013e42:	23f0      	movs	r3, #240	; 0xf0
 8013e44:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8013e46:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d00a      	beq.n	8013e64 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8013e4e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013e52:	f113 0f0d 	cmn.w	r3, #13
 8013e56:	d002      	beq.n	8013e5e <tcp_process+0x3ce>
            tcp_abort(pcb);
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7fd fe3b 	bl	8011ad4 <tcp_abort>
          }
          return ERR_ABRT;
 8013e5e:	f06f 030c 	mvn.w	r3, #12
 8013e62:	e1b9      	b.n	80141d8 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 fa3d 	bl	80142e4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8013e6a:	4b5e      	ldr	r3, [pc, #376]	; (8013fe4 <tcp_process+0x554>)
 8013e6c:	881b      	ldrh	r3, [r3, #0]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d005      	beq.n	8013e7e <tcp_process+0x3ee>
          recv_acked--;
 8013e72:	4b5c      	ldr	r3, [pc, #368]	; (8013fe4 <tcp_process+0x554>)
 8013e74:	881b      	ldrh	r3, [r3, #0]
 8013e76:	3b01      	subs	r3, #1
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	4b5a      	ldr	r3, [pc, #360]	; (8013fe4 <tcp_process+0x554>)
 8013e7c:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e82:	005b      	lsls	r3, r3, #1
 8013e84:	f241 121c 	movw	r2, #4380	; 0x111c
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	bf38      	it	cc
 8013e8c:	461a      	movcc	r2, r3
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e92:	009b      	lsls	r3, r3, #2
 8013e94:	4293      	cmp	r3, r2
 8013e96:	bf28      	it	cs
 8013e98:	4613      	movcs	r3, r2
 8013e9a:	b29a      	uxth	r2, r3
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8013ea2:	4b51      	ldr	r3, [pc, #324]	; (8013fe8 <tcp_process+0x558>)
 8013ea4:	781b      	ldrb	r3, [r3, #0]
 8013ea6:	f003 0320 	and.w	r3, r3, #32
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d034      	beq.n	8013f18 <tcp_process+0x488>
          tcp_ack_now(pcb);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	7e9b      	ldrb	r3, [r3, #26]
 8013eb2:	f043 0302 	orr.w	r3, r3, #2
 8013eb6:	b2da      	uxtb	r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2207      	movs	r2, #7
 8013ec0:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8013ec2:	e029      	b.n	8013f18 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ec4:	4b3e      	ldr	r3, [pc, #248]	; (8013fc0 <tcp_process+0x530>)
 8013ec6:	6818      	ldr	r0, [r3, #0]
 8013ec8:	4b3e      	ldr	r3, [pc, #248]	; (8013fc4 <tcp_process+0x534>)
 8013eca:	881b      	ldrh	r3, [r3, #0]
 8013ecc:	461a      	mov	r2, r3
 8013ece:	4b3e      	ldr	r3, [pc, #248]	; (8013fc8 <tcp_process+0x538>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ed4:	4b3d      	ldr	r3, [pc, #244]	; (8013fcc <tcp_process+0x53c>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ed8:	885b      	ldrh	r3, [r3, #2]
 8013eda:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013edc:	4a3b      	ldr	r2, [pc, #236]	; (8013fcc <tcp_process+0x53c>)
 8013ede:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ee0:	8812      	ldrh	r2, [r2, #0]
 8013ee2:	b292      	uxth	r2, r2
 8013ee4:	9201      	str	r2, [sp, #4]
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	4b39      	ldr	r3, [pc, #228]	; (8013fd0 <tcp_process+0x540>)
 8013eea:	4a3a      	ldr	r2, [pc, #232]	; (8013fd4 <tcp_process+0x544>)
 8013eec:	f002 fbf4 	bl	80166d8 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8013ef0:	e166      	b.n	80141c0 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013ef2:	4b32      	ldr	r3, [pc, #200]	; (8013fbc <tcp_process+0x52c>)
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	f003 0302 	and.w	r3, r3, #2
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	f000 8160 	beq.w	80141c0 <tcp_process+0x730>
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f04:	1e5a      	subs	r2, r3, #1
 8013f06:	4b30      	ldr	r3, [pc, #192]	; (8013fc8 <tcp_process+0x538>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	f040 8158 	bne.w	80141c0 <tcp_process+0x730>
      tcp_rexmit(pcb);
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f002 fc8d 	bl	8016830 <tcp_rexmit>
    break;
 8013f16:	e153      	b.n	80141c0 <tcp_process+0x730>
 8013f18:	e152      	b.n	80141c0 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 f9e2 	bl	80142e4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013f20:	4b31      	ldr	r3, [pc, #196]	; (8013fe8 <tcp_process+0x558>)
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	f003 0320 	and.w	r3, r3, #32
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 814b 	beq.w	80141c4 <tcp_process+0x734>
      tcp_ack_now(pcb);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	7e9b      	ldrb	r3, [r3, #26]
 8013f32:	f043 0302 	orr.w	r3, r3, #2
 8013f36:	b2da      	uxtb	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2207      	movs	r2, #7
 8013f40:	751a      	strb	r2, [r3, #20]
    }
    break;
 8013f42:	e13f      	b.n	80141c4 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f000 f9cd 	bl	80142e4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8013f4a:	4b27      	ldr	r3, [pc, #156]	; (8013fe8 <tcp_process+0x558>)
 8013f4c:	781b      	ldrb	r3, [r3, #0]
 8013f4e:	f003 0320 	and.w	r3, r3, #32
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d070      	beq.n	8014038 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f56:	4b19      	ldr	r3, [pc, #100]	; (8013fbc <tcp_process+0x52c>)
 8013f58:	781b      	ldrb	r3, [r3, #0]
 8013f5a:	f003 0310 	and.w	r3, r3, #16
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d05f      	beq.n	8014022 <tcp_process+0x592>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013f66:	4b16      	ldr	r3, [pc, #88]	; (8013fc0 <tcp_process+0x530>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	429a      	cmp	r2, r3
 8013f6c:	d159      	bne.n	8014022 <tcp_process+0x592>
          pcb->unsent == NULL) {
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d155      	bne.n	8014022 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	7e9b      	ldrb	r3, [r3, #26]
 8013f7a:	f043 0302 	orr.w	r3, r3, #2
 8013f7e:	b2da      	uxtb	r2, r3
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7fe fee7 	bl	8012d58 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013f8a:	4b18      	ldr	r3, [pc, #96]	; (8013fec <tcp_process+0x55c>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d105      	bne.n	8013fa0 <tcp_process+0x510>
 8013f94:	4b15      	ldr	r3, [pc, #84]	; (8013fec <tcp_process+0x55c>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	68db      	ldr	r3, [r3, #12]
 8013f9a:	4a14      	ldr	r2, [pc, #80]	; (8013fec <tcp_process+0x55c>)
 8013f9c:	6013      	str	r3, [r2, #0]
 8013f9e:	e02d      	b.n	8013ffc <tcp_process+0x56c>
 8013fa0:	4b12      	ldr	r3, [pc, #72]	; (8013fec <tcp_process+0x55c>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	617b      	str	r3, [r7, #20]
 8013fa6:	e026      	b.n	8013ff6 <tcp_process+0x566>
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	d11e      	bne.n	8013ff0 <tcp_process+0x560>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	68da      	ldr	r2, [r3, #12]
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	60da      	str	r2, [r3, #12]
 8013fba:	e01f      	b.n	8013ffc <tcp_process+0x56c>
 8013fbc:	2000511c 	.word	0x2000511c
 8013fc0:	20005114 	.word	0x20005114
 8013fc4:	2000511a 	.word	0x2000511a
 8013fc8:	20005110 	.word	0x20005110
 8013fcc:	20005100 	.word	0x20005100
 8013fd0:	200087d8 	.word	0x200087d8
 8013fd4:	200087dc 	.word	0x200087dc
 8013fd8:	0801d11c 	.word	0x0801d11c
 8013fdc:	0801d320 	.word	0x0801d320
 8013fe0:	0801d160 	.word	0x0801d160
 8013fe4:	20005118 	.word	0x20005118
 8013fe8:	2000511d 	.word	0x2000511d
 8013fec:	2000bed8 	.word	0x2000bed8
 8013ff0:	697b      	ldr	r3, [r7, #20]
 8013ff2:	68db      	ldr	r3, [r3, #12]
 8013ff4:	617b      	str	r3, [r7, #20]
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d1d5      	bne.n	8013fa8 <tcp_process+0x518>
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2200      	movs	r2, #0
 8014000:	60da      	str	r2, [r3, #12]
 8014002:	4b77      	ldr	r3, [pc, #476]	; (80141e0 <tcp_process+0x750>)
 8014004:	2201      	movs	r2, #1
 8014006:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	220a      	movs	r2, #10
 801400c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801400e:	4b75      	ldr	r3, [pc, #468]	; (80141e4 <tcp_process+0x754>)
 8014010:	681a      	ldr	r2, [r3, #0]
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	60da      	str	r2, [r3, #12]
 8014016:	4a73      	ldr	r2, [pc, #460]	; (80141e4 <tcp_process+0x754>)
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6013      	str	r3, [r2, #0]
 801401c:	f002 fda4 	bl	8016b68 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8014020:	e0d2      	b.n	80141c8 <tcp_process+0x738>
        tcp_ack_now(pcb);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	7e9b      	ldrb	r3, [r3, #26]
 8014026:	f043 0302 	orr.w	r3, r3, #2
 801402a:	b2da      	uxtb	r2, r3
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2208      	movs	r2, #8
 8014034:	751a      	strb	r2, [r3, #20]
    break;
 8014036:	e0c7      	b.n	80141c8 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014038:	4b6b      	ldr	r3, [pc, #428]	; (80141e8 <tcp_process+0x758>)
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	f003 0310 	and.w	r3, r3, #16
 8014040:	2b00      	cmp	r3, #0
 8014042:	f000 80c1 	beq.w	80141c8 <tcp_process+0x738>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801404a:	4b68      	ldr	r3, [pc, #416]	; (80141ec <tcp_process+0x75c>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	429a      	cmp	r2, r3
 8014050:	f040 80ba 	bne.w	80141c8 <tcp_process+0x738>
               pcb->unsent == NULL) {
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014058:	2b00      	cmp	r3, #0
 801405a:	f040 80b5 	bne.w	80141c8 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2206      	movs	r2, #6
 8014062:	751a      	strb	r2, [r3, #20]
    break;
 8014064:	e0b0      	b.n	80141c8 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8014066:	6878      	ldr	r0, [r7, #4]
 8014068:	f000 f93c 	bl	80142e4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801406c:	4b60      	ldr	r3, [pc, #384]	; (80141f0 <tcp_process+0x760>)
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	f003 0320 	and.w	r3, r3, #32
 8014074:	2b00      	cmp	r3, #0
 8014076:	f000 80a9 	beq.w	80141cc <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	7e9b      	ldrb	r3, [r3, #26]
 801407e:	f043 0302 	orr.w	r3, r3, #2
 8014082:	b2da      	uxtb	r2, r3
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f7fe fe65 	bl	8012d58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801408e:	4b59      	ldr	r3, [pc, #356]	; (80141f4 <tcp_process+0x764>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	429a      	cmp	r2, r3
 8014096:	d105      	bne.n	80140a4 <tcp_process+0x614>
 8014098:	4b56      	ldr	r3, [pc, #344]	; (80141f4 <tcp_process+0x764>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	4a55      	ldr	r2, [pc, #340]	; (80141f4 <tcp_process+0x764>)
 80140a0:	6013      	str	r3, [r2, #0]
 80140a2:	e013      	b.n	80140cc <tcp_process+0x63c>
 80140a4:	4b53      	ldr	r3, [pc, #332]	; (80141f4 <tcp_process+0x764>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	613b      	str	r3, [r7, #16]
 80140aa:	e00c      	b.n	80140c6 <tcp_process+0x636>
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	687a      	ldr	r2, [r7, #4]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d104      	bne.n	80140c0 <tcp_process+0x630>
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	68da      	ldr	r2, [r3, #12]
 80140ba:	693b      	ldr	r3, [r7, #16]
 80140bc:	60da      	str	r2, [r3, #12]
 80140be:	e005      	b.n	80140cc <tcp_process+0x63c>
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	613b      	str	r3, [r7, #16]
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d1ef      	bne.n	80140ac <tcp_process+0x61c>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2200      	movs	r2, #0
 80140d0:	60da      	str	r2, [r3, #12]
 80140d2:	4b43      	ldr	r3, [pc, #268]	; (80141e0 <tcp_process+0x750>)
 80140d4:	2201      	movs	r2, #1
 80140d6:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	220a      	movs	r2, #10
 80140dc:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80140de:	4b41      	ldr	r3, [pc, #260]	; (80141e4 <tcp_process+0x754>)
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	60da      	str	r2, [r3, #12]
 80140e6:	4a3f      	ldr	r2, [pc, #252]	; (80141e4 <tcp_process+0x754>)
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6013      	str	r3, [r2, #0]
 80140ec:	f002 fd3c 	bl	8016b68 <tcp_timer_needed>
    }
    break;
 80140f0:	e06c      	b.n	80141cc <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 80140f2:	6878      	ldr	r0, [r7, #4]
 80140f4:	f000 f8f6 	bl	80142e4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80140f8:	4b3b      	ldr	r3, [pc, #236]	; (80141e8 <tcp_process+0x758>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	f003 0310 	and.w	r3, r3, #16
 8014100:	2b00      	cmp	r3, #0
 8014102:	d065      	beq.n	80141d0 <tcp_process+0x740>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014108:	4b38      	ldr	r3, [pc, #224]	; (80141ec <tcp_process+0x75c>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	429a      	cmp	r2, r3
 801410e:	d15f      	bne.n	80141d0 <tcp_process+0x740>
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014114:	2b00      	cmp	r3, #0
 8014116:	d15b      	bne.n	80141d0 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7fe fe1d 	bl	8012d58 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801411e:	4b35      	ldr	r3, [pc, #212]	; (80141f4 <tcp_process+0x764>)
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	429a      	cmp	r2, r3
 8014126:	d105      	bne.n	8014134 <tcp_process+0x6a4>
 8014128:	4b32      	ldr	r3, [pc, #200]	; (80141f4 <tcp_process+0x764>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	68db      	ldr	r3, [r3, #12]
 801412e:	4a31      	ldr	r2, [pc, #196]	; (80141f4 <tcp_process+0x764>)
 8014130:	6013      	str	r3, [r2, #0]
 8014132:	e013      	b.n	801415c <tcp_process+0x6cc>
 8014134:	4b2f      	ldr	r3, [pc, #188]	; (80141f4 <tcp_process+0x764>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	60fb      	str	r3, [r7, #12]
 801413a:	e00c      	b.n	8014156 <tcp_process+0x6c6>
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	429a      	cmp	r2, r3
 8014144:	d104      	bne.n	8014150 <tcp_process+0x6c0>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	68da      	ldr	r2, [r3, #12]
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	60da      	str	r2, [r3, #12]
 801414e:	e005      	b.n	801415c <tcp_process+0x6cc>
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	60fb      	str	r3, [r7, #12]
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d1ef      	bne.n	801413c <tcp_process+0x6ac>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2200      	movs	r2, #0
 8014160:	60da      	str	r2, [r3, #12]
 8014162:	4b1f      	ldr	r3, [pc, #124]	; (80141e0 <tcp_process+0x750>)
 8014164:	2201      	movs	r2, #1
 8014166:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	220a      	movs	r2, #10
 801416c:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801416e:	4b1d      	ldr	r3, [pc, #116]	; (80141e4 <tcp_process+0x754>)
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	60da      	str	r2, [r3, #12]
 8014176:	4a1b      	ldr	r2, [pc, #108]	; (80141e4 <tcp_process+0x754>)
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6013      	str	r3, [r2, #0]
 801417c:	f002 fcf4 	bl	8016b68 <tcp_timer_needed>
    }
    break;
 8014180:	e026      	b.n	80141d0 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 f8ae 	bl	80142e4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014188:	4b17      	ldr	r3, [pc, #92]	; (80141e8 <tcp_process+0x758>)
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	f003 0310 	and.w	r3, r3, #16
 8014190:	2b00      	cmp	r3, #0
 8014192:	d01f      	beq.n	80141d4 <tcp_process+0x744>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014198:	4b14      	ldr	r3, [pc, #80]	; (80141ec <tcp_process+0x75c>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	429a      	cmp	r2, r3
 801419e:	d119      	bne.n	80141d4 <tcp_process+0x744>
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d115      	bne.n	80141d4 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80141a8:	4b11      	ldr	r3, [pc, #68]	; (80141f0 <tcp_process+0x760>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	f043 0310 	orr.w	r3, r3, #16
 80141b0:	b2da      	uxtb	r2, r3
 80141b2:	4b0f      	ldr	r3, [pc, #60]	; (80141f0 <tcp_process+0x760>)
 80141b4:	701a      	strb	r2, [r3, #0]
    }
    break;
 80141b6:	e00d      	b.n	80141d4 <tcp_process+0x744>
  default:
    break;
 80141b8:	bf00      	nop
 80141ba:	e00c      	b.n	80141d6 <tcp_process+0x746>
    break;
 80141bc:	bf00      	nop
 80141be:	e00a      	b.n	80141d6 <tcp_process+0x746>
    break;
 80141c0:	bf00      	nop
 80141c2:	e008      	b.n	80141d6 <tcp_process+0x746>
    break;
 80141c4:	bf00      	nop
 80141c6:	e006      	b.n	80141d6 <tcp_process+0x746>
    break;
 80141c8:	bf00      	nop
 80141ca:	e004      	b.n	80141d6 <tcp_process+0x746>
    break;
 80141cc:	bf00      	nop
 80141ce:	e002      	b.n	80141d6 <tcp_process+0x746>
    break;
 80141d0:	bf00      	nop
 80141d2:	e000      	b.n	80141d6 <tcp_process+0x746>
    break;
 80141d4:	bf00      	nop
  }
  return ERR_OK;
 80141d6:	2300      	movs	r3, #0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3720      	adds	r7, #32
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	2000bed4 	.word	0x2000bed4
 80141e4:	2000bee8 	.word	0x2000bee8
 80141e8:	2000511c 	.word	0x2000511c
 80141ec:	20005114 	.word	0x20005114
 80141f0:	2000511d 	.word	0x2000511d
 80141f4:	2000bed8 	.word	0x2000bed8

080141f8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80141f8:	b590      	push	{r4, r7, lr}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	899b      	ldrh	r3, [r3, #12]
 8014208:	b29b      	uxth	r3, r3
 801420a:	4618      	mov	r0, r3
 801420c:	f7fb fc9c 	bl	800fb48 <lwip_htons>
 8014210:	4603      	mov	r3, r0
 8014212:	f003 0301 	and.w	r3, r3, #1
 8014216:	2b00      	cmp	r3, #0
 8014218:	d027      	beq.n	801426a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801421a:	6838      	ldr	r0, [r7, #0]
 801421c:	f7fe fb21 	bl	8012862 <tcp_segs_free>
    next = NULL;
 8014220:	2300      	movs	r3, #0
 8014222:	603b      	str	r3, [r7, #0]
 8014224:	e055      	b.n	80142d2 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	899b      	ldrh	r3, [r3, #12]
 801422c:	b29b      	uxth	r3, r3
 801422e:	4618      	mov	r0, r3
 8014230:	f7fb fc8a 	bl	800fb48 <lwip_htons>
 8014234:	4603      	mov	r3, r0
 8014236:	f003 0301 	and.w	r3, r3, #1
 801423a:	2b00      	cmp	r3, #0
 801423c:	d00d      	beq.n	801425a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	68db      	ldr	r3, [r3, #12]
 8014242:	899b      	ldrh	r3, [r3, #12]
 8014244:	b29c      	uxth	r4, r3
 8014246:	2001      	movs	r0, #1
 8014248:	f7fb fc7e 	bl	800fb48 <lwip_htons>
 801424c:	4603      	mov	r3, r0
 801424e:	461a      	mov	r2, r3
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	68db      	ldr	r3, [r3, #12]
 8014254:	4322      	orrs	r2, r4
 8014256:	b292      	uxth	r2, r2
 8014258:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f7fe fb11 	bl	801288c <tcp_seg_free>
    while (next &&
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d00e      	beq.n	801428e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	891b      	ldrh	r3, [r3, #8]
 8014274:	461a      	mov	r2, r3
 8014276:	4b1a      	ldr	r3, [pc, #104]	; (80142e0 <tcp_oos_insert_segment+0xe8>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	441a      	add	r2, r3
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	685b      	ldr	r3, [r3, #4]
 8014282:	6839      	ldr	r1, [r7, #0]
 8014284:	8909      	ldrh	r1, [r1, #8]
 8014286:	440b      	add	r3, r1
 8014288:	1ad3      	subs	r3, r2, r3
    while (next &&
 801428a:	2b00      	cmp	r3, #0
 801428c:	dacb      	bge.n	8014226 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d01e      	beq.n	80142d2 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	891b      	ldrh	r3, [r3, #8]
 8014298:	461a      	mov	r2, r3
 801429a:	4b11      	ldr	r3, [pc, #68]	; (80142e0 <tcp_oos_insert_segment+0xe8>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	441a      	add	r2, r3
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	68db      	ldr	r3, [r3, #12]
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	dd12      	ble.n	80142d2 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	685b      	ldr	r3, [r3, #4]
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	4b0a      	ldr	r3, [pc, #40]	; (80142e0 <tcp_oos_insert_segment+0xe8>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	1ad3      	subs	r3, r2, r3
 80142bc:	b29a      	uxth	r2, r3
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	685a      	ldr	r2, [r3, #4]
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	891b      	ldrh	r3, [r3, #8]
 80142ca:	4619      	mov	r1, r3
 80142cc:	4610      	mov	r0, r2
 80142ce:	f7fc fd29 	bl	8010d24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	683a      	ldr	r2, [r7, #0]
 80142d6:	601a      	str	r2, [r3, #0]
}
 80142d8:	bf00      	nop
 80142da:	3714      	adds	r7, #20
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd90      	pop	{r4, r7, pc}
 80142e0:	20005110 	.word	0x20005110

080142e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80142e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142e6:	b08d      	sub	sp, #52	; 0x34
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80142ec:	2300      	movs	r3, #0
 80142ee:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	7d1b      	ldrb	r3, [r3, #20]
 80142f4:	2b03      	cmp	r3, #3
 80142f6:	d806      	bhi.n	8014306 <tcp_receive+0x22>
 80142f8:	4b98      	ldr	r3, [pc, #608]	; (801455c <tcp_receive+0x278>)
 80142fa:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80142fe:	4998      	ldr	r1, [pc, #608]	; (8014560 <tcp_receive+0x27c>)
 8014300:	4898      	ldr	r0, [pc, #608]	; (8014564 <tcp_receive+0x280>)
 8014302:	f006 f9c1 	bl	801a688 <iprintf>

  if (flags & TCP_ACK) {
 8014306:	4b98      	ldr	r3, [pc, #608]	; (8014568 <tcp_receive+0x284>)
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	f003 0310 	and.w	r3, r3, #16
 801430e:	2b00      	cmp	r3, #0
 8014310:	f000 82c1 	beq.w	8014896 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801431a:	461a      	mov	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014320:	4413      	add	r3, r2
 8014322:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014328:	4b90      	ldr	r3, [pc, #576]	; (801456c <tcp_receive+0x288>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	1ad3      	subs	r3, r2, r3
 801432e:	2b00      	cmp	r3, #0
 8014330:	db1b      	blt.n	801436a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014336:	4b8d      	ldr	r3, [pc, #564]	; (801456c <tcp_receive+0x288>)
 8014338:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801433a:	429a      	cmp	r2, r3
 801433c:	d106      	bne.n	801434c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014342:	4b8b      	ldr	r3, [pc, #556]	; (8014570 <tcp_receive+0x28c>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	1ad3      	subs	r3, r2, r3
 8014348:	2b00      	cmp	r3, #0
 801434a:	db0e      	blt.n	801436a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014350:	4b87      	ldr	r3, [pc, #540]	; (8014570 <tcp_receive+0x28c>)
 8014352:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014354:	429a      	cmp	r2, r3
 8014356:	d141      	bne.n	80143dc <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014358:	4b86      	ldr	r3, [pc, #536]	; (8014574 <tcp_receive+0x290>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	89db      	ldrh	r3, [r3, #14]
 801435e:	b29a      	uxth	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014366:	429a      	cmp	r2, r3
 8014368:	d938      	bls.n	80143dc <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801436a:	4b82      	ldr	r3, [pc, #520]	; (8014574 <tcp_receive+0x290>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	89db      	ldrh	r3, [r3, #14]
 8014370:	b29a      	uxth	r2, r3
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014384:	429a      	cmp	r2, r3
 8014386:	d205      	bcs.n	8014394 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8014394:	4b75      	ldr	r3, [pc, #468]	; (801456c <tcp_receive+0x288>)
 8014396:	681a      	ldr	r2, [r3, #0]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 801439c:	4b74      	ldr	r3, [pc, #464]	; (8014570 <tcp_receive+0x28c>)
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d10d      	bne.n	80143ca <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d111      	bne.n	80143dc <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2200      	movs	r2, #0
 80143bc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2201      	movs	r2, #1
 80143c4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80143c8:	e008      	b.n	80143dc <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d003      	beq.n	80143dc <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2200      	movs	r2, #0
 80143d8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80143dc:	4b64      	ldr	r3, [pc, #400]	; (8014570 <tcp_receive+0x28c>)
 80143de:	681a      	ldr	r2, [r3, #0]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143e4:	1ad3      	subs	r3, r2, r3
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	dc53      	bgt.n	8014492 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80143ea:	4b63      	ldr	r3, [pc, #396]	; (8014578 <tcp_receive+0x294>)
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d146      	bne.n	8014480 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80143fc:	4413      	add	r3, r2
 80143fe:	697a      	ldr	r2, [r7, #20]
 8014400:	429a      	cmp	r2, r3
 8014402:	d13d      	bne.n	8014480 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801440a:	2b00      	cmp	r3, #0
 801440c:	db38      	blt.n	8014480 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014412:	4b57      	ldr	r3, [pc, #348]	; (8014570 <tcp_receive+0x28c>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	429a      	cmp	r2, r3
 8014418:	d132      	bne.n	8014480 <tcp_receive+0x19c>
              found_dupack = 1;
 801441a:	2301      	movs	r3, #1
 801441c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014424:	2bff      	cmp	r3, #255	; 0xff
 8014426:	d007      	beq.n	8014438 <tcp_receive+0x154>
                ++pcb->dupacks;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801442e:	3301      	adds	r3, #1
 8014430:	b2da      	uxtb	r2, r3
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801443e:	2b03      	cmp	r3, #3
 8014440:	d916      	bls.n	8014470 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801444c:	4413      	add	r3, r2
 801444e:	b29a      	uxth	r2, r3
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014456:	429a      	cmp	r2, r3
 8014458:	d912      	bls.n	8014480 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014464:	4413      	add	r3, r2
 8014466:	b29a      	uxth	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801446e:	e007      	b.n	8014480 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014476:	2b03      	cmp	r3, #3
 8014478:	d102      	bne.n	8014480 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f002 fa28 	bl	80168d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	2b00      	cmp	r3, #0
 8014484:	f040 816a 	bne.w	801475c <tcp_receive+0x478>
        pcb->dupacks = 0;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2200      	movs	r2, #0
 801448c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014490:	e164      	b.n	801475c <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8014492:	4b37      	ldr	r3, [pc, #220]	; (8014570 <tcp_receive+0x28c>)
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	3b01      	subs	r3, #1
 801449e:	2b00      	cmp	r3, #0
 80144a0:	f2c0 8108 	blt.w	80146b4 <tcp_receive+0x3d0>
 80144a4:	4b32      	ldr	r3, [pc, #200]	; (8014570 <tcp_receive+0x28c>)
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80144ac:	1ad3      	subs	r3, r2, r3
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	f300 8100 	bgt.w	80146b4 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	7e9b      	ldrb	r3, [r3, #26]
 80144b8:	f003 0304 	and.w	r3, r3, #4
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d00c      	beq.n	80144da <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	7e9b      	ldrb	r3, [r3, #26]
 80144c4:	f023 0304 	bic.w	r3, r3, #4
 80144c8:	b2da      	uxtb	r2, r3
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80144e8:	10db      	asrs	r3, r3, #3
 80144ea:	b21b      	sxth	r3, r3
 80144ec:	b29a      	uxth	r2, r3
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	4413      	add	r3, r2
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	b21a      	sxth	r2, r3
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	2200      	movs	r2, #0
 8014506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801450a:	4b19      	ldr	r3, [pc, #100]	; (8014570 <tcp_receive+0x28c>)
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	7d1b      	ldrb	r3, [r3, #20]
 8014516:	2b03      	cmp	r3, #3
 8014518:	f240 8095 	bls.w	8014646 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014528:	429a      	cmp	r2, r3
 801452a:	d227      	bcs.n	801457c <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014536:	4413      	add	r3, r2
 8014538:	b29a      	uxth	r2, r3
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014540:	429a      	cmp	r2, r3
 8014542:	f240 8080 	bls.w	8014646 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014550:	4413      	add	r3, r2
 8014552:	b29a      	uxth	r2, r3
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801455a:	e074      	b.n	8014646 <tcp_receive+0x362>
 801455c:	0801d11c 	.word	0x0801d11c
 8014560:	0801d340 	.word	0x0801d340
 8014564:	0801d160 	.word	0x0801d160
 8014568:	2000511c 	.word	0x2000511c
 801456c:	20005110 	.word	0x20005110
 8014570:	20005114 	.word	0x20005114
 8014574:	20005100 	.word	0x20005100
 8014578:	2000511a 	.word	0x2000511a
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014586:	4619      	mov	r1, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801458c:	fb01 f303 	mul.w	r3, r1, r3
 8014590:	6879      	ldr	r1, [r7, #4]
 8014592:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8014596:	fb93 f3f1 	sdiv	r3, r3, r1
 801459a:	b29b      	uxth	r3, r3
 801459c:	4413      	add	r3, r2
 801459e:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80145a6:	8a7a      	ldrh	r2, [r7, #18]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d94c      	bls.n	8014646 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	8a7a      	ldrh	r2, [r7, #18]
 80145b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80145b4:	e047      	b.n	8014646 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145c0:	681a      	ldr	r2, [r3, #0]
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80145cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	4618      	mov	r0, r3
 80145d2:	f7fc fdb5 	bl	8011140 <pbuf_clen>
 80145d6:	4603      	mov	r3, r0
 80145d8:	429c      	cmp	r4, r3
 80145da:	d206      	bcs.n	80145ea <tcp_receive+0x306>
 80145dc:	4b70      	ldr	r3, [pc, #448]	; (80147a0 <tcp_receive+0x4bc>)
 80145de:	f240 429e 	movw	r2, #1182	; 0x49e
 80145e2:	4970      	ldr	r1, [pc, #448]	; (80147a4 <tcp_receive+0x4c0>)
 80145e4:	4870      	ldr	r0, [pc, #448]	; (80147a8 <tcp_receive+0x4c4>)
 80145e6:	f006 f84f 	bl	801a688 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80145ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fc fda6 	bl	8011140 <pbuf_clen>
 80145f4:	4603      	mov	r3, r0
 80145f6:	461a      	mov	r2, r3
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80145fe:	1a9b      	subs	r3, r3, r2
 8014600:	b29a      	uxth	r2, r3
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8014608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801460a:	891a      	ldrh	r2, [r3, #8]
 801460c:	4b67      	ldr	r3, [pc, #412]	; (80147ac <tcp_receive+0x4c8>)
 801460e:	881b      	ldrh	r3, [r3, #0]
 8014610:	4413      	add	r3, r2
 8014612:	b29a      	uxth	r2, r3
 8014614:	4b65      	ldr	r3, [pc, #404]	; (80147ac <tcp_receive+0x4c8>)
 8014616:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8014618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801461a:	f7fe f937 	bl	801288c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014624:	2b00      	cmp	r3, #0
 8014626:	d00e      	beq.n	8014646 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801462c:	2b00      	cmp	r3, #0
 801462e:	d10a      	bne.n	8014646 <tcp_receive+0x362>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014634:	2b00      	cmp	r3, #0
 8014636:	d106      	bne.n	8014646 <tcp_receive+0x362>
 8014638:	4b59      	ldr	r3, [pc, #356]	; (80147a0 <tcp_receive+0x4bc>)
 801463a:	f240 42a6 	movw	r2, #1190	; 0x4a6
 801463e:	495c      	ldr	r1, [pc, #368]	; (80147b0 <tcp_receive+0x4cc>)
 8014640:	4859      	ldr	r0, [pc, #356]	; (80147a8 <tcp_receive+0x4c4>)
 8014642:	f006 f821 	bl	801a688 <iprintf>
      while (pcb->unacked != NULL &&
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801464a:	2b00      	cmp	r3, #0
 801464c:	d022      	beq.n	8014694 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	685b      	ldr	r3, [r3, #4]
 8014656:	4618      	mov	r0, r3
 8014658:	f7fb fa83 	bl	800fb62 <lwip_htonl>
 801465c:	4604      	mov	r4, r0
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014662:	891b      	ldrh	r3, [r3, #8]
 8014664:	461d      	mov	r5, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	899b      	ldrh	r3, [r3, #12]
 801466e:	b29b      	uxth	r3, r3
 8014670:	4618      	mov	r0, r3
 8014672:	f7fb fa69 	bl	800fb48 <lwip_htons>
 8014676:	4603      	mov	r3, r0
 8014678:	f003 0303 	and.w	r3, r3, #3
 801467c:	2b00      	cmp	r3, #0
 801467e:	d001      	beq.n	8014684 <tcp_receive+0x3a0>
 8014680:	2301      	movs	r3, #1
 8014682:	e000      	b.n	8014686 <tcp_receive+0x3a2>
 8014684:	2300      	movs	r3, #0
 8014686:	442b      	add	r3, r5
 8014688:	18e2      	adds	r2, r4, r3
 801468a:	4b4a      	ldr	r3, [pc, #296]	; (80147b4 <tcp_receive+0x4d0>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8014690:	2b00      	cmp	r3, #0
 8014692:	dd90      	ble.n	80145b6 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014698:	2b00      	cmp	r3, #0
 801469a:	d104      	bne.n	80146a6 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80146a4:	e002      	b.n	80146ac <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2200      	movs	r2, #0
 80146b0:	76da      	strb	r2, [r3, #27]
 80146b2:	e002      	b.n	80146ba <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f001 fd2f 	bl	8016118 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80146ba:	e04f      	b.n	801475c <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146c6:	681a      	ldr	r2, [r3, #0]
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d103      	bne.n	80146dc <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2200      	movs	r2, #0
 80146d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80146e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e4:	685b      	ldr	r3, [r3, #4]
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7fc fd2a 	bl	8011140 <pbuf_clen>
 80146ec:	4603      	mov	r3, r0
 80146ee:	429c      	cmp	r4, r3
 80146f0:	d206      	bcs.n	8014700 <tcp_receive+0x41c>
 80146f2:	4b2b      	ldr	r3, [pc, #172]	; (80147a0 <tcp_receive+0x4bc>)
 80146f4:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80146f8:	492a      	ldr	r1, [pc, #168]	; (80147a4 <tcp_receive+0x4c0>)
 80146fa:	482b      	ldr	r0, [pc, #172]	; (80147a8 <tcp_receive+0x4c4>)
 80146fc:	f005 ffc4 	bl	801a688 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8014700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	4618      	mov	r0, r3
 8014706:	f7fc fd1b 	bl	8011140 <pbuf_clen>
 801470a:	4603      	mov	r3, r0
 801470c:	461a      	mov	r2, r3
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014714:	1a9b      	subs	r3, r3, r2
 8014716:	b29a      	uxth	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 801471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014720:	891a      	ldrh	r2, [r3, #8]
 8014722:	4b22      	ldr	r3, [pc, #136]	; (80147ac <tcp_receive+0x4c8>)
 8014724:	881b      	ldrh	r3, [r3, #0]
 8014726:	4413      	add	r3, r2
 8014728:	b29a      	uxth	r2, r3
 801472a:	4b20      	ldr	r3, [pc, #128]	; (80147ac <tcp_receive+0x4c8>)
 801472c:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 801472e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014730:	f7fe f8ac 	bl	801288c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00e      	beq.n	801475c <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014742:	2b00      	cmp	r3, #0
 8014744:	d10a      	bne.n	801475c <tcp_receive+0x478>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801474a:	2b00      	cmp	r3, #0
 801474c:	d106      	bne.n	801475c <tcp_receive+0x478>
 801474e:	4b14      	ldr	r3, [pc, #80]	; (80147a0 <tcp_receive+0x4bc>)
 8014750:	f240 42dc 	movw	r2, #1244	; 0x4dc
 8014754:	4916      	ldr	r1, [pc, #88]	; (80147b0 <tcp_receive+0x4cc>)
 8014756:	4814      	ldr	r0, [pc, #80]	; (80147a8 <tcp_receive+0x4c4>)
 8014758:	f005 ff96 	bl	801a688 <iprintf>
    while (pcb->unsent != NULL &&
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014760:	2b00      	cmp	r3, #0
 8014762:	d037      	beq.n	80147d4 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014764:	4b13      	ldr	r3, [pc, #76]	; (80147b4 <tcp_receive+0x4d0>)
 8014766:	681c      	ldr	r4, [r3, #0]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801476c:	68db      	ldr	r3, [r3, #12]
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	4618      	mov	r0, r3
 8014772:	f7fb f9f6 	bl	800fb62 <lwip_htonl>
 8014776:	4605      	mov	r5, r0
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801477c:	891b      	ldrh	r3, [r3, #8]
 801477e:	461e      	mov	r6, r3
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	899b      	ldrh	r3, [r3, #12]
 8014788:	b29b      	uxth	r3, r3
 801478a:	4618      	mov	r0, r3
 801478c:	f7fb f9dc 	bl	800fb48 <lwip_htons>
 8014790:	4603      	mov	r3, r0
 8014792:	f003 0303 	and.w	r3, r3, #3
 8014796:	2b00      	cmp	r3, #0
 8014798:	d00e      	beq.n	80147b8 <tcp_receive+0x4d4>
 801479a:	2301      	movs	r3, #1
 801479c:	e00d      	b.n	80147ba <tcp_receive+0x4d6>
 801479e:	bf00      	nop
 80147a0:	0801d11c 	.word	0x0801d11c
 80147a4:	0801d35c 	.word	0x0801d35c
 80147a8:	0801d160 	.word	0x0801d160
 80147ac:	20005118 	.word	0x20005118
 80147b0:	0801d384 	.word	0x0801d384
 80147b4:	20005114 	.word	0x20005114
 80147b8:	2300      	movs	r3, #0
 80147ba:	4433      	add	r3, r6
 80147bc:	442b      	add	r3, r5
 80147be:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	db07      	blt.n	80147d4 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80147c4:	4b8d      	ldr	r3, [pc, #564]	; (80149fc <tcp_receive+0x718>)
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147cc:	1ad3      	subs	r3, r2, r3
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	f77f af74 	ble.w	80146bc <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80147da:	4b89      	ldr	r3, [pc, #548]	; (8014a00 <tcp_receive+0x71c>)
 80147dc:	881b      	ldrh	r3, [r3, #0]
 80147de:	4413      	add	r3, r2
 80147e0:	b29a      	uxth	r2, r3
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d052      	beq.n	8014896 <tcp_receive+0x5b2>
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80147f4:	4b81      	ldr	r3, [pc, #516]	; (80149fc <tcp_receive+0x718>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	1ad3      	subs	r3, r2, r3
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	da4b      	bge.n	8014896 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80147fe:	4b81      	ldr	r3, [pc, #516]	; (8014a04 <tcp_receive+0x720>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	b29a      	uxth	r2, r3
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014808:	b29b      	uxth	r3, r3
 801480a:	1ad3      	subs	r3, r2, r3
 801480c:	b29b      	uxth	r3, r3
 801480e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8014810:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014818:	10db      	asrs	r3, r3, #3
 801481a:	b21b      	sxth	r3, r3
 801481c:	b29b      	uxth	r3, r3
 801481e:	1ad3      	subs	r3, r2, r3
 8014820:	b29b      	uxth	r3, r3
 8014822:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801482a:	b29a      	uxth	r2, r3
 801482c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801482e:	4413      	add	r3, r2
 8014830:	b29b      	uxth	r3, r3
 8014832:	b21a      	sxth	r2, r3
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014838:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801483c:	2b00      	cmp	r3, #0
 801483e:	da03      	bge.n	8014848 <tcp_receive+0x564>
        m = -m;
 8014840:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014842:	425b      	negs	r3, r3
 8014844:	b29b      	uxth	r3, r3
 8014846:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8014848:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014850:	109b      	asrs	r3, r3, #2
 8014852:	b21b      	sxth	r3, r3
 8014854:	b29b      	uxth	r3, r3
 8014856:	1ad3      	subs	r3, r2, r3
 8014858:	b29b      	uxth	r3, r3
 801485a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014862:	b29a      	uxth	r2, r3
 8014864:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014866:	4413      	add	r3, r2
 8014868:	b29b      	uxth	r3, r3
 801486a:	b21a      	sxth	r2, r3
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014876:	10db      	asrs	r3, r3, #3
 8014878:	b21b      	sxth	r3, r3
 801487a:	b29a      	uxth	r2, r3
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014882:	b29b      	uxth	r3, r3
 8014884:	4413      	add	r3, r2
 8014886:	b29b      	uxth	r3, r3
 8014888:	b21a      	sxth	r2, r3
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2200      	movs	r2, #0
 8014894:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014896:	4b5c      	ldr	r3, [pc, #368]	; (8014a08 <tcp_receive+0x724>)
 8014898:	881b      	ldrh	r3, [r3, #0]
 801489a:	2b00      	cmp	r3, #0
 801489c:	f000 84f1 	beq.w	8015282 <tcp_receive+0xf9e>
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	7d1b      	ldrb	r3, [r3, #20]
 80148a4:	2b06      	cmp	r3, #6
 80148a6:	f200 84ec 	bhi.w	8015282 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148ae:	4b57      	ldr	r3, [pc, #348]	; (8014a0c <tcp_receive+0x728>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	1ad3      	subs	r3, r2, r3
 80148b4:	3b01      	subs	r3, #1
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f2c0 80b8 	blt.w	8014a2c <tcp_receive+0x748>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148c0:	4b51      	ldr	r3, [pc, #324]	; (8014a08 <tcp_receive+0x724>)
 80148c2:	881b      	ldrh	r3, [r3, #0]
 80148c4:	4619      	mov	r1, r3
 80148c6:	4b51      	ldr	r3, [pc, #324]	; (8014a0c <tcp_receive+0x728>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	440b      	add	r3, r1
 80148cc:	1ad3      	subs	r3, r2, r3
 80148ce:	3301      	adds	r3, #1
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	f300 80ab 	bgt.w	8014a2c <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80148d6:	4b4e      	ldr	r3, [pc, #312]	; (8014a10 <tcp_receive+0x72c>)
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148e0:	4b4a      	ldr	r3, [pc, #296]	; (8014a0c <tcp_receive+0x728>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	1ad3      	subs	r3, r2, r3
 80148e6:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80148e8:	4b49      	ldr	r3, [pc, #292]	; (8014a10 <tcp_receive+0x72c>)
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d106      	bne.n	80148fe <tcp_receive+0x61a>
 80148f0:	4b48      	ldr	r3, [pc, #288]	; (8014a14 <tcp_receive+0x730>)
 80148f2:	f240 523c 	movw	r2, #1340	; 0x53c
 80148f6:	4948      	ldr	r1, [pc, #288]	; (8014a18 <tcp_receive+0x734>)
 80148f8:	4848      	ldr	r0, [pc, #288]	; (8014a1c <tcp_receive+0x738>)
 80148fa:	f005 fec5 	bl	801a688 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80148fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014900:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014904:	4293      	cmp	r3, r2
 8014906:	dd06      	ble.n	8014916 <tcp_receive+0x632>
 8014908:	4b42      	ldr	r3, [pc, #264]	; (8014a14 <tcp_receive+0x730>)
 801490a:	f240 523d 	movw	r2, #1341	; 0x53d
 801490e:	4944      	ldr	r1, [pc, #272]	; (8014a20 <tcp_receive+0x73c>)
 8014910:	4842      	ldr	r0, [pc, #264]	; (8014a1c <tcp_receive+0x738>)
 8014912:	f005 feb9 	bl	801a688 <iprintf>
      if (inseg.p->len < off) {
 8014916:	4b3e      	ldr	r3, [pc, #248]	; (8014a10 <tcp_receive+0x72c>)
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	895b      	ldrh	r3, [r3, #10]
 801491c:	461a      	mov	r2, r3
 801491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014920:	4293      	cmp	r3, r2
 8014922:	dd3e      	ble.n	80149a2 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014924:	4b3a      	ldr	r3, [pc, #232]	; (8014a10 <tcp_receive+0x72c>)
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	891b      	ldrh	r3, [r3, #8]
 801492a:	461a      	mov	r2, r3
 801492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492e:	4293      	cmp	r3, r2
 8014930:	dd06      	ble.n	8014940 <tcp_receive+0x65c>
 8014932:	4b38      	ldr	r3, [pc, #224]	; (8014a14 <tcp_receive+0x730>)
 8014934:	f240 523f 	movw	r2, #1343	; 0x53f
 8014938:	493a      	ldr	r1, [pc, #232]	; (8014a24 <tcp_receive+0x740>)
 801493a:	4838      	ldr	r0, [pc, #224]	; (8014a1c <tcp_receive+0x738>)
 801493c:	f005 fea4 	bl	801a688 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014940:	4b33      	ldr	r3, [pc, #204]	; (8014a10 <tcp_receive+0x72c>)
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	891a      	ldrh	r2, [r3, #8]
 8014946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014948:	b29b      	uxth	r3, r3
 801494a:	1ad3      	subs	r3, r2, r3
 801494c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 801494e:	e00e      	b.n	801496e <tcp_receive+0x68a>
          off -= p->len;
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	895b      	ldrh	r3, [r3, #10]
 8014954:	461a      	mov	r2, r3
 8014956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014958:	1a9b      	subs	r3, r3, r2
 801495a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 801495c:	69bb      	ldr	r3, [r7, #24]
 801495e:	8a3a      	ldrh	r2, [r7, #16]
 8014960:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	2200      	movs	r2, #0
 8014966:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8014968:	69bb      	ldr	r3, [r7, #24]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	895b      	ldrh	r3, [r3, #10]
 8014972:	461a      	mov	r2, r3
 8014974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014976:	4293      	cmp	r3, r2
 8014978:	dcea      	bgt.n	8014950 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	b29b      	uxth	r3, r3
 801497e:	425b      	negs	r3, r3
 8014980:	b29b      	uxth	r3, r3
 8014982:	b21b      	sxth	r3, r3
 8014984:	4619      	mov	r1, r3
 8014986:	69b8      	ldr	r0, [r7, #24]
 8014988:	f7fc fb1c 	bl	8010fc4 <pbuf_header>
 801498c:	4603      	mov	r3, r0
 801498e:	2b00      	cmp	r3, #0
 8014990:	d01c      	beq.n	80149cc <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8014992:	4b20      	ldr	r3, [pc, #128]	; (8014a14 <tcp_receive+0x730>)
 8014994:	f240 524c 	movw	r2, #1356	; 0x54c
 8014998:	4923      	ldr	r1, [pc, #140]	; (8014a28 <tcp_receive+0x744>)
 801499a:	4820      	ldr	r0, [pc, #128]	; (8014a1c <tcp_receive+0x738>)
 801499c:	f005 fe74 	bl	801a688 <iprintf>
 80149a0:	e014      	b.n	80149cc <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80149a2:	4b1b      	ldr	r3, [pc, #108]	; (8014a10 <tcp_receive+0x72c>)
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149a8:	b292      	uxth	r2, r2
 80149aa:	4252      	negs	r2, r2
 80149ac:	b292      	uxth	r2, r2
 80149ae:	b212      	sxth	r2, r2
 80149b0:	4611      	mov	r1, r2
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7fc fb06 	bl	8010fc4 <pbuf_header>
 80149b8:	4603      	mov	r3, r0
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d006      	beq.n	80149cc <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80149be:	4b15      	ldr	r3, [pc, #84]	; (8014a14 <tcp_receive+0x730>)
 80149c0:	f240 5251 	movw	r2, #1361	; 0x551
 80149c4:	4918      	ldr	r1, [pc, #96]	; (8014a28 <tcp_receive+0x744>)
 80149c6:	4815      	ldr	r0, [pc, #84]	; (8014a1c <tcp_receive+0x738>)
 80149c8:	f005 fe5e 	bl	801a688 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80149cc:	4b10      	ldr	r3, [pc, #64]	; (8014a10 <tcp_receive+0x72c>)
 80149ce:	891a      	ldrh	r2, [r3, #8]
 80149d0:	4b0e      	ldr	r3, [pc, #56]	; (8014a0c <tcp_receive+0x728>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	b299      	uxth	r1, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149da:	b29b      	uxth	r3, r3
 80149dc:	1acb      	subs	r3, r1, r3
 80149de:	b29b      	uxth	r3, r3
 80149e0:	4413      	add	r3, r2
 80149e2:	b29a      	uxth	r2, r3
 80149e4:	4b0a      	ldr	r3, [pc, #40]	; (8014a10 <tcp_receive+0x72c>)
 80149e6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ec:	4a07      	ldr	r2, [pc, #28]	; (8014a0c <tcp_receive+0x728>)
 80149ee:	6013      	str	r3, [r2, #0]
 80149f0:	4b07      	ldr	r3, [pc, #28]	; (8014a10 <tcp_receive+0x72c>)
 80149f2:	68db      	ldr	r3, [r3, #12]
 80149f4:	4a05      	ldr	r2, [pc, #20]	; (8014a0c <tcp_receive+0x728>)
 80149f6:	6812      	ldr	r2, [r2, #0]
 80149f8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80149fa:	e025      	b.n	8014a48 <tcp_receive+0x764>
 80149fc:	20005114 	.word	0x20005114
 8014a00:	20005118 	.word	0x20005118
 8014a04:	2000bedc 	.word	0x2000bedc
 8014a08:	2000511a 	.word	0x2000511a
 8014a0c:	20005110 	.word	0x20005110
 8014a10:	200050f0 	.word	0x200050f0
 8014a14:	0801d11c 	.word	0x0801d11c
 8014a18:	0801d3a4 	.word	0x0801d3a4
 8014a1c:	0801d160 	.word	0x0801d160
 8014a20:	0801d3b4 	.word	0x0801d3b4
 8014a24:	0801d3c4 	.word	0x0801d3c4
 8014a28:	0801d3d4 	.word	0x0801d3d4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014a2c:	4b87      	ldr	r3, [pc, #540]	; (8014c4c <tcp_receive+0x968>)
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a34:	1ad3      	subs	r3, r2, r3
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	da06      	bge.n	8014a48 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	7e9b      	ldrb	r3, [r3, #26]
 8014a3e:	f043 0302 	orr.w	r3, r3, #2
 8014a42:	b2da      	uxtb	r2, r3
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014a48:	4b80      	ldr	r3, [pc, #512]	; (8014c4c <tcp_receive+0x968>)
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a50:	1ad3      	subs	r3, r2, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	f2c0 8410 	blt.w	8015278 <tcp_receive+0xf94>
 8014a58:	4b7c      	ldr	r3, [pc, #496]	; (8014c4c <tcp_receive+0x968>)
 8014a5a:	681a      	ldr	r2, [r3, #0]
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a60:	6879      	ldr	r1, [r7, #4]
 8014a62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a64:	440b      	add	r3, r1
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	3301      	adds	r3, #1
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	f300 8404 	bgt.w	8015278 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a74:	4b75      	ldr	r3, [pc, #468]	; (8014c4c <tcp_receive+0x968>)
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	f040 8287 	bne.w	8014f8c <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014a7e:	4b74      	ldr	r3, [pc, #464]	; (8014c50 <tcp_receive+0x96c>)
 8014a80:	891c      	ldrh	r4, [r3, #8]
 8014a82:	4b73      	ldr	r3, [pc, #460]	; (8014c50 <tcp_receive+0x96c>)
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	899b      	ldrh	r3, [r3, #12]
 8014a88:	b29b      	uxth	r3, r3
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fb f85c 	bl	800fb48 <lwip_htons>
 8014a90:	4603      	mov	r3, r0
 8014a92:	f003 0303 	and.w	r3, r3, #3
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d001      	beq.n	8014a9e <tcp_receive+0x7ba>
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	e000      	b.n	8014aa0 <tcp_receive+0x7bc>
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	4423      	add	r3, r4
 8014aa2:	b29a      	uxth	r2, r3
 8014aa4:	4b6b      	ldr	r3, [pc, #428]	; (8014c54 <tcp_receive+0x970>)
 8014aa6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014aac:	4b69      	ldr	r3, [pc, #420]	; (8014c54 <tcp_receive+0x970>)
 8014aae:	881b      	ldrh	r3, [r3, #0]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d26e      	bcs.n	8014b92 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014ab4:	4b66      	ldr	r3, [pc, #408]	; (8014c50 <tcp_receive+0x96c>)
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	899b      	ldrh	r3, [r3, #12]
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fb f843 	bl	800fb48 <lwip_htons>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	f003 0301 	and.w	r3, r3, #1
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d01b      	beq.n	8014b04 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014acc:	4b60      	ldr	r3, [pc, #384]	; (8014c50 <tcp_receive+0x96c>)
 8014ace:	68db      	ldr	r3, [r3, #12]
 8014ad0:	899b      	ldrh	r3, [r3, #12]
 8014ad2:	b29b      	uxth	r3, r3
 8014ad4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014ad8:	b29c      	uxth	r4, r3
 8014ada:	4b5d      	ldr	r3, [pc, #372]	; (8014c50 <tcp_receive+0x96c>)
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	899b      	ldrh	r3, [r3, #12]
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7fb f830 	bl	800fb48 <lwip_htons>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7fb f829 	bl	800fb48 <lwip_htons>
 8014af6:	4603      	mov	r3, r0
 8014af8:	461a      	mov	r2, r3
 8014afa:	4b55      	ldr	r3, [pc, #340]	; (8014c50 <tcp_receive+0x96c>)
 8014afc:	68db      	ldr	r3, [r3, #12]
 8014afe:	4322      	orrs	r2, r4
 8014b00:	b292      	uxth	r2, r2
 8014b02:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014b08:	4b51      	ldr	r3, [pc, #324]	; (8014c50 <tcp_receive+0x96c>)
 8014b0a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014b0c:	4b50      	ldr	r3, [pc, #320]	; (8014c50 <tcp_receive+0x96c>)
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	899b      	ldrh	r3, [r3, #12]
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7fb f817 	bl	800fb48 <lwip_htons>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	f003 0302 	and.w	r3, r3, #2
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d005      	beq.n	8014b30 <tcp_receive+0x84c>
            inseg.len -= 1;
 8014b24:	4b4a      	ldr	r3, [pc, #296]	; (8014c50 <tcp_receive+0x96c>)
 8014b26:	891b      	ldrh	r3, [r3, #8]
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	b29a      	uxth	r2, r3
 8014b2c:	4b48      	ldr	r3, [pc, #288]	; (8014c50 <tcp_receive+0x96c>)
 8014b2e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014b30:	4b47      	ldr	r3, [pc, #284]	; (8014c50 <tcp_receive+0x96c>)
 8014b32:	685b      	ldr	r3, [r3, #4]
 8014b34:	4a46      	ldr	r2, [pc, #280]	; (8014c50 <tcp_receive+0x96c>)
 8014b36:	8912      	ldrh	r2, [r2, #8]
 8014b38:	4611      	mov	r1, r2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fc f8f2 	bl	8010d24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014b40:	4b43      	ldr	r3, [pc, #268]	; (8014c50 <tcp_receive+0x96c>)
 8014b42:	891c      	ldrh	r4, [r3, #8]
 8014b44:	4b42      	ldr	r3, [pc, #264]	; (8014c50 <tcp_receive+0x96c>)
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	899b      	ldrh	r3, [r3, #12]
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7fa fffb 	bl	800fb48 <lwip_htons>
 8014b52:	4603      	mov	r3, r0
 8014b54:	f003 0303 	and.w	r3, r3, #3
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d001      	beq.n	8014b60 <tcp_receive+0x87c>
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	e000      	b.n	8014b62 <tcp_receive+0x87e>
 8014b60:	2300      	movs	r3, #0
 8014b62:	4423      	add	r3, r4
 8014b64:	b29a      	uxth	r2, r3
 8014b66:	4b3b      	ldr	r3, [pc, #236]	; (8014c54 <tcp_receive+0x970>)
 8014b68:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014b6a:	4b3a      	ldr	r3, [pc, #232]	; (8014c54 <tcp_receive+0x970>)
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	461a      	mov	r2, r3
 8014b70:	4b36      	ldr	r3, [pc, #216]	; (8014c4c <tcp_receive+0x968>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	441a      	add	r2, r3
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7a:	6879      	ldr	r1, [r7, #4]
 8014b7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b7e:	440b      	add	r3, r1
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d006      	beq.n	8014b92 <tcp_receive+0x8ae>
 8014b84:	4b34      	ldr	r3, [pc, #208]	; (8014c58 <tcp_receive+0x974>)
 8014b86:	f240 527e 	movw	r2, #1406	; 0x57e
 8014b8a:	4934      	ldr	r1, [pc, #208]	; (8014c5c <tcp_receive+0x978>)
 8014b8c:	4834      	ldr	r0, [pc, #208]	; (8014c60 <tcp_receive+0x97c>)
 8014b8e:	f005 fd7b 	bl	801a688 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 80e1 	beq.w	8014d5e <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014b9c:	4b2c      	ldr	r3, [pc, #176]	; (8014c50 <tcp_receive+0x96c>)
 8014b9e:	68db      	ldr	r3, [r3, #12]
 8014ba0:	899b      	ldrh	r3, [r3, #12]
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f7fa ffcf 	bl	800fb48 <lwip_htons>
 8014baa:	4603      	mov	r3, r0
 8014bac:	f003 0301 	and.w	r3, r3, #1
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d010      	beq.n	8014bd6 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014bb4:	e00a      	b.n	8014bcc <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bba:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8014bc6:	68b8      	ldr	r0, [r7, #8]
 8014bc8:	f7fd fe60 	bl	801288c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d1f0      	bne.n	8014bb6 <tcp_receive+0x8d2>
 8014bd4:	e0c3      	b.n	8014d5e <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bda:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014bdc:	e04f      	b.n	8014c7e <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014be0:	68db      	ldr	r3, [r3, #12]
 8014be2:	899b      	ldrh	r3, [r3, #12]
 8014be4:	b29b      	uxth	r3, r3
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7fa ffae 	bl	800fb48 <lwip_htons>
 8014bec:	4603      	mov	r3, r0
 8014bee:	f003 0301 	and.w	r3, r3, #1
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d03b      	beq.n	8014c6e <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014bf6:	4b16      	ldr	r3, [pc, #88]	; (8014c50 <tcp_receive+0x96c>)
 8014bf8:	68db      	ldr	r3, [r3, #12]
 8014bfa:	899b      	ldrh	r3, [r3, #12]
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7fa ffa2 	bl	800fb48 <lwip_htons>
 8014c04:	4603      	mov	r3, r0
 8014c06:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d12f      	bne.n	8014c6e <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014c0e:	4b10      	ldr	r3, [pc, #64]	; (8014c50 <tcp_receive+0x96c>)
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	899b      	ldrh	r3, [r3, #12]
 8014c14:	b29c      	uxth	r4, r3
 8014c16:	2001      	movs	r0, #1
 8014c18:	f7fa ff96 	bl	800fb48 <lwip_htons>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	461a      	mov	r2, r3
 8014c20:	4b0b      	ldr	r3, [pc, #44]	; (8014c50 <tcp_receive+0x96c>)
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	4322      	orrs	r2, r4
 8014c26:	b292      	uxth	r2, r2
 8014c28:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014c2a:	4b09      	ldr	r3, [pc, #36]	; (8014c50 <tcp_receive+0x96c>)
 8014c2c:	891c      	ldrh	r4, [r3, #8]
 8014c2e:	4b08      	ldr	r3, [pc, #32]	; (8014c50 <tcp_receive+0x96c>)
 8014c30:	68db      	ldr	r3, [r3, #12]
 8014c32:	899b      	ldrh	r3, [r3, #12]
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	4618      	mov	r0, r3
 8014c38:	f7fa ff86 	bl	800fb48 <lwip_htons>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	f003 0303 	and.w	r3, r3, #3
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00e      	beq.n	8014c64 <tcp_receive+0x980>
 8014c46:	2301      	movs	r3, #1
 8014c48:	e00d      	b.n	8014c66 <tcp_receive+0x982>
 8014c4a:	bf00      	nop
 8014c4c:	20005110 	.word	0x20005110
 8014c50:	200050f0 	.word	0x200050f0
 8014c54:	2000511a 	.word	0x2000511a
 8014c58:	0801d11c 	.word	0x0801d11c
 8014c5c:	0801d3e8 	.word	0x0801d3e8
 8014c60:	0801d160 	.word	0x0801d160
 8014c64:	2300      	movs	r3, #0
 8014c66:	4423      	add	r3, r4
 8014c68:	b29a      	uxth	r2, r3
 8014c6a:	4b95      	ldr	r3, [pc, #596]	; (8014ec0 <tcp_receive+0xbdc>)
 8014c6c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8014c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c70:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8014c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8014c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c7a:	f7fd fe07 	bl	801288c <tcp_seg_free>
            while (next &&
 8014c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d00e      	beq.n	8014ca2 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014c84:	4b8e      	ldr	r3, [pc, #568]	; (8014ec0 <tcp_receive+0xbdc>)
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	461a      	mov	r2, r3
 8014c8a:	4b8e      	ldr	r3, [pc, #568]	; (8014ec4 <tcp_receive+0xbe0>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	441a      	add	r2, r3
 8014c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	685b      	ldr	r3, [r3, #4]
 8014c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c98:	8909      	ldrh	r1, [r1, #8]
 8014c9a:	440b      	add	r3, r1
 8014c9c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	da9d      	bge.n	8014bde <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d057      	beq.n	8014d58 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8014ca8:	4b85      	ldr	r3, [pc, #532]	; (8014ec0 <tcp_receive+0xbdc>)
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	461a      	mov	r2, r3
 8014cae:	4b85      	ldr	r3, [pc, #532]	; (8014ec4 <tcp_receive+0xbe0>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	441a      	add	r2, r3
 8014cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb6:	68db      	ldr	r3, [r3, #12]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	dd4b      	ble.n	8014d58 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc2:	68db      	ldr	r3, [r3, #12]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	b29a      	uxth	r2, r3
 8014cc8:	4b7e      	ldr	r3, [pc, #504]	; (8014ec4 <tcp_receive+0xbe0>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	b29b      	uxth	r3, r3
 8014cce:	1ad3      	subs	r3, r2, r3
 8014cd0:	b29a      	uxth	r2, r3
 8014cd2:	4b7d      	ldr	r3, [pc, #500]	; (8014ec8 <tcp_receive+0xbe4>)
 8014cd4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014cd6:	4b7c      	ldr	r3, [pc, #496]	; (8014ec8 <tcp_receive+0xbe4>)
 8014cd8:	68db      	ldr	r3, [r3, #12]
 8014cda:	899b      	ldrh	r3, [r3, #12]
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7fa ff32 	bl	800fb48 <lwip_htons>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	f003 0302 	and.w	r3, r3, #2
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d005      	beq.n	8014cfa <tcp_receive+0xa16>
                inseg.len -= 1;
 8014cee:	4b76      	ldr	r3, [pc, #472]	; (8014ec8 <tcp_receive+0xbe4>)
 8014cf0:	891b      	ldrh	r3, [r3, #8]
 8014cf2:	3b01      	subs	r3, #1
 8014cf4:	b29a      	uxth	r2, r3
 8014cf6:	4b74      	ldr	r3, [pc, #464]	; (8014ec8 <tcp_receive+0xbe4>)
 8014cf8:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014cfa:	4b73      	ldr	r3, [pc, #460]	; (8014ec8 <tcp_receive+0xbe4>)
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	4a72      	ldr	r2, [pc, #456]	; (8014ec8 <tcp_receive+0xbe4>)
 8014d00:	8912      	ldrh	r2, [r2, #8]
 8014d02:	4611      	mov	r1, r2
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7fc f80d 	bl	8010d24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014d0a:	4b6f      	ldr	r3, [pc, #444]	; (8014ec8 <tcp_receive+0xbe4>)
 8014d0c:	891c      	ldrh	r4, [r3, #8]
 8014d0e:	4b6e      	ldr	r3, [pc, #440]	; (8014ec8 <tcp_receive+0xbe4>)
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	899b      	ldrh	r3, [r3, #12]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fa ff16 	bl	800fb48 <lwip_htons>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	f003 0303 	and.w	r3, r3, #3
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d001      	beq.n	8014d2a <tcp_receive+0xa46>
 8014d26:	2301      	movs	r3, #1
 8014d28:	e000      	b.n	8014d2c <tcp_receive+0xa48>
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	4423      	add	r3, r4
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	4b63      	ldr	r3, [pc, #396]	; (8014ec0 <tcp_receive+0xbdc>)
 8014d32:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014d34:	4b62      	ldr	r3, [pc, #392]	; (8014ec0 <tcp_receive+0xbdc>)
 8014d36:	881b      	ldrh	r3, [r3, #0]
 8014d38:	461a      	mov	r2, r3
 8014d3a:	4b62      	ldr	r3, [pc, #392]	; (8014ec4 <tcp_receive+0xbe0>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	441a      	add	r2, r3
 8014d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d006      	beq.n	8014d58 <tcp_receive+0xa74>
 8014d4a:	4b60      	ldr	r3, [pc, #384]	; (8014ecc <tcp_receive+0xbe8>)
 8014d4c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8014d50:	495f      	ldr	r1, [pc, #380]	; (8014ed0 <tcp_receive+0xbec>)
 8014d52:	4860      	ldr	r0, [pc, #384]	; (8014ed4 <tcp_receive+0xbf0>)
 8014d54:	f005 fc98 	bl	801a688 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d5c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014d5e:	4b58      	ldr	r3, [pc, #352]	; (8014ec0 <tcp_receive+0xbdc>)
 8014d60:	881b      	ldrh	r3, [r3, #0]
 8014d62:	461a      	mov	r2, r3
 8014d64:	4b57      	ldr	r3, [pc, #348]	; (8014ec4 <tcp_receive+0xbe0>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	441a      	add	r2, r3
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014d72:	4b53      	ldr	r3, [pc, #332]	; (8014ec0 <tcp_receive+0xbdc>)
 8014d74:	881b      	ldrh	r3, [r3, #0]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d206      	bcs.n	8014d88 <tcp_receive+0xaa4>
 8014d7a:	4b54      	ldr	r3, [pc, #336]	; (8014ecc <tcp_receive+0xbe8>)
 8014d7c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014d80:	4955      	ldr	r1, [pc, #340]	; (8014ed8 <tcp_receive+0xbf4>)
 8014d82:	4854      	ldr	r0, [pc, #336]	; (8014ed4 <tcp_receive+0xbf0>)
 8014d84:	f005 fc80 	bl	801a688 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014d8c:	4b4c      	ldr	r3, [pc, #304]	; (8014ec0 <tcp_receive+0xbdc>)
 8014d8e:	881b      	ldrh	r3, [r3, #0]
 8014d90:	1ad3      	subs	r3, r2, r3
 8014d92:	b29a      	uxth	r2, r3
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f7fc fff3 	bl	8011d84 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014d9e:	4b4a      	ldr	r3, [pc, #296]	; (8014ec8 <tcp_receive+0xbe4>)
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	891b      	ldrh	r3, [r3, #8]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d006      	beq.n	8014db6 <tcp_receive+0xad2>
          recv_data = inseg.p;
 8014da8:	4b47      	ldr	r3, [pc, #284]	; (8014ec8 <tcp_receive+0xbe4>)
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	4a4b      	ldr	r2, [pc, #300]	; (8014edc <tcp_receive+0xbf8>)
 8014dae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014db0:	4b45      	ldr	r3, [pc, #276]	; (8014ec8 <tcp_receive+0xbe4>)
 8014db2:	2200      	movs	r2, #0
 8014db4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014db6:	4b44      	ldr	r3, [pc, #272]	; (8014ec8 <tcp_receive+0xbe4>)
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	899b      	ldrh	r3, [r3, #12]
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	f7fa fec2 	bl	800fb48 <lwip_htons>
 8014dc4:	4603      	mov	r3, r0
 8014dc6:	f003 0301 	and.w	r3, r3, #1
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	f000 80b4 	beq.w	8014f38 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014dd0:	4b43      	ldr	r3, [pc, #268]	; (8014ee0 <tcp_receive+0xbfc>)
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	f043 0320 	orr.w	r3, r3, #32
 8014dd8:	b2da      	uxtb	r2, r3
 8014dda:	4b41      	ldr	r3, [pc, #260]	; (8014ee0 <tcp_receive+0xbfc>)
 8014ddc:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014dde:	e0ab      	b.n	8014f38 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014de4:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014dea:	68db      	ldr	r3, [r3, #12]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	4a35      	ldr	r2, [pc, #212]	; (8014ec4 <tcp_receive+0xbe0>)
 8014df0:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	891b      	ldrh	r3, [r3, #8]
 8014df6:	461c      	mov	r4, r3
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	68db      	ldr	r3, [r3, #12]
 8014dfc:	899b      	ldrh	r3, [r3, #12]
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fa fea1 	bl	800fb48 <lwip_htons>
 8014e06:	4603      	mov	r3, r0
 8014e08:	f003 0303 	and.w	r3, r3, #3
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d001      	beq.n	8014e14 <tcp_receive+0xb30>
 8014e10:	2301      	movs	r3, #1
 8014e12:	e000      	b.n	8014e16 <tcp_receive+0xb32>
 8014e14:	2300      	movs	r3, #0
 8014e16:	191a      	adds	r2, r3, r4
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e1c:	441a      	add	r2, r3
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e26:	461c      	mov	r4, r3
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	891b      	ldrh	r3, [r3, #8]
 8014e2c:	461d      	mov	r5, r3
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	899b      	ldrh	r3, [r3, #12]
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	4618      	mov	r0, r3
 8014e38:	f7fa fe86 	bl	800fb48 <lwip_htons>
 8014e3c:	4603      	mov	r3, r0
 8014e3e:	f003 0303 	and.w	r3, r3, #3
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d001      	beq.n	8014e4a <tcp_receive+0xb66>
 8014e46:	2301      	movs	r3, #1
 8014e48:	e000      	b.n	8014e4c <tcp_receive+0xb68>
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	442b      	add	r3, r5
 8014e4e:	429c      	cmp	r4, r3
 8014e50:	d206      	bcs.n	8014e60 <tcp_receive+0xb7c>
 8014e52:	4b1e      	ldr	r3, [pc, #120]	; (8014ecc <tcp_receive+0xbe8>)
 8014e54:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8014e58:	4922      	ldr	r1, [pc, #136]	; (8014ee4 <tcp_receive+0xc00>)
 8014e5a:	481e      	ldr	r0, [pc, #120]	; (8014ed4 <tcp_receive+0xbf0>)
 8014e5c:	f005 fc14 	bl	801a688 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	891b      	ldrh	r3, [r3, #8]
 8014e64:	461c      	mov	r4, r3
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	68db      	ldr	r3, [r3, #12]
 8014e6a:	899b      	ldrh	r3, [r3, #12]
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fa fe6a 	bl	800fb48 <lwip_htons>
 8014e74:	4603      	mov	r3, r0
 8014e76:	f003 0303 	and.w	r3, r3, #3
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d001      	beq.n	8014e82 <tcp_receive+0xb9e>
 8014e7e:	2301      	movs	r3, #1
 8014e80:	e000      	b.n	8014e84 <tcp_receive+0xba0>
 8014e82:	2300      	movs	r3, #0
 8014e84:	1919      	adds	r1, r3, r4
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014e8a:	b28b      	uxth	r3, r1
 8014e8c:	1ad3      	subs	r3, r2, r3
 8014e8e:	b29a      	uxth	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f7fc ff75 	bl	8011d84 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	891b      	ldrh	r3, [r3, #8]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d028      	beq.n	8014ef6 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014ea4:	4b0d      	ldr	r3, [pc, #52]	; (8014edc <tcp_receive+0xbf8>)
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d01d      	beq.n	8014ee8 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8014eac:	4b0b      	ldr	r3, [pc, #44]	; (8014edc <tcp_receive+0xbf8>)
 8014eae:	681a      	ldr	r2, [r3, #0]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	4610      	mov	r0, r2
 8014eb8:	f7fc f980 	bl	80111bc <pbuf_cat>
 8014ebc:	e018      	b.n	8014ef0 <tcp_receive+0xc0c>
 8014ebe:	bf00      	nop
 8014ec0:	2000511a 	.word	0x2000511a
 8014ec4:	20005110 	.word	0x20005110
 8014ec8:	200050f0 	.word	0x200050f0
 8014ecc:	0801d11c 	.word	0x0801d11c
 8014ed0:	0801d420 	.word	0x0801d420
 8014ed4:	0801d160 	.word	0x0801d160
 8014ed8:	0801d45c 	.word	0x0801d45c
 8014edc:	20005120 	.word	0x20005120
 8014ee0:	2000511d 	.word	0x2000511d
 8014ee4:	0801d47c 	.word	0x0801d47c
            } else {
              recv_data = cseg->p;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	4a71      	ldr	r2, [pc, #452]	; (80150b4 <tcp_receive+0xdd0>)
 8014eee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	899b      	ldrh	r3, [r3, #12]
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	4618      	mov	r0, r3
 8014f00:	f7fa fe22 	bl	800fb48 <lwip_htons>
 8014f04:	4603      	mov	r3, r0
 8014f06:	f003 0301 	and.w	r3, r3, #1
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d00d      	beq.n	8014f2a <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014f0e:	4b6a      	ldr	r3, [pc, #424]	; (80150b8 <tcp_receive+0xdd4>)
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	f043 0320 	orr.w	r3, r3, #32
 8014f16:	b2da      	uxtb	r2, r3
 8014f18:	4b67      	ldr	r3, [pc, #412]	; (80150b8 <tcp_receive+0xdd4>)
 8014f1a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	7d1b      	ldrb	r3, [r3, #20]
 8014f20:	2b04      	cmp	r3, #4
 8014f22:	d102      	bne.n	8014f2a <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	2207      	movs	r2, #7
 8014f28:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	681a      	ldr	r2, [r3, #0]
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8014f32:	68f8      	ldr	r0, [r7, #12]
 8014f34:	f7fd fcaa 	bl	801288c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d008      	beq.n	8014f52 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f44:	68db      	ldr	r3, [r3, #12]
 8014f46:	685a      	ldr	r2, [r3, #4]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	f43f af47 	beq.w	8014de0 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	7e9b      	ldrb	r3, [r3, #26]
 8014f56:	f003 0301 	and.w	r3, r3, #1
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d00e      	beq.n	8014f7c <tcp_receive+0xc98>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	7e9b      	ldrb	r3, [r3, #26]
 8014f62:	f023 0301 	bic.w	r3, r3, #1
 8014f66:	b2da      	uxtb	r2, r3
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	769a      	strb	r2, [r3, #26]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	7e9b      	ldrb	r3, [r3, #26]
 8014f70:	f043 0302 	orr.w	r3, r3, #2
 8014f74:	b2da      	uxtb	r2, r3
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014f7a:	e181      	b.n	8015280 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	7e9b      	ldrb	r3, [r3, #26]
 8014f80:	f043 0301 	orr.w	r3, r3, #1
 8014f84:	b2da      	uxtb	r2, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014f8a:	e179      	b.n	8015280 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f001 f8c3 	bl	8016118 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d106      	bne.n	8014fa8 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014f9a:	4848      	ldr	r0, [pc, #288]	; (80150bc <tcp_receive+0xdd8>)
 8014f9c:	f7fd fc9c 	bl	80128d8 <tcp_seg_copy>
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8014fa6:	e16b      	b.n	8015280 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014fb2:	e150      	b.n	8015256 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8014fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	685a      	ldr	r2, [r3, #4]
 8014fba:	4b41      	ldr	r3, [pc, #260]	; (80150c0 <tcp_receive+0xddc>)
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d11d      	bne.n	8014ffe <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014fc2:	4b3e      	ldr	r3, [pc, #248]	; (80150bc <tcp_receive+0xdd8>)
 8014fc4:	891a      	ldrh	r2, [r3, #8]
 8014fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc8:	891b      	ldrh	r3, [r3, #8]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	f240 8148 	bls.w	8015260 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8014fd0:	483a      	ldr	r0, [pc, #232]	; (80150bc <tcp_receive+0xdd8>)
 8014fd2:	f7fd fc81 	bl	80128d8 <tcp_seg_copy>
 8014fd6:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	f000 8142 	beq.w	8015264 <tcp_receive+0xf80>
                  if (prev != NULL) {
 8014fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d003      	beq.n	8014fee <tcp_receive+0xd0a>
                    prev->next = cseg;
 8014fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	601a      	str	r2, [r3, #0]
 8014fec:	e002      	b.n	8014ff4 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	68fa      	ldr	r2, [r7, #12]
 8014ff2:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014ff4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f7ff f8fe 	bl	80141f8 <tcp_oos_insert_segment>
                }
                break;
 8014ffc:	e132      	b.n	8015264 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015000:	2b00      	cmp	r3, #0
 8015002:	d117      	bne.n	8015034 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015004:	4b2e      	ldr	r3, [pc, #184]	; (80150c0 <tcp_receive+0xddc>)
 8015006:	681a      	ldr	r2, [r3, #0]
 8015008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500a:	68db      	ldr	r3, [r3, #12]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	1ad3      	subs	r3, r2, r3
 8015010:	2b00      	cmp	r3, #0
 8015012:	da57      	bge.n	80150c4 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8015014:	4829      	ldr	r0, [pc, #164]	; (80150bc <tcp_receive+0xdd8>)
 8015016:	f7fd fc5f 	bl	80128d8 <tcp_seg_copy>
 801501a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	2b00      	cmp	r3, #0
 8015020:	f000 8122 	beq.w	8015268 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	68fa      	ldr	r2, [r7, #12]
 8015028:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801502a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801502c:	68f8      	ldr	r0, [r7, #12]
 801502e:	f7ff f8e3 	bl	80141f8 <tcp_oos_insert_segment>
                  }
                  break;
 8015032:	e119      	b.n	8015268 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8015034:	4b22      	ldr	r3, [pc, #136]	; (80150c0 <tcp_receive+0xddc>)
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801503a:	68db      	ldr	r3, [r3, #12]
 801503c:	685b      	ldr	r3, [r3, #4]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	3b01      	subs	r3, #1
 8015042:	2b00      	cmp	r3, #0
 8015044:	db3e      	blt.n	80150c4 <tcp_receive+0xde0>
 8015046:	4b1e      	ldr	r3, [pc, #120]	; (80150c0 <tcp_receive+0xddc>)
 8015048:	681a      	ldr	r2, [r3, #0]
 801504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801504c:	68db      	ldr	r3, [r3, #12]
 801504e:	685b      	ldr	r3, [r3, #4]
 8015050:	1ad3      	subs	r3, r2, r3
 8015052:	3301      	adds	r3, #1
 8015054:	2b00      	cmp	r3, #0
 8015056:	dc35      	bgt.n	80150c4 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8015058:	4818      	ldr	r0, [pc, #96]	; (80150bc <tcp_receive+0xdd8>)
 801505a:	f7fd fc3d 	bl	80128d8 <tcp_seg_copy>
 801505e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	f000 8102 	beq.w	801526c <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506a:	68db      	ldr	r3, [r3, #12]
 801506c:	685b      	ldr	r3, [r3, #4]
 801506e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015070:	8912      	ldrh	r2, [r2, #8]
 8015072:	441a      	add	r2, r3
 8015074:	4b12      	ldr	r3, [pc, #72]	; (80150c0 <tcp_receive+0xddc>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	1ad3      	subs	r3, r2, r3
 801507a:	2b00      	cmp	r3, #0
 801507c:	dd12      	ble.n	80150a4 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801507e:	4b10      	ldr	r3, [pc, #64]	; (80150c0 <tcp_receive+0xddc>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	b29a      	uxth	r2, r3
 8015084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015086:	68db      	ldr	r3, [r3, #12]
 8015088:	685b      	ldr	r3, [r3, #4]
 801508a:	b29b      	uxth	r3, r3
 801508c:	1ad3      	subs	r3, r2, r3
 801508e:	b29a      	uxth	r2, r3
 8015090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015092:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015096:	685a      	ldr	r2, [r3, #4]
 8015098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801509a:	891b      	ldrh	r3, [r3, #8]
 801509c:	4619      	mov	r1, r3
 801509e:	4610      	mov	r0, r2
 80150a0:	f7fb fe40 	bl	8010d24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80150a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150a6:	68fa      	ldr	r2, [r7, #12]
 80150a8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80150aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80150ac:	68f8      	ldr	r0, [r7, #12]
 80150ae:	f7ff f8a3 	bl	80141f8 <tcp_oos_insert_segment>
                  }
                  break;
 80150b2:	e0db      	b.n	801526c <tcp_receive+0xf88>
 80150b4:	20005120 	.word	0x20005120
 80150b8:	2000511d 	.word	0x2000511d
 80150bc:	200050f0 	.word	0x200050f0
 80150c0:	20005110 	.word	0x20005110
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80150c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	f040 80bf 	bne.w	801524c <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80150ce:	4b7c      	ldr	r3, [pc, #496]	; (80152c0 <tcp_receive+0xfdc>)
 80150d0:	681a      	ldr	r2, [r3, #0]
 80150d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80150da:	2b00      	cmp	r3, #0
 80150dc:	f340 80b6 	ble.w	801524c <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80150e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	899b      	ldrh	r3, [r3, #12]
 80150e6:	b29b      	uxth	r3, r3
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7fa fd2d 	bl	800fb48 <lwip_htons>
 80150ee:	4603      	mov	r3, r0
 80150f0:	f003 0301 	and.w	r3, r3, #1
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	f040 80bb 	bne.w	8015270 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80150fa:	4872      	ldr	r0, [pc, #456]	; (80152c4 <tcp_receive+0xfe0>)
 80150fc:	f7fd fbec 	bl	80128d8 <tcp_seg_copy>
 8015100:	4602      	mov	r2, r0
 8015102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015104:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	2b00      	cmp	r3, #0
 801510c:	f000 80b2 	beq.w	8015274 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015112:	68db      	ldr	r3, [r3, #12]
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015118:	8912      	ldrh	r2, [r2, #8]
 801511a:	441a      	add	r2, r3
 801511c:	4b68      	ldr	r3, [pc, #416]	; (80152c0 <tcp_receive+0xfdc>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	1ad3      	subs	r3, r2, r3
 8015122:	2b00      	cmp	r3, #0
 8015124:	dd12      	ble.n	801514c <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015126:	4b66      	ldr	r3, [pc, #408]	; (80152c0 <tcp_receive+0xfdc>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	b29a      	uxth	r2, r3
 801512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	b29b      	uxth	r3, r3
 8015134:	1ad3      	subs	r3, r2, r3
 8015136:	b29a      	uxth	r2, r3
 8015138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801513a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801513c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801513e:	685a      	ldr	r2, [r3, #4]
 8015140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015142:	891b      	ldrh	r3, [r3, #8]
 8015144:	4619      	mov	r1, r3
 8015146:	4610      	mov	r0, r2
 8015148:	f7fb fdec 	bl	8010d24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801514c:	4b5e      	ldr	r3, [pc, #376]	; (80152c8 <tcp_receive+0xfe4>)
 801514e:	881b      	ldrh	r3, [r3, #0]
 8015150:	461a      	mov	r2, r3
 8015152:	4b5b      	ldr	r3, [pc, #364]	; (80152c0 <tcp_receive+0xfdc>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	441a      	add	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801515c:	6879      	ldr	r1, [r7, #4]
 801515e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015160:	440b      	add	r3, r1
 8015162:	1ad3      	subs	r3, r2, r3
 8015164:	2b00      	cmp	r3, #0
 8015166:	f340 8085 	ble.w	8015274 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	68db      	ldr	r3, [r3, #12]
 8015170:	899b      	ldrh	r3, [r3, #12]
 8015172:	b29b      	uxth	r3, r3
 8015174:	4618      	mov	r0, r3
 8015176:	f7fa fce7 	bl	800fb48 <lwip_htons>
 801517a:	4603      	mov	r3, r0
 801517c:	f003 0301 	and.w	r3, r3, #1
 8015180:	2b00      	cmp	r3, #0
 8015182:	d01e      	beq.n	80151c2 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	68db      	ldr	r3, [r3, #12]
 801518a:	899b      	ldrh	r3, [r3, #12]
 801518c:	b29b      	uxth	r3, r3
 801518e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015192:	b29c      	uxth	r4, r3
 8015194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	899b      	ldrh	r3, [r3, #12]
 801519c:	b29b      	uxth	r3, r3
 801519e:	4618      	mov	r0, r3
 80151a0:	f7fa fcd2 	bl	800fb48 <lwip_htons>
 80151a4:	4603      	mov	r3, r0
 80151a6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7fa fccb 	bl	800fb48 <lwip_htons>
 80151b2:	4603      	mov	r3, r0
 80151b4:	461a      	mov	r2, r3
 80151b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	4322      	orrs	r2, r4
 80151be:	b292      	uxth	r2, r2
 80151c0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151c6:	b29a      	uxth	r2, r3
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151cc:	4413      	add	r3, r2
 80151ce:	b299      	uxth	r1, r3
 80151d0:	4b3b      	ldr	r3, [pc, #236]	; (80152c0 <tcp_receive+0xfdc>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	b29a      	uxth	r2, r3
 80151d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	1a8a      	subs	r2, r1, r2
 80151dc:	b292      	uxth	r2, r2
 80151de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80151e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	685a      	ldr	r2, [r3, #4]
 80151e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	891b      	ldrh	r3, [r3, #8]
 80151ec:	4619      	mov	r1, r3
 80151ee:	4610      	mov	r0, r2
 80151f0:	f7fb fd98 	bl	8010d24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80151f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	891c      	ldrh	r4, [r3, #8]
 80151fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	68db      	ldr	r3, [r3, #12]
 8015200:	899b      	ldrh	r3, [r3, #12]
 8015202:	b29b      	uxth	r3, r3
 8015204:	4618      	mov	r0, r3
 8015206:	f7fa fc9f 	bl	800fb48 <lwip_htons>
 801520a:	4603      	mov	r3, r0
 801520c:	f003 0303 	and.w	r3, r3, #3
 8015210:	2b00      	cmp	r3, #0
 8015212:	d001      	beq.n	8015218 <tcp_receive+0xf34>
 8015214:	2301      	movs	r3, #1
 8015216:	e000      	b.n	801521a <tcp_receive+0xf36>
 8015218:	2300      	movs	r3, #0
 801521a:	4423      	add	r3, r4
 801521c:	b29a      	uxth	r2, r3
 801521e:	4b2a      	ldr	r3, [pc, #168]	; (80152c8 <tcp_receive+0xfe4>)
 8015220:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015222:	4b29      	ldr	r3, [pc, #164]	; (80152c8 <tcp_receive+0xfe4>)
 8015224:	881b      	ldrh	r3, [r3, #0]
 8015226:	461a      	mov	r2, r3
 8015228:	4b25      	ldr	r3, [pc, #148]	; (80152c0 <tcp_receive+0xfdc>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	441a      	add	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015232:	6879      	ldr	r1, [r7, #4]
 8015234:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015236:	440b      	add	r3, r1
 8015238:	429a      	cmp	r2, r3
 801523a:	d01b      	beq.n	8015274 <tcp_receive+0xf90>
 801523c:	4b23      	ldr	r3, [pc, #140]	; (80152cc <tcp_receive+0xfe8>)
 801523e:	f240 627a 	movw	r2, #1658	; 0x67a
 8015242:	4923      	ldr	r1, [pc, #140]	; (80152d0 <tcp_receive+0xfec>)
 8015244:	4823      	ldr	r0, [pc, #140]	; (80152d4 <tcp_receive+0xff0>)
 8015246:	f005 fa1f 	bl	801a688 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801524a:	e013      	b.n	8015274 <tcp_receive+0xf90>
              }
            }
            prev = next;
 801524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801524e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015258:	2b00      	cmp	r3, #0
 801525a:	f47f aeab 	bne.w	8014fb4 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 801525e:	e00f      	b.n	8015280 <tcp_receive+0xf9c>
                break;
 8015260:	bf00      	nop
 8015262:	e00d      	b.n	8015280 <tcp_receive+0xf9c>
                break;
 8015264:	bf00      	nop
 8015266:	e00b      	b.n	8015280 <tcp_receive+0xf9c>
                  break;
 8015268:	bf00      	nop
 801526a:	e009      	b.n	8015280 <tcp_receive+0xf9c>
                  break;
 801526c:	bf00      	nop
 801526e:	e007      	b.n	8015280 <tcp_receive+0xf9c>
                  break;
 8015270:	bf00      	nop
 8015272:	e005      	b.n	8015280 <tcp_receive+0xf9c>
                break;
 8015274:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8015276:	e003      	b.n	8015280 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f000 ff4d 	bl	8016118 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801527e:	e01a      	b.n	80152b6 <tcp_receive+0xfd2>
 8015280:	e019      	b.n	80152b6 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015282:	4b0f      	ldr	r3, [pc, #60]	; (80152c0 <tcp_receive+0xfdc>)
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801528a:	1ad3      	subs	r3, r2, r3
 801528c:	2b00      	cmp	r3, #0
 801528e:	db0a      	blt.n	80152a6 <tcp_receive+0xfc2>
 8015290:	4b0b      	ldr	r3, [pc, #44]	; (80152c0 <tcp_receive+0xfdc>)
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015298:	6879      	ldr	r1, [r7, #4]
 801529a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801529c:	440b      	add	r3, r1
 801529e:	1ad3      	subs	r3, r2, r3
 80152a0:	3301      	adds	r3, #1
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	dd07      	ble.n	80152b6 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	7e9b      	ldrb	r3, [r3, #26]
 80152aa:	f043 0302 	orr.w	r3, r3, #2
 80152ae:	b2da      	uxtb	r2, r3
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80152b4:	e7ff      	b.n	80152b6 <tcp_receive+0xfd2>
 80152b6:	bf00      	nop
 80152b8:	3734      	adds	r7, #52	; 0x34
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152be:	bf00      	nop
 80152c0:	20005110 	.word	0x20005110
 80152c4:	200050f0 	.word	0x200050f0
 80152c8:	2000511a 	.word	0x2000511a
 80152cc:	0801d11c 	.word	0x0801d11c
 80152d0:	0801d3e8 	.word	0x0801d3e8
 80152d4:	0801d160 	.word	0x0801d160

080152d8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80152d8:	b480      	push	{r7}
 80152da:	b083      	sub	sp, #12
 80152dc:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80152de:	4b17      	ldr	r3, [pc, #92]	; (801533c <tcp_getoptbyte+0x64>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d005      	beq.n	80152f2 <tcp_getoptbyte+0x1a>
 80152e6:	4b16      	ldr	r3, [pc, #88]	; (8015340 <tcp_getoptbyte+0x68>)
 80152e8:	881a      	ldrh	r2, [r3, #0]
 80152ea:	4b16      	ldr	r3, [pc, #88]	; (8015344 <tcp_getoptbyte+0x6c>)
 80152ec:	881b      	ldrh	r3, [r3, #0]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d20e      	bcs.n	8015310 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80152f2:	4b15      	ldr	r3, [pc, #84]	; (8015348 <tcp_getoptbyte+0x70>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	3314      	adds	r3, #20
 80152f8:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80152fa:	4b11      	ldr	r3, [pc, #68]	; (8015340 <tcp_getoptbyte+0x68>)
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	1c5a      	adds	r2, r3, #1
 8015300:	b291      	uxth	r1, r2
 8015302:	4a0f      	ldr	r2, [pc, #60]	; (8015340 <tcp_getoptbyte+0x68>)
 8015304:	8011      	strh	r1, [r2, #0]
 8015306:	461a      	mov	r2, r3
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	4413      	add	r3, r2
 801530c:	781b      	ldrb	r3, [r3, #0]
 801530e:	e010      	b.n	8015332 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8015310:	4b0b      	ldr	r3, [pc, #44]	; (8015340 <tcp_getoptbyte+0x68>)
 8015312:	881b      	ldrh	r3, [r3, #0]
 8015314:	1c5a      	adds	r2, r3, #1
 8015316:	b291      	uxth	r1, r2
 8015318:	4a09      	ldr	r2, [pc, #36]	; (8015340 <tcp_getoptbyte+0x68>)
 801531a:	8011      	strh	r1, [r2, #0]
 801531c:	b2da      	uxtb	r2, r3
 801531e:	4b09      	ldr	r3, [pc, #36]	; (8015344 <tcp_getoptbyte+0x6c>)
 8015320:	881b      	ldrh	r3, [r3, #0]
 8015322:	b2db      	uxtb	r3, r3
 8015324:	1ad3      	subs	r3, r2, r3
 8015326:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8015328:	4b04      	ldr	r3, [pc, #16]	; (801533c <tcp_getoptbyte+0x64>)
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	79fb      	ldrb	r3, [r7, #7]
 801532e:	4413      	add	r3, r2
 8015330:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015332:	4618      	mov	r0, r3
 8015334:	370c      	adds	r7, #12
 8015336:	46bd      	mov	sp, r7
 8015338:	bc80      	pop	{r7}
 801533a:	4770      	bx	lr
 801533c:	20005108 	.word	0x20005108
 8015340:	2000510c 	.word	0x2000510c
 8015344:	20005106 	.word	0x20005106
 8015348:	20005100 	.word	0x20005100

0801534c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015354:	4b2e      	ldr	r3, [pc, #184]	; (8015410 <tcp_parseopt+0xc4>)
 8015356:	881b      	ldrh	r3, [r3, #0]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d055      	beq.n	8015408 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801535c:	4b2d      	ldr	r3, [pc, #180]	; (8015414 <tcp_parseopt+0xc8>)
 801535e:	2200      	movs	r2, #0
 8015360:	801a      	strh	r2, [r3, #0]
 8015362:	e045      	b.n	80153f0 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8015364:	f7ff ffb8 	bl	80152d8 <tcp_getoptbyte>
 8015368:	4603      	mov	r3, r0
 801536a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801536c:	7bfb      	ldrb	r3, [r7, #15]
 801536e:	2b02      	cmp	r3, #2
 8015370:	d006      	beq.n	8015380 <tcp_parseopt+0x34>
 8015372:	2b02      	cmp	r3, #2
 8015374:	dc2b      	bgt.n	80153ce <tcp_parseopt+0x82>
 8015376:	2b00      	cmp	r3, #0
 8015378:	d041      	beq.n	80153fe <tcp_parseopt+0xb2>
 801537a:	2b01      	cmp	r3, #1
 801537c:	d127      	bne.n	80153ce <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 801537e:	e037      	b.n	80153f0 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015380:	f7ff ffaa 	bl	80152d8 <tcp_getoptbyte>
 8015384:	4603      	mov	r3, r0
 8015386:	2b04      	cmp	r3, #4
 8015388:	d13b      	bne.n	8015402 <tcp_parseopt+0xb6>
 801538a:	4b22      	ldr	r3, [pc, #136]	; (8015414 <tcp_parseopt+0xc8>)
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	3301      	adds	r3, #1
 8015390:	4a1f      	ldr	r2, [pc, #124]	; (8015410 <tcp_parseopt+0xc4>)
 8015392:	8812      	ldrh	r2, [r2, #0]
 8015394:	4293      	cmp	r3, r2
 8015396:	da34      	bge.n	8015402 <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8015398:	f7ff ff9e 	bl	80152d8 <tcp_getoptbyte>
 801539c:	4603      	mov	r3, r0
 801539e:	b29b      	uxth	r3, r3
 80153a0:	021b      	lsls	r3, r3, #8
 80153a2:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80153a4:	f7ff ff98 	bl	80152d8 <tcp_getoptbyte>
 80153a8:	4603      	mov	r3, r0
 80153aa:	b29a      	uxth	r2, r3
 80153ac:	89bb      	ldrh	r3, [r7, #12]
 80153ae:	4313      	orrs	r3, r2
 80153b0:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80153b2:	89bb      	ldrh	r3, [r7, #12]
 80153b4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80153b8:	d804      	bhi.n	80153c4 <tcp_parseopt+0x78>
 80153ba:	89bb      	ldrh	r3, [r7, #12]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d001      	beq.n	80153c4 <tcp_parseopt+0x78>
 80153c0:	89ba      	ldrh	r2, [r7, #12]
 80153c2:	e001      	b.n	80153c8 <tcp_parseopt+0x7c>
 80153c4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80153cc:	e010      	b.n	80153f0 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80153ce:	f7ff ff83 	bl	80152d8 <tcp_getoptbyte>
 80153d2:	4603      	mov	r3, r0
 80153d4:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80153d6:	7afb      	ldrb	r3, [r7, #11]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d914      	bls.n	8015406 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80153dc:	7afb      	ldrb	r3, [r7, #11]
 80153de:	b29a      	uxth	r2, r3
 80153e0:	4b0c      	ldr	r3, [pc, #48]	; (8015414 <tcp_parseopt+0xc8>)
 80153e2:	881b      	ldrh	r3, [r3, #0]
 80153e4:	4413      	add	r3, r2
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	3b02      	subs	r3, #2
 80153ea:	b29a      	uxth	r2, r3
 80153ec:	4b09      	ldr	r3, [pc, #36]	; (8015414 <tcp_parseopt+0xc8>)
 80153ee:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80153f0:	4b08      	ldr	r3, [pc, #32]	; (8015414 <tcp_parseopt+0xc8>)
 80153f2:	881a      	ldrh	r2, [r3, #0]
 80153f4:	4b06      	ldr	r3, [pc, #24]	; (8015410 <tcp_parseopt+0xc4>)
 80153f6:	881b      	ldrh	r3, [r3, #0]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d3b3      	bcc.n	8015364 <tcp_parseopt+0x18>
 80153fc:	e004      	b.n	8015408 <tcp_parseopt+0xbc>
        return;
 80153fe:	bf00      	nop
 8015400:	e002      	b.n	8015408 <tcp_parseopt+0xbc>
          return;
 8015402:	bf00      	nop
 8015404:	e000      	b.n	8015408 <tcp_parseopt+0xbc>
          return;
 8015406:	bf00      	nop
      }
    }
  }
}
 8015408:	3710      	adds	r7, #16
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	20005104 	.word	0x20005104
 8015414:	2000510c 	.word	0x2000510c

08015418 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015418:	b480      	push	{r7}
 801541a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801541c:	4b05      	ldr	r3, [pc, #20]	; (8015434 <tcp_trigger_input_pcb_close+0x1c>)
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	f043 0310 	orr.w	r3, r3, #16
 8015424:	b2da      	uxtb	r2, r3
 8015426:	4b03      	ldr	r3, [pc, #12]	; (8015434 <tcp_trigger_input_pcb_close+0x1c>)
 8015428:	701a      	strb	r2, [r3, #0]
}
 801542a:	bf00      	nop
 801542c:	46bd      	mov	sp, r7
 801542e:	bc80      	pop	{r7}
 8015430:	4770      	bx	lr
 8015432:	bf00      	nop
 8015434:	2000511d 	.word	0x2000511d

08015438 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b086      	sub	sp, #24
 801543c:	af00      	add	r7, sp, #0
 801543e:	60f8      	str	r0, [r7, #12]
 8015440:	607b      	str	r3, [r7, #4]
 8015442:	460b      	mov	r3, r1
 8015444:	817b      	strh	r3, [r7, #10]
 8015446:	4613      	mov	r3, r2
 8015448:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801544a:	897a      	ldrh	r2, [r7, #10]
 801544c:	893b      	ldrh	r3, [r7, #8]
 801544e:	4413      	add	r3, r2
 8015450:	b29b      	uxth	r3, r3
 8015452:	3314      	adds	r3, #20
 8015454:	b29b      	uxth	r3, r3
 8015456:	2200      	movs	r2, #0
 8015458:	4619      	mov	r1, r3
 801545a:	2001      	movs	r0, #1
 801545c:	f7fb fa5e 	bl	801091c <pbuf_alloc>
 8015460:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d056      	beq.n	8015516 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015468:	897b      	ldrh	r3, [r7, #10]
 801546a:	3313      	adds	r3, #19
 801546c:	697a      	ldr	r2, [r7, #20]
 801546e:	8952      	ldrh	r2, [r2, #10]
 8015470:	4293      	cmp	r3, r2
 8015472:	db05      	blt.n	8015480 <tcp_output_alloc_header+0x48>
 8015474:	4b2a      	ldr	r3, [pc, #168]	; (8015520 <tcp_output_alloc_header+0xe8>)
 8015476:	2272      	movs	r2, #114	; 0x72
 8015478:	492a      	ldr	r1, [pc, #168]	; (8015524 <tcp_output_alloc_header+0xec>)
 801547a:	482b      	ldr	r0, [pc, #172]	; (8015528 <tcp_output_alloc_header+0xf0>)
 801547c:	f005 f904 	bl	801a688 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	685b      	ldr	r3, [r3, #4]
 8015484:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	8adb      	ldrh	r3, [r3, #22]
 801548a:	4618      	mov	r0, r3
 801548c:	f7fa fb5c 	bl	800fb48 <lwip_htons>
 8015490:	4603      	mov	r3, r0
 8015492:	461a      	mov	r2, r3
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	8b1b      	ldrh	r3, [r3, #24]
 801549c:	4618      	mov	r0, r3
 801549e:	f7fa fb53 	bl	800fb48 <lwip_htons>
 80154a2:	4603      	mov	r3, r0
 80154a4:	461a      	mov	r2, r3
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80154aa:	693b      	ldr	r3, [r7, #16]
 80154ac:	687a      	ldr	r2, [r7, #4]
 80154ae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7fa fb54 	bl	800fb62 <lwip_htonl>
 80154ba:	4602      	mov	r2, r0
 80154bc:	693b      	ldr	r3, [r7, #16]
 80154be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80154c0:	897b      	ldrh	r3, [r7, #10]
 80154c2:	089b      	lsrs	r3, r3, #2
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	3305      	adds	r3, #5
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	031b      	lsls	r3, r3, #12
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	f043 0310 	orr.w	r3, r3, #16
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7fa fb37 	bl	800fb48 <lwip_htons>
 80154da:	4603      	mov	r3, r0
 80154dc:	461a      	mov	r2, r3
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7fa fb2e 	bl	800fb48 <lwip_htons>
 80154ec:	4603      	mov	r3, r0
 80154ee:	461a      	mov	r2, r3
 80154f0:	693b      	ldr	r3, [r7, #16]
 80154f2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	2200      	movs	r2, #0
 80154f8:	741a      	strb	r2, [r3, #16]
 80154fa:	2200      	movs	r2, #0
 80154fc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	2200      	movs	r2, #0
 8015502:	749a      	strb	r2, [r3, #18]
 8015504:	2200      	movs	r2, #0
 8015506:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801550c:	68fa      	ldr	r2, [r7, #12]
 801550e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015510:	441a      	add	r2, r3
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015516:	697b      	ldr	r3, [r7, #20]
}
 8015518:	4618      	mov	r0, r3
 801551a:	3718      	adds	r7, #24
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	0801d4a4 	.word	0x0801d4a4
 8015524:	0801d4d8 	.word	0x0801d4d8
 8015528:	0801d508 	.word	0x0801d508

0801552c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801552c:	b590      	push	{r4, r7, lr}
 801552e:	b085      	sub	sp, #20
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015538:	2b00      	cmp	r3, #0
 801553a:	d02d      	beq.n	8015598 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015540:	60fb      	str	r3, [r7, #12]
 8015542:	e002      	b.n	801554a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d1f8      	bne.n	8015544 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	899b      	ldrh	r3, [r3, #12]
 8015558:	b29b      	uxth	r3, r3
 801555a:	4618      	mov	r0, r3
 801555c:	f7fa faf4 	bl	800fb48 <lwip_htons>
 8015560:	4603      	mov	r3, r0
 8015562:	f003 0307 	and.w	r3, r3, #7
 8015566:	2b00      	cmp	r3, #0
 8015568:	d116      	bne.n	8015598 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	899b      	ldrh	r3, [r3, #12]
 8015570:	b29c      	uxth	r4, r3
 8015572:	2001      	movs	r0, #1
 8015574:	f7fa fae8 	bl	800fb48 <lwip_htons>
 8015578:	4603      	mov	r3, r0
 801557a:	461a      	mov	r2, r3
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	68db      	ldr	r3, [r3, #12]
 8015580:	4322      	orrs	r2, r4
 8015582:	b292      	uxth	r2, r2
 8015584:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	7e9b      	ldrb	r3, [r3, #26]
 801558a:	f043 0320 	orr.w	r3, r3, #32
 801558e:	b2da      	uxtb	r2, r3
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8015594:	2300      	movs	r3, #0
 8015596:	e004      	b.n	80155a2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015598:	2101      	movs	r1, #1
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f000 fcc0 	bl	8015f20 <tcp_enqueue_flags>
 80155a0:	4603      	mov	r3, r0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3714      	adds	r7, #20
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd90      	pop	{r4, r7, pc}
	...

080155ac <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80155ac:	b590      	push	{r4, r7, lr}
 80155ae:	b087      	sub	sp, #28
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	60f8      	str	r0, [r7, #12]
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	603b      	str	r3, [r7, #0]
 80155b8:	4613      	mov	r3, r2
 80155ba:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80155bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80155c0:	009b      	lsls	r3, r3, #2
 80155c2:	b2db      	uxtb	r3, r3
 80155c4:	f003 0304 	and.w	r3, r3, #4
 80155c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80155ca:	2003      	movs	r0, #3
 80155cc:	f7fa ff12 	bl	80103f4 <memp_malloc>
 80155d0:	6138      	str	r0, [r7, #16]
 80155d2:	693b      	ldr	r3, [r7, #16]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d104      	bne.n	80155e2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80155d8:	68b8      	ldr	r0, [r7, #8]
 80155da:	f7fb fd17 	bl	801100c <pbuf_free>
    return NULL;
 80155de:	2300      	movs	r3, #0
 80155e0:	e061      	b.n	80156a6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80155e2:	693b      	ldr	r3, [r7, #16]
 80155e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80155e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80155ea:	693b      	ldr	r3, [r7, #16]
 80155ec:	2200      	movs	r2, #0
 80155ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	68ba      	ldr	r2, [r7, #8]
 80155f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	891a      	ldrh	r2, [r3, #8]
 80155fa:	7dfb      	ldrb	r3, [r7, #23]
 80155fc:	b29b      	uxth	r3, r3
 80155fe:	429a      	cmp	r2, r3
 8015600:	d205      	bcs.n	801560e <tcp_create_segment+0x62>
 8015602:	4b2b      	ldr	r3, [pc, #172]	; (80156b0 <tcp_create_segment+0x104>)
 8015604:	22ba      	movs	r2, #186	; 0xba
 8015606:	492b      	ldr	r1, [pc, #172]	; (80156b4 <tcp_create_segment+0x108>)
 8015608:	482b      	ldr	r0, [pc, #172]	; (80156b8 <tcp_create_segment+0x10c>)
 801560a:	f005 f83d 	bl	801a688 <iprintf>
  seg->len = p->tot_len - optlen;
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	891a      	ldrh	r2, [r3, #8]
 8015612:	7dfb      	ldrb	r3, [r7, #23]
 8015614:	b29b      	uxth	r3, r3
 8015616:	1ad3      	subs	r3, r2, r3
 8015618:	b29a      	uxth	r2, r3
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801561e:	2114      	movs	r1, #20
 8015620:	68b8      	ldr	r0, [r7, #8]
 8015622:	f7fb fccf 	bl	8010fc4 <pbuf_header>
 8015626:	4603      	mov	r3, r0
 8015628:	2b00      	cmp	r3, #0
 801562a:	d004      	beq.n	8015636 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801562c:	6938      	ldr	r0, [r7, #16]
 801562e:	f7fd f92d 	bl	801288c <tcp_seg_free>
    return NULL;
 8015632:	2300      	movs	r3, #0
 8015634:	e037      	b.n	80156a6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015636:	693b      	ldr	r3, [r7, #16]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	685a      	ldr	r2, [r3, #4]
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	8ada      	ldrh	r2, [r3, #22]
 8015644:	693b      	ldr	r3, [r7, #16]
 8015646:	68dc      	ldr	r4, [r3, #12]
 8015648:	4610      	mov	r0, r2
 801564a:	f7fa fa7d 	bl	800fb48 <lwip_htons>
 801564e:	4603      	mov	r3, r0
 8015650:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	8b1a      	ldrh	r2, [r3, #24]
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	68dc      	ldr	r4, [r3, #12]
 801565a:	4610      	mov	r0, r2
 801565c:	f7fa fa74 	bl	800fb48 <lwip_htons>
 8015660:	4603      	mov	r3, r0
 8015662:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	68dc      	ldr	r4, [r3, #12]
 8015668:	6838      	ldr	r0, [r7, #0]
 801566a:	f7fa fa7a 	bl	800fb62 <lwip_htonl>
 801566e:	4603      	mov	r3, r0
 8015670:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8015672:	7dfb      	ldrb	r3, [r7, #23]
 8015674:	089b      	lsrs	r3, r3, #2
 8015676:	b2db      	uxtb	r3, r3
 8015678:	b29b      	uxth	r3, r3
 801567a:	3305      	adds	r3, #5
 801567c:	b29b      	uxth	r3, r3
 801567e:	031b      	lsls	r3, r3, #12
 8015680:	b29a      	uxth	r2, r3
 8015682:	79fb      	ldrb	r3, [r7, #7]
 8015684:	b29b      	uxth	r3, r3
 8015686:	4313      	orrs	r3, r2
 8015688:	b29a      	uxth	r2, r3
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	68dc      	ldr	r4, [r3, #12]
 801568e:	4610      	mov	r0, r2
 8015690:	f7fa fa5a 	bl	800fb48 <lwip_htons>
 8015694:	4603      	mov	r3, r0
 8015696:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	2200      	movs	r2, #0
 801569e:	749a      	strb	r2, [r3, #18]
 80156a0:	2200      	movs	r2, #0
 80156a2:	74da      	strb	r2, [r3, #19]
  return seg;
 80156a4:	693b      	ldr	r3, [r7, #16]
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	371c      	adds	r7, #28
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd90      	pop	{r4, r7, pc}
 80156ae:	bf00      	nop
 80156b0:	0801d4a4 	.word	0x0801d4a4
 80156b4:	0801d530 	.word	0x0801d530
 80156b8:	0801d508 	.word	0x0801d508

080156bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b086      	sub	sp, #24
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	607b      	str	r3, [r7, #4]
 80156c4:	4603      	mov	r3, r0
 80156c6:	73fb      	strb	r3, [r7, #15]
 80156c8:	460b      	mov	r3, r1
 80156ca:	81bb      	strh	r3, [r7, #12]
 80156cc:	4613      	mov	r3, r2
 80156ce:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80156d0:	89bb      	ldrh	r3, [r7, #12]
 80156d2:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80156d4:	89ba      	ldrh	r2, [r7, #12]
 80156d6:	897b      	ldrh	r3, [r7, #10]
 80156d8:	429a      	cmp	r2, r3
 80156da:	d221      	bcs.n	8015720 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80156dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80156e0:	f003 0302 	and.w	r3, r3, #2
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d111      	bne.n	801570c <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80156e8:	6a3b      	ldr	r3, [r7, #32]
 80156ea:	7e9b      	ldrb	r3, [r3, #26]
 80156ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d115      	bne.n	8015720 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80156f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d007      	beq.n	801570c <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80156fc:	6a3b      	ldr	r3, [r7, #32]
 80156fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8015700:	2b00      	cmp	r3, #0
 8015702:	d103      	bne.n	801570c <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8015704:	6a3b      	ldr	r3, [r7, #32]
 8015706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8015708:	2b00      	cmp	r3, #0
 801570a:	d009      	beq.n	8015720 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801570c:	89bb      	ldrh	r3, [r7, #12]
 801570e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015712:	f023 0203 	bic.w	r2, r3, #3
 8015716:	897b      	ldrh	r3, [r7, #10]
 8015718:	4293      	cmp	r3, r2
 801571a:	bf28      	it	cs
 801571c:	4613      	movcs	r3, r2
 801571e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015720:	8af9      	ldrh	r1, [r7, #22]
 8015722:	7bfb      	ldrb	r3, [r7, #15]
 8015724:	2200      	movs	r2, #0
 8015726:	4618      	mov	r0, r3
 8015728:	f7fb f8f8 	bl	801091c <pbuf_alloc>
 801572c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801572e:	693b      	ldr	r3, [r7, #16]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d101      	bne.n	8015738 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8015734:	2300      	movs	r3, #0
 8015736:	e019      	b.n	801576c <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d006      	beq.n	801574e <tcp_pbuf_prealloc+0x92>
 8015740:	4b0c      	ldr	r3, [pc, #48]	; (8015774 <tcp_pbuf_prealloc+0xb8>)
 8015742:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015746:	490c      	ldr	r1, [pc, #48]	; (8015778 <tcp_pbuf_prealloc+0xbc>)
 8015748:	480c      	ldr	r0, [pc, #48]	; (801577c <tcp_pbuf_prealloc+0xc0>)
 801574a:	f004 ff9d 	bl	801a688 <iprintf>
  *oversize = p->len - length;
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	895a      	ldrh	r2, [r3, #10]
 8015752:	89bb      	ldrh	r3, [r7, #12]
 8015754:	1ad3      	subs	r3, r2, r3
 8015756:	b29a      	uxth	r2, r3
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	89ba      	ldrh	r2, [r7, #12]
 8015760:	811a      	strh	r2, [r3, #8]
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	891a      	ldrh	r2, [r3, #8]
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	815a      	strh	r2, [r3, #10]
  return p;
 801576a:	693b      	ldr	r3, [r7, #16]
}
 801576c:	4618      	mov	r0, r3
 801576e:	3718      	adds	r7, #24
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}
 8015774:	0801d4a4 	.word	0x0801d4a4
 8015778:	0801d548 	.word	0x0801d548
 801577c:	0801d508 	.word	0x0801d508

08015780 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b082      	sub	sp, #8
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
 8015788:	460b      	mov	r3, r1
 801578a:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	7d1b      	ldrb	r3, [r3, #20]
 8015790:	2b04      	cmp	r3, #4
 8015792:	d00e      	beq.n	80157b2 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015798:	2b07      	cmp	r3, #7
 801579a:	d00a      	beq.n	80157b2 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80157a0:	2b02      	cmp	r3, #2
 80157a2:	d006      	beq.n	80157b2 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80157a8:	2b03      	cmp	r3, #3
 80157aa:	d002      	beq.n	80157b2 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80157ac:	f06f 030a 	mvn.w	r3, #10
 80157b0:	e04f      	b.n	8015852 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80157b2:	887b      	ldrh	r3, [r7, #2]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d101      	bne.n	80157bc <tcp_write_checks+0x3c>
    return ERR_OK;
 80157b8:	2300      	movs	r3, #0
 80157ba:	e04a      	b.n	8015852 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80157c2:	887a      	ldrh	r2, [r7, #2]
 80157c4:	429a      	cmp	r2, r3
 80157c6:	d909      	bls.n	80157dc <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	7e9b      	ldrb	r3, [r3, #26]
 80157cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80157d0:	b2da      	uxtb	r2, r3
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80157d6:	f04f 33ff 	mov.w	r3, #4294967295
 80157da:	e03a      	b.n	8015852 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80157e2:	2b08      	cmp	r3, #8
 80157e4:	d806      	bhi.n	80157f4 <tcp_write_checks+0x74>
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80157ec:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80157f0:	4293      	cmp	r3, r2
 80157f2:	d909      	bls.n	8015808 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	7e9b      	ldrb	r3, [r3, #26]
 80157f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80157fc:	b2da      	uxtb	r2, r3
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015802:	f04f 33ff 	mov.w	r3, #4294967295
 8015806:	e024      	b.n	8015852 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801580e:	2b00      	cmp	r3, #0
 8015810:	d00f      	beq.n	8015832 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015816:	2b00      	cmp	r3, #0
 8015818:	d11a      	bne.n	8015850 <tcp_write_checks+0xd0>
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801581e:	2b00      	cmp	r3, #0
 8015820:	d116      	bne.n	8015850 <tcp_write_checks+0xd0>
 8015822:	4b0e      	ldr	r3, [pc, #56]	; (801585c <tcp_write_checks+0xdc>)
 8015824:	f240 1255 	movw	r2, #341	; 0x155
 8015828:	490d      	ldr	r1, [pc, #52]	; (8015860 <tcp_write_checks+0xe0>)
 801582a:	480e      	ldr	r0, [pc, #56]	; (8015864 <tcp_write_checks+0xe4>)
 801582c:	f004 ff2c 	bl	801a688 <iprintf>
 8015830:	e00e      	b.n	8015850 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015836:	2b00      	cmp	r3, #0
 8015838:	d103      	bne.n	8015842 <tcp_write_checks+0xc2>
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801583e:	2b00      	cmp	r3, #0
 8015840:	d006      	beq.n	8015850 <tcp_write_checks+0xd0>
 8015842:	4b06      	ldr	r3, [pc, #24]	; (801585c <tcp_write_checks+0xdc>)
 8015844:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015848:	4907      	ldr	r1, [pc, #28]	; (8015868 <tcp_write_checks+0xe8>)
 801584a:	4806      	ldr	r0, [pc, #24]	; (8015864 <tcp_write_checks+0xe4>)
 801584c:	f004 ff1c 	bl	801a688 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015850:	2300      	movs	r3, #0
}
 8015852:	4618      	mov	r0, r3
 8015854:	3708      	adds	r7, #8
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	0801d4a4 	.word	0x0801d4a4
 8015860:	0801d55c 	.word	0x0801d55c
 8015864:	0801d508 	.word	0x0801d508
 8015868:	0801d598 	.word	0x0801d598

0801586c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801586c:	b590      	push	{r4, r7, lr}
 801586e:	b09b      	sub	sp, #108	; 0x6c
 8015870:	af04      	add	r7, sp, #16
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	4611      	mov	r1, r2
 8015878:	461a      	mov	r2, r3
 801587a:	460b      	mov	r3, r1
 801587c:	80fb      	strh	r3, [r7, #6]
 801587e:	4613      	mov	r3, r2
 8015880:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015882:	2300      	movs	r3, #0
 8015884:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015886:	2300      	movs	r3, #0
 8015888:	653b      	str	r3, [r7, #80]	; 0x50
 801588a:	2300      	movs	r3, #0
 801588c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801588e:	2300      	movs	r3, #0
 8015890:	64bb      	str	r3, [r7, #72]	; 0x48
 8015892:	2300      	movs	r3, #0
 8015894:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015896:	2300      	movs	r3, #0
 8015898:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 801589c:	2300      	movs	r3, #0
 801589e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80158a2:	2300      	movs	r3, #0
 80158a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80158ac:	2300      	movs	r3, #0
 80158ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80158b0:	2300      	movs	r3, #0
 80158b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80158ba:	085b      	lsrs	r3, r3, #1
 80158bc:	b29a      	uxth	r2, r3
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158c2:	4293      	cmp	r3, r2
 80158c4:	bf28      	it	cs
 80158c6:	4613      	movcs	r3, r2
 80158c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80158ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d102      	bne.n	80158d6 <tcp_write+0x6a>
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158d4:	e000      	b.n	80158d8 <tcp_write+0x6c>
 80158d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d109      	bne.n	80158f4 <tcp_write+0x88>
 80158e0:	4b92      	ldr	r3, [pc, #584]	; (8015b2c <tcp_write+0x2c0>)
 80158e2:	f240 1291 	movw	r2, #401	; 0x191
 80158e6:	4992      	ldr	r1, [pc, #584]	; (8015b30 <tcp_write+0x2c4>)
 80158e8:	4892      	ldr	r0, [pc, #584]	; (8015b34 <tcp_write+0x2c8>)
 80158ea:	f004 fecd 	bl	801a688 <iprintf>
 80158ee:	f06f 030f 	mvn.w	r3, #15
 80158f2:	e30a      	b.n	8015f0a <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80158f4:	88fb      	ldrh	r3, [r7, #6]
 80158f6:	4619      	mov	r1, r3
 80158f8:	68f8      	ldr	r0, [r7, #12]
 80158fa:	f7ff ff41 	bl	8015780 <tcp_write_checks>
 80158fe:	4603      	mov	r3, r0
 8015900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015904:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015908:	2b00      	cmp	r3, #0
 801590a:	d002      	beq.n	8015912 <tcp_write+0xa6>
    return err;
 801590c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015910:	e2fb      	b.n	8015f0a <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015918:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015920:	2b00      	cmp	r3, #0
 8015922:	f000 80f4 	beq.w	8015b0e <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801592a:	653b      	str	r3, [r7, #80]	; 0x50
 801592c:	e002      	b.n	8015934 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 801592e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d1f8      	bne.n	801592e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 801593c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801593e:	7a9b      	ldrb	r3, [r3, #10]
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	b29b      	uxth	r3, r3
 8015944:	f003 0304 	and.w	r3, r3, #4
 8015948:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801594a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801594c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801594e:	891b      	ldrh	r3, [r3, #8]
 8015950:	4619      	mov	r1, r3
 8015952:	8c3b      	ldrh	r3, [r7, #32]
 8015954:	440b      	add	r3, r1
 8015956:	429a      	cmp	r2, r3
 8015958:	da06      	bge.n	8015968 <tcp_write+0xfc>
 801595a:	4b74      	ldr	r3, [pc, #464]	; (8015b2c <tcp_write+0x2c0>)
 801595c:	f240 12c7 	movw	r2, #455	; 0x1c7
 8015960:	4975      	ldr	r1, [pc, #468]	; (8015b38 <tcp_write+0x2cc>)
 8015962:	4874      	ldr	r0, [pc, #464]	; (8015b34 <tcp_write+0x2c8>)
 8015964:	f004 fe90 	bl	801a688 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801596a:	891a      	ldrh	r2, [r3, #8]
 801596c:	8c3b      	ldrh	r3, [r7, #32]
 801596e:	4413      	add	r3, r2
 8015970:	b29b      	uxth	r3, r3
 8015972:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015974:	1ad3      	subs	r3, r2, r3
 8015976:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801597e:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015980:	8a7b      	ldrh	r3, [r7, #18]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d026      	beq.n	80159d4 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015986:	8a7b      	ldrh	r3, [r7, #18]
 8015988:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801598a:	429a      	cmp	r2, r3
 801598c:	d206      	bcs.n	801599c <tcp_write+0x130>
 801598e:	4b67      	ldr	r3, [pc, #412]	; (8015b2c <tcp_write+0x2c0>)
 8015990:	f240 12d9 	movw	r2, #473	; 0x1d9
 8015994:	4969      	ldr	r1, [pc, #420]	; (8015b3c <tcp_write+0x2d0>)
 8015996:	4867      	ldr	r0, [pc, #412]	; (8015b34 <tcp_write+0x2c8>)
 8015998:	f004 fe76 	bl	801a688 <iprintf>
      seg = last_unsent;
 801599c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801599e:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80159a0:	8a7b      	ldrh	r3, [r7, #18]
 80159a2:	88fa      	ldrh	r2, [r7, #6]
 80159a4:	4293      	cmp	r3, r2
 80159a6:	bf28      	it	cs
 80159a8:	4613      	movcs	r3, r2
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80159ae:	4293      	cmp	r3, r2
 80159b0:	bf28      	it	cs
 80159b2:	4613      	movcs	r3, r2
 80159b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80159b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80159ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80159bc:	4413      	add	r3, r2
 80159be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80159c2:	8a7a      	ldrh	r2, [r7, #18]
 80159c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80159c6:	1ad3      	subs	r3, r2, r3
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80159cc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80159ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80159d0:	1ad3      	subs	r3, r2, r3
 80159d2:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80159d4:	8a7b      	ldrh	r3, [r7, #18]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d00b      	beq.n	80159f2 <tcp_write+0x186>
 80159da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80159de:	88fb      	ldrh	r3, [r7, #6]
 80159e0:	429a      	cmp	r2, r3
 80159e2:	d006      	beq.n	80159f2 <tcp_write+0x186>
 80159e4:	4b51      	ldr	r3, [pc, #324]	; (8015b2c <tcp_write+0x2c0>)
 80159e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80159ea:	4955      	ldr	r1, [pc, #340]	; (8015b40 <tcp_write+0x2d4>)
 80159ec:	4851      	ldr	r0, [pc, #324]	; (8015b34 <tcp_write+0x2c8>)
 80159ee:	f004 fe4b 	bl	801a688 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80159f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80159f6:	88fb      	ldrh	r3, [r7, #6]
 80159f8:	429a      	cmp	r2, r3
 80159fa:	f080 8169 	bcs.w	8015cd0 <tcp_write+0x464>
 80159fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f000 8165 	beq.w	8015cd0 <tcp_write+0x464>
 8015a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a08:	891b      	ldrh	r3, [r3, #8]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	f000 8160 	beq.w	8015cd0 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015a10:	88fa      	ldrh	r2, [r7, #6]
 8015a12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a16:	1ad2      	subs	r2, r2, r3
 8015a18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a1a:	4293      	cmp	r3, r2
 8015a1c:	bfa8      	it	ge
 8015a1e:	4613      	movge	r3, r2
 8015a20:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a24:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015a26:	797b      	ldrb	r3, [r7, #5]
 8015a28:	f003 0301 	and.w	r3, r3, #1
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d027      	beq.n	8015a80 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015a30:	f107 0012 	add.w	r0, r7, #18
 8015a34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015a36:	8bf9      	ldrh	r1, [r7, #30]
 8015a38:	2301      	movs	r3, #1
 8015a3a:	9302      	str	r3, [sp, #8]
 8015a3c:	797b      	ldrb	r3, [r7, #5]
 8015a3e:	9301      	str	r3, [sp, #4]
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	9300      	str	r3, [sp, #0]
 8015a44:	4603      	mov	r3, r0
 8015a46:	2004      	movs	r0, #4
 8015a48:	f7ff fe38 	bl	80156bc <tcp_pbuf_prealloc>
 8015a4c:	6578      	str	r0, [r7, #84]	; 0x54
 8015a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	f000 8228 	beq.w	8015ea6 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a58:	6858      	ldr	r0, [r3, #4]
 8015a5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015a5e:	68ba      	ldr	r2, [r7, #8]
 8015a60:	4413      	add	r3, r2
 8015a62:	8bfa      	ldrh	r2, [r7, #30]
 8015a64:	4619      	mov	r1, r3
 8015a66:	f004 fd1d 	bl	801a4a4 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015a6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015a6c:	f7fb fb68 	bl	8011140 <pbuf_clen>
 8015a70:	4603      	mov	r3, r0
 8015a72:	461a      	mov	r2, r3
 8015a74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015a78:	4413      	add	r3, r2
 8015a7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015a7e:	e03f      	b.n	8015b00 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a82:	685b      	ldr	r3, [r3, #4]
 8015a84:	637b      	str	r3, [r7, #52]	; 0x34
 8015a86:	e002      	b.n	8015a8e <tcp_write+0x222>
 8015a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8015a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d1f8      	bne.n	8015a88 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a98:	7b1b      	ldrb	r3, [r3, #12]
 8015a9a:	2b01      	cmp	r3, #1
 8015a9c:	d115      	bne.n	8015aca <tcp_write+0x25e>
 8015a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015aa0:	685b      	ldr	r3, [r3, #4]
 8015aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015aa4:	8952      	ldrh	r2, [r2, #10]
 8015aa6:	4413      	add	r3, r2
 8015aa8:	68ba      	ldr	r2, [r7, #8]
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d10d      	bne.n	8015aca <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015aae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d006      	beq.n	8015ac4 <tcp_write+0x258>
 8015ab6:	4b1d      	ldr	r3, [pc, #116]	; (8015b2c <tcp_write+0x2c0>)
 8015ab8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015abc:	4921      	ldr	r1, [pc, #132]	; (8015b44 <tcp_write+0x2d8>)
 8015abe:	481d      	ldr	r0, [pc, #116]	; (8015b34 <tcp_write+0x2c8>)
 8015ac0:	f004 fde2 	bl	801a688 <iprintf>
          extendlen = seglen;
 8015ac4:	8bfb      	ldrh	r3, [r7, #30]
 8015ac6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015ac8:	e01a      	b.n	8015b00 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015aca:	8bfb      	ldrh	r3, [r7, #30]
 8015acc:	2201      	movs	r2, #1
 8015ace:	4619      	mov	r1, r3
 8015ad0:	2004      	movs	r0, #4
 8015ad2:	f7fa ff23 	bl	801091c <pbuf_alloc>
 8015ad6:	6578      	str	r0, [r7, #84]	; 0x54
 8015ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	f000 81e5 	beq.w	8015eaa <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8015ae0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015ae4:	68ba      	ldr	r2, [r7, #8]
 8015ae6:	441a      	add	r2, r3
 8015ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015aea:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015aec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015aee:	f7fb fb27 	bl	8011140 <pbuf_clen>
 8015af2:	4603      	mov	r3, r0
 8015af4:	461a      	mov	r2, r3
 8015af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015afa:	4413      	add	r3, r2
 8015afc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8015b00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b04:	8bfb      	ldrh	r3, [r7, #30]
 8015b06:	4413      	add	r3, r2
 8015b08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8015b0c:	e0e0      	b.n	8015cd0 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	f000 80db 	beq.w	8015cd0 <tcp_write+0x464>
 8015b1a:	4b04      	ldr	r3, [pc, #16]	; (8015b2c <tcp_write+0x2c0>)
 8015b1c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8015b20:	4909      	ldr	r1, [pc, #36]	; (8015b48 <tcp_write+0x2dc>)
 8015b22:	4804      	ldr	r0, [pc, #16]	; (8015b34 <tcp_write+0x2c8>)
 8015b24:	f004 fdb0 	bl	801a688 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015b28:	e0d2      	b.n	8015cd0 <tcp_write+0x464>
 8015b2a:	bf00      	nop
 8015b2c:	0801d4a4 	.word	0x0801d4a4
 8015b30:	0801d5cc 	.word	0x0801d5cc
 8015b34:	0801d508 	.word	0x0801d508
 8015b38:	0801d600 	.word	0x0801d600
 8015b3c:	0801d618 	.word	0x0801d618
 8015b40:	0801d638 	.word	0x0801d638
 8015b44:	0801d658 	.word	0x0801d658
 8015b48:	0801d684 	.word	0x0801d684
    struct pbuf *p;
    u16_t left = len - pos;
 8015b4c:	88fa      	ldrh	r2, [r7, #6]
 8015b4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b5a:	b29b      	uxth	r3, r3
 8015b5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b5e:	1ad3      	subs	r3, r2, r3
 8015b60:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015b62:	8b7a      	ldrh	r2, [r7, #26]
 8015b64:	8bbb      	ldrh	r3, [r7, #28]
 8015b66:	4293      	cmp	r3, r2
 8015b68:	bf28      	it	cs
 8015b6a:	4613      	movcs	r3, r2
 8015b6c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015b6e:	797b      	ldrb	r3, [r7, #5]
 8015b70:	f003 0301 	and.w	r3, r3, #1
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d036      	beq.n	8015be6 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b7c:	b29a      	uxth	r2, r3
 8015b7e:	8b3b      	ldrh	r3, [r7, #24]
 8015b80:	4413      	add	r3, r2
 8015b82:	b299      	uxth	r1, r3
 8015b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	bf0c      	ite	eq
 8015b8a:	2301      	moveq	r3, #1
 8015b8c:	2300      	movne	r3, #0
 8015b8e:	b2db      	uxtb	r3, r3
 8015b90:	f107 0012 	add.w	r0, r7, #18
 8015b94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b96:	9302      	str	r3, [sp, #8]
 8015b98:	797b      	ldrb	r3, [r7, #5]
 8015b9a:	9301      	str	r3, [sp, #4]
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	9300      	str	r3, [sp, #0]
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	2000      	movs	r0, #0
 8015ba4:	f7ff fd8a 	bl	80156bc <tcp_pbuf_prealloc>
 8015ba8:	6338      	str	r0, [r7, #48]	; 0x30
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	f000 817e 	beq.w	8015eae <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb4:	895b      	ldrh	r3, [r3, #10]
 8015bb6:	8b3a      	ldrh	r2, [r7, #24]
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d906      	bls.n	8015bca <tcp_write+0x35e>
 8015bbc:	4b8f      	ldr	r3, [pc, #572]	; (8015dfc <tcp_write+0x590>)
 8015bbe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015bc2:	498f      	ldr	r1, [pc, #572]	; (8015e00 <tcp_write+0x594>)
 8015bc4:	488f      	ldr	r0, [pc, #572]	; (8015e04 <tcp_write+0x598>)
 8015bc6:	f004 fd5f 	bl	801a688 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8015bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bcc:	685a      	ldr	r2, [r3, #4]
 8015bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bd2:	18d0      	adds	r0, r2, r3
 8015bd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015bd8:	68ba      	ldr	r2, [r7, #8]
 8015bda:	4413      	add	r3, r2
 8015bdc:	8b3a      	ldrh	r2, [r7, #24]
 8015bde:	4619      	mov	r1, r3
 8015be0:	f004 fc60 	bl	801a4a4 <memcpy>
 8015be4:	e02e      	b.n	8015c44 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015be6:	8a7b      	ldrh	r3, [r7, #18]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d006      	beq.n	8015bfa <tcp_write+0x38e>
 8015bec:	4b83      	ldr	r3, [pc, #524]	; (8015dfc <tcp_write+0x590>)
 8015bee:	f240 224b 	movw	r2, #587	; 0x24b
 8015bf2:	4985      	ldr	r1, [pc, #532]	; (8015e08 <tcp_write+0x59c>)
 8015bf4:	4883      	ldr	r0, [pc, #524]	; (8015e04 <tcp_write+0x598>)
 8015bf6:	f004 fd47 	bl	801a688 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015bfa:	8b3b      	ldrh	r3, [r7, #24]
 8015bfc:	2201      	movs	r2, #1
 8015bfe:	4619      	mov	r1, r3
 8015c00:	2000      	movs	r0, #0
 8015c02:	f7fa fe8b 	bl	801091c <pbuf_alloc>
 8015c06:	6178      	str	r0, [r7, #20]
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	f000 8151 	beq.w	8015eb2 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8015c10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	441a      	add	r2, r3
 8015c18:	697b      	ldr	r3, [r7, #20]
 8015c1a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	2200      	movs	r2, #0
 8015c24:	4619      	mov	r1, r3
 8015c26:	2000      	movs	r0, #0
 8015c28:	f7fa fe78 	bl	801091c <pbuf_alloc>
 8015c2c:	6338      	str	r0, [r7, #48]	; 0x30
 8015c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d103      	bne.n	8015c3c <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015c34:	6978      	ldr	r0, [r7, #20]
 8015c36:	f7fb f9e9 	bl	801100c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015c3a:	e13d      	b.n	8015eb8 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015c3c:	6979      	ldr	r1, [r7, #20]
 8015c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c40:	f7fb fabc 	bl	80111bc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c46:	f7fb fa7b 	bl	8011140 <pbuf_clen>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	461a      	mov	r2, r3
 8015c4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015c52:	4413      	add	r3, r2
 8015c54:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015c58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015c5c:	2b09      	cmp	r3, #9
 8015c5e:	d805      	bhi.n	8015c6c <tcp_write+0x400>
 8015c60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015c64:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015c68:	4293      	cmp	r3, r2
 8015c6a:	d903      	bls.n	8015c74 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c6e:	f7fb f9cd 	bl	801100c <pbuf_free>
      goto memerr;
 8015c72:	e121      	b.n	8015eb8 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c7c:	441a      	add	r2, r3
 8015c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015c82:	9300      	str	r3, [sp, #0]
 8015c84:	4613      	mov	r3, r2
 8015c86:	2200      	movs	r2, #0
 8015c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c8a:	68f8      	ldr	r0, [r7, #12]
 8015c8c:	f7ff fc8e 	bl	80155ac <tcp_create_segment>
 8015c90:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	f000 810e 	beq.w	8015eb6 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d102      	bne.n	8015ca6 <tcp_write+0x43a>
      queue = seg;
 8015ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8015ca4:	e00c      	b.n	8015cc0 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d106      	bne.n	8015cba <tcp_write+0x44e>
 8015cac:	4b53      	ldr	r3, [pc, #332]	; (8015dfc <tcp_write+0x590>)
 8015cae:	f240 2285 	movw	r2, #645	; 0x285
 8015cb2:	4956      	ldr	r1, [pc, #344]	; (8015e0c <tcp_write+0x5a0>)
 8015cb4:	4853      	ldr	r0, [pc, #332]	; (8015e04 <tcp_write+0x598>)
 8015cb6:	f004 fce7 	bl	801a688 <iprintf>
      prev_seg->next = seg;
 8015cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015cbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015cbe:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cc2:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015cc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015cc8:	8b3b      	ldrh	r3, [r7, #24]
 8015cca:	4413      	add	r3, r2
 8015ccc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015cd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015cd4:	88fb      	ldrh	r3, [r7, #6]
 8015cd6:	429a      	cmp	r2, r3
 8015cd8:	f4ff af38 	bcc.w	8015b4c <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015cdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d02c      	beq.n	8015d3c <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ce8:	e01e      	b.n	8015d28 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8015cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cec:	891a      	ldrh	r2, [r3, #8]
 8015cee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015cf0:	4413      	add	r3, r2
 8015cf2:	b29a      	uxth	r2, r3
 8015cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf6:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8015cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d110      	bne.n	8015d22 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d06:	8952      	ldrh	r2, [r2, #10]
 8015d08:	4413      	add	r3, r2
 8015d0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015d0c:	68b9      	ldr	r1, [r7, #8]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f004 fbc8 	bl	801a4a4 <memcpy>
        p->len += oversize_used;
 8015d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d16:	895a      	ldrh	r2, [r3, #10]
 8015d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d1a:	4413      	add	r3, r2
 8015d1c:	b29a      	uxth	r2, r3
 8015d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d20:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d1dd      	bne.n	8015cea <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8015d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d30:	891a      	ldrh	r2, [r3, #8]
 8015d32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015d34:	4413      	add	r3, r2
 8015d36:	b29a      	uxth	r2, r3
 8015d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d3a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015d3c:	8a7a      	ldrh	r2, [r7, #18]
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8015d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d018      	beq.n	8015d7c <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d106      	bne.n	8015d5e <tcp_write+0x4f2>
 8015d50:	4b2a      	ldr	r3, [pc, #168]	; (8015dfc <tcp_write+0x590>)
 8015d52:	f240 22ba 	movw	r2, #698	; 0x2ba
 8015d56:	492e      	ldr	r1, [pc, #184]	; (8015e10 <tcp_write+0x5a4>)
 8015d58:	482a      	ldr	r0, [pc, #168]	; (8015e04 <tcp_write+0x598>)
 8015d5a:	f004 fc95 	bl	801a688 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7fb fa29 	bl	80111bc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d6c:	891a      	ldrh	r2, [r3, #8]
 8015d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d70:	891b      	ldrh	r3, [r3, #8]
 8015d72:	4413      	add	r3, r2
 8015d74:	b29a      	uxth	r2, r3
 8015d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d78:	811a      	strh	r2, [r3, #8]
 8015d7a:	e037      	b.n	8015dec <tcp_write+0x580>
  } else if (extendlen > 0) {
 8015d7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d034      	beq.n	8015dec <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d003      	beq.n	8015d90 <tcp_write+0x524>
 8015d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d8a:	685b      	ldr	r3, [r3, #4]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d106      	bne.n	8015d9e <tcp_write+0x532>
 8015d90:	4b1a      	ldr	r3, [pc, #104]	; (8015dfc <tcp_write+0x590>)
 8015d92:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8015d96:	491f      	ldr	r1, [pc, #124]	; (8015e14 <tcp_write+0x5a8>)
 8015d98:	481a      	ldr	r0, [pc, #104]	; (8015e04 <tcp_write+0x598>)
 8015d9a:	f004 fc75 	bl	801a688 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8015da4:	e009      	b.n	8015dba <tcp_write+0x54e>
      p->tot_len += extendlen;
 8015da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da8:	891a      	ldrh	r2, [r3, #8]
 8015daa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015dac:	4413      	add	r3, r2
 8015dae:	b29a      	uxth	r2, r3
 8015db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db2:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8015dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d1f1      	bne.n	8015da6 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8015dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc4:	891a      	ldrh	r2, [r3, #8]
 8015dc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015dc8:	4413      	add	r3, r2
 8015dca:	b29a      	uxth	r2, r3
 8015dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dce:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd2:	895a      	ldrh	r2, [r3, #10]
 8015dd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015dd6:	4413      	add	r3, r2
 8015dd8:	b29a      	uxth	r2, r3
 8015dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ddc:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015de0:	891a      	ldrh	r2, [r3, #8]
 8015de2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015de4:	4413      	add	r3, r2
 8015de6:	b29a      	uxth	r2, r3
 8015de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dea:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d112      	bne.n	8015e18 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015df6:	669a      	str	r2, [r3, #104]	; 0x68
 8015df8:	e011      	b.n	8015e1e <tcp_write+0x5b2>
 8015dfa:	bf00      	nop
 8015dfc:	0801d4a4 	.word	0x0801d4a4
 8015e00:	0801d6b4 	.word	0x0801d6b4
 8015e04:	0801d508 	.word	0x0801d508
 8015e08:	0801d6f4 	.word	0x0801d6f4
 8015e0c:	0801d704 	.word	0x0801d704
 8015e10:	0801d718 	.word	0x0801d718
 8015e14:	0801d750 	.word	0x0801d750
  } else {
    last_unsent->next = queue;
 8015e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e1c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015e22:	88fb      	ldrh	r3, [r7, #6]
 8015e24:	441a      	add	r2, r3
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015e30:	88fb      	ldrh	r3, [r7, #6]
 8015e32:	1ad3      	subs	r3, r2, r3
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015e42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d00e      	beq.n	8015e6e <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d10a      	bne.n	8015e6e <tcp_write+0x602>
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d106      	bne.n	8015e6e <tcp_write+0x602>
 8015e60:	4b2c      	ldr	r3, [pc, #176]	; (8015f14 <tcp_write+0x6a8>)
 8015e62:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8015e66:	492c      	ldr	r1, [pc, #176]	; (8015f18 <tcp_write+0x6ac>)
 8015e68:	482c      	ldr	r0, [pc, #176]	; (8015f1c <tcp_write+0x6b0>)
 8015e6a:	f004 fc0d 	bl	801a688 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8015e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d016      	beq.n	8015ea2 <tcp_write+0x636>
 8015e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e76:	68db      	ldr	r3, [r3, #12]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d012      	beq.n	8015ea2 <tcp_write+0x636>
 8015e7c:	797b      	ldrb	r3, [r7, #5]
 8015e7e:	f003 0302 	and.w	r3, r3, #2
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d10d      	bne.n	8015ea2 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e88:	68db      	ldr	r3, [r3, #12]
 8015e8a:	899b      	ldrh	r3, [r3, #12]
 8015e8c:	b29c      	uxth	r4, r3
 8015e8e:	2008      	movs	r0, #8
 8015e90:	f7f9 fe5a 	bl	800fb48 <lwip_htons>
 8015e94:	4603      	mov	r3, r0
 8015e96:	461a      	mov	r2, r3
 8015e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	4322      	orrs	r2, r4
 8015e9e:	b292      	uxth	r2, r2
 8015ea0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	e031      	b.n	8015f0a <tcp_write+0x69e>
          goto memerr;
 8015ea6:	bf00      	nop
 8015ea8:	e006      	b.n	8015eb8 <tcp_write+0x64c>
            goto memerr;
 8015eaa:	bf00      	nop
 8015eac:	e004      	b.n	8015eb8 <tcp_write+0x64c>
        goto memerr;
 8015eae:	bf00      	nop
 8015eb0:	e002      	b.n	8015eb8 <tcp_write+0x64c>
        goto memerr;
 8015eb2:	bf00      	nop
 8015eb4:	e000      	b.n	8015eb8 <tcp_write+0x64c>
      goto memerr;
 8015eb6:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	7e9b      	ldrb	r3, [r3, #26]
 8015ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015ec0:	b2da      	uxtb	r2, r3
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d002      	beq.n	8015ed2 <tcp_write+0x666>
    pbuf_free(concat_p);
 8015ecc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015ece:	f7fb f89d 	bl	801100c <pbuf_free>
  }
  if (queue != NULL) {
 8015ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d002      	beq.n	8015ede <tcp_write+0x672>
    tcp_segs_free(queue);
 8015ed8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015eda:	f7fc fcc2 	bl	8012862 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00e      	beq.n	8015f06 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d10a      	bne.n	8015f06 <tcp_write+0x69a>
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d106      	bne.n	8015f06 <tcp_write+0x69a>
 8015ef8:	4b06      	ldr	r3, [pc, #24]	; (8015f14 <tcp_write+0x6a8>)
 8015efa:	f240 3201 	movw	r2, #769	; 0x301
 8015efe:	4906      	ldr	r1, [pc, #24]	; (8015f18 <tcp_write+0x6ac>)
 8015f00:	4806      	ldr	r0, [pc, #24]	; (8015f1c <tcp_write+0x6b0>)
 8015f02:	f004 fbc1 	bl	801a688 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	375c      	adds	r7, #92	; 0x5c
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd90      	pop	{r4, r7, pc}
 8015f12:	bf00      	nop
 8015f14:	0801d4a4 	.word	0x0801d4a4
 8015f18:	0801d788 	.word	0x0801d788
 8015f1c:	0801d508 	.word	0x0801d508

08015f20 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b08a      	sub	sp, #40	; 0x28
 8015f24:	af02      	add	r7, sp, #8
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	460b      	mov	r3, r1
 8015f2a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015f30:	2300      	movs	r3, #0
 8015f32:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015f34:	78fb      	ldrb	r3, [r7, #3]
 8015f36:	f003 0303 	and.w	r3, r3, #3
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d106      	bne.n	8015f4c <tcp_enqueue_flags+0x2c>
 8015f3e:	4b6f      	ldr	r3, [pc, #444]	; (80160fc <tcp_enqueue_flags+0x1dc>)
 8015f40:	f240 321a 	movw	r2, #794	; 0x31a
 8015f44:	496e      	ldr	r1, [pc, #440]	; (8016100 <tcp_enqueue_flags+0x1e0>)
 8015f46:	486f      	ldr	r0, [pc, #444]	; (8016104 <tcp_enqueue_flags+0x1e4>)
 8015f48:	f004 fb9e 	bl	801a688 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015f52:	2b08      	cmp	r3, #8
 8015f54:	d806      	bhi.n	8015f64 <tcp_enqueue_flags+0x44>
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015f5c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015f60:	4293      	cmp	r3, r2
 8015f62:	d90e      	bls.n	8015f82 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8015f64:	78fb      	ldrb	r3, [r7, #3]
 8015f66:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d109      	bne.n	8015f82 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	7e9b      	ldrb	r3, [r3, #26]
 8015f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015f76:	b2da      	uxtb	r2, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8015f80:	e0b7      	b.n	80160f2 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8015f82:	78fb      	ldrb	r3, [r7, #3]
 8015f84:	f003 0302 	and.w	r3, r3, #2
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d001      	beq.n	8015f90 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015f90:	7ffb      	ldrb	r3, [r7, #31]
 8015f92:	009b      	lsls	r3, r3, #2
 8015f94:	b2db      	uxtb	r3, r3
 8015f96:	f003 0304 	and.w	r3, r3, #4
 8015f9a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015f9c:	7dfb      	ldrb	r3, [r7, #23]
 8015f9e:	b29b      	uxth	r3, r3
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	4619      	mov	r1, r3
 8015fa4:	2000      	movs	r0, #0
 8015fa6:	f7fa fcb9 	bl	801091c <pbuf_alloc>
 8015faa:	6138      	str	r0, [r7, #16]
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d109      	bne.n	8015fc6 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	7e9b      	ldrb	r3, [r3, #26]
 8015fb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015fba:	b2da      	uxtb	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fc4:	e095      	b.n	80160f2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	895a      	ldrh	r2, [r3, #10]
 8015fca:	7dfb      	ldrb	r3, [r7, #23]
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d206      	bcs.n	8015fe0 <tcp_enqueue_flags+0xc0>
 8015fd2:	4b4a      	ldr	r3, [pc, #296]	; (80160fc <tcp_enqueue_flags+0x1dc>)
 8015fd4:	f44f 7250 	mov.w	r2, #832	; 0x340
 8015fd8:	494b      	ldr	r1, [pc, #300]	; (8016108 <tcp_enqueue_flags+0x1e8>)
 8015fda:	484a      	ldr	r0, [pc, #296]	; (8016104 <tcp_enqueue_flags+0x1e4>)
 8015fdc:	f004 fb54 	bl	801a688 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8015fe4:	78fa      	ldrb	r2, [r7, #3]
 8015fe6:	7ffb      	ldrb	r3, [r7, #31]
 8015fe8:	9300      	str	r3, [sp, #0]
 8015fea:	460b      	mov	r3, r1
 8015fec:	6939      	ldr	r1, [r7, #16]
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7ff fadc 	bl	80155ac <tcp_create_segment>
 8015ff4:	60f8      	str	r0, [r7, #12]
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d109      	bne.n	8016010 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	7e9b      	ldrb	r3, [r3, #26]
 8016000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016004:	b2da      	uxtb	r2, r3
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801600a:	f04f 33ff 	mov.w	r3, #4294967295
 801600e:	e070      	b.n	80160f2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	68db      	ldr	r3, [r3, #12]
 8016014:	f003 0303 	and.w	r3, r3, #3
 8016018:	2b00      	cmp	r3, #0
 801601a:	d006      	beq.n	801602a <tcp_enqueue_flags+0x10a>
 801601c:	4b37      	ldr	r3, [pc, #220]	; (80160fc <tcp_enqueue_flags+0x1dc>)
 801601e:	f240 3249 	movw	r2, #841	; 0x349
 8016022:	493a      	ldr	r1, [pc, #232]	; (801610c <tcp_enqueue_flags+0x1ec>)
 8016024:	4837      	ldr	r0, [pc, #220]	; (8016104 <tcp_enqueue_flags+0x1e4>)
 8016026:	f004 fb2f 	bl	801a688 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	891b      	ldrh	r3, [r3, #8]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d006      	beq.n	8016040 <tcp_enqueue_flags+0x120>
 8016032:	4b32      	ldr	r3, [pc, #200]	; (80160fc <tcp_enqueue_flags+0x1dc>)
 8016034:	f240 324a 	movw	r2, #842	; 0x34a
 8016038:	4935      	ldr	r1, [pc, #212]	; (8016110 <tcp_enqueue_flags+0x1f0>)
 801603a:	4832      	ldr	r0, [pc, #200]	; (8016104 <tcp_enqueue_flags+0x1e4>)
 801603c:	f004 fb24 	bl	801a688 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016044:	2b00      	cmp	r3, #0
 8016046:	d103      	bne.n	8016050 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	68fa      	ldr	r2, [r7, #12]
 801604c:	669a      	str	r2, [r3, #104]	; 0x68
 801604e:	e00d      	b.n	801606c <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016054:	61bb      	str	r3, [r7, #24]
 8016056:	e002      	b.n	801605e <tcp_enqueue_flags+0x13e>
 8016058:	69bb      	ldr	r3, [r7, #24]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	61bb      	str	r3, [r7, #24]
 801605e:	69bb      	ldr	r3, [r7, #24]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d1f8      	bne.n	8016058 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8016066:	69bb      	ldr	r3, [r7, #24]
 8016068:	68fa      	ldr	r2, [r7, #12]
 801606a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2200      	movs	r2, #0
 8016070:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016074:	78fb      	ldrb	r3, [r7, #3]
 8016076:	f003 0302 	and.w	r3, r3, #2
 801607a:	2b00      	cmp	r3, #0
 801607c:	d104      	bne.n	8016088 <tcp_enqueue_flags+0x168>
 801607e:	78fb      	ldrb	r3, [r7, #3]
 8016080:	f003 0301 	and.w	r3, r3, #1
 8016084:	2b00      	cmp	r3, #0
 8016086:	d004      	beq.n	8016092 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801608c:	1c5a      	adds	r2, r3, #1
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016092:	78fb      	ldrb	r3, [r7, #3]
 8016094:	f003 0301 	and.w	r3, r3, #1
 8016098:	2b00      	cmp	r3, #0
 801609a:	d006      	beq.n	80160aa <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	7e9b      	ldrb	r3, [r3, #26]
 80160a0:	f043 0320 	orr.w	r3, r3, #32
 80160a4:	b2da      	uxtb	r2, r3
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	685b      	ldr	r3, [r3, #4]
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fb f846 	bl	8011140 <pbuf_clen>
 80160b4:	4603      	mov	r3, r0
 80160b6:	461a      	mov	r2, r3
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80160be:	4413      	add	r3, r2
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d00e      	beq.n	80160f0 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d10a      	bne.n	80160f0 <tcp_enqueue_flags+0x1d0>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d106      	bne.n	80160f0 <tcp_enqueue_flags+0x1d0>
 80160e2:	4b06      	ldr	r3, [pc, #24]	; (80160fc <tcp_enqueue_flags+0x1dc>)
 80160e4:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80160e8:	490a      	ldr	r1, [pc, #40]	; (8016114 <tcp_enqueue_flags+0x1f4>)
 80160ea:	4806      	ldr	r0, [pc, #24]	; (8016104 <tcp_enqueue_flags+0x1e4>)
 80160ec:	f004 facc 	bl	801a688 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80160f0:	2300      	movs	r3, #0
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3720      	adds	r7, #32
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	0801d4a4 	.word	0x0801d4a4
 8016100:	0801d7a8 	.word	0x0801d7a8
 8016104:	0801d508 	.word	0x0801d508
 8016108:	0801d800 	.word	0x0801d800
 801610c:	0801d83c 	.word	0x0801d83c
 8016110:	0801d854 	.word	0x0801d854
 8016114:	0801d880 	.word	0x0801d880

08016118 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016118:	b590      	push	{r4, r7, lr}
 801611a:	b08b      	sub	sp, #44	; 0x2c
 801611c:	af04      	add	r7, sp, #16
 801611e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8016120:	2300      	movs	r3, #0
 8016122:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016124:	7dbb      	ldrb	r3, [r7, #22]
 8016126:	b29c      	uxth	r4, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801612c:	4618      	mov	r0, r3
 801612e:	f7f9 fd18 	bl	800fb62 <lwip_htonl>
 8016132:	4603      	mov	r3, r0
 8016134:	2200      	movs	r2, #0
 8016136:	4621      	mov	r1, r4
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f7ff f97d 	bl	8015438 <tcp_output_alloc_header>
 801613e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016140:	693b      	ldr	r3, [r7, #16]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d109      	bne.n	801615a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	7e9b      	ldrb	r3, [r3, #26]
 801614a:	f043 0303 	orr.w	r3, r3, #3
 801614e:	b2da      	uxtb	r2, r3
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016154:	f06f 0301 	mvn.w	r3, #1
 8016158:	e036      	b.n	80161c8 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	3304      	adds	r3, #4
 801615e:	4618      	mov	r0, r3
 8016160:	f002 f8e0 	bl	8018324 <ip4_route>
 8016164:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d102      	bne.n	8016172 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 801616c:	23fc      	movs	r3, #252	; 0xfc
 801616e:	75fb      	strb	r3, [r7, #23]
 8016170:	e012      	b.n	8016198 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8016172:	6879      	ldr	r1, [r7, #4]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	1d18      	adds	r0, r3, #4
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	7a9c      	ldrb	r4, [r3, #10]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	7a5b      	ldrb	r3, [r3, #9]
 8016180:	68fa      	ldr	r2, [r7, #12]
 8016182:	9202      	str	r2, [sp, #8]
 8016184:	2206      	movs	r2, #6
 8016186:	9201      	str	r2, [sp, #4]
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	4623      	mov	r3, r4
 801618c:	4602      	mov	r2, r0
 801618e:	6938      	ldr	r0, [r7, #16]
 8016190:	f002 fa72 	bl	8018678 <ip4_output_if>
 8016194:	4603      	mov	r3, r0
 8016196:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8016198:	6938      	ldr	r0, [r7, #16]
 801619a:	f7fa ff37 	bl	801100c <pbuf_free>

  if (err != ERR_OK) {
 801619e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d007      	beq.n	80161b6 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	7e9b      	ldrb	r3, [r3, #26]
 80161aa:	f043 0303 	orr.w	r3, r3, #3
 80161ae:	b2da      	uxtb	r2, r3
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	769a      	strb	r2, [r3, #26]
 80161b4:	e006      	b.n	80161c4 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	7e9b      	ldrb	r3, [r3, #26]
 80161ba:	f023 0303 	bic.w	r3, r3, #3
 80161be:	b2da      	uxtb	r2, r3
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	769a      	strb	r2, [r3, #26]
  }

  return err;
 80161c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	371c      	adds	r7, #28
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd90      	pop	{r4, r7, pc}

080161d0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80161d0:	b5b0      	push	{r4, r5, r7, lr}
 80161d2:	b08a      	sub	sp, #40	; 0x28
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	7d1b      	ldrb	r3, [r3, #20]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d106      	bne.n	80161ee <tcp_output+0x1e>
 80161e0:	4b99      	ldr	r3, [pc, #612]	; (8016448 <tcp_output+0x278>)
 80161e2:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80161e6:	4999      	ldr	r1, [pc, #612]	; (801644c <tcp_output+0x27c>)
 80161e8:	4899      	ldr	r0, [pc, #612]	; (8016450 <tcp_output+0x280>)
 80161ea:	f004 fa4d 	bl	801a688 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80161ee:	4b99      	ldr	r3, [pc, #612]	; (8016454 <tcp_output+0x284>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	429a      	cmp	r2, r3
 80161f6:	d101      	bne.n	80161fc <tcp_output+0x2c>
    return ERR_OK;
 80161f8:	2300      	movs	r3, #0
 80161fa:	e1cb      	b.n	8016594 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016208:	4293      	cmp	r3, r2
 801620a:	bf28      	it	cs
 801620c:	4613      	movcs	r3, r2
 801620e:	b29b      	uxth	r3, r3
 8016210:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016216:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	7e9b      	ldrb	r3, [r3, #26]
 801621c:	f003 0302 	and.w	r3, r3, #2
 8016220:	2b00      	cmp	r3, #0
 8016222:	d017      	beq.n	8016254 <tcp_output+0x84>
 8016224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00f      	beq.n	801624a <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 801622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622c:	68db      	ldr	r3, [r3, #12]
 801622e:	685b      	ldr	r3, [r3, #4]
 8016230:	4618      	mov	r0, r3
 8016232:	f7f9 fc96 	bl	800fb62 <lwip_htonl>
 8016236:	4602      	mov	r2, r0
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801623c:	1ad3      	subs	r3, r2, r3
 801623e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016240:	8912      	ldrh	r2, [r2, #8]
 8016242:	4413      	add	r3, r2
     (seg == NULL ||
 8016244:	69ba      	ldr	r2, [r7, #24]
 8016246:	429a      	cmp	r2, r3
 8016248:	d204      	bcs.n	8016254 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f7ff ff64 	bl	8016118 <tcp_send_empty_ack>
 8016250:	4603      	mov	r3, r0
 8016252:	e19f      	b.n	8016594 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016258:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801625a:	6a3b      	ldr	r3, [r7, #32]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d007      	beq.n	8016270 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 8016260:	e002      	b.n	8016268 <tcp_output+0x98>
 8016262:	6a3b      	ldr	r3, [r7, #32]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	623b      	str	r3, [r7, #32]
 8016268:	6a3b      	ldr	r3, [r7, #32]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d1f8      	bne.n	8016262 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	3304      	adds	r3, #4
 8016274:	4618      	mov	r0, r3
 8016276:	f002 f855 	bl	8018324 <ip4_route>
 801627a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d102      	bne.n	8016288 <tcp_output+0xb8>
    return ERR_RTE;
 8016282:	f06f 0303 	mvn.w	r3, #3
 8016286:	e185      	b.n	8016594 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d003      	beq.n	8016296 <tcp_output+0xc6>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d111      	bne.n	80162ba <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d002      	beq.n	80162a2 <tcp_output+0xd2>
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	3304      	adds	r3, #4
 80162a0:	e000      	b.n	80162a4 <tcp_output+0xd4>
 80162a2:	2300      	movs	r3, #0
 80162a4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d102      	bne.n	80162b2 <tcp_output+0xe2>
      return ERR_RTE;
 80162ac:	f06f 0303 	mvn.w	r3, #3
 80162b0:	e170      	b.n	8016594 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80162b2:	693b      	ldr	r3, [r7, #16]
 80162b4:	681a      	ldr	r2, [r3, #0]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80162ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162bc:	2b00      	cmp	r3, #0
 80162be:	f000 813f 	beq.w	8016540 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7f9 fc4a 	bl	800fb62 <lwip_htonl>
 80162ce:	4602      	mov	r2, r0
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162d8:	8912      	ldrh	r2, [r2, #8]
 80162da:	4413      	add	r3, r2
  if (seg != NULL &&
 80162dc:	69ba      	ldr	r2, [r7, #24]
 80162de:	429a      	cmp	r2, r3
 80162e0:	f080 812e 	bcs.w	8016540 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80162e4:	69bb      	ldr	r3, [r7, #24]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	f000 812a 	beq.w	8016540 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80162f2:	461a      	mov	r2, r3
 80162f4:	69bb      	ldr	r3, [r7, #24]
 80162f6:	4293      	cmp	r3, r2
 80162f8:	f040 8122 	bne.w	8016540 <tcp_output+0x370>
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016300:	2b00      	cmp	r3, #0
 8016302:	f040 811d 	bne.w	8016540 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801630c:	2b00      	cmp	r3, #0
 801630e:	f040 812c 	bne.w	801656a <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2200      	movs	r2, #0
 8016316:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2201      	movs	r2, #1
 801631e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8016322:	e122      	b.n	801656a <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016326:	68db      	ldr	r3, [r3, #12]
 8016328:	899b      	ldrh	r3, [r3, #12]
 801632a:	b29b      	uxth	r3, r3
 801632c:	4618      	mov	r0, r3
 801632e:	f7f9 fc0b 	bl	800fb48 <lwip_htons>
 8016332:	4603      	mov	r3, r0
 8016334:	f003 0304 	and.w	r3, r3, #4
 8016338:	2b00      	cmp	r3, #0
 801633a:	d006      	beq.n	801634a <tcp_output+0x17a>
 801633c:	4b42      	ldr	r3, [pc, #264]	; (8016448 <tcp_output+0x278>)
 801633e:	f240 4245 	movw	r2, #1093	; 0x445
 8016342:	4945      	ldr	r1, [pc, #276]	; (8016458 <tcp_output+0x288>)
 8016344:	4842      	ldr	r0, [pc, #264]	; (8016450 <tcp_output+0x280>)
 8016346:	f004 f99f 	bl	801a688 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801634e:	2b00      	cmp	r3, #0
 8016350:	d01f      	beq.n	8016392 <tcp_output+0x1c2>
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	7e9b      	ldrb	r3, [r3, #26]
 8016356:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801635a:	2b00      	cmp	r3, #0
 801635c:	d119      	bne.n	8016392 <tcp_output+0x1c2>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016362:	2b00      	cmp	r3, #0
 8016364:	d00b      	beq.n	801637e <tcp_output+0x1ae>
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d110      	bne.n	8016392 <tcp_output+0x1c2>
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016374:	891a      	ldrh	r2, [r3, #8]
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801637a:	429a      	cmp	r2, r3
 801637c:	d209      	bcs.n	8016392 <tcp_output+0x1c2>
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016384:	2b00      	cmp	r3, #0
 8016386:	d004      	beq.n	8016392 <tcp_output+0x1c2>
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801638e:	2b08      	cmp	r3, #8
 8016390:	d901      	bls.n	8016396 <tcp_output+0x1c6>
 8016392:	2301      	movs	r3, #1
 8016394:	e000      	b.n	8016398 <tcp_output+0x1c8>
 8016396:	2300      	movs	r3, #0
 8016398:	2b00      	cmp	r3, #0
 801639a:	d106      	bne.n	80163aa <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	7e9b      	ldrb	r3, [r3, #26]
 80163a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	f000 80e2 	beq.w	801656e <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	7d1b      	ldrb	r3, [r3, #20]
 80163ae:	2b02      	cmp	r3, #2
 80163b0:	d00d      	beq.n	80163ce <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80163b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b4:	68db      	ldr	r3, [r3, #12]
 80163b6:	899b      	ldrh	r3, [r3, #12]
 80163b8:	b29c      	uxth	r4, r3
 80163ba:	2010      	movs	r0, #16
 80163bc:	f7f9 fbc4 	bl	800fb48 <lwip_htons>
 80163c0:	4603      	mov	r3, r0
 80163c2:	461a      	mov	r2, r3
 80163c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c6:	68db      	ldr	r3, [r3, #12]
 80163c8:	4322      	orrs	r2, r4
 80163ca:	b292      	uxth	r2, r2
 80163cc:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80163ce:	697a      	ldr	r2, [r7, #20]
 80163d0:	6879      	ldr	r1, [r7, #4]
 80163d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163d4:	f000 f8e2 	bl	801659c <tcp_output_segment>
 80163d8:	4603      	mov	r3, r0
 80163da:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80163dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d009      	beq.n	80163f8 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	7e9b      	ldrb	r3, [r3, #26]
 80163e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80163ec:	b2da      	uxtb	r2, r3
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	769a      	strb	r2, [r3, #26]
      return err;
 80163f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163f6:	e0cd      	b.n	8016594 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	681a      	ldr	r2, [r3, #0]
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	7d1b      	ldrb	r3, [r3, #20]
 8016404:	2b02      	cmp	r3, #2
 8016406:	d006      	beq.n	8016416 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	7e9b      	ldrb	r3, [r3, #26]
 801640c:	f023 0303 	bic.w	r3, r3, #3
 8016410:	b2da      	uxtb	r2, r3
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016418:	68db      	ldr	r3, [r3, #12]
 801641a:	685b      	ldr	r3, [r3, #4]
 801641c:	4618      	mov	r0, r3
 801641e:	f7f9 fba0 	bl	800fb62 <lwip_htonl>
 8016422:	4604      	mov	r4, r0
 8016424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016426:	891b      	ldrh	r3, [r3, #8]
 8016428:	461d      	mov	r5, r3
 801642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801642c:	68db      	ldr	r3, [r3, #12]
 801642e:	899b      	ldrh	r3, [r3, #12]
 8016430:	b29b      	uxth	r3, r3
 8016432:	4618      	mov	r0, r3
 8016434:	f7f9 fb88 	bl	800fb48 <lwip_htons>
 8016438:	4603      	mov	r3, r0
 801643a:	f003 0303 	and.w	r3, r3, #3
 801643e:	2b00      	cmp	r3, #0
 8016440:	d00c      	beq.n	801645c <tcp_output+0x28c>
 8016442:	2301      	movs	r3, #1
 8016444:	e00b      	b.n	801645e <tcp_output+0x28e>
 8016446:	bf00      	nop
 8016448:	0801d4a4 	.word	0x0801d4a4
 801644c:	0801d8a8 	.word	0x0801d8a8
 8016450:	0801d508 	.word	0x0801d508
 8016454:	2000beec 	.word	0x2000beec
 8016458:	0801d8d0 	.word	0x0801d8d0
 801645c:	2300      	movs	r3, #0
 801645e:	442b      	add	r3, r5
 8016460:	4423      	add	r3, r4
 8016462:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	1ad3      	subs	r3, r2, r3
 801646c:	2b00      	cmp	r3, #0
 801646e:	da02      	bge.n	8016476 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	68ba      	ldr	r2, [r7, #8]
 8016474:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016478:	891b      	ldrh	r3, [r3, #8]
 801647a:	461c      	mov	r4, r3
 801647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801647e:	68db      	ldr	r3, [r3, #12]
 8016480:	899b      	ldrh	r3, [r3, #12]
 8016482:	b29b      	uxth	r3, r3
 8016484:	4618      	mov	r0, r3
 8016486:	f7f9 fb5f 	bl	800fb48 <lwip_htons>
 801648a:	4603      	mov	r3, r0
 801648c:	f003 0303 	and.w	r3, r3, #3
 8016490:	2b00      	cmp	r3, #0
 8016492:	d001      	beq.n	8016498 <tcp_output+0x2c8>
 8016494:	2301      	movs	r3, #1
 8016496:	e000      	b.n	801649a <tcp_output+0x2ca>
 8016498:	2300      	movs	r3, #0
 801649a:	4423      	add	r3, r4
 801649c:	2b00      	cmp	r3, #0
 801649e:	d049      	beq.n	8016534 <tcp_output+0x364>
      seg->next = NULL;
 80164a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a2:	2200      	movs	r2, #0
 80164a4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d105      	bne.n	80164ba <tcp_output+0x2ea>
        pcb->unacked = seg;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164b2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80164b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b6:	623b      	str	r3, [r7, #32]
 80164b8:	e03f      	b.n	801653a <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80164ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164bc:	68db      	ldr	r3, [r3, #12]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7f9 fb4e 	bl	800fb62 <lwip_htonl>
 80164c6:	4604      	mov	r4, r0
 80164c8:	6a3b      	ldr	r3, [r7, #32]
 80164ca:	68db      	ldr	r3, [r3, #12]
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7f9 fb47 	bl	800fb62 <lwip_htonl>
 80164d4:	4603      	mov	r3, r0
 80164d6:	1ae3      	subs	r3, r4, r3
 80164d8:	2b00      	cmp	r3, #0
 80164da:	da24      	bge.n	8016526 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	336c      	adds	r3, #108	; 0x6c
 80164e0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80164e2:	e002      	b.n	80164ea <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80164e4:	69fb      	ldr	r3, [r7, #28]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80164ea:	69fb      	ldr	r3, [r7, #28]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d011      	beq.n	8016516 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80164f2:	69fb      	ldr	r3, [r7, #28]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	68db      	ldr	r3, [r3, #12]
 80164f8:	685b      	ldr	r3, [r3, #4]
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7f9 fb31 	bl	800fb62 <lwip_htonl>
 8016500:	4604      	mov	r4, r0
 8016502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016504:	68db      	ldr	r3, [r3, #12]
 8016506:	685b      	ldr	r3, [r3, #4]
 8016508:	4618      	mov	r0, r3
 801650a:	f7f9 fb2a 	bl	800fb62 <lwip_htonl>
 801650e:	4603      	mov	r3, r0
 8016510:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016512:	2b00      	cmp	r3, #0
 8016514:	dbe6      	blt.n	80164e4 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 8016516:	69fb      	ldr	r3, [r7, #28]
 8016518:	681a      	ldr	r2, [r3, #0]
 801651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016522:	601a      	str	r2, [r3, #0]
 8016524:	e009      	b.n	801653a <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016526:	6a3b      	ldr	r3, [r7, #32]
 8016528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801652a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801652c:	6a3b      	ldr	r3, [r7, #32]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	623b      	str	r3, [r7, #32]
 8016532:	e002      	b.n	801653a <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016536:	f7fc f9a9 	bl	801288c <tcp_seg_free>
    }
    seg = pcb->unsent;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801653e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016542:	2b00      	cmp	r3, #0
 8016544:	d015      	beq.n	8016572 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016548:	68db      	ldr	r3, [r3, #12]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	4618      	mov	r0, r3
 801654e:	f7f9 fb08 	bl	800fb62 <lwip_htonl>
 8016552:	4602      	mov	r2, r0
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016558:	1ad3      	subs	r3, r2, r3
 801655a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801655c:	8912      	ldrh	r2, [r2, #8]
 801655e:	4413      	add	r3, r2
  while (seg != NULL &&
 8016560:	69ba      	ldr	r2, [r7, #24]
 8016562:	429a      	cmp	r2, r3
 8016564:	f4bf aede 	bcs.w	8016324 <tcp_output+0x154>
  }
output_done:
 8016568:	e003      	b.n	8016572 <tcp_output+0x3a2>
    goto output_done;
 801656a:	bf00      	nop
 801656c:	e002      	b.n	8016574 <tcp_output+0x3a4>
      break;
 801656e:	bf00      	nop
 8016570:	e000      	b.n	8016574 <tcp_output+0x3a4>
output_done:
 8016572:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016578:	2b00      	cmp	r3, #0
 801657a:	d103      	bne.n	8016584 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2200      	movs	r2, #0
 8016580:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	7e9b      	ldrb	r3, [r3, #26]
 8016588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801658c:	b2da      	uxtb	r2, r3
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8016592:	2300      	movs	r3, #0
}
 8016594:	4618      	mov	r0, r3
 8016596:	3728      	adds	r7, #40	; 0x28
 8016598:	46bd      	mov	sp, r7
 801659a:	bdb0      	pop	{r4, r5, r7, pc}

0801659c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801659c:	b5b0      	push	{r4, r5, r7, lr}
 801659e:	b08c      	sub	sp, #48	; 0x30
 80165a0:	af04      	add	r7, sp, #16
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	685b      	ldr	r3, [r3, #4]
 80165ac:	89db      	ldrh	r3, [r3, #14]
 80165ae:	2b01      	cmp	r3, #1
 80165b0:	d001      	beq.n	80165b6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80165b2:	2300      	movs	r3, #0
 80165b4:	e08a      	b.n	80166cc <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80165b6:	68bb      	ldr	r3, [r7, #8]
 80165b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	68dc      	ldr	r4, [r3, #12]
 80165be:	4610      	mov	r0, r2
 80165c0:	f7f9 facf 	bl	800fb62 <lwip_htonl>
 80165c4:	4603      	mov	r3, r0
 80165c6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	68dc      	ldr	r4, [r3, #12]
 80165d0:	4610      	mov	r0, r2
 80165d2:	f7f9 fab9 	bl	800fb48 <lwip_htons>
 80165d6:	4603      	mov	r3, r0
 80165d8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80165da:	68bb      	ldr	r3, [r7, #8]
 80165dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165de:	68ba      	ldr	r2, [r7, #8]
 80165e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80165e2:	441a      	add	r2, r3
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	68db      	ldr	r3, [r3, #12]
 80165ec:	3314      	adds	r3, #20
 80165ee:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	7a9b      	ldrb	r3, [r3, #10]
 80165f4:	f003 0301 	and.w	r3, r3, #1
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d014      	beq.n	8016626 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	3304      	adds	r3, #4
 8016600:	4619      	mov	r1, r3
 8016602:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016606:	f7fc fc7b 	bl	8012f00 <tcp_eff_send_mss_impl>
 801660a:	4603      	mov	r3, r0
 801660c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801660e:	8b7b      	ldrh	r3, [r7, #26]
 8016610:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016614:	4618      	mov	r0, r3
 8016616:	f7f9 faa4 	bl	800fb62 <lwip_htonl>
 801661a:	4602      	mov	r2, r0
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016620:	69fb      	ldr	r3, [r7, #28]
 8016622:	3304      	adds	r3, #4
 8016624:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016626:	68bb      	ldr	r3, [r7, #8]
 8016628:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801662c:	2b00      	cmp	r3, #0
 801662e:	da02      	bge.n	8016636 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	2200      	movs	r2, #0
 8016634:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016636:	68bb      	ldr	r3, [r7, #8]
 8016638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801663a:	2b00      	cmp	r3, #0
 801663c:	d10c      	bne.n	8016658 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801663e:	4b25      	ldr	r3, [pc, #148]	; (80166d4 <tcp_output_segment+0x138>)
 8016640:	681a      	ldr	r2, [r3, #0]
 8016642:	68bb      	ldr	r3, [r7, #8]
 8016644:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	68db      	ldr	r3, [r3, #12]
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	4618      	mov	r0, r3
 801664e:	f7f9 fa88 	bl	800fb62 <lwip_htonl>
 8016652:	4602      	mov	r2, r0
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	68da      	ldr	r2, [r3, #12]
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	1ad3      	subs	r3, r2, r3
 8016664:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	685b      	ldr	r3, [r3, #4]
 801666a:	8959      	ldrh	r1, [r3, #10]
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	8b3a      	ldrh	r2, [r7, #24]
 8016672:	1a8a      	subs	r2, r1, r2
 8016674:	b292      	uxth	r2, r2
 8016676:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	8919      	ldrh	r1, [r3, #8]
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	685b      	ldr	r3, [r3, #4]
 8016682:	8b3a      	ldrh	r2, [r7, #24]
 8016684:	1a8a      	subs	r2, r1, r2
 8016686:	b292      	uxth	r2, r2
 8016688:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	685b      	ldr	r3, [r3, #4]
 801668e:	68fa      	ldr	r2, [r7, #12]
 8016690:	68d2      	ldr	r2, [r2, #12]
 8016692:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	68db      	ldr	r3, [r3, #12]
 8016698:	2200      	movs	r2, #0
 801669a:	741a      	strb	r2, [r3, #16]
 801669c:	2200      	movs	r2, #0
 801669e:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	6858      	ldr	r0, [r3, #4]
 80166a4:	68b9      	ldr	r1, [r7, #8]
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	1d1c      	adds	r4, r3, #4
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	7a9d      	ldrb	r5, [r3, #10]
 80166ae:	68bb      	ldr	r3, [r7, #8]
 80166b0:	7a5b      	ldrb	r3, [r3, #9]
 80166b2:	687a      	ldr	r2, [r7, #4]
 80166b4:	9202      	str	r2, [sp, #8]
 80166b6:	2206      	movs	r2, #6
 80166b8:	9201      	str	r2, [sp, #4]
 80166ba:	9300      	str	r3, [sp, #0]
 80166bc:	462b      	mov	r3, r5
 80166be:	4622      	mov	r2, r4
 80166c0:	f001 ffda 	bl	8018678 <ip4_output_if>
 80166c4:	4603      	mov	r3, r0
 80166c6:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80166c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80166cc:	4618      	mov	r0, r3
 80166ce:	3720      	adds	r7, #32
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bdb0      	pop	{r4, r5, r7, pc}
 80166d4:	2000bedc 	.word	0x2000bedc

080166d8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b08c      	sub	sp, #48	; 0x30
 80166dc:	af04      	add	r7, sp, #16
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	607a      	str	r2, [r7, #4]
 80166e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80166e6:	2200      	movs	r2, #0
 80166e8:	2114      	movs	r1, #20
 80166ea:	2001      	movs	r0, #1
 80166ec:	f7fa f916 	bl	801091c <pbuf_alloc>
 80166f0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80166f2:	69fb      	ldr	r3, [r7, #28]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d05b      	beq.n	80167b0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80166f8:	69fb      	ldr	r3, [r7, #28]
 80166fa:	895b      	ldrh	r3, [r3, #10]
 80166fc:	2b13      	cmp	r3, #19
 80166fe:	d806      	bhi.n	801670e <tcp_rst+0x36>
 8016700:	4b2d      	ldr	r3, [pc, #180]	; (80167b8 <tcp_rst+0xe0>)
 8016702:	f240 524c 	movw	r2, #1356	; 0x54c
 8016706:	492d      	ldr	r1, [pc, #180]	; (80167bc <tcp_rst+0xe4>)
 8016708:	482d      	ldr	r0, [pc, #180]	; (80167c0 <tcp_rst+0xe8>)
 801670a:	f003 ffbd 	bl	801a688 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	685b      	ldr	r3, [r3, #4]
 8016712:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8016714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016716:	4618      	mov	r0, r3
 8016718:	f7f9 fa16 	bl	800fb48 <lwip_htons>
 801671c:	4603      	mov	r3, r0
 801671e:	461a      	mov	r2, r3
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8016724:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016726:	4618      	mov	r0, r3
 8016728:	f7f9 fa0e 	bl	800fb48 <lwip_htons>
 801672c:	4603      	mov	r3, r0
 801672e:	461a      	mov	r2, r3
 8016730:	69bb      	ldr	r3, [r7, #24]
 8016732:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8016734:	68f8      	ldr	r0, [r7, #12]
 8016736:	f7f9 fa14 	bl	800fb62 <lwip_htonl>
 801673a:	4602      	mov	r2, r0
 801673c:	69bb      	ldr	r3, [r7, #24]
 801673e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8016740:	68b8      	ldr	r0, [r7, #8]
 8016742:	f7f9 fa0e 	bl	800fb62 <lwip_htonl>
 8016746:	4602      	mov	r2, r0
 8016748:	69bb      	ldr	r3, [r7, #24]
 801674a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 801674c:	f245 0014 	movw	r0, #20500	; 0x5014
 8016750:	f7f9 f9fa 	bl	800fb48 <lwip_htons>
 8016754:	4603      	mov	r3, r0
 8016756:	461a      	mov	r2, r3
 8016758:	69bb      	ldr	r3, [r7, #24]
 801675a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801675c:	69bb      	ldr	r3, [r7, #24]
 801675e:	2200      	movs	r2, #0
 8016760:	f042 0208 	orr.w	r2, r2, #8
 8016764:	739a      	strb	r2, [r3, #14]
 8016766:	2200      	movs	r2, #0
 8016768:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801676c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801676e:	69bb      	ldr	r3, [r7, #24]
 8016770:	2200      	movs	r2, #0
 8016772:	741a      	strb	r2, [r3, #16]
 8016774:	2200      	movs	r2, #0
 8016776:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8016778:	69bb      	ldr	r3, [r7, #24]
 801677a:	2200      	movs	r2, #0
 801677c:	749a      	strb	r2, [r3, #18]
 801677e:	2200      	movs	r2, #0
 8016780:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8016782:	6838      	ldr	r0, [r7, #0]
 8016784:	f001 fdce 	bl	8018324 <ip4_route>
 8016788:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801678a:	697b      	ldr	r3, [r7, #20]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d00b      	beq.n	80167a8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8016790:	697b      	ldr	r3, [r7, #20]
 8016792:	9302      	str	r3, [sp, #8]
 8016794:	2306      	movs	r3, #6
 8016796:	9301      	str	r3, [sp, #4]
 8016798:	2300      	movs	r3, #0
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	23ff      	movs	r3, #255	; 0xff
 801679e:	683a      	ldr	r2, [r7, #0]
 80167a0:	6879      	ldr	r1, [r7, #4]
 80167a2:	69f8      	ldr	r0, [r7, #28]
 80167a4:	f001 ff68 	bl	8018678 <ip4_output_if>
  }
  pbuf_free(p);
 80167a8:	69f8      	ldr	r0, [r7, #28]
 80167aa:	f7fa fc2f 	bl	801100c <pbuf_free>
 80167ae:	e000      	b.n	80167b2 <tcp_rst+0xda>
    return;
 80167b0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80167b2:	3720      	adds	r7, #32
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	0801d4a4 	.word	0x0801d4a4
 80167bc:	0801d4d8 	.word	0x0801d4d8
 80167c0:	0801d508 	.word	0x0801d508

080167c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d029      	beq.n	8016828 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167d8:	60fb      	str	r3, [r7, #12]
 80167da:	e002      	b.n	80167e2 <tcp_rexmit_rto+0x1e>
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	60fb      	str	r3, [r7, #12]
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d1f8      	bne.n	80167dc <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2200      	movs	r2, #0
 80167fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016806:	2bff      	cmp	r3, #255	; 0xff
 8016808:	d007      	beq.n	801681a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016810:	3301      	adds	r3, #1
 8016812:	b2da      	uxtb	r2, r3
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2200      	movs	r2, #0
 801681e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8016820:	6878      	ldr	r0, [r7, #4]
 8016822:	f7ff fcd5 	bl	80161d0 <tcp_output>
 8016826:	e000      	b.n	801682a <tcp_rexmit_rto+0x66>
    return;
 8016828:	bf00      	nop
}
 801682a:	3710      	adds	r7, #16
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016830:	b590      	push	{r4, r7, lr}
 8016832:	b085      	sub	sp, #20
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801683c:	2b00      	cmp	r3, #0
 801683e:	d043      	beq.n	80168c8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016844:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	681a      	ldr	r2, [r3, #0]
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	3368      	adds	r3, #104	; 0x68
 8016852:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016854:	e002      	b.n	801685c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d011      	beq.n	8016888 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	68db      	ldr	r3, [r3, #12]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	4618      	mov	r0, r3
 801686e:	f7f9 f978 	bl	800fb62 <lwip_htonl>
 8016872:	4604      	mov	r4, r0
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	4618      	mov	r0, r3
 801687c:	f7f9 f971 	bl	800fb62 <lwip_htonl>
 8016880:	4603      	mov	r3, r0
 8016882:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016884:	2b00      	cmp	r3, #0
 8016886:	dbe6      	blt.n	8016856 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	68ba      	ldr	r2, [r7, #8]
 8016894:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d103      	bne.n	80168a6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	2200      	movs	r2, #0
 80168a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80168ac:	2bff      	cmp	r3, #255	; 0xff
 80168ae:	d007      	beq.n	80168c0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80168b6:	3301      	adds	r3, #1
 80168b8:	b2da      	uxtb	r2, r3
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	2200      	movs	r2, #0
 80168c4:	635a      	str	r2, [r3, #52]	; 0x34
 80168c6:	e000      	b.n	80168ca <tcp_rexmit+0x9a>
    return;
 80168c8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80168ca:	3714      	adds	r7, #20
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd90      	pop	{r4, r7, pc}

080168d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d041      	beq.n	8016964 <tcp_rexmit_fast+0x94>
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	7e9b      	ldrb	r3, [r3, #26]
 80168e4:	f003 0304 	and.w	r3, r3, #4
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d13b      	bne.n	8016964 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f7ff ff9f 	bl	8016830 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168fe:	4293      	cmp	r3, r2
 8016900:	bf28      	it	cs
 8016902:	4613      	movcs	r3, r2
 8016904:	b29b      	uxth	r3, r3
 8016906:	0fda      	lsrs	r2, r3, #31
 8016908:	4413      	add	r3, r2
 801690a:	105b      	asrs	r3, r3, #1
 801690c:	b29a      	uxth	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801691a:	461a      	mov	r2, r3
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016920:	005b      	lsls	r3, r3, #1
 8016922:	429a      	cmp	r2, r3
 8016924:	d206      	bcs.n	8016934 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801692a:	005b      	lsls	r3, r3, #1
 801692c:	b29a      	uxth	r2, r3
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801693e:	4619      	mov	r1, r3
 8016940:	0049      	lsls	r1, r1, #1
 8016942:	440b      	add	r3, r1
 8016944:	b29b      	uxth	r3, r3
 8016946:	4413      	add	r3, r2
 8016948:	b29a      	uxth	r2, r3
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	7e9b      	ldrb	r3, [r3, #26]
 8016954:	f043 0304 	orr.w	r3, r3, #4
 8016958:	b2da      	uxtb	r2, r3
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2200      	movs	r2, #0
 8016962:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8016964:	bf00      	nop
 8016966:	3708      	adds	r7, #8
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}

0801696c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b08a      	sub	sp, #40	; 0x28
 8016970:	af04      	add	r7, sp, #16
 8016972:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016978:	3b01      	subs	r3, #1
 801697a:	4618      	mov	r0, r3
 801697c:	f7f9 f8f1 	bl	800fb62 <lwip_htonl>
 8016980:	4603      	mov	r3, r0
 8016982:	2200      	movs	r2, #0
 8016984:	2100      	movs	r1, #0
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f7fe fd56 	bl	8015438 <tcp_output_alloc_header>
 801698c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d102      	bne.n	801699a <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016994:	f04f 33ff 	mov.w	r3, #4294967295
 8016998:	e021      	b.n	80169de <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	3304      	adds	r3, #4
 801699e:	4618      	mov	r0, r3
 80169a0:	f001 fcc0 	bl	8018324 <ip4_route>
 80169a4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d102      	bne.n	80169b2 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80169ac:	23fc      	movs	r3, #252	; 0xfc
 80169ae:	75fb      	strb	r3, [r7, #23]
 80169b0:	e010      	b.n	80169d4 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80169b2:	6879      	ldr	r1, [r7, #4]
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	1d1a      	adds	r2, r3, #4
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	7a98      	ldrb	r0, [r3, #10]
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	9302      	str	r3, [sp, #8]
 80169c0:	2306      	movs	r3, #6
 80169c2:	9301      	str	r3, [sp, #4]
 80169c4:	2300      	movs	r3, #0
 80169c6:	9300      	str	r3, [sp, #0]
 80169c8:	4603      	mov	r3, r0
 80169ca:	6938      	ldr	r0, [r7, #16]
 80169cc:	f001 fe54 	bl	8018678 <ip4_output_if>
 80169d0:	4603      	mov	r3, r0
 80169d2:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80169d4:	6938      	ldr	r0, [r7, #16]
 80169d6:	f7fa fb19 	bl	801100c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80169da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80169de:	4618      	mov	r0, r3
 80169e0:	3718      	adds	r7, #24
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}

080169e6 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80169e6:	b590      	push	{r4, r7, lr}
 80169e8:	b08f      	sub	sp, #60	; 0x3c
 80169ea:	af04      	add	r7, sp, #16
 80169ec:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169f2:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80169f4:	6a3b      	ldr	r3, [r7, #32]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d102      	bne.n	8016a00 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80169fe:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8016a00:	6a3b      	ldr	r3, [r7, #32]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d101      	bne.n	8016a0a <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8016a06:	2300      	movs	r3, #0
 8016a08:	e085      	b.n	8016b16 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016a0a:	6a3b      	ldr	r3, [r7, #32]
 8016a0c:	68db      	ldr	r3, [r3, #12]
 8016a0e:	899b      	ldrh	r3, [r3, #12]
 8016a10:	b29b      	uxth	r3, r3
 8016a12:	4618      	mov	r0, r3
 8016a14:	f7f9 f898 	bl	800fb48 <lwip_htons>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	f003 0301 	and.w	r3, r3, #1
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d005      	beq.n	8016a2e <tcp_zero_window_probe+0x48>
 8016a22:	6a3b      	ldr	r3, [r7, #32]
 8016a24:	891b      	ldrh	r3, [r3, #8]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d101      	bne.n	8016a2e <tcp_zero_window_probe+0x48>
 8016a2a:	2301      	movs	r3, #1
 8016a2c:	e000      	b.n	8016a30 <tcp_zero_window_probe+0x4a>
 8016a2e:	2300      	movs	r3, #0
 8016a30:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016a32:	7ffb      	ldrb	r3, [r7, #31]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	bf0c      	ite	eq
 8016a38:	2301      	moveq	r3, #1
 8016a3a:	2300      	movne	r3, #0
 8016a3c:	b2db      	uxtb	r3, r3
 8016a3e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8016a40:	6a3b      	ldr	r3, [r7, #32]
 8016a42:	68db      	ldr	r3, [r3, #12]
 8016a44:	685b      	ldr	r3, [r3, #4]
 8016a46:	8bba      	ldrh	r2, [r7, #28]
 8016a48:	2100      	movs	r1, #0
 8016a4a:	6878      	ldr	r0, [r7, #4]
 8016a4c:	f7fe fcf4 	bl	8015438 <tcp_output_alloc_header>
 8016a50:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016a52:	69bb      	ldr	r3, [r7, #24]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d102      	bne.n	8016a5e <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016a58:	f04f 33ff 	mov.w	r3, #4294967295
 8016a5c:	e05b      	b.n	8016b16 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016a5e:	69bb      	ldr	r3, [r7, #24]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016a64:	7ffb      	ldrb	r3, [r7, #31]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d00e      	beq.n	8016a88 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	899b      	ldrh	r3, [r3, #12]
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016a74:	b29c      	uxth	r4, r3
 8016a76:	2011      	movs	r0, #17
 8016a78:	f7f9 f866 	bl	800fb48 <lwip_htons>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	4323      	orrs	r3, r4
 8016a80:	b29a      	uxth	r2, r3
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	819a      	strh	r2, [r3, #12]
 8016a86:	e010      	b.n	8016aaa <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016a88:	69bb      	ldr	r3, [r7, #24]
 8016a8a:	685b      	ldr	r3, [r3, #4]
 8016a8c:	3314      	adds	r3, #20
 8016a8e:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016a90:	6a3b      	ldr	r3, [r7, #32]
 8016a92:	6858      	ldr	r0, [r3, #4]
 8016a94:	6a3b      	ldr	r3, [r7, #32]
 8016a96:	685b      	ldr	r3, [r3, #4]
 8016a98:	891a      	ldrh	r2, [r3, #8]
 8016a9a:	6a3b      	ldr	r3, [r7, #32]
 8016a9c:	891b      	ldrh	r3, [r3, #8]
 8016a9e:	1ad3      	subs	r3, r2, r3
 8016aa0:	b29b      	uxth	r3, r3
 8016aa2:	2201      	movs	r2, #1
 8016aa4:	6939      	ldr	r1, [r7, #16]
 8016aa6:	f7fa fcab 	bl	8011400 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016aaa:	6a3b      	ldr	r3, [r7, #32]
 8016aac:	68db      	ldr	r3, [r3, #12]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7f9 f856 	bl	800fb62 <lwip_htonl>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	3301      	adds	r3, #1
 8016aba:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	1ad3      	subs	r3, r2, r3
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	da02      	bge.n	8016ace <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	68fa      	ldr	r2, [r7, #12]
 8016acc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	3304      	adds	r3, #4
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f001 fc26 	bl	8018324 <ip4_route>
 8016ad8:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8016ada:	68bb      	ldr	r3, [r7, #8]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d103      	bne.n	8016ae8 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8016ae0:	23fc      	movs	r3, #252	; 0xfc
 8016ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ae6:	e011      	b.n	8016b0c <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016ae8:	6879      	ldr	r1, [r7, #4]
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	1d1a      	adds	r2, r3, #4
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	7a98      	ldrb	r0, [r3, #10]
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	9302      	str	r3, [sp, #8]
 8016af6:	2306      	movs	r3, #6
 8016af8:	9301      	str	r3, [sp, #4]
 8016afa:	2300      	movs	r3, #0
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	4603      	mov	r3, r0
 8016b00:	69b8      	ldr	r0, [r7, #24]
 8016b02:	f001 fdb9 	bl	8018678 <ip4_output_if>
 8016b06:	4603      	mov	r3, r0
 8016b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8016b0c:	69b8      	ldr	r0, [r7, #24]
 8016b0e:	f7fa fa7d 	bl	801100c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016b12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	372c      	adds	r7, #44	; 0x2c
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd90      	pop	{r4, r7, pc}
	...

08016b20 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b082      	sub	sp, #8
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016b28:	f7fa fd4c 	bl	80115c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016b2c:	4b0a      	ldr	r3, [pc, #40]	; (8016b58 <tcpip_tcp_timer+0x38>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d103      	bne.n	8016b3c <tcpip_tcp_timer+0x1c>
 8016b34:	4b09      	ldr	r3, [pc, #36]	; (8016b5c <tcpip_tcp_timer+0x3c>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d005      	beq.n	8016b48 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	4908      	ldr	r1, [pc, #32]	; (8016b60 <tcpip_tcp_timer+0x40>)
 8016b40:	20fa      	movs	r0, #250	; 0xfa
 8016b42:	f000 f86f 	bl	8016c24 <sys_timeout>
 8016b46:	e003      	b.n	8016b50 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016b48:	4b06      	ldr	r3, [pc, #24]	; (8016b64 <tcpip_tcp_timer+0x44>)
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	601a      	str	r2, [r3, #0]
  }
}
 8016b4e:	bf00      	nop
 8016b50:	bf00      	nop
 8016b52:	3708      	adds	r7, #8
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	2000bed8 	.word	0x2000bed8
 8016b5c:	2000bee8 	.word	0x2000bee8
 8016b60:	08016b21 	.word	0x08016b21
 8016b64:	2000512c 	.word	0x2000512c

08016b68 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016b6c:	4b0a      	ldr	r3, [pc, #40]	; (8016b98 <tcp_timer_needed+0x30>)
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d10f      	bne.n	8016b94 <tcp_timer_needed+0x2c>
 8016b74:	4b09      	ldr	r3, [pc, #36]	; (8016b9c <tcp_timer_needed+0x34>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d103      	bne.n	8016b84 <tcp_timer_needed+0x1c>
 8016b7c:	4b08      	ldr	r3, [pc, #32]	; (8016ba0 <tcp_timer_needed+0x38>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d007      	beq.n	8016b94 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016b84:	4b04      	ldr	r3, [pc, #16]	; (8016b98 <tcp_timer_needed+0x30>)
 8016b86:	2201      	movs	r2, #1
 8016b88:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	4905      	ldr	r1, [pc, #20]	; (8016ba4 <tcp_timer_needed+0x3c>)
 8016b8e:	20fa      	movs	r0, #250	; 0xfa
 8016b90:	f000 f848 	bl	8016c24 <sys_timeout>
  }
}
 8016b94:	bf00      	nop
 8016b96:	bd80      	pop	{r7, pc}
 8016b98:	2000512c 	.word	0x2000512c
 8016b9c:	2000bed8 	.word	0x2000bed8
 8016ba0:	2000bee8 	.word	0x2000bee8
 8016ba4:	08016b21 	.word	0x08016b21

08016ba8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b084      	sub	sp, #16
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	685b      	ldr	r3, [r3, #4]
 8016bb8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	687a      	ldr	r2, [r7, #4]
 8016bc0:	4903      	ldr	r1, [pc, #12]	; (8016bd0 <cyclic_timer+0x28>)
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f000 f82e 	bl	8016c24 <sys_timeout>
}
 8016bc8:	bf00      	nop
 8016bca:	3710      	adds	r7, #16
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}
 8016bd0:	08016ba9 	.word	0x08016ba9

08016bd4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016bda:	2301      	movs	r3, #1
 8016bdc:	607b      	str	r3, [r7, #4]
 8016bde:	e00e      	b.n	8016bfe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8016be0:	4a0d      	ldr	r2, [pc, #52]	; (8016c18 <sys_timeouts_init+0x44>)
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	00db      	lsls	r3, r3, #3
 8016bec:	4a0a      	ldr	r2, [pc, #40]	; (8016c18 <sys_timeouts_init+0x44>)
 8016bee:	4413      	add	r3, r2
 8016bf0:	461a      	mov	r2, r3
 8016bf2:	490a      	ldr	r1, [pc, #40]	; (8016c1c <sys_timeouts_init+0x48>)
 8016bf4:	f000 f816 	bl	8016c24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	607b      	str	r3, [r7, #4]
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2b02      	cmp	r3, #2
 8016c02:	d9ed      	bls.n	8016be0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8016c04:	f7f1 fc58 	bl	80084b8 <sys_now>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	4a05      	ldr	r2, [pc, #20]	; (8016c20 <sys_timeouts_init+0x4c>)
 8016c0c:	6013      	str	r3, [r2, #0]
}
 8016c0e:	bf00      	nop
 8016c10:	3708      	adds	r7, #8
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}
 8016c16:	bf00      	nop
 8016c18:	0801ecbc 	.word	0x0801ecbc
 8016c1c:	08016ba9 	.word	0x08016ba9
 8016c20:	20005128 	.word	0x20005128

08016c24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b088      	sub	sp, #32
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	60f8      	str	r0, [r7, #12]
 8016c2c:	60b9      	str	r1, [r7, #8]
 8016c2e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016c30:	200a      	movs	r0, #10
 8016c32:	f7f9 fbdf 	bl	80103f4 <memp_malloc>
 8016c36:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d10a      	bne.n	8016c54 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016c3e:	697b      	ldr	r3, [r7, #20]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	f040 8084 	bne.w	8016d4e <sys_timeout+0x12a>
 8016c46:	4b44      	ldr	r3, [pc, #272]	; (8016d58 <sys_timeout+0x134>)
 8016c48:	22d4      	movs	r2, #212	; 0xd4
 8016c4a:	4944      	ldr	r1, [pc, #272]	; (8016d5c <sys_timeout+0x138>)
 8016c4c:	4844      	ldr	r0, [pc, #272]	; (8016d60 <sys_timeout+0x13c>)
 8016c4e:	f003 fd1b 	bl	801a688 <iprintf>
    return;
 8016c52:	e07c      	b.n	8016d4e <sys_timeout+0x12a>
  }

  now = sys_now();
 8016c54:	f7f1 fc30 	bl	80084b8 <sys_now>
 8016c58:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8016c5a:	4b42      	ldr	r3, [pc, #264]	; (8016d64 <sys_timeout+0x140>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d105      	bne.n	8016c6e <sys_timeout+0x4a>
    diff = 0;
 8016c62:	2300      	movs	r3, #0
 8016c64:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8016c66:	4a40      	ldr	r2, [pc, #256]	; (8016d68 <sys_timeout+0x144>)
 8016c68:	693b      	ldr	r3, [r7, #16]
 8016c6a:	6013      	str	r3, [r2, #0]
 8016c6c:	e004      	b.n	8016c78 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8016c6e:	4b3e      	ldr	r3, [pc, #248]	; (8016d68 <sys_timeout+0x144>)
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	693a      	ldr	r2, [r7, #16]
 8016c74:	1ad3      	subs	r3, r2, r3
 8016c76:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8016c78:	697b      	ldr	r3, [r7, #20]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	68ba      	ldr	r2, [r7, #8]
 8016c82:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8016c8a:	68fa      	ldr	r2, [r7, #12]
 8016c8c:	69bb      	ldr	r3, [r7, #24]
 8016c8e:	441a      	add	r2, r3
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016c94:	4b33      	ldr	r3, [pc, #204]	; (8016d64 <sys_timeout+0x140>)
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d103      	bne.n	8016ca4 <sys_timeout+0x80>
    next_timeout = timeout;
 8016c9c:	4a31      	ldr	r2, [pc, #196]	; (8016d64 <sys_timeout+0x140>)
 8016c9e:	697b      	ldr	r3, [r7, #20]
 8016ca0:	6013      	str	r3, [r2, #0]
    return;
 8016ca2:	e055      	b.n	8016d50 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8016ca4:	4b2f      	ldr	r3, [pc, #188]	; (8016d64 <sys_timeout+0x140>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	685b      	ldr	r3, [r3, #4]
 8016caa:	68fa      	ldr	r2, [r7, #12]
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d20f      	bcs.n	8016cd0 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8016cb0:	4b2c      	ldr	r3, [pc, #176]	; (8016d64 <sys_timeout+0x140>)
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	6859      	ldr	r1, [r3, #4]
 8016cb6:	4b2b      	ldr	r3, [pc, #172]	; (8016d64 <sys_timeout+0x140>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	68fa      	ldr	r2, [r7, #12]
 8016cbc:	1a8a      	subs	r2, r1, r2
 8016cbe:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8016cc0:	4b28      	ldr	r3, [pc, #160]	; (8016d64 <sys_timeout+0x140>)
 8016cc2:	681a      	ldr	r2, [r3, #0]
 8016cc4:	697b      	ldr	r3, [r7, #20]
 8016cc6:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016cc8:	4a26      	ldr	r2, [pc, #152]	; (8016d64 <sys_timeout+0x140>)
 8016cca:	697b      	ldr	r3, [r7, #20]
 8016ccc:	6013      	str	r3, [r2, #0]
 8016cce:	e03f      	b.n	8016d50 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016cd0:	4b24      	ldr	r3, [pc, #144]	; (8016d64 <sys_timeout+0x140>)
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	61fb      	str	r3, [r7, #28]
 8016cd6:	e036      	b.n	8016d46 <sys_timeout+0x122>
      timeout->time -= t->time;
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	685a      	ldr	r2, [r3, #4]
 8016cdc:	69fb      	ldr	r3, [r7, #28]
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	1ad2      	subs	r2, r2, r3
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8016ce6:	69fb      	ldr	r3, [r7, #28]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d006      	beq.n	8016cfc <sys_timeout+0xd8>
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	685a      	ldr	r2, [r3, #4]
 8016cf4:	697b      	ldr	r3, [r7, #20]
 8016cf6:	685b      	ldr	r3, [r3, #4]
 8016cf8:	429a      	cmp	r2, r3
 8016cfa:	d921      	bls.n	8016d40 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8016cfc:	69fb      	ldr	r3, [r7, #28]
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d009      	beq.n	8016d18 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8016d04:	69fb      	ldr	r3, [r7, #28]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	6859      	ldr	r1, [r3, #4]
 8016d0a:	697b      	ldr	r3, [r7, #20]
 8016d0c:	685a      	ldr	r2, [r3, #4]
 8016d0e:	69fb      	ldr	r3, [r7, #28]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	1a8a      	subs	r2, r1, r2
 8016d14:	605a      	str	r2, [r3, #4]
 8016d16:	e00b      	b.n	8016d30 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8016d18:	697b      	ldr	r3, [r7, #20]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	68fa      	ldr	r2, [r7, #12]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d206      	bcs.n	8016d30 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8016d22:	4b10      	ldr	r3, [pc, #64]	; (8016d64 <sys_timeout+0x140>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	685a      	ldr	r2, [r3, #4]
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	441a      	add	r2, r3
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8016d30:	69fb      	ldr	r3, [r7, #28]
 8016d32:	681a      	ldr	r2, [r3, #0]
 8016d34:	697b      	ldr	r3, [r7, #20]
 8016d36:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016d38:	69fb      	ldr	r3, [r7, #28]
 8016d3a:	697a      	ldr	r2, [r7, #20]
 8016d3c:	601a      	str	r2, [r3, #0]
        break;
 8016d3e:	e007      	b.n	8016d50 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	61fb      	str	r3, [r7, #28]
 8016d46:	69fb      	ldr	r3, [r7, #28]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d1c5      	bne.n	8016cd8 <sys_timeout+0xb4>
 8016d4c:	e000      	b.n	8016d50 <sys_timeout+0x12c>
    return;
 8016d4e:	bf00      	nop
      }
    }
  }
}
 8016d50:	3720      	adds	r7, #32
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop
 8016d58:	0801d8e8 	.word	0x0801d8e8
 8016d5c:	0801d91c 	.word	0x0801d91c
 8016d60:	0801d95c 	.word	0x0801d95c
 8016d64:	20005124 	.word	0x20005124
 8016d68:	20005128 	.word	0x20005128

08016d6c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b084      	sub	sp, #16
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 8016d76:	4b1f      	ldr	r3, [pc, #124]	; (8016df4 <sys_untimeout+0x88>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d036      	beq.n	8016dec <sys_untimeout+0x80>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8016d7e:	4b1d      	ldr	r3, [pc, #116]	; (8016df4 <sys_untimeout+0x88>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	60bb      	str	r3, [r7, #8]
 8016d84:	2300      	movs	r3, #0
 8016d86:	60fb      	str	r3, [r7, #12]
 8016d88:	e02c      	b.n	8016de4 <sys_untimeout+0x78>
    if ((t->h == handler) && (t->arg == arg)) {
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	689b      	ldr	r3, [r3, #8]
 8016d8e:	687a      	ldr	r2, [r7, #4]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d122      	bne.n	8016dda <sys_untimeout+0x6e>
 8016d94:	68bb      	ldr	r3, [r7, #8]
 8016d96:	68db      	ldr	r3, [r3, #12]
 8016d98:	683a      	ldr	r2, [r7, #0]
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d11d      	bne.n	8016dda <sys_untimeout+0x6e>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d104      	bne.n	8016dae <sys_untimeout+0x42>
        next_timeout = t->next;
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	4a12      	ldr	r2, [pc, #72]	; (8016df4 <sys_untimeout+0x88>)
 8016daa:	6013      	str	r3, [r2, #0]
 8016dac:	e003      	b.n	8016db6 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8016dae:	68bb      	ldr	r3, [r7, #8]
 8016db0:	681a      	ldr	r2, [r3, #0]
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	601a      	str	r2, [r3, #0]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d008      	beq.n	8016dd0 <sys_untimeout+0x64>
        t->next->time += t->time;
 8016dbe:	68bb      	ldr	r3, [r7, #8]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	6859      	ldr	r1, [r3, #4]
 8016dc4:	68bb      	ldr	r3, [r7, #8]
 8016dc6:	685a      	ldr	r2, [r3, #4]
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	440a      	add	r2, r1
 8016dce:	605a      	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8016dd0:	68b9      	ldr	r1, [r7, #8]
 8016dd2:	200a      	movs	r0, #10
 8016dd4:	f7f9 fb60 	bl	8010498 <memp_free>
      return;
 8016dd8:	e009      	b.n	8016dee <sys_untimeout+0x82>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8016dda:	68bb      	ldr	r3, [r7, #8]
 8016ddc:	60fb      	str	r3, [r7, #12]
 8016dde:	68bb      	ldr	r3, [r7, #8]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	60bb      	str	r3, [r7, #8]
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d1cf      	bne.n	8016d8a <sys_untimeout+0x1e>
    }
  }
  return;
 8016dea:	e000      	b.n	8016dee <sys_untimeout+0x82>
    return;
 8016dec:	bf00      	nop
}
 8016dee:	3710      	adds	r7, #16
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	20005124 	.word	0x20005124

08016df8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b086      	sub	sp, #24
 8016dfc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8016dfe:	4b24      	ldr	r3, [pc, #144]	; (8016e90 <sys_check_timeouts+0x98>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d03f      	beq.n	8016e86 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8016e06:	f7f1 fb57 	bl	80084b8 <sys_now>
 8016e0a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8016e0c:	4b21      	ldr	r3, [pc, #132]	; (8016e94 <sys_check_timeouts+0x9c>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	68fa      	ldr	r2, [r7, #12]
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8016e16:	2300      	movs	r3, #0
 8016e18:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8016e1a:	4b1d      	ldr	r3, [pc, #116]	; (8016e90 <sys_check_timeouts+0x98>)
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d02c      	beq.n	8016e80 <sys_check_timeouts+0x88>
 8016e26:	68bb      	ldr	r3, [r7, #8]
 8016e28:	685b      	ldr	r3, [r3, #4]
 8016e2a:	697a      	ldr	r2, [r7, #20]
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d327      	bcc.n	8016e80 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8016e30:	2301      	movs	r3, #1
 8016e32:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8016e34:	68bb      	ldr	r3, [r7, #8]
 8016e36:	685a      	ldr	r2, [r3, #4]
 8016e38:	4b16      	ldr	r3, [pc, #88]	; (8016e94 <sys_check_timeouts+0x9c>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	4a15      	ldr	r2, [pc, #84]	; (8016e94 <sys_check_timeouts+0x9c>)
 8016e40:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	685b      	ldr	r3, [r3, #4]
 8016e46:	697a      	ldr	r2, [r7, #20]
 8016e48:	1ad3      	subs	r3, r2, r3
 8016e4a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	4a0f      	ldr	r2, [pc, #60]	; (8016e90 <sys_check_timeouts+0x98>)
 8016e52:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	689b      	ldr	r3, [r3, #8]
 8016e58:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8016e5a:	68bb      	ldr	r3, [r7, #8]
 8016e5c:	68db      	ldr	r3, [r3, #12]
 8016e5e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016e60:	68b9      	ldr	r1, [r7, #8]
 8016e62:	200a      	movs	r0, #10
 8016e64:	f7f9 fb18 	bl	8010498 <memp_free>
        if (handler != NULL) {
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d008      	beq.n	8016e80 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8016e6e:	480a      	ldr	r0, [pc, #40]	; (8016e98 <sys_check_timeouts+0xa0>)
 8016e70:	f002 fc8e 	bl	8019790 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6838      	ldr	r0, [r7, #0]
 8016e78:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8016e7a:	4807      	ldr	r0, [pc, #28]	; (8016e98 <sys_check_timeouts+0xa0>)
 8016e7c:	f002 fc97 	bl	80197ae <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8016e80:	7cfb      	ldrb	r3, [r7, #19]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d1c7      	bne.n	8016e16 <sys_check_timeouts+0x1e>
  }
}
 8016e86:	bf00      	nop
 8016e88:	3718      	adds	r7, #24
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}
 8016e8e:	bf00      	nop
 8016e90:	20005124 	.word	0x20005124
 8016e94:	20005128 	.word	0x20005128
 8016e98:	200087ac 	.word	0x200087ac

08016e9c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b082      	sub	sp, #8
 8016ea0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8016ea2:	4b0f      	ldr	r3, [pc, #60]	; (8016ee0 <sys_timeouts_sleeptime+0x44>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d102      	bne.n	8016eb0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8016eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8016eae:	e013      	b.n	8016ed8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8016eb0:	f7f1 fb02 	bl	80084b8 <sys_now>
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	4b0b      	ldr	r3, [pc, #44]	; (8016ee4 <sys_timeouts_sleeptime+0x48>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	1ad3      	subs	r3, r2, r3
 8016ebc:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8016ebe:	4b08      	ldr	r3, [pc, #32]	; (8016ee0 <sys_timeouts_sleeptime+0x44>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	685b      	ldr	r3, [r3, #4]
 8016ec4:	687a      	ldr	r2, [r7, #4]
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	d901      	bls.n	8016ece <sys_timeouts_sleeptime+0x32>
    return 0;
 8016eca:	2300      	movs	r3, #0
 8016ecc:	e004      	b.n	8016ed8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8016ece:	4b04      	ldr	r3, [pc, #16]	; (8016ee0 <sys_timeouts_sleeptime+0x44>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	685a      	ldr	r2, [r3, #4]
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	1ad3      	subs	r3, r2, r3
  }
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3708      	adds	r7, #8
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}
 8016ee0:	20005124 	.word	0x20005124
 8016ee4:	20005128 	.word	0x20005128

08016ee8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b084      	sub	sp, #16
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8016ef2:	4b0f      	ldr	r3, [pc, #60]	; (8016f30 <sys_timeouts_mbox_fetch+0x48>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d105      	bne.n	8016f06 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016efa:	2200      	movs	r2, #0
 8016efc:	6839      	ldr	r1, [r7, #0]
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f002 fbcc 	bl	801969c <sys_arch_mbox_fetch>
    return;
 8016f04:	e011      	b.n	8016f2a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8016f06:	f7ff ffc9 	bl	8016e9c <sys_timeouts_sleeptime>
 8016f0a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d008      	beq.n	8016f24 <sys_timeouts_mbox_fetch+0x3c>
 8016f12:	68fa      	ldr	r2, [r7, #12]
 8016f14:	6839      	ldr	r1, [r7, #0]
 8016f16:	6878      	ldr	r0, [r7, #4]
 8016f18:	f002 fbc0 	bl	801969c <sys_arch_mbox_fetch>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f22:	d102      	bne.n	8016f2a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016f24:	f7ff ff68 	bl	8016df8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016f28:	e7e3      	b.n	8016ef2 <sys_timeouts_mbox_fetch+0xa>
  }
}
 8016f2a:	3710      	adds	r7, #16
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}
 8016f30:	20005124 	.word	0x20005124

08016f34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016f34:	b480      	push	{r7}
 8016f36:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8016f38:	bf00      	nop
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bc80      	pop	{r7}
 8016f3e:	4770      	bx	lr

08016f40 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016f40:	b480      	push	{r7}
 8016f42:	b085      	sub	sp, #20
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	4613      	mov	r3, r2
 8016f4c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016f4e:	79fb      	ldrb	r3, [r7, #7]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d018      	beq.n	8016f86 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d013      	beq.n	8016f82 <udp_input_local_match+0x42>
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d00f      	beq.n	8016f82 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016f62:	4b13      	ldr	r3, [pc, #76]	; (8016fb0 <udp_input_local_match+0x70>)
 8016f64:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f6a:	d00a      	beq.n	8016f82 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	681a      	ldr	r2, [r3, #0]
 8016f70:	4b0f      	ldr	r3, [pc, #60]	; (8016fb0 <udp_input_local_match+0x70>)
 8016f72:	695b      	ldr	r3, [r3, #20]
 8016f74:	405a      	eors	r2, r3
 8016f76:	68bb      	ldr	r3, [r7, #8]
 8016f78:	3308      	adds	r3, #8
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d110      	bne.n	8016fa4 <udp_input_local_match+0x64>
          return 1;
 8016f82:	2301      	movs	r3, #1
 8016f84:	e00f      	b.n	8016fa6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d009      	beq.n	8016fa0 <udp_input_local_match+0x60>
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d005      	beq.n	8016fa0 <udp_input_local_match+0x60>
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	681a      	ldr	r2, [r3, #0]
 8016f98:	4b05      	ldr	r3, [pc, #20]	; (8016fb0 <udp_input_local_match+0x70>)
 8016f9a:	695b      	ldr	r3, [r3, #20]
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d101      	bne.n	8016fa4 <udp_input_local_match+0x64>
      return 1;
 8016fa0:	2301      	movs	r3, #1
 8016fa2:	e000      	b.n	8016fa6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8016fa4:	2300      	movs	r3, #0
}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	3714      	adds	r7, #20
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bc80      	pop	{r7}
 8016fae:	4770      	bx	lr
 8016fb0:	200087c8 	.word	0x200087c8

08016fb4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016fb4:	b590      	push	{r4, r7, lr}
 8016fb6:	b08d      	sub	sp, #52	; 0x34
 8016fb8:	af02      	add	r7, sp, #8
 8016fba:	6078      	str	r0, [r7, #4]
 8016fbc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	895b      	ldrh	r3, [r3, #10]
 8016fc6:	2b07      	cmp	r3, #7
 8016fc8:	d803      	bhi.n	8016fd2 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f7fa f81e 	bl	801100c <pbuf_free>
    goto end;
 8016fd0:	e0c6      	b.n	8017160 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016fd8:	4b63      	ldr	r3, [pc, #396]	; (8017168 <udp_input+0x1b4>)
 8016fda:	695b      	ldr	r3, [r3, #20]
 8016fdc:	4a62      	ldr	r2, [pc, #392]	; (8017168 <udp_input+0x1b4>)
 8016fde:	6812      	ldr	r2, [r2, #0]
 8016fe0:	4611      	mov	r1, r2
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f001 fc1a 	bl	801881c <ip4_addr_isbroadcast_u32>
 8016fe8:	4603      	mov	r3, r0
 8016fea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016fec:	697b      	ldr	r3, [r7, #20]
 8016fee:	881b      	ldrh	r3, [r3, #0]
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	f7f8 fda8 	bl	800fb48 <lwip_htons>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016ffc:	697b      	ldr	r3, [r7, #20]
 8016ffe:	885b      	ldrh	r3, [r3, #2]
 8017000:	b29b      	uxth	r3, r3
 8017002:	4618      	mov	r0, r3
 8017004:	f7f8 fda0 	bl	800fb48 <lwip_htons>
 8017008:	4603      	mov	r3, r0
 801700a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801700c:	2300      	movs	r3, #0
 801700e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017010:	2300      	movs	r3, #0
 8017012:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017014:	2300      	movs	r3, #0
 8017016:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017018:	4b54      	ldr	r3, [pc, #336]	; (801716c <udp_input+0x1b8>)
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	627b      	str	r3, [r7, #36]	; 0x24
 801701e:	e03b      	b.n	8017098 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017022:	8a5b      	ldrh	r3, [r3, #18]
 8017024:	89fa      	ldrh	r2, [r7, #14]
 8017026:	429a      	cmp	r2, r3
 8017028:	d131      	bne.n	801708e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801702a:	7cfb      	ldrb	r3, [r7, #19]
 801702c:	461a      	mov	r2, r3
 801702e:	6839      	ldr	r1, [r7, #0]
 8017030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017032:	f7ff ff85 	bl	8016f40 <udp_input_local_match>
 8017036:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017038:	2b00      	cmp	r3, #0
 801703a:	d028      	beq.n	801708e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801703e:	7c1b      	ldrb	r3, [r3, #16]
 8017040:	f003 0304 	and.w	r3, r3, #4
 8017044:	2b00      	cmp	r3, #0
 8017046:	d104      	bne.n	8017052 <udp_input+0x9e>
 8017048:	69fb      	ldr	r3, [r7, #28]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d101      	bne.n	8017052 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017050:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017054:	8a9b      	ldrh	r3, [r3, #20]
 8017056:	8a3a      	ldrh	r2, [r7, #16]
 8017058:	429a      	cmp	r2, r3
 801705a:	d118      	bne.n	801708e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017060:	2b00      	cmp	r3, #0
 8017062:	d005      	beq.n	8017070 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017066:	685a      	ldr	r2, [r3, #4]
 8017068:	4b3f      	ldr	r3, [pc, #252]	; (8017168 <udp_input+0x1b4>)
 801706a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801706c:	429a      	cmp	r2, r3
 801706e:	d10e      	bne.n	801708e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017070:	6a3b      	ldr	r3, [r7, #32]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d014      	beq.n	80170a0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017078:	68da      	ldr	r2, [r3, #12]
 801707a:	6a3b      	ldr	r3, [r7, #32]
 801707c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801707e:	4b3b      	ldr	r3, [pc, #236]	; (801716c <udp_input+0x1b8>)
 8017080:	681a      	ldr	r2, [r3, #0]
 8017082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017084:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017086:	4a39      	ldr	r2, [pc, #228]	; (801716c <udp_input+0x1b8>)
 8017088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801708c:	e008      	b.n	80170a0 <udp_input+0xec>
      }
    }

    prev = pcb;
 801708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017090:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	627b      	str	r3, [r7, #36]	; 0x24
 8017098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709a:	2b00      	cmp	r3, #0
 801709c:	d1c0      	bne.n	8017020 <udp_input+0x6c>
 801709e:	e000      	b.n	80170a2 <udp_input+0xee>
        break;
 80170a0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80170a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d101      	bne.n	80170ac <udp_input+0xf8>
    pcb = uncon_pcb;
 80170a8:	69fb      	ldr	r3, [r7, #28]
 80170aa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80170ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d002      	beq.n	80170b8 <udp_input+0x104>
    for_us = 1;
 80170b2:	2301      	movs	r3, #1
 80170b4:	76fb      	strb	r3, [r7, #27]
 80170b6:	e00a      	b.n	80170ce <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	3304      	adds	r3, #4
 80170bc:	681a      	ldr	r2, [r3, #0]
 80170be:	4b2a      	ldr	r3, [pc, #168]	; (8017168 <udp_input+0x1b4>)
 80170c0:	695b      	ldr	r3, [r3, #20]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	bf0c      	ite	eq
 80170c6:	2301      	moveq	r3, #1
 80170c8:	2300      	movne	r3, #0
 80170ca:	b2db      	uxtb	r3, r3
 80170cc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80170ce:	7efb      	ldrb	r3, [r7, #27]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d042      	beq.n	801715a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80170d4:	f06f 0107 	mvn.w	r1, #7
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f7f9 ff73 	bl	8010fc4 <pbuf_header>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d00a      	beq.n	80170fa <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80170e4:	4b22      	ldr	r3, [pc, #136]	; (8017170 <udp_input+0x1bc>)
 80170e6:	f240 1255 	movw	r2, #341	; 0x155
 80170ea:	4922      	ldr	r1, [pc, #136]	; (8017174 <udp_input+0x1c0>)
 80170ec:	4822      	ldr	r0, [pc, #136]	; (8017178 <udp_input+0x1c4>)
 80170ee:	f003 facb 	bl	801a688 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f7f9 ff8a 	bl	801100c <pbuf_free>
      goto end;
 80170f8:	e032      	b.n	8017160 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80170fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d012      	beq.n	8017126 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017102:	699b      	ldr	r3, [r3, #24]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d00a      	beq.n	801711e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801710a:	699c      	ldr	r4, [r3, #24]
 801710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801710e:	69d8      	ldr	r0, [r3, #28]
 8017110:	8a3b      	ldrh	r3, [r7, #16]
 8017112:	9300      	str	r3, [sp, #0]
 8017114:	4b19      	ldr	r3, [pc, #100]	; (801717c <udp_input+0x1c8>)
 8017116:	687a      	ldr	r2, [r7, #4]
 8017118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801711a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801711c:	e021      	b.n	8017162 <udp_input+0x1ae>
        pbuf_free(p);
 801711e:	6878      	ldr	r0, [r7, #4]
 8017120:	f7f9 ff74 	bl	801100c <pbuf_free>
        goto end;
 8017124:	e01c      	b.n	8017160 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017126:	7cfb      	ldrb	r3, [r7, #19]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d112      	bne.n	8017152 <udp_input+0x19e>
 801712c:	4b0e      	ldr	r3, [pc, #56]	; (8017168 <udp_input+0x1b4>)
 801712e:	695b      	ldr	r3, [r3, #20]
 8017130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017134:	2be0      	cmp	r3, #224	; 0xe0
 8017136:	d00c      	beq.n	8017152 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017138:	4b0b      	ldr	r3, [pc, #44]	; (8017168 <udp_input+0x1b4>)
 801713a:	899b      	ldrh	r3, [r3, #12]
 801713c:	3308      	adds	r3, #8
 801713e:	b29b      	uxth	r3, r3
 8017140:	b21b      	sxth	r3, r3
 8017142:	4619      	mov	r1, r3
 8017144:	6878      	ldr	r0, [r7, #4]
 8017146:	f7f9 ff4f 	bl	8010fe8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801714a:	2103      	movs	r1, #3
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f001 f861 	bl	8018214 <icmp_dest_unreach>
      pbuf_free(p);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f7f9 ff5a 	bl	801100c <pbuf_free>
  return;
 8017158:	e003      	b.n	8017162 <udp_input+0x1ae>
    pbuf_free(p);
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f7f9 ff56 	bl	801100c <pbuf_free>
  return;
 8017160:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017162:	372c      	adds	r7, #44	; 0x2c
 8017164:	46bd      	mov	sp, r7
 8017166:	bd90      	pop	{r4, r7, pc}
 8017168:	200087c8 	.word	0x200087c8
 801716c:	2000bef0 	.word	0x2000bef0
 8017170:	0801d984 	.word	0x0801d984
 8017174:	0801d9b4 	.word	0x0801d9b4
 8017178:	0801d9c8 	.word	0x0801d9c8
 801717c:	200087d8 	.word	0x200087d8

08017180 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8017180:	b480      	push	{r7}
 8017182:	b085      	sub	sp, #20
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
 8017188:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d01e      	beq.n	80171ce <udp_netif_ip_addr_changed+0x4e>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d01a      	beq.n	80171ce <udp_netif_ip_addr_changed+0x4e>
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d017      	beq.n	80171ce <udp_netif_ip_addr_changed+0x4e>
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d013      	beq.n	80171ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80171a6:	4b0c      	ldr	r3, [pc, #48]	; (80171d8 <udp_netif_ip_addr_changed+0x58>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	60fb      	str	r3, [r7, #12]
 80171ac:	e00c      	b.n	80171c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	681a      	ldr	r2, [r3, #0]
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d103      	bne.n	80171c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	68db      	ldr	r3, [r3, #12]
 80171c6:	60fb      	str	r3, [r7, #12]
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d1ef      	bne.n	80171ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80171ce:	bf00      	nop
 80171d0:	3714      	adds	r7, #20
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bc80      	pop	{r7}
 80171d6:	4770      	bx	lr
 80171d8:	2000bef0 	.word	0x2000bef0

080171dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b082      	sub	sp, #8
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80171e4:	4915      	ldr	r1, [pc, #84]	; (801723c <etharp_free_entry+0x60>)
 80171e6:	687a      	ldr	r2, [r7, #4]
 80171e8:	4613      	mov	r3, r2
 80171ea:	005b      	lsls	r3, r3, #1
 80171ec:	4413      	add	r3, r2
 80171ee:	00db      	lsls	r3, r3, #3
 80171f0:	440b      	add	r3, r1
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d013      	beq.n	8017220 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80171f8:	4910      	ldr	r1, [pc, #64]	; (801723c <etharp_free_entry+0x60>)
 80171fa:	687a      	ldr	r2, [r7, #4]
 80171fc:	4613      	mov	r3, r2
 80171fe:	005b      	lsls	r3, r3, #1
 8017200:	4413      	add	r3, r2
 8017202:	00db      	lsls	r3, r3, #3
 8017204:	440b      	add	r3, r1
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	4618      	mov	r0, r3
 801720a:	f7f9 feff 	bl	801100c <pbuf_free>
    arp_table[i].q = NULL;
 801720e:	490b      	ldr	r1, [pc, #44]	; (801723c <etharp_free_entry+0x60>)
 8017210:	687a      	ldr	r2, [r7, #4]
 8017212:	4613      	mov	r3, r2
 8017214:	005b      	lsls	r3, r3, #1
 8017216:	4413      	add	r3, r2
 8017218:	00db      	lsls	r3, r3, #3
 801721a:	440b      	add	r3, r1
 801721c:	2200      	movs	r2, #0
 801721e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017220:	4906      	ldr	r1, [pc, #24]	; (801723c <etharp_free_entry+0x60>)
 8017222:	687a      	ldr	r2, [r7, #4]
 8017224:	4613      	mov	r3, r2
 8017226:	005b      	lsls	r3, r3, #1
 8017228:	4413      	add	r3, r2
 801722a:	00db      	lsls	r3, r3, #3
 801722c:	440b      	add	r3, r1
 801722e:	3314      	adds	r3, #20
 8017230:	2200      	movs	r2, #0
 8017232:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017234:	bf00      	nop
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	20005130 	.word	0x20005130

08017240 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017246:	2300      	movs	r3, #0
 8017248:	71fb      	strb	r3, [r7, #7]
 801724a:	e096      	b.n	801737a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801724c:	79fa      	ldrb	r2, [r7, #7]
 801724e:	494f      	ldr	r1, [pc, #316]	; (801738c <etharp_tmr+0x14c>)
 8017250:	4613      	mov	r3, r2
 8017252:	005b      	lsls	r3, r3, #1
 8017254:	4413      	add	r3, r2
 8017256:	00db      	lsls	r3, r3, #3
 8017258:	440b      	add	r3, r1
 801725a:	3314      	adds	r3, #20
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8017260:	79bb      	ldrb	r3, [r7, #6]
 8017262:	2b00      	cmp	r3, #0
 8017264:	f000 8086 	beq.w	8017374 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8017268:	79fa      	ldrb	r2, [r7, #7]
 801726a:	4948      	ldr	r1, [pc, #288]	; (801738c <etharp_tmr+0x14c>)
 801726c:	4613      	mov	r3, r2
 801726e:	005b      	lsls	r3, r3, #1
 8017270:	4413      	add	r3, r2
 8017272:	00db      	lsls	r3, r3, #3
 8017274:	440b      	add	r3, r1
 8017276:	3312      	adds	r3, #18
 8017278:	881b      	ldrh	r3, [r3, #0]
 801727a:	3301      	adds	r3, #1
 801727c:	b298      	uxth	r0, r3
 801727e:	4943      	ldr	r1, [pc, #268]	; (801738c <etharp_tmr+0x14c>)
 8017280:	4613      	mov	r3, r2
 8017282:	005b      	lsls	r3, r3, #1
 8017284:	4413      	add	r3, r2
 8017286:	00db      	lsls	r3, r3, #3
 8017288:	440b      	add	r3, r1
 801728a:	3312      	adds	r3, #18
 801728c:	4602      	mov	r2, r0
 801728e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017290:	79fa      	ldrb	r2, [r7, #7]
 8017292:	493e      	ldr	r1, [pc, #248]	; (801738c <etharp_tmr+0x14c>)
 8017294:	4613      	mov	r3, r2
 8017296:	005b      	lsls	r3, r3, #1
 8017298:	4413      	add	r3, r2
 801729a:	00db      	lsls	r3, r3, #3
 801729c:	440b      	add	r3, r1
 801729e:	3312      	adds	r3, #18
 80172a0:	881b      	ldrh	r3, [r3, #0]
 80172a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80172a6:	d215      	bcs.n	80172d4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80172a8:	79fa      	ldrb	r2, [r7, #7]
 80172aa:	4938      	ldr	r1, [pc, #224]	; (801738c <etharp_tmr+0x14c>)
 80172ac:	4613      	mov	r3, r2
 80172ae:	005b      	lsls	r3, r3, #1
 80172b0:	4413      	add	r3, r2
 80172b2:	00db      	lsls	r3, r3, #3
 80172b4:	440b      	add	r3, r1
 80172b6:	3314      	adds	r3, #20
 80172b8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80172ba:	2b01      	cmp	r3, #1
 80172bc:	d10f      	bne.n	80172de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80172be:	79fa      	ldrb	r2, [r7, #7]
 80172c0:	4932      	ldr	r1, [pc, #200]	; (801738c <etharp_tmr+0x14c>)
 80172c2:	4613      	mov	r3, r2
 80172c4:	005b      	lsls	r3, r3, #1
 80172c6:	4413      	add	r3, r2
 80172c8:	00db      	lsls	r3, r3, #3
 80172ca:	440b      	add	r3, r1
 80172cc:	3312      	adds	r3, #18
 80172ce:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80172d0:	2b04      	cmp	r3, #4
 80172d2:	d904      	bls.n	80172de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80172d4:	79fb      	ldrb	r3, [r7, #7]
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7ff ff80 	bl	80171dc <etharp_free_entry>
 80172dc:	e04a      	b.n	8017374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80172de:	79fa      	ldrb	r2, [r7, #7]
 80172e0:	492a      	ldr	r1, [pc, #168]	; (801738c <etharp_tmr+0x14c>)
 80172e2:	4613      	mov	r3, r2
 80172e4:	005b      	lsls	r3, r3, #1
 80172e6:	4413      	add	r3, r2
 80172e8:	00db      	lsls	r3, r3, #3
 80172ea:	440b      	add	r3, r1
 80172ec:	3314      	adds	r3, #20
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	2b03      	cmp	r3, #3
 80172f2:	d10a      	bne.n	801730a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80172f4:	79fa      	ldrb	r2, [r7, #7]
 80172f6:	4925      	ldr	r1, [pc, #148]	; (801738c <etharp_tmr+0x14c>)
 80172f8:	4613      	mov	r3, r2
 80172fa:	005b      	lsls	r3, r3, #1
 80172fc:	4413      	add	r3, r2
 80172fe:	00db      	lsls	r3, r3, #3
 8017300:	440b      	add	r3, r1
 8017302:	3314      	adds	r3, #20
 8017304:	2204      	movs	r2, #4
 8017306:	701a      	strb	r2, [r3, #0]
 8017308:	e034      	b.n	8017374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801730a:	79fa      	ldrb	r2, [r7, #7]
 801730c:	491f      	ldr	r1, [pc, #124]	; (801738c <etharp_tmr+0x14c>)
 801730e:	4613      	mov	r3, r2
 8017310:	005b      	lsls	r3, r3, #1
 8017312:	4413      	add	r3, r2
 8017314:	00db      	lsls	r3, r3, #3
 8017316:	440b      	add	r3, r1
 8017318:	3314      	adds	r3, #20
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	2b04      	cmp	r3, #4
 801731e:	d10a      	bne.n	8017336 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017320:	79fa      	ldrb	r2, [r7, #7]
 8017322:	491a      	ldr	r1, [pc, #104]	; (801738c <etharp_tmr+0x14c>)
 8017324:	4613      	mov	r3, r2
 8017326:	005b      	lsls	r3, r3, #1
 8017328:	4413      	add	r3, r2
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	440b      	add	r3, r1
 801732e:	3314      	adds	r3, #20
 8017330:	2202      	movs	r2, #2
 8017332:	701a      	strb	r2, [r3, #0]
 8017334:	e01e      	b.n	8017374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017336:	79fa      	ldrb	r2, [r7, #7]
 8017338:	4914      	ldr	r1, [pc, #80]	; (801738c <etharp_tmr+0x14c>)
 801733a:	4613      	mov	r3, r2
 801733c:	005b      	lsls	r3, r3, #1
 801733e:	4413      	add	r3, r2
 8017340:	00db      	lsls	r3, r3, #3
 8017342:	440b      	add	r3, r1
 8017344:	3314      	adds	r3, #20
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	2b01      	cmp	r3, #1
 801734a:	d113      	bne.n	8017374 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801734c:	79fa      	ldrb	r2, [r7, #7]
 801734e:	490f      	ldr	r1, [pc, #60]	; (801738c <etharp_tmr+0x14c>)
 8017350:	4613      	mov	r3, r2
 8017352:	005b      	lsls	r3, r3, #1
 8017354:	4413      	add	r3, r2
 8017356:	00db      	lsls	r3, r3, #3
 8017358:	440b      	add	r3, r1
 801735a:	3308      	adds	r3, #8
 801735c:	6818      	ldr	r0, [r3, #0]
 801735e:	79fa      	ldrb	r2, [r7, #7]
 8017360:	4613      	mov	r3, r2
 8017362:	005b      	lsls	r3, r3, #1
 8017364:	4413      	add	r3, r2
 8017366:	00db      	lsls	r3, r3, #3
 8017368:	4a08      	ldr	r2, [pc, #32]	; (801738c <etharp_tmr+0x14c>)
 801736a:	4413      	add	r3, r2
 801736c:	3304      	adds	r3, #4
 801736e:	4619      	mov	r1, r3
 8017370:	f000 fe38 	bl	8017fe4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017374:	79fb      	ldrb	r3, [r7, #7]
 8017376:	3301      	adds	r3, #1
 8017378:	71fb      	strb	r3, [r7, #7]
 801737a:	79fb      	ldrb	r3, [r7, #7]
 801737c:	2b09      	cmp	r3, #9
 801737e:	f67f af65 	bls.w	801724c <etharp_tmr+0xc>
      }
    }
  }
}
 8017382:	bf00      	nop
 8017384:	bf00      	nop
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	20005130 	.word	0x20005130

08017390 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b088      	sub	sp, #32
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	460b      	mov	r3, r1
 801739a:	607a      	str	r2, [r7, #4]
 801739c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801739e:	230a      	movs	r3, #10
 80173a0:	77fb      	strb	r3, [r7, #31]
 80173a2:	230a      	movs	r3, #10
 80173a4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80173a6:	230a      	movs	r3, #10
 80173a8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80173aa:	2300      	movs	r3, #0
 80173ac:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80173ae:	230a      	movs	r3, #10
 80173b0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80173b2:	2300      	movs	r3, #0
 80173b4:	833b      	strh	r3, [r7, #24]
 80173b6:	2300      	movs	r3, #0
 80173b8:	82fb      	strh	r3, [r7, #22]
 80173ba:	2300      	movs	r3, #0
 80173bc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80173be:	2300      	movs	r3, #0
 80173c0:	773b      	strb	r3, [r7, #28]
 80173c2:	e093      	b.n	80174ec <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80173c4:	7f3a      	ldrb	r2, [r7, #28]
 80173c6:	4990      	ldr	r1, [pc, #576]	; (8017608 <etharp_find_entry+0x278>)
 80173c8:	4613      	mov	r3, r2
 80173ca:	005b      	lsls	r3, r3, #1
 80173cc:	4413      	add	r3, r2
 80173ce:	00db      	lsls	r3, r3, #3
 80173d0:	440b      	add	r3, r1
 80173d2:	3314      	adds	r3, #20
 80173d4:	781b      	ldrb	r3, [r3, #0]
 80173d6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80173d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80173dc:	2b0a      	cmp	r3, #10
 80173de:	d105      	bne.n	80173ec <etharp_find_entry+0x5c>
 80173e0:	7cfb      	ldrb	r3, [r7, #19]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d102      	bne.n	80173ec <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80173e6:	7f3b      	ldrb	r3, [r7, #28]
 80173e8:	777b      	strb	r3, [r7, #29]
 80173ea:	e07c      	b.n	80174e6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80173ec:	7cfb      	ldrb	r3, [r7, #19]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d079      	beq.n	80174e6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80173f2:	7cfb      	ldrb	r3, [r7, #19]
 80173f4:	2b01      	cmp	r3, #1
 80173f6:	d009      	beq.n	801740c <etharp_find_entry+0x7c>
 80173f8:	7cfb      	ldrb	r3, [r7, #19]
 80173fa:	2b01      	cmp	r3, #1
 80173fc:	d806      	bhi.n	801740c <etharp_find_entry+0x7c>
 80173fe:	4b83      	ldr	r3, [pc, #524]	; (801760c <etharp_find_entry+0x27c>)
 8017400:	f240 1225 	movw	r2, #293	; 0x125
 8017404:	4982      	ldr	r1, [pc, #520]	; (8017610 <etharp_find_entry+0x280>)
 8017406:	4883      	ldr	r0, [pc, #524]	; (8017614 <etharp_find_entry+0x284>)
 8017408:	f003 f93e 	bl	801a688 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d00f      	beq.n	8017432 <etharp_find_entry+0xa2>
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	6819      	ldr	r1, [r3, #0]
 8017416:	7f3a      	ldrb	r2, [r7, #28]
 8017418:	487b      	ldr	r0, [pc, #492]	; (8017608 <etharp_find_entry+0x278>)
 801741a:	4613      	mov	r3, r2
 801741c:	005b      	lsls	r3, r3, #1
 801741e:	4413      	add	r3, r2
 8017420:	00db      	lsls	r3, r3, #3
 8017422:	4403      	add	r3, r0
 8017424:	3304      	adds	r3, #4
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	4299      	cmp	r1, r3
 801742a:	d102      	bne.n	8017432 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801742c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8017430:	e0e5      	b.n	80175fe <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017432:	7cfb      	ldrb	r3, [r7, #19]
 8017434:	2b01      	cmp	r3, #1
 8017436:	d13b      	bne.n	80174b0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017438:	7f3a      	ldrb	r2, [r7, #28]
 801743a:	4973      	ldr	r1, [pc, #460]	; (8017608 <etharp_find_entry+0x278>)
 801743c:	4613      	mov	r3, r2
 801743e:	005b      	lsls	r3, r3, #1
 8017440:	4413      	add	r3, r2
 8017442:	00db      	lsls	r3, r3, #3
 8017444:	440b      	add	r3, r1
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d018      	beq.n	801747e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801744c:	7f3a      	ldrb	r2, [r7, #28]
 801744e:	496e      	ldr	r1, [pc, #440]	; (8017608 <etharp_find_entry+0x278>)
 8017450:	4613      	mov	r3, r2
 8017452:	005b      	lsls	r3, r3, #1
 8017454:	4413      	add	r3, r2
 8017456:	00db      	lsls	r3, r3, #3
 8017458:	440b      	add	r3, r1
 801745a:	3312      	adds	r3, #18
 801745c:	881b      	ldrh	r3, [r3, #0]
 801745e:	8b3a      	ldrh	r2, [r7, #24]
 8017460:	429a      	cmp	r2, r3
 8017462:	d840      	bhi.n	80174e6 <etharp_find_entry+0x156>
            old_queue = i;
 8017464:	7f3b      	ldrb	r3, [r7, #28]
 8017466:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8017468:	7f3a      	ldrb	r2, [r7, #28]
 801746a:	4967      	ldr	r1, [pc, #412]	; (8017608 <etharp_find_entry+0x278>)
 801746c:	4613      	mov	r3, r2
 801746e:	005b      	lsls	r3, r3, #1
 8017470:	4413      	add	r3, r2
 8017472:	00db      	lsls	r3, r3, #3
 8017474:	440b      	add	r3, r1
 8017476:	3312      	adds	r3, #18
 8017478:	881b      	ldrh	r3, [r3, #0]
 801747a:	833b      	strh	r3, [r7, #24]
 801747c:	e033      	b.n	80174e6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801747e:	7f3a      	ldrb	r2, [r7, #28]
 8017480:	4961      	ldr	r1, [pc, #388]	; (8017608 <etharp_find_entry+0x278>)
 8017482:	4613      	mov	r3, r2
 8017484:	005b      	lsls	r3, r3, #1
 8017486:	4413      	add	r3, r2
 8017488:	00db      	lsls	r3, r3, #3
 801748a:	440b      	add	r3, r1
 801748c:	3312      	adds	r3, #18
 801748e:	881b      	ldrh	r3, [r3, #0]
 8017490:	8afa      	ldrh	r2, [r7, #22]
 8017492:	429a      	cmp	r2, r3
 8017494:	d827      	bhi.n	80174e6 <etharp_find_entry+0x156>
            old_pending = i;
 8017496:	7f3b      	ldrb	r3, [r7, #28]
 8017498:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801749a:	7f3a      	ldrb	r2, [r7, #28]
 801749c:	495a      	ldr	r1, [pc, #360]	; (8017608 <etharp_find_entry+0x278>)
 801749e:	4613      	mov	r3, r2
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4413      	add	r3, r2
 80174a4:	00db      	lsls	r3, r3, #3
 80174a6:	440b      	add	r3, r1
 80174a8:	3312      	adds	r3, #18
 80174aa:	881b      	ldrh	r3, [r3, #0]
 80174ac:	82fb      	strh	r3, [r7, #22]
 80174ae:	e01a      	b.n	80174e6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80174b0:	7cfb      	ldrb	r3, [r7, #19]
 80174b2:	2b01      	cmp	r3, #1
 80174b4:	d917      	bls.n	80174e6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80174b6:	7f3a      	ldrb	r2, [r7, #28]
 80174b8:	4953      	ldr	r1, [pc, #332]	; (8017608 <etharp_find_entry+0x278>)
 80174ba:	4613      	mov	r3, r2
 80174bc:	005b      	lsls	r3, r3, #1
 80174be:	4413      	add	r3, r2
 80174c0:	00db      	lsls	r3, r3, #3
 80174c2:	440b      	add	r3, r1
 80174c4:	3312      	adds	r3, #18
 80174c6:	881b      	ldrh	r3, [r3, #0]
 80174c8:	8aba      	ldrh	r2, [r7, #20]
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d80b      	bhi.n	80174e6 <etharp_find_entry+0x156>
            old_stable = i;
 80174ce:	7f3b      	ldrb	r3, [r7, #28]
 80174d0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80174d2:	7f3a      	ldrb	r2, [r7, #28]
 80174d4:	494c      	ldr	r1, [pc, #304]	; (8017608 <etharp_find_entry+0x278>)
 80174d6:	4613      	mov	r3, r2
 80174d8:	005b      	lsls	r3, r3, #1
 80174da:	4413      	add	r3, r2
 80174dc:	00db      	lsls	r3, r3, #3
 80174de:	440b      	add	r3, r1
 80174e0:	3312      	adds	r3, #18
 80174e2:	881b      	ldrh	r3, [r3, #0]
 80174e4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80174e6:	7f3b      	ldrb	r3, [r7, #28]
 80174e8:	3301      	adds	r3, #1
 80174ea:	773b      	strb	r3, [r7, #28]
 80174ec:	7f3b      	ldrb	r3, [r7, #28]
 80174ee:	2b09      	cmp	r3, #9
 80174f0:	f67f af68 	bls.w	80173c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80174f4:	7afb      	ldrb	r3, [r7, #11]
 80174f6:	f003 0302 	and.w	r3, r3, #2
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d108      	bne.n	8017510 <etharp_find_entry+0x180>
 80174fe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017502:	2b0a      	cmp	r3, #10
 8017504:	d107      	bne.n	8017516 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017506:	7afb      	ldrb	r3, [r7, #11]
 8017508:	f003 0301 	and.w	r3, r3, #1
 801750c:	2b00      	cmp	r3, #0
 801750e:	d102      	bne.n	8017516 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8017510:	f04f 33ff 	mov.w	r3, #4294967295
 8017514:	e073      	b.n	80175fe <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017516:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801751a:	2b09      	cmp	r3, #9
 801751c:	dc02      	bgt.n	8017524 <etharp_find_entry+0x194>
    i = empty;
 801751e:	7f7b      	ldrb	r3, [r7, #29]
 8017520:	773b      	strb	r3, [r7, #28]
 8017522:	e036      	b.n	8017592 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017524:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017528:	2b09      	cmp	r3, #9
 801752a:	dc13      	bgt.n	8017554 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801752c:	7fbb      	ldrb	r3, [r7, #30]
 801752e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017530:	7f3a      	ldrb	r2, [r7, #28]
 8017532:	4935      	ldr	r1, [pc, #212]	; (8017608 <etharp_find_entry+0x278>)
 8017534:	4613      	mov	r3, r2
 8017536:	005b      	lsls	r3, r3, #1
 8017538:	4413      	add	r3, r2
 801753a:	00db      	lsls	r3, r3, #3
 801753c:	440b      	add	r3, r1
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d018      	beq.n	8017576 <etharp_find_entry+0x1e6>
 8017544:	4b31      	ldr	r3, [pc, #196]	; (801760c <etharp_find_entry+0x27c>)
 8017546:	f240 126f 	movw	r2, #367	; 0x16f
 801754a:	4933      	ldr	r1, [pc, #204]	; (8017618 <etharp_find_entry+0x288>)
 801754c:	4831      	ldr	r0, [pc, #196]	; (8017614 <etharp_find_entry+0x284>)
 801754e:	f003 f89b 	bl	801a688 <iprintf>
 8017552:	e010      	b.n	8017576 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017554:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017558:	2b09      	cmp	r3, #9
 801755a:	dc02      	bgt.n	8017562 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801755c:	7ffb      	ldrb	r3, [r7, #31]
 801755e:	773b      	strb	r3, [r7, #28]
 8017560:	e009      	b.n	8017576 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017562:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017566:	2b09      	cmp	r3, #9
 8017568:	dc02      	bgt.n	8017570 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801756a:	7efb      	ldrb	r3, [r7, #27]
 801756c:	773b      	strb	r3, [r7, #28]
 801756e:	e002      	b.n	8017576 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8017570:	f04f 33ff 	mov.w	r3, #4294967295
 8017574:	e043      	b.n	80175fe <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017576:	7f3b      	ldrb	r3, [r7, #28]
 8017578:	2b09      	cmp	r3, #9
 801757a:	d906      	bls.n	801758a <etharp_find_entry+0x1fa>
 801757c:	4b23      	ldr	r3, [pc, #140]	; (801760c <etharp_find_entry+0x27c>)
 801757e:	f240 1281 	movw	r2, #385	; 0x181
 8017582:	4926      	ldr	r1, [pc, #152]	; (801761c <etharp_find_entry+0x28c>)
 8017584:	4823      	ldr	r0, [pc, #140]	; (8017614 <etharp_find_entry+0x284>)
 8017586:	f003 f87f 	bl	801a688 <iprintf>
    etharp_free_entry(i);
 801758a:	7f3b      	ldrb	r3, [r7, #28]
 801758c:	4618      	mov	r0, r3
 801758e:	f7ff fe25 	bl	80171dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017592:	7f3b      	ldrb	r3, [r7, #28]
 8017594:	2b09      	cmp	r3, #9
 8017596:	d906      	bls.n	80175a6 <etharp_find_entry+0x216>
 8017598:	4b1c      	ldr	r3, [pc, #112]	; (801760c <etharp_find_entry+0x27c>)
 801759a:	f240 1285 	movw	r2, #389	; 0x185
 801759e:	491f      	ldr	r1, [pc, #124]	; (801761c <etharp_find_entry+0x28c>)
 80175a0:	481c      	ldr	r0, [pc, #112]	; (8017614 <etharp_find_entry+0x284>)
 80175a2:	f003 f871 	bl	801a688 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80175a6:	7f3a      	ldrb	r2, [r7, #28]
 80175a8:	4917      	ldr	r1, [pc, #92]	; (8017608 <etharp_find_entry+0x278>)
 80175aa:	4613      	mov	r3, r2
 80175ac:	005b      	lsls	r3, r3, #1
 80175ae:	4413      	add	r3, r2
 80175b0:	00db      	lsls	r3, r3, #3
 80175b2:	440b      	add	r3, r1
 80175b4:	3314      	adds	r3, #20
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d006      	beq.n	80175ca <etharp_find_entry+0x23a>
 80175bc:	4b13      	ldr	r3, [pc, #76]	; (801760c <etharp_find_entry+0x27c>)
 80175be:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80175c2:	4917      	ldr	r1, [pc, #92]	; (8017620 <etharp_find_entry+0x290>)
 80175c4:	4813      	ldr	r0, [pc, #76]	; (8017614 <etharp_find_entry+0x284>)
 80175c6:	f003 f85f 	bl	801a688 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d00a      	beq.n	80175e6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80175d0:	7f3a      	ldrb	r2, [r7, #28]
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	6819      	ldr	r1, [r3, #0]
 80175d6:	480c      	ldr	r0, [pc, #48]	; (8017608 <etharp_find_entry+0x278>)
 80175d8:	4613      	mov	r3, r2
 80175da:	005b      	lsls	r3, r3, #1
 80175dc:	4413      	add	r3, r2
 80175de:	00db      	lsls	r3, r3, #3
 80175e0:	4403      	add	r3, r0
 80175e2:	3304      	adds	r3, #4
 80175e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80175e6:	7f3a      	ldrb	r2, [r7, #28]
 80175e8:	4907      	ldr	r1, [pc, #28]	; (8017608 <etharp_find_entry+0x278>)
 80175ea:	4613      	mov	r3, r2
 80175ec:	005b      	lsls	r3, r3, #1
 80175ee:	4413      	add	r3, r2
 80175f0:	00db      	lsls	r3, r3, #3
 80175f2:	440b      	add	r3, r1
 80175f4:	3312      	adds	r3, #18
 80175f6:	2200      	movs	r2, #0
 80175f8:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80175fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80175fe:	4618      	mov	r0, r3
 8017600:	3720      	adds	r7, #32
 8017602:	46bd      	mov	sp, r7
 8017604:	bd80      	pop	{r7, pc}
 8017606:	bf00      	nop
 8017608:	20005130 	.word	0x20005130
 801760c:	0801da20 	.word	0x0801da20
 8017610:	0801da58 	.word	0x0801da58
 8017614:	0801da98 	.word	0x0801da98
 8017618:	0801dac0 	.word	0x0801dac0
 801761c:	0801dad8 	.word	0x0801dad8
 8017620:	0801daec 	.word	0x0801daec

08017624 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b088      	sub	sp, #32
 8017628:	af02      	add	r7, sp, #8
 801762a:	60f8      	str	r0, [r7, #12]
 801762c:	60b9      	str	r1, [r7, #8]
 801762e:	607a      	str	r2, [r7, #4]
 8017630:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017638:	2b06      	cmp	r3, #6
 801763a:	d006      	beq.n	801764a <etharp_update_arp_entry+0x26>
 801763c:	4b48      	ldr	r3, [pc, #288]	; (8017760 <etharp_update_arp_entry+0x13c>)
 801763e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017642:	4948      	ldr	r1, [pc, #288]	; (8017764 <etharp_update_arp_entry+0x140>)
 8017644:	4848      	ldr	r0, [pc, #288]	; (8017768 <etharp_update_arp_entry+0x144>)
 8017646:	f003 f81f 	bl	801a688 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	2b00      	cmp	r3, #0
 801764e:	d012      	beq.n	8017676 <etharp_update_arp_entry+0x52>
 8017650:	68bb      	ldr	r3, [r7, #8]
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d00e      	beq.n	8017676 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	68f9      	ldr	r1, [r7, #12]
 801765e:	4618      	mov	r0, r3
 8017660:	f001 f8dc 	bl	801881c <ip4_addr_isbroadcast_u32>
 8017664:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017666:	2b00      	cmp	r3, #0
 8017668:	d105      	bne.n	8017676 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017672:	2be0      	cmp	r3, #224	; 0xe0
 8017674:	d102      	bne.n	801767c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017676:	f06f 030f 	mvn.w	r3, #15
 801767a:	e06c      	b.n	8017756 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801767c:	78fb      	ldrb	r3, [r7, #3]
 801767e:	68fa      	ldr	r2, [r7, #12]
 8017680:	4619      	mov	r1, r3
 8017682:	68b8      	ldr	r0, [r7, #8]
 8017684:	f7ff fe84 	bl	8017390 <etharp_find_entry>
 8017688:	4603      	mov	r3, r0
 801768a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801768c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017690:	2b00      	cmp	r3, #0
 8017692:	da02      	bge.n	801769a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017698:	e05d      	b.n	8017756 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801769a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801769e:	4933      	ldr	r1, [pc, #204]	; (801776c <etharp_update_arp_entry+0x148>)
 80176a0:	4613      	mov	r3, r2
 80176a2:	005b      	lsls	r3, r3, #1
 80176a4:	4413      	add	r3, r2
 80176a6:	00db      	lsls	r3, r3, #3
 80176a8:	440b      	add	r3, r1
 80176aa:	3314      	adds	r3, #20
 80176ac:	2202      	movs	r2, #2
 80176ae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80176b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80176b4:	492d      	ldr	r1, [pc, #180]	; (801776c <etharp_update_arp_entry+0x148>)
 80176b6:	4613      	mov	r3, r2
 80176b8:	005b      	lsls	r3, r3, #1
 80176ba:	4413      	add	r3, r2
 80176bc:	00db      	lsls	r3, r3, #3
 80176be:	440b      	add	r3, r1
 80176c0:	3308      	adds	r3, #8
 80176c2:	68fa      	ldr	r2, [r7, #12]
 80176c4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80176c6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80176ca:	4613      	mov	r3, r2
 80176cc:	005b      	lsls	r3, r3, #1
 80176ce:	4413      	add	r3, r2
 80176d0:	00db      	lsls	r3, r3, #3
 80176d2:	3308      	adds	r3, #8
 80176d4:	4a25      	ldr	r2, [pc, #148]	; (801776c <etharp_update_arp_entry+0x148>)
 80176d6:	4413      	add	r3, r2
 80176d8:	3304      	adds	r3, #4
 80176da:	2206      	movs	r2, #6
 80176dc:	6879      	ldr	r1, [r7, #4]
 80176de:	4618      	mov	r0, r3
 80176e0:	f002 fee0 	bl	801a4a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80176e4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80176e8:	4920      	ldr	r1, [pc, #128]	; (801776c <etharp_update_arp_entry+0x148>)
 80176ea:	4613      	mov	r3, r2
 80176ec:	005b      	lsls	r3, r3, #1
 80176ee:	4413      	add	r3, r2
 80176f0:	00db      	lsls	r3, r3, #3
 80176f2:	440b      	add	r3, r1
 80176f4:	3312      	adds	r3, #18
 80176f6:	2200      	movs	r2, #0
 80176f8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80176fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80176fe:	491b      	ldr	r1, [pc, #108]	; (801776c <etharp_update_arp_entry+0x148>)
 8017700:	4613      	mov	r3, r2
 8017702:	005b      	lsls	r3, r3, #1
 8017704:	4413      	add	r3, r2
 8017706:	00db      	lsls	r3, r3, #3
 8017708:	440b      	add	r3, r1
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	2b00      	cmp	r3, #0
 801770e:	d021      	beq.n	8017754 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017710:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017714:	4915      	ldr	r1, [pc, #84]	; (801776c <etharp_update_arp_entry+0x148>)
 8017716:	4613      	mov	r3, r2
 8017718:	005b      	lsls	r3, r3, #1
 801771a:	4413      	add	r3, r2
 801771c:	00db      	lsls	r3, r3, #3
 801771e:	440b      	add	r3, r1
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017724:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017728:	4910      	ldr	r1, [pc, #64]	; (801776c <etharp_update_arp_entry+0x148>)
 801772a:	4613      	mov	r3, r2
 801772c:	005b      	lsls	r3, r3, #1
 801772e:	4413      	add	r3, r2
 8017730:	00db      	lsls	r3, r3, #3
 8017732:	440b      	add	r3, r1
 8017734:	2200      	movs	r2, #0
 8017736:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801773e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017742:	9300      	str	r3, [sp, #0]
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6939      	ldr	r1, [r7, #16]
 8017748:	68f8      	ldr	r0, [r7, #12]
 801774a:	f001 ff0d 	bl	8019568 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801774e:	6938      	ldr	r0, [r7, #16]
 8017750:	f7f9 fc5c 	bl	801100c <pbuf_free>
  }
  return ERR_OK;
 8017754:	2300      	movs	r3, #0
}
 8017756:	4618      	mov	r0, r3
 8017758:	3718      	adds	r7, #24
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	0801da20 	.word	0x0801da20
 8017764:	0801db18 	.word	0x0801db18
 8017768:	0801da98 	.word	0x0801da98
 801776c:	20005130 	.word	0x20005130

08017770 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b084      	sub	sp, #16
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017778:	2300      	movs	r3, #0
 801777a:	73fb      	strb	r3, [r7, #15]
 801777c:	e01f      	b.n	80177be <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801777e:	7bfa      	ldrb	r2, [r7, #15]
 8017780:	4913      	ldr	r1, [pc, #76]	; (80177d0 <etharp_cleanup_netif+0x60>)
 8017782:	4613      	mov	r3, r2
 8017784:	005b      	lsls	r3, r3, #1
 8017786:	4413      	add	r3, r2
 8017788:	00db      	lsls	r3, r3, #3
 801778a:	440b      	add	r3, r1
 801778c:	3314      	adds	r3, #20
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017792:	7bbb      	ldrb	r3, [r7, #14]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d00f      	beq.n	80177b8 <etharp_cleanup_netif+0x48>
 8017798:	7bfa      	ldrb	r2, [r7, #15]
 801779a:	490d      	ldr	r1, [pc, #52]	; (80177d0 <etharp_cleanup_netif+0x60>)
 801779c:	4613      	mov	r3, r2
 801779e:	005b      	lsls	r3, r3, #1
 80177a0:	4413      	add	r3, r2
 80177a2:	00db      	lsls	r3, r3, #3
 80177a4:	440b      	add	r3, r1
 80177a6:	3308      	adds	r3, #8
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	687a      	ldr	r2, [r7, #4]
 80177ac:	429a      	cmp	r2, r3
 80177ae:	d103      	bne.n	80177b8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80177b0:	7bfb      	ldrb	r3, [r7, #15]
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7ff fd12 	bl	80171dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177b8:	7bfb      	ldrb	r3, [r7, #15]
 80177ba:	3301      	adds	r3, #1
 80177bc:	73fb      	strb	r3, [r7, #15]
 80177be:	7bfb      	ldrb	r3, [r7, #15]
 80177c0:	2b09      	cmp	r3, #9
 80177c2:	d9dc      	bls.n	801777e <etharp_cleanup_netif+0xe>
    }
  }
}
 80177c4:	bf00      	nop
 80177c6:	bf00      	nop
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
 80177ce:	bf00      	nop
 80177d0:	20005130 	.word	0x20005130

080177d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80177d4:	b5b0      	push	{r4, r5, r7, lr}
 80177d6:	b08a      	sub	sp, #40	; 0x28
 80177d8:	af04      	add	r7, sp, #16
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d107      	bne.n	80177f4 <etharp_input+0x20>
 80177e4:	4b3d      	ldr	r3, [pc, #244]	; (80178dc <etharp_input+0x108>)
 80177e6:	f44f 7222 	mov.w	r2, #648	; 0x288
 80177ea:	493d      	ldr	r1, [pc, #244]	; (80178e0 <etharp_input+0x10c>)
 80177ec:	483d      	ldr	r0, [pc, #244]	; (80178e4 <etharp_input+0x110>)
 80177ee:	f002 ff4b 	bl	801a688 <iprintf>
 80177f2:	e06f      	b.n	80178d4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	685b      	ldr	r3, [r3, #4]
 80177f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	881b      	ldrh	r3, [r3, #0]
 80177fe:	b29b      	uxth	r3, r3
 8017800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017804:	d10c      	bne.n	8017820 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801780a:	2b06      	cmp	r3, #6
 801780c:	d108      	bne.n	8017820 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801780e:	693b      	ldr	r3, [r7, #16]
 8017810:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017812:	2b04      	cmp	r3, #4
 8017814:	d104      	bne.n	8017820 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017816:	693b      	ldr	r3, [r7, #16]
 8017818:	885b      	ldrh	r3, [r3, #2]
 801781a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801781c:	2b08      	cmp	r3, #8
 801781e:	d003      	beq.n	8017828 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017820:	6878      	ldr	r0, [r7, #4]
 8017822:	f7f9 fbf3 	bl	801100c <pbuf_free>
    return;
 8017826:	e055      	b.n	80178d4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	330e      	adds	r3, #14
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	3318      	adds	r3, #24
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	3304      	adds	r3, #4
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d102      	bne.n	8017848 <etharp_input+0x74>
    for_us = 0;
 8017842:	2300      	movs	r3, #0
 8017844:	75fb      	strb	r3, [r7, #23]
 8017846:	e009      	b.n	801785c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017848:	68ba      	ldr	r2, [r7, #8]
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	3304      	adds	r3, #4
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	429a      	cmp	r2, r3
 8017852:	bf0c      	ite	eq
 8017854:	2301      	moveq	r3, #1
 8017856:	2300      	movne	r3, #0
 8017858:	b2db      	uxtb	r3, r3
 801785a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	f103 0208 	add.w	r2, r3, #8
 8017862:	7dfb      	ldrb	r3, [r7, #23]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d001      	beq.n	801786c <etharp_input+0x98>
 8017868:	2301      	movs	r3, #1
 801786a:	e000      	b.n	801786e <etharp_input+0x9a>
 801786c:	2302      	movs	r3, #2
 801786e:	f107 010c 	add.w	r1, r7, #12
 8017872:	6838      	ldr	r0, [r7, #0]
 8017874:	f7ff fed6 	bl	8017624 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017878:	693b      	ldr	r3, [r7, #16]
 801787a:	88db      	ldrh	r3, [r3, #6]
 801787c:	b29b      	uxth	r3, r3
 801787e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017882:	d003      	beq.n	801788c <etharp_input+0xb8>
 8017884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017888:	d01e      	beq.n	80178c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801788a:	e020      	b.n	80178ce <etharp_input+0xfa>
    if (for_us) {
 801788c:	7dfb      	ldrb	r3, [r7, #23]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d01c      	beq.n	80178cc <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017892:	683b      	ldr	r3, [r7, #0]
 8017894:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8017898:	693b      	ldr	r3, [r7, #16]
 801789a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80178a8:	693a      	ldr	r2, [r7, #16]
 80178aa:	3208      	adds	r2, #8
      etharp_raw(netif,
 80178ac:	2102      	movs	r1, #2
 80178ae:	9103      	str	r1, [sp, #12]
 80178b0:	f107 010c 	add.w	r1, r7, #12
 80178b4:	9102      	str	r1, [sp, #8]
 80178b6:	9201      	str	r2, [sp, #4]
 80178b8:	9300      	str	r3, [sp, #0]
 80178ba:	462b      	mov	r3, r5
 80178bc:	4622      	mov	r2, r4
 80178be:	4601      	mov	r1, r0
 80178c0:	6838      	ldr	r0, [r7, #0]
 80178c2:	f000 fae1 	bl	8017e88 <etharp_raw>
    break;
 80178c6:	e001      	b.n	80178cc <etharp_input+0xf8>
    break;
 80178c8:	bf00      	nop
 80178ca:	e000      	b.n	80178ce <etharp_input+0xfa>
    break;
 80178cc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f7f9 fb9c 	bl	801100c <pbuf_free>
}
 80178d4:	3718      	adds	r7, #24
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bdb0      	pop	{r4, r5, r7, pc}
 80178da:	bf00      	nop
 80178dc:	0801da20 	.word	0x0801da20
 80178e0:	0801db70 	.word	0x0801db70
 80178e4:	0801da98 	.word	0x0801da98

080178e8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b086      	sub	sp, #24
 80178ec:	af02      	add	r7, sp, #8
 80178ee:	60f8      	str	r0, [r7, #12]
 80178f0:	60b9      	str	r1, [r7, #8]
 80178f2:	4613      	mov	r3, r2
 80178f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80178f6:	79fa      	ldrb	r2, [r7, #7]
 80178f8:	4944      	ldr	r1, [pc, #272]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 80178fa:	4613      	mov	r3, r2
 80178fc:	005b      	lsls	r3, r3, #1
 80178fe:	4413      	add	r3, r2
 8017900:	00db      	lsls	r3, r3, #3
 8017902:	440b      	add	r3, r1
 8017904:	3314      	adds	r3, #20
 8017906:	781b      	ldrb	r3, [r3, #0]
 8017908:	2b01      	cmp	r3, #1
 801790a:	d806      	bhi.n	801791a <etharp_output_to_arp_index+0x32>
 801790c:	4b40      	ldr	r3, [pc, #256]	; (8017a10 <etharp_output_to_arp_index+0x128>)
 801790e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8017912:	4940      	ldr	r1, [pc, #256]	; (8017a14 <etharp_output_to_arp_index+0x12c>)
 8017914:	4840      	ldr	r0, [pc, #256]	; (8017a18 <etharp_output_to_arp_index+0x130>)
 8017916:	f002 feb7 	bl	801a688 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801791a:	79fa      	ldrb	r2, [r7, #7]
 801791c:	493b      	ldr	r1, [pc, #236]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 801791e:	4613      	mov	r3, r2
 8017920:	005b      	lsls	r3, r3, #1
 8017922:	4413      	add	r3, r2
 8017924:	00db      	lsls	r3, r3, #3
 8017926:	440b      	add	r3, r1
 8017928:	3314      	adds	r3, #20
 801792a:	781b      	ldrb	r3, [r3, #0]
 801792c:	2b02      	cmp	r3, #2
 801792e:	d153      	bne.n	80179d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017930:	79fa      	ldrb	r2, [r7, #7]
 8017932:	4936      	ldr	r1, [pc, #216]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 8017934:	4613      	mov	r3, r2
 8017936:	005b      	lsls	r3, r3, #1
 8017938:	4413      	add	r3, r2
 801793a:	00db      	lsls	r3, r3, #3
 801793c:	440b      	add	r3, r1
 801793e:	3312      	adds	r3, #18
 8017940:	881b      	ldrh	r3, [r3, #0]
 8017942:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017946:	d919      	bls.n	801797c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017948:	79fa      	ldrb	r2, [r7, #7]
 801794a:	4613      	mov	r3, r2
 801794c:	005b      	lsls	r3, r3, #1
 801794e:	4413      	add	r3, r2
 8017950:	00db      	lsls	r3, r3, #3
 8017952:	4a2e      	ldr	r2, [pc, #184]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 8017954:	4413      	add	r3, r2
 8017956:	3304      	adds	r3, #4
 8017958:	4619      	mov	r1, r3
 801795a:	68f8      	ldr	r0, [r7, #12]
 801795c:	f000 fb42 	bl	8017fe4 <etharp_request>
 8017960:	4603      	mov	r3, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	d138      	bne.n	80179d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017966:	79fa      	ldrb	r2, [r7, #7]
 8017968:	4928      	ldr	r1, [pc, #160]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 801796a:	4613      	mov	r3, r2
 801796c:	005b      	lsls	r3, r3, #1
 801796e:	4413      	add	r3, r2
 8017970:	00db      	lsls	r3, r3, #3
 8017972:	440b      	add	r3, r1
 8017974:	3314      	adds	r3, #20
 8017976:	2203      	movs	r2, #3
 8017978:	701a      	strb	r2, [r3, #0]
 801797a:	e02d      	b.n	80179d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801797c:	79fa      	ldrb	r2, [r7, #7]
 801797e:	4923      	ldr	r1, [pc, #140]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 8017980:	4613      	mov	r3, r2
 8017982:	005b      	lsls	r3, r3, #1
 8017984:	4413      	add	r3, r2
 8017986:	00db      	lsls	r3, r3, #3
 8017988:	440b      	add	r3, r1
 801798a:	3312      	adds	r3, #18
 801798c:	881b      	ldrh	r3, [r3, #0]
 801798e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017992:	d321      	bcc.n	80179d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017994:	79fa      	ldrb	r2, [r7, #7]
 8017996:	4613      	mov	r3, r2
 8017998:	005b      	lsls	r3, r3, #1
 801799a:	4413      	add	r3, r2
 801799c:	00db      	lsls	r3, r3, #3
 801799e:	4a1b      	ldr	r2, [pc, #108]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 80179a0:	4413      	add	r3, r2
 80179a2:	1d19      	adds	r1, r3, #4
 80179a4:	79fa      	ldrb	r2, [r7, #7]
 80179a6:	4613      	mov	r3, r2
 80179a8:	005b      	lsls	r3, r3, #1
 80179aa:	4413      	add	r3, r2
 80179ac:	00db      	lsls	r3, r3, #3
 80179ae:	3308      	adds	r3, #8
 80179b0:	4a16      	ldr	r2, [pc, #88]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 80179b2:	4413      	add	r3, r2
 80179b4:	3304      	adds	r3, #4
 80179b6:	461a      	mov	r2, r3
 80179b8:	68f8      	ldr	r0, [r7, #12]
 80179ba:	f000 faf1 	bl	8017fa0 <etharp_request_dst>
 80179be:	4603      	mov	r3, r0
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d109      	bne.n	80179d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80179c4:	79fa      	ldrb	r2, [r7, #7]
 80179c6:	4911      	ldr	r1, [pc, #68]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 80179c8:	4613      	mov	r3, r2
 80179ca:	005b      	lsls	r3, r3, #1
 80179cc:	4413      	add	r3, r2
 80179ce:	00db      	lsls	r3, r3, #3
 80179d0:	440b      	add	r3, r1
 80179d2:	3314      	adds	r3, #20
 80179d4:	2203      	movs	r2, #3
 80179d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80179de:	79fa      	ldrb	r2, [r7, #7]
 80179e0:	4613      	mov	r3, r2
 80179e2:	005b      	lsls	r3, r3, #1
 80179e4:	4413      	add	r3, r2
 80179e6:	00db      	lsls	r3, r3, #3
 80179e8:	3308      	adds	r3, #8
 80179ea:	4a08      	ldr	r2, [pc, #32]	; (8017a0c <etharp_output_to_arp_index+0x124>)
 80179ec:	4413      	add	r3, r2
 80179ee:	3304      	adds	r3, #4
 80179f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80179f4:	9200      	str	r2, [sp, #0]
 80179f6:	460a      	mov	r2, r1
 80179f8:	68b9      	ldr	r1, [r7, #8]
 80179fa:	68f8      	ldr	r0, [r7, #12]
 80179fc:	f001 fdb4 	bl	8019568 <ethernet_output>
 8017a00:	4603      	mov	r3, r0
}
 8017a02:	4618      	mov	r0, r3
 8017a04:	3710      	adds	r7, #16
 8017a06:	46bd      	mov	sp, r7
 8017a08:	bd80      	pop	{r7, pc}
 8017a0a:	bf00      	nop
 8017a0c:	20005130 	.word	0x20005130
 8017a10:	0801da20 	.word	0x0801da20
 8017a14:	0801db90 	.word	0x0801db90
 8017a18:	0801da98 	.word	0x0801da98

08017a1c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b08a      	sub	sp, #40	; 0x28
 8017a20:	af02      	add	r7, sp, #8
 8017a22:	60f8      	str	r0, [r7, #12]
 8017a24:	60b9      	str	r1, [r7, #8]
 8017a26:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d106      	bne.n	8017a40 <etharp_output+0x24>
 8017a32:	4b69      	ldr	r3, [pc, #420]	; (8017bd8 <etharp_output+0x1bc>)
 8017a34:	f240 321b 	movw	r2, #795	; 0x31b
 8017a38:	4968      	ldr	r1, [pc, #416]	; (8017bdc <etharp_output+0x1c0>)
 8017a3a:	4869      	ldr	r0, [pc, #420]	; (8017be0 <etharp_output+0x1c4>)
 8017a3c:	f002 fe24 	bl	801a688 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017a40:	68bb      	ldr	r3, [r7, #8]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d106      	bne.n	8017a54 <etharp_output+0x38>
 8017a46:	4b64      	ldr	r3, [pc, #400]	; (8017bd8 <etharp_output+0x1bc>)
 8017a48:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017a4c:	4965      	ldr	r1, [pc, #404]	; (8017be4 <etharp_output+0x1c8>)
 8017a4e:	4864      	ldr	r0, [pc, #400]	; (8017be0 <etharp_output+0x1c4>)
 8017a50:	f002 fe1a 	bl	801a688 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d106      	bne.n	8017a68 <etharp_output+0x4c>
 8017a5a:	4b5f      	ldr	r3, [pc, #380]	; (8017bd8 <etharp_output+0x1bc>)
 8017a5c:	f240 321d 	movw	r2, #797	; 0x31d
 8017a60:	4961      	ldr	r1, [pc, #388]	; (8017be8 <etharp_output+0x1cc>)
 8017a62:	485f      	ldr	r0, [pc, #380]	; (8017be0 <etharp_output+0x1c4>)
 8017a64:	f002 fe10 	bl	801a688 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	68f9      	ldr	r1, [r7, #12]
 8017a6e:	4618      	mov	r0, r3
 8017a70:	f000 fed4 	bl	801881c <ip4_addr_isbroadcast_u32>
 8017a74:	4603      	mov	r3, r0
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d002      	beq.n	8017a80 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017a7a:	4b5c      	ldr	r3, [pc, #368]	; (8017bec <etharp_output+0x1d0>)
 8017a7c:	61fb      	str	r3, [r7, #28]
 8017a7e:	e09b      	b.n	8017bb8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a88:	2be0      	cmp	r3, #224	; 0xe0
 8017a8a:	d118      	bne.n	8017abe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017a8c:	2301      	movs	r3, #1
 8017a8e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017a90:	2300      	movs	r3, #0
 8017a92:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017a94:	235e      	movs	r3, #94	; 0x5e
 8017a96:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	3301      	adds	r3, #1
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017aa2:	b2db      	uxtb	r3, r3
 8017aa4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	3302      	adds	r3, #2
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	3303      	adds	r3, #3
 8017ab2:	781b      	ldrb	r3, [r3, #0]
 8017ab4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017ab6:	f107 0310 	add.w	r3, r7, #16
 8017aba:	61fb      	str	r3, [r7, #28]
 8017abc:	e07c      	b.n	8017bb8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681a      	ldr	r2, [r3, #0]
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	3304      	adds	r3, #4
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	405a      	eors	r2, r3
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	3308      	adds	r3, #8
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	4013      	ands	r3, r2
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d012      	beq.n	8017afc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017adc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017ae0:	4293      	cmp	r3, r2
 8017ae2:	d00b      	beq.n	8017afc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	330c      	adds	r3, #12
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d003      	beq.n	8017af6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	330c      	adds	r3, #12
 8017af2:	61bb      	str	r3, [r7, #24]
 8017af4:	e002      	b.n	8017afc <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017af6:	f06f 0303 	mvn.w	r3, #3
 8017afa:	e069      	b.n	8017bd0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017afc:	4b3c      	ldr	r3, [pc, #240]	; (8017bf0 <etharp_output+0x1d4>)
 8017afe:	781b      	ldrb	r3, [r3, #0]
 8017b00:	4619      	mov	r1, r3
 8017b02:	4a3c      	ldr	r2, [pc, #240]	; (8017bf4 <etharp_output+0x1d8>)
 8017b04:	460b      	mov	r3, r1
 8017b06:	005b      	lsls	r3, r3, #1
 8017b08:	440b      	add	r3, r1
 8017b0a:	00db      	lsls	r3, r3, #3
 8017b0c:	4413      	add	r3, r2
 8017b0e:	3314      	adds	r3, #20
 8017b10:	781b      	ldrb	r3, [r3, #0]
 8017b12:	2b01      	cmp	r3, #1
 8017b14:	d917      	bls.n	8017b46 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017b16:	69bb      	ldr	r3, [r7, #24]
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	4b35      	ldr	r3, [pc, #212]	; (8017bf0 <etharp_output+0x1d4>)
 8017b1c:	781b      	ldrb	r3, [r3, #0]
 8017b1e:	4618      	mov	r0, r3
 8017b20:	4934      	ldr	r1, [pc, #208]	; (8017bf4 <etharp_output+0x1d8>)
 8017b22:	4603      	mov	r3, r0
 8017b24:	005b      	lsls	r3, r3, #1
 8017b26:	4403      	add	r3, r0
 8017b28:	00db      	lsls	r3, r3, #3
 8017b2a:	440b      	add	r3, r1
 8017b2c:	3304      	adds	r3, #4
 8017b2e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017b30:	429a      	cmp	r2, r3
 8017b32:	d108      	bne.n	8017b46 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017b34:	4b2e      	ldr	r3, [pc, #184]	; (8017bf0 <etharp_output+0x1d4>)
 8017b36:	781b      	ldrb	r3, [r3, #0]
 8017b38:	461a      	mov	r2, r3
 8017b3a:	68b9      	ldr	r1, [r7, #8]
 8017b3c:	68f8      	ldr	r0, [r7, #12]
 8017b3e:	f7ff fed3 	bl	80178e8 <etharp_output_to_arp_index>
 8017b42:	4603      	mov	r3, r0
 8017b44:	e044      	b.n	8017bd0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017b46:	2300      	movs	r3, #0
 8017b48:	75fb      	strb	r3, [r7, #23]
 8017b4a:	e02a      	b.n	8017ba2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017b4c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017b50:	4928      	ldr	r1, [pc, #160]	; (8017bf4 <etharp_output+0x1d8>)
 8017b52:	4613      	mov	r3, r2
 8017b54:	005b      	lsls	r3, r3, #1
 8017b56:	4413      	add	r3, r2
 8017b58:	00db      	lsls	r3, r3, #3
 8017b5a:	440b      	add	r3, r1
 8017b5c:	3314      	adds	r3, #20
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	2b01      	cmp	r3, #1
 8017b62:	d918      	bls.n	8017b96 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017b64:	69bb      	ldr	r3, [r7, #24]
 8017b66:	6819      	ldr	r1, [r3, #0]
 8017b68:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017b6c:	4821      	ldr	r0, [pc, #132]	; (8017bf4 <etharp_output+0x1d8>)
 8017b6e:	4613      	mov	r3, r2
 8017b70:	005b      	lsls	r3, r3, #1
 8017b72:	4413      	add	r3, r2
 8017b74:	00db      	lsls	r3, r3, #3
 8017b76:	4403      	add	r3, r0
 8017b78:	3304      	adds	r3, #4
 8017b7a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017b7c:	4299      	cmp	r1, r3
 8017b7e:	d10a      	bne.n	8017b96 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8017b80:	7dfa      	ldrb	r2, [r7, #23]
 8017b82:	4b1b      	ldr	r3, [pc, #108]	; (8017bf0 <etharp_output+0x1d4>)
 8017b84:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017b86:	7dfb      	ldrb	r3, [r7, #23]
 8017b88:	461a      	mov	r2, r3
 8017b8a:	68b9      	ldr	r1, [r7, #8]
 8017b8c:	68f8      	ldr	r0, [r7, #12]
 8017b8e:	f7ff feab 	bl	80178e8 <etharp_output_to_arp_index>
 8017b92:	4603      	mov	r3, r0
 8017b94:	e01c      	b.n	8017bd0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	3301      	adds	r3, #1
 8017b9e:	b2db      	uxtb	r3, r3
 8017ba0:	75fb      	strb	r3, [r7, #23]
 8017ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017ba6:	2b09      	cmp	r3, #9
 8017ba8:	ddd0      	ble.n	8017b4c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017baa:	68ba      	ldr	r2, [r7, #8]
 8017bac:	69b9      	ldr	r1, [r7, #24]
 8017bae:	68f8      	ldr	r0, [r7, #12]
 8017bb0:	f000 f822 	bl	8017bf8 <etharp_query>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	e00b      	b.n	8017bd0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8017bbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	69fb      	ldr	r3, [r7, #28]
 8017bc6:	68b9      	ldr	r1, [r7, #8]
 8017bc8:	68f8      	ldr	r0, [r7, #12]
 8017bca:	f001 fccd 	bl	8019568 <ethernet_output>
 8017bce:	4603      	mov	r3, r0
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3720      	adds	r7, #32
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	0801da20 	.word	0x0801da20
 8017bdc:	0801db70 	.word	0x0801db70
 8017be0:	0801da98 	.word	0x0801da98
 8017be4:	0801dbc0 	.word	0x0801dbc0
 8017be8:	0801db60 	.word	0x0801db60
 8017bec:	0801ecd8 	.word	0x0801ecd8
 8017bf0:	20005220 	.word	0x20005220
 8017bf4:	20005130 	.word	0x20005130

08017bf8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b08c      	sub	sp, #48	; 0x30
 8017bfc:	af02      	add	r7, sp, #8
 8017bfe:	60f8      	str	r0, [r7, #12]
 8017c00:	60b9      	str	r1, [r7, #8]
 8017c02:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	3329      	adds	r3, #41	; 0x29
 8017c08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017c0a:	23ff      	movs	r3, #255	; 0xff
 8017c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017c10:	2300      	movs	r3, #0
 8017c12:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	68f9      	ldr	r1, [r7, #12]
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f000 fdfe 	bl	801881c <ip4_addr_isbroadcast_u32>
 8017c20:	4603      	mov	r3, r0
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d10c      	bne.n	8017c40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017c26:	68bb      	ldr	r3, [r7, #8]
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c2e:	2be0      	cmp	r3, #224	; 0xe0
 8017c30:	d006      	beq.n	8017c40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d003      	beq.n	8017c40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017c38:	68bb      	ldr	r3, [r7, #8]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d102      	bne.n	8017c46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017c40:	f06f 030f 	mvn.w	r3, #15
 8017c44:	e10e      	b.n	8017e64 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017c46:	68fa      	ldr	r2, [r7, #12]
 8017c48:	2101      	movs	r1, #1
 8017c4a:	68b8      	ldr	r0, [r7, #8]
 8017c4c:	f7ff fba0 	bl	8017390 <etharp_find_entry>
 8017c50:	4603      	mov	r3, r0
 8017c52:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8017c54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	da02      	bge.n	8017c62 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8017c5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017c60:	e100      	b.n	8017e64 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017c62:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017c66:	4981      	ldr	r1, [pc, #516]	; (8017e6c <etharp_query+0x274>)
 8017c68:	4613      	mov	r3, r2
 8017c6a:	005b      	lsls	r3, r3, #1
 8017c6c:	4413      	add	r3, r2
 8017c6e:	00db      	lsls	r3, r3, #3
 8017c70:	440b      	add	r3, r1
 8017c72:	3314      	adds	r3, #20
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d117      	bne.n	8017caa <etharp_query+0xb2>
    is_new_entry = 1;
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017c7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017c82:	497a      	ldr	r1, [pc, #488]	; (8017e6c <etharp_query+0x274>)
 8017c84:	4613      	mov	r3, r2
 8017c86:	005b      	lsls	r3, r3, #1
 8017c88:	4413      	add	r3, r2
 8017c8a:	00db      	lsls	r3, r3, #3
 8017c8c:	440b      	add	r3, r1
 8017c8e:	3314      	adds	r3, #20
 8017c90:	2201      	movs	r2, #1
 8017c92:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017c94:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017c98:	4974      	ldr	r1, [pc, #464]	; (8017e6c <etharp_query+0x274>)
 8017c9a:	4613      	mov	r3, r2
 8017c9c:	005b      	lsls	r3, r3, #1
 8017c9e:	4413      	add	r3, r2
 8017ca0:	00db      	lsls	r3, r3, #3
 8017ca2:	440b      	add	r3, r1
 8017ca4:	3308      	adds	r3, #8
 8017ca6:	68fa      	ldr	r2, [r7, #12]
 8017ca8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017caa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017cae:	496f      	ldr	r1, [pc, #444]	; (8017e6c <etharp_query+0x274>)
 8017cb0:	4613      	mov	r3, r2
 8017cb2:	005b      	lsls	r3, r3, #1
 8017cb4:	4413      	add	r3, r2
 8017cb6:	00db      	lsls	r3, r3, #3
 8017cb8:	440b      	add	r3, r1
 8017cba:	3314      	adds	r3, #20
 8017cbc:	781b      	ldrb	r3, [r3, #0]
 8017cbe:	2b01      	cmp	r3, #1
 8017cc0:	d012      	beq.n	8017ce8 <etharp_query+0xf0>
 8017cc2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017cc6:	4969      	ldr	r1, [pc, #420]	; (8017e6c <etharp_query+0x274>)
 8017cc8:	4613      	mov	r3, r2
 8017cca:	005b      	lsls	r3, r3, #1
 8017ccc:	4413      	add	r3, r2
 8017cce:	00db      	lsls	r3, r3, #3
 8017cd0:	440b      	add	r3, r1
 8017cd2:	3314      	adds	r3, #20
 8017cd4:	781b      	ldrb	r3, [r3, #0]
 8017cd6:	2b01      	cmp	r3, #1
 8017cd8:	d806      	bhi.n	8017ce8 <etharp_query+0xf0>
 8017cda:	4b65      	ldr	r3, [pc, #404]	; (8017e70 <etharp_query+0x278>)
 8017cdc:	f240 32c7 	movw	r2, #967	; 0x3c7
 8017ce0:	4964      	ldr	r1, [pc, #400]	; (8017e74 <etharp_query+0x27c>)
 8017ce2:	4865      	ldr	r0, [pc, #404]	; (8017e78 <etharp_query+0x280>)
 8017ce4:	f002 fcd0 	bl	801a688 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017ce8:	6a3b      	ldr	r3, [r7, #32]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d102      	bne.n	8017cf4 <etharp_query+0xfc>
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d10c      	bne.n	8017d0e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017cf4:	68b9      	ldr	r1, [r7, #8]
 8017cf6:	68f8      	ldr	r0, [r7, #12]
 8017cf8:	f000 f974 	bl	8017fe4 <etharp_request>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d102      	bne.n	8017d0e <etharp_query+0x116>
      return result;
 8017d08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017d0c:	e0aa      	b.n	8017e64 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d106      	bne.n	8017d22 <etharp_query+0x12a>
 8017d14:	4b56      	ldr	r3, [pc, #344]	; (8017e70 <etharp_query+0x278>)
 8017d16:	f240 32db 	movw	r2, #987	; 0x3db
 8017d1a:	4958      	ldr	r1, [pc, #352]	; (8017e7c <etharp_query+0x284>)
 8017d1c:	4856      	ldr	r0, [pc, #344]	; (8017e78 <etharp_query+0x280>)
 8017d1e:	f002 fcb3 	bl	801a688 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017d22:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017d26:	4951      	ldr	r1, [pc, #324]	; (8017e6c <etharp_query+0x274>)
 8017d28:	4613      	mov	r3, r2
 8017d2a:	005b      	lsls	r3, r3, #1
 8017d2c:	4413      	add	r3, r2
 8017d2e:	00db      	lsls	r3, r3, #3
 8017d30:	440b      	add	r3, r1
 8017d32:	3314      	adds	r3, #20
 8017d34:	781b      	ldrb	r3, [r3, #0]
 8017d36:	2b01      	cmp	r3, #1
 8017d38:	d918      	bls.n	8017d6c <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8017d3a:	7cfa      	ldrb	r2, [r7, #19]
 8017d3c:	4b50      	ldr	r3, [pc, #320]	; (8017e80 <etharp_query+0x288>)
 8017d3e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017d40:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017d44:	4613      	mov	r3, r2
 8017d46:	005b      	lsls	r3, r3, #1
 8017d48:	4413      	add	r3, r2
 8017d4a:	00db      	lsls	r3, r3, #3
 8017d4c:	3308      	adds	r3, #8
 8017d4e:	4a47      	ldr	r2, [pc, #284]	; (8017e6c <etharp_query+0x274>)
 8017d50:	4413      	add	r3, r2
 8017d52:	3304      	adds	r3, #4
 8017d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d58:	9200      	str	r2, [sp, #0]
 8017d5a:	697a      	ldr	r2, [r7, #20]
 8017d5c:	6879      	ldr	r1, [r7, #4]
 8017d5e:	68f8      	ldr	r0, [r7, #12]
 8017d60:	f001 fc02 	bl	8019568 <ethernet_output>
 8017d64:	4603      	mov	r3, r0
 8017d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017d6a:	e079      	b.n	8017e60 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017d6c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017d70:	493e      	ldr	r1, [pc, #248]	; (8017e6c <etharp_query+0x274>)
 8017d72:	4613      	mov	r3, r2
 8017d74:	005b      	lsls	r3, r3, #1
 8017d76:	4413      	add	r3, r2
 8017d78:	00db      	lsls	r3, r3, #3
 8017d7a:	440b      	add	r3, r1
 8017d7c:	3314      	adds	r3, #20
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	2b01      	cmp	r3, #1
 8017d82:	d16d      	bne.n	8017e60 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017d84:	2300      	movs	r3, #0
 8017d86:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017d8c:	e01a      	b.n	8017dc4 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017d8e:	69fb      	ldr	r3, [r7, #28]
 8017d90:	895a      	ldrh	r2, [r3, #10]
 8017d92:	69fb      	ldr	r3, [r7, #28]
 8017d94:	891b      	ldrh	r3, [r3, #8]
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d10a      	bne.n	8017db0 <etharp_query+0x1b8>
 8017d9a:	69fb      	ldr	r3, [r7, #28]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d006      	beq.n	8017db0 <etharp_query+0x1b8>
 8017da2:	4b33      	ldr	r3, [pc, #204]	; (8017e70 <etharp_query+0x278>)
 8017da4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8017da8:	4936      	ldr	r1, [pc, #216]	; (8017e84 <etharp_query+0x28c>)
 8017daa:	4833      	ldr	r0, [pc, #204]	; (8017e78 <etharp_query+0x280>)
 8017dac:	f002 fc6c 	bl	801a688 <iprintf>
      if (p->type != PBUF_ROM) {
 8017db0:	69fb      	ldr	r3, [r7, #28]
 8017db2:	7b1b      	ldrb	r3, [r3, #12]
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	d002      	beq.n	8017dbe <etharp_query+0x1c6>
        copy_needed = 1;
 8017db8:	2301      	movs	r3, #1
 8017dba:	61bb      	str	r3, [r7, #24]
        break;
 8017dbc:	e005      	b.n	8017dca <etharp_query+0x1d2>
      }
      p = p->next;
 8017dbe:	69fb      	ldr	r3, [r7, #28]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017dc4:	69fb      	ldr	r3, [r7, #28]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d1e1      	bne.n	8017d8e <etharp_query+0x196>
    }
    if (copy_needed) {
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d017      	beq.n	8017e00 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8017dd0:	69fb      	ldr	r3, [r7, #28]
 8017dd2:	891b      	ldrh	r3, [r3, #8]
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	4619      	mov	r1, r3
 8017dd8:	2002      	movs	r0, #2
 8017dda:	f7f8 fd9f 	bl	801091c <pbuf_alloc>
 8017dde:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d011      	beq.n	8017e0a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8017de6:	6879      	ldr	r1, [r7, #4]
 8017de8:	69f8      	ldr	r0, [r7, #28]
 8017dea:	f7f9 fa3d 	bl	8011268 <pbuf_copy>
 8017dee:	4603      	mov	r3, r0
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d00a      	beq.n	8017e0a <etharp_query+0x212>
          pbuf_free(p);
 8017df4:	69f8      	ldr	r0, [r7, #28]
 8017df6:	f7f9 f909 	bl	801100c <pbuf_free>
          p = NULL;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	61fb      	str	r3, [r7, #28]
 8017dfe:	e004      	b.n	8017e0a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017e04:	69f8      	ldr	r0, [r7, #28]
 8017e06:	f7f9 f9b1 	bl	801116c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d024      	beq.n	8017e5a <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017e10:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017e14:	4915      	ldr	r1, [pc, #84]	; (8017e6c <etharp_query+0x274>)
 8017e16:	4613      	mov	r3, r2
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	4413      	add	r3, r2
 8017e1c:	00db      	lsls	r3, r3, #3
 8017e1e:	440b      	add	r3, r1
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d00b      	beq.n	8017e3e <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8017e26:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017e2a:	4910      	ldr	r1, [pc, #64]	; (8017e6c <etharp_query+0x274>)
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	005b      	lsls	r3, r3, #1
 8017e30:	4413      	add	r3, r2
 8017e32:	00db      	lsls	r3, r3, #3
 8017e34:	440b      	add	r3, r1
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7f9 f8e7 	bl	801100c <pbuf_free>
      }
      arp_table[i].q = p;
 8017e3e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8017e42:	490a      	ldr	r1, [pc, #40]	; (8017e6c <etharp_query+0x274>)
 8017e44:	4613      	mov	r3, r2
 8017e46:	005b      	lsls	r3, r3, #1
 8017e48:	4413      	add	r3, r2
 8017e4a:	00db      	lsls	r3, r3, #3
 8017e4c:	440b      	add	r3, r1
 8017e4e:	69fa      	ldr	r2, [r7, #28]
 8017e50:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017e52:	2300      	movs	r3, #0
 8017e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e58:	e002      	b.n	8017e60 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017e5a:	23ff      	movs	r3, #255	; 0xff
 8017e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017e60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	3728      	adds	r7, #40	; 0x28
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	20005130 	.word	0x20005130
 8017e70:	0801da20 	.word	0x0801da20
 8017e74:	0801dbcc 	.word	0x0801dbcc
 8017e78:	0801da98 	.word	0x0801da98
 8017e7c:	0801dbc0 	.word	0x0801dbc0
 8017e80:	20005220 	.word	0x20005220
 8017e84:	0801dbf4 	.word	0x0801dbf4

08017e88 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b08a      	sub	sp, #40	; 0x28
 8017e8c:	af02      	add	r7, sp, #8
 8017e8e:	60f8      	str	r0, [r7, #12]
 8017e90:	60b9      	str	r1, [r7, #8]
 8017e92:	607a      	str	r2, [r7, #4]
 8017e94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017e96:	2300      	movs	r3, #0
 8017e98:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d106      	bne.n	8017eae <etharp_raw+0x26>
 8017ea0:	4b3a      	ldr	r3, [pc, #232]	; (8017f8c <etharp_raw+0x104>)
 8017ea2:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8017ea6:	493a      	ldr	r1, [pc, #232]	; (8017f90 <etharp_raw+0x108>)
 8017ea8:	483a      	ldr	r0, [pc, #232]	; (8017f94 <etharp_raw+0x10c>)
 8017eaa:	f002 fbed 	bl	801a688 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017eae:	2200      	movs	r2, #0
 8017eb0:	211c      	movs	r1, #28
 8017eb2:	2002      	movs	r0, #2
 8017eb4:	f7f8 fd32 	bl	801091c <pbuf_alloc>
 8017eb8:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017eba:	69bb      	ldr	r3, [r7, #24]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d102      	bne.n	8017ec6 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ec4:	e05d      	b.n	8017f82 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017ec6:	69bb      	ldr	r3, [r7, #24]
 8017ec8:	895b      	ldrh	r3, [r3, #10]
 8017eca:	2b1b      	cmp	r3, #27
 8017ecc:	d806      	bhi.n	8017edc <etharp_raw+0x54>
 8017ece:	4b2f      	ldr	r3, [pc, #188]	; (8017f8c <etharp_raw+0x104>)
 8017ed0:	f240 4263 	movw	r2, #1123	; 0x463
 8017ed4:	4930      	ldr	r1, [pc, #192]	; (8017f98 <etharp_raw+0x110>)
 8017ed6:	482f      	ldr	r0, [pc, #188]	; (8017f94 <etharp_raw+0x10c>)
 8017ed8:	f002 fbd6 	bl	801a688 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017ee2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7f7 fe2f 	bl	800fb48 <lwip_htons>
 8017eea:	4603      	mov	r3, r0
 8017eec:	461a      	mov	r2, r3
 8017eee:	697b      	ldr	r3, [r7, #20]
 8017ef0:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ef8:	2b06      	cmp	r3, #6
 8017efa:	d006      	beq.n	8017f0a <etharp_raw+0x82>
 8017efc:	4b23      	ldr	r3, [pc, #140]	; (8017f8c <etharp_raw+0x104>)
 8017efe:	f240 426a 	movw	r2, #1130	; 0x46a
 8017f02:	4926      	ldr	r1, [pc, #152]	; (8017f9c <etharp_raw+0x114>)
 8017f04:	4823      	ldr	r0, [pc, #140]	; (8017f94 <etharp_raw+0x10c>)
 8017f06:	f002 fbbf 	bl	801a688 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	3308      	adds	r3, #8
 8017f0e:	2206      	movs	r2, #6
 8017f10:	6839      	ldr	r1, [r7, #0]
 8017f12:	4618      	mov	r0, r3
 8017f14:	f002 fac6 	bl	801a4a4 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8017f18:	697b      	ldr	r3, [r7, #20]
 8017f1a:	3312      	adds	r3, #18
 8017f1c:	2206      	movs	r2, #6
 8017f1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017f20:	4618      	mov	r0, r3
 8017f22:	f002 fabf 	bl	801a4a4 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	330e      	adds	r3, #14
 8017f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f2c:	6812      	ldr	r2, [r2, #0]
 8017f2e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	3318      	adds	r3, #24
 8017f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f36:	6812      	ldr	r2, [r2, #0]
 8017f38:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8017f3a:	697b      	ldr	r3, [r7, #20]
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	701a      	strb	r2, [r3, #0]
 8017f40:	2200      	movs	r2, #0
 8017f42:	f042 0201 	orr.w	r2, r2, #1
 8017f46:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017f48:	697b      	ldr	r3, [r7, #20]
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	f042 0208 	orr.w	r2, r2, #8
 8017f50:	709a      	strb	r2, [r3, #2]
 8017f52:	2200      	movs	r2, #0
 8017f54:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017f56:	697b      	ldr	r3, [r7, #20]
 8017f58:	2206      	movs	r2, #6
 8017f5a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	2204      	movs	r2, #4
 8017f60:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017f62:	f640 0306 	movw	r3, #2054	; 0x806
 8017f66:	9300      	str	r3, [sp, #0]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	68ba      	ldr	r2, [r7, #8]
 8017f6c:	69b9      	ldr	r1, [r7, #24]
 8017f6e:	68f8      	ldr	r0, [r7, #12]
 8017f70:	f001 fafa 	bl	8019568 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017f74:	69b8      	ldr	r0, [r7, #24]
 8017f76:	f7f9 f849 	bl	801100c <pbuf_free>
  p = NULL;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017f7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017f82:	4618      	mov	r0, r3
 8017f84:	3720      	adds	r7, #32
 8017f86:	46bd      	mov	sp, r7
 8017f88:	bd80      	pop	{r7, pc}
 8017f8a:	bf00      	nop
 8017f8c:	0801da20 	.word	0x0801da20
 8017f90:	0801db70 	.word	0x0801db70
 8017f94:	0801da98 	.word	0x0801da98
 8017f98:	0801dc10 	.word	0x0801dc10
 8017f9c:	0801dc44 	.word	0x0801dc44

08017fa0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b088      	sub	sp, #32
 8017fa4:	af04      	add	r7, sp, #16
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017fbc:	2201      	movs	r2, #1
 8017fbe:	9203      	str	r2, [sp, #12]
 8017fc0:	68ba      	ldr	r2, [r7, #8]
 8017fc2:	9202      	str	r2, [sp, #8]
 8017fc4:	4a06      	ldr	r2, [pc, #24]	; (8017fe0 <etharp_request_dst+0x40>)
 8017fc6:	9201      	str	r2, [sp, #4]
 8017fc8:	9300      	str	r3, [sp, #0]
 8017fca:	4603      	mov	r3, r0
 8017fcc:	687a      	ldr	r2, [r7, #4]
 8017fce:	68f8      	ldr	r0, [r7, #12]
 8017fd0:	f7ff ff5a 	bl	8017e88 <etharp_raw>
 8017fd4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3710      	adds	r7, #16
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}
 8017fde:	bf00      	nop
 8017fe0:	0801ece0 	.word	0x0801ece0

08017fe4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b082      	sub	sp, #8
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017fee:	4a05      	ldr	r2, [pc, #20]	; (8018004 <etharp_request+0x20>)
 8017ff0:	6839      	ldr	r1, [r7, #0]
 8017ff2:	6878      	ldr	r0, [r7, #4]
 8017ff4:	f7ff ffd4 	bl	8017fa0 <etharp_request_dst>
 8017ff8:	4603      	mov	r3, r0
}
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	3708      	adds	r7, #8
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}
 8018002:	bf00      	nop
 8018004:	0801ecd8 	.word	0x0801ecd8

08018008 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b08e      	sub	sp, #56	; 0x38
 801800c:	af04      	add	r7, sp, #16
 801800e:	6078      	str	r0, [r7, #4]
 8018010:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018012:	4b7a      	ldr	r3, [pc, #488]	; (80181fc <icmp_input+0x1f4>)
 8018014:	689b      	ldr	r3, [r3, #8]
 8018016:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8018018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801a:	781b      	ldrb	r3, [r3, #0]
 801801c:	b29b      	uxth	r3, r3
 801801e:	f003 030f 	and.w	r3, r3, #15
 8018022:	b29b      	uxth	r3, r3
 8018024:	009b      	lsls	r3, r3, #2
 8018026:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801802a:	2b13      	cmp	r3, #19
 801802c:	f240 80d1 	bls.w	80181d2 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	895b      	ldrh	r3, [r3, #10]
 8018034:	2b03      	cmp	r3, #3
 8018036:	f240 80ce 	bls.w	80181d6 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	685b      	ldr	r3, [r3, #4]
 801803e:	781b      	ldrb	r3, [r3, #0]
 8018040:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018044:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018048:	2b00      	cmp	r3, #0
 801804a:	f000 80bb 	beq.w	80181c4 <icmp_input+0x1bc>
 801804e:	2b08      	cmp	r3, #8
 8018050:	f040 80bb 	bne.w	80181ca <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8018054:	4b6a      	ldr	r3, [pc, #424]	; (8018200 <icmp_input+0x1f8>)
 8018056:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018058:	4b68      	ldr	r3, [pc, #416]	; (80181fc <icmp_input+0x1f4>)
 801805a:	695b      	ldr	r3, [r3, #20]
 801805c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018060:	2be0      	cmp	r3, #224	; 0xe0
 8018062:	f000 80bf 	beq.w	80181e4 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018066:	4b65      	ldr	r3, [pc, #404]	; (80181fc <icmp_input+0x1f4>)
 8018068:	695b      	ldr	r3, [r3, #20]
 801806a:	4a64      	ldr	r2, [pc, #400]	; (80181fc <icmp_input+0x1f4>)
 801806c:	6812      	ldr	r2, [r2, #0]
 801806e:	4611      	mov	r1, r2
 8018070:	4618      	mov	r0, r3
 8018072:	f000 fbd3 	bl	801881c <ip4_addr_isbroadcast_u32>
 8018076:	4603      	mov	r3, r0
 8018078:	2b00      	cmp	r3, #0
 801807a:	f040 80b5 	bne.w	80181e8 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	891b      	ldrh	r3, [r3, #8]
 8018082:	2b07      	cmp	r3, #7
 8018084:	f240 80a9 	bls.w	80181da <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8018088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801808a:	330e      	adds	r3, #14
 801808c:	b29b      	uxth	r3, r3
 801808e:	b21b      	sxth	r3, r3
 8018090:	4619      	mov	r1, r3
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	f7f8 ff96 	bl	8010fc4 <pbuf_header>
 8018098:	4603      	mov	r3, r0
 801809a:	2b00      	cmp	r3, #0
 801809c:	d046      	beq.n	801812c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	891a      	ldrh	r2, [r3, #8]
 80180a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180a4:	4413      	add	r3, r2
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	2200      	movs	r2, #0
 80180aa:	4619      	mov	r1, r3
 80180ac:	2002      	movs	r0, #2
 80180ae:	f7f8 fc35 	bl	801091c <pbuf_alloc>
 80180b2:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80180b4:	69bb      	ldr	r3, [r7, #24]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	f000 8098 	beq.w	80181ec <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80180bc:	69bb      	ldr	r3, [r7, #24]
 80180be:	895b      	ldrh	r3, [r3, #10]
 80180c0:	461a      	mov	r2, r3
 80180c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180c4:	3308      	adds	r3, #8
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d203      	bcs.n	80180d2 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80180ca:	69b8      	ldr	r0, [r7, #24]
 80180cc:	f7f8 ff9e 	bl	801100c <pbuf_free>
        goto icmperr;
 80180d0:	e08d      	b.n	80181ee <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80180d2:	69bb      	ldr	r3, [r7, #24]
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80180d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180da:	4618      	mov	r0, r3
 80180dc:	f002 f9e2 	bl	801a4a4 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80180e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180e2:	425b      	negs	r3, r3
 80180e4:	b29b      	uxth	r3, r3
 80180e6:	b21b      	sxth	r3, r3
 80180e8:	4619      	mov	r1, r3
 80180ea:	69b8      	ldr	r0, [r7, #24]
 80180ec:	f7f8 ff6a 	bl	8010fc4 <pbuf_header>
 80180f0:	4603      	mov	r3, r0
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d009      	beq.n	801810a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80180f6:	4b43      	ldr	r3, [pc, #268]	; (8018204 <icmp_input+0x1fc>)
 80180f8:	22af      	movs	r2, #175	; 0xaf
 80180fa:	4943      	ldr	r1, [pc, #268]	; (8018208 <icmp_input+0x200>)
 80180fc:	4843      	ldr	r0, [pc, #268]	; (801820c <icmp_input+0x204>)
 80180fe:	f002 fac3 	bl	801a688 <iprintf>
        pbuf_free(r);
 8018102:	69b8      	ldr	r0, [r7, #24]
 8018104:	f7f8 ff82 	bl	801100c <pbuf_free>
        goto icmperr;
 8018108:	e071      	b.n	80181ee <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801810a:	6879      	ldr	r1, [r7, #4]
 801810c:	69b8      	ldr	r0, [r7, #24]
 801810e:	f7f9 f8ab 	bl	8011268 <pbuf_copy>
 8018112:	4603      	mov	r3, r0
 8018114:	2b00      	cmp	r3, #0
 8018116:	d003      	beq.n	8018120 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8018118:	69b8      	ldr	r0, [r7, #24]
 801811a:	f7f8 ff77 	bl	801100c <pbuf_free>
        goto icmperr;
 801811e:	e066      	b.n	80181ee <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8018120:	6878      	ldr	r0, [r7, #4]
 8018122:	f7f8 ff73 	bl	801100c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8018126:	69bb      	ldr	r3, [r7, #24]
 8018128:	607b      	str	r3, [r7, #4]
 801812a:	e015      	b.n	8018158 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801812c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801812e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8018132:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8018136:	33f2      	adds	r3, #242	; 0xf2
 8018138:	b29b      	uxth	r3, r3
 801813a:	b21b      	sxth	r3, r3
 801813c:	4619      	mov	r1, r3
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f7f8 ff40 	bl	8010fc4 <pbuf_header>
 8018144:	4603      	mov	r3, r0
 8018146:	2b00      	cmp	r3, #0
 8018148:	d006      	beq.n	8018158 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801814a:	4b2e      	ldr	r3, [pc, #184]	; (8018204 <icmp_input+0x1fc>)
 801814c:	22c0      	movs	r2, #192	; 0xc0
 801814e:	4930      	ldr	r1, [pc, #192]	; (8018210 <icmp_input+0x208>)
 8018150:	482e      	ldr	r0, [pc, #184]	; (801820c <icmp_input+0x204>)
 8018152:	f002 fa99 	bl	801a688 <iprintf>
        goto icmperr;
 8018156:	e04a      	b.n	80181ee <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801815e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018162:	4619      	mov	r1, r3
 8018164:	6878      	ldr	r0, [r7, #4]
 8018166:	f7f8 ff2d 	bl	8010fc4 <pbuf_header>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d12b      	bne.n	80181c8 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8018176:	69fb      	ldr	r3, [r7, #28]
 8018178:	681a      	ldr	r2, [r3, #0]
 801817a:	693b      	ldr	r3, [r7, #16]
 801817c:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801817e:	4b1f      	ldr	r3, [pc, #124]	; (80181fc <icmp_input+0x1f4>)
 8018180:	691a      	ldr	r2, [r3, #16]
 8018182:	693b      	ldr	r3, [r7, #16]
 8018184:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018186:	697b      	ldr	r3, [r7, #20]
 8018188:	2200      	movs	r2, #0
 801818a:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	2200      	movs	r2, #0
 8018190:	709a      	strb	r2, [r3, #2]
 8018192:	2200      	movs	r2, #0
 8018194:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8018196:	693b      	ldr	r3, [r7, #16]
 8018198:	22ff      	movs	r2, #255	; 0xff
 801819a:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 801819c:	693b      	ldr	r3, [r7, #16]
 801819e:	2200      	movs	r2, #0
 80181a0:	729a      	strb	r2, [r3, #10]
 80181a2:	2200      	movs	r2, #0
 80181a4:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	9302      	str	r3, [sp, #8]
 80181aa:	2301      	movs	r3, #1
 80181ac:	9301      	str	r3, [sp, #4]
 80181ae:	2300      	movs	r3, #0
 80181b0:	9300      	str	r3, [sp, #0]
 80181b2:	23ff      	movs	r3, #255	; 0xff
 80181b4:	2200      	movs	r2, #0
 80181b6:	69f9      	ldr	r1, [r7, #28]
 80181b8:	6878      	ldr	r0, [r7, #4]
 80181ba:	f000 fa5d 	bl	8018678 <ip4_output_if>
 80181be:	4603      	mov	r3, r0
 80181c0:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80181c2:	e001      	b.n	80181c8 <icmp_input+0x1c0>
    break;
 80181c4:	bf00      	nop
 80181c6:	e000      	b.n	80181ca <icmp_input+0x1c2>
    break;
 80181c8:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f7f8 ff1e 	bl	801100c <pbuf_free>
  return;
 80181d0:	e011      	b.n	80181f6 <icmp_input+0x1ee>
    goto lenerr;
 80181d2:	bf00      	nop
 80181d4:	e002      	b.n	80181dc <icmp_input+0x1d4>
    goto lenerr;
 80181d6:	bf00      	nop
 80181d8:	e000      	b.n	80181dc <icmp_input+0x1d4>
      goto lenerr;
 80181da:	bf00      	nop
lenerr:
  pbuf_free(p);
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	f7f8 ff15 	bl	801100c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80181e2:	e008      	b.n	80181f6 <icmp_input+0x1ee>
      goto icmperr;
 80181e4:	bf00      	nop
 80181e6:	e002      	b.n	80181ee <icmp_input+0x1e6>
      goto icmperr;
 80181e8:	bf00      	nop
 80181ea:	e000      	b.n	80181ee <icmp_input+0x1e6>
        goto icmperr;
 80181ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f7f8 ff0c 	bl	801100c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80181f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80181f6:	3728      	adds	r7, #40	; 0x28
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}
 80181fc:	200087c8 	.word	0x200087c8
 8018200:	200087dc 	.word	0x200087dc
 8018204:	0801dc88 	.word	0x0801dc88
 8018208:	0801dcc0 	.word	0x0801dcc0
 801820c:	0801dcf8 	.word	0x0801dcf8
 8018210:	0801dd20 	.word	0x0801dd20

08018214 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	460b      	mov	r3, r1
 801821e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018220:	78fb      	ldrb	r3, [r7, #3]
 8018222:	461a      	mov	r2, r3
 8018224:	2103      	movs	r1, #3
 8018226:	6878      	ldr	r0, [r7, #4]
 8018228:	f000 f814 	bl	8018254 <icmp_send_response>
}
 801822c:	bf00      	nop
 801822e:	3708      	adds	r7, #8
 8018230:	46bd      	mov	sp, r7
 8018232:	bd80      	pop	{r7, pc}

08018234 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b082      	sub	sp, #8
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	460b      	mov	r3, r1
 801823e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018240:	78fb      	ldrb	r3, [r7, #3]
 8018242:	461a      	mov	r2, r3
 8018244:	210b      	movs	r1, #11
 8018246:	6878      	ldr	r0, [r7, #4]
 8018248:	f000 f804 	bl	8018254 <icmp_send_response>
}
 801824c:	bf00      	nop
 801824e:	3708      	adds	r7, #8
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}

08018254 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b08c      	sub	sp, #48	; 0x30
 8018258:	af04      	add	r7, sp, #16
 801825a:	6078      	str	r0, [r7, #4]
 801825c:	460b      	mov	r3, r1
 801825e:	70fb      	strb	r3, [r7, #3]
 8018260:	4613      	mov	r3, r2
 8018262:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018264:	2200      	movs	r2, #0
 8018266:	2124      	movs	r1, #36	; 0x24
 8018268:	2001      	movs	r0, #1
 801826a:	f7f8 fb57 	bl	801091c <pbuf_alloc>
 801826e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018270:	69fb      	ldr	r3, [r7, #28]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d04c      	beq.n	8018310 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	895b      	ldrh	r3, [r3, #10]
 801827a:	2b23      	cmp	r3, #35	; 0x23
 801827c:	d806      	bhi.n	801828c <icmp_send_response+0x38>
 801827e:	4b26      	ldr	r3, [pc, #152]	; (8018318 <icmp_send_response+0xc4>)
 8018280:	f240 1261 	movw	r2, #353	; 0x161
 8018284:	4925      	ldr	r1, [pc, #148]	; (801831c <icmp_send_response+0xc8>)
 8018286:	4826      	ldr	r0, [pc, #152]	; (8018320 <icmp_send_response+0xcc>)
 8018288:	f002 f9fe 	bl	801a688 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	685b      	ldr	r3, [r3, #4]
 8018290:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018292:	69fb      	ldr	r3, [r7, #28]
 8018294:	685b      	ldr	r3, [r3, #4]
 8018296:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018298:	697b      	ldr	r3, [r7, #20]
 801829a:	78fa      	ldrb	r2, [r7, #3]
 801829c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	78ba      	ldrb	r2, [r7, #2]
 80182a2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	2200      	movs	r2, #0
 80182a8:	711a      	strb	r2, [r3, #4]
 80182aa:	2200      	movs	r2, #0
 80182ac:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80182ae:	697b      	ldr	r3, [r7, #20]
 80182b0:	2200      	movs	r2, #0
 80182b2:	719a      	strb	r2, [r3, #6]
 80182b4:	2200      	movs	r2, #0
 80182b6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80182b8:	69fb      	ldr	r3, [r7, #28]
 80182ba:	685b      	ldr	r3, [r3, #4]
 80182bc:	f103 0008 	add.w	r0, r3, #8
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	685b      	ldr	r3, [r3, #4]
 80182c4:	221c      	movs	r2, #28
 80182c6:	4619      	mov	r1, r3
 80182c8:	f002 f8ec 	bl	801a4a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80182cc:	69bb      	ldr	r3, [r7, #24]
 80182ce:	68db      	ldr	r3, [r3, #12]
 80182d0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80182d2:	f107 030c 	add.w	r3, r7, #12
 80182d6:	4618      	mov	r0, r3
 80182d8:	f000 f824 	bl	8018324 <ip4_route>
 80182dc:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80182de:	693b      	ldr	r3, [r7, #16]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d011      	beq.n	8018308 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80182e4:	697b      	ldr	r3, [r7, #20]
 80182e6:	2200      	movs	r2, #0
 80182e8:	709a      	strb	r2, [r3, #2]
 80182ea:	2200      	movs	r2, #0
 80182ec:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80182ee:	f107 020c 	add.w	r2, r7, #12
 80182f2:	693b      	ldr	r3, [r7, #16]
 80182f4:	9302      	str	r3, [sp, #8]
 80182f6:	2301      	movs	r3, #1
 80182f8:	9301      	str	r3, [sp, #4]
 80182fa:	2300      	movs	r3, #0
 80182fc:	9300      	str	r3, [sp, #0]
 80182fe:	23ff      	movs	r3, #255	; 0xff
 8018300:	2100      	movs	r1, #0
 8018302:	69f8      	ldr	r0, [r7, #28]
 8018304:	f000 f9b8 	bl	8018678 <ip4_output_if>
  }
  pbuf_free(q);
 8018308:	69f8      	ldr	r0, [r7, #28]
 801830a:	f7f8 fe7f 	bl	801100c <pbuf_free>
 801830e:	e000      	b.n	8018312 <icmp_send_response+0xbe>
    return;
 8018310:	bf00      	nop
}
 8018312:	3720      	adds	r7, #32
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}
 8018318:	0801dc88 	.word	0x0801dc88
 801831c:	0801dd54 	.word	0x0801dd54
 8018320:	0801dcf8 	.word	0x0801dcf8

08018324 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018324:	b480      	push	{r7}
 8018326:	b085      	sub	sp, #20
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801832c:	4b30      	ldr	r3, [pc, #192]	; (80183f0 <ip4_route+0xcc>)
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	60fb      	str	r3, [r7, #12]
 8018332:	e036      	b.n	80183a2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801833a:	f003 0301 	and.w	r3, r3, #1
 801833e:	b2db      	uxtb	r3, r3
 8018340:	2b00      	cmp	r3, #0
 8018342:	d02b      	beq.n	801839c <ip4_route+0x78>
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801834a:	089b      	lsrs	r3, r3, #2
 801834c:	f003 0301 	and.w	r3, r3, #1
 8018350:	b2db      	uxtb	r3, r3
 8018352:	2b00      	cmp	r3, #0
 8018354:	d022      	beq.n	801839c <ip4_route+0x78>
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	3304      	adds	r3, #4
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d01d      	beq.n	801839c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681a      	ldr	r2, [r3, #0]
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	3304      	adds	r3, #4
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	405a      	eors	r2, r3
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	3308      	adds	r3, #8
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4013      	ands	r3, r2
 8018374:	2b00      	cmp	r3, #0
 8018376:	d101      	bne.n	801837c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	e033      	b.n	80183e4 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018382:	f003 0302 	and.w	r3, r3, #2
 8018386:	2b00      	cmp	r3, #0
 8018388:	d108      	bne.n	801839c <ip4_route+0x78>
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	681a      	ldr	r2, [r3, #0]
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	330c      	adds	r3, #12
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	429a      	cmp	r2, r3
 8018396:	d101      	bne.n	801839c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	e023      	b.n	80183e4 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	60fb      	str	r3, [r7, #12]
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d1c5      	bne.n	8018334 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80183a8:	4b12      	ldr	r3, [pc, #72]	; (80183f4 <ip4_route+0xd0>)
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d015      	beq.n	80183dc <ip4_route+0xb8>
 80183b0:	4b10      	ldr	r3, [pc, #64]	; (80183f4 <ip4_route+0xd0>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80183b8:	f003 0301 	and.w	r3, r3, #1
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d00d      	beq.n	80183dc <ip4_route+0xb8>
 80183c0:	4b0c      	ldr	r3, [pc, #48]	; (80183f4 <ip4_route+0xd0>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80183c8:	f003 0304 	and.w	r3, r3, #4
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d005      	beq.n	80183dc <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80183d0:	4b08      	ldr	r3, [pc, #32]	; (80183f4 <ip4_route+0xd0>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	3304      	adds	r3, #4
 80183d6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d101      	bne.n	80183e0 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80183dc:	2300      	movs	r3, #0
 80183de:	e001      	b.n	80183e4 <ip4_route+0xc0>
  }

  return netif_default;
 80183e0:	4b04      	ldr	r3, [pc, #16]	; (80183f4 <ip4_route+0xd0>)
 80183e2:	681b      	ldr	r3, [r3, #0]
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3714      	adds	r7, #20
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bc80      	pop	{r7}
 80183ec:	4770      	bx	lr
 80183ee:	bf00      	nop
 80183f0:	2000bec8 	.word	0x2000bec8
 80183f4:	2000becc 	.word	0x2000becc

080183f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b086      	sub	sp, #24
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
 8018400:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	685b      	ldr	r3, [r3, #4]
 8018406:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018408:	697b      	ldr	r3, [r7, #20]
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	091b      	lsrs	r3, r3, #4
 801840e:	b2db      	uxtb	r3, r3
 8018410:	2b04      	cmp	r3, #4
 8018412:	d004      	beq.n	801841e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f7f8 fdf9 	bl	801100c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801841a:	2300      	movs	r3, #0
 801841c:	e124      	b.n	8018668 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	781b      	ldrb	r3, [r3, #0]
 8018422:	b29b      	uxth	r3, r3
 8018424:	f003 030f 	and.w	r3, r3, #15
 8018428:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801842a:	897b      	ldrh	r3, [r7, #10]
 801842c:	009b      	lsls	r3, r3, #2
 801842e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018430:	697b      	ldr	r3, [r7, #20]
 8018432:	885b      	ldrh	r3, [r3, #2]
 8018434:	b29b      	uxth	r3, r3
 8018436:	4618      	mov	r0, r3
 8018438:	f7f7 fb86 	bl	800fb48 <lwip_htons>
 801843c:	4603      	mov	r3, r0
 801843e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	891b      	ldrh	r3, [r3, #8]
 8018444:	893a      	ldrh	r2, [r7, #8]
 8018446:	429a      	cmp	r2, r3
 8018448:	d204      	bcs.n	8018454 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801844a:	893b      	ldrh	r3, [r7, #8]
 801844c:	4619      	mov	r1, r3
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	f7f8 fc68 	bl	8010d24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	895b      	ldrh	r3, [r3, #10]
 8018458:	897a      	ldrh	r2, [r7, #10]
 801845a:	429a      	cmp	r2, r3
 801845c:	d807      	bhi.n	801846e <ip4_input+0x76>
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	891b      	ldrh	r3, [r3, #8]
 8018462:	893a      	ldrh	r2, [r7, #8]
 8018464:	429a      	cmp	r2, r3
 8018466:	d802      	bhi.n	801846e <ip4_input+0x76>
 8018468:	897b      	ldrh	r3, [r7, #10]
 801846a:	2b13      	cmp	r3, #19
 801846c:	d804      	bhi.n	8018478 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801846e:	6878      	ldr	r0, [r7, #4]
 8018470:	f7f8 fdcc 	bl	801100c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018474:	2300      	movs	r3, #0
 8018476:	e0f7      	b.n	8018668 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018478:	697b      	ldr	r3, [r7, #20]
 801847a:	691b      	ldr	r3, [r3, #16]
 801847c:	4a7c      	ldr	r2, [pc, #496]	; (8018670 <ip4_input+0x278>)
 801847e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	68db      	ldr	r3, [r3, #12]
 8018484:	4a7a      	ldr	r2, [pc, #488]	; (8018670 <ip4_input+0x278>)
 8018486:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018488:	4b79      	ldr	r3, [pc, #484]	; (8018670 <ip4_input+0x278>)
 801848a:	695b      	ldr	r3, [r3, #20]
 801848c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018490:	2be0      	cmp	r3, #224	; 0xe0
 8018492:	d112      	bne.n	80184ba <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018494:	683b      	ldr	r3, [r7, #0]
 8018496:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801849a:	f003 0301 	and.w	r3, r3, #1
 801849e:	b2db      	uxtb	r3, r3
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d007      	beq.n	80184b4 <ip4_input+0xbc>
 80184a4:	683b      	ldr	r3, [r7, #0]
 80184a6:	3304      	adds	r3, #4
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d002      	beq.n	80184b4 <ip4_input+0xbc>
      netif = inp;
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	613b      	str	r3, [r7, #16]
 80184b2:	e041      	b.n	8018538 <ip4_input+0x140>
    } else {
      netif = NULL;
 80184b4:	2300      	movs	r3, #0
 80184b6:	613b      	str	r3, [r7, #16]
 80184b8:	e03e      	b.n	8018538 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80184ba:	2301      	movs	r3, #1
 80184bc:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80184be:	683b      	ldr	r3, [r7, #0]
 80184c0:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80184c2:	693b      	ldr	r3, [r7, #16]
 80184c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80184c8:	f003 0301 	and.w	r3, r3, #1
 80184cc:	b2db      	uxtb	r3, r3
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d014      	beq.n	80184fc <ip4_input+0x104>
 80184d2:	693b      	ldr	r3, [r7, #16]
 80184d4:	3304      	adds	r3, #4
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d00f      	beq.n	80184fc <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80184dc:	4b64      	ldr	r3, [pc, #400]	; (8018670 <ip4_input+0x278>)
 80184de:	695a      	ldr	r2, [r3, #20]
 80184e0:	693b      	ldr	r3, [r7, #16]
 80184e2:	3304      	adds	r3, #4
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	429a      	cmp	r2, r3
 80184e8:	d026      	beq.n	8018538 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80184ea:	4b61      	ldr	r3, [pc, #388]	; (8018670 <ip4_input+0x278>)
 80184ec:	695b      	ldr	r3, [r3, #20]
 80184ee:	6939      	ldr	r1, [r7, #16]
 80184f0:	4618      	mov	r0, r3
 80184f2:	f000 f993 	bl	801881c <ip4_addr_isbroadcast_u32>
 80184f6:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d11d      	bne.n	8018538 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d00d      	beq.n	801851e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8018502:	4b5b      	ldr	r3, [pc, #364]	; (8018670 <ip4_input+0x278>)
 8018504:	695b      	ldr	r3, [r3, #20]
 8018506:	b2db      	uxtb	r3, r3
 8018508:	2b7f      	cmp	r3, #127	; 0x7f
 801850a:	d102      	bne.n	8018512 <ip4_input+0x11a>
          netif = NULL;
 801850c:	2300      	movs	r3, #0
 801850e:	613b      	str	r3, [r7, #16]
          break;
 8018510:	e012      	b.n	8018538 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8018512:	2300      	movs	r3, #0
 8018514:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8018516:	4b57      	ldr	r3, [pc, #348]	; (8018674 <ip4_input+0x27c>)
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	613b      	str	r3, [r7, #16]
 801851c:	e002      	b.n	8018524 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 801851e:	693b      	ldr	r3, [r7, #16]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8018524:	693a      	ldr	r2, [r7, #16]
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	429a      	cmp	r2, r3
 801852a:	d102      	bne.n	8018532 <ip4_input+0x13a>
        netif = netif->next;
 801852c:	693b      	ldr	r3, [r7, #16]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8018532:	693b      	ldr	r3, [r7, #16]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d1c4      	bne.n	80184c2 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018538:	4b4d      	ldr	r3, [pc, #308]	; (8018670 <ip4_input+0x278>)
 801853a:	691b      	ldr	r3, [r3, #16]
 801853c:	6839      	ldr	r1, [r7, #0]
 801853e:	4618      	mov	r0, r3
 8018540:	f000 f96c 	bl	801881c <ip4_addr_isbroadcast_u32>
 8018544:	4603      	mov	r3, r0
 8018546:	2b00      	cmp	r3, #0
 8018548:	d105      	bne.n	8018556 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801854a:	4b49      	ldr	r3, [pc, #292]	; (8018670 <ip4_input+0x278>)
 801854c:	691b      	ldr	r3, [r3, #16]
 801854e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018552:	2be0      	cmp	r3, #224	; 0xe0
 8018554:	d104      	bne.n	8018560 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018556:	6878      	ldr	r0, [r7, #4]
 8018558:	f7f8 fd58 	bl	801100c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801855c:	2300      	movs	r3, #0
 801855e:	e083      	b.n	8018668 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018560:	693b      	ldr	r3, [r7, #16]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d104      	bne.n	8018570 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018566:	6878      	ldr	r0, [r7, #4]
 8018568:	f7f8 fd50 	bl	801100c <pbuf_free>
    return ERR_OK;
 801856c:	2300      	movs	r3, #0
 801856e:	e07b      	b.n	8018668 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018570:	697b      	ldr	r3, [r7, #20]
 8018572:	88db      	ldrh	r3, [r3, #6]
 8018574:	b29b      	uxth	r3, r3
 8018576:	461a      	mov	r2, r3
 8018578:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801857c:	4013      	ands	r3, r2
 801857e:	2b00      	cmp	r3, #0
 8018580:	d00b      	beq.n	801859a <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f000 fc8e 	bl	8018ea4 <ip4_reass>
 8018588:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d101      	bne.n	8018594 <ip4_input+0x19c>
      return ERR_OK;
 8018590:	2300      	movs	r3, #0
 8018592:	e069      	b.n	8018668 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	685b      	ldr	r3, [r3, #4]
 8018598:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801859a:	4a35      	ldr	r2, [pc, #212]	; (8018670 <ip4_input+0x278>)
 801859c:	693b      	ldr	r3, [r7, #16]
 801859e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80185a0:	4a33      	ldr	r2, [pc, #204]	; (8018670 <ip4_input+0x278>)
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80185a6:	4a32      	ldr	r2, [pc, #200]	; (8018670 <ip4_input+0x278>)
 80185a8:	697b      	ldr	r3, [r7, #20]
 80185aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	781b      	ldrb	r3, [r3, #0]
 80185b0:	b29b      	uxth	r3, r3
 80185b2:	f003 030f 	and.w	r3, r3, #15
 80185b6:	b29b      	uxth	r3, r3
 80185b8:	009b      	lsls	r3, r3, #2
 80185ba:	b29a      	uxth	r2, r3
 80185bc:	4b2c      	ldr	r3, [pc, #176]	; (8018670 <ip4_input+0x278>)
 80185be:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80185c0:	897b      	ldrh	r3, [r7, #10]
 80185c2:	425b      	negs	r3, r3
 80185c4:	b29b      	uxth	r3, r3
 80185c6:	b21b      	sxth	r3, r3
 80185c8:	4619      	mov	r1, r3
 80185ca:	6878      	ldr	r0, [r7, #4]
 80185cc:	f7f8 fcfa 	bl	8010fc4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 80185d0:	697b      	ldr	r3, [r7, #20]
 80185d2:	7a5b      	ldrb	r3, [r3, #9]
 80185d4:	2b11      	cmp	r3, #17
 80185d6:	d006      	beq.n	80185e6 <ip4_input+0x1ee>
 80185d8:	2b11      	cmp	r3, #17
 80185da:	dc13      	bgt.n	8018604 <ip4_input+0x20c>
 80185dc:	2b01      	cmp	r3, #1
 80185de:	d00c      	beq.n	80185fa <ip4_input+0x202>
 80185e0:	2b06      	cmp	r3, #6
 80185e2:	d005      	beq.n	80185f0 <ip4_input+0x1f8>
 80185e4:	e00e      	b.n	8018604 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80185e6:	6839      	ldr	r1, [r7, #0]
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	f7fe fce3 	bl	8016fb4 <udp_input>
      break;
 80185ee:	e028      	b.n	8018642 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80185f0:	6839      	ldr	r1, [r7, #0]
 80185f2:	6878      	ldr	r0, [r7, #4]
 80185f4:	f7fa fd0a 	bl	801300c <tcp_input>
      break;
 80185f8:	e023      	b.n	8018642 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80185fa:	6839      	ldr	r1, [r7, #0]
 80185fc:	6878      	ldr	r0, [r7, #4]
 80185fe:	f7ff fd03 	bl	8018008 <icmp_input>
      break;
 8018602:	e01e      	b.n	8018642 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018604:	4b1a      	ldr	r3, [pc, #104]	; (8018670 <ip4_input+0x278>)
 8018606:	695b      	ldr	r3, [r3, #20]
 8018608:	6939      	ldr	r1, [r7, #16]
 801860a:	4618      	mov	r0, r3
 801860c:	f000 f906 	bl	801881c <ip4_addr_isbroadcast_u32>
 8018610:	4603      	mov	r3, r0
 8018612:	2b00      	cmp	r3, #0
 8018614:	d112      	bne.n	801863c <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018616:	4b16      	ldr	r3, [pc, #88]	; (8018670 <ip4_input+0x278>)
 8018618:	695b      	ldr	r3, [r3, #20]
 801861a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801861e:	2be0      	cmp	r3, #224	; 0xe0
 8018620:	d00c      	beq.n	801863c <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8018622:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018626:	4619      	mov	r1, r3
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f7f8 fcdd 	bl	8010fe8 <pbuf_header_force>
        p->payload = iphdr;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	697a      	ldr	r2, [r7, #20]
 8018632:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018634:	2102      	movs	r1, #2
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	f7ff fdec 	bl	8018214 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7f8 fce5 	bl	801100c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018642:	4b0b      	ldr	r3, [pc, #44]	; (8018670 <ip4_input+0x278>)
 8018644:	2200      	movs	r2, #0
 8018646:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018648:	4b09      	ldr	r3, [pc, #36]	; (8018670 <ip4_input+0x278>)
 801864a:	2200      	movs	r2, #0
 801864c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801864e:	4b08      	ldr	r3, [pc, #32]	; (8018670 <ip4_input+0x278>)
 8018650:	2200      	movs	r2, #0
 8018652:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018654:	4b06      	ldr	r3, [pc, #24]	; (8018670 <ip4_input+0x278>)
 8018656:	2200      	movs	r2, #0
 8018658:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801865a:	4b05      	ldr	r3, [pc, #20]	; (8018670 <ip4_input+0x278>)
 801865c:	2200      	movs	r2, #0
 801865e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018660:	4b03      	ldr	r3, [pc, #12]	; (8018670 <ip4_input+0x278>)
 8018662:	2200      	movs	r2, #0
 8018664:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018666:	2300      	movs	r3, #0
}
 8018668:	4618      	mov	r0, r3
 801866a:	3718      	adds	r7, #24
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}
 8018670:	200087c8 	.word	0x200087c8
 8018674:	2000bec8 	.word	0x2000bec8

08018678 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b08a      	sub	sp, #40	; 0x28
 801867c:	af04      	add	r7, sp, #16
 801867e:	60f8      	str	r0, [r7, #12]
 8018680:	60b9      	str	r1, [r7, #8]
 8018682:	607a      	str	r2, [r7, #4]
 8018684:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d009      	beq.n	80186a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d003      	beq.n	801869e <ip4_output_if+0x26>
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d102      	bne.n	80186a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a0:	3304      	adds	r3, #4
 80186a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80186a4:	78fa      	ldrb	r2, [r7, #3]
 80186a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a8:	9302      	str	r3, [sp, #8]
 80186aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186ae:	9301      	str	r3, [sp, #4]
 80186b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80186b4:	9300      	str	r3, [sp, #0]
 80186b6:	4613      	mov	r3, r2
 80186b8:	687a      	ldr	r2, [r7, #4]
 80186ba:	6979      	ldr	r1, [r7, #20]
 80186bc:	68f8      	ldr	r0, [r7, #12]
 80186be:	f000 f805 	bl	80186cc <ip4_output_if_src>
 80186c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3718      	adds	r7, #24
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}

080186cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b088      	sub	sp, #32
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	607a      	str	r2, [r7, #4]
 80186d8:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	89db      	ldrh	r3, [r3, #14]
 80186de:	2b01      	cmp	r3, #1
 80186e0:	d006      	beq.n	80186f0 <ip4_output_if_src+0x24>
 80186e2:	4b48      	ldr	r3, [pc, #288]	; (8018804 <ip4_output_if_src+0x138>)
 80186e4:	f240 3233 	movw	r2, #819	; 0x333
 80186e8:	4947      	ldr	r1, [pc, #284]	; (8018808 <ip4_output_if_src+0x13c>)
 80186ea:	4848      	ldr	r0, [pc, #288]	; (801880c <ip4_output_if_src+0x140>)
 80186ec:	f001 ffcc 	bl	801a688 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d060      	beq.n	80187b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80186f6:	2314      	movs	r3, #20
 80186f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80186fa:	2114      	movs	r1, #20
 80186fc:	68f8      	ldr	r0, [r7, #12]
 80186fe:	f7f8 fc61 	bl	8010fc4 <pbuf_header>
 8018702:	4603      	mov	r3, r0
 8018704:	2b00      	cmp	r3, #0
 8018706:	d002      	beq.n	801870e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018708:	f06f 0301 	mvn.w	r3, #1
 801870c:	e075      	b.n	80187fa <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	685b      	ldr	r3, [r3, #4]
 8018712:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	895b      	ldrh	r3, [r3, #10]
 8018718:	2b13      	cmp	r3, #19
 801871a:	d806      	bhi.n	801872a <ip4_output_if_src+0x5e>
 801871c:	4b39      	ldr	r3, [pc, #228]	; (8018804 <ip4_output_if_src+0x138>)
 801871e:	f44f 7258 	mov.w	r2, #864	; 0x360
 8018722:	493b      	ldr	r1, [pc, #236]	; (8018810 <ip4_output_if_src+0x144>)
 8018724:	4839      	ldr	r0, [pc, #228]	; (801880c <ip4_output_if_src+0x140>)
 8018726:	f001 ffaf 	bl	801a688 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801872a:	69fb      	ldr	r3, [r7, #28]
 801872c:	78fa      	ldrb	r2, [r7, #3]
 801872e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018730:	69fb      	ldr	r3, [r7, #28]
 8018732:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018736:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681a      	ldr	r2, [r3, #0]
 801873c:	69fb      	ldr	r3, [r7, #28]
 801873e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018740:	8b7b      	ldrh	r3, [r7, #26]
 8018742:	089b      	lsrs	r3, r3, #2
 8018744:	b29b      	uxth	r3, r3
 8018746:	b2db      	uxtb	r3, r3
 8018748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801874c:	b2da      	uxtb	r2, r3
 801874e:	69fb      	ldr	r3, [r7, #28]
 8018750:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018752:	69fb      	ldr	r3, [r7, #28]
 8018754:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018758:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	891b      	ldrh	r3, [r3, #8]
 801875e:	4618      	mov	r0, r3
 8018760:	f7f7 f9f2 	bl	800fb48 <lwip_htons>
 8018764:	4603      	mov	r3, r0
 8018766:	461a      	mov	r2, r3
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801876c:	69fb      	ldr	r3, [r7, #28]
 801876e:	2200      	movs	r2, #0
 8018770:	719a      	strb	r2, [r3, #6]
 8018772:	2200      	movs	r2, #0
 8018774:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018776:	4b27      	ldr	r3, [pc, #156]	; (8018814 <ip4_output_if_src+0x148>)
 8018778:	881b      	ldrh	r3, [r3, #0]
 801877a:	4618      	mov	r0, r3
 801877c:	f7f7 f9e4 	bl	800fb48 <lwip_htons>
 8018780:	4603      	mov	r3, r0
 8018782:	461a      	mov	r2, r3
 8018784:	69fb      	ldr	r3, [r7, #28]
 8018786:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018788:	4b22      	ldr	r3, [pc, #136]	; (8018814 <ip4_output_if_src+0x148>)
 801878a:	881b      	ldrh	r3, [r3, #0]
 801878c:	3301      	adds	r3, #1
 801878e:	b29a      	uxth	r2, r3
 8018790:	4b20      	ldr	r3, [pc, #128]	; (8018814 <ip4_output_if_src+0x148>)
 8018792:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018794:	68bb      	ldr	r3, [r7, #8]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d104      	bne.n	80187a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801879a:	4b1f      	ldr	r3, [pc, #124]	; (8018818 <ip4_output_if_src+0x14c>)
 801879c:	681a      	ldr	r2, [r3, #0]
 801879e:	69fb      	ldr	r3, [r7, #28]
 80187a0:	60da      	str	r2, [r3, #12]
 80187a2:	e003      	b.n	80187ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80187a4:	68bb      	ldr	r3, [r7, #8]
 80187a6:	681a      	ldr	r2, [r3, #0]
 80187a8:	69fb      	ldr	r3, [r7, #28]
 80187aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	2200      	movs	r2, #0
 80187b0:	729a      	strb	r2, [r3, #10]
 80187b2:	2200      	movs	r2, #0
 80187b4:	72da      	strb	r2, [r3, #11]
 80187b6:	e008      	b.n	80187ca <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80187be:	69fb      	ldr	r3, [r7, #28]
 80187c0:	691b      	ldr	r3, [r3, #16]
 80187c2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80187c4:	f107 0314 	add.w	r3, r7, #20
 80187c8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80187ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d00c      	beq.n	80187ec <ip4_output_if_src+0x120>
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	891a      	ldrh	r2, [r3, #8]
 80187d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80187da:	429a      	cmp	r2, r3
 80187dc:	d906      	bls.n	80187ec <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 80187de:	687a      	ldr	r2, [r7, #4]
 80187e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80187e2:	68f8      	ldr	r0, [r7, #12]
 80187e4:	f000 fd0a 	bl	80191fc <ip4_frag>
 80187e8:	4603      	mov	r3, r0
 80187ea:	e006      	b.n	80187fa <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80187ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ee:	695b      	ldr	r3, [r3, #20]
 80187f0:	687a      	ldr	r2, [r7, #4]
 80187f2:	68f9      	ldr	r1, [r7, #12]
 80187f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80187f6:	4798      	blx	r3
 80187f8:	4603      	mov	r3, r0
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3720      	adds	r7, #32
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	0801dd80 	.word	0x0801dd80
 8018808:	0801ddb4 	.word	0x0801ddb4
 801880c:	0801ddc0 	.word	0x0801ddc0
 8018810:	0801dde8 	.word	0x0801dde8
 8018814:	20005222 	.word	0x20005222
 8018818:	0801ecd4 	.word	0x0801ecd4

0801881c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801881c:	b480      	push	{r7}
 801881e:	b085      	sub	sp, #20
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
 8018824:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018830:	d002      	beq.n	8018838 <ip4_addr_isbroadcast_u32+0x1c>
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d101      	bne.n	801883c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018838:	2301      	movs	r3, #1
 801883a:	e02a      	b.n	8018892 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018842:	f003 0302 	and.w	r3, r3, #2
 8018846:	2b00      	cmp	r3, #0
 8018848:	d101      	bne.n	801884e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801884a:	2300      	movs	r3, #0
 801884c:	e021      	b.n	8018892 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801884e:	683b      	ldr	r3, [r7, #0]
 8018850:	3304      	adds	r3, #4
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	687a      	ldr	r2, [r7, #4]
 8018856:	429a      	cmp	r2, r3
 8018858:	d101      	bne.n	801885e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801885a:	2300      	movs	r3, #0
 801885c:	e019      	b.n	8018892 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801885e:	68fa      	ldr	r2, [r7, #12]
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	3304      	adds	r3, #4
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	405a      	eors	r2, r3
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	3308      	adds	r3, #8
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	4013      	ands	r3, r2
 8018870:	2b00      	cmp	r3, #0
 8018872:	d10d      	bne.n	8018890 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	3308      	adds	r3, #8
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	43da      	mvns	r2, r3
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	3308      	adds	r3, #8
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018888:	429a      	cmp	r2, r3
 801888a:	d101      	bne.n	8018890 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801888c:	2301      	movs	r3, #1
 801888e:	e000      	b.n	8018892 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018890:	2300      	movs	r3, #0
  }
}
 8018892:	4618      	mov	r0, r3
 8018894:	3714      	adds	r7, #20
 8018896:	46bd      	mov	sp, r7
 8018898:	bc80      	pop	{r7}
 801889a:	4770      	bx	lr

0801889c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801889c:	b580      	push	{r7, lr}
 801889e:	b084      	sub	sp, #16
 80188a0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80188a2:	2300      	movs	r3, #0
 80188a4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80188a6:	4b12      	ldr	r3, [pc, #72]	; (80188f0 <ip_reass_tmr+0x54>)
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80188ac:	e018      	b.n	80188e0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	7fdb      	ldrb	r3, [r3, #31]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d00b      	beq.n	80188ce <ip_reass_tmr+0x32>
      r->timer--;
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	7fdb      	ldrb	r3, [r3, #31]
 80188ba:	3b01      	subs	r3, #1
 80188bc:	b2da      	uxtb	r2, r3
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	60fb      	str	r3, [r7, #12]
 80188cc:	e008      	b.n	80188e0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80188d8:	68b9      	ldr	r1, [r7, #8]
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	f000 f80a 	bl	80188f4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d1e3      	bne.n	80188ae <ip_reass_tmr+0x12>
     }
   }
}
 80188e6:	bf00      	nop
 80188e8:	bf00      	nop
 80188ea:	3710      	adds	r7, #16
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}
 80188f0:	20005224 	.word	0x20005224

080188f4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b088      	sub	sp, #32
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
 80188fc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80188fe:	2300      	movs	r3, #0
 8018900:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018902:	683a      	ldr	r2, [r7, #0]
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	429a      	cmp	r2, r3
 8018908:	d105      	bne.n	8018916 <ip_reass_free_complete_datagram+0x22>
 801890a:	4b45      	ldr	r3, [pc, #276]	; (8018a20 <ip_reass_free_complete_datagram+0x12c>)
 801890c:	22ab      	movs	r2, #171	; 0xab
 801890e:	4945      	ldr	r1, [pc, #276]	; (8018a24 <ip_reass_free_complete_datagram+0x130>)
 8018910:	4845      	ldr	r0, [pc, #276]	; (8018a28 <ip_reass_free_complete_datagram+0x134>)
 8018912:	f001 feb9 	bl	801a688 <iprintf>
  if (prev != NULL) {
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d00a      	beq.n	8018932 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	687a      	ldr	r2, [r7, #4]
 8018922:	429a      	cmp	r2, r3
 8018924:	d005      	beq.n	8018932 <ip_reass_free_complete_datagram+0x3e>
 8018926:	4b3e      	ldr	r3, [pc, #248]	; (8018a20 <ip_reass_free_complete_datagram+0x12c>)
 8018928:	22ad      	movs	r2, #173	; 0xad
 801892a:	4940      	ldr	r1, [pc, #256]	; (8018a2c <ip_reass_free_complete_datagram+0x138>)
 801892c:	483e      	ldr	r0, [pc, #248]	; (8018a28 <ip_reass_free_complete_datagram+0x134>)
 801892e:	f001 feab 	bl	801a688 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	685b      	ldr	r3, [r3, #4]
 8018936:	685b      	ldr	r3, [r3, #4]
 8018938:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801893a:	697b      	ldr	r3, [r7, #20]
 801893c:	889b      	ldrh	r3, [r3, #4]
 801893e:	b29b      	uxth	r3, r3
 8018940:	2b00      	cmp	r3, #0
 8018942:	d12a      	bne.n	801899a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	685b      	ldr	r3, [r3, #4]
 8018948:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801894a:	697b      	ldr	r3, [r7, #20]
 801894c:	681a      	ldr	r2, [r3, #0]
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018952:	69bb      	ldr	r3, [r7, #24]
 8018954:	6858      	ldr	r0, [r3, #4]
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	3308      	adds	r3, #8
 801895a:	2214      	movs	r2, #20
 801895c:	4619      	mov	r1, r3
 801895e:	f001 fda1 	bl	801a4a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018962:	2101      	movs	r1, #1
 8018964:	69b8      	ldr	r0, [r7, #24]
 8018966:	f7ff fc65 	bl	8018234 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801896a:	69b8      	ldr	r0, [r7, #24]
 801896c:	f7f8 fbe8 	bl	8011140 <pbuf_clen>
 8018970:	4603      	mov	r3, r0
 8018972:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018974:	8bfa      	ldrh	r2, [r7, #30]
 8018976:	8a7b      	ldrh	r3, [r7, #18]
 8018978:	4413      	add	r3, r2
 801897a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801897e:	db05      	blt.n	801898c <ip_reass_free_complete_datagram+0x98>
 8018980:	4b27      	ldr	r3, [pc, #156]	; (8018a20 <ip_reass_free_complete_datagram+0x12c>)
 8018982:	22bc      	movs	r2, #188	; 0xbc
 8018984:	492a      	ldr	r1, [pc, #168]	; (8018a30 <ip_reass_free_complete_datagram+0x13c>)
 8018986:	4828      	ldr	r0, [pc, #160]	; (8018a28 <ip_reass_free_complete_datagram+0x134>)
 8018988:	f001 fe7e 	bl	801a688 <iprintf>
    pbufs_freed += clen;
 801898c:	8bfa      	ldrh	r2, [r7, #30]
 801898e:	8a7b      	ldrh	r3, [r7, #18]
 8018990:	4413      	add	r3, r2
 8018992:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018994:	69b8      	ldr	r0, [r7, #24]
 8018996:	f7f8 fb39 	bl	801100c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	685b      	ldr	r3, [r3, #4]
 801899e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80189a0:	e01f      	b.n	80189e2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80189a2:	69bb      	ldr	r3, [r7, #24]
 80189a4:	685b      	ldr	r3, [r3, #4]
 80189a6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80189a8:	69bb      	ldr	r3, [r7, #24]
 80189aa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80189ac:	697b      	ldr	r3, [r7, #20]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80189b2:	68f8      	ldr	r0, [r7, #12]
 80189b4:	f7f8 fbc4 	bl	8011140 <pbuf_clen>
 80189b8:	4603      	mov	r3, r0
 80189ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80189bc:	8bfa      	ldrh	r2, [r7, #30]
 80189be:	8a7b      	ldrh	r3, [r7, #18]
 80189c0:	4413      	add	r3, r2
 80189c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189c6:	db05      	blt.n	80189d4 <ip_reass_free_complete_datagram+0xe0>
 80189c8:	4b15      	ldr	r3, [pc, #84]	; (8018a20 <ip_reass_free_complete_datagram+0x12c>)
 80189ca:	22cc      	movs	r2, #204	; 0xcc
 80189cc:	4918      	ldr	r1, [pc, #96]	; (8018a30 <ip_reass_free_complete_datagram+0x13c>)
 80189ce:	4816      	ldr	r0, [pc, #88]	; (8018a28 <ip_reass_free_complete_datagram+0x134>)
 80189d0:	f001 fe5a 	bl	801a688 <iprintf>
    pbufs_freed += clen;
 80189d4:	8bfa      	ldrh	r2, [r7, #30]
 80189d6:	8a7b      	ldrh	r3, [r7, #18]
 80189d8:	4413      	add	r3, r2
 80189da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80189dc:	68f8      	ldr	r0, [r7, #12]
 80189de:	f7f8 fb15 	bl	801100c <pbuf_free>
  while (p != NULL) {
 80189e2:	69bb      	ldr	r3, [r7, #24]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d1dc      	bne.n	80189a2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80189e8:	6839      	ldr	r1, [r7, #0]
 80189ea:	6878      	ldr	r0, [r7, #4]
 80189ec:	f000 f8c2 	bl	8018b74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80189f0:	4b10      	ldr	r3, [pc, #64]	; (8018a34 <ip_reass_free_complete_datagram+0x140>)
 80189f2:	881b      	ldrh	r3, [r3, #0]
 80189f4:	8bfa      	ldrh	r2, [r7, #30]
 80189f6:	429a      	cmp	r2, r3
 80189f8:	d905      	bls.n	8018a06 <ip_reass_free_complete_datagram+0x112>
 80189fa:	4b09      	ldr	r3, [pc, #36]	; (8018a20 <ip_reass_free_complete_datagram+0x12c>)
 80189fc:	22d2      	movs	r2, #210	; 0xd2
 80189fe:	490e      	ldr	r1, [pc, #56]	; (8018a38 <ip_reass_free_complete_datagram+0x144>)
 8018a00:	4809      	ldr	r0, [pc, #36]	; (8018a28 <ip_reass_free_complete_datagram+0x134>)
 8018a02:	f001 fe41 	bl	801a688 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8018a06:	4b0b      	ldr	r3, [pc, #44]	; (8018a34 <ip_reass_free_complete_datagram+0x140>)
 8018a08:	881a      	ldrh	r2, [r3, #0]
 8018a0a:	8bfb      	ldrh	r3, [r7, #30]
 8018a0c:	1ad3      	subs	r3, r2, r3
 8018a0e:	b29a      	uxth	r2, r3
 8018a10:	4b08      	ldr	r3, [pc, #32]	; (8018a34 <ip_reass_free_complete_datagram+0x140>)
 8018a12:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018a14:	8bfb      	ldrh	r3, [r7, #30]
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	3720      	adds	r7, #32
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}
 8018a1e:	bf00      	nop
 8018a20:	0801de18 	.word	0x0801de18
 8018a24:	0801de54 	.word	0x0801de54
 8018a28:	0801de60 	.word	0x0801de60
 8018a2c:	0801de88 	.word	0x0801de88
 8018a30:	0801de9c 	.word	0x0801de9c
 8018a34:	20005228 	.word	0x20005228
 8018a38:	0801debc 	.word	0x0801debc

08018a3c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b08a      	sub	sp, #40	; 0x28
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
 8018a44:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018a46:	2300      	movs	r3, #0
 8018a48:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018a52:	2300      	movs	r3, #0
 8018a54:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018a56:	2300      	movs	r3, #0
 8018a58:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018a5a:	4b28      	ldr	r3, [pc, #160]	; (8018afc <ip_reass_remove_oldest_datagram+0xc0>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018a60:	e030      	b.n	8018ac4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a64:	695a      	ldr	r2, [r3, #20]
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	68db      	ldr	r3, [r3, #12]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d10c      	bne.n	8018a88 <ip_reass_remove_oldest_datagram+0x4c>
 8018a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a70:	699a      	ldr	r2, [r3, #24]
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	691b      	ldr	r3, [r3, #16]
 8018a76:	429a      	cmp	r2, r3
 8018a78:	d106      	bne.n	8018a88 <ip_reass_remove_oldest_datagram+0x4c>
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7c:	899a      	ldrh	r2, [r3, #12]
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	889b      	ldrh	r3, [r3, #4]
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	429a      	cmp	r2, r3
 8018a86:	d014      	beq.n	8018ab2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018a88:	693b      	ldr	r3, [r7, #16]
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018a8e:	6a3b      	ldr	r3, [r7, #32]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d104      	bne.n	8018a9e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a96:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018a98:	69fb      	ldr	r3, [r7, #28]
 8018a9a:	61bb      	str	r3, [r7, #24]
 8018a9c:	e009      	b.n	8018ab2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa0:	7fda      	ldrb	r2, [r3, #31]
 8018aa2:	6a3b      	ldr	r3, [r7, #32]
 8018aa4:	7fdb      	ldrb	r3, [r3, #31]
 8018aa6:	429a      	cmp	r2, r3
 8018aa8:	d803      	bhi.n	8018ab2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018aae:	69fb      	ldr	r3, [r7, #28]
 8018ab0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d001      	beq.n	8018abe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018abc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d1cb      	bne.n	8018a62 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018aca:	6a3b      	ldr	r3, [r7, #32]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d008      	beq.n	8018ae2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018ad0:	69b9      	ldr	r1, [r7, #24]
 8018ad2:	6a38      	ldr	r0, [r7, #32]
 8018ad4:	f7ff ff0e 	bl	80188f4 <ip_reass_free_complete_datagram>
 8018ad8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018ada:	697a      	ldr	r2, [r7, #20]
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	4413      	add	r3, r2
 8018ae0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018ae2:	697a      	ldr	r2, [r7, #20]
 8018ae4:	683b      	ldr	r3, [r7, #0]
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	da02      	bge.n	8018af0 <ip_reass_remove_oldest_datagram+0xb4>
 8018aea:	693b      	ldr	r3, [r7, #16]
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	dcac      	bgt.n	8018a4a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018af0:	697b      	ldr	r3, [r7, #20]
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3728      	adds	r7, #40	; 0x28
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}
 8018afa:	bf00      	nop
 8018afc:	20005224 	.word	0x20005224

08018b00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b084      	sub	sp, #16
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	6078      	str	r0, [r7, #4]
 8018b08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018b0a:	2004      	movs	r0, #4
 8018b0c:	f7f7 fc72 	bl	80103f4 <memp_malloc>
 8018b10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d110      	bne.n	8018b3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018b18:	6839      	ldr	r1, [r7, #0]
 8018b1a:	6878      	ldr	r0, [r7, #4]
 8018b1c:	f7ff ff8e 	bl	8018a3c <ip_reass_remove_oldest_datagram>
 8018b20:	4602      	mov	r2, r0
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	4293      	cmp	r3, r2
 8018b26:	dc03      	bgt.n	8018b30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018b28:	2004      	movs	r0, #4
 8018b2a:	f7f7 fc63 	bl	80103f4 <memp_malloc>
 8018b2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d101      	bne.n	8018b3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8018b36:	2300      	movs	r3, #0
 8018b38:	e016      	b.n	8018b68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018b3a:	2220      	movs	r2, #32
 8018b3c:	2100      	movs	r1, #0
 8018b3e:	68f8      	ldr	r0, [r7, #12]
 8018b40:	f001 fcbe 	bl	801a4c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	2203      	movs	r2, #3
 8018b48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018b4a:	4b09      	ldr	r3, [pc, #36]	; (8018b70 <ip_reass_enqueue_new_datagram+0x70>)
 8018b4c:	681a      	ldr	r2, [r3, #0]
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018b52:	4a07      	ldr	r2, [pc, #28]	; (8018b70 <ip_reass_enqueue_new_datagram+0x70>)
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	3308      	adds	r3, #8
 8018b5c:	2214      	movs	r2, #20
 8018b5e:	6879      	ldr	r1, [r7, #4]
 8018b60:	4618      	mov	r0, r3
 8018b62:	f001 fc9f 	bl	801a4a4 <memcpy>
  return ipr;
 8018b66:	68fb      	ldr	r3, [r7, #12]
}
 8018b68:	4618      	mov	r0, r3
 8018b6a:	3710      	adds	r7, #16
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd80      	pop	{r7, pc}
 8018b70:	20005224 	.word	0x20005224

08018b74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b082      	sub	sp, #8
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018b7e:	4b10      	ldr	r3, [pc, #64]	; (8018bc0 <ip_reass_dequeue_datagram+0x4c>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	687a      	ldr	r2, [r7, #4]
 8018b84:	429a      	cmp	r2, r3
 8018b86:	d104      	bne.n	8018b92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	4a0c      	ldr	r2, [pc, #48]	; (8018bc0 <ip_reass_dequeue_datagram+0x4c>)
 8018b8e:	6013      	str	r3, [r2, #0]
 8018b90:	e00d      	b.n	8018bae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d106      	bne.n	8018ba6 <ip_reass_dequeue_datagram+0x32>
 8018b98:	4b0a      	ldr	r3, [pc, #40]	; (8018bc4 <ip_reass_dequeue_datagram+0x50>)
 8018b9a:	f240 1245 	movw	r2, #325	; 0x145
 8018b9e:	490a      	ldr	r1, [pc, #40]	; (8018bc8 <ip_reass_dequeue_datagram+0x54>)
 8018ba0:	480a      	ldr	r0, [pc, #40]	; (8018bcc <ip_reass_dequeue_datagram+0x58>)
 8018ba2:	f001 fd71 	bl	801a688 <iprintf>
    prev->next = ipr->next;
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	683b      	ldr	r3, [r7, #0]
 8018bac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018bae:	6879      	ldr	r1, [r7, #4]
 8018bb0:	2004      	movs	r0, #4
 8018bb2:	f7f7 fc71 	bl	8010498 <memp_free>
}
 8018bb6:	bf00      	nop
 8018bb8:	3708      	adds	r7, #8
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}
 8018bbe:	bf00      	nop
 8018bc0:	20005224 	.word	0x20005224
 8018bc4:	0801de18 	.word	0x0801de18
 8018bc8:	0801ded8 	.word	0x0801ded8
 8018bcc:	0801de60 	.word	0x0801de60

08018bd0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b08c      	sub	sp, #48	; 0x30
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	60f8      	str	r0, [r7, #12]
 8018bd8:	60b9      	str	r1, [r7, #8]
 8018bda:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8018bdc:	2300      	movs	r3, #0
 8018bde:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018be0:	2301      	movs	r3, #1
 8018be2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8018be4:	68bb      	ldr	r3, [r7, #8]
 8018be6:	685b      	ldr	r3, [r3, #4]
 8018be8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018bea:	69fb      	ldr	r3, [r7, #28]
 8018bec:	885b      	ldrh	r3, [r3, #2]
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f7f6 ffa9 	bl	800fb48 <lwip_htons>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	461a      	mov	r2, r3
 8018bfa:	69fb      	ldr	r3, [r7, #28]
 8018bfc:	781b      	ldrb	r3, [r3, #0]
 8018bfe:	b29b      	uxth	r3, r3
 8018c00:	f003 030f 	and.w	r3, r3, #15
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	009b      	lsls	r3, r3, #2
 8018c08:	b29b      	uxth	r3, r3
 8018c0a:	1ad3      	subs	r3, r2, r3
 8018c0c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8018c0e:	69fb      	ldr	r3, [r7, #28]
 8018c10:	88db      	ldrh	r3, [r3, #6]
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	4618      	mov	r0, r3
 8018c16:	f7f6 ff97 	bl	800fb48 <lwip_htons>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c20:	b29b      	uxth	r3, r3
 8018c22:	00db      	lsls	r3, r3, #3
 8018c24:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8018c26:	68bb      	ldr	r3, [r7, #8]
 8018c28:	685b      	ldr	r3, [r3, #4]
 8018c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c2e:	2200      	movs	r2, #0
 8018c30:	701a      	strb	r2, [r3, #0]
 8018c32:	2200      	movs	r2, #0
 8018c34:	705a      	strb	r2, [r3, #1]
 8018c36:	2200      	movs	r2, #0
 8018c38:	709a      	strb	r2, [r3, #2]
 8018c3a:	2200      	movs	r2, #0
 8018c3c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c40:	8b3a      	ldrh	r2, [r7, #24]
 8018c42:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8018c44:	8b3a      	ldrh	r2, [r7, #24]
 8018c46:	8b7b      	ldrh	r3, [r7, #26]
 8018c48:	4413      	add	r3, r2
 8018c4a:	b29a      	uxth	r2, r3
 8018c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c4e:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	685b      	ldr	r3, [r3, #4]
 8018c54:	627b      	str	r3, [r7, #36]	; 0x24
 8018c56:	e061      	b.n	8018d1c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8018c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c5a:	685b      	ldr	r3, [r3, #4]
 8018c5c:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8018c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c60:	889b      	ldrh	r3, [r3, #4]
 8018c62:	b29a      	uxth	r2, r3
 8018c64:	697b      	ldr	r3, [r7, #20]
 8018c66:	889b      	ldrh	r3, [r3, #4]
 8018c68:	b29b      	uxth	r3, r3
 8018c6a:	429a      	cmp	r2, r3
 8018c6c:	d232      	bcs.n	8018cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c72:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d01f      	beq.n	8018cba <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c7c:	889b      	ldrh	r3, [r3, #4]
 8018c7e:	b29a      	uxth	r2, r3
 8018c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c82:	88db      	ldrh	r3, [r3, #6]
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	429a      	cmp	r2, r3
 8018c88:	f0c0 80e3 	bcc.w	8018e52 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8018c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c8e:	88db      	ldrh	r3, [r3, #6]
 8018c90:	b29a      	uxth	r2, r3
 8018c92:	697b      	ldr	r3, [r7, #20]
 8018c94:	889b      	ldrh	r3, [r3, #4]
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	429a      	cmp	r2, r3
 8018c9a:	f200 80da 	bhi.w	8018e52 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca0:	68ba      	ldr	r2, [r7, #8]
 8018ca2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca6:	88db      	ldrh	r3, [r3, #6]
 8018ca8:	b29a      	uxth	r2, r3
 8018caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cac:	889b      	ldrh	r3, [r3, #4]
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	d037      	beq.n	8018d24 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018cb8:	e034      	b.n	8018d24 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8018cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cbc:	88db      	ldrh	r3, [r3, #6]
 8018cbe:	b29a      	uxth	r2, r3
 8018cc0:	697b      	ldr	r3, [r7, #20]
 8018cc2:	889b      	ldrh	r3, [r3, #4]
 8018cc4:	b29b      	uxth	r3, r3
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	f200 80c5 	bhi.w	8018e56 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	68ba      	ldr	r2, [r7, #8]
 8018cd0:	605a      	str	r2, [r3, #4]
      break;
 8018cd2:	e027      	b.n	8018d24 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8018cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cd6:	889b      	ldrh	r3, [r3, #4]
 8018cd8:	b29a      	uxth	r2, r3
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	889b      	ldrh	r3, [r3, #4]
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	f000 80ba 	beq.w	8018e5a <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ce8:	889b      	ldrh	r3, [r3, #4]
 8018cea:	b29a      	uxth	r2, r3
 8018cec:	697b      	ldr	r3, [r7, #20]
 8018cee:	88db      	ldrh	r3, [r3, #6]
 8018cf0:	b29b      	uxth	r3, r3
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	f0c0 80b3 	bcc.w	8018e5e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d009      	beq.n	8018d12 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8018cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d00:	88db      	ldrh	r3, [r3, #6]
 8018d02:	b29a      	uxth	r2, r3
 8018d04:	697b      	ldr	r3, [r7, #20]
 8018d06:	889b      	ldrh	r3, [r3, #4]
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	d001      	beq.n	8018d12 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018d0e:	2300      	movs	r3, #0
 8018d10:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018d12:	697b      	ldr	r3, [r7, #20]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d19a      	bne.n	8018c58 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8018d22:	e000      	b.n	8018d26 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8018d24:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d12d      	bne.n	8018d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8018d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d01c      	beq.n	8018d6c <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d34:	88db      	ldrh	r3, [r3, #6]
 8018d36:	b29a      	uxth	r2, r3
 8018d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d3a:	889b      	ldrh	r3, [r3, #4]
 8018d3c:	b29b      	uxth	r3, r3
 8018d3e:	429a      	cmp	r2, r3
 8018d40:	d906      	bls.n	8018d50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8018d42:	4b51      	ldr	r3, [pc, #324]	; (8018e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018d44:	f240 12ab 	movw	r2, #427	; 0x1ab
 8018d48:	4950      	ldr	r1, [pc, #320]	; (8018e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018d4a:	4851      	ldr	r0, [pc, #324]	; (8018e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018d4c:	f001 fc9c 	bl	801a688 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d52:	68ba      	ldr	r2, [r7, #8]
 8018d54:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d58:	88db      	ldrh	r3, [r3, #6]
 8018d5a:	b29a      	uxth	r2, r3
 8018d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d5e:	889b      	ldrh	r3, [r3, #4]
 8018d60:	b29b      	uxth	r3, r3
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d010      	beq.n	8018d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8018d66:	2300      	movs	r3, #0
 8018d68:	623b      	str	r3, [r7, #32]
 8018d6a:	e00d      	b.n	8018d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	685b      	ldr	r3, [r3, #4]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d006      	beq.n	8018d82 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8018d74:	4b44      	ldr	r3, [pc, #272]	; (8018e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018d76:	f240 12b3 	movw	r2, #435	; 0x1b3
 8018d7a:	4946      	ldr	r1, [pc, #280]	; (8018e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018d7c:	4844      	ldr	r0, [pc, #272]	; (8018e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018d7e:	f001 fc83 	bl	801a688 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	68ba      	ldr	r2, [r7, #8]
 8018d86:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d105      	bne.n	8018d9a <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	7f9b      	ldrb	r3, [r3, #30]
 8018d92:	f003 0301 	and.w	r3, r3, #1
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d059      	beq.n	8018e4e <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8018d9a:	6a3b      	ldr	r3, [r7, #32]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d04f      	beq.n	8018e40 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	685b      	ldr	r3, [r3, #4]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d006      	beq.n	8018db6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	685b      	ldr	r3, [r3, #4]
 8018dac:	685b      	ldr	r3, [r3, #4]
 8018dae:	889b      	ldrh	r3, [r3, #4]
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d002      	beq.n	8018dbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018db6:	2300      	movs	r3, #0
 8018db8:	623b      	str	r3, [r7, #32]
 8018dba:	e041      	b.n	8018e40 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dbe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018dc6:	e012      	b.n	8018dee <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8018dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dca:	685b      	ldr	r3, [r3, #4]
 8018dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dd0:	88db      	ldrh	r3, [r3, #6]
 8018dd2:	b29a      	uxth	r2, r3
 8018dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dd6:	889b      	ldrh	r3, [r3, #4]
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	429a      	cmp	r2, r3
 8018ddc:	d002      	beq.n	8018de4 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8018dde:	2300      	movs	r3, #0
 8018de0:	623b      	str	r3, [r7, #32]
            break;
 8018de2:	e007      	b.n	8018df4 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8018de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018de6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d1e9      	bne.n	8018dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018df4:	6a3b      	ldr	r3, [r7, #32]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d022      	beq.n	8018e40 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018dfa:	68fb      	ldr	r3, [r7, #12]
 8018dfc:	685b      	ldr	r3, [r3, #4]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d106      	bne.n	8018e10 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8018e02:	4b21      	ldr	r3, [pc, #132]	; (8018e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018e04:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8018e08:	4923      	ldr	r1, [pc, #140]	; (8018e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018e0a:	4821      	ldr	r0, [pc, #132]	; (8018e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018e0c:	f001 fc3c 	bl	801a688 <iprintf>
          LWIP_ASSERT("sanity check",
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	685b      	ldr	r3, [r3, #4]
 8018e14:	685b      	ldr	r3, [r3, #4]
 8018e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018e18:	429a      	cmp	r2, r3
 8018e1a:	d106      	bne.n	8018e2a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8018e1c:	4b1a      	ldr	r3, [pc, #104]	; (8018e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018e1e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8018e22:	491d      	ldr	r1, [pc, #116]	; (8018e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018e24:	481a      	ldr	r0, [pc, #104]	; (8018e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018e26:	f001 fc2f 	bl	801a688 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d006      	beq.n	8018e40 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8018e32:	4b15      	ldr	r3, [pc, #84]	; (8018e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8018e34:	f240 12d7 	movw	r2, #471	; 0x1d7
 8018e38:	4918      	ldr	r1, [pc, #96]	; (8018e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018e3a:	4815      	ldr	r0, [pc, #84]	; (8018e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018e3c:	f001 fc24 	bl	801a688 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018e40:	6a3b      	ldr	r3, [r7, #32]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	bf14      	ite	ne
 8018e46:	2301      	movne	r3, #1
 8018e48:	2300      	moveq	r3, #0
 8018e4a:	b2db      	uxtb	r3, r3
 8018e4c:	e018      	b.n	8018e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018e4e:	2300      	movs	r3, #0
 8018e50:	e016      	b.n	8018e80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 8018e52:	bf00      	nop
 8018e54:	e004      	b.n	8018e60 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8018e56:	bf00      	nop
 8018e58:	e002      	b.n	8018e60 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8018e5a:	bf00      	nop
 8018e5c:	e000      	b.n	8018e60 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8018e5e:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8018e60:	68b8      	ldr	r0, [r7, #8]
 8018e62:	f7f8 f96d 	bl	8011140 <pbuf_clen>
 8018e66:	4603      	mov	r3, r0
 8018e68:	461a      	mov	r2, r3
 8018e6a:	4b0d      	ldr	r3, [pc, #52]	; (8018ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018e6c:	881b      	ldrh	r3, [r3, #0]
 8018e6e:	1a9b      	subs	r3, r3, r2
 8018e70:	b29a      	uxth	r2, r3
 8018e72:	4b0b      	ldr	r3, [pc, #44]	; (8018ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018e74:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8018e76:	68b8      	ldr	r0, [r7, #8]
 8018e78:	f7f8 f8c8 	bl	801100c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018e7c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8018e80:	4618      	mov	r0, r3
 8018e82:	3730      	adds	r7, #48	; 0x30
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}
 8018e88:	0801de18 	.word	0x0801de18
 8018e8c:	0801def4 	.word	0x0801def4
 8018e90:	0801de60 	.word	0x0801de60
 8018e94:	0801df14 	.word	0x0801df14
 8018e98:	0801df4c 	.word	0x0801df4c
 8018e9c:	0801df5c 	.word	0x0801df5c
 8018ea0:	20005228 	.word	0x20005228

08018ea4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b08e      	sub	sp, #56	; 0x38
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	685b      	ldr	r3, [r3, #4]
 8018eb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8018eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eb4:	781b      	ldrb	r3, [r3, #0]
 8018eb6:	f003 030f 	and.w	r3, r3, #15
 8018eba:	009b      	lsls	r3, r3, #2
 8018ebc:	2b14      	cmp	r3, #20
 8018ebe:	f040 8131 	bne.w	8019124 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8018ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ec4:	88db      	ldrh	r3, [r3, #6]
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7f6 fe3d 	bl	800fb48 <lwip_htons>
 8018ece:	4603      	mov	r3, r0
 8018ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	00db      	lsls	r3, r3, #3
 8018ed8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8018eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018edc:	885b      	ldrh	r3, [r3, #2]
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7f6 fe31 	bl	800fb48 <lwip_htons>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	461a      	mov	r2, r3
 8018eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eec:	781b      	ldrb	r3, [r3, #0]
 8018eee:	b29b      	uxth	r3, r3
 8018ef0:	f003 030f 	and.w	r3, r3, #15
 8018ef4:	b29b      	uxth	r3, r3
 8018ef6:	009b      	lsls	r3, r3, #2
 8018ef8:	b29b      	uxth	r3, r3
 8018efa:	1ad3      	subs	r3, r2, r3
 8018efc:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f7f8 f91e 	bl	8011140 <pbuf_clen>
 8018f04:	4603      	mov	r3, r0
 8018f06:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018f08:	4b8e      	ldr	r3, [pc, #568]	; (8019144 <ip4_reass+0x2a0>)
 8018f0a:	881b      	ldrh	r3, [r3, #0]
 8018f0c:	461a      	mov	r2, r3
 8018f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f10:	4413      	add	r3, r2
 8018f12:	2b0a      	cmp	r3, #10
 8018f14:	dd10      	ble.n	8018f38 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f18:	4619      	mov	r1, r3
 8018f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f1c:	f7ff fd8e 	bl	8018a3c <ip_reass_remove_oldest_datagram>
 8018f20:	4603      	mov	r3, r0
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	f000 8100 	beq.w	8019128 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018f28:	4b86      	ldr	r3, [pc, #536]	; (8019144 <ip4_reass+0x2a0>)
 8018f2a:	881b      	ldrh	r3, [r3, #0]
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f30:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018f32:	2b0a      	cmp	r3, #10
 8018f34:	f300 80f8 	bgt.w	8019128 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018f38:	4b83      	ldr	r3, [pc, #524]	; (8019148 <ip4_reass+0x2a4>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8018f3e:	e015      	b.n	8018f6c <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f42:	695a      	ldr	r2, [r3, #20]
 8018f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f46:	68db      	ldr	r3, [r3, #12]
 8018f48:	429a      	cmp	r2, r3
 8018f4a:	d10c      	bne.n	8018f66 <ip4_reass+0xc2>
 8018f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f4e:	699a      	ldr	r2, [r3, #24]
 8018f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f52:	691b      	ldr	r3, [r3, #16]
 8018f54:	429a      	cmp	r2, r3
 8018f56:	d106      	bne.n	8018f66 <ip4_reass+0xc2>
 8018f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f5a:	899a      	ldrh	r2, [r3, #12]
 8018f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f5e:	889b      	ldrh	r3, [r3, #4]
 8018f60:	b29b      	uxth	r3, r3
 8018f62:	429a      	cmp	r2, r3
 8018f64:	d006      	beq.n	8018f74 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8018f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d1e6      	bne.n	8018f40 <ip4_reass+0x9c>
 8018f72:	e000      	b.n	8018f76 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018f74:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d109      	bne.n	8018f90 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018f7e:	4619      	mov	r1, r3
 8018f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f82:	f7ff fdbd 	bl	8018b00 <ip_reass_enqueue_new_datagram>
 8018f86:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	d11c      	bne.n	8018fc8 <ip4_reass+0x124>
      goto nullreturn;
 8018f8e:	e0d0      	b.n	8019132 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f92:	88db      	ldrh	r3, [r3, #6]
 8018f94:	b29b      	uxth	r3, r3
 8018f96:	4618      	mov	r0, r3
 8018f98:	f7f6 fdd6 	bl	800fb48 <lwip_htons>
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d110      	bne.n	8018fc8 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa8:	89db      	ldrh	r3, [r3, #14]
 8018faa:	4618      	mov	r0, r3
 8018fac:	f7f6 fdcc 	bl	800fb48 <lwip_htons>
 8018fb0:	4603      	mov	r3, r0
 8018fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d006      	beq.n	8018fc8 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fbc:	3308      	adds	r3, #8
 8018fbe:	2214      	movs	r2, #20
 8018fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f001 fa6e 	bl	801a4a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fca:	88db      	ldrh	r3, [r3, #6]
 8018fcc:	b29b      	uxth	r3, r3
 8018fce:	f003 0320 	and.w	r3, r3, #32
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	bf0c      	ite	eq
 8018fd6:	2301      	moveq	r3, #1
 8018fd8:	2300      	movne	r3, #0
 8018fda:	b2db      	uxtb	r3, r3
 8018fdc:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018fde:	69fb      	ldr	r3, [r7, #28]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	d00e      	beq.n	8019002 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8018fe4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018fe8:	4413      	add	r3, r2
 8018fea:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018fec:	8b7a      	ldrh	r2, [r7, #26]
 8018fee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018ff0:	429a      	cmp	r2, r3
 8018ff2:	f0c0 809b 	bcc.w	801912c <ip4_reass+0x288>
 8018ff6:	8b7b      	ldrh	r3, [r7, #26]
 8018ff8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018ffc:	4293      	cmp	r3, r2
 8018ffe:	f200 8095 	bhi.w	801912c <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019002:	69fa      	ldr	r2, [r7, #28]
 8019004:	6879      	ldr	r1, [r7, #4]
 8019006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019008:	f7ff fde2 	bl	8018bd0 <ip_reass_chain_frag_into_datagram_and_validate>
 801900c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801900e:	697b      	ldr	r3, [r7, #20]
 8019010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019014:	f000 808c 	beq.w	8019130 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019018:	4b4a      	ldr	r3, [pc, #296]	; (8019144 <ip4_reass+0x2a0>)
 801901a:	881a      	ldrh	r2, [r3, #0]
 801901c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801901e:	4413      	add	r3, r2
 8019020:	b29a      	uxth	r2, r3
 8019022:	4b48      	ldr	r3, [pc, #288]	; (8019144 <ip4_reass+0x2a0>)
 8019024:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019026:	69fb      	ldr	r3, [r7, #28]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d00d      	beq.n	8019048 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801902c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801902e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019030:	4413      	add	r3, r2
 8019032:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019036:	8a7a      	ldrh	r2, [r7, #18]
 8019038:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801903c:	7f9b      	ldrb	r3, [r3, #30]
 801903e:	f043 0301 	orr.w	r3, r3, #1
 8019042:	b2da      	uxtb	r2, r3
 8019044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019046:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019048:	697b      	ldr	r3, [r7, #20]
 801904a:	2b01      	cmp	r3, #1
 801904c:	d168      	bne.n	8019120 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801904e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019050:	8b9b      	ldrh	r3, [r3, #28]
 8019052:	3314      	adds	r3, #20
 8019054:	b29a      	uxth	r2, r3
 8019056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019058:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801905c:	685b      	ldr	r3, [r3, #4]
 801905e:	685b      	ldr	r3, [r3, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8019064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019066:	685b      	ldr	r3, [r3, #4]
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801906e:	3308      	adds	r3, #8
 8019070:	2214      	movs	r2, #20
 8019072:	4619      	mov	r1, r3
 8019074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019076:	f001 fa15 	bl	801a4a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801907c:	8b9b      	ldrh	r3, [r3, #28]
 801907e:	4618      	mov	r0, r3
 8019080:	f7f6 fd62 	bl	800fb48 <lwip_htons>
 8019084:	4603      	mov	r3, r0
 8019086:	461a      	mov	r2, r3
 8019088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801908a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801908e:	2200      	movs	r2, #0
 8019090:	719a      	strb	r2, [r3, #6]
 8019092:	2200      	movs	r2, #0
 8019094:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019098:	2200      	movs	r2, #0
 801909a:	729a      	strb	r2, [r3, #10]
 801909c:	2200      	movs	r2, #0
 801909e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80190a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80190a6:	e00e      	b.n	80190c6 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80190a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190aa:	685b      	ldr	r3, [r3, #4]
 80190ac:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80190ae:	f06f 0113 	mvn.w	r1, #19
 80190b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80190b4:	f7f7 ff86 	bl	8010fc4 <pbuf_header>
      pbuf_cat(p, r);
 80190b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80190ba:	6878      	ldr	r0, [r7, #4]
 80190bc:	f7f8 f87e 	bl	80111bc <pbuf_cat>
      r = iprh->next_pbuf;
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80190c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d1ed      	bne.n	80190a8 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80190cc:	4b1e      	ldr	r3, [pc, #120]	; (8019148 <ip4_reass+0x2a4>)
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190d2:	429a      	cmp	r2, r3
 80190d4:	d102      	bne.n	80190dc <ip4_reass+0x238>
      ipr_prev = NULL;
 80190d6:	2300      	movs	r3, #0
 80190d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80190da:	e010      	b.n	80190fe <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80190dc:	4b1a      	ldr	r3, [pc, #104]	; (8019148 <ip4_reass+0x2a4>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80190e2:	e007      	b.n	80190f4 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80190e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80190ea:	429a      	cmp	r2, r3
 80190ec:	d006      	beq.n	80190fc <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80190ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80190f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d1f4      	bne.n	80190e4 <ip4_reass+0x240>
 80190fa:	e000      	b.n	80190fe <ip4_reass+0x25a>
          break;
 80190fc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80190fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019102:	f7ff fd37 	bl	8018b74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8019106:	6878      	ldr	r0, [r7, #4]
 8019108:	f7f8 f81a 	bl	8011140 <pbuf_clen>
 801910c:	4603      	mov	r3, r0
 801910e:	461a      	mov	r2, r3
 8019110:	4b0c      	ldr	r3, [pc, #48]	; (8019144 <ip4_reass+0x2a0>)
 8019112:	881b      	ldrh	r3, [r3, #0]
 8019114:	1a9b      	subs	r3, r3, r2
 8019116:	b29a      	uxth	r2, r3
 8019118:	4b0a      	ldr	r3, [pc, #40]	; (8019144 <ip4_reass+0x2a0>)
 801911a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	e00c      	b.n	801913a <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019120:	2300      	movs	r3, #0
 8019122:	e00a      	b.n	801913a <ip4_reass+0x296>
    goto nullreturn;
 8019124:	bf00      	nop
 8019126:	e004      	b.n	8019132 <ip4_reass+0x28e>
      goto nullreturn;
 8019128:	bf00      	nop
 801912a:	e002      	b.n	8019132 <ip4_reass+0x28e>
      goto nullreturn;
 801912c:	bf00      	nop
 801912e:	e000      	b.n	8019132 <ip4_reass+0x28e>
    goto nullreturn;
 8019130:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f7f7 ff6a 	bl	801100c <pbuf_free>
  return NULL;
 8019138:	2300      	movs	r3, #0
}
 801913a:	4618      	mov	r0, r3
 801913c:	3738      	adds	r7, #56	; 0x38
 801913e:	46bd      	mov	sp, r7
 8019140:	bd80      	pop	{r7, pc}
 8019142:	bf00      	nop
 8019144:	20005228 	.word	0x20005228
 8019148:	20005224 	.word	0x20005224

0801914c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801914c:	b580      	push	{r7, lr}
 801914e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8019150:	2005      	movs	r0, #5
 8019152:	f7f7 f94f 	bl	80103f4 <memp_malloc>
 8019156:	4603      	mov	r3, r0
}
 8019158:	4618      	mov	r0, r3
 801915a:	bd80      	pop	{r7, pc}

0801915c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b082      	sub	sp, #8
 8019160:	af00      	add	r7, sp, #0
 8019162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d106      	bne.n	8019178 <ip_frag_free_pbuf_custom_ref+0x1c>
 801916a:	4b07      	ldr	r3, [pc, #28]	; (8019188 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801916c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8019170:	4906      	ldr	r1, [pc, #24]	; (801918c <ip_frag_free_pbuf_custom_ref+0x30>)
 8019172:	4807      	ldr	r0, [pc, #28]	; (8019190 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019174:	f001 fa88 	bl	801a688 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019178:	6879      	ldr	r1, [r7, #4]
 801917a:	2005      	movs	r0, #5
 801917c:	f7f7 f98c 	bl	8010498 <memp_free>
}
 8019180:	bf00      	nop
 8019182:	3708      	adds	r7, #8
 8019184:	46bd      	mov	sp, r7
 8019186:	bd80      	pop	{r7, pc}
 8019188:	0801de18 	.word	0x0801de18
 801918c:	0801df80 	.word	0x0801df80
 8019190:	0801de60 	.word	0x0801de60

08019194 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019194:	b580      	push	{r7, lr}
 8019196:	b084      	sub	sp, #16
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d106      	bne.n	80191b4 <ipfrag_free_pbuf_custom+0x20>
 80191a6:	4b11      	ldr	r3, [pc, #68]	; (80191ec <ipfrag_free_pbuf_custom+0x58>)
 80191a8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80191ac:	4910      	ldr	r1, [pc, #64]	; (80191f0 <ipfrag_free_pbuf_custom+0x5c>)
 80191ae:	4811      	ldr	r0, [pc, #68]	; (80191f4 <ipfrag_free_pbuf_custom+0x60>)
 80191b0:	f001 fa6a 	bl	801a688 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80191b4:	68fa      	ldr	r2, [r7, #12]
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	429a      	cmp	r2, r3
 80191ba:	d006      	beq.n	80191ca <ipfrag_free_pbuf_custom+0x36>
 80191bc:	4b0b      	ldr	r3, [pc, #44]	; (80191ec <ipfrag_free_pbuf_custom+0x58>)
 80191be:	f240 22b9 	movw	r2, #697	; 0x2b9
 80191c2:	490d      	ldr	r1, [pc, #52]	; (80191f8 <ipfrag_free_pbuf_custom+0x64>)
 80191c4:	480b      	ldr	r0, [pc, #44]	; (80191f4 <ipfrag_free_pbuf_custom+0x60>)
 80191c6:	f001 fa5f 	bl	801a688 <iprintf>
  if (pcr->original != NULL) {
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	695b      	ldr	r3, [r3, #20]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d004      	beq.n	80191dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	695b      	ldr	r3, [r3, #20]
 80191d6:	4618      	mov	r0, r3
 80191d8:	f7f7 ff18 	bl	801100c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80191dc:	68f8      	ldr	r0, [r7, #12]
 80191de:	f7ff ffbd 	bl	801915c <ip_frag_free_pbuf_custom_ref>
}
 80191e2:	bf00      	nop
 80191e4:	3710      	adds	r7, #16
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}
 80191ea:	bf00      	nop
 80191ec:	0801de18 	.word	0x0801de18
 80191f0:	0801df8c 	.word	0x0801df8c
 80191f4:	0801de60 	.word	0x0801de60
 80191f8:	0801df98 	.word	0x0801df98

080191fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80191fc:	b580      	push	{r7, lr}
 80191fe:	b092      	sub	sp, #72	; 0x48
 8019200:	af02      	add	r7, sp, #8
 8019202:	60f8      	str	r0, [r7, #12]
 8019204:	60b9      	str	r1, [r7, #8]
 8019206:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019208:	2300      	movs	r3, #0
 801920a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801920c:	68bb      	ldr	r3, [r7, #8]
 801920e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019210:	3b14      	subs	r3, #20
 8019212:	2b00      	cmp	r3, #0
 8019214:	da00      	bge.n	8019218 <ip4_frag+0x1c>
 8019216:	3307      	adds	r3, #7
 8019218:	10db      	asrs	r3, r3, #3
 801921a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801921c:	2314      	movs	r3, #20
 801921e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	685b      	ldr	r3, [r3, #4]
 8019224:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8019226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019228:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	f003 030f 	and.w	r3, r3, #15
 8019232:	009b      	lsls	r3, r3, #2
 8019234:	2b14      	cmp	r3, #20
 8019236:	d009      	beq.n	801924c <ip4_frag+0x50>
 8019238:	4b7a      	ldr	r3, [pc, #488]	; (8019424 <ip4_frag+0x228>)
 801923a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801923e:	497a      	ldr	r1, [pc, #488]	; (8019428 <ip4_frag+0x22c>)
 8019240:	487a      	ldr	r0, [pc, #488]	; (801942c <ip4_frag+0x230>)
 8019242:	f001 fa21 	bl	801a688 <iprintf>
 8019246:	f06f 0305 	mvn.w	r3, #5
 801924a:	e0e6      	b.n	801941a <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801924c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801924e:	88db      	ldrh	r3, [r3, #6]
 8019250:	b29b      	uxth	r3, r3
 8019252:	4618      	mov	r0, r3
 8019254:	f7f6 fc78 	bl	800fb48 <lwip_htons>
 8019258:	4603      	mov	r3, r0
 801925a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801925c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801925e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019262:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8019264:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801926a:	2b00      	cmp	r3, #0
 801926c:	d009      	beq.n	8019282 <ip4_frag+0x86>
 801926e:	4b6d      	ldr	r3, [pc, #436]	; (8019424 <ip4_frag+0x228>)
 8019270:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019274:	496e      	ldr	r1, [pc, #440]	; (8019430 <ip4_frag+0x234>)
 8019276:	486d      	ldr	r0, [pc, #436]	; (801942c <ip4_frag+0x230>)
 8019278:	f001 fa06 	bl	801a688 <iprintf>
 801927c:	f06f 0305 	mvn.w	r3, #5
 8019280:	e0cb      	b.n	801941a <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	891b      	ldrh	r3, [r3, #8]
 8019286:	3b14      	subs	r3, #20
 8019288:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801928a:	e0bd      	b.n	8019408 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801928c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801928e:	00da      	lsls	r2, r3, #3
 8019290:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019292:	4293      	cmp	r3, r2
 8019294:	bfa8      	it	ge
 8019296:	4613      	movge	r3, r2
 8019298:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801929a:	2200      	movs	r2, #0
 801929c:	2114      	movs	r1, #20
 801929e:	2002      	movs	r0, #2
 80192a0:	f7f7 fb3c 	bl	801091c <pbuf_alloc>
 80192a4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80192a6:	6a3b      	ldr	r3, [r7, #32]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	f000 80b3 	beq.w	8019414 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	895b      	ldrh	r3, [r3, #10]
 80192b2:	2b13      	cmp	r3, #19
 80192b4:	d806      	bhi.n	80192c4 <ip4_frag+0xc8>
 80192b6:	4b5b      	ldr	r3, [pc, #364]	; (8019424 <ip4_frag+0x228>)
 80192b8:	f44f 7242 	mov.w	r2, #776	; 0x308
 80192bc:	495d      	ldr	r1, [pc, #372]	; (8019434 <ip4_frag+0x238>)
 80192be:	485b      	ldr	r0, [pc, #364]	; (801942c <ip4_frag+0x230>)
 80192c0:	f001 f9e2 	bl	801a688 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80192c4:	6a3b      	ldr	r3, [r7, #32]
 80192c6:	685b      	ldr	r3, [r3, #4]
 80192c8:	2214      	movs	r2, #20
 80192ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80192cc:	4618      	mov	r0, r3
 80192ce:	f001 f8e9 	bl	801a4a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80192d2:	6a3b      	ldr	r3, [r7, #32]
 80192d4:	685b      	ldr	r3, [r3, #4]
 80192d6:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80192d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80192da:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80192dc:	e04f      	b.n	801937e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	895a      	ldrh	r2, [r3, #10]
 80192e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80192e4:	1ad3      	subs	r3, r2, r3
 80192e6:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80192e8:	8b7a      	ldrh	r2, [r7, #26]
 80192ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192ec:	4293      	cmp	r3, r2
 80192ee:	bf28      	it	cs
 80192f0:	4613      	movcs	r3, r2
 80192f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80192f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d105      	bne.n	8019306 <ip4_frag+0x10a>
        poff = 0;
 80192fa:	2300      	movs	r3, #0
 80192fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80192fe:	68fb      	ldr	r3, [r7, #12]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	60fb      	str	r3, [r7, #12]
        continue;
 8019304:	e03b      	b.n	801937e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019306:	f7ff ff21 	bl	801914c <ip_frag_alloc_pbuf_custom_ref>
 801930a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801930c:	697b      	ldr	r3, [r7, #20]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d103      	bne.n	801931a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8019312:	6a38      	ldr	r0, [r7, #32]
 8019314:	f7f7 fe7a 	bl	801100c <pbuf_free>
        goto memerr;
 8019318:	e07d      	b.n	8019416 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801931a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019322:	4413      	add	r3, r2
 8019324:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8019326:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019328:	9201      	str	r2, [sp, #4]
 801932a:	9300      	str	r3, [sp, #0]
 801932c:	4603      	mov	r3, r0
 801932e:	2202      	movs	r2, #2
 8019330:	2004      	movs	r0, #4
 8019332:	f7f7 fc8d 	bl	8010c50 <pbuf_alloced_custom>
 8019336:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8019338:	693b      	ldr	r3, [r7, #16]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d106      	bne.n	801934c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801933e:	6978      	ldr	r0, [r7, #20]
 8019340:	f7ff ff0c 	bl	801915c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019344:	6a38      	ldr	r0, [r7, #32]
 8019346:	f7f7 fe61 	bl	801100c <pbuf_free>
        goto memerr;
 801934a:	e064      	b.n	8019416 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 801934c:	68f8      	ldr	r0, [r7, #12]
 801934e:	f7f7 ff0d 	bl	801116c <pbuf_ref>
      pcr->original = p;
 8019352:	697b      	ldr	r3, [r7, #20]
 8019354:	68fa      	ldr	r2, [r7, #12]
 8019356:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	4a37      	ldr	r2, [pc, #220]	; (8019438 <ip4_frag+0x23c>)
 801935c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801935e:	6939      	ldr	r1, [r7, #16]
 8019360:	6a38      	ldr	r0, [r7, #32]
 8019362:	f7f7 ff2b 	bl	80111bc <pbuf_cat>
      left_to_copy -= newpbuflen;
 8019366:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8019368:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801936a:	1ad3      	subs	r3, r2, r3
 801936c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801936e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019370:	2b00      	cmp	r3, #0
 8019372:	d004      	beq.n	801937e <ip4_frag+0x182>
        poff = 0;
 8019374:	2300      	movs	r3, #0
 8019376:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801937e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019380:	2b00      	cmp	r3, #0
 8019382:	d1ac      	bne.n	80192de <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8019384:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019386:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019388:	4413      	add	r3, r2
 801938a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8019390:	f1a3 0213 	sub.w	r2, r3, #19
 8019394:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019396:	429a      	cmp	r2, r3
 8019398:	bfcc      	ite	gt
 801939a:	2301      	movgt	r3, #1
 801939c:	2300      	movle	r3, #0
 801939e:	b2db      	uxtb	r3, r3
 80193a0:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80193a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80193a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80193a8:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80193aa:	69fb      	ldr	r3, [r7, #28]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d103      	bne.n	80193b8 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 80193b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80193b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80193b6:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80193b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7f6 fbc4 	bl	800fb48 <lwip_htons>
 80193c0:	4603      	mov	r3, r0
 80193c2:	461a      	mov	r2, r3
 80193c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80193c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80193ca:	3314      	adds	r3, #20
 80193cc:	b29b      	uxth	r3, r3
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7f6 fbba 	bl	800fb48 <lwip_htons>
 80193d4:	4603      	mov	r3, r0
 80193d6:	461a      	mov	r2, r3
 80193d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193da:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80193dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193de:	2200      	movs	r2, #0
 80193e0:	729a      	strb	r2, [r3, #10]
 80193e2:	2200      	movs	r2, #0
 80193e4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80193e6:	68bb      	ldr	r3, [r7, #8]
 80193e8:	695b      	ldr	r3, [r3, #20]
 80193ea:	687a      	ldr	r2, [r7, #4]
 80193ec:	6a39      	ldr	r1, [r7, #32]
 80193ee:	68b8      	ldr	r0, [r7, #8]
 80193f0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80193f2:	6a38      	ldr	r0, [r7, #32]
 80193f4:	f7f7 fe0a 	bl	801100c <pbuf_free>
    left -= fragsize;
 80193f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80193fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80193fc:	1ad3      	subs	r3, r2, r3
 80193fe:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8019400:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8019402:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019404:	4413      	add	r3, r2
 8019406:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8019408:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801940a:	2b00      	cmp	r3, #0
 801940c:	f47f af3e 	bne.w	801928c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019410:	2300      	movs	r3, #0
 8019412:	e002      	b.n	801941a <ip4_frag+0x21e>
      goto memerr;
 8019414:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019416:	f04f 33ff 	mov.w	r3, #4294967295
}
 801941a:	4618      	mov	r0, r3
 801941c:	3740      	adds	r7, #64	; 0x40
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}
 8019422:	bf00      	nop
 8019424:	0801de18 	.word	0x0801de18
 8019428:	0801dfa4 	.word	0x0801dfa4
 801942c:	0801de60 	.word	0x0801de60
 8019430:	0801dfcc 	.word	0x0801dfcc
 8019434:	0801dfe8 	.word	0x0801dfe8
 8019438:	08019195 	.word	0x08019195

0801943c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b086      	sub	sp, #24
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
 8019444:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8019446:	230e      	movs	r3, #14
 8019448:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	895b      	ldrh	r3, [r3, #10]
 801944e:	2b0e      	cmp	r3, #14
 8019450:	d977      	bls.n	8019542 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	685b      	ldr	r3, [r3, #4]
 8019456:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019458:	693b      	ldr	r3, [r7, #16]
 801945a:	7b1a      	ldrb	r2, [r3, #12]
 801945c:	7b5b      	ldrb	r3, [r3, #13]
 801945e:	021b      	lsls	r3, r3, #8
 8019460:	4313      	orrs	r3, r2
 8019462:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	781b      	ldrb	r3, [r3, #0]
 8019468:	f003 0301 	and.w	r3, r3, #1
 801946c:	2b00      	cmp	r3, #0
 801946e:	d023      	beq.n	80194b8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	781b      	ldrb	r3, [r3, #0]
 8019474:	2b01      	cmp	r3, #1
 8019476:	d10f      	bne.n	8019498 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019478:	693b      	ldr	r3, [r7, #16]
 801947a:	785b      	ldrb	r3, [r3, #1]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d11b      	bne.n	80194b8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019480:	693b      	ldr	r3, [r7, #16]
 8019482:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019484:	2b5e      	cmp	r3, #94	; 0x5e
 8019486:	d117      	bne.n	80194b8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	7b5b      	ldrb	r3, [r3, #13]
 801948c:	f043 0310 	orr.w	r3, r3, #16
 8019490:	b2da      	uxtb	r2, r3
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	735a      	strb	r2, [r3, #13]
 8019496:	e00f      	b.n	80194b8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019498:	693b      	ldr	r3, [r7, #16]
 801949a:	2206      	movs	r2, #6
 801949c:	4931      	ldr	r1, [pc, #196]	; (8019564 <ethernet_input+0x128>)
 801949e:	4618      	mov	r0, r3
 80194a0:	f000 fff0 	bl	801a484 <memcmp>
 80194a4:	4603      	mov	r3, r0
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d106      	bne.n	80194b8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	7b5b      	ldrb	r3, [r3, #13]
 80194ae:	f043 0308 	orr.w	r3, r3, #8
 80194b2:	b2da      	uxtb	r2, r3
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80194b8:	89fb      	ldrh	r3, [r7, #14]
 80194ba:	2b08      	cmp	r3, #8
 80194bc:	d003      	beq.n	80194c6 <ethernet_input+0x8a>
 80194be:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80194c2:	d01e      	beq.n	8019502 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80194c4:	e046      	b.n	8019554 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80194cc:	f003 0308 	and.w	r3, r3, #8
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d038      	beq.n	8019546 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	895b      	ldrh	r3, [r3, #10]
 80194d8:	461a      	mov	r2, r3
 80194da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80194de:	429a      	cmp	r2, r3
 80194e0:	db33      	blt.n	801954a <ethernet_input+0x10e>
 80194e2:	8afb      	ldrh	r3, [r7, #22]
 80194e4:	425b      	negs	r3, r3
 80194e6:	b29b      	uxth	r3, r3
 80194e8:	b21b      	sxth	r3, r3
 80194ea:	4619      	mov	r1, r3
 80194ec:	6878      	ldr	r0, [r7, #4]
 80194ee:	f7f7 fd69 	bl	8010fc4 <pbuf_header>
 80194f2:	4603      	mov	r3, r0
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d128      	bne.n	801954a <ethernet_input+0x10e>
        ip4_input(p, netif);
 80194f8:	6839      	ldr	r1, [r7, #0]
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f7fe ff7c 	bl	80183f8 <ip4_input>
      break;
 8019500:	e01d      	b.n	801953e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019502:	683b      	ldr	r3, [r7, #0]
 8019504:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019508:	f003 0308 	and.w	r3, r3, #8
 801950c:	2b00      	cmp	r3, #0
 801950e:	d01e      	beq.n	801954e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	895b      	ldrh	r3, [r3, #10]
 8019514:	461a      	mov	r2, r3
 8019516:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801951a:	429a      	cmp	r2, r3
 801951c:	db19      	blt.n	8019552 <ethernet_input+0x116>
 801951e:	8afb      	ldrh	r3, [r7, #22]
 8019520:	425b      	negs	r3, r3
 8019522:	b29b      	uxth	r3, r3
 8019524:	b21b      	sxth	r3, r3
 8019526:	4619      	mov	r1, r3
 8019528:	6878      	ldr	r0, [r7, #4]
 801952a:	f7f7 fd4b 	bl	8010fc4 <pbuf_header>
 801952e:	4603      	mov	r3, r0
 8019530:	2b00      	cmp	r3, #0
 8019532:	d10e      	bne.n	8019552 <ethernet_input+0x116>
        etharp_input(p, netif);
 8019534:	6839      	ldr	r1, [r7, #0]
 8019536:	6878      	ldr	r0, [r7, #4]
 8019538:	f7fe f94c 	bl	80177d4 <etharp_input>
      break;
 801953c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801953e:	2300      	movs	r3, #0
 8019540:	e00c      	b.n	801955c <ethernet_input+0x120>
    goto free_and_return;
 8019542:	bf00      	nop
 8019544:	e006      	b.n	8019554 <ethernet_input+0x118>
        goto free_and_return;
 8019546:	bf00      	nop
 8019548:	e004      	b.n	8019554 <ethernet_input+0x118>
        goto free_and_return;
 801954a:	bf00      	nop
 801954c:	e002      	b.n	8019554 <ethernet_input+0x118>
        goto free_and_return;
 801954e:	bf00      	nop
 8019550:	e000      	b.n	8019554 <ethernet_input+0x118>
        goto free_and_return;
 8019552:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019554:	6878      	ldr	r0, [r7, #4]
 8019556:	f7f7 fd59 	bl	801100c <pbuf_free>
  return ERR_OK;
 801955a:	2300      	movs	r3, #0
}
 801955c:	4618      	mov	r0, r3
 801955e:	3718      	adds	r7, #24
 8019560:	46bd      	mov	sp, r7
 8019562:	bd80      	pop	{r7, pc}
 8019564:	0801ecd8 	.word	0x0801ecd8

08019568 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8019568:	b580      	push	{r7, lr}
 801956a:	b086      	sub	sp, #24
 801956c:	af00      	add	r7, sp, #0
 801956e:	60f8      	str	r0, [r7, #12]
 8019570:	60b9      	str	r1, [r7, #8]
 8019572:	607a      	str	r2, [r7, #4]
 8019574:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019576:	8c3b      	ldrh	r3, [r7, #32]
 8019578:	4618      	mov	r0, r3
 801957a:	f7f6 fae5 	bl	800fb48 <lwip_htons>
 801957e:	4603      	mov	r3, r0
 8019580:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8019582:	210e      	movs	r1, #14
 8019584:	68b8      	ldr	r0, [r7, #8]
 8019586:	f7f7 fd1d 	bl	8010fc4 <pbuf_header>
 801958a:	4603      	mov	r3, r0
 801958c:	2b00      	cmp	r3, #0
 801958e:	d125      	bne.n	80195dc <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8019590:	68bb      	ldr	r3, [r7, #8]
 8019592:	685b      	ldr	r3, [r3, #4]
 8019594:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019596:	693b      	ldr	r3, [r7, #16]
 8019598:	8afa      	ldrh	r2, [r7, #22]
 801959a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801959c:	693b      	ldr	r3, [r7, #16]
 801959e:	2206      	movs	r2, #6
 80195a0:	6839      	ldr	r1, [r7, #0]
 80195a2:	4618      	mov	r0, r3
 80195a4:	f000 ff7e 	bl	801a4a4 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80195a8:	693b      	ldr	r3, [r7, #16]
 80195aa:	3306      	adds	r3, #6
 80195ac:	2206      	movs	r2, #6
 80195ae:	6879      	ldr	r1, [r7, #4]
 80195b0:	4618      	mov	r0, r3
 80195b2:	f000 ff77 	bl	801a4a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80195bc:	2b06      	cmp	r3, #6
 80195be:	d006      	beq.n	80195ce <ethernet_output+0x66>
 80195c0:	4b0a      	ldr	r3, [pc, #40]	; (80195ec <ethernet_output+0x84>)
 80195c2:	f240 122b 	movw	r2, #299	; 0x12b
 80195c6:	490a      	ldr	r1, [pc, #40]	; (80195f0 <ethernet_output+0x88>)
 80195c8:	480a      	ldr	r0, [pc, #40]	; (80195f4 <ethernet_output+0x8c>)
 80195ca:	f001 f85d 	bl	801a688 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	699b      	ldr	r3, [r3, #24]
 80195d2:	68b9      	ldr	r1, [r7, #8]
 80195d4:	68f8      	ldr	r0, [r7, #12]
 80195d6:	4798      	blx	r3
 80195d8:	4603      	mov	r3, r0
 80195da:	e002      	b.n	80195e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80195dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80195de:	f06f 0301 	mvn.w	r3, #1
}
 80195e2:	4618      	mov	r0, r3
 80195e4:	3718      	adds	r7, #24
 80195e6:	46bd      	mov	sp, r7
 80195e8:	bd80      	pop	{r7, pc}
 80195ea:	bf00      	nop
 80195ec:	0801e008 	.word	0x0801e008
 80195f0:	0801e040 	.word	0x0801e040
 80195f4:	0801e074 	.word	0x0801e074

080195f8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	b086      	sub	sp, #24
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]
 8019600:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019602:	683b      	ldr	r3, [r7, #0]
 8019604:	60bb      	str	r3, [r7, #8]
 8019606:	2304      	movs	r3, #4
 8019608:	60fb      	str	r3, [r7, #12]
 801960a:	2300      	movs	r3, #0
 801960c:	613b      	str	r3, [r7, #16]
 801960e:	2300      	movs	r3, #0
 8019610:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019612:	f107 0308 	add.w	r3, r7, #8
 8019616:	2100      	movs	r1, #0
 8019618:	4618      	mov	r0, r3
 801961a:	f7f0 fd81 	bl	800a120 <osMessageCreate>
 801961e:	4602      	mov	r2, r0
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d102      	bne.n	8019632 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801962c:	f04f 33ff 	mov.w	r3, #4294967295
 8019630:	e000      	b.n	8019634 <sys_mbox_new+0x3c>

  return ERR_OK;
 8019632:	2300      	movs	r3, #0
}
 8019634:	4618      	mov	r0, r3
 8019636:	3718      	adds	r7, #24
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}

0801963c <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801963c:	b580      	push	{r7, lr}
 801963e:	b082      	sub	sp, #8
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
 8019644:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8019646:	bf00      	nop
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	6839      	ldr	r1, [r7, #0]
 801964e:	f04f 32ff 	mov.w	r2, #4294967295
 8019652:	4618      	mov	r0, r3
 8019654:	f7f0 fd8c 	bl	800a170 <osMessagePut>
 8019658:	4603      	mov	r3, r0
 801965a:	2b00      	cmp	r3, #0
 801965c:	d1f4      	bne.n	8019648 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801965e:	bf00      	nop
 8019660:	bf00      	nop
 8019662:	3708      	adds	r7, #8
 8019664:	46bd      	mov	sp, r7
 8019666:	bd80      	pop	{r7, pc}

08019668 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b084      	sub	sp, #16
 801966c:	af00      	add	r7, sp, #0
 801966e:	6078      	str	r0, [r7, #4]
 8019670:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	6839      	ldr	r1, [r7, #0]
 8019678:	2200      	movs	r2, #0
 801967a:	4618      	mov	r0, r3
 801967c:	f7f0 fd78 	bl	800a170 <osMessagePut>
 8019680:	4603      	mov	r3, r0
 8019682:	2b00      	cmp	r3, #0
 8019684:	d102      	bne.n	801968c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019686:	2300      	movs	r3, #0
 8019688:	73fb      	strb	r3, [r7, #15]
 801968a:	e001      	b.n	8019690 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801968c:	23ff      	movs	r3, #255	; 0xff
 801968e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019690:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019694:	4618      	mov	r0, r3
 8019696:	3710      	adds	r7, #16
 8019698:	46bd      	mov	sp, r7
 801969a:	bd80      	pop	{r7, pc}

0801969c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801969c:	b580      	push	{r7, lr}
 801969e:	b08c      	sub	sp, #48	; 0x30
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	61f8      	str	r0, [r7, #28]
 80196a4:	61b9      	str	r1, [r7, #24]
 80196a6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80196a8:	f7f0 fb78 	bl	8009d9c <osKernelSysTick>
 80196ac:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80196ae:	697b      	ldr	r3, [r7, #20]
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d017      	beq.n	80196e4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80196b4:	69fb      	ldr	r3, [r7, #28]
 80196b6:	6819      	ldr	r1, [r3, #0]
 80196b8:	f107 0320 	add.w	r3, r7, #32
 80196bc:	697a      	ldr	r2, [r7, #20]
 80196be:	4618      	mov	r0, r3
 80196c0:	f7f0 fd96 	bl	800a1f0 <osMessageGet>

    if(event.status == osEventMessage)
 80196c4:	6a3b      	ldr	r3, [r7, #32]
 80196c6:	2b10      	cmp	r3, #16
 80196c8:	d109      	bne.n	80196de <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80196ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196cc:	461a      	mov	r2, r3
 80196ce:	69bb      	ldr	r3, [r7, #24]
 80196d0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80196d2:	f7f0 fb63 	bl	8009d9c <osKernelSysTick>
 80196d6:	4602      	mov	r2, r0
 80196d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196da:	1ad3      	subs	r3, r2, r3
 80196dc:	e019      	b.n	8019712 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80196de:	f04f 33ff 	mov.w	r3, #4294967295
 80196e2:	e016      	b.n	8019712 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80196e4:	69fb      	ldr	r3, [r7, #28]
 80196e6:	6819      	ldr	r1, [r3, #0]
 80196e8:	463b      	mov	r3, r7
 80196ea:	f04f 32ff 	mov.w	r2, #4294967295
 80196ee:	4618      	mov	r0, r3
 80196f0:	f7f0 fd7e 	bl	800a1f0 <osMessageGet>
 80196f4:	f107 0320 	add.w	r3, r7, #32
 80196f8:	463a      	mov	r2, r7
 80196fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80196fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019702:	461a      	mov	r2, r3
 8019704:	69bb      	ldr	r3, [r7, #24]
 8019706:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019708:	f7f0 fb48 	bl	8009d9c <osKernelSysTick>
 801970c:	4602      	mov	r2, r0
 801970e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019710:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019712:	4618      	mov	r0, r3
 8019714:	3730      	adds	r7, #48	; 0x30
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}

0801971a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801971a:	b480      	push	{r7}
 801971c:	b083      	sub	sp, #12
 801971e:	af00      	add	r7, sp, #0
 8019720:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d101      	bne.n	801972e <sys_mbox_valid+0x14>
    return 0;
 801972a:	2300      	movs	r3, #0
 801972c:	e000      	b.n	8019730 <sys_mbox_valid+0x16>
  else
    return 1;
 801972e:	2301      	movs	r3, #1
}
 8019730:	4618      	mov	r0, r3
 8019732:	370c      	adds	r7, #12
 8019734:	46bd      	mov	sp, r7
 8019736:	bc80      	pop	{r7}
 8019738:	4770      	bx	lr
	...

0801973c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019740:	4803      	ldr	r0, [pc, #12]	; (8019750 <sys_init+0x14>)
 8019742:	f7f0 fb9b 	bl	8009e7c <osMutexCreate>
 8019746:	4603      	mov	r3, r0
 8019748:	4a02      	ldr	r2, [pc, #8]	; (8019754 <sys_init+0x18>)
 801974a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801974c:	bf00      	nop
 801974e:	bd80      	pop	{r7, pc}
 8019750:	0801ece8 	.word	0x0801ece8
 8019754:	2000bef4 	.word	0x2000bef4

08019758 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019758:	b580      	push	{r7, lr}
 801975a:	b084      	sub	sp, #16
 801975c:	af00      	add	r7, sp, #0
 801975e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019760:	2300      	movs	r3, #0
 8019762:	60bb      	str	r3, [r7, #8]
 8019764:	2300      	movs	r3, #0
 8019766:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019768:	f107 0308 	add.w	r3, r7, #8
 801976c:	4618      	mov	r0, r3
 801976e:	f7f0 fb85 	bl	8009e7c <osMutexCreate>
 8019772:	4602      	mov	r2, r0
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d102      	bne.n	8019786 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019780:	f04f 33ff 	mov.w	r3, #4294967295
 8019784:	e000      	b.n	8019788 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019786:	2300      	movs	r3, #0
}
 8019788:	4618      	mov	r0, r3
 801978a:	3710      	adds	r7, #16
 801978c:	46bd      	mov	sp, r7
 801978e:	bd80      	pop	{r7, pc}

08019790 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b082      	sub	sp, #8
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	f04f 31ff 	mov.w	r1, #4294967295
 80197a0:	4618      	mov	r0, r3
 80197a2:	f7f0 fb83 	bl	8009eac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80197a6:	bf00      	nop
 80197a8:	3708      	adds	r7, #8
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}

080197ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80197ae:	b580      	push	{r7, lr}
 80197b0:	b082      	sub	sp, #8
 80197b2:	af00      	add	r7, sp, #0
 80197b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	4618      	mov	r0, r3
 80197bc:	f7f0 fbc4 	bl	8009f48 <osMutexRelease>
}
 80197c0:	bf00      	nop
 80197c2:	3708      	adds	r7, #8
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}

080197c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b08c      	sub	sp, #48	; 0x30
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	607a      	str	r2, [r7, #4]
 80197d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80197d6:	f107 0314 	add.w	r3, r7, #20
 80197da:	2200      	movs	r2, #0
 80197dc:	601a      	str	r2, [r3, #0]
 80197de:	605a      	str	r2, [r3, #4]
 80197e0:	609a      	str	r2, [r3, #8]
 80197e2:	60da      	str	r2, [r3, #12]
 80197e4:	611a      	str	r2, [r3, #16]
 80197e6:	615a      	str	r2, [r3, #20]
 80197e8:	619a      	str	r2, [r3, #24]
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	617b      	str	r3, [r7, #20]
 80197ee:	68bb      	ldr	r3, [r7, #8]
 80197f0:	61bb      	str	r3, [r7, #24]
 80197f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80197f4:	b21b      	sxth	r3, r3
 80197f6:	83bb      	strh	r3, [r7, #28]
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80197fc:	f107 0314 	add.w	r3, r7, #20
 8019800:	6879      	ldr	r1, [r7, #4]
 8019802:	4618      	mov	r0, r3
 8019804:	f7f0 fada 	bl	8009dbc <osThreadCreate>
 8019808:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801980a:	4618      	mov	r0, r3
 801980c:	3730      	adds	r7, #48	; 0x30
 801980e:	46bd      	mov	sp, r7
 8019810:	bd80      	pop	{r7, pc}
	...

08019814 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019814:	b580      	push	{r7, lr}
 8019816:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019818:	4b04      	ldr	r3, [pc, #16]	; (801982c <sys_arch_protect+0x18>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	f04f 31ff 	mov.w	r1, #4294967295
 8019820:	4618      	mov	r0, r3
 8019822:	f7f0 fb43 	bl	8009eac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019826:	2301      	movs	r3, #1
}
 8019828:	4618      	mov	r0, r3
 801982a:	bd80      	pop	{r7, pc}
 801982c:	2000bef4 	.word	0x2000bef4

08019830 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b082      	sub	sp, #8
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019838:	4b04      	ldr	r3, [pc, #16]	; (801984c <sys_arch_unprotect+0x1c>)
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	4618      	mov	r0, r3
 801983e:	f7f0 fb83 	bl	8009f48 <osMutexRelease>
}
 8019842:	bf00      	nop
 8019844:	3708      	adds	r7, #8
 8019846:	46bd      	mov	sp, r7
 8019848:	bd80      	pop	{r7, pc}
 801984a:	bf00      	nop
 801984c:	2000bef4 	.word	0x2000bef4

08019850 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019850:	b580      	push	{r7, lr}
 8019852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019854:	2200      	movs	r2, #0
 8019856:	4912      	ldr	r1, [pc, #72]	; (80198a0 <MX_USB_DEVICE_Init+0x50>)
 8019858:	4812      	ldr	r0, [pc, #72]	; (80198a4 <MX_USB_DEVICE_Init+0x54>)
 801985a:	f7ef f99d 	bl	8008b98 <USBD_Init>
 801985e:	4603      	mov	r3, r0
 8019860:	2b00      	cmp	r3, #0
 8019862:	d001      	beq.n	8019868 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019864:	f7e7 fd2a 	bl	80012bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019868:	490f      	ldr	r1, [pc, #60]	; (80198a8 <MX_USB_DEVICE_Init+0x58>)
 801986a:	480e      	ldr	r0, [pc, #56]	; (80198a4 <MX_USB_DEVICE_Init+0x54>)
 801986c:	f7ef f9bf 	bl	8008bee <USBD_RegisterClass>
 8019870:	4603      	mov	r3, r0
 8019872:	2b00      	cmp	r3, #0
 8019874:	d001      	beq.n	801987a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019876:	f7e7 fd21 	bl	80012bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801987a:	490c      	ldr	r1, [pc, #48]	; (80198ac <MX_USB_DEVICE_Init+0x5c>)
 801987c:	4809      	ldr	r0, [pc, #36]	; (80198a4 <MX_USB_DEVICE_Init+0x54>)
 801987e:	f7ef f91f 	bl	8008ac0 <USBD_CDC_RegisterInterface>
 8019882:	4603      	mov	r3, r0
 8019884:	2b00      	cmp	r3, #0
 8019886:	d001      	beq.n	801988c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019888:	f7e7 fd18 	bl	80012bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801988c:	4805      	ldr	r0, [pc, #20]	; (80198a4 <MX_USB_DEVICE_Init+0x54>)
 801988e:	f7ef f9c7 	bl	8008c20 <USBD_Start>
 8019892:	4603      	mov	r3, r0
 8019894:	2b00      	cmp	r3, #0
 8019896:	d001      	beq.n	801989c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019898:	f7e7 fd10 	bl	80012bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801989c:	bf00      	nop
 801989e:	bd80      	pop	{r7, pc}
 80198a0:	2000016c 	.word	0x2000016c
 80198a4:	2000bef8 	.word	0x2000bef8
 80198a8:	20000044 	.word	0x20000044
 80198ac:	20000154 	.word	0x20000154

080198b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80198b0:	b580      	push	{r7, lr}
 80198b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80198b4:	2200      	movs	r2, #0
 80198b6:	4905      	ldr	r1, [pc, #20]	; (80198cc <CDC_Init_FS+0x1c>)
 80198b8:	4805      	ldr	r0, [pc, #20]	; (80198d0 <CDC_Init_FS+0x20>)
 80198ba:	f7ef f917 	bl	8008aec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80198be:	4905      	ldr	r1, [pc, #20]	; (80198d4 <CDC_Init_FS+0x24>)
 80198c0:	4803      	ldr	r0, [pc, #12]	; (80198d0 <CDC_Init_FS+0x20>)
 80198c2:	f7ef f92c 	bl	8008b1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80198c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80198c8:	4618      	mov	r0, r3
 80198ca:	bd80      	pop	{r7, pc}
 80198cc:	2000c9bc 	.word	0x2000c9bc
 80198d0:	2000bef8 	.word	0x2000bef8
 80198d4:	2000c1bc 	.word	0x2000c1bc

080198d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80198d8:	b480      	push	{r7}
 80198da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80198dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80198de:	4618      	mov	r0, r3
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bc80      	pop	{r7}
 80198e4:	4770      	bx	lr
	...

080198e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80198e8:	b480      	push	{r7}
 80198ea:	b083      	sub	sp, #12
 80198ec:	af00      	add	r7, sp, #0
 80198ee:	4603      	mov	r3, r0
 80198f0:	6039      	str	r1, [r7, #0]
 80198f2:	71fb      	strb	r3, [r7, #7]
 80198f4:	4613      	mov	r3, r2
 80198f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80198f8:	79fb      	ldrb	r3, [r7, #7]
 80198fa:	2b23      	cmp	r3, #35	; 0x23
 80198fc:	d85c      	bhi.n	80199b8 <CDC_Control_FS+0xd0>
 80198fe:	a201      	add	r2, pc, #4	; (adr r2, 8019904 <CDC_Control_FS+0x1c>)
 8019900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019904:	080199b9 	.word	0x080199b9
 8019908:	080199b9 	.word	0x080199b9
 801990c:	080199b9 	.word	0x080199b9
 8019910:	080199b9 	.word	0x080199b9
 8019914:	080199b9 	.word	0x080199b9
 8019918:	080199b9 	.word	0x080199b9
 801991c:	080199b9 	.word	0x080199b9
 8019920:	080199b9 	.word	0x080199b9
 8019924:	080199b9 	.word	0x080199b9
 8019928:	080199b9 	.word	0x080199b9
 801992c:	080199b9 	.word	0x080199b9
 8019930:	080199b9 	.word	0x080199b9
 8019934:	080199b9 	.word	0x080199b9
 8019938:	080199b9 	.word	0x080199b9
 801993c:	080199b9 	.word	0x080199b9
 8019940:	080199b9 	.word	0x080199b9
 8019944:	080199b9 	.word	0x080199b9
 8019948:	080199b9 	.word	0x080199b9
 801994c:	080199b9 	.word	0x080199b9
 8019950:	080199b9 	.word	0x080199b9
 8019954:	080199b9 	.word	0x080199b9
 8019958:	080199b9 	.word	0x080199b9
 801995c:	080199b9 	.word	0x080199b9
 8019960:	080199b9 	.word	0x080199b9
 8019964:	080199b9 	.word	0x080199b9
 8019968:	080199b9 	.word	0x080199b9
 801996c:	080199b9 	.word	0x080199b9
 8019970:	080199b9 	.word	0x080199b9
 8019974:	080199b9 	.word	0x080199b9
 8019978:	080199b9 	.word	0x080199b9
 801997c:	080199b9 	.word	0x080199b9
 8019980:	080199b9 	.word	0x080199b9
 8019984:	08019995 	.word	0x08019995
 8019988:	080199a7 	.word	0x080199a7
 801998c:	080199b9 	.word	0x080199b9
 8019990:	080199b9 	.word	0x080199b9
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
        = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
    	 memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8019994:	4b0c      	ldr	r3, [pc, #48]	; (80199c8 <CDC_Control_FS+0xe0>)
 8019996:	683a      	ldr	r2, [r7, #0]
 8019998:	6810      	ldr	r0, [r2, #0]
 801999a:	6018      	str	r0, [r3, #0]
 801999c:	8891      	ldrh	r1, [r2, #4]
 801999e:	7992      	ldrb	r2, [r2, #6]
 80199a0:	8099      	strh	r1, [r3, #4]
 80199a2:	719a      	strb	r2, [r3, #6]
    break;
 80199a4:	e009      	b.n	80199ba <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80199a6:	683b      	ldr	r3, [r7, #0]
 80199a8:	4a07      	ldr	r2, [pc, #28]	; (80199c8 <CDC_Control_FS+0xe0>)
 80199aa:	6810      	ldr	r0, [r2, #0]
 80199ac:	6018      	str	r0, [r3, #0]
 80199ae:	8891      	ldrh	r1, [r2, #4]
 80199b0:	7992      	ldrb	r2, [r2, #6]
 80199b2:	8099      	strh	r1, [r3, #4]
 80199b4:	719a      	strb	r2, [r3, #6]
    break;
 80199b6:	e000      	b.n	80199ba <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80199b8:	bf00      	nop
  }

  return (USBD_OK);
 80199ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80199bc:	4618      	mov	r0, r3
 80199be:	370c      	adds	r7, #12
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bc80      	pop	{r7}
 80199c4:	4770      	bx	lr
 80199c6:	bf00      	nop
 80199c8:	20000164 	.word	0x20000164

080199cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b082      	sub	sp, #8
 80199d0:	af00      	add	r7, sp, #0
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80199d6:	6879      	ldr	r1, [r7, #4]
 80199d8:	4805      	ldr	r0, [pc, #20]	; (80199f0 <CDC_Receive_FS+0x24>)
 80199da:	f7ef f8a0 	bl	8008b1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80199de:	4804      	ldr	r0, [pc, #16]	; (80199f0 <CDC_Receive_FS+0x24>)
 80199e0:	f7ef f8b0 	bl	8008b44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80199e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80199e6:	4618      	mov	r0, r3
 80199e8:	3708      	adds	r7, #8
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}
 80199ee:	bf00      	nop
 80199f0:	2000bef8 	.word	0x2000bef8

080199f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80199f4:	b480      	push	{r7}
 80199f6:	b083      	sub	sp, #12
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	4603      	mov	r3, r0
 80199fc:	6039      	str	r1, [r7, #0]
 80199fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	2212      	movs	r2, #18
 8019a04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019a06:	4b03      	ldr	r3, [pc, #12]	; (8019a14 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	370c      	adds	r7, #12
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	bc80      	pop	{r7}
 8019a10:	4770      	bx	lr
 8019a12:	bf00      	nop
 8019a14:	20000188 	.word	0x20000188

08019a18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b083      	sub	sp, #12
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	4603      	mov	r3, r0
 8019a20:	6039      	str	r1, [r7, #0]
 8019a22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019a24:	683b      	ldr	r3, [r7, #0]
 8019a26:	2204      	movs	r2, #4
 8019a28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019a2a:	4b03      	ldr	r3, [pc, #12]	; (8019a38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	370c      	adds	r7, #12
 8019a30:	46bd      	mov	sp, r7
 8019a32:	bc80      	pop	{r7}
 8019a34:	4770      	bx	lr
 8019a36:	bf00      	nop
 8019a38:	2000019c 	.word	0x2000019c

08019a3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b082      	sub	sp, #8
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	4603      	mov	r3, r0
 8019a44:	6039      	str	r1, [r7, #0]
 8019a46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019a48:	79fb      	ldrb	r3, [r7, #7]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d105      	bne.n	8019a5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019a4e:	683a      	ldr	r2, [r7, #0]
 8019a50:	4907      	ldr	r1, [pc, #28]	; (8019a70 <USBD_FS_ProductStrDescriptor+0x34>)
 8019a52:	4808      	ldr	r0, [pc, #32]	; (8019a74 <USBD_FS_ProductStrDescriptor+0x38>)
 8019a54:	f7f0 f896 	bl	8009b84 <USBD_GetString>
 8019a58:	e004      	b.n	8019a64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019a5a:	683a      	ldr	r2, [r7, #0]
 8019a5c:	4904      	ldr	r1, [pc, #16]	; (8019a70 <USBD_FS_ProductStrDescriptor+0x34>)
 8019a5e:	4805      	ldr	r0, [pc, #20]	; (8019a74 <USBD_FS_ProductStrDescriptor+0x38>)
 8019a60:	f7f0 f890 	bl	8009b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019a64:	4b02      	ldr	r3, [pc, #8]	; (8019a70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019a66:	4618      	mov	r0, r3
 8019a68:	3708      	adds	r7, #8
 8019a6a:	46bd      	mov	sp, r7
 8019a6c:	bd80      	pop	{r7, pc}
 8019a6e:	bf00      	nop
 8019a70:	2000d1bc 	.word	0x2000d1bc
 8019a74:	0801e09c 	.word	0x0801e09c

08019a78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b082      	sub	sp, #8
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	4603      	mov	r3, r0
 8019a80:	6039      	str	r1, [r7, #0]
 8019a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019a84:	683a      	ldr	r2, [r7, #0]
 8019a86:	4904      	ldr	r1, [pc, #16]	; (8019a98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019a88:	4804      	ldr	r0, [pc, #16]	; (8019a9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019a8a:	f7f0 f87b 	bl	8009b84 <USBD_GetString>
  return USBD_StrDesc;
 8019a8e:	4b02      	ldr	r3, [pc, #8]	; (8019a98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019a90:	4618      	mov	r0, r3
 8019a92:	3708      	adds	r7, #8
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bd80      	pop	{r7, pc}
 8019a98:	2000d1bc 	.word	0x2000d1bc
 8019a9c:	0801e0b4 	.word	0x0801e0b4

08019aa0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b082      	sub	sp, #8
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	6039      	str	r1, [r7, #0]
 8019aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	221a      	movs	r2, #26
 8019ab0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019ab2:	f000 f843 	bl	8019b3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019ab6:	4b02      	ldr	r3, [pc, #8]	; (8019ac0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019ab8:	4618      	mov	r0, r3
 8019aba:	3708      	adds	r7, #8
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}
 8019ac0:	200001a0 	.word	0x200001a0

08019ac4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b082      	sub	sp, #8
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	4603      	mov	r3, r0
 8019acc:	6039      	str	r1, [r7, #0]
 8019ace:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019ad0:	79fb      	ldrb	r3, [r7, #7]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d105      	bne.n	8019ae2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019ad6:	683a      	ldr	r2, [r7, #0]
 8019ad8:	4907      	ldr	r1, [pc, #28]	; (8019af8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019ada:	4808      	ldr	r0, [pc, #32]	; (8019afc <USBD_FS_ConfigStrDescriptor+0x38>)
 8019adc:	f7f0 f852 	bl	8009b84 <USBD_GetString>
 8019ae0:	e004      	b.n	8019aec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019ae2:	683a      	ldr	r2, [r7, #0]
 8019ae4:	4904      	ldr	r1, [pc, #16]	; (8019af8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019ae6:	4805      	ldr	r0, [pc, #20]	; (8019afc <USBD_FS_ConfigStrDescriptor+0x38>)
 8019ae8:	f7f0 f84c 	bl	8009b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019aec:	4b02      	ldr	r3, [pc, #8]	; (8019af8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	3708      	adds	r7, #8
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	bf00      	nop
 8019af8:	2000d1bc 	.word	0x2000d1bc
 8019afc:	0801e0c8 	.word	0x0801e0c8

08019b00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019b00:	b580      	push	{r7, lr}
 8019b02:	b082      	sub	sp, #8
 8019b04:	af00      	add	r7, sp, #0
 8019b06:	4603      	mov	r3, r0
 8019b08:	6039      	str	r1, [r7, #0]
 8019b0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019b0c:	79fb      	ldrb	r3, [r7, #7]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d105      	bne.n	8019b1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b12:	683a      	ldr	r2, [r7, #0]
 8019b14:	4907      	ldr	r1, [pc, #28]	; (8019b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b16:	4808      	ldr	r0, [pc, #32]	; (8019b38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b18:	f7f0 f834 	bl	8009b84 <USBD_GetString>
 8019b1c:	e004      	b.n	8019b28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019b1e:	683a      	ldr	r2, [r7, #0]
 8019b20:	4904      	ldr	r1, [pc, #16]	; (8019b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019b22:	4805      	ldr	r0, [pc, #20]	; (8019b38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019b24:	f7f0 f82e 	bl	8009b84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019b28:	4b02      	ldr	r3, [pc, #8]	; (8019b34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	3708      	adds	r7, #8
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd80      	pop	{r7, pc}
 8019b32:	bf00      	nop
 8019b34:	2000d1bc 	.word	0x2000d1bc
 8019b38:	0801e0d4 	.word	0x0801e0d4

08019b3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	b084      	sub	sp, #16
 8019b40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019b42:	4b0f      	ldr	r3, [pc, #60]	; (8019b80 <Get_SerialNum+0x44>)
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019b48:	4b0e      	ldr	r3, [pc, #56]	; (8019b84 <Get_SerialNum+0x48>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019b4e:	4b0e      	ldr	r3, [pc, #56]	; (8019b88 <Get_SerialNum+0x4c>)
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019b54:	68fa      	ldr	r2, [r7, #12]
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	4413      	add	r3, r2
 8019b5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d009      	beq.n	8019b76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019b62:	2208      	movs	r2, #8
 8019b64:	4909      	ldr	r1, [pc, #36]	; (8019b8c <Get_SerialNum+0x50>)
 8019b66:	68f8      	ldr	r0, [r7, #12]
 8019b68:	f000 f814 	bl	8019b94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019b6c:	2204      	movs	r2, #4
 8019b6e:	4908      	ldr	r1, [pc, #32]	; (8019b90 <Get_SerialNum+0x54>)
 8019b70:	68b8      	ldr	r0, [r7, #8]
 8019b72:	f000 f80f 	bl	8019b94 <IntToUnicode>
  }
}
 8019b76:	bf00      	nop
 8019b78:	3710      	adds	r7, #16
 8019b7a:	46bd      	mov	sp, r7
 8019b7c:	bd80      	pop	{r7, pc}
 8019b7e:	bf00      	nop
 8019b80:	1fff7a10 	.word	0x1fff7a10
 8019b84:	1fff7a14 	.word	0x1fff7a14
 8019b88:	1fff7a18 	.word	0x1fff7a18
 8019b8c:	200001a2 	.word	0x200001a2
 8019b90:	200001b2 	.word	0x200001b2

08019b94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019b94:	b480      	push	{r7}
 8019b96:	b087      	sub	sp, #28
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	60f8      	str	r0, [r7, #12]
 8019b9c:	60b9      	str	r1, [r7, #8]
 8019b9e:	4613      	mov	r3, r2
 8019ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	75fb      	strb	r3, [r7, #23]
 8019baa:	e027      	b.n	8019bfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	0f1b      	lsrs	r3, r3, #28
 8019bb0:	2b09      	cmp	r3, #9
 8019bb2:	d80b      	bhi.n	8019bcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	0f1b      	lsrs	r3, r3, #28
 8019bb8:	b2da      	uxtb	r2, r3
 8019bba:	7dfb      	ldrb	r3, [r7, #23]
 8019bbc:	005b      	lsls	r3, r3, #1
 8019bbe:	4619      	mov	r1, r3
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	440b      	add	r3, r1
 8019bc4:	3230      	adds	r2, #48	; 0x30
 8019bc6:	b2d2      	uxtb	r2, r2
 8019bc8:	701a      	strb	r2, [r3, #0]
 8019bca:	e00a      	b.n	8019be2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	0f1b      	lsrs	r3, r3, #28
 8019bd0:	b2da      	uxtb	r2, r3
 8019bd2:	7dfb      	ldrb	r3, [r7, #23]
 8019bd4:	005b      	lsls	r3, r3, #1
 8019bd6:	4619      	mov	r1, r3
 8019bd8:	68bb      	ldr	r3, [r7, #8]
 8019bda:	440b      	add	r3, r1
 8019bdc:	3237      	adds	r2, #55	; 0x37
 8019bde:	b2d2      	uxtb	r2, r2
 8019be0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	011b      	lsls	r3, r3, #4
 8019be6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019be8:	7dfb      	ldrb	r3, [r7, #23]
 8019bea:	005b      	lsls	r3, r3, #1
 8019bec:	3301      	adds	r3, #1
 8019bee:	68ba      	ldr	r2, [r7, #8]
 8019bf0:	4413      	add	r3, r2
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019bf6:	7dfb      	ldrb	r3, [r7, #23]
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	75fb      	strb	r3, [r7, #23]
 8019bfc:	7dfa      	ldrb	r2, [r7, #23]
 8019bfe:	79fb      	ldrb	r3, [r7, #7]
 8019c00:	429a      	cmp	r2, r3
 8019c02:	d3d3      	bcc.n	8019bac <IntToUnicode+0x18>
  }
}
 8019c04:	bf00      	nop
 8019c06:	bf00      	nop
 8019c08:	371c      	adds	r7, #28
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bc80      	pop	{r7}
 8019c0e:	4770      	bx	lr

08019c10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019c10:	b580      	push	{r7, lr}
 8019c12:	b08a      	sub	sp, #40	; 0x28
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019c18:	f107 0314 	add.w	r3, r7, #20
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	601a      	str	r2, [r3, #0]
 8019c20:	605a      	str	r2, [r3, #4]
 8019c22:	609a      	str	r2, [r3, #8]
 8019c24:	60da      	str	r2, [r3, #12]
 8019c26:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019c30:	d147      	bne.n	8019cc2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019c32:	2300      	movs	r3, #0
 8019c34:	613b      	str	r3, [r7, #16]
 8019c36:	4b25      	ldr	r3, [pc, #148]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c3a:	4a24      	ldr	r2, [pc, #144]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019c3c:	f043 0301 	orr.w	r3, r3, #1
 8019c40:	6313      	str	r3, [r2, #48]	; 0x30
 8019c42:	4b22      	ldr	r3, [pc, #136]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c46:	f003 0301 	and.w	r3, r3, #1
 8019c4a:	613b      	str	r3, [r7, #16]
 8019c4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8019c4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8019c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019c54:	2302      	movs	r3, #2
 8019c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019c58:	2300      	movs	r3, #0
 8019c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019c5c:	2303      	movs	r3, #3
 8019c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019c60:	230a      	movs	r3, #10
 8019c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019c64:	f107 0314 	add.w	r3, r7, #20
 8019c68:	4619      	mov	r1, r3
 8019c6a:	4819      	ldr	r0, [pc, #100]	; (8019cd0 <HAL_PCD_MspInit+0xc0>)
 8019c6c:	f7e9 faf8 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8019c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019c76:	2300      	movs	r3, #0
 8019c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8019c7e:	f107 0314 	add.w	r3, r7, #20
 8019c82:	4619      	mov	r1, r3
 8019c84:	4812      	ldr	r0, [pc, #72]	; (8019cd0 <HAL_PCD_MspInit+0xc0>)
 8019c86:	f7e9 faeb 	bl	8003260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019c8a:	4b10      	ldr	r3, [pc, #64]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c8e:	4a0f      	ldr	r2, [pc, #60]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c94:	6353      	str	r3, [r2, #52]	; 0x34
 8019c96:	2300      	movs	r3, #0
 8019c98:	60fb      	str	r3, [r7, #12]
 8019c9a:	4b0c      	ldr	r3, [pc, #48]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c9e:	4a0b      	ldr	r2, [pc, #44]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8019ca6:	4b09      	ldr	r3, [pc, #36]	; (8019ccc <HAL_PCD_MspInit+0xbc>)
 8019ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019cae:	60fb      	str	r3, [r7, #12]
 8019cb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	2105      	movs	r1, #5
 8019cb6:	2043      	movs	r0, #67	; 0x43
 8019cb8:	f7e8 f935 	bl	8001f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019cbc:	2043      	movs	r0, #67	; 0x43
 8019cbe:	f7e8 f94e 	bl	8001f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019cc2:	bf00      	nop
 8019cc4:	3728      	adds	r7, #40	; 0x28
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	bd80      	pop	{r7, pc}
 8019cca:	bf00      	nop
 8019ccc:	40023800 	.word	0x40023800
 8019cd0:	40020000 	.word	0x40020000

08019cd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b082      	sub	sp, #8
 8019cd8:	af00      	add	r7, sp, #0
 8019cda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019ce8:	4619      	mov	r1, r3
 8019cea:	4610      	mov	r0, r2
 8019cec:	f7ee ffe0 	bl	8008cb0 <USBD_LL_SetupStage>
}
 8019cf0:	bf00      	nop
 8019cf2:	3708      	adds	r7, #8
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	bd80      	pop	{r7, pc}

08019cf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
 8019d00:	460b      	mov	r3, r1
 8019d02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8019d0a:	78fa      	ldrb	r2, [r7, #3]
 8019d0c:	6879      	ldr	r1, [r7, #4]
 8019d0e:	4613      	mov	r3, r2
 8019d10:	00db      	lsls	r3, r3, #3
 8019d12:	1a9b      	subs	r3, r3, r2
 8019d14:	009b      	lsls	r3, r3, #2
 8019d16:	440b      	add	r3, r1
 8019d18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019d1c:	681a      	ldr	r2, [r3, #0]
 8019d1e:	78fb      	ldrb	r3, [r7, #3]
 8019d20:	4619      	mov	r1, r3
 8019d22:	f7ef f812 	bl	8008d4a <USBD_LL_DataOutStage>
}
 8019d26:	bf00      	nop
 8019d28:	3708      	adds	r7, #8
 8019d2a:	46bd      	mov	sp, r7
 8019d2c:	bd80      	pop	{r7, pc}

08019d2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d2e:	b580      	push	{r7, lr}
 8019d30:	b082      	sub	sp, #8
 8019d32:	af00      	add	r7, sp, #0
 8019d34:	6078      	str	r0, [r7, #4]
 8019d36:	460b      	mov	r3, r1
 8019d38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8019d40:	78fa      	ldrb	r2, [r7, #3]
 8019d42:	6879      	ldr	r1, [r7, #4]
 8019d44:	4613      	mov	r3, r2
 8019d46:	00db      	lsls	r3, r3, #3
 8019d48:	1a9b      	subs	r3, r3, r2
 8019d4a:	009b      	lsls	r3, r3, #2
 8019d4c:	440b      	add	r3, r1
 8019d4e:	3348      	adds	r3, #72	; 0x48
 8019d50:	681a      	ldr	r2, [r3, #0]
 8019d52:	78fb      	ldrb	r3, [r7, #3]
 8019d54:	4619      	mov	r1, r3
 8019d56:	f7ef f869 	bl	8008e2c <USBD_LL_DataInStage>
}
 8019d5a:	bf00      	nop
 8019d5c:	3708      	adds	r7, #8
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}

08019d62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d62:	b580      	push	{r7, lr}
 8019d64:	b082      	sub	sp, #8
 8019d66:	af00      	add	r7, sp, #0
 8019d68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019d70:	4618      	mov	r0, r3
 8019d72:	f7ef f979 	bl	8009068 <USBD_LL_SOF>
}
 8019d76:	bf00      	nop
 8019d78:	3708      	adds	r7, #8
 8019d7a:	46bd      	mov	sp, r7
 8019d7c:	bd80      	pop	{r7, pc}

08019d7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019d7e:	b580      	push	{r7, lr}
 8019d80:	b084      	sub	sp, #16
 8019d82:	af00      	add	r7, sp, #0
 8019d84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019d86:	2301      	movs	r3, #1
 8019d88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	68db      	ldr	r3, [r3, #12]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d102      	bne.n	8019d98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019d92:	2300      	movs	r3, #0
 8019d94:	73fb      	strb	r3, [r7, #15]
 8019d96:	e008      	b.n	8019daa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	68db      	ldr	r3, [r3, #12]
 8019d9c:	2b02      	cmp	r3, #2
 8019d9e:	d102      	bne.n	8019da6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019da0:	2301      	movs	r3, #1
 8019da2:	73fb      	strb	r3, [r7, #15]
 8019da4:	e001      	b.n	8019daa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019da6:	f7e7 fa89 	bl	80012bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019db0:	7bfa      	ldrb	r2, [r7, #15]
 8019db2:	4611      	mov	r1, r2
 8019db4:	4618      	mov	r0, r3
 8019db6:	f7ef f91f 	bl	8008ff8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019dc0:	4618      	mov	r0, r3
 8019dc2:	f7ef f8d8 	bl	8008f76 <USBD_LL_Reset>
}
 8019dc6:	bf00      	nop
 8019dc8:	3710      	adds	r7, #16
 8019dca:	46bd      	mov	sp, r7
 8019dcc:	bd80      	pop	{r7, pc}
	...

08019dd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b082      	sub	sp, #8
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7ef f919 	bl	8009016 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	687a      	ldr	r2, [r7, #4]
 8019df0:	6812      	ldr	r2, [r2, #0]
 8019df2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019df6:	f043 0301 	orr.w	r3, r3, #1
 8019dfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6a1b      	ldr	r3, [r3, #32]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d005      	beq.n	8019e10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e04:	4b04      	ldr	r3, [pc, #16]	; (8019e18 <HAL_PCD_SuspendCallback+0x48>)
 8019e06:	691b      	ldr	r3, [r3, #16]
 8019e08:	4a03      	ldr	r2, [pc, #12]	; (8019e18 <HAL_PCD_SuspendCallback+0x48>)
 8019e0a:	f043 0306 	orr.w	r3, r3, #6
 8019e0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019e10:	bf00      	nop
 8019e12:	3708      	adds	r7, #8
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd80      	pop	{r7, pc}
 8019e18:	e000ed00 	.word	0xe000ed00

08019e1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e1c:	b580      	push	{r7, lr}
 8019e1e:	b082      	sub	sp, #8
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	f7ef f907 	bl	800903e <USBD_LL_Resume>
}
 8019e30:	bf00      	nop
 8019e32:	3708      	adds	r7, #8
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}

08019e38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b082      	sub	sp, #8
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
 8019e40:	460b      	mov	r3, r1
 8019e42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019e4a:	78fa      	ldrb	r2, [r7, #3]
 8019e4c:	4611      	mov	r1, r2
 8019e4e:	4618      	mov	r0, r3
 8019e50:	f7ef f930 	bl	80090b4 <USBD_LL_IsoOUTIncomplete>
}
 8019e54:	bf00      	nop
 8019e56:	3708      	adds	r7, #8
 8019e58:	46bd      	mov	sp, r7
 8019e5a:	bd80      	pop	{r7, pc}

08019e5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b082      	sub	sp, #8
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
 8019e64:	460b      	mov	r3, r1
 8019e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019e6e:	78fa      	ldrb	r2, [r7, #3]
 8019e70:	4611      	mov	r1, r2
 8019e72:	4618      	mov	r0, r3
 8019e74:	f7ef f912 	bl	800909c <USBD_LL_IsoINIncomplete>
}
 8019e78:	bf00      	nop
 8019e7a:	3708      	adds	r7, #8
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}

08019e80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e80:	b580      	push	{r7, lr}
 8019e82:	b082      	sub	sp, #8
 8019e84:	af00      	add	r7, sp, #0
 8019e86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f7ef f91c 	bl	80090cc <USBD_LL_DevConnected>
}
 8019e94:	bf00      	nop
 8019e96:	3708      	adds	r7, #8
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}

08019e9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b082      	sub	sp, #8
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7ef f918 	bl	80090e0 <USBD_LL_DevDisconnected>
}
 8019eb0:	bf00      	nop
 8019eb2:	3708      	adds	r7, #8
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd80      	pop	{r7, pc}

08019eb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b082      	sub	sp, #8
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	781b      	ldrb	r3, [r3, #0]
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d139      	bne.n	8019f3c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019ec8:	4a1f      	ldr	r2, [pc, #124]	; (8019f48 <USBD_LL_Init+0x90>)
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	4a1d      	ldr	r2, [pc, #116]	; (8019f48 <USBD_LL_Init+0x90>)
 8019ed4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019ed8:	4b1b      	ldr	r3, [pc, #108]	; (8019f48 <USBD_LL_Init+0x90>)
 8019eda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019ede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019ee0:	4b19      	ldr	r3, [pc, #100]	; (8019f48 <USBD_LL_Init+0x90>)
 8019ee2:	2204      	movs	r2, #4
 8019ee4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019ee6:	4b18      	ldr	r3, [pc, #96]	; (8019f48 <USBD_LL_Init+0x90>)
 8019ee8:	2202      	movs	r2, #2
 8019eea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019eec:	4b16      	ldr	r3, [pc, #88]	; (8019f48 <USBD_LL_Init+0x90>)
 8019eee:	2200      	movs	r2, #0
 8019ef0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019ef2:	4b15      	ldr	r3, [pc, #84]	; (8019f48 <USBD_LL_Init+0x90>)
 8019ef4:	2202      	movs	r2, #2
 8019ef6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019ef8:	4b13      	ldr	r3, [pc, #76]	; (8019f48 <USBD_LL_Init+0x90>)
 8019efa:	2200      	movs	r2, #0
 8019efc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019efe:	4b12      	ldr	r3, [pc, #72]	; (8019f48 <USBD_LL_Init+0x90>)
 8019f00:	2200      	movs	r2, #0
 8019f02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019f04:	4b10      	ldr	r3, [pc, #64]	; (8019f48 <USBD_LL_Init+0x90>)
 8019f06:	2200      	movs	r2, #0
 8019f08:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019f0a:	4b0f      	ldr	r3, [pc, #60]	; (8019f48 <USBD_LL_Init+0x90>)
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019f10:	480d      	ldr	r0, [pc, #52]	; (8019f48 <USBD_LL_Init+0x90>)
 8019f12:	f7e9 ffe7 	bl	8003ee4 <HAL_PCD_Init>
 8019f16:	4603      	mov	r3, r0
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d001      	beq.n	8019f20 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8019f1c:	f7e7 f9ce 	bl	80012bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019f20:	2180      	movs	r1, #128	; 0x80
 8019f22:	4809      	ldr	r0, [pc, #36]	; (8019f48 <USBD_LL_Init+0x90>)
 8019f24:	f7eb f924 	bl	8005170 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019f28:	2240      	movs	r2, #64	; 0x40
 8019f2a:	2100      	movs	r1, #0
 8019f2c:	4806      	ldr	r0, [pc, #24]	; (8019f48 <USBD_LL_Init+0x90>)
 8019f2e:	f7eb f8d9 	bl	80050e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019f32:	2280      	movs	r2, #128	; 0x80
 8019f34:	2101      	movs	r1, #1
 8019f36:	4804      	ldr	r0, [pc, #16]	; (8019f48 <USBD_LL_Init+0x90>)
 8019f38:	f7eb f8d4 	bl	80050e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019f3c:	2300      	movs	r3, #0
}
 8019f3e:	4618      	mov	r0, r3
 8019f40:	3708      	adds	r7, #8
 8019f42:	46bd      	mov	sp, r7
 8019f44:	bd80      	pop	{r7, pc}
 8019f46:	bf00      	nop
 8019f48:	2000d3bc 	.word	0x2000d3bc

08019f4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019f4c:	b580      	push	{r7, lr}
 8019f4e:	b084      	sub	sp, #16
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f54:	2300      	movs	r3, #0
 8019f56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019f58:	2300      	movs	r3, #0
 8019f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019f62:	4618      	mov	r0, r3
 8019f64:	f7ea f8db 	bl	800411e <HAL_PCD_Start>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019f6c:	7bfb      	ldrb	r3, [r7, #15]
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f000 f92e 	bl	801a1d0 <USBD_Get_USB_Status>
 8019f74:	4603      	mov	r3, r0
 8019f76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8019f7a:	4618      	mov	r0, r3
 8019f7c:	3710      	adds	r7, #16
 8019f7e:	46bd      	mov	sp, r7
 8019f80:	bd80      	pop	{r7, pc}

08019f82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019f82:	b580      	push	{r7, lr}
 8019f84:	b084      	sub	sp, #16
 8019f86:	af00      	add	r7, sp, #0
 8019f88:	6078      	str	r0, [r7, #4]
 8019f8a:	4608      	mov	r0, r1
 8019f8c:	4611      	mov	r1, r2
 8019f8e:	461a      	mov	r2, r3
 8019f90:	4603      	mov	r3, r0
 8019f92:	70fb      	strb	r3, [r7, #3]
 8019f94:	460b      	mov	r3, r1
 8019f96:	70bb      	strb	r3, [r7, #2]
 8019f98:	4613      	mov	r3, r2
 8019f9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8019faa:	78bb      	ldrb	r3, [r7, #2]
 8019fac:	883a      	ldrh	r2, [r7, #0]
 8019fae:	78f9      	ldrb	r1, [r7, #3]
 8019fb0:	f7ea fca0 	bl	80048f4 <HAL_PCD_EP_Open>
 8019fb4:	4603      	mov	r3, r0
 8019fb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019fb8:	7bfb      	ldrb	r3, [r7, #15]
 8019fba:	4618      	mov	r0, r3
 8019fbc:	f000 f908 	bl	801a1d0 <USBD_Get_USB_Status>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019fc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	3710      	adds	r7, #16
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}

08019fce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019fce:	b580      	push	{r7, lr}
 8019fd0:	b084      	sub	sp, #16
 8019fd2:	af00      	add	r7, sp, #0
 8019fd4:	6078      	str	r0, [r7, #4]
 8019fd6:	460b      	mov	r3, r1
 8019fd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019fda:	2300      	movs	r3, #0
 8019fdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019fde:	2300      	movs	r3, #0
 8019fe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019fe8:	78fa      	ldrb	r2, [r7, #3]
 8019fea:	4611      	mov	r1, r2
 8019fec:	4618      	mov	r0, r3
 8019fee:	f7ea fce9 	bl	80049c4 <HAL_PCD_EP_Close>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ff6:	7bfb      	ldrb	r3, [r7, #15]
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f000 f8e9 	bl	801a1d0 <USBD_Get_USB_Status>
 8019ffe:	4603      	mov	r3, r0
 801a000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a002:	7bbb      	ldrb	r3, [r7, #14]
}
 801a004:	4618      	mov	r0, r3
 801a006:	3710      	adds	r7, #16
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}

0801a00c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b084      	sub	sp, #16
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
 801a014:	460b      	mov	r3, r1
 801a016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a018:	2300      	movs	r3, #0
 801a01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a01c:	2300      	movs	r3, #0
 801a01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a026:	78fa      	ldrb	r2, [r7, #3]
 801a028:	4611      	mov	r1, r2
 801a02a:	4618      	mov	r0, r3
 801a02c:	f7ea fdc0 	bl	8004bb0 <HAL_PCD_EP_SetStall>
 801a030:	4603      	mov	r3, r0
 801a032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a034:	7bfb      	ldrb	r3, [r7, #15]
 801a036:	4618      	mov	r0, r3
 801a038:	f000 f8ca 	bl	801a1d0 <USBD_Get_USB_Status>
 801a03c:	4603      	mov	r3, r0
 801a03e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a040:	7bbb      	ldrb	r3, [r7, #14]
}
 801a042:	4618      	mov	r0, r3
 801a044:	3710      	adds	r7, #16
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}

0801a04a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a04a:	b580      	push	{r7, lr}
 801a04c:	b084      	sub	sp, #16
 801a04e:	af00      	add	r7, sp, #0
 801a050:	6078      	str	r0, [r7, #4]
 801a052:	460b      	mov	r3, r1
 801a054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a056:	2300      	movs	r3, #0
 801a058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a05a:	2300      	movs	r3, #0
 801a05c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a064:	78fa      	ldrb	r2, [r7, #3]
 801a066:	4611      	mov	r1, r2
 801a068:	4618      	mov	r0, r3
 801a06a:	f7ea fe05 	bl	8004c78 <HAL_PCD_EP_ClrStall>
 801a06e:	4603      	mov	r3, r0
 801a070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a072:	7bfb      	ldrb	r3, [r7, #15]
 801a074:	4618      	mov	r0, r3
 801a076:	f000 f8ab 	bl	801a1d0 <USBD_Get_USB_Status>
 801a07a:	4603      	mov	r3, r0
 801a07c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a07e:	7bbb      	ldrb	r3, [r7, #14]
}
 801a080:	4618      	mov	r0, r3
 801a082:	3710      	adds	r7, #16
 801a084:	46bd      	mov	sp, r7
 801a086:	bd80      	pop	{r7, pc}

0801a088 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a088:	b480      	push	{r7}
 801a08a:	b085      	sub	sp, #20
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
 801a090:	460b      	mov	r3, r1
 801a092:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a09a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a09c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	da0b      	bge.n	801a0bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a0a4:	78fb      	ldrb	r3, [r7, #3]
 801a0a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a0aa:	68f9      	ldr	r1, [r7, #12]
 801a0ac:	4613      	mov	r3, r2
 801a0ae:	00db      	lsls	r3, r3, #3
 801a0b0:	1a9b      	subs	r3, r3, r2
 801a0b2:	009b      	lsls	r3, r3, #2
 801a0b4:	440b      	add	r3, r1
 801a0b6:	333e      	adds	r3, #62	; 0x3e
 801a0b8:	781b      	ldrb	r3, [r3, #0]
 801a0ba:	e00b      	b.n	801a0d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a0bc:	78fb      	ldrb	r3, [r7, #3]
 801a0be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a0c2:	68f9      	ldr	r1, [r7, #12]
 801a0c4:	4613      	mov	r3, r2
 801a0c6:	00db      	lsls	r3, r3, #3
 801a0c8:	1a9b      	subs	r3, r3, r2
 801a0ca:	009b      	lsls	r3, r3, #2
 801a0cc:	440b      	add	r3, r1
 801a0ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a0d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	3714      	adds	r7, #20
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	bc80      	pop	{r7}
 801a0dc:	4770      	bx	lr

0801a0de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a0de:	b580      	push	{r7, lr}
 801a0e0:	b084      	sub	sp, #16
 801a0e2:	af00      	add	r7, sp, #0
 801a0e4:	6078      	str	r0, [r7, #4]
 801a0e6:	460b      	mov	r3, r1
 801a0e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a0f8:	78fa      	ldrb	r2, [r7, #3]
 801a0fa:	4611      	mov	r1, r2
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	f7ea fbd4 	bl	80048aa <HAL_PCD_SetAddress>
 801a102:	4603      	mov	r3, r0
 801a104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a106:	7bfb      	ldrb	r3, [r7, #15]
 801a108:	4618      	mov	r0, r3
 801a10a:	f000 f861 	bl	801a1d0 <USBD_Get_USB_Status>
 801a10e:	4603      	mov	r3, r0
 801a110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a112:	7bbb      	ldrb	r3, [r7, #14]
}
 801a114:	4618      	mov	r0, r3
 801a116:	3710      	adds	r7, #16
 801a118:	46bd      	mov	sp, r7
 801a11a:	bd80      	pop	{r7, pc}

0801a11c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801a11c:	b580      	push	{r7, lr}
 801a11e:	b086      	sub	sp, #24
 801a120:	af00      	add	r7, sp, #0
 801a122:	60f8      	str	r0, [r7, #12]
 801a124:	607a      	str	r2, [r7, #4]
 801a126:	461a      	mov	r2, r3
 801a128:	460b      	mov	r3, r1
 801a12a:	72fb      	strb	r3, [r7, #11]
 801a12c:	4613      	mov	r3, r2
 801a12e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a130:	2300      	movs	r3, #0
 801a132:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a134:	2300      	movs	r3, #0
 801a136:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801a13e:	893b      	ldrh	r3, [r7, #8]
 801a140:	7af9      	ldrb	r1, [r7, #11]
 801a142:	687a      	ldr	r2, [r7, #4]
 801a144:	f7ea fcea 	bl	8004b1c <HAL_PCD_EP_Transmit>
 801a148:	4603      	mov	r3, r0
 801a14a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a14c:	7dfb      	ldrb	r3, [r7, #23]
 801a14e:	4618      	mov	r0, r3
 801a150:	f000 f83e 	bl	801a1d0 <USBD_Get_USB_Status>
 801a154:	4603      	mov	r3, r0
 801a156:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a158:	7dbb      	ldrb	r3, [r7, #22]
}
 801a15a:	4618      	mov	r0, r3
 801a15c:	3718      	adds	r7, #24
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}

0801a162 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801a162:	b580      	push	{r7, lr}
 801a164:	b086      	sub	sp, #24
 801a166:	af00      	add	r7, sp, #0
 801a168:	60f8      	str	r0, [r7, #12]
 801a16a:	607a      	str	r2, [r7, #4]
 801a16c:	461a      	mov	r2, r3
 801a16e:	460b      	mov	r3, r1
 801a170:	72fb      	strb	r3, [r7, #11]
 801a172:	4613      	mov	r3, r2
 801a174:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a176:	2300      	movs	r3, #0
 801a178:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a17a:	2300      	movs	r3, #0
 801a17c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801a184:	893b      	ldrh	r3, [r7, #8]
 801a186:	7af9      	ldrb	r1, [r7, #11]
 801a188:	687a      	ldr	r2, [r7, #4]
 801a18a:	f7ea fc65 	bl	8004a58 <HAL_PCD_EP_Receive>
 801a18e:	4603      	mov	r3, r0
 801a190:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a192:	7dfb      	ldrb	r3, [r7, #23]
 801a194:	4618      	mov	r0, r3
 801a196:	f000 f81b 	bl	801a1d0 <USBD_Get_USB_Status>
 801a19a:	4603      	mov	r3, r0
 801a19c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a19e:	7dbb      	ldrb	r3, [r7, #22]
}
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	3718      	adds	r7, #24
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}

0801a1a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
 801a1b0:	460b      	mov	r3, r1
 801a1b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801a1ba:	78fa      	ldrb	r2, [r7, #3]
 801a1bc:	4611      	mov	r1, r2
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7ea fc95 	bl	8004aee <HAL_PCD_EP_GetRxCount>
 801a1c4:	4603      	mov	r3, r0
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3708      	adds	r7, #8
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bd80      	pop	{r7, pc}
	...

0801a1d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a1d0:	b480      	push	{r7}
 801a1d2:	b085      	sub	sp, #20
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a1de:	79fb      	ldrb	r3, [r7, #7]
 801a1e0:	2b03      	cmp	r3, #3
 801a1e2:	d817      	bhi.n	801a214 <USBD_Get_USB_Status+0x44>
 801a1e4:	a201      	add	r2, pc, #4	; (adr r2, 801a1ec <USBD_Get_USB_Status+0x1c>)
 801a1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1ea:	bf00      	nop
 801a1ec:	0801a1fd 	.word	0x0801a1fd
 801a1f0:	0801a203 	.word	0x0801a203
 801a1f4:	0801a209 	.word	0x0801a209
 801a1f8:	0801a20f 	.word	0x0801a20f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	73fb      	strb	r3, [r7, #15]
    break;
 801a200:	e00b      	b.n	801a21a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a202:	2302      	movs	r3, #2
 801a204:	73fb      	strb	r3, [r7, #15]
    break;
 801a206:	e008      	b.n	801a21a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a208:	2301      	movs	r3, #1
 801a20a:	73fb      	strb	r3, [r7, #15]
    break;
 801a20c:	e005      	b.n	801a21a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a20e:	2302      	movs	r3, #2
 801a210:	73fb      	strb	r3, [r7, #15]
    break;
 801a212:	e002      	b.n	801a21a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a214:	2302      	movs	r3, #2
 801a216:	73fb      	strb	r3, [r7, #15]
    break;
 801a218:	bf00      	nop
  }
  return usb_status;
 801a21a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a21c:	4618      	mov	r0, r3
 801a21e:	3714      	adds	r7, #20
 801a220:	46bd      	mov	sp, r7
 801a222:	bc80      	pop	{r7}
 801a224:	4770      	bx	lr
 801a226:	bf00      	nop

0801a228 <std>:
 801a228:	2300      	movs	r3, #0
 801a22a:	b510      	push	{r4, lr}
 801a22c:	4604      	mov	r4, r0
 801a22e:	e9c0 3300 	strd	r3, r3, [r0]
 801a232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a236:	6083      	str	r3, [r0, #8]
 801a238:	8181      	strh	r1, [r0, #12]
 801a23a:	6643      	str	r3, [r0, #100]	; 0x64
 801a23c:	81c2      	strh	r2, [r0, #14]
 801a23e:	6183      	str	r3, [r0, #24]
 801a240:	4619      	mov	r1, r3
 801a242:	2208      	movs	r2, #8
 801a244:	305c      	adds	r0, #92	; 0x5c
 801a246:	f000 f93b 	bl	801a4c0 <memset>
 801a24a:	4b05      	ldr	r3, [pc, #20]	; (801a260 <std+0x38>)
 801a24c:	6224      	str	r4, [r4, #32]
 801a24e:	6263      	str	r3, [r4, #36]	; 0x24
 801a250:	4b04      	ldr	r3, [pc, #16]	; (801a264 <std+0x3c>)
 801a252:	62a3      	str	r3, [r4, #40]	; 0x28
 801a254:	4b04      	ldr	r3, [pc, #16]	; (801a268 <std+0x40>)
 801a256:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a258:	4b04      	ldr	r3, [pc, #16]	; (801a26c <std+0x44>)
 801a25a:	6323      	str	r3, [r4, #48]	; 0x30
 801a25c:	bd10      	pop	{r4, pc}
 801a25e:	bf00      	nop
 801a260:	0801a7ed 	.word	0x0801a7ed
 801a264:	0801a80f 	.word	0x0801a80f
 801a268:	0801a847 	.word	0x0801a847
 801a26c:	0801a86b 	.word	0x0801a86b

0801a270 <_cleanup_r>:
 801a270:	4901      	ldr	r1, [pc, #4]	; (801a278 <_cleanup_r+0x8>)
 801a272:	f000 b8af 	b.w	801a3d4 <_fwalk_reent>
 801a276:	bf00      	nop
 801a278:	0801aa35 	.word	0x0801aa35

0801a27c <__sfmoreglue>:
 801a27c:	2268      	movs	r2, #104	; 0x68
 801a27e:	b570      	push	{r4, r5, r6, lr}
 801a280:	1e4d      	subs	r5, r1, #1
 801a282:	4355      	muls	r5, r2
 801a284:	460e      	mov	r6, r1
 801a286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a28a:	f000 f989 	bl	801a5a0 <_malloc_r>
 801a28e:	4604      	mov	r4, r0
 801a290:	b140      	cbz	r0, 801a2a4 <__sfmoreglue+0x28>
 801a292:	2100      	movs	r1, #0
 801a294:	e9c0 1600 	strd	r1, r6, [r0]
 801a298:	300c      	adds	r0, #12
 801a29a:	60a0      	str	r0, [r4, #8]
 801a29c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a2a0:	f000 f90e 	bl	801a4c0 <memset>
 801a2a4:	4620      	mov	r0, r4
 801a2a6:	bd70      	pop	{r4, r5, r6, pc}

0801a2a8 <__sfp_lock_acquire>:
 801a2a8:	4801      	ldr	r0, [pc, #4]	; (801a2b0 <__sfp_lock_acquire+0x8>)
 801a2aa:	f000 b8d8 	b.w	801a45e <__retarget_lock_acquire_recursive>
 801a2ae:	bf00      	nop
 801a2b0:	2000522b 	.word	0x2000522b

0801a2b4 <__sfp_lock_release>:
 801a2b4:	4801      	ldr	r0, [pc, #4]	; (801a2bc <__sfp_lock_release+0x8>)
 801a2b6:	f000 b8d3 	b.w	801a460 <__retarget_lock_release_recursive>
 801a2ba:	bf00      	nop
 801a2bc:	2000522b 	.word	0x2000522b

0801a2c0 <__sinit_lock_acquire>:
 801a2c0:	4801      	ldr	r0, [pc, #4]	; (801a2c8 <__sinit_lock_acquire+0x8>)
 801a2c2:	f000 b8cc 	b.w	801a45e <__retarget_lock_acquire_recursive>
 801a2c6:	bf00      	nop
 801a2c8:	2000522c 	.word	0x2000522c

0801a2cc <__sinit_lock_release>:
 801a2cc:	4801      	ldr	r0, [pc, #4]	; (801a2d4 <__sinit_lock_release+0x8>)
 801a2ce:	f000 b8c7 	b.w	801a460 <__retarget_lock_release_recursive>
 801a2d2:	bf00      	nop
 801a2d4:	2000522c 	.word	0x2000522c

0801a2d8 <__sinit>:
 801a2d8:	b510      	push	{r4, lr}
 801a2da:	4604      	mov	r4, r0
 801a2dc:	f7ff fff0 	bl	801a2c0 <__sinit_lock_acquire>
 801a2e0:	69a3      	ldr	r3, [r4, #24]
 801a2e2:	b11b      	cbz	r3, 801a2ec <__sinit+0x14>
 801a2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2e8:	f7ff bff0 	b.w	801a2cc <__sinit_lock_release>
 801a2ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a2f0:	6523      	str	r3, [r4, #80]	; 0x50
 801a2f2:	4b13      	ldr	r3, [pc, #76]	; (801a340 <__sinit+0x68>)
 801a2f4:	4a13      	ldr	r2, [pc, #76]	; (801a344 <__sinit+0x6c>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	62a2      	str	r2, [r4, #40]	; 0x28
 801a2fa:	42a3      	cmp	r3, r4
 801a2fc:	bf08      	it	eq
 801a2fe:	2301      	moveq	r3, #1
 801a300:	4620      	mov	r0, r4
 801a302:	bf08      	it	eq
 801a304:	61a3      	streq	r3, [r4, #24]
 801a306:	f000 f81f 	bl	801a348 <__sfp>
 801a30a:	6060      	str	r0, [r4, #4]
 801a30c:	4620      	mov	r0, r4
 801a30e:	f000 f81b 	bl	801a348 <__sfp>
 801a312:	60a0      	str	r0, [r4, #8]
 801a314:	4620      	mov	r0, r4
 801a316:	f000 f817 	bl	801a348 <__sfp>
 801a31a:	2200      	movs	r2, #0
 801a31c:	2104      	movs	r1, #4
 801a31e:	60e0      	str	r0, [r4, #12]
 801a320:	6860      	ldr	r0, [r4, #4]
 801a322:	f7ff ff81 	bl	801a228 <std>
 801a326:	2201      	movs	r2, #1
 801a328:	2109      	movs	r1, #9
 801a32a:	68a0      	ldr	r0, [r4, #8]
 801a32c:	f7ff ff7c 	bl	801a228 <std>
 801a330:	2202      	movs	r2, #2
 801a332:	2112      	movs	r1, #18
 801a334:	68e0      	ldr	r0, [r4, #12]
 801a336:	f7ff ff77 	bl	801a228 <std>
 801a33a:	2301      	movs	r3, #1
 801a33c:	61a3      	str	r3, [r4, #24]
 801a33e:	e7d1      	b.n	801a2e4 <__sinit+0xc>
 801a340:	0801ed50 	.word	0x0801ed50
 801a344:	0801a271 	.word	0x0801a271

0801a348 <__sfp>:
 801a348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a34a:	4607      	mov	r7, r0
 801a34c:	f7ff ffac 	bl	801a2a8 <__sfp_lock_acquire>
 801a350:	4b1e      	ldr	r3, [pc, #120]	; (801a3cc <__sfp+0x84>)
 801a352:	681e      	ldr	r6, [r3, #0]
 801a354:	69b3      	ldr	r3, [r6, #24]
 801a356:	b913      	cbnz	r3, 801a35e <__sfp+0x16>
 801a358:	4630      	mov	r0, r6
 801a35a:	f7ff ffbd 	bl	801a2d8 <__sinit>
 801a35e:	3648      	adds	r6, #72	; 0x48
 801a360:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a364:	3b01      	subs	r3, #1
 801a366:	d503      	bpl.n	801a370 <__sfp+0x28>
 801a368:	6833      	ldr	r3, [r6, #0]
 801a36a:	b30b      	cbz	r3, 801a3b0 <__sfp+0x68>
 801a36c:	6836      	ldr	r6, [r6, #0]
 801a36e:	e7f7      	b.n	801a360 <__sfp+0x18>
 801a370:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a374:	b9d5      	cbnz	r5, 801a3ac <__sfp+0x64>
 801a376:	4b16      	ldr	r3, [pc, #88]	; (801a3d0 <__sfp+0x88>)
 801a378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a37c:	60e3      	str	r3, [r4, #12]
 801a37e:	6665      	str	r5, [r4, #100]	; 0x64
 801a380:	f000 f86c 	bl	801a45c <__retarget_lock_init_recursive>
 801a384:	f7ff ff96 	bl	801a2b4 <__sfp_lock_release>
 801a388:	2208      	movs	r2, #8
 801a38a:	4629      	mov	r1, r5
 801a38c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a390:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a394:	6025      	str	r5, [r4, #0]
 801a396:	61a5      	str	r5, [r4, #24]
 801a398:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a39c:	f000 f890 	bl	801a4c0 <memset>
 801a3a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a3a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a3a8:	4620      	mov	r0, r4
 801a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3ac:	3468      	adds	r4, #104	; 0x68
 801a3ae:	e7d9      	b.n	801a364 <__sfp+0x1c>
 801a3b0:	2104      	movs	r1, #4
 801a3b2:	4638      	mov	r0, r7
 801a3b4:	f7ff ff62 	bl	801a27c <__sfmoreglue>
 801a3b8:	4604      	mov	r4, r0
 801a3ba:	6030      	str	r0, [r6, #0]
 801a3bc:	2800      	cmp	r0, #0
 801a3be:	d1d5      	bne.n	801a36c <__sfp+0x24>
 801a3c0:	f7ff ff78 	bl	801a2b4 <__sfp_lock_release>
 801a3c4:	230c      	movs	r3, #12
 801a3c6:	603b      	str	r3, [r7, #0]
 801a3c8:	e7ee      	b.n	801a3a8 <__sfp+0x60>
 801a3ca:	bf00      	nop
 801a3cc:	0801ed50 	.word	0x0801ed50
 801a3d0:	ffff0001 	.word	0xffff0001

0801a3d4 <_fwalk_reent>:
 801a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3d8:	4606      	mov	r6, r0
 801a3da:	4688      	mov	r8, r1
 801a3dc:	2700      	movs	r7, #0
 801a3de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a3e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a3e6:	f1b9 0901 	subs.w	r9, r9, #1
 801a3ea:	d505      	bpl.n	801a3f8 <_fwalk_reent+0x24>
 801a3ec:	6824      	ldr	r4, [r4, #0]
 801a3ee:	2c00      	cmp	r4, #0
 801a3f0:	d1f7      	bne.n	801a3e2 <_fwalk_reent+0xe>
 801a3f2:	4638      	mov	r0, r7
 801a3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3f8:	89ab      	ldrh	r3, [r5, #12]
 801a3fa:	2b01      	cmp	r3, #1
 801a3fc:	d907      	bls.n	801a40e <_fwalk_reent+0x3a>
 801a3fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a402:	3301      	adds	r3, #1
 801a404:	d003      	beq.n	801a40e <_fwalk_reent+0x3a>
 801a406:	4629      	mov	r1, r5
 801a408:	4630      	mov	r0, r6
 801a40a:	47c0      	blx	r8
 801a40c:	4307      	orrs	r7, r0
 801a40e:	3568      	adds	r5, #104	; 0x68
 801a410:	e7e9      	b.n	801a3e6 <_fwalk_reent+0x12>
	...

0801a414 <__libc_init_array>:
 801a414:	b570      	push	{r4, r5, r6, lr}
 801a416:	2600      	movs	r6, #0
 801a418:	4d0c      	ldr	r5, [pc, #48]	; (801a44c <__libc_init_array+0x38>)
 801a41a:	4c0d      	ldr	r4, [pc, #52]	; (801a450 <__libc_init_array+0x3c>)
 801a41c:	1b64      	subs	r4, r4, r5
 801a41e:	10a4      	asrs	r4, r4, #2
 801a420:	42a6      	cmp	r6, r4
 801a422:	d109      	bne.n	801a438 <__libc_init_array+0x24>
 801a424:	f001 f964 	bl	801b6f0 <_init>
 801a428:	2600      	movs	r6, #0
 801a42a:	4d0a      	ldr	r5, [pc, #40]	; (801a454 <__libc_init_array+0x40>)
 801a42c:	4c0a      	ldr	r4, [pc, #40]	; (801a458 <__libc_init_array+0x44>)
 801a42e:	1b64      	subs	r4, r4, r5
 801a430:	10a4      	asrs	r4, r4, #2
 801a432:	42a6      	cmp	r6, r4
 801a434:	d105      	bne.n	801a442 <__libc_init_array+0x2e>
 801a436:	bd70      	pop	{r4, r5, r6, pc}
 801a438:	f855 3b04 	ldr.w	r3, [r5], #4
 801a43c:	4798      	blx	r3
 801a43e:	3601      	adds	r6, #1
 801a440:	e7ee      	b.n	801a420 <__libc_init_array+0xc>
 801a442:	f855 3b04 	ldr.w	r3, [r5], #4
 801a446:	4798      	blx	r3
 801a448:	3601      	adds	r6, #1
 801a44a:	e7f2      	b.n	801a432 <__libc_init_array+0x1e>
 801a44c:	0801ed90 	.word	0x0801ed90
 801a450:	0801ed90 	.word	0x0801ed90
 801a454:	0801ed90 	.word	0x0801ed90
 801a458:	0801ed94 	.word	0x0801ed94

0801a45c <__retarget_lock_init_recursive>:
 801a45c:	4770      	bx	lr

0801a45e <__retarget_lock_acquire_recursive>:
 801a45e:	4770      	bx	lr

0801a460 <__retarget_lock_release_recursive>:
 801a460:	4770      	bx	lr
	...

0801a464 <malloc>:
 801a464:	4b02      	ldr	r3, [pc, #8]	; (801a470 <malloc+0xc>)
 801a466:	4601      	mov	r1, r0
 801a468:	6818      	ldr	r0, [r3, #0]
 801a46a:	f000 b899 	b.w	801a5a0 <_malloc_r>
 801a46e:	bf00      	nop
 801a470:	200001bc 	.word	0x200001bc

0801a474 <free>:
 801a474:	4b02      	ldr	r3, [pc, #8]	; (801a480 <free+0xc>)
 801a476:	4601      	mov	r1, r0
 801a478:	6818      	ldr	r0, [r3, #0]
 801a47a:	f000 b829 	b.w	801a4d0 <_free_r>
 801a47e:	bf00      	nop
 801a480:	200001bc 	.word	0x200001bc

0801a484 <memcmp>:
 801a484:	b510      	push	{r4, lr}
 801a486:	3901      	subs	r1, #1
 801a488:	4402      	add	r2, r0
 801a48a:	4290      	cmp	r0, r2
 801a48c:	d101      	bne.n	801a492 <memcmp+0xe>
 801a48e:	2000      	movs	r0, #0
 801a490:	e005      	b.n	801a49e <memcmp+0x1a>
 801a492:	7803      	ldrb	r3, [r0, #0]
 801a494:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a498:	42a3      	cmp	r3, r4
 801a49a:	d001      	beq.n	801a4a0 <memcmp+0x1c>
 801a49c:	1b18      	subs	r0, r3, r4
 801a49e:	bd10      	pop	{r4, pc}
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	e7f2      	b.n	801a48a <memcmp+0x6>

0801a4a4 <memcpy>:
 801a4a4:	440a      	add	r2, r1
 801a4a6:	4291      	cmp	r1, r2
 801a4a8:	f100 33ff 	add.w	r3, r0, #4294967295
 801a4ac:	d100      	bne.n	801a4b0 <memcpy+0xc>
 801a4ae:	4770      	bx	lr
 801a4b0:	b510      	push	{r4, lr}
 801a4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4b6:	4291      	cmp	r1, r2
 801a4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a4bc:	d1f9      	bne.n	801a4b2 <memcpy+0xe>
 801a4be:	bd10      	pop	{r4, pc}

0801a4c0 <memset>:
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	4402      	add	r2, r0
 801a4c4:	4293      	cmp	r3, r2
 801a4c6:	d100      	bne.n	801a4ca <memset+0xa>
 801a4c8:	4770      	bx	lr
 801a4ca:	f803 1b01 	strb.w	r1, [r3], #1
 801a4ce:	e7f9      	b.n	801a4c4 <memset+0x4>

0801a4d0 <_free_r>:
 801a4d0:	b538      	push	{r3, r4, r5, lr}
 801a4d2:	4605      	mov	r5, r0
 801a4d4:	2900      	cmp	r1, #0
 801a4d6:	d040      	beq.n	801a55a <_free_r+0x8a>
 801a4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4dc:	1f0c      	subs	r4, r1, #4
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	bfb8      	it	lt
 801a4e2:	18e4      	addlt	r4, r4, r3
 801a4e4:	f000 faf4 	bl	801aad0 <__malloc_lock>
 801a4e8:	4a1c      	ldr	r2, [pc, #112]	; (801a55c <_free_r+0x8c>)
 801a4ea:	6813      	ldr	r3, [r2, #0]
 801a4ec:	b933      	cbnz	r3, 801a4fc <_free_r+0x2c>
 801a4ee:	6063      	str	r3, [r4, #4]
 801a4f0:	6014      	str	r4, [r2, #0]
 801a4f2:	4628      	mov	r0, r5
 801a4f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4f8:	f000 baf0 	b.w	801aadc <__malloc_unlock>
 801a4fc:	42a3      	cmp	r3, r4
 801a4fe:	d908      	bls.n	801a512 <_free_r+0x42>
 801a500:	6820      	ldr	r0, [r4, #0]
 801a502:	1821      	adds	r1, r4, r0
 801a504:	428b      	cmp	r3, r1
 801a506:	bf01      	itttt	eq
 801a508:	6819      	ldreq	r1, [r3, #0]
 801a50a:	685b      	ldreq	r3, [r3, #4]
 801a50c:	1809      	addeq	r1, r1, r0
 801a50e:	6021      	streq	r1, [r4, #0]
 801a510:	e7ed      	b.n	801a4ee <_free_r+0x1e>
 801a512:	461a      	mov	r2, r3
 801a514:	685b      	ldr	r3, [r3, #4]
 801a516:	b10b      	cbz	r3, 801a51c <_free_r+0x4c>
 801a518:	42a3      	cmp	r3, r4
 801a51a:	d9fa      	bls.n	801a512 <_free_r+0x42>
 801a51c:	6811      	ldr	r1, [r2, #0]
 801a51e:	1850      	adds	r0, r2, r1
 801a520:	42a0      	cmp	r0, r4
 801a522:	d10b      	bne.n	801a53c <_free_r+0x6c>
 801a524:	6820      	ldr	r0, [r4, #0]
 801a526:	4401      	add	r1, r0
 801a528:	1850      	adds	r0, r2, r1
 801a52a:	4283      	cmp	r3, r0
 801a52c:	6011      	str	r1, [r2, #0]
 801a52e:	d1e0      	bne.n	801a4f2 <_free_r+0x22>
 801a530:	6818      	ldr	r0, [r3, #0]
 801a532:	685b      	ldr	r3, [r3, #4]
 801a534:	4401      	add	r1, r0
 801a536:	6011      	str	r1, [r2, #0]
 801a538:	6053      	str	r3, [r2, #4]
 801a53a:	e7da      	b.n	801a4f2 <_free_r+0x22>
 801a53c:	d902      	bls.n	801a544 <_free_r+0x74>
 801a53e:	230c      	movs	r3, #12
 801a540:	602b      	str	r3, [r5, #0]
 801a542:	e7d6      	b.n	801a4f2 <_free_r+0x22>
 801a544:	6820      	ldr	r0, [r4, #0]
 801a546:	1821      	adds	r1, r4, r0
 801a548:	428b      	cmp	r3, r1
 801a54a:	bf01      	itttt	eq
 801a54c:	6819      	ldreq	r1, [r3, #0]
 801a54e:	685b      	ldreq	r3, [r3, #4]
 801a550:	1809      	addeq	r1, r1, r0
 801a552:	6021      	streq	r1, [r4, #0]
 801a554:	6063      	str	r3, [r4, #4]
 801a556:	6054      	str	r4, [r2, #4]
 801a558:	e7cb      	b.n	801a4f2 <_free_r+0x22>
 801a55a:	bd38      	pop	{r3, r4, r5, pc}
 801a55c:	20005230 	.word	0x20005230

0801a560 <sbrk_aligned>:
 801a560:	b570      	push	{r4, r5, r6, lr}
 801a562:	4e0e      	ldr	r6, [pc, #56]	; (801a59c <sbrk_aligned+0x3c>)
 801a564:	460c      	mov	r4, r1
 801a566:	6831      	ldr	r1, [r6, #0]
 801a568:	4605      	mov	r5, r0
 801a56a:	b911      	cbnz	r1, 801a572 <sbrk_aligned+0x12>
 801a56c:	f000 f90e 	bl	801a78c <_sbrk_r>
 801a570:	6030      	str	r0, [r6, #0]
 801a572:	4621      	mov	r1, r4
 801a574:	4628      	mov	r0, r5
 801a576:	f000 f909 	bl	801a78c <_sbrk_r>
 801a57a:	1c43      	adds	r3, r0, #1
 801a57c:	d00a      	beq.n	801a594 <sbrk_aligned+0x34>
 801a57e:	1cc4      	adds	r4, r0, #3
 801a580:	f024 0403 	bic.w	r4, r4, #3
 801a584:	42a0      	cmp	r0, r4
 801a586:	d007      	beq.n	801a598 <sbrk_aligned+0x38>
 801a588:	1a21      	subs	r1, r4, r0
 801a58a:	4628      	mov	r0, r5
 801a58c:	f000 f8fe 	bl	801a78c <_sbrk_r>
 801a590:	3001      	adds	r0, #1
 801a592:	d101      	bne.n	801a598 <sbrk_aligned+0x38>
 801a594:	f04f 34ff 	mov.w	r4, #4294967295
 801a598:	4620      	mov	r0, r4
 801a59a:	bd70      	pop	{r4, r5, r6, pc}
 801a59c:	20005234 	.word	0x20005234

0801a5a0 <_malloc_r>:
 801a5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5a4:	1ccd      	adds	r5, r1, #3
 801a5a6:	f025 0503 	bic.w	r5, r5, #3
 801a5aa:	3508      	adds	r5, #8
 801a5ac:	2d0c      	cmp	r5, #12
 801a5ae:	bf38      	it	cc
 801a5b0:	250c      	movcc	r5, #12
 801a5b2:	2d00      	cmp	r5, #0
 801a5b4:	4607      	mov	r7, r0
 801a5b6:	db01      	blt.n	801a5bc <_malloc_r+0x1c>
 801a5b8:	42a9      	cmp	r1, r5
 801a5ba:	d905      	bls.n	801a5c8 <_malloc_r+0x28>
 801a5bc:	230c      	movs	r3, #12
 801a5be:	2600      	movs	r6, #0
 801a5c0:	603b      	str	r3, [r7, #0]
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5c8:	4e2e      	ldr	r6, [pc, #184]	; (801a684 <_malloc_r+0xe4>)
 801a5ca:	f000 fa81 	bl	801aad0 <__malloc_lock>
 801a5ce:	6833      	ldr	r3, [r6, #0]
 801a5d0:	461c      	mov	r4, r3
 801a5d2:	bb34      	cbnz	r4, 801a622 <_malloc_r+0x82>
 801a5d4:	4629      	mov	r1, r5
 801a5d6:	4638      	mov	r0, r7
 801a5d8:	f7ff ffc2 	bl	801a560 <sbrk_aligned>
 801a5dc:	1c43      	adds	r3, r0, #1
 801a5de:	4604      	mov	r4, r0
 801a5e0:	d14d      	bne.n	801a67e <_malloc_r+0xde>
 801a5e2:	6834      	ldr	r4, [r6, #0]
 801a5e4:	4626      	mov	r6, r4
 801a5e6:	2e00      	cmp	r6, #0
 801a5e8:	d140      	bne.n	801a66c <_malloc_r+0xcc>
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	4631      	mov	r1, r6
 801a5ee:	4638      	mov	r0, r7
 801a5f0:	eb04 0803 	add.w	r8, r4, r3
 801a5f4:	f000 f8ca 	bl	801a78c <_sbrk_r>
 801a5f8:	4580      	cmp	r8, r0
 801a5fa:	d13a      	bne.n	801a672 <_malloc_r+0xd2>
 801a5fc:	6821      	ldr	r1, [r4, #0]
 801a5fe:	3503      	adds	r5, #3
 801a600:	1a6d      	subs	r5, r5, r1
 801a602:	f025 0503 	bic.w	r5, r5, #3
 801a606:	3508      	adds	r5, #8
 801a608:	2d0c      	cmp	r5, #12
 801a60a:	bf38      	it	cc
 801a60c:	250c      	movcc	r5, #12
 801a60e:	4638      	mov	r0, r7
 801a610:	4629      	mov	r1, r5
 801a612:	f7ff ffa5 	bl	801a560 <sbrk_aligned>
 801a616:	3001      	adds	r0, #1
 801a618:	d02b      	beq.n	801a672 <_malloc_r+0xd2>
 801a61a:	6823      	ldr	r3, [r4, #0]
 801a61c:	442b      	add	r3, r5
 801a61e:	6023      	str	r3, [r4, #0]
 801a620:	e00e      	b.n	801a640 <_malloc_r+0xa0>
 801a622:	6822      	ldr	r2, [r4, #0]
 801a624:	1b52      	subs	r2, r2, r5
 801a626:	d41e      	bmi.n	801a666 <_malloc_r+0xc6>
 801a628:	2a0b      	cmp	r2, #11
 801a62a:	d916      	bls.n	801a65a <_malloc_r+0xba>
 801a62c:	1961      	adds	r1, r4, r5
 801a62e:	42a3      	cmp	r3, r4
 801a630:	6025      	str	r5, [r4, #0]
 801a632:	bf18      	it	ne
 801a634:	6059      	strne	r1, [r3, #4]
 801a636:	6863      	ldr	r3, [r4, #4]
 801a638:	bf08      	it	eq
 801a63a:	6031      	streq	r1, [r6, #0]
 801a63c:	5162      	str	r2, [r4, r5]
 801a63e:	604b      	str	r3, [r1, #4]
 801a640:	4638      	mov	r0, r7
 801a642:	f104 060b 	add.w	r6, r4, #11
 801a646:	f000 fa49 	bl	801aadc <__malloc_unlock>
 801a64a:	f026 0607 	bic.w	r6, r6, #7
 801a64e:	1d23      	adds	r3, r4, #4
 801a650:	1af2      	subs	r2, r6, r3
 801a652:	d0b6      	beq.n	801a5c2 <_malloc_r+0x22>
 801a654:	1b9b      	subs	r3, r3, r6
 801a656:	50a3      	str	r3, [r4, r2]
 801a658:	e7b3      	b.n	801a5c2 <_malloc_r+0x22>
 801a65a:	6862      	ldr	r2, [r4, #4]
 801a65c:	42a3      	cmp	r3, r4
 801a65e:	bf0c      	ite	eq
 801a660:	6032      	streq	r2, [r6, #0]
 801a662:	605a      	strne	r2, [r3, #4]
 801a664:	e7ec      	b.n	801a640 <_malloc_r+0xa0>
 801a666:	4623      	mov	r3, r4
 801a668:	6864      	ldr	r4, [r4, #4]
 801a66a:	e7b2      	b.n	801a5d2 <_malloc_r+0x32>
 801a66c:	4634      	mov	r4, r6
 801a66e:	6876      	ldr	r6, [r6, #4]
 801a670:	e7b9      	b.n	801a5e6 <_malloc_r+0x46>
 801a672:	230c      	movs	r3, #12
 801a674:	4638      	mov	r0, r7
 801a676:	603b      	str	r3, [r7, #0]
 801a678:	f000 fa30 	bl	801aadc <__malloc_unlock>
 801a67c:	e7a1      	b.n	801a5c2 <_malloc_r+0x22>
 801a67e:	6025      	str	r5, [r4, #0]
 801a680:	e7de      	b.n	801a640 <_malloc_r+0xa0>
 801a682:	bf00      	nop
 801a684:	20005230 	.word	0x20005230

0801a688 <iprintf>:
 801a688:	b40f      	push	{r0, r1, r2, r3}
 801a68a:	4b0a      	ldr	r3, [pc, #40]	; (801a6b4 <iprintf+0x2c>)
 801a68c:	b513      	push	{r0, r1, r4, lr}
 801a68e:	681c      	ldr	r4, [r3, #0]
 801a690:	b124      	cbz	r4, 801a69c <iprintf+0x14>
 801a692:	69a3      	ldr	r3, [r4, #24]
 801a694:	b913      	cbnz	r3, 801a69c <iprintf+0x14>
 801a696:	4620      	mov	r0, r4
 801a698:	f7ff fe1e 	bl	801a2d8 <__sinit>
 801a69c:	ab05      	add	r3, sp, #20
 801a69e:	4620      	mov	r0, r4
 801a6a0:	9a04      	ldr	r2, [sp, #16]
 801a6a2:	68a1      	ldr	r1, [r4, #8]
 801a6a4:	9301      	str	r3, [sp, #4]
 801a6a6:	f000 fba3 	bl	801adf0 <_vfiprintf_r>
 801a6aa:	b002      	add	sp, #8
 801a6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6b0:	b004      	add	sp, #16
 801a6b2:	4770      	bx	lr
 801a6b4:	200001bc 	.word	0x200001bc

0801a6b8 <cleanup_glue>:
 801a6b8:	b538      	push	{r3, r4, r5, lr}
 801a6ba:	460c      	mov	r4, r1
 801a6bc:	6809      	ldr	r1, [r1, #0]
 801a6be:	4605      	mov	r5, r0
 801a6c0:	b109      	cbz	r1, 801a6c6 <cleanup_glue+0xe>
 801a6c2:	f7ff fff9 	bl	801a6b8 <cleanup_glue>
 801a6c6:	4621      	mov	r1, r4
 801a6c8:	4628      	mov	r0, r5
 801a6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a6ce:	f7ff beff 	b.w	801a4d0 <_free_r>
	...

0801a6d4 <_reclaim_reent>:
 801a6d4:	4b2c      	ldr	r3, [pc, #176]	; (801a788 <_reclaim_reent+0xb4>)
 801a6d6:	b570      	push	{r4, r5, r6, lr}
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	4604      	mov	r4, r0
 801a6dc:	4283      	cmp	r3, r0
 801a6de:	d051      	beq.n	801a784 <_reclaim_reent+0xb0>
 801a6e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a6e2:	b143      	cbz	r3, 801a6f6 <_reclaim_reent+0x22>
 801a6e4:	68db      	ldr	r3, [r3, #12]
 801a6e6:	2b00      	cmp	r3, #0
 801a6e8:	d14a      	bne.n	801a780 <_reclaim_reent+0xac>
 801a6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a6ec:	6819      	ldr	r1, [r3, #0]
 801a6ee:	b111      	cbz	r1, 801a6f6 <_reclaim_reent+0x22>
 801a6f0:	4620      	mov	r0, r4
 801a6f2:	f7ff feed 	bl	801a4d0 <_free_r>
 801a6f6:	6961      	ldr	r1, [r4, #20]
 801a6f8:	b111      	cbz	r1, 801a700 <_reclaim_reent+0x2c>
 801a6fa:	4620      	mov	r0, r4
 801a6fc:	f7ff fee8 	bl	801a4d0 <_free_r>
 801a700:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a702:	b111      	cbz	r1, 801a70a <_reclaim_reent+0x36>
 801a704:	4620      	mov	r0, r4
 801a706:	f7ff fee3 	bl	801a4d0 <_free_r>
 801a70a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a70c:	b111      	cbz	r1, 801a714 <_reclaim_reent+0x40>
 801a70e:	4620      	mov	r0, r4
 801a710:	f7ff fede 	bl	801a4d0 <_free_r>
 801a714:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a716:	b111      	cbz	r1, 801a71e <_reclaim_reent+0x4a>
 801a718:	4620      	mov	r0, r4
 801a71a:	f7ff fed9 	bl	801a4d0 <_free_r>
 801a71e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a720:	b111      	cbz	r1, 801a728 <_reclaim_reent+0x54>
 801a722:	4620      	mov	r0, r4
 801a724:	f7ff fed4 	bl	801a4d0 <_free_r>
 801a728:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a72a:	b111      	cbz	r1, 801a732 <_reclaim_reent+0x5e>
 801a72c:	4620      	mov	r0, r4
 801a72e:	f7ff fecf 	bl	801a4d0 <_free_r>
 801a732:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a734:	b111      	cbz	r1, 801a73c <_reclaim_reent+0x68>
 801a736:	4620      	mov	r0, r4
 801a738:	f7ff feca 	bl	801a4d0 <_free_r>
 801a73c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a73e:	b111      	cbz	r1, 801a746 <_reclaim_reent+0x72>
 801a740:	4620      	mov	r0, r4
 801a742:	f7ff fec5 	bl	801a4d0 <_free_r>
 801a746:	69a3      	ldr	r3, [r4, #24]
 801a748:	b1e3      	cbz	r3, 801a784 <_reclaim_reent+0xb0>
 801a74a:	4620      	mov	r0, r4
 801a74c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a74e:	4798      	blx	r3
 801a750:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a752:	b1b9      	cbz	r1, 801a784 <_reclaim_reent+0xb0>
 801a754:	4620      	mov	r0, r4
 801a756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a75a:	f7ff bfad 	b.w	801a6b8 <cleanup_glue>
 801a75e:	5949      	ldr	r1, [r1, r5]
 801a760:	b941      	cbnz	r1, 801a774 <_reclaim_reent+0xa0>
 801a762:	3504      	adds	r5, #4
 801a764:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a766:	2d80      	cmp	r5, #128	; 0x80
 801a768:	68d9      	ldr	r1, [r3, #12]
 801a76a:	d1f8      	bne.n	801a75e <_reclaim_reent+0x8a>
 801a76c:	4620      	mov	r0, r4
 801a76e:	f7ff feaf 	bl	801a4d0 <_free_r>
 801a772:	e7ba      	b.n	801a6ea <_reclaim_reent+0x16>
 801a774:	680e      	ldr	r6, [r1, #0]
 801a776:	4620      	mov	r0, r4
 801a778:	f7ff feaa 	bl	801a4d0 <_free_r>
 801a77c:	4631      	mov	r1, r6
 801a77e:	e7ef      	b.n	801a760 <_reclaim_reent+0x8c>
 801a780:	2500      	movs	r5, #0
 801a782:	e7ef      	b.n	801a764 <_reclaim_reent+0x90>
 801a784:	bd70      	pop	{r4, r5, r6, pc}
 801a786:	bf00      	nop
 801a788:	200001bc 	.word	0x200001bc

0801a78c <_sbrk_r>:
 801a78c:	b538      	push	{r3, r4, r5, lr}
 801a78e:	2300      	movs	r3, #0
 801a790:	4d05      	ldr	r5, [pc, #20]	; (801a7a8 <_sbrk_r+0x1c>)
 801a792:	4604      	mov	r4, r0
 801a794:	4608      	mov	r0, r1
 801a796:	602b      	str	r3, [r5, #0]
 801a798:	f7e7 f8d8 	bl	800194c <_sbrk>
 801a79c:	1c43      	adds	r3, r0, #1
 801a79e:	d102      	bne.n	801a7a6 <_sbrk_r+0x1a>
 801a7a0:	682b      	ldr	r3, [r5, #0]
 801a7a2:	b103      	cbz	r3, 801a7a6 <_sbrk_r+0x1a>
 801a7a4:	6023      	str	r3, [r4, #0]
 801a7a6:	bd38      	pop	{r3, r4, r5, pc}
 801a7a8:	20005238 	.word	0x20005238

0801a7ac <siprintf>:
 801a7ac:	b40e      	push	{r1, r2, r3}
 801a7ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a7b2:	b500      	push	{lr}
 801a7b4:	b09c      	sub	sp, #112	; 0x70
 801a7b6:	ab1d      	add	r3, sp, #116	; 0x74
 801a7b8:	9002      	str	r0, [sp, #8]
 801a7ba:	9006      	str	r0, [sp, #24]
 801a7bc:	9107      	str	r1, [sp, #28]
 801a7be:	9104      	str	r1, [sp, #16]
 801a7c0:	4808      	ldr	r0, [pc, #32]	; (801a7e4 <siprintf+0x38>)
 801a7c2:	4909      	ldr	r1, [pc, #36]	; (801a7e8 <siprintf+0x3c>)
 801a7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7c8:	9105      	str	r1, [sp, #20]
 801a7ca:	6800      	ldr	r0, [r0, #0]
 801a7cc:	a902      	add	r1, sp, #8
 801a7ce:	9301      	str	r3, [sp, #4]
 801a7d0:	f000 f9e6 	bl	801aba0 <_svfiprintf_r>
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	9b02      	ldr	r3, [sp, #8]
 801a7d8:	701a      	strb	r2, [r3, #0]
 801a7da:	b01c      	add	sp, #112	; 0x70
 801a7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a7e0:	b003      	add	sp, #12
 801a7e2:	4770      	bx	lr
 801a7e4:	200001bc 	.word	0x200001bc
 801a7e8:	ffff0208 	.word	0xffff0208

0801a7ec <__sread>:
 801a7ec:	b510      	push	{r4, lr}
 801a7ee:	460c      	mov	r4, r1
 801a7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7f4:	f000 fdc2 	bl	801b37c <_read_r>
 801a7f8:	2800      	cmp	r0, #0
 801a7fa:	bfab      	itete	ge
 801a7fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a7fe:	89a3      	ldrhlt	r3, [r4, #12]
 801a800:	181b      	addge	r3, r3, r0
 801a802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a806:	bfac      	ite	ge
 801a808:	6563      	strge	r3, [r4, #84]	; 0x54
 801a80a:	81a3      	strhlt	r3, [r4, #12]
 801a80c:	bd10      	pop	{r4, pc}

0801a80e <__swrite>:
 801a80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a812:	461f      	mov	r7, r3
 801a814:	898b      	ldrh	r3, [r1, #12]
 801a816:	4605      	mov	r5, r0
 801a818:	05db      	lsls	r3, r3, #23
 801a81a:	460c      	mov	r4, r1
 801a81c:	4616      	mov	r6, r2
 801a81e:	d505      	bpl.n	801a82c <__swrite+0x1e>
 801a820:	2302      	movs	r3, #2
 801a822:	2200      	movs	r2, #0
 801a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a828:	f000 f940 	bl	801aaac <_lseek_r>
 801a82c:	89a3      	ldrh	r3, [r4, #12]
 801a82e:	4632      	mov	r2, r6
 801a830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a834:	81a3      	strh	r3, [r4, #12]
 801a836:	4628      	mov	r0, r5
 801a838:	463b      	mov	r3, r7
 801a83a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a842:	f000 b853 	b.w	801a8ec <_write_r>

0801a846 <__sseek>:
 801a846:	b510      	push	{r4, lr}
 801a848:	460c      	mov	r4, r1
 801a84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a84e:	f000 f92d 	bl	801aaac <_lseek_r>
 801a852:	1c43      	adds	r3, r0, #1
 801a854:	89a3      	ldrh	r3, [r4, #12]
 801a856:	bf15      	itete	ne
 801a858:	6560      	strne	r0, [r4, #84]	; 0x54
 801a85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a862:	81a3      	strheq	r3, [r4, #12]
 801a864:	bf18      	it	ne
 801a866:	81a3      	strhne	r3, [r4, #12]
 801a868:	bd10      	pop	{r4, pc}

0801a86a <__sclose>:
 801a86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a86e:	f000 b84f 	b.w	801a910 <_close_r>

0801a872 <strchr>:
 801a872:	4603      	mov	r3, r0
 801a874:	b2c9      	uxtb	r1, r1
 801a876:	4618      	mov	r0, r3
 801a878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a87c:	b112      	cbz	r2, 801a884 <strchr+0x12>
 801a87e:	428a      	cmp	r2, r1
 801a880:	d1f9      	bne.n	801a876 <strchr+0x4>
 801a882:	4770      	bx	lr
 801a884:	2900      	cmp	r1, #0
 801a886:	bf18      	it	ne
 801a888:	2000      	movne	r0, #0
 801a88a:	4770      	bx	lr

0801a88c <strcpy>:
 801a88c:	4603      	mov	r3, r0
 801a88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a892:	f803 2b01 	strb.w	r2, [r3], #1
 801a896:	2a00      	cmp	r2, #0
 801a898:	d1f9      	bne.n	801a88e <strcpy+0x2>
 801a89a:	4770      	bx	lr

0801a89c <strncmp>:
 801a89c:	4603      	mov	r3, r0
 801a89e:	b510      	push	{r4, lr}
 801a8a0:	b172      	cbz	r2, 801a8c0 <strncmp+0x24>
 801a8a2:	3901      	subs	r1, #1
 801a8a4:	1884      	adds	r4, r0, r2
 801a8a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a8aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a8ae:	4290      	cmp	r0, r2
 801a8b0:	d101      	bne.n	801a8b6 <strncmp+0x1a>
 801a8b2:	42a3      	cmp	r3, r4
 801a8b4:	d101      	bne.n	801a8ba <strncmp+0x1e>
 801a8b6:	1a80      	subs	r0, r0, r2
 801a8b8:	bd10      	pop	{r4, pc}
 801a8ba:	2800      	cmp	r0, #0
 801a8bc:	d1f3      	bne.n	801a8a6 <strncmp+0xa>
 801a8be:	e7fa      	b.n	801a8b6 <strncmp+0x1a>
 801a8c0:	4610      	mov	r0, r2
 801a8c2:	e7f9      	b.n	801a8b8 <strncmp+0x1c>

0801a8c4 <strncpy>:
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	b510      	push	{r4, lr}
 801a8c8:	3901      	subs	r1, #1
 801a8ca:	b132      	cbz	r2, 801a8da <strncpy+0x16>
 801a8cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a8d0:	3a01      	subs	r2, #1
 801a8d2:	f803 4b01 	strb.w	r4, [r3], #1
 801a8d6:	2c00      	cmp	r4, #0
 801a8d8:	d1f7      	bne.n	801a8ca <strncpy+0x6>
 801a8da:	2100      	movs	r1, #0
 801a8dc:	441a      	add	r2, r3
 801a8de:	4293      	cmp	r3, r2
 801a8e0:	d100      	bne.n	801a8e4 <strncpy+0x20>
 801a8e2:	bd10      	pop	{r4, pc}
 801a8e4:	f803 1b01 	strb.w	r1, [r3], #1
 801a8e8:	e7f9      	b.n	801a8de <strncpy+0x1a>
	...

0801a8ec <_write_r>:
 801a8ec:	b538      	push	{r3, r4, r5, lr}
 801a8ee:	4604      	mov	r4, r0
 801a8f0:	4608      	mov	r0, r1
 801a8f2:	4611      	mov	r1, r2
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	4d05      	ldr	r5, [pc, #20]	; (801a90c <_write_r+0x20>)
 801a8f8:	602a      	str	r2, [r5, #0]
 801a8fa:	461a      	mov	r2, r3
 801a8fc:	f7e6 ffd9 	bl	80018b2 <_write>
 801a900:	1c43      	adds	r3, r0, #1
 801a902:	d102      	bne.n	801a90a <_write_r+0x1e>
 801a904:	682b      	ldr	r3, [r5, #0]
 801a906:	b103      	cbz	r3, 801a90a <_write_r+0x1e>
 801a908:	6023      	str	r3, [r4, #0]
 801a90a:	bd38      	pop	{r3, r4, r5, pc}
 801a90c:	20005238 	.word	0x20005238

0801a910 <_close_r>:
 801a910:	b538      	push	{r3, r4, r5, lr}
 801a912:	2300      	movs	r3, #0
 801a914:	4d05      	ldr	r5, [pc, #20]	; (801a92c <_close_r+0x1c>)
 801a916:	4604      	mov	r4, r0
 801a918:	4608      	mov	r0, r1
 801a91a:	602b      	str	r3, [r5, #0]
 801a91c:	f7e6 ffe5 	bl	80018ea <_close>
 801a920:	1c43      	adds	r3, r0, #1
 801a922:	d102      	bne.n	801a92a <_close_r+0x1a>
 801a924:	682b      	ldr	r3, [r5, #0]
 801a926:	b103      	cbz	r3, 801a92a <_close_r+0x1a>
 801a928:	6023      	str	r3, [r4, #0]
 801a92a:	bd38      	pop	{r3, r4, r5, pc}
 801a92c:	20005238 	.word	0x20005238

0801a930 <__sflush_r>:
 801a930:	898a      	ldrh	r2, [r1, #12]
 801a932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a934:	4605      	mov	r5, r0
 801a936:	0710      	lsls	r0, r2, #28
 801a938:	460c      	mov	r4, r1
 801a93a:	d457      	bmi.n	801a9ec <__sflush_r+0xbc>
 801a93c:	684b      	ldr	r3, [r1, #4]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	dc04      	bgt.n	801a94c <__sflush_r+0x1c>
 801a942:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a944:	2b00      	cmp	r3, #0
 801a946:	dc01      	bgt.n	801a94c <__sflush_r+0x1c>
 801a948:	2000      	movs	r0, #0
 801a94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a94c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a94e:	2e00      	cmp	r6, #0
 801a950:	d0fa      	beq.n	801a948 <__sflush_r+0x18>
 801a952:	2300      	movs	r3, #0
 801a954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a958:	682f      	ldr	r7, [r5, #0]
 801a95a:	602b      	str	r3, [r5, #0]
 801a95c:	d032      	beq.n	801a9c4 <__sflush_r+0x94>
 801a95e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a960:	89a3      	ldrh	r3, [r4, #12]
 801a962:	075a      	lsls	r2, r3, #29
 801a964:	d505      	bpl.n	801a972 <__sflush_r+0x42>
 801a966:	6863      	ldr	r3, [r4, #4]
 801a968:	1ac0      	subs	r0, r0, r3
 801a96a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a96c:	b10b      	cbz	r3, 801a972 <__sflush_r+0x42>
 801a96e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a970:	1ac0      	subs	r0, r0, r3
 801a972:	2300      	movs	r3, #0
 801a974:	4602      	mov	r2, r0
 801a976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a978:	4628      	mov	r0, r5
 801a97a:	6a21      	ldr	r1, [r4, #32]
 801a97c:	47b0      	blx	r6
 801a97e:	1c43      	adds	r3, r0, #1
 801a980:	89a3      	ldrh	r3, [r4, #12]
 801a982:	d106      	bne.n	801a992 <__sflush_r+0x62>
 801a984:	6829      	ldr	r1, [r5, #0]
 801a986:	291d      	cmp	r1, #29
 801a988:	d82c      	bhi.n	801a9e4 <__sflush_r+0xb4>
 801a98a:	4a29      	ldr	r2, [pc, #164]	; (801aa30 <__sflush_r+0x100>)
 801a98c:	40ca      	lsrs	r2, r1
 801a98e:	07d6      	lsls	r6, r2, #31
 801a990:	d528      	bpl.n	801a9e4 <__sflush_r+0xb4>
 801a992:	2200      	movs	r2, #0
 801a994:	6062      	str	r2, [r4, #4]
 801a996:	6922      	ldr	r2, [r4, #16]
 801a998:	04d9      	lsls	r1, r3, #19
 801a99a:	6022      	str	r2, [r4, #0]
 801a99c:	d504      	bpl.n	801a9a8 <__sflush_r+0x78>
 801a99e:	1c42      	adds	r2, r0, #1
 801a9a0:	d101      	bne.n	801a9a6 <__sflush_r+0x76>
 801a9a2:	682b      	ldr	r3, [r5, #0]
 801a9a4:	b903      	cbnz	r3, 801a9a8 <__sflush_r+0x78>
 801a9a6:	6560      	str	r0, [r4, #84]	; 0x54
 801a9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a9aa:	602f      	str	r7, [r5, #0]
 801a9ac:	2900      	cmp	r1, #0
 801a9ae:	d0cb      	beq.n	801a948 <__sflush_r+0x18>
 801a9b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a9b4:	4299      	cmp	r1, r3
 801a9b6:	d002      	beq.n	801a9be <__sflush_r+0x8e>
 801a9b8:	4628      	mov	r0, r5
 801a9ba:	f7ff fd89 	bl	801a4d0 <_free_r>
 801a9be:	2000      	movs	r0, #0
 801a9c0:	6360      	str	r0, [r4, #52]	; 0x34
 801a9c2:	e7c2      	b.n	801a94a <__sflush_r+0x1a>
 801a9c4:	6a21      	ldr	r1, [r4, #32]
 801a9c6:	2301      	movs	r3, #1
 801a9c8:	4628      	mov	r0, r5
 801a9ca:	47b0      	blx	r6
 801a9cc:	1c41      	adds	r1, r0, #1
 801a9ce:	d1c7      	bne.n	801a960 <__sflush_r+0x30>
 801a9d0:	682b      	ldr	r3, [r5, #0]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d0c4      	beq.n	801a960 <__sflush_r+0x30>
 801a9d6:	2b1d      	cmp	r3, #29
 801a9d8:	d001      	beq.n	801a9de <__sflush_r+0xae>
 801a9da:	2b16      	cmp	r3, #22
 801a9dc:	d101      	bne.n	801a9e2 <__sflush_r+0xb2>
 801a9de:	602f      	str	r7, [r5, #0]
 801a9e0:	e7b2      	b.n	801a948 <__sflush_r+0x18>
 801a9e2:	89a3      	ldrh	r3, [r4, #12]
 801a9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9e8:	81a3      	strh	r3, [r4, #12]
 801a9ea:	e7ae      	b.n	801a94a <__sflush_r+0x1a>
 801a9ec:	690f      	ldr	r7, [r1, #16]
 801a9ee:	2f00      	cmp	r7, #0
 801a9f0:	d0aa      	beq.n	801a948 <__sflush_r+0x18>
 801a9f2:	0793      	lsls	r3, r2, #30
 801a9f4:	bf18      	it	ne
 801a9f6:	2300      	movne	r3, #0
 801a9f8:	680e      	ldr	r6, [r1, #0]
 801a9fa:	bf08      	it	eq
 801a9fc:	694b      	ldreq	r3, [r1, #20]
 801a9fe:	1bf6      	subs	r6, r6, r7
 801aa00:	600f      	str	r7, [r1, #0]
 801aa02:	608b      	str	r3, [r1, #8]
 801aa04:	2e00      	cmp	r6, #0
 801aa06:	dd9f      	ble.n	801a948 <__sflush_r+0x18>
 801aa08:	4633      	mov	r3, r6
 801aa0a:	463a      	mov	r2, r7
 801aa0c:	4628      	mov	r0, r5
 801aa0e:	6a21      	ldr	r1, [r4, #32]
 801aa10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801aa14:	47e0      	blx	ip
 801aa16:	2800      	cmp	r0, #0
 801aa18:	dc06      	bgt.n	801aa28 <__sflush_r+0xf8>
 801aa1a:	89a3      	ldrh	r3, [r4, #12]
 801aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 801aa20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa24:	81a3      	strh	r3, [r4, #12]
 801aa26:	e790      	b.n	801a94a <__sflush_r+0x1a>
 801aa28:	4407      	add	r7, r0
 801aa2a:	1a36      	subs	r6, r6, r0
 801aa2c:	e7ea      	b.n	801aa04 <__sflush_r+0xd4>
 801aa2e:	bf00      	nop
 801aa30:	20400001 	.word	0x20400001

0801aa34 <_fflush_r>:
 801aa34:	b538      	push	{r3, r4, r5, lr}
 801aa36:	690b      	ldr	r3, [r1, #16]
 801aa38:	4605      	mov	r5, r0
 801aa3a:	460c      	mov	r4, r1
 801aa3c:	b913      	cbnz	r3, 801aa44 <_fflush_r+0x10>
 801aa3e:	2500      	movs	r5, #0
 801aa40:	4628      	mov	r0, r5
 801aa42:	bd38      	pop	{r3, r4, r5, pc}
 801aa44:	b118      	cbz	r0, 801aa4e <_fflush_r+0x1a>
 801aa46:	6983      	ldr	r3, [r0, #24]
 801aa48:	b90b      	cbnz	r3, 801aa4e <_fflush_r+0x1a>
 801aa4a:	f7ff fc45 	bl	801a2d8 <__sinit>
 801aa4e:	4b14      	ldr	r3, [pc, #80]	; (801aaa0 <_fflush_r+0x6c>)
 801aa50:	429c      	cmp	r4, r3
 801aa52:	d11b      	bne.n	801aa8c <_fflush_r+0x58>
 801aa54:	686c      	ldr	r4, [r5, #4]
 801aa56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d0ef      	beq.n	801aa3e <_fflush_r+0xa>
 801aa5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aa60:	07d0      	lsls	r0, r2, #31
 801aa62:	d404      	bmi.n	801aa6e <_fflush_r+0x3a>
 801aa64:	0599      	lsls	r1, r3, #22
 801aa66:	d402      	bmi.n	801aa6e <_fflush_r+0x3a>
 801aa68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa6a:	f7ff fcf8 	bl	801a45e <__retarget_lock_acquire_recursive>
 801aa6e:	4628      	mov	r0, r5
 801aa70:	4621      	mov	r1, r4
 801aa72:	f7ff ff5d 	bl	801a930 <__sflush_r>
 801aa76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801aa78:	4605      	mov	r5, r0
 801aa7a:	07da      	lsls	r2, r3, #31
 801aa7c:	d4e0      	bmi.n	801aa40 <_fflush_r+0xc>
 801aa7e:	89a3      	ldrh	r3, [r4, #12]
 801aa80:	059b      	lsls	r3, r3, #22
 801aa82:	d4dd      	bmi.n	801aa40 <_fflush_r+0xc>
 801aa84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aa86:	f7ff fceb 	bl	801a460 <__retarget_lock_release_recursive>
 801aa8a:	e7d9      	b.n	801aa40 <_fflush_r+0xc>
 801aa8c:	4b05      	ldr	r3, [pc, #20]	; (801aaa4 <_fflush_r+0x70>)
 801aa8e:	429c      	cmp	r4, r3
 801aa90:	d101      	bne.n	801aa96 <_fflush_r+0x62>
 801aa92:	68ac      	ldr	r4, [r5, #8]
 801aa94:	e7df      	b.n	801aa56 <_fflush_r+0x22>
 801aa96:	4b04      	ldr	r3, [pc, #16]	; (801aaa8 <_fflush_r+0x74>)
 801aa98:	429c      	cmp	r4, r3
 801aa9a:	bf08      	it	eq
 801aa9c:	68ec      	ldreq	r4, [r5, #12]
 801aa9e:	e7da      	b.n	801aa56 <_fflush_r+0x22>
 801aaa0:	0801ed10 	.word	0x0801ed10
 801aaa4:	0801ed30 	.word	0x0801ed30
 801aaa8:	0801ecf0 	.word	0x0801ecf0

0801aaac <_lseek_r>:
 801aaac:	b538      	push	{r3, r4, r5, lr}
 801aaae:	4604      	mov	r4, r0
 801aab0:	4608      	mov	r0, r1
 801aab2:	4611      	mov	r1, r2
 801aab4:	2200      	movs	r2, #0
 801aab6:	4d05      	ldr	r5, [pc, #20]	; (801aacc <_lseek_r+0x20>)
 801aab8:	602a      	str	r2, [r5, #0]
 801aaba:	461a      	mov	r2, r3
 801aabc:	f7e6 ff39 	bl	8001932 <_lseek>
 801aac0:	1c43      	adds	r3, r0, #1
 801aac2:	d102      	bne.n	801aaca <_lseek_r+0x1e>
 801aac4:	682b      	ldr	r3, [r5, #0]
 801aac6:	b103      	cbz	r3, 801aaca <_lseek_r+0x1e>
 801aac8:	6023      	str	r3, [r4, #0]
 801aaca:	bd38      	pop	{r3, r4, r5, pc}
 801aacc:	20005238 	.word	0x20005238

0801aad0 <__malloc_lock>:
 801aad0:	4801      	ldr	r0, [pc, #4]	; (801aad8 <__malloc_lock+0x8>)
 801aad2:	f7ff bcc4 	b.w	801a45e <__retarget_lock_acquire_recursive>
 801aad6:	bf00      	nop
 801aad8:	2000522a 	.word	0x2000522a

0801aadc <__malloc_unlock>:
 801aadc:	4801      	ldr	r0, [pc, #4]	; (801aae4 <__malloc_unlock+0x8>)
 801aade:	f7ff bcbf 	b.w	801a460 <__retarget_lock_release_recursive>
 801aae2:	bf00      	nop
 801aae4:	2000522a 	.word	0x2000522a

0801aae8 <__ssputs_r>:
 801aae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaec:	688e      	ldr	r6, [r1, #8]
 801aaee:	4682      	mov	sl, r0
 801aaf0:	429e      	cmp	r6, r3
 801aaf2:	460c      	mov	r4, r1
 801aaf4:	4690      	mov	r8, r2
 801aaf6:	461f      	mov	r7, r3
 801aaf8:	d838      	bhi.n	801ab6c <__ssputs_r+0x84>
 801aafa:	898a      	ldrh	r2, [r1, #12]
 801aafc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ab00:	d032      	beq.n	801ab68 <__ssputs_r+0x80>
 801ab02:	6825      	ldr	r5, [r4, #0]
 801ab04:	6909      	ldr	r1, [r1, #16]
 801ab06:	3301      	adds	r3, #1
 801ab08:	eba5 0901 	sub.w	r9, r5, r1
 801ab0c:	6965      	ldr	r5, [r4, #20]
 801ab0e:	444b      	add	r3, r9
 801ab10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ab18:	106d      	asrs	r5, r5, #1
 801ab1a:	429d      	cmp	r5, r3
 801ab1c:	bf38      	it	cc
 801ab1e:	461d      	movcc	r5, r3
 801ab20:	0553      	lsls	r3, r2, #21
 801ab22:	d531      	bpl.n	801ab88 <__ssputs_r+0xa0>
 801ab24:	4629      	mov	r1, r5
 801ab26:	f7ff fd3b 	bl	801a5a0 <_malloc_r>
 801ab2a:	4606      	mov	r6, r0
 801ab2c:	b950      	cbnz	r0, 801ab44 <__ssputs_r+0x5c>
 801ab2e:	230c      	movs	r3, #12
 801ab30:	f04f 30ff 	mov.w	r0, #4294967295
 801ab34:	f8ca 3000 	str.w	r3, [sl]
 801ab38:	89a3      	ldrh	r3, [r4, #12]
 801ab3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab3e:	81a3      	strh	r3, [r4, #12]
 801ab40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab44:	464a      	mov	r2, r9
 801ab46:	6921      	ldr	r1, [r4, #16]
 801ab48:	f7ff fcac 	bl	801a4a4 <memcpy>
 801ab4c:	89a3      	ldrh	r3, [r4, #12]
 801ab4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ab52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab56:	81a3      	strh	r3, [r4, #12]
 801ab58:	6126      	str	r6, [r4, #16]
 801ab5a:	444e      	add	r6, r9
 801ab5c:	6026      	str	r6, [r4, #0]
 801ab5e:	463e      	mov	r6, r7
 801ab60:	6165      	str	r5, [r4, #20]
 801ab62:	eba5 0509 	sub.w	r5, r5, r9
 801ab66:	60a5      	str	r5, [r4, #8]
 801ab68:	42be      	cmp	r6, r7
 801ab6a:	d900      	bls.n	801ab6e <__ssputs_r+0x86>
 801ab6c:	463e      	mov	r6, r7
 801ab6e:	4632      	mov	r2, r6
 801ab70:	4641      	mov	r1, r8
 801ab72:	6820      	ldr	r0, [r4, #0]
 801ab74:	f000 fd48 	bl	801b608 <memmove>
 801ab78:	68a3      	ldr	r3, [r4, #8]
 801ab7a:	2000      	movs	r0, #0
 801ab7c:	1b9b      	subs	r3, r3, r6
 801ab7e:	60a3      	str	r3, [r4, #8]
 801ab80:	6823      	ldr	r3, [r4, #0]
 801ab82:	4433      	add	r3, r6
 801ab84:	6023      	str	r3, [r4, #0]
 801ab86:	e7db      	b.n	801ab40 <__ssputs_r+0x58>
 801ab88:	462a      	mov	r2, r5
 801ab8a:	f000 fd57 	bl	801b63c <_realloc_r>
 801ab8e:	4606      	mov	r6, r0
 801ab90:	2800      	cmp	r0, #0
 801ab92:	d1e1      	bne.n	801ab58 <__ssputs_r+0x70>
 801ab94:	4650      	mov	r0, sl
 801ab96:	6921      	ldr	r1, [r4, #16]
 801ab98:	f7ff fc9a 	bl	801a4d0 <_free_r>
 801ab9c:	e7c7      	b.n	801ab2e <__ssputs_r+0x46>
	...

0801aba0 <_svfiprintf_r>:
 801aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aba4:	4698      	mov	r8, r3
 801aba6:	898b      	ldrh	r3, [r1, #12]
 801aba8:	4607      	mov	r7, r0
 801abaa:	061b      	lsls	r3, r3, #24
 801abac:	460d      	mov	r5, r1
 801abae:	4614      	mov	r4, r2
 801abb0:	b09d      	sub	sp, #116	; 0x74
 801abb2:	d50e      	bpl.n	801abd2 <_svfiprintf_r+0x32>
 801abb4:	690b      	ldr	r3, [r1, #16]
 801abb6:	b963      	cbnz	r3, 801abd2 <_svfiprintf_r+0x32>
 801abb8:	2140      	movs	r1, #64	; 0x40
 801abba:	f7ff fcf1 	bl	801a5a0 <_malloc_r>
 801abbe:	6028      	str	r0, [r5, #0]
 801abc0:	6128      	str	r0, [r5, #16]
 801abc2:	b920      	cbnz	r0, 801abce <_svfiprintf_r+0x2e>
 801abc4:	230c      	movs	r3, #12
 801abc6:	603b      	str	r3, [r7, #0]
 801abc8:	f04f 30ff 	mov.w	r0, #4294967295
 801abcc:	e0d1      	b.n	801ad72 <_svfiprintf_r+0x1d2>
 801abce:	2340      	movs	r3, #64	; 0x40
 801abd0:	616b      	str	r3, [r5, #20]
 801abd2:	2300      	movs	r3, #0
 801abd4:	9309      	str	r3, [sp, #36]	; 0x24
 801abd6:	2320      	movs	r3, #32
 801abd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abdc:	2330      	movs	r3, #48	; 0x30
 801abde:	f04f 0901 	mov.w	r9, #1
 801abe2:	f8cd 800c 	str.w	r8, [sp, #12]
 801abe6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801ad8c <_svfiprintf_r+0x1ec>
 801abea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801abee:	4623      	mov	r3, r4
 801abf0:	469a      	mov	sl, r3
 801abf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abf6:	b10a      	cbz	r2, 801abfc <_svfiprintf_r+0x5c>
 801abf8:	2a25      	cmp	r2, #37	; 0x25
 801abfa:	d1f9      	bne.n	801abf0 <_svfiprintf_r+0x50>
 801abfc:	ebba 0b04 	subs.w	fp, sl, r4
 801ac00:	d00b      	beq.n	801ac1a <_svfiprintf_r+0x7a>
 801ac02:	465b      	mov	r3, fp
 801ac04:	4622      	mov	r2, r4
 801ac06:	4629      	mov	r1, r5
 801ac08:	4638      	mov	r0, r7
 801ac0a:	f7ff ff6d 	bl	801aae8 <__ssputs_r>
 801ac0e:	3001      	adds	r0, #1
 801ac10:	f000 80aa 	beq.w	801ad68 <_svfiprintf_r+0x1c8>
 801ac14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac16:	445a      	add	r2, fp
 801ac18:	9209      	str	r2, [sp, #36]	; 0x24
 801ac1a:	f89a 3000 	ldrb.w	r3, [sl]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	f000 80a2 	beq.w	801ad68 <_svfiprintf_r+0x1c8>
 801ac24:	2300      	movs	r3, #0
 801ac26:	f04f 32ff 	mov.w	r2, #4294967295
 801ac2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac2e:	f10a 0a01 	add.w	sl, sl, #1
 801ac32:	9304      	str	r3, [sp, #16]
 801ac34:	9307      	str	r3, [sp, #28]
 801ac36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac3a:	931a      	str	r3, [sp, #104]	; 0x68
 801ac3c:	4654      	mov	r4, sl
 801ac3e:	2205      	movs	r2, #5
 801ac40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac44:	4851      	ldr	r0, [pc, #324]	; (801ad8c <_svfiprintf_r+0x1ec>)
 801ac46:	f000 fcd1 	bl	801b5ec <memchr>
 801ac4a:	9a04      	ldr	r2, [sp, #16]
 801ac4c:	b9d8      	cbnz	r0, 801ac86 <_svfiprintf_r+0xe6>
 801ac4e:	06d0      	lsls	r0, r2, #27
 801ac50:	bf44      	itt	mi
 801ac52:	2320      	movmi	r3, #32
 801ac54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac58:	0711      	lsls	r1, r2, #28
 801ac5a:	bf44      	itt	mi
 801ac5c:	232b      	movmi	r3, #43	; 0x2b
 801ac5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac62:	f89a 3000 	ldrb.w	r3, [sl]
 801ac66:	2b2a      	cmp	r3, #42	; 0x2a
 801ac68:	d015      	beq.n	801ac96 <_svfiprintf_r+0xf6>
 801ac6a:	4654      	mov	r4, sl
 801ac6c:	2000      	movs	r0, #0
 801ac6e:	f04f 0c0a 	mov.w	ip, #10
 801ac72:	9a07      	ldr	r2, [sp, #28]
 801ac74:	4621      	mov	r1, r4
 801ac76:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac7a:	3b30      	subs	r3, #48	; 0x30
 801ac7c:	2b09      	cmp	r3, #9
 801ac7e:	d94e      	bls.n	801ad1e <_svfiprintf_r+0x17e>
 801ac80:	b1b0      	cbz	r0, 801acb0 <_svfiprintf_r+0x110>
 801ac82:	9207      	str	r2, [sp, #28]
 801ac84:	e014      	b.n	801acb0 <_svfiprintf_r+0x110>
 801ac86:	eba0 0308 	sub.w	r3, r0, r8
 801ac8a:	fa09 f303 	lsl.w	r3, r9, r3
 801ac8e:	4313      	orrs	r3, r2
 801ac90:	46a2      	mov	sl, r4
 801ac92:	9304      	str	r3, [sp, #16]
 801ac94:	e7d2      	b.n	801ac3c <_svfiprintf_r+0x9c>
 801ac96:	9b03      	ldr	r3, [sp, #12]
 801ac98:	1d19      	adds	r1, r3, #4
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	9103      	str	r1, [sp, #12]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	bfbb      	ittet	lt
 801aca2:	425b      	neglt	r3, r3
 801aca4:	f042 0202 	orrlt.w	r2, r2, #2
 801aca8:	9307      	strge	r3, [sp, #28]
 801acaa:	9307      	strlt	r3, [sp, #28]
 801acac:	bfb8      	it	lt
 801acae:	9204      	strlt	r2, [sp, #16]
 801acb0:	7823      	ldrb	r3, [r4, #0]
 801acb2:	2b2e      	cmp	r3, #46	; 0x2e
 801acb4:	d10c      	bne.n	801acd0 <_svfiprintf_r+0x130>
 801acb6:	7863      	ldrb	r3, [r4, #1]
 801acb8:	2b2a      	cmp	r3, #42	; 0x2a
 801acba:	d135      	bne.n	801ad28 <_svfiprintf_r+0x188>
 801acbc:	9b03      	ldr	r3, [sp, #12]
 801acbe:	3402      	adds	r4, #2
 801acc0:	1d1a      	adds	r2, r3, #4
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	9203      	str	r2, [sp, #12]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	bfb8      	it	lt
 801acca:	f04f 33ff 	movlt.w	r3, #4294967295
 801acce:	9305      	str	r3, [sp, #20]
 801acd0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801ad90 <_svfiprintf_r+0x1f0>
 801acd4:	2203      	movs	r2, #3
 801acd6:	4650      	mov	r0, sl
 801acd8:	7821      	ldrb	r1, [r4, #0]
 801acda:	f000 fc87 	bl	801b5ec <memchr>
 801acde:	b140      	cbz	r0, 801acf2 <_svfiprintf_r+0x152>
 801ace0:	2340      	movs	r3, #64	; 0x40
 801ace2:	eba0 000a 	sub.w	r0, r0, sl
 801ace6:	fa03 f000 	lsl.w	r0, r3, r0
 801acea:	9b04      	ldr	r3, [sp, #16]
 801acec:	3401      	adds	r4, #1
 801acee:	4303      	orrs	r3, r0
 801acf0:	9304      	str	r3, [sp, #16]
 801acf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acf6:	2206      	movs	r2, #6
 801acf8:	4826      	ldr	r0, [pc, #152]	; (801ad94 <_svfiprintf_r+0x1f4>)
 801acfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801acfe:	f000 fc75 	bl	801b5ec <memchr>
 801ad02:	2800      	cmp	r0, #0
 801ad04:	d038      	beq.n	801ad78 <_svfiprintf_r+0x1d8>
 801ad06:	4b24      	ldr	r3, [pc, #144]	; (801ad98 <_svfiprintf_r+0x1f8>)
 801ad08:	bb1b      	cbnz	r3, 801ad52 <_svfiprintf_r+0x1b2>
 801ad0a:	9b03      	ldr	r3, [sp, #12]
 801ad0c:	3307      	adds	r3, #7
 801ad0e:	f023 0307 	bic.w	r3, r3, #7
 801ad12:	3308      	adds	r3, #8
 801ad14:	9303      	str	r3, [sp, #12]
 801ad16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad18:	4433      	add	r3, r6
 801ad1a:	9309      	str	r3, [sp, #36]	; 0x24
 801ad1c:	e767      	b.n	801abee <_svfiprintf_r+0x4e>
 801ad1e:	460c      	mov	r4, r1
 801ad20:	2001      	movs	r0, #1
 801ad22:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad26:	e7a5      	b.n	801ac74 <_svfiprintf_r+0xd4>
 801ad28:	2300      	movs	r3, #0
 801ad2a:	f04f 0c0a 	mov.w	ip, #10
 801ad2e:	4619      	mov	r1, r3
 801ad30:	3401      	adds	r4, #1
 801ad32:	9305      	str	r3, [sp, #20]
 801ad34:	4620      	mov	r0, r4
 801ad36:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad3a:	3a30      	subs	r2, #48	; 0x30
 801ad3c:	2a09      	cmp	r2, #9
 801ad3e:	d903      	bls.n	801ad48 <_svfiprintf_r+0x1a8>
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d0c5      	beq.n	801acd0 <_svfiprintf_r+0x130>
 801ad44:	9105      	str	r1, [sp, #20]
 801ad46:	e7c3      	b.n	801acd0 <_svfiprintf_r+0x130>
 801ad48:	4604      	mov	r4, r0
 801ad4a:	2301      	movs	r3, #1
 801ad4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad50:	e7f0      	b.n	801ad34 <_svfiprintf_r+0x194>
 801ad52:	ab03      	add	r3, sp, #12
 801ad54:	9300      	str	r3, [sp, #0]
 801ad56:	462a      	mov	r2, r5
 801ad58:	4638      	mov	r0, r7
 801ad5a:	4b10      	ldr	r3, [pc, #64]	; (801ad9c <_svfiprintf_r+0x1fc>)
 801ad5c:	a904      	add	r1, sp, #16
 801ad5e:	f3af 8000 	nop.w
 801ad62:	1c42      	adds	r2, r0, #1
 801ad64:	4606      	mov	r6, r0
 801ad66:	d1d6      	bne.n	801ad16 <_svfiprintf_r+0x176>
 801ad68:	89ab      	ldrh	r3, [r5, #12]
 801ad6a:	065b      	lsls	r3, r3, #25
 801ad6c:	f53f af2c 	bmi.w	801abc8 <_svfiprintf_r+0x28>
 801ad70:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad72:	b01d      	add	sp, #116	; 0x74
 801ad74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad78:	ab03      	add	r3, sp, #12
 801ad7a:	9300      	str	r3, [sp, #0]
 801ad7c:	462a      	mov	r2, r5
 801ad7e:	4638      	mov	r0, r7
 801ad80:	4b06      	ldr	r3, [pc, #24]	; (801ad9c <_svfiprintf_r+0x1fc>)
 801ad82:	a904      	add	r1, sp, #16
 801ad84:	f000 f9d4 	bl	801b130 <_printf_i>
 801ad88:	e7eb      	b.n	801ad62 <_svfiprintf_r+0x1c2>
 801ad8a:	bf00      	nop
 801ad8c:	0801ed54 	.word	0x0801ed54
 801ad90:	0801ed5a 	.word	0x0801ed5a
 801ad94:	0801ed5e 	.word	0x0801ed5e
 801ad98:	00000000 	.word	0x00000000
 801ad9c:	0801aae9 	.word	0x0801aae9

0801ada0 <__sfputc_r>:
 801ada0:	6893      	ldr	r3, [r2, #8]
 801ada2:	b410      	push	{r4}
 801ada4:	3b01      	subs	r3, #1
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	6093      	str	r3, [r2, #8]
 801adaa:	da07      	bge.n	801adbc <__sfputc_r+0x1c>
 801adac:	6994      	ldr	r4, [r2, #24]
 801adae:	42a3      	cmp	r3, r4
 801adb0:	db01      	blt.n	801adb6 <__sfputc_r+0x16>
 801adb2:	290a      	cmp	r1, #10
 801adb4:	d102      	bne.n	801adbc <__sfputc_r+0x1c>
 801adb6:	bc10      	pop	{r4}
 801adb8:	f000 baf2 	b.w	801b3a0 <__swbuf_r>
 801adbc:	6813      	ldr	r3, [r2, #0]
 801adbe:	1c58      	adds	r0, r3, #1
 801adc0:	6010      	str	r0, [r2, #0]
 801adc2:	7019      	strb	r1, [r3, #0]
 801adc4:	4608      	mov	r0, r1
 801adc6:	bc10      	pop	{r4}
 801adc8:	4770      	bx	lr

0801adca <__sfputs_r>:
 801adca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adcc:	4606      	mov	r6, r0
 801adce:	460f      	mov	r7, r1
 801add0:	4614      	mov	r4, r2
 801add2:	18d5      	adds	r5, r2, r3
 801add4:	42ac      	cmp	r4, r5
 801add6:	d101      	bne.n	801addc <__sfputs_r+0x12>
 801add8:	2000      	movs	r0, #0
 801adda:	e007      	b.n	801adec <__sfputs_r+0x22>
 801addc:	463a      	mov	r2, r7
 801adde:	4630      	mov	r0, r6
 801ade0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ade4:	f7ff ffdc 	bl	801ada0 <__sfputc_r>
 801ade8:	1c43      	adds	r3, r0, #1
 801adea:	d1f3      	bne.n	801add4 <__sfputs_r+0xa>
 801adec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801adf0 <_vfiprintf_r>:
 801adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adf4:	460d      	mov	r5, r1
 801adf6:	4614      	mov	r4, r2
 801adf8:	4698      	mov	r8, r3
 801adfa:	4606      	mov	r6, r0
 801adfc:	b09d      	sub	sp, #116	; 0x74
 801adfe:	b118      	cbz	r0, 801ae08 <_vfiprintf_r+0x18>
 801ae00:	6983      	ldr	r3, [r0, #24]
 801ae02:	b90b      	cbnz	r3, 801ae08 <_vfiprintf_r+0x18>
 801ae04:	f7ff fa68 	bl	801a2d8 <__sinit>
 801ae08:	4b89      	ldr	r3, [pc, #548]	; (801b030 <_vfiprintf_r+0x240>)
 801ae0a:	429d      	cmp	r5, r3
 801ae0c:	d11b      	bne.n	801ae46 <_vfiprintf_r+0x56>
 801ae0e:	6875      	ldr	r5, [r6, #4]
 801ae10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae12:	07d9      	lsls	r1, r3, #31
 801ae14:	d405      	bmi.n	801ae22 <_vfiprintf_r+0x32>
 801ae16:	89ab      	ldrh	r3, [r5, #12]
 801ae18:	059a      	lsls	r2, r3, #22
 801ae1a:	d402      	bmi.n	801ae22 <_vfiprintf_r+0x32>
 801ae1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae1e:	f7ff fb1e 	bl	801a45e <__retarget_lock_acquire_recursive>
 801ae22:	89ab      	ldrh	r3, [r5, #12]
 801ae24:	071b      	lsls	r3, r3, #28
 801ae26:	d501      	bpl.n	801ae2c <_vfiprintf_r+0x3c>
 801ae28:	692b      	ldr	r3, [r5, #16]
 801ae2a:	b9eb      	cbnz	r3, 801ae68 <_vfiprintf_r+0x78>
 801ae2c:	4629      	mov	r1, r5
 801ae2e:	4630      	mov	r0, r6
 801ae30:	f000 fb08 	bl	801b444 <__swsetup_r>
 801ae34:	b1c0      	cbz	r0, 801ae68 <_vfiprintf_r+0x78>
 801ae36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae38:	07dc      	lsls	r4, r3, #31
 801ae3a:	d50e      	bpl.n	801ae5a <_vfiprintf_r+0x6a>
 801ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ae40:	b01d      	add	sp, #116	; 0x74
 801ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae46:	4b7b      	ldr	r3, [pc, #492]	; (801b034 <_vfiprintf_r+0x244>)
 801ae48:	429d      	cmp	r5, r3
 801ae4a:	d101      	bne.n	801ae50 <_vfiprintf_r+0x60>
 801ae4c:	68b5      	ldr	r5, [r6, #8]
 801ae4e:	e7df      	b.n	801ae10 <_vfiprintf_r+0x20>
 801ae50:	4b79      	ldr	r3, [pc, #484]	; (801b038 <_vfiprintf_r+0x248>)
 801ae52:	429d      	cmp	r5, r3
 801ae54:	bf08      	it	eq
 801ae56:	68f5      	ldreq	r5, [r6, #12]
 801ae58:	e7da      	b.n	801ae10 <_vfiprintf_r+0x20>
 801ae5a:	89ab      	ldrh	r3, [r5, #12]
 801ae5c:	0598      	lsls	r0, r3, #22
 801ae5e:	d4ed      	bmi.n	801ae3c <_vfiprintf_r+0x4c>
 801ae60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae62:	f7ff fafd 	bl	801a460 <__retarget_lock_release_recursive>
 801ae66:	e7e9      	b.n	801ae3c <_vfiprintf_r+0x4c>
 801ae68:	2300      	movs	r3, #0
 801ae6a:	9309      	str	r3, [sp, #36]	; 0x24
 801ae6c:	2320      	movs	r3, #32
 801ae6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae72:	2330      	movs	r3, #48	; 0x30
 801ae74:	f04f 0901 	mov.w	r9, #1
 801ae78:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801b03c <_vfiprintf_r+0x24c>
 801ae80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae84:	4623      	mov	r3, r4
 801ae86:	469a      	mov	sl, r3
 801ae88:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae8c:	b10a      	cbz	r2, 801ae92 <_vfiprintf_r+0xa2>
 801ae8e:	2a25      	cmp	r2, #37	; 0x25
 801ae90:	d1f9      	bne.n	801ae86 <_vfiprintf_r+0x96>
 801ae92:	ebba 0b04 	subs.w	fp, sl, r4
 801ae96:	d00b      	beq.n	801aeb0 <_vfiprintf_r+0xc0>
 801ae98:	465b      	mov	r3, fp
 801ae9a:	4622      	mov	r2, r4
 801ae9c:	4629      	mov	r1, r5
 801ae9e:	4630      	mov	r0, r6
 801aea0:	f7ff ff93 	bl	801adca <__sfputs_r>
 801aea4:	3001      	adds	r0, #1
 801aea6:	f000 80aa 	beq.w	801affe <_vfiprintf_r+0x20e>
 801aeaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aeac:	445a      	add	r2, fp
 801aeae:	9209      	str	r2, [sp, #36]	; 0x24
 801aeb0:	f89a 3000 	ldrb.w	r3, [sl]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	f000 80a2 	beq.w	801affe <_vfiprintf_r+0x20e>
 801aeba:	2300      	movs	r3, #0
 801aebc:	f04f 32ff 	mov.w	r2, #4294967295
 801aec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aec4:	f10a 0a01 	add.w	sl, sl, #1
 801aec8:	9304      	str	r3, [sp, #16]
 801aeca:	9307      	str	r3, [sp, #28]
 801aecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aed0:	931a      	str	r3, [sp, #104]	; 0x68
 801aed2:	4654      	mov	r4, sl
 801aed4:	2205      	movs	r2, #5
 801aed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aeda:	4858      	ldr	r0, [pc, #352]	; (801b03c <_vfiprintf_r+0x24c>)
 801aedc:	f000 fb86 	bl	801b5ec <memchr>
 801aee0:	9a04      	ldr	r2, [sp, #16]
 801aee2:	b9d8      	cbnz	r0, 801af1c <_vfiprintf_r+0x12c>
 801aee4:	06d1      	lsls	r1, r2, #27
 801aee6:	bf44      	itt	mi
 801aee8:	2320      	movmi	r3, #32
 801aeea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aeee:	0713      	lsls	r3, r2, #28
 801aef0:	bf44      	itt	mi
 801aef2:	232b      	movmi	r3, #43	; 0x2b
 801aef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aef8:	f89a 3000 	ldrb.w	r3, [sl]
 801aefc:	2b2a      	cmp	r3, #42	; 0x2a
 801aefe:	d015      	beq.n	801af2c <_vfiprintf_r+0x13c>
 801af00:	4654      	mov	r4, sl
 801af02:	2000      	movs	r0, #0
 801af04:	f04f 0c0a 	mov.w	ip, #10
 801af08:	9a07      	ldr	r2, [sp, #28]
 801af0a:	4621      	mov	r1, r4
 801af0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af10:	3b30      	subs	r3, #48	; 0x30
 801af12:	2b09      	cmp	r3, #9
 801af14:	d94e      	bls.n	801afb4 <_vfiprintf_r+0x1c4>
 801af16:	b1b0      	cbz	r0, 801af46 <_vfiprintf_r+0x156>
 801af18:	9207      	str	r2, [sp, #28]
 801af1a:	e014      	b.n	801af46 <_vfiprintf_r+0x156>
 801af1c:	eba0 0308 	sub.w	r3, r0, r8
 801af20:	fa09 f303 	lsl.w	r3, r9, r3
 801af24:	4313      	orrs	r3, r2
 801af26:	46a2      	mov	sl, r4
 801af28:	9304      	str	r3, [sp, #16]
 801af2a:	e7d2      	b.n	801aed2 <_vfiprintf_r+0xe2>
 801af2c:	9b03      	ldr	r3, [sp, #12]
 801af2e:	1d19      	adds	r1, r3, #4
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	9103      	str	r1, [sp, #12]
 801af34:	2b00      	cmp	r3, #0
 801af36:	bfbb      	ittet	lt
 801af38:	425b      	neglt	r3, r3
 801af3a:	f042 0202 	orrlt.w	r2, r2, #2
 801af3e:	9307      	strge	r3, [sp, #28]
 801af40:	9307      	strlt	r3, [sp, #28]
 801af42:	bfb8      	it	lt
 801af44:	9204      	strlt	r2, [sp, #16]
 801af46:	7823      	ldrb	r3, [r4, #0]
 801af48:	2b2e      	cmp	r3, #46	; 0x2e
 801af4a:	d10c      	bne.n	801af66 <_vfiprintf_r+0x176>
 801af4c:	7863      	ldrb	r3, [r4, #1]
 801af4e:	2b2a      	cmp	r3, #42	; 0x2a
 801af50:	d135      	bne.n	801afbe <_vfiprintf_r+0x1ce>
 801af52:	9b03      	ldr	r3, [sp, #12]
 801af54:	3402      	adds	r4, #2
 801af56:	1d1a      	adds	r2, r3, #4
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	9203      	str	r2, [sp, #12]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	bfb8      	it	lt
 801af60:	f04f 33ff 	movlt.w	r3, #4294967295
 801af64:	9305      	str	r3, [sp, #20]
 801af66:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801b040 <_vfiprintf_r+0x250>
 801af6a:	2203      	movs	r2, #3
 801af6c:	4650      	mov	r0, sl
 801af6e:	7821      	ldrb	r1, [r4, #0]
 801af70:	f000 fb3c 	bl	801b5ec <memchr>
 801af74:	b140      	cbz	r0, 801af88 <_vfiprintf_r+0x198>
 801af76:	2340      	movs	r3, #64	; 0x40
 801af78:	eba0 000a 	sub.w	r0, r0, sl
 801af7c:	fa03 f000 	lsl.w	r0, r3, r0
 801af80:	9b04      	ldr	r3, [sp, #16]
 801af82:	3401      	adds	r4, #1
 801af84:	4303      	orrs	r3, r0
 801af86:	9304      	str	r3, [sp, #16]
 801af88:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af8c:	2206      	movs	r2, #6
 801af8e:	482d      	ldr	r0, [pc, #180]	; (801b044 <_vfiprintf_r+0x254>)
 801af90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801af94:	f000 fb2a 	bl	801b5ec <memchr>
 801af98:	2800      	cmp	r0, #0
 801af9a:	d03f      	beq.n	801b01c <_vfiprintf_r+0x22c>
 801af9c:	4b2a      	ldr	r3, [pc, #168]	; (801b048 <_vfiprintf_r+0x258>)
 801af9e:	bb1b      	cbnz	r3, 801afe8 <_vfiprintf_r+0x1f8>
 801afa0:	9b03      	ldr	r3, [sp, #12]
 801afa2:	3307      	adds	r3, #7
 801afa4:	f023 0307 	bic.w	r3, r3, #7
 801afa8:	3308      	adds	r3, #8
 801afaa:	9303      	str	r3, [sp, #12]
 801afac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afae:	443b      	add	r3, r7
 801afb0:	9309      	str	r3, [sp, #36]	; 0x24
 801afb2:	e767      	b.n	801ae84 <_vfiprintf_r+0x94>
 801afb4:	460c      	mov	r4, r1
 801afb6:	2001      	movs	r0, #1
 801afb8:	fb0c 3202 	mla	r2, ip, r2, r3
 801afbc:	e7a5      	b.n	801af0a <_vfiprintf_r+0x11a>
 801afbe:	2300      	movs	r3, #0
 801afc0:	f04f 0c0a 	mov.w	ip, #10
 801afc4:	4619      	mov	r1, r3
 801afc6:	3401      	adds	r4, #1
 801afc8:	9305      	str	r3, [sp, #20]
 801afca:	4620      	mov	r0, r4
 801afcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afd0:	3a30      	subs	r2, #48	; 0x30
 801afd2:	2a09      	cmp	r2, #9
 801afd4:	d903      	bls.n	801afde <_vfiprintf_r+0x1ee>
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d0c5      	beq.n	801af66 <_vfiprintf_r+0x176>
 801afda:	9105      	str	r1, [sp, #20]
 801afdc:	e7c3      	b.n	801af66 <_vfiprintf_r+0x176>
 801afde:	4604      	mov	r4, r0
 801afe0:	2301      	movs	r3, #1
 801afe2:	fb0c 2101 	mla	r1, ip, r1, r2
 801afe6:	e7f0      	b.n	801afca <_vfiprintf_r+0x1da>
 801afe8:	ab03      	add	r3, sp, #12
 801afea:	9300      	str	r3, [sp, #0]
 801afec:	462a      	mov	r2, r5
 801afee:	4630      	mov	r0, r6
 801aff0:	4b16      	ldr	r3, [pc, #88]	; (801b04c <_vfiprintf_r+0x25c>)
 801aff2:	a904      	add	r1, sp, #16
 801aff4:	f3af 8000 	nop.w
 801aff8:	4607      	mov	r7, r0
 801affa:	1c78      	adds	r0, r7, #1
 801affc:	d1d6      	bne.n	801afac <_vfiprintf_r+0x1bc>
 801affe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b000:	07d9      	lsls	r1, r3, #31
 801b002:	d405      	bmi.n	801b010 <_vfiprintf_r+0x220>
 801b004:	89ab      	ldrh	r3, [r5, #12]
 801b006:	059a      	lsls	r2, r3, #22
 801b008:	d402      	bmi.n	801b010 <_vfiprintf_r+0x220>
 801b00a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b00c:	f7ff fa28 	bl	801a460 <__retarget_lock_release_recursive>
 801b010:	89ab      	ldrh	r3, [r5, #12]
 801b012:	065b      	lsls	r3, r3, #25
 801b014:	f53f af12 	bmi.w	801ae3c <_vfiprintf_r+0x4c>
 801b018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b01a:	e711      	b.n	801ae40 <_vfiprintf_r+0x50>
 801b01c:	ab03      	add	r3, sp, #12
 801b01e:	9300      	str	r3, [sp, #0]
 801b020:	462a      	mov	r2, r5
 801b022:	4630      	mov	r0, r6
 801b024:	4b09      	ldr	r3, [pc, #36]	; (801b04c <_vfiprintf_r+0x25c>)
 801b026:	a904      	add	r1, sp, #16
 801b028:	f000 f882 	bl	801b130 <_printf_i>
 801b02c:	e7e4      	b.n	801aff8 <_vfiprintf_r+0x208>
 801b02e:	bf00      	nop
 801b030:	0801ed10 	.word	0x0801ed10
 801b034:	0801ed30 	.word	0x0801ed30
 801b038:	0801ecf0 	.word	0x0801ecf0
 801b03c:	0801ed54 	.word	0x0801ed54
 801b040:	0801ed5a 	.word	0x0801ed5a
 801b044:	0801ed5e 	.word	0x0801ed5e
 801b048:	00000000 	.word	0x00000000
 801b04c:	0801adcb 	.word	0x0801adcb

0801b050 <_printf_common>:
 801b050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b054:	4616      	mov	r6, r2
 801b056:	4699      	mov	r9, r3
 801b058:	688a      	ldr	r2, [r1, #8]
 801b05a:	690b      	ldr	r3, [r1, #16]
 801b05c:	4607      	mov	r7, r0
 801b05e:	4293      	cmp	r3, r2
 801b060:	bfb8      	it	lt
 801b062:	4613      	movlt	r3, r2
 801b064:	6033      	str	r3, [r6, #0]
 801b066:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b06a:	460c      	mov	r4, r1
 801b06c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b070:	b10a      	cbz	r2, 801b076 <_printf_common+0x26>
 801b072:	3301      	adds	r3, #1
 801b074:	6033      	str	r3, [r6, #0]
 801b076:	6823      	ldr	r3, [r4, #0]
 801b078:	0699      	lsls	r1, r3, #26
 801b07a:	bf42      	ittt	mi
 801b07c:	6833      	ldrmi	r3, [r6, #0]
 801b07e:	3302      	addmi	r3, #2
 801b080:	6033      	strmi	r3, [r6, #0]
 801b082:	6825      	ldr	r5, [r4, #0]
 801b084:	f015 0506 	ands.w	r5, r5, #6
 801b088:	d106      	bne.n	801b098 <_printf_common+0x48>
 801b08a:	f104 0a19 	add.w	sl, r4, #25
 801b08e:	68e3      	ldr	r3, [r4, #12]
 801b090:	6832      	ldr	r2, [r6, #0]
 801b092:	1a9b      	subs	r3, r3, r2
 801b094:	42ab      	cmp	r3, r5
 801b096:	dc28      	bgt.n	801b0ea <_printf_common+0x9a>
 801b098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b09c:	1e13      	subs	r3, r2, #0
 801b09e:	6822      	ldr	r2, [r4, #0]
 801b0a0:	bf18      	it	ne
 801b0a2:	2301      	movne	r3, #1
 801b0a4:	0692      	lsls	r2, r2, #26
 801b0a6:	d42d      	bmi.n	801b104 <_printf_common+0xb4>
 801b0a8:	4649      	mov	r1, r9
 801b0aa:	4638      	mov	r0, r7
 801b0ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b0b0:	47c0      	blx	r8
 801b0b2:	3001      	adds	r0, #1
 801b0b4:	d020      	beq.n	801b0f8 <_printf_common+0xa8>
 801b0b6:	6823      	ldr	r3, [r4, #0]
 801b0b8:	68e5      	ldr	r5, [r4, #12]
 801b0ba:	f003 0306 	and.w	r3, r3, #6
 801b0be:	2b04      	cmp	r3, #4
 801b0c0:	bf18      	it	ne
 801b0c2:	2500      	movne	r5, #0
 801b0c4:	6832      	ldr	r2, [r6, #0]
 801b0c6:	f04f 0600 	mov.w	r6, #0
 801b0ca:	68a3      	ldr	r3, [r4, #8]
 801b0cc:	bf08      	it	eq
 801b0ce:	1aad      	subeq	r5, r5, r2
 801b0d0:	6922      	ldr	r2, [r4, #16]
 801b0d2:	bf08      	it	eq
 801b0d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b0d8:	4293      	cmp	r3, r2
 801b0da:	bfc4      	itt	gt
 801b0dc:	1a9b      	subgt	r3, r3, r2
 801b0de:	18ed      	addgt	r5, r5, r3
 801b0e0:	341a      	adds	r4, #26
 801b0e2:	42b5      	cmp	r5, r6
 801b0e4:	d11a      	bne.n	801b11c <_printf_common+0xcc>
 801b0e6:	2000      	movs	r0, #0
 801b0e8:	e008      	b.n	801b0fc <_printf_common+0xac>
 801b0ea:	2301      	movs	r3, #1
 801b0ec:	4652      	mov	r2, sl
 801b0ee:	4649      	mov	r1, r9
 801b0f0:	4638      	mov	r0, r7
 801b0f2:	47c0      	blx	r8
 801b0f4:	3001      	adds	r0, #1
 801b0f6:	d103      	bne.n	801b100 <_printf_common+0xb0>
 801b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 801b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b100:	3501      	adds	r5, #1
 801b102:	e7c4      	b.n	801b08e <_printf_common+0x3e>
 801b104:	2030      	movs	r0, #48	; 0x30
 801b106:	18e1      	adds	r1, r4, r3
 801b108:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b10c:	1c5a      	adds	r2, r3, #1
 801b10e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b112:	4422      	add	r2, r4
 801b114:	3302      	adds	r3, #2
 801b116:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b11a:	e7c5      	b.n	801b0a8 <_printf_common+0x58>
 801b11c:	2301      	movs	r3, #1
 801b11e:	4622      	mov	r2, r4
 801b120:	4649      	mov	r1, r9
 801b122:	4638      	mov	r0, r7
 801b124:	47c0      	blx	r8
 801b126:	3001      	adds	r0, #1
 801b128:	d0e6      	beq.n	801b0f8 <_printf_common+0xa8>
 801b12a:	3601      	adds	r6, #1
 801b12c:	e7d9      	b.n	801b0e2 <_printf_common+0x92>
	...

0801b130 <_printf_i>:
 801b130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b134:	7e0f      	ldrb	r7, [r1, #24]
 801b136:	4691      	mov	r9, r2
 801b138:	2f78      	cmp	r7, #120	; 0x78
 801b13a:	4680      	mov	r8, r0
 801b13c:	460c      	mov	r4, r1
 801b13e:	469a      	mov	sl, r3
 801b140:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b146:	d807      	bhi.n	801b158 <_printf_i+0x28>
 801b148:	2f62      	cmp	r7, #98	; 0x62
 801b14a:	d80a      	bhi.n	801b162 <_printf_i+0x32>
 801b14c:	2f00      	cmp	r7, #0
 801b14e:	f000 80d9 	beq.w	801b304 <_printf_i+0x1d4>
 801b152:	2f58      	cmp	r7, #88	; 0x58
 801b154:	f000 80a4 	beq.w	801b2a0 <_printf_i+0x170>
 801b158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b15c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b160:	e03a      	b.n	801b1d8 <_printf_i+0xa8>
 801b162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b166:	2b15      	cmp	r3, #21
 801b168:	d8f6      	bhi.n	801b158 <_printf_i+0x28>
 801b16a:	a101      	add	r1, pc, #4	; (adr r1, 801b170 <_printf_i+0x40>)
 801b16c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b170:	0801b1c9 	.word	0x0801b1c9
 801b174:	0801b1dd 	.word	0x0801b1dd
 801b178:	0801b159 	.word	0x0801b159
 801b17c:	0801b159 	.word	0x0801b159
 801b180:	0801b159 	.word	0x0801b159
 801b184:	0801b159 	.word	0x0801b159
 801b188:	0801b1dd 	.word	0x0801b1dd
 801b18c:	0801b159 	.word	0x0801b159
 801b190:	0801b159 	.word	0x0801b159
 801b194:	0801b159 	.word	0x0801b159
 801b198:	0801b159 	.word	0x0801b159
 801b19c:	0801b2eb 	.word	0x0801b2eb
 801b1a0:	0801b20d 	.word	0x0801b20d
 801b1a4:	0801b2cd 	.word	0x0801b2cd
 801b1a8:	0801b159 	.word	0x0801b159
 801b1ac:	0801b159 	.word	0x0801b159
 801b1b0:	0801b30d 	.word	0x0801b30d
 801b1b4:	0801b159 	.word	0x0801b159
 801b1b8:	0801b20d 	.word	0x0801b20d
 801b1bc:	0801b159 	.word	0x0801b159
 801b1c0:	0801b159 	.word	0x0801b159
 801b1c4:	0801b2d5 	.word	0x0801b2d5
 801b1c8:	682b      	ldr	r3, [r5, #0]
 801b1ca:	1d1a      	adds	r2, r3, #4
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	602a      	str	r2, [r5, #0]
 801b1d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b1d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b1d8:	2301      	movs	r3, #1
 801b1da:	e0a4      	b.n	801b326 <_printf_i+0x1f6>
 801b1dc:	6820      	ldr	r0, [r4, #0]
 801b1de:	6829      	ldr	r1, [r5, #0]
 801b1e0:	0606      	lsls	r6, r0, #24
 801b1e2:	f101 0304 	add.w	r3, r1, #4
 801b1e6:	d50a      	bpl.n	801b1fe <_printf_i+0xce>
 801b1e8:	680e      	ldr	r6, [r1, #0]
 801b1ea:	602b      	str	r3, [r5, #0]
 801b1ec:	2e00      	cmp	r6, #0
 801b1ee:	da03      	bge.n	801b1f8 <_printf_i+0xc8>
 801b1f0:	232d      	movs	r3, #45	; 0x2d
 801b1f2:	4276      	negs	r6, r6
 801b1f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1f8:	230a      	movs	r3, #10
 801b1fa:	485e      	ldr	r0, [pc, #376]	; (801b374 <_printf_i+0x244>)
 801b1fc:	e019      	b.n	801b232 <_printf_i+0x102>
 801b1fe:	680e      	ldr	r6, [r1, #0]
 801b200:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b204:	602b      	str	r3, [r5, #0]
 801b206:	bf18      	it	ne
 801b208:	b236      	sxthne	r6, r6
 801b20a:	e7ef      	b.n	801b1ec <_printf_i+0xbc>
 801b20c:	682b      	ldr	r3, [r5, #0]
 801b20e:	6820      	ldr	r0, [r4, #0]
 801b210:	1d19      	adds	r1, r3, #4
 801b212:	6029      	str	r1, [r5, #0]
 801b214:	0601      	lsls	r1, r0, #24
 801b216:	d501      	bpl.n	801b21c <_printf_i+0xec>
 801b218:	681e      	ldr	r6, [r3, #0]
 801b21a:	e002      	b.n	801b222 <_printf_i+0xf2>
 801b21c:	0646      	lsls	r6, r0, #25
 801b21e:	d5fb      	bpl.n	801b218 <_printf_i+0xe8>
 801b220:	881e      	ldrh	r6, [r3, #0]
 801b222:	2f6f      	cmp	r7, #111	; 0x6f
 801b224:	bf0c      	ite	eq
 801b226:	2308      	moveq	r3, #8
 801b228:	230a      	movne	r3, #10
 801b22a:	4852      	ldr	r0, [pc, #328]	; (801b374 <_printf_i+0x244>)
 801b22c:	2100      	movs	r1, #0
 801b22e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b232:	6865      	ldr	r5, [r4, #4]
 801b234:	2d00      	cmp	r5, #0
 801b236:	bfa8      	it	ge
 801b238:	6821      	ldrge	r1, [r4, #0]
 801b23a:	60a5      	str	r5, [r4, #8]
 801b23c:	bfa4      	itt	ge
 801b23e:	f021 0104 	bicge.w	r1, r1, #4
 801b242:	6021      	strge	r1, [r4, #0]
 801b244:	b90e      	cbnz	r6, 801b24a <_printf_i+0x11a>
 801b246:	2d00      	cmp	r5, #0
 801b248:	d04d      	beq.n	801b2e6 <_printf_i+0x1b6>
 801b24a:	4615      	mov	r5, r2
 801b24c:	fbb6 f1f3 	udiv	r1, r6, r3
 801b250:	fb03 6711 	mls	r7, r3, r1, r6
 801b254:	5dc7      	ldrb	r7, [r0, r7]
 801b256:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b25a:	4637      	mov	r7, r6
 801b25c:	42bb      	cmp	r3, r7
 801b25e:	460e      	mov	r6, r1
 801b260:	d9f4      	bls.n	801b24c <_printf_i+0x11c>
 801b262:	2b08      	cmp	r3, #8
 801b264:	d10b      	bne.n	801b27e <_printf_i+0x14e>
 801b266:	6823      	ldr	r3, [r4, #0]
 801b268:	07de      	lsls	r6, r3, #31
 801b26a:	d508      	bpl.n	801b27e <_printf_i+0x14e>
 801b26c:	6923      	ldr	r3, [r4, #16]
 801b26e:	6861      	ldr	r1, [r4, #4]
 801b270:	4299      	cmp	r1, r3
 801b272:	bfde      	ittt	le
 801b274:	2330      	movle	r3, #48	; 0x30
 801b276:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b27a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b27e:	1b52      	subs	r2, r2, r5
 801b280:	6122      	str	r2, [r4, #16]
 801b282:	464b      	mov	r3, r9
 801b284:	4621      	mov	r1, r4
 801b286:	4640      	mov	r0, r8
 801b288:	f8cd a000 	str.w	sl, [sp]
 801b28c:	aa03      	add	r2, sp, #12
 801b28e:	f7ff fedf 	bl	801b050 <_printf_common>
 801b292:	3001      	adds	r0, #1
 801b294:	d14c      	bne.n	801b330 <_printf_i+0x200>
 801b296:	f04f 30ff 	mov.w	r0, #4294967295
 801b29a:	b004      	add	sp, #16
 801b29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2a0:	4834      	ldr	r0, [pc, #208]	; (801b374 <_printf_i+0x244>)
 801b2a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b2a6:	6829      	ldr	r1, [r5, #0]
 801b2a8:	6823      	ldr	r3, [r4, #0]
 801b2aa:	f851 6b04 	ldr.w	r6, [r1], #4
 801b2ae:	6029      	str	r1, [r5, #0]
 801b2b0:	061d      	lsls	r5, r3, #24
 801b2b2:	d514      	bpl.n	801b2de <_printf_i+0x1ae>
 801b2b4:	07df      	lsls	r7, r3, #31
 801b2b6:	bf44      	itt	mi
 801b2b8:	f043 0320 	orrmi.w	r3, r3, #32
 801b2bc:	6023      	strmi	r3, [r4, #0]
 801b2be:	b91e      	cbnz	r6, 801b2c8 <_printf_i+0x198>
 801b2c0:	6823      	ldr	r3, [r4, #0]
 801b2c2:	f023 0320 	bic.w	r3, r3, #32
 801b2c6:	6023      	str	r3, [r4, #0]
 801b2c8:	2310      	movs	r3, #16
 801b2ca:	e7af      	b.n	801b22c <_printf_i+0xfc>
 801b2cc:	6823      	ldr	r3, [r4, #0]
 801b2ce:	f043 0320 	orr.w	r3, r3, #32
 801b2d2:	6023      	str	r3, [r4, #0]
 801b2d4:	2378      	movs	r3, #120	; 0x78
 801b2d6:	4828      	ldr	r0, [pc, #160]	; (801b378 <_printf_i+0x248>)
 801b2d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b2dc:	e7e3      	b.n	801b2a6 <_printf_i+0x176>
 801b2de:	0659      	lsls	r1, r3, #25
 801b2e0:	bf48      	it	mi
 801b2e2:	b2b6      	uxthmi	r6, r6
 801b2e4:	e7e6      	b.n	801b2b4 <_printf_i+0x184>
 801b2e6:	4615      	mov	r5, r2
 801b2e8:	e7bb      	b.n	801b262 <_printf_i+0x132>
 801b2ea:	682b      	ldr	r3, [r5, #0]
 801b2ec:	6826      	ldr	r6, [r4, #0]
 801b2ee:	1d18      	adds	r0, r3, #4
 801b2f0:	6961      	ldr	r1, [r4, #20]
 801b2f2:	6028      	str	r0, [r5, #0]
 801b2f4:	0635      	lsls	r5, r6, #24
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	d501      	bpl.n	801b2fe <_printf_i+0x1ce>
 801b2fa:	6019      	str	r1, [r3, #0]
 801b2fc:	e002      	b.n	801b304 <_printf_i+0x1d4>
 801b2fe:	0670      	lsls	r0, r6, #25
 801b300:	d5fb      	bpl.n	801b2fa <_printf_i+0x1ca>
 801b302:	8019      	strh	r1, [r3, #0]
 801b304:	2300      	movs	r3, #0
 801b306:	4615      	mov	r5, r2
 801b308:	6123      	str	r3, [r4, #16]
 801b30a:	e7ba      	b.n	801b282 <_printf_i+0x152>
 801b30c:	682b      	ldr	r3, [r5, #0]
 801b30e:	2100      	movs	r1, #0
 801b310:	1d1a      	adds	r2, r3, #4
 801b312:	602a      	str	r2, [r5, #0]
 801b314:	681d      	ldr	r5, [r3, #0]
 801b316:	6862      	ldr	r2, [r4, #4]
 801b318:	4628      	mov	r0, r5
 801b31a:	f000 f967 	bl	801b5ec <memchr>
 801b31e:	b108      	cbz	r0, 801b324 <_printf_i+0x1f4>
 801b320:	1b40      	subs	r0, r0, r5
 801b322:	6060      	str	r0, [r4, #4]
 801b324:	6863      	ldr	r3, [r4, #4]
 801b326:	6123      	str	r3, [r4, #16]
 801b328:	2300      	movs	r3, #0
 801b32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b32e:	e7a8      	b.n	801b282 <_printf_i+0x152>
 801b330:	462a      	mov	r2, r5
 801b332:	4649      	mov	r1, r9
 801b334:	4640      	mov	r0, r8
 801b336:	6923      	ldr	r3, [r4, #16]
 801b338:	47d0      	blx	sl
 801b33a:	3001      	adds	r0, #1
 801b33c:	d0ab      	beq.n	801b296 <_printf_i+0x166>
 801b33e:	6823      	ldr	r3, [r4, #0]
 801b340:	079b      	lsls	r3, r3, #30
 801b342:	d413      	bmi.n	801b36c <_printf_i+0x23c>
 801b344:	68e0      	ldr	r0, [r4, #12]
 801b346:	9b03      	ldr	r3, [sp, #12]
 801b348:	4298      	cmp	r0, r3
 801b34a:	bfb8      	it	lt
 801b34c:	4618      	movlt	r0, r3
 801b34e:	e7a4      	b.n	801b29a <_printf_i+0x16a>
 801b350:	2301      	movs	r3, #1
 801b352:	4632      	mov	r2, r6
 801b354:	4649      	mov	r1, r9
 801b356:	4640      	mov	r0, r8
 801b358:	47d0      	blx	sl
 801b35a:	3001      	adds	r0, #1
 801b35c:	d09b      	beq.n	801b296 <_printf_i+0x166>
 801b35e:	3501      	adds	r5, #1
 801b360:	68e3      	ldr	r3, [r4, #12]
 801b362:	9903      	ldr	r1, [sp, #12]
 801b364:	1a5b      	subs	r3, r3, r1
 801b366:	42ab      	cmp	r3, r5
 801b368:	dcf2      	bgt.n	801b350 <_printf_i+0x220>
 801b36a:	e7eb      	b.n	801b344 <_printf_i+0x214>
 801b36c:	2500      	movs	r5, #0
 801b36e:	f104 0619 	add.w	r6, r4, #25
 801b372:	e7f5      	b.n	801b360 <_printf_i+0x230>
 801b374:	0801ed65 	.word	0x0801ed65
 801b378:	0801ed76 	.word	0x0801ed76

0801b37c <_read_r>:
 801b37c:	b538      	push	{r3, r4, r5, lr}
 801b37e:	4604      	mov	r4, r0
 801b380:	4608      	mov	r0, r1
 801b382:	4611      	mov	r1, r2
 801b384:	2200      	movs	r2, #0
 801b386:	4d05      	ldr	r5, [pc, #20]	; (801b39c <_read_r+0x20>)
 801b388:	602a      	str	r2, [r5, #0]
 801b38a:	461a      	mov	r2, r3
 801b38c:	f7e6 fa74 	bl	8001878 <_read>
 801b390:	1c43      	adds	r3, r0, #1
 801b392:	d102      	bne.n	801b39a <_read_r+0x1e>
 801b394:	682b      	ldr	r3, [r5, #0]
 801b396:	b103      	cbz	r3, 801b39a <_read_r+0x1e>
 801b398:	6023      	str	r3, [r4, #0]
 801b39a:	bd38      	pop	{r3, r4, r5, pc}
 801b39c:	20005238 	.word	0x20005238

0801b3a0 <__swbuf_r>:
 801b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3a2:	460e      	mov	r6, r1
 801b3a4:	4614      	mov	r4, r2
 801b3a6:	4605      	mov	r5, r0
 801b3a8:	b118      	cbz	r0, 801b3b2 <__swbuf_r+0x12>
 801b3aa:	6983      	ldr	r3, [r0, #24]
 801b3ac:	b90b      	cbnz	r3, 801b3b2 <__swbuf_r+0x12>
 801b3ae:	f7fe ff93 	bl	801a2d8 <__sinit>
 801b3b2:	4b21      	ldr	r3, [pc, #132]	; (801b438 <__swbuf_r+0x98>)
 801b3b4:	429c      	cmp	r4, r3
 801b3b6:	d12b      	bne.n	801b410 <__swbuf_r+0x70>
 801b3b8:	686c      	ldr	r4, [r5, #4]
 801b3ba:	69a3      	ldr	r3, [r4, #24]
 801b3bc:	60a3      	str	r3, [r4, #8]
 801b3be:	89a3      	ldrh	r3, [r4, #12]
 801b3c0:	071a      	lsls	r2, r3, #28
 801b3c2:	d52f      	bpl.n	801b424 <__swbuf_r+0x84>
 801b3c4:	6923      	ldr	r3, [r4, #16]
 801b3c6:	b36b      	cbz	r3, 801b424 <__swbuf_r+0x84>
 801b3c8:	6923      	ldr	r3, [r4, #16]
 801b3ca:	6820      	ldr	r0, [r4, #0]
 801b3cc:	b2f6      	uxtb	r6, r6
 801b3ce:	1ac0      	subs	r0, r0, r3
 801b3d0:	6963      	ldr	r3, [r4, #20]
 801b3d2:	4637      	mov	r7, r6
 801b3d4:	4283      	cmp	r3, r0
 801b3d6:	dc04      	bgt.n	801b3e2 <__swbuf_r+0x42>
 801b3d8:	4621      	mov	r1, r4
 801b3da:	4628      	mov	r0, r5
 801b3dc:	f7ff fb2a 	bl	801aa34 <_fflush_r>
 801b3e0:	bb30      	cbnz	r0, 801b430 <__swbuf_r+0x90>
 801b3e2:	68a3      	ldr	r3, [r4, #8]
 801b3e4:	3001      	adds	r0, #1
 801b3e6:	3b01      	subs	r3, #1
 801b3e8:	60a3      	str	r3, [r4, #8]
 801b3ea:	6823      	ldr	r3, [r4, #0]
 801b3ec:	1c5a      	adds	r2, r3, #1
 801b3ee:	6022      	str	r2, [r4, #0]
 801b3f0:	701e      	strb	r6, [r3, #0]
 801b3f2:	6963      	ldr	r3, [r4, #20]
 801b3f4:	4283      	cmp	r3, r0
 801b3f6:	d004      	beq.n	801b402 <__swbuf_r+0x62>
 801b3f8:	89a3      	ldrh	r3, [r4, #12]
 801b3fa:	07db      	lsls	r3, r3, #31
 801b3fc:	d506      	bpl.n	801b40c <__swbuf_r+0x6c>
 801b3fe:	2e0a      	cmp	r6, #10
 801b400:	d104      	bne.n	801b40c <__swbuf_r+0x6c>
 801b402:	4621      	mov	r1, r4
 801b404:	4628      	mov	r0, r5
 801b406:	f7ff fb15 	bl	801aa34 <_fflush_r>
 801b40a:	b988      	cbnz	r0, 801b430 <__swbuf_r+0x90>
 801b40c:	4638      	mov	r0, r7
 801b40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b410:	4b0a      	ldr	r3, [pc, #40]	; (801b43c <__swbuf_r+0x9c>)
 801b412:	429c      	cmp	r4, r3
 801b414:	d101      	bne.n	801b41a <__swbuf_r+0x7a>
 801b416:	68ac      	ldr	r4, [r5, #8]
 801b418:	e7cf      	b.n	801b3ba <__swbuf_r+0x1a>
 801b41a:	4b09      	ldr	r3, [pc, #36]	; (801b440 <__swbuf_r+0xa0>)
 801b41c:	429c      	cmp	r4, r3
 801b41e:	bf08      	it	eq
 801b420:	68ec      	ldreq	r4, [r5, #12]
 801b422:	e7ca      	b.n	801b3ba <__swbuf_r+0x1a>
 801b424:	4621      	mov	r1, r4
 801b426:	4628      	mov	r0, r5
 801b428:	f000 f80c 	bl	801b444 <__swsetup_r>
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d0cb      	beq.n	801b3c8 <__swbuf_r+0x28>
 801b430:	f04f 37ff 	mov.w	r7, #4294967295
 801b434:	e7ea      	b.n	801b40c <__swbuf_r+0x6c>
 801b436:	bf00      	nop
 801b438:	0801ed10 	.word	0x0801ed10
 801b43c:	0801ed30 	.word	0x0801ed30
 801b440:	0801ecf0 	.word	0x0801ecf0

0801b444 <__swsetup_r>:
 801b444:	4b32      	ldr	r3, [pc, #200]	; (801b510 <__swsetup_r+0xcc>)
 801b446:	b570      	push	{r4, r5, r6, lr}
 801b448:	681d      	ldr	r5, [r3, #0]
 801b44a:	4606      	mov	r6, r0
 801b44c:	460c      	mov	r4, r1
 801b44e:	b125      	cbz	r5, 801b45a <__swsetup_r+0x16>
 801b450:	69ab      	ldr	r3, [r5, #24]
 801b452:	b913      	cbnz	r3, 801b45a <__swsetup_r+0x16>
 801b454:	4628      	mov	r0, r5
 801b456:	f7fe ff3f 	bl	801a2d8 <__sinit>
 801b45a:	4b2e      	ldr	r3, [pc, #184]	; (801b514 <__swsetup_r+0xd0>)
 801b45c:	429c      	cmp	r4, r3
 801b45e:	d10f      	bne.n	801b480 <__swsetup_r+0x3c>
 801b460:	686c      	ldr	r4, [r5, #4]
 801b462:	89a3      	ldrh	r3, [r4, #12]
 801b464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b468:	0719      	lsls	r1, r3, #28
 801b46a:	d42c      	bmi.n	801b4c6 <__swsetup_r+0x82>
 801b46c:	06dd      	lsls	r5, r3, #27
 801b46e:	d411      	bmi.n	801b494 <__swsetup_r+0x50>
 801b470:	2309      	movs	r3, #9
 801b472:	6033      	str	r3, [r6, #0]
 801b474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b478:	f04f 30ff 	mov.w	r0, #4294967295
 801b47c:	81a3      	strh	r3, [r4, #12]
 801b47e:	e03e      	b.n	801b4fe <__swsetup_r+0xba>
 801b480:	4b25      	ldr	r3, [pc, #148]	; (801b518 <__swsetup_r+0xd4>)
 801b482:	429c      	cmp	r4, r3
 801b484:	d101      	bne.n	801b48a <__swsetup_r+0x46>
 801b486:	68ac      	ldr	r4, [r5, #8]
 801b488:	e7eb      	b.n	801b462 <__swsetup_r+0x1e>
 801b48a:	4b24      	ldr	r3, [pc, #144]	; (801b51c <__swsetup_r+0xd8>)
 801b48c:	429c      	cmp	r4, r3
 801b48e:	bf08      	it	eq
 801b490:	68ec      	ldreq	r4, [r5, #12]
 801b492:	e7e6      	b.n	801b462 <__swsetup_r+0x1e>
 801b494:	0758      	lsls	r0, r3, #29
 801b496:	d512      	bpl.n	801b4be <__swsetup_r+0x7a>
 801b498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b49a:	b141      	cbz	r1, 801b4ae <__swsetup_r+0x6a>
 801b49c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b4a0:	4299      	cmp	r1, r3
 801b4a2:	d002      	beq.n	801b4aa <__swsetup_r+0x66>
 801b4a4:	4630      	mov	r0, r6
 801b4a6:	f7ff f813 	bl	801a4d0 <_free_r>
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	6363      	str	r3, [r4, #52]	; 0x34
 801b4ae:	89a3      	ldrh	r3, [r4, #12]
 801b4b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b4b4:	81a3      	strh	r3, [r4, #12]
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	6063      	str	r3, [r4, #4]
 801b4ba:	6923      	ldr	r3, [r4, #16]
 801b4bc:	6023      	str	r3, [r4, #0]
 801b4be:	89a3      	ldrh	r3, [r4, #12]
 801b4c0:	f043 0308 	orr.w	r3, r3, #8
 801b4c4:	81a3      	strh	r3, [r4, #12]
 801b4c6:	6923      	ldr	r3, [r4, #16]
 801b4c8:	b94b      	cbnz	r3, 801b4de <__swsetup_r+0x9a>
 801b4ca:	89a3      	ldrh	r3, [r4, #12]
 801b4cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4d4:	d003      	beq.n	801b4de <__swsetup_r+0x9a>
 801b4d6:	4621      	mov	r1, r4
 801b4d8:	4630      	mov	r0, r6
 801b4da:	f000 f847 	bl	801b56c <__smakebuf_r>
 801b4de:	89a0      	ldrh	r0, [r4, #12]
 801b4e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4e4:	f010 0301 	ands.w	r3, r0, #1
 801b4e8:	d00a      	beq.n	801b500 <__swsetup_r+0xbc>
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	60a3      	str	r3, [r4, #8]
 801b4ee:	6963      	ldr	r3, [r4, #20]
 801b4f0:	425b      	negs	r3, r3
 801b4f2:	61a3      	str	r3, [r4, #24]
 801b4f4:	6923      	ldr	r3, [r4, #16]
 801b4f6:	b943      	cbnz	r3, 801b50a <__swsetup_r+0xc6>
 801b4f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b4fc:	d1ba      	bne.n	801b474 <__swsetup_r+0x30>
 801b4fe:	bd70      	pop	{r4, r5, r6, pc}
 801b500:	0781      	lsls	r1, r0, #30
 801b502:	bf58      	it	pl
 801b504:	6963      	ldrpl	r3, [r4, #20]
 801b506:	60a3      	str	r3, [r4, #8]
 801b508:	e7f4      	b.n	801b4f4 <__swsetup_r+0xb0>
 801b50a:	2000      	movs	r0, #0
 801b50c:	e7f7      	b.n	801b4fe <__swsetup_r+0xba>
 801b50e:	bf00      	nop
 801b510:	200001bc 	.word	0x200001bc
 801b514:	0801ed10 	.word	0x0801ed10
 801b518:	0801ed30 	.word	0x0801ed30
 801b51c:	0801ecf0 	.word	0x0801ecf0

0801b520 <__swhatbuf_r>:
 801b520:	b570      	push	{r4, r5, r6, lr}
 801b522:	460e      	mov	r6, r1
 801b524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b528:	4614      	mov	r4, r2
 801b52a:	2900      	cmp	r1, #0
 801b52c:	461d      	mov	r5, r3
 801b52e:	b096      	sub	sp, #88	; 0x58
 801b530:	da08      	bge.n	801b544 <__swhatbuf_r+0x24>
 801b532:	2200      	movs	r2, #0
 801b534:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b538:	602a      	str	r2, [r5, #0]
 801b53a:	061a      	lsls	r2, r3, #24
 801b53c:	d410      	bmi.n	801b560 <__swhatbuf_r+0x40>
 801b53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b542:	e00e      	b.n	801b562 <__swhatbuf_r+0x42>
 801b544:	466a      	mov	r2, sp
 801b546:	f000 f8a9 	bl	801b69c <_fstat_r>
 801b54a:	2800      	cmp	r0, #0
 801b54c:	dbf1      	blt.n	801b532 <__swhatbuf_r+0x12>
 801b54e:	9a01      	ldr	r2, [sp, #4]
 801b550:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b554:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b558:	425a      	negs	r2, r3
 801b55a:	415a      	adcs	r2, r3
 801b55c:	602a      	str	r2, [r5, #0]
 801b55e:	e7ee      	b.n	801b53e <__swhatbuf_r+0x1e>
 801b560:	2340      	movs	r3, #64	; 0x40
 801b562:	2000      	movs	r0, #0
 801b564:	6023      	str	r3, [r4, #0]
 801b566:	b016      	add	sp, #88	; 0x58
 801b568:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b56c <__smakebuf_r>:
 801b56c:	898b      	ldrh	r3, [r1, #12]
 801b56e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b570:	079d      	lsls	r5, r3, #30
 801b572:	4606      	mov	r6, r0
 801b574:	460c      	mov	r4, r1
 801b576:	d507      	bpl.n	801b588 <__smakebuf_r+0x1c>
 801b578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b57c:	6023      	str	r3, [r4, #0]
 801b57e:	6123      	str	r3, [r4, #16]
 801b580:	2301      	movs	r3, #1
 801b582:	6163      	str	r3, [r4, #20]
 801b584:	b002      	add	sp, #8
 801b586:	bd70      	pop	{r4, r5, r6, pc}
 801b588:	466a      	mov	r2, sp
 801b58a:	ab01      	add	r3, sp, #4
 801b58c:	f7ff ffc8 	bl	801b520 <__swhatbuf_r>
 801b590:	9900      	ldr	r1, [sp, #0]
 801b592:	4605      	mov	r5, r0
 801b594:	4630      	mov	r0, r6
 801b596:	f7ff f803 	bl	801a5a0 <_malloc_r>
 801b59a:	b948      	cbnz	r0, 801b5b0 <__smakebuf_r+0x44>
 801b59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b5a0:	059a      	lsls	r2, r3, #22
 801b5a2:	d4ef      	bmi.n	801b584 <__smakebuf_r+0x18>
 801b5a4:	f023 0303 	bic.w	r3, r3, #3
 801b5a8:	f043 0302 	orr.w	r3, r3, #2
 801b5ac:	81a3      	strh	r3, [r4, #12]
 801b5ae:	e7e3      	b.n	801b578 <__smakebuf_r+0xc>
 801b5b0:	4b0d      	ldr	r3, [pc, #52]	; (801b5e8 <__smakebuf_r+0x7c>)
 801b5b2:	62b3      	str	r3, [r6, #40]	; 0x28
 801b5b4:	89a3      	ldrh	r3, [r4, #12]
 801b5b6:	6020      	str	r0, [r4, #0]
 801b5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5bc:	81a3      	strh	r3, [r4, #12]
 801b5be:	9b00      	ldr	r3, [sp, #0]
 801b5c0:	6120      	str	r0, [r4, #16]
 801b5c2:	6163      	str	r3, [r4, #20]
 801b5c4:	9b01      	ldr	r3, [sp, #4]
 801b5c6:	b15b      	cbz	r3, 801b5e0 <__smakebuf_r+0x74>
 801b5c8:	4630      	mov	r0, r6
 801b5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5ce:	f000 f877 	bl	801b6c0 <_isatty_r>
 801b5d2:	b128      	cbz	r0, 801b5e0 <__smakebuf_r+0x74>
 801b5d4:	89a3      	ldrh	r3, [r4, #12]
 801b5d6:	f023 0303 	bic.w	r3, r3, #3
 801b5da:	f043 0301 	orr.w	r3, r3, #1
 801b5de:	81a3      	strh	r3, [r4, #12]
 801b5e0:	89a0      	ldrh	r0, [r4, #12]
 801b5e2:	4305      	orrs	r5, r0
 801b5e4:	81a5      	strh	r5, [r4, #12]
 801b5e6:	e7cd      	b.n	801b584 <__smakebuf_r+0x18>
 801b5e8:	0801a271 	.word	0x0801a271

0801b5ec <memchr>:
 801b5ec:	4603      	mov	r3, r0
 801b5ee:	b510      	push	{r4, lr}
 801b5f0:	b2c9      	uxtb	r1, r1
 801b5f2:	4402      	add	r2, r0
 801b5f4:	4293      	cmp	r3, r2
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	d101      	bne.n	801b5fe <memchr+0x12>
 801b5fa:	2000      	movs	r0, #0
 801b5fc:	e003      	b.n	801b606 <memchr+0x1a>
 801b5fe:	7804      	ldrb	r4, [r0, #0]
 801b600:	3301      	adds	r3, #1
 801b602:	428c      	cmp	r4, r1
 801b604:	d1f6      	bne.n	801b5f4 <memchr+0x8>
 801b606:	bd10      	pop	{r4, pc}

0801b608 <memmove>:
 801b608:	4288      	cmp	r0, r1
 801b60a:	b510      	push	{r4, lr}
 801b60c:	eb01 0402 	add.w	r4, r1, r2
 801b610:	d902      	bls.n	801b618 <memmove+0x10>
 801b612:	4284      	cmp	r4, r0
 801b614:	4623      	mov	r3, r4
 801b616:	d807      	bhi.n	801b628 <memmove+0x20>
 801b618:	1e43      	subs	r3, r0, #1
 801b61a:	42a1      	cmp	r1, r4
 801b61c:	d008      	beq.n	801b630 <memmove+0x28>
 801b61e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b622:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b626:	e7f8      	b.n	801b61a <memmove+0x12>
 801b628:	4601      	mov	r1, r0
 801b62a:	4402      	add	r2, r0
 801b62c:	428a      	cmp	r2, r1
 801b62e:	d100      	bne.n	801b632 <memmove+0x2a>
 801b630:	bd10      	pop	{r4, pc}
 801b632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b63a:	e7f7      	b.n	801b62c <memmove+0x24>

0801b63c <_realloc_r>:
 801b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b640:	4680      	mov	r8, r0
 801b642:	4614      	mov	r4, r2
 801b644:	460e      	mov	r6, r1
 801b646:	b921      	cbnz	r1, 801b652 <_realloc_r+0x16>
 801b648:	4611      	mov	r1, r2
 801b64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b64e:	f7fe bfa7 	b.w	801a5a0 <_malloc_r>
 801b652:	b92a      	cbnz	r2, 801b660 <_realloc_r+0x24>
 801b654:	f7fe ff3c 	bl	801a4d0 <_free_r>
 801b658:	4625      	mov	r5, r4
 801b65a:	4628      	mov	r0, r5
 801b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b660:	f000 f83e 	bl	801b6e0 <_malloc_usable_size_r>
 801b664:	4284      	cmp	r4, r0
 801b666:	4607      	mov	r7, r0
 801b668:	d802      	bhi.n	801b670 <_realloc_r+0x34>
 801b66a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b66e:	d812      	bhi.n	801b696 <_realloc_r+0x5a>
 801b670:	4621      	mov	r1, r4
 801b672:	4640      	mov	r0, r8
 801b674:	f7fe ff94 	bl	801a5a0 <_malloc_r>
 801b678:	4605      	mov	r5, r0
 801b67a:	2800      	cmp	r0, #0
 801b67c:	d0ed      	beq.n	801b65a <_realloc_r+0x1e>
 801b67e:	42bc      	cmp	r4, r7
 801b680:	4622      	mov	r2, r4
 801b682:	4631      	mov	r1, r6
 801b684:	bf28      	it	cs
 801b686:	463a      	movcs	r2, r7
 801b688:	f7fe ff0c 	bl	801a4a4 <memcpy>
 801b68c:	4631      	mov	r1, r6
 801b68e:	4640      	mov	r0, r8
 801b690:	f7fe ff1e 	bl	801a4d0 <_free_r>
 801b694:	e7e1      	b.n	801b65a <_realloc_r+0x1e>
 801b696:	4635      	mov	r5, r6
 801b698:	e7df      	b.n	801b65a <_realloc_r+0x1e>
	...

0801b69c <_fstat_r>:
 801b69c:	b538      	push	{r3, r4, r5, lr}
 801b69e:	2300      	movs	r3, #0
 801b6a0:	4d06      	ldr	r5, [pc, #24]	; (801b6bc <_fstat_r+0x20>)
 801b6a2:	4604      	mov	r4, r0
 801b6a4:	4608      	mov	r0, r1
 801b6a6:	4611      	mov	r1, r2
 801b6a8:	602b      	str	r3, [r5, #0]
 801b6aa:	f7e6 f929 	bl	8001900 <_fstat>
 801b6ae:	1c43      	adds	r3, r0, #1
 801b6b0:	d102      	bne.n	801b6b8 <_fstat_r+0x1c>
 801b6b2:	682b      	ldr	r3, [r5, #0]
 801b6b4:	b103      	cbz	r3, 801b6b8 <_fstat_r+0x1c>
 801b6b6:	6023      	str	r3, [r4, #0]
 801b6b8:	bd38      	pop	{r3, r4, r5, pc}
 801b6ba:	bf00      	nop
 801b6bc:	20005238 	.word	0x20005238

0801b6c0 <_isatty_r>:
 801b6c0:	b538      	push	{r3, r4, r5, lr}
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	4d05      	ldr	r5, [pc, #20]	; (801b6dc <_isatty_r+0x1c>)
 801b6c6:	4604      	mov	r4, r0
 801b6c8:	4608      	mov	r0, r1
 801b6ca:	602b      	str	r3, [r5, #0]
 801b6cc:	f7e6 f927 	bl	800191e <_isatty>
 801b6d0:	1c43      	adds	r3, r0, #1
 801b6d2:	d102      	bne.n	801b6da <_isatty_r+0x1a>
 801b6d4:	682b      	ldr	r3, [r5, #0]
 801b6d6:	b103      	cbz	r3, 801b6da <_isatty_r+0x1a>
 801b6d8:	6023      	str	r3, [r4, #0]
 801b6da:	bd38      	pop	{r3, r4, r5, pc}
 801b6dc:	20005238 	.word	0x20005238

0801b6e0 <_malloc_usable_size_r>:
 801b6e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6e4:	1f18      	subs	r0, r3, #4
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	bfbc      	itt	lt
 801b6ea:	580b      	ldrlt	r3, [r1, r0]
 801b6ec:	18c0      	addlt	r0, r0, r3
 801b6ee:	4770      	bx	lr

0801b6f0 <_init>:
 801b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6f2:	bf00      	nop
 801b6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b6f6:	bc08      	pop	{r3}
 801b6f8:	469e      	mov	lr, r3
 801b6fa:	4770      	bx	lr

0801b6fc <_fini>:
 801b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6fe:	bf00      	nop
 801b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b702:	bc08      	pop	{r3}
 801b704:	469e      	mov	lr, r3
 801b706:	4770      	bx	lr
