
NUCLEO_F207.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d54  08015ac4  08015ac4  00025ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018818  08018818  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08018818  08018818  00028818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018820  08018820  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018820  08018820  00028820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018824  08018824  00028824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08018828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bb10  20000084  080188ac  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb94  080188ac  0003bb94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046f59  00000000  00000000  000300ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c47  00000000  00000000  00077006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002418  00000000  00000000  0007fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021e0  00000000  00000000  00082068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031939  00000000  00000000  00084248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000388e2  00000000  00000000  000b5b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb0e3  00000000  00000000  000ee463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d9546  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b88  00000000  00000000  001d959c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015aac 	.word	0x08015aac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08015aac 	.word	0x08015aac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b96e 	b.w	80004e8 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	468e      	mov	lr, r1
 8000230:	2b00      	cmp	r3, #0
 8000232:	f040 8083 	bne.w	800033c <__udivmoddi4+0x118>
 8000236:	428a      	cmp	r2, r1
 8000238:	4617      	mov	r7, r2
 800023a:	d947      	bls.n	80002cc <__udivmoddi4+0xa8>
 800023c:	fab2 f382 	clz	r3, r2
 8000240:	b14b      	cbz	r3, 8000256 <__udivmoddi4+0x32>
 8000242:	f1c3 0120 	rsb	r1, r3, #32
 8000246:	fa05 fe03 	lsl.w	lr, r5, r3
 800024a:	fa20 f101 	lsr.w	r1, r0, r1
 800024e:	409f      	lsls	r7, r3
 8000250:	ea41 0e0e 	orr.w	lr, r1, lr
 8000254:	409c      	lsls	r4, r3
 8000256:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025a:	fbbe fcf8 	udiv	ip, lr, r8
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb08 e21c 	mls	r2, r8, ip, lr
 8000266:	fb0c f009 	mul.w	r0, ip, r9
 800026a:	0c21      	lsrs	r1, r4, #16
 800026c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000270:	4290      	cmp	r0, r2
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x66>
 8000274:	18ba      	adds	r2, r7, r2
 8000276:	f10c 31ff 	add.w	r1, ip, #4294967295
 800027a:	f080 8118 	bcs.w	80004ae <__udivmoddi4+0x28a>
 800027e:	4290      	cmp	r0, r2
 8000280:	f240 8115 	bls.w	80004ae <__udivmoddi4+0x28a>
 8000284:	f1ac 0c02 	sub.w	ip, ip, #2
 8000288:	443a      	add	r2, r7
 800028a:	1a12      	subs	r2, r2, r0
 800028c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000290:	fb08 2210 	mls	r2, r8, r0, r2
 8000294:	fb00 f109 	mul.w	r1, r0, r9
 8000298:	b2a4      	uxth	r4, r4
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	42a1      	cmp	r1, r4
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a2:	193c      	adds	r4, r7, r4
 80002a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a8:	f080 8103 	bcs.w	80004b2 <__udivmoddi4+0x28e>
 80002ac:	42a1      	cmp	r1, r4
 80002ae:	f240 8100 	bls.w	80004b2 <__udivmoddi4+0x28e>
 80002b2:	3802      	subs	r0, #2
 80002b4:	443c      	add	r4, r7
 80002b6:	1a64      	subs	r4, r4, r1
 80002b8:	2100      	movs	r1, #0
 80002ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002be:	b11e      	cbz	r6, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	2200      	movs	r2, #0
 80002c2:	40dc      	lsrs	r4, r3
 80002c4:	e9c6 4200 	strd	r4, r2, [r6]
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	b902      	cbnz	r2, 80002d0 <__udivmoddi4+0xac>
 80002ce:	deff      	udf	#255	; 0xff
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14f      	bne.n	8000378 <__udivmoddi4+0x154>
 80002d8:	1a8d      	subs	r5, r1, r2
 80002da:	2101      	movs	r1, #1
 80002dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002e0:	fa1f f882 	uxth.w	r8, r2
 80002e4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002e8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002ec:	fb08 f00c 	mul.w	r0, r8, ip
 80002f0:	0c22      	lsrs	r2, r4, #16
 80002f2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002f6:	42a8      	cmp	r0, r5
 80002f8:	d907      	bls.n	800030a <__udivmoddi4+0xe6>
 80002fa:	197d      	adds	r5, r7, r5
 80002fc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0xe4>
 8000302:	42a8      	cmp	r0, r5
 8000304:	f200 80e9 	bhi.w	80004da <__udivmoddi4+0x2b6>
 8000308:	4694      	mov	ip, r2
 800030a:	1a2d      	subs	r5, r5, r0
 800030c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000310:	fb0e 5510 	mls	r5, lr, r0, r5
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031e:	45a0      	cmp	r8, r4
 8000320:	d907      	bls.n	8000332 <__udivmoddi4+0x10e>
 8000322:	193c      	adds	r4, r7, r4
 8000324:	f100 32ff 	add.w	r2, r0, #4294967295
 8000328:	d202      	bcs.n	8000330 <__udivmoddi4+0x10c>
 800032a:	45a0      	cmp	r8, r4
 800032c:	f200 80d9 	bhi.w	80004e2 <__udivmoddi4+0x2be>
 8000330:	4610      	mov	r0, r2
 8000332:	eba4 0408 	sub.w	r4, r4, r8
 8000336:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800033a:	e7c0      	b.n	80002be <__udivmoddi4+0x9a>
 800033c:	428b      	cmp	r3, r1
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x12e>
 8000340:	2e00      	cmp	r6, #0
 8000342:	f000 80b1 	beq.w	80004a8 <__udivmoddi4+0x284>
 8000346:	2100      	movs	r1, #0
 8000348:	e9c6 0500 	strd	r0, r5, [r6]
 800034c:	4608      	mov	r0, r1
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f183 	clz	r1, r3
 8000356:	2900      	cmp	r1, #0
 8000358:	d14b      	bne.n	80003f2 <__udivmoddi4+0x1ce>
 800035a:	42ab      	cmp	r3, r5
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0x140>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80b9 	bhi.w	80004d6 <__udivmoddi4+0x2b2>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb65 0303 	sbc.w	r3, r5, r3
 800036a:	2001      	movs	r0, #1
 800036c:	469e      	mov	lr, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0aa      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000372:	e9c6 4e00 	strd	r4, lr, [r6]
 8000376:	e7a7      	b.n	80002c8 <__udivmoddi4+0xa4>
 8000378:	409f      	lsls	r7, r3
 800037a:	f1c3 0220 	rsb	r2, r3, #32
 800037e:	40d1      	lsrs	r1, r2
 8000380:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000384:	fbb1 f0fe 	udiv	r0, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	fa24 f202 	lsr.w	r2, r4, r2
 8000394:	409d      	lsls	r5, r3
 8000396:	fb00 fc08 	mul.w	ip, r0, r8
 800039a:	432a      	orrs	r2, r5
 800039c:	0c15      	lsrs	r5, r2, #16
 800039e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003a2:	45ac      	cmp	ip, r5
 80003a4:	fa04 f403 	lsl.w	r4, r4, r3
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0x19a>
 80003aa:	197d      	adds	r5, r7, r5
 80003ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b0:	f080 808f 	bcs.w	80004d2 <__udivmoddi4+0x2ae>
 80003b4:	45ac      	cmp	ip, r5
 80003b6:	f240 808c 	bls.w	80004d2 <__udivmoddi4+0x2ae>
 80003ba:	3802      	subs	r0, #2
 80003bc:	443d      	add	r5, r7
 80003be:	eba5 050c 	sub.w	r5, r5, ip
 80003c2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003c6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003ca:	fb01 f908 	mul.w	r9, r1, r8
 80003ce:	b295      	uxth	r5, r2
 80003d0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003d4:	45a9      	cmp	r9, r5
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x1c4>
 80003d8:	197d      	adds	r5, r7, r5
 80003da:	f101 32ff 	add.w	r2, r1, #4294967295
 80003de:	d274      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 80003e0:	45a9      	cmp	r9, r5
 80003e2:	d972      	bls.n	80004ca <__udivmoddi4+0x2a6>
 80003e4:	3902      	subs	r1, #2
 80003e6:	443d      	add	r5, r7
 80003e8:	eba5 0509 	sub.w	r5, r5, r9
 80003ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003f0:	e778      	b.n	80002e4 <__udivmoddi4+0xc0>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fc:	ea4c 0c03 	orr.w	ip, ip, r3
 8000400:	fa25 f407 	lsr.w	r4, r5, r7
 8000404:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000408:	fbb4 f9fe 	udiv	r9, r4, lr
 800040c:	fa1f f88c 	uxth.w	r8, ip
 8000410:	fb0e 4419 	mls	r4, lr, r9, r4
 8000414:	fa20 f307 	lsr.w	r3, r0, r7
 8000418:	fb09 fa08 	mul.w	sl, r9, r8
 800041c:	408d      	lsls	r5, r1
 800041e:	431d      	orrs	r5, r3
 8000420:	0c2b      	lsrs	r3, r5, #16
 8000422:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000426:	45a2      	cmp	sl, r4
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 f301 	lsl.w	r3, r0, r1
 8000430:	d909      	bls.n	8000446 <__udivmoddi4+0x222>
 8000432:	eb1c 0404 	adds.w	r4, ip, r4
 8000436:	f109 30ff 	add.w	r0, r9, #4294967295
 800043a:	d248      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 800043c:	45a2      	cmp	sl, r4
 800043e:	d946      	bls.n	80004ce <__udivmoddi4+0x2aa>
 8000440:	f1a9 0902 	sub.w	r9, r9, #2
 8000444:	4464      	add	r4, ip
 8000446:	eba4 040a 	sub.w	r4, r4, sl
 800044a:	fbb4 f0fe 	udiv	r0, r4, lr
 800044e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000452:	fb00 fa08 	mul.w	sl, r0, r8
 8000456:	b2ad      	uxth	r5, r5
 8000458:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800045c:	45a2      	cmp	sl, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x24e>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d22d      	bcs.n	80004c6 <__udivmoddi4+0x2a2>
 800046a:	45a2      	cmp	sl, r4
 800046c:	d92b      	bls.n	80004c6 <__udivmoddi4+0x2a2>
 800046e:	3802      	subs	r0, #2
 8000470:	4464      	add	r4, ip
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	eba4 040a 	sub.w	r4, r4, sl
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d319      	bcc.n	80004ba <__udivmoddi4+0x296>
 8000486:	d016      	beq.n	80004b6 <__udivmoddi4+0x292>
 8000488:	b15e      	cbz	r6, 80004a2 <__udivmoddi4+0x27e>
 800048a:	ebb3 020e 	subs.w	r2, r3, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	fa22 f301 	lsr.w	r3, r2, r1
 800049a:	431f      	orrs	r7, r3
 800049c:	40cc      	lsrs	r4, r1
 800049e:	e9c6 7400 	strd	r7, r4, [r6]
 80004a2:	2100      	movs	r1, #0
 80004a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a8:	4631      	mov	r1, r6
 80004aa:	4630      	mov	r0, r6
 80004ac:	e70c      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004ae:	468c      	mov	ip, r1
 80004b0:	e6eb      	b.n	800028a <__udivmoddi4+0x66>
 80004b2:	4610      	mov	r0, r2
 80004b4:	e6ff      	b.n	80002b6 <__udivmoddi4+0x92>
 80004b6:	4543      	cmp	r3, r8
 80004b8:	d2e6      	bcs.n	8000488 <__udivmoddi4+0x264>
 80004ba:	ebb8 0e02 	subs.w	lr, r8, r2
 80004be:	eb69 050c 	sbc.w	r5, r9, ip
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7e0      	b.n	8000488 <__udivmoddi4+0x264>
 80004c6:	4628      	mov	r0, r5
 80004c8:	e7d3      	b.n	8000472 <__udivmoddi4+0x24e>
 80004ca:	4611      	mov	r1, r2
 80004cc:	e78c      	b.n	80003e8 <__udivmoddi4+0x1c4>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e7b9      	b.n	8000446 <__udivmoddi4+0x222>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e773      	b.n	80003be <__udivmoddi4+0x19a>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e749      	b.n	800036e <__udivmoddi4+0x14a>
 80004da:	f1ac 0c02 	sub.w	ip, ip, #2
 80004de:	443d      	add	r5, r7
 80004e0:	e713      	b.n	800030a <__udivmoddi4+0xe6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	e724      	b.n	8000332 <__udivmoddi4+0x10e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <MX_CAN1_Init+0x60>)
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_CAN1_Init+0x60>)
 80004f8:	2210      	movs	r2, #16
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <MX_CAN1_Init+0x60>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_CAN1_Init+0x60>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <MX_CAN1_Init+0x60>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_CAN1_Init+0x60>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_CAN1_Init+0x60>)
 8000516:	2200      	movs	r2, #0
 8000518:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_CAN1_Init+0x60>)
 800051c:	2200      	movs	r2, #0
 800051e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_CAN1_Init+0x60>)
 8000522:	2200      	movs	r2, #0
 8000524:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_CAN1_Init+0x60>)
 8000528:	2200      	movs	r2, #0
 800052a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <MX_CAN1_Init+0x60>)
 800052e:	2200      	movs	r2, #0
 8000530:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_CAN1_Init+0x60>)
 8000534:	2200      	movs	r2, #0
 8000536:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_CAN1_Init+0x60>)
 800053a:	f000 febd 	bl	80012b8 <HAL_CAN_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000544:	f000 fbd8 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20004c2c 	.word	0x20004c2c
 8000550:	40006400 	.word	0x40006400

08000554 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0314 	add.w	r3, r7, #20
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <HAL_CAN_MspInit+0x84>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d12b      	bne.n	80005ce <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	613b      	str	r3, [r7, #16]
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_CAN_MspInit+0x88>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	4a17      	ldr	r2, [pc, #92]	; (80005dc <HAL_CAN_MspInit+0x88>)
 8000580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000584:	6413      	str	r3, [r2, #64]	; 0x40
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_CAN_MspInit+0x88>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <HAL_CAN_MspInit+0x88>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a10      	ldr	r2, [pc, #64]	; (80005dc <HAL_CAN_MspInit+0x88>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_CAN_MspInit+0x88>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0308 	and.w	r3, r3, #8
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005ae:	2303      	movs	r3, #3
 80005b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b2:	2302      	movs	r3, #2
 80005b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005be:	2309      	movs	r3, #9
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <HAL_CAN_MspInit+0x8c>)
 80005ca:	f002 f9d9 	bl	8002980 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40006400 	.word	0x40006400
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40020c00 	.word	0x40020c00

080005e4 <LedCGIhandler>:
// [* SSI #3 *]
char const *theSSItags[numSSItags] = { "tag1", "tag2" };

// the actual function for handling CGI [= CGI #5 =]
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[],
char *pcValue[]) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	603b      	str	r3, [r7, #0]

	uint32_t i = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

	if (iIndex == 0) {
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d110      	bne.n	800061e <LedCGIhandler+0x3a>

		//turning the LED lights off
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4829      	ldr	r0, [pc, #164]	; (80006a8 <LedCGIhandler+0xc4>)
 8000602:	f002 fb5b 	bl	8002cbc <HAL_GPIO_WritePin>

		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD2ON = false;
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <LedCGIhandler+0xc8>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000612:	4825      	ldr	r0, [pc, #148]	; (80006a8 <LedCGIhandler+0xc4>)
 8000614:	f002 fb52 	bl	8002cbc <HAL_GPIO_WritePin>

		// we put this variable to false to indicate that the LD* LED on the board is not ON
		LD1ON = false;
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <LedCGIhandler+0xcc>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]

	}

	for (i = 0; i < iNumParams; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	e038      	b.n	8000696 <LedCGIhandler+0xb2>

		if (strcmp(pcParam[i], "led") == 0)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4921      	ldr	r1, [pc, #132]	; (80006b4 <LedCGIhandler+0xd0>)
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdcd 	bl	80001d0 <strcmp>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d129      	bne.n	8000690 <LedCGIhandler+0xac>

		{

			if (strcmp(pcValue[i], "1") == 0) {
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	491c      	ldr	r1, [pc, #112]	; (80006b8 <LedCGIhandler+0xd4>)
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fdc1 	bl	80001d0 <strcmp>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d109      	bne.n	8000668 <LedCGIhandler+0x84>

				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	4813      	ldr	r0, [pc, #76]	; (80006a8 <LedCGIhandler+0xc4>)
 800065c:	f002 fb2e 	bl	8002cbc <HAL_GPIO_WritePin>

				// LD3 LED (red) on the board is ON!
				LD1ON = true;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <LedCGIhandler+0xcc>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e013      	b.n	8000690 <LedCGIhandler+0xac>

			}

			else if (strcmp(pcValue[i], "2") == 0) {
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	4413      	add	r3, r2
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4912      	ldr	r1, [pc, #72]	; (80006bc <LedCGIhandler+0xd8>)
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdab 	bl	80001d0 <strcmp>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d107      	bne.n	8000690 <LedCGIhandler+0xac>

				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <LedCGIhandler+0xc4>)
 8000686:	f002 fb19 	bl	8002cbc <HAL_GPIO_WritePin>

				// LD2 LED (blue) on the board is ON!
				LD2ON = true;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <LedCGIhandler+0xc8>)
 800068c:	2201      	movs	r2, #1
 800068e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iNumParams; i++) {
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	697a      	ldr	r2, [r7, #20]
 800069a:	429a      	cmp	r2, r3
 800069c:	d3c2      	bcc.n	8000624 <LedCGIhandler+0x40>
		}

	}

	// the extension .shtml for SSI to work
	return "/index.shtml";
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <LedCGIhandler+0xdc>)

} // END [= CGI #5 =]
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020400 	.word	0x40020400
 80006ac:	200000a1 	.word	0x200000a1
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	08015aec 	.word	0x08015aec
 80006b8:	08015af0 	.word	0x08015af0
 80006bc:	08015af4 	.word	0x08015af4
 80006c0:	08015af8 	.word	0x08015af8

080006c4 <myCGIinit>:

// function to initialize CGI [= CGI #6 =]
void myCGIinit(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	//add LED control CGI to the table
	theCGItable[0] = LedCGI;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <myCGIinit+0x1c>)
 80006ca:	4a06      	ldr	r2, [pc, #24]	; (80006e4 <myCGIinit+0x20>)
 80006cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d0:	e883 0003 	stmia.w	r3, {r0, r1}
	//give the table to the HTTP server
	http_set_cgi_handlers(theCGItable, 1);
 80006d4:	2101      	movs	r1, #1
 80006d6:	4802      	ldr	r0, [pc, #8]	; (80006e0 <myCGIinit+0x1c>)
 80006d8:	f008 fff4 	bl	80096c4 <http_set_cgi_handlers>
} // END [= CGI #6 =]
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20004e48 	.word	0x20004e48
 80006e4:	08018330 	.word	0x08018330

080006e8 <mySSIHandler>:

// the actual function for SSI [* SSI #4 *]
u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 80006e8:	b5b0      	push	{r4, r5, r7, lr}
 80006ea:	b092      	sub	sp, #72	; 0x48
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]

	if (iIndex == 0) {
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d141      	bne.n	800077e <mySSIHandler+0x96>

		if (LD1ON == false) {
 80006fa:	4b46      	ldr	r3, [pc, #280]	; (8000814 <mySSIHandler+0x12c>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f083 0301 	eor.w	r3, r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d019      	beq.n	800073c <mySSIHandler+0x54>

			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\">";
 8000708:	4b43      	ldr	r3, [pc, #268]	; (8000818 <mySSIHandler+0x130>)
 800070a:	f107 0410 	add.w	r4, r7, #16
 800070e:	461d      	mov	r5, r3
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000718:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800071c:	c407      	stmia	r4!, {r0, r1, r2}
 800071e:	7023      	strb	r3, [r4, #0]

			strcpy(pcInsert, myStr1);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	68b8      	ldr	r0, [r7, #8]
 8000728:	f014 fa5d 	bl	8014be6 <strcpy>

			return strlen(myStr1);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd57 	bl	80001e4 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29b      	uxth	r3, r3
 800073a:	e066      	b.n	800080a <mySSIHandler+0x122>
		}

		else if (LD1ON == true) {
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <mySSIHandler+0x12c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d061      	beq.n	8000808 <mySSIHandler+0x120>

			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr1[] =
 8000744:	4b35      	ldr	r3, [pc, #212]	; (800081c <mySSIHandler+0x134>)
 8000746:	f107 0410 	add.w	r4, r7, #16
 800074a:	461d      	mov	r5, r3
 800074c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800075c:	6020      	str	r0, [r4, #0]
 800075e:	3404      	adds	r4, #4
 8000760:	7021      	strb	r1, [r4, #0]
			"<input value=\"1\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr1);
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	4619      	mov	r1, r3
 8000768:	68b8      	ldr	r0, [r7, #8]
 800076a:	f014 fa3c 	bl	8014be6 <strcpy>

			return strlen(myStr1);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd36 	bl	80001e4 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29b      	uxth	r3, r3
 800077c:	e045      	b.n	800080a <mySSIHandler+0x122>

		}

	}

	else if (iIndex == 1)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d141      	bne.n	8000808 <mySSIHandler+0x120>

	{
		if (LD2ON == false) {
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <mySSIHandler+0x138>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	f083 0301 	eor.w	r3, r3, #1
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2b00      	cmp	r3, #0
 8000790:	d019      	beq.n	80007c6 <mySSIHandler+0xde>
			char myStr2[] = "<input value=\"2\" name=\"led\" type=\"checkbox\">";
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <mySSIHandler+0x13c>)
 8000794:	f107 0410 	add.w	r4, r7, #16
 8000798:	461d      	mov	r5, r3
 800079a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007a6:	c407      	stmia	r4!, {r0, r1, r2}
 80007a8:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr2);
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	4619      	mov	r1, r3
 80007b0:	68b8      	ldr	r0, [r7, #8]
 80007b2:	f014 fa18 	bl	8014be6 <strcpy>

			return strlen(myStr2);
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd12 	bl	80001e4 <strlen>
 80007c0:	4603      	mov	r3, r0
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	e021      	b.n	800080a <mySSIHandler+0x122>
		}

		else if (LD2ON == true) {
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <mySSIHandler+0x138>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d01c      	beq.n	8000808 <mySSIHandler+0x120>

			// since the LD2 blue LED on the board is ON we make its checkbox checked!
			char myStr2[] =
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <mySSIHandler+0x140>)
 80007d0:	f107 0410 	add.w	r4, r7, #16
 80007d4:	461d      	mov	r5, r3
 80007d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007e6:	6020      	str	r0, [r4, #0]
 80007e8:	3404      	adds	r4, #4
 80007ea:	7021      	strb	r1, [r4, #0]
			"<input value=\"2\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr2);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	68b8      	ldr	r0, [r7, #8]
 80007f4:	f014 f9f7 	bl	8014be6 <strcpy>

			return strlen(myStr2);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fcf1 	bl	80001e4 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29b      	uxth	r3, r3
 8000806:	e000      	b.n	800080a <mySSIHandler+0x122>

		}

	}

	return 0;
 8000808:	2300      	movs	r3, #0

}
 800080a:	4618      	mov	r0, r3
 800080c:	3748      	adds	r7, #72	; 0x48
 800080e:	46bd      	mov	sp, r7
 8000810:	bdb0      	pop	{r4, r5, r7, pc}
 8000812:	bf00      	nop
 8000814:	200000a0 	.word	0x200000a0
 8000818:	08015b08 	.word	0x08015b08
 800081c:	08015b38 	.word	0x08015b38
 8000820:	200000a1 	.word	0x200000a1
 8000824:	08015b70 	.word	0x08015b70
 8000828:	08015ba0 	.word	0x08015ba0

0800082c <mySSIinit>:

// function to initialize SSI [* SSI #5 *]
void mySSIinit(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,
 8000830:	2202      	movs	r2, #2
 8000832:	4903      	ldr	r1, [pc, #12]	; (8000840 <mySSIinit+0x14>)
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <mySSIinit+0x18>)
 8000836:	f008 ff03 	bl	8009640 <http_set_ssi_handler>
	numSSItags);
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000000 	.word	0x20000000
 8000844:	080006e9 	.word	0x080006e9

08000848 <mqtt_sub_request_cb>:

mqtt_client_t mqtt_client;

static void mqtt_sub_request_cb(void *arg, err_t result)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
//  printf("Subscribe result: %d\n", result);
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
	...

08000860 <mqtt_incoming_publish_cb>:

static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
//  printf("Incoming publish at topic %s with total length %u\n", topic, (unsigned int)tot_len);

  /* Decode topic string into a user defined reference */
  if(strcmp(topic, "print_payload") == 0) {
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <mqtt_incoming_publish_cb+0x40>)
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f7ff fcae 	bl	80001d0 <strcmp>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d103      	bne.n	8000882 <mqtt_incoming_publish_cb+0x22>
    inpub_id = 0;
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <mqtt_incoming_publish_cb+0x44>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
    inpub_id = 1;
  } else {
    /* For all other topics */
    inpub_id = 2;
  }
}
 8000880:	e00a      	b.n	8000898 <mqtt_incoming_publish_cb+0x38>
  } else if(topic[0] == 'A') {
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b41      	cmp	r3, #65	; 0x41
 8000888:	d103      	bne.n	8000892 <mqtt_incoming_publish_cb+0x32>
    inpub_id = 1;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <mqtt_incoming_publish_cb+0x44>)
 800088c:	2201      	movs	r2, #1
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	e002      	b.n	8000898 <mqtt_incoming_publish_cb+0x38>
    inpub_id = 2;
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <mqtt_incoming_publish_cb+0x44>)
 8000894:	2202      	movs	r2, #2
 8000896:	601a      	str	r2, [r3, #0]
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08015bd8 	.word	0x08015bd8
 80008a4:	200000a4 	.word	0x200000a4

080008a8 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	4611      	mov	r1, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	460b      	mov	r3, r1
 80008b8:	80fb      	strh	r3, [r7, #6]
 80008ba:	4613      	mov	r3, r2
 80008bc:	717b      	strb	r3, [r7, #5]
//  printf("Incoming publish payload with length %d, flags %u\n", len, (unsigned int)flags);

  if(flags & MQTT_DATA_FLAG_LAST) {
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <mqtt_incoming_data_cb+0x26>
    /* Last fragment of payload received (or whole part if payload fits receive buffer
       See MQTT_VAR_HEADER_BUFFER_LEN)  */

    /* Call function or do action depending on reference, in this case inpub_id */
    if(inpub_id == 0) {
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <mqtt_incoming_data_cb+0x30>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
//      printf("mqtt_incoming_data_cb: Ignoring payload...\n");
    }
  } else {
    /* Handle fragmented payload, store in buffer, write to file or whatever */
  }
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	200000a4 	.word	0x200000a4

080008dc <mqtt_connection_cb>:



static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4613      	mov	r3, r2
 80008e8:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d112      	bne.n	8000916 <mqtt_connection_cb+0x3a>
//    printf("mqtt_connection_cb: Successfully connected\n");

    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <mqtt_connection_cb+0x48>)
 80008f4:	490c      	ldr	r1, [pc, #48]	; (8000928 <mqtt_connection_cb+0x4c>)
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f00a f8b2 	bl	800aa60 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "subtopic", 1, mqtt_sub_request_cb, arg);
 80008fc:	2301      	movs	r3, #1
 80008fe:	9301      	str	r3, [sp, #4]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	9300      	str	r3, [sp, #0]
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <mqtt_connection_cb+0x50>)
 8000906:	2201      	movs	r2, #1
 8000908:	4909      	ldr	r1, [pc, #36]	; (8000930 <mqtt_connection_cb+0x54>)
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f009 ffd4 	bl	800a8b8 <mqtt_sub_unsub>
 8000910:	4603      	mov	r3, r0
 8000912:	75fb      	strb	r3, [r7, #23]
//    printf("mqtt_connection_cb: Disconnected, reason: %d\n", status);

    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 8000914:	e002      	b.n	800091c <mqtt_connection_cb+0x40>
    example_do_connect(client);
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f000 f80c 	bl	8000934 <example_do_connect>
}
 800091c:	bf00      	nop
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	080008a9 	.word	0x080008a9
 8000928:	08000861 	.word	0x08000861
 800092c:	08000849 	.word	0x08000849
 8000930:	08015be8 	.word	0x08015be8

08000934 <example_do_connect>:



void example_do_connect(mqtt_client_t *client, const char *topic)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af02      	add	r7, sp, #8
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	221c      	movs	r2, #28
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f014 f920 	bl	8014b8c <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id = "stm32";
 800094c:	4b0b      	ldr	r3, [pc, #44]	; (800097c <example_do_connect+0x48>)
 800094e:	613b      	str	r3, [r7, #16]
  /* Initiate client and connect to server, if this fails immediately an error code is returned
     otherwise mqtt_connection_cb will be called with connection result after attempting
     to establish a connection with the server.
     For now MQTT version 3.1.1 is always used */
  ip_addr_t mqttServerIP;
  IP4_ADDR(&mqttServerIP, 192, 168, 1, 200);
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <example_do_connect+0x4c>)
 8000952:	60fb      	str	r3, [r7, #12]
//  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, 0, &ci);
  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, &topic, &ci);
 8000954:	f107 010c 	add.w	r1, r7, #12
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	9301      	str	r3, [sp, #4]
 800095e:	463b      	mov	r3, r7
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <example_do_connect+0x50>)
 8000964:	f240 725b 	movw	r2, #1883	; 0x75b
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f00a f89d 	bl	800aaa8 <mqtt_client_connect>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
	else
	{
//		LCD_UsrLog("Connected");
	}
}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	08015bf4 	.word	0x08015bf4
 8000980:	c801a8c0 	.word	0xc801a8c0
 8000984:	080008dd 	.word	0x080008dd

08000988 <mqtt_pub_request_cb>:


/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
//    printf("Publish result: %d\n", result);
  }
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
	...

080009a0 <example_publish>:


void example_publish(mqtt_client_t *client, void *arg)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af04      	add	r7, sp, #16
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  const char *pub_payload= "Test z NUCLEO-F207";
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <example_publish+0x48>)
 80009ac:	60fb      	str	r3, [r7, #12]
  err_t err;
  u8_t qos = 2; /* 0 1 or 2, see MQTT specification */
 80009ae:	2302      	movs	r3, #2
 80009b0:	72fb      	strb	r3, [r7, #11]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 80009b2:	2300      	movs	r3, #0
 80009b4:	72bb      	strb	r3, [r7, #10]
  err = mqtt_publish(client, "DataSoft/stm32", pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fc14 	bl	80001e4 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	9303      	str	r3, [sp, #12]
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <example_publish+0x4c>)
 80009c6:	9302      	str	r3, [sp, #8]
 80009c8:	7abb      	ldrb	r3, [r7, #10]
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	7afb      	ldrb	r3, [r7, #11]
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	4613      	mov	r3, r2
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4906      	ldr	r1, [pc, #24]	; (80009f0 <example_publish+0x50>)
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f009 fe9c 	bl	800a714 <mqtt_publish>
 80009dc:	4603      	mov	r3, r0
 80009de:	727b      	strb	r3, [r7, #9]
  if(err != ERR_OK) {
//    printf("Publish err: %d\n", err);
  }
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	08015bfc 	.word	0x08015bfc
 80009ec:	08000989 	.word	0x08000989
 80009f0:	08015c10 	.word	0x08015c10

080009f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <vApplicationGetIdleTaskMemory+0x30>)
 8000a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a12:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200000a8 	.word	0x200000a8
 8000a24:	200000fc 	.word	0x200000fc

08000a28 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_FREERTOS_Init+0x30>)
 8000a30:	1d3c      	adds	r4, r7, #4
 8000a32:	461d      	mov	r5, r3
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f004 fb6b 	bl	8005120 <osThreadCreate>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <MX_FREERTOS_Init+0x34>)
 8000a4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bdb0      	pop	{r4, r5, r7, pc}
 8000a58:	08015c20 	.word	0x08015c20
 8000a5c:	20004c54 	.word	0x20004c54

08000a60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a68:	f003 fd90 	bl	800458c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

  // initializing the HTTPd [-HTTPd #2-]
  httpd_init();
 8000a6c:	f008 fd9c 	bl	80095a8 <httpd_init>

  // initializing CGI  [= CGI #7 =]
  myCGIinit();
 8000a70:	f7ff fe28 	bl	80006c4 <myCGIinit>

  // initializing SSI [* SSI #6 *]
  mySSIinit();
 8000a74:	f7ff feda 	bl	800082c <mySSIinit>
  example_do_connect(&mqtt_client, 'DataSoft/stm32');
 8000a78:	4908      	ldr	r1, [pc, #32]	; (8000a9c <StartDefaultTask+0x3c>)
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <StartDefaultTask+0x40>)
 8000a7c:	f7ff ff5a 	bl	8000934 <example_do_connect>

  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a80:	2101      	movs	r1, #1
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <StartDefaultTask+0x44>)
 8000a84:	f002 f932 	bl	8002cec <HAL_GPIO_TogglePin>
	  example_publish(&mqtt_client, 0);
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <StartDefaultTask+0x40>)
 8000a8c:	f7ff ff88 	bl	80009a0 <example_publish>
	  osDelay(1000);
 8000a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a94:	f004 fb90 	bl	80051b8 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a98:	e7f2      	b.n	8000a80 <StartDefaultTask+0x20>
 8000a9a:	bf00      	nop
 8000a9c:	746d3332 	.word	0x746d3332
 8000aa0:	20004c58 	.word	0x20004c58
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08c      	sub	sp, #48	; 0x30
 8000aac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	4b52      	ldr	r3, [pc, #328]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a51      	ldr	r2, [pc, #324]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b4f      	ldr	r3, [pc, #316]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	61bb      	str	r3, [r7, #24]
 8000ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a4a      	ldr	r2, [pc, #296]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a43      	ldr	r2, [pc, #268]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	4b3d      	ldr	r3, [pc, #244]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a3c      	ldr	r2, [pc, #240]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a35      	ldr	r2, [pc, #212]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0308 	and.w	r3, r3, #8
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a2e      	ldr	r2, [pc, #184]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_GPIO_Init+0x164>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b6c:	4828      	ldr	r0, [pc, #160]	; (8000c10 <MX_GPIO_Init+0x168>)
 8000b6e:	f002 f8a5 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2140      	movs	r1, #64	; 0x40
 8000b76:	4827      	ldr	r0, [pc, #156]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000b78:	f002 f8a0 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b82:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MX_GPIO_Init+0x170>)
 8000b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4822      	ldr	r0, [pc, #136]	; (8000c1c <MX_GPIO_Init+0x174>)
 8000b92:	f001 fef5 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	4619      	mov	r1, r3
 8000bac:	4818      	ldr	r0, [pc, #96]	; (8000c10 <MX_GPIO_Init+0x168>)
 8000bae:	f001 fee7 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bb2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4811      	ldr	r0, [pc, #68]	; (8000c10 <MX_GPIO_Init+0x168>)
 8000bcc:	f001 fed8 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bd0:	2340      	movs	r3, #64	; 0x40
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000be8:	f001 feca 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_GPIO_Init+0x16c>)
 8000c00:	f001 febe 	bl	8002980 <HAL_GPIO_Init>

}
 8000c04:	bf00      	nop
 8000c06:	3730      	adds	r7, #48	; 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020400 	.word	0x40020400
 8000c14:	40021800 	.word	0x40021800
 8000c18:	10110000 	.word	0x10110000
 8000c1c:	40020800 	.word	0x40020800

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c24:	f000 fae6 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c28:	f000 f80d 	bl	8000c46 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2c:	f7ff ff3c 	bl	8000aa8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c30:	f000 f9c0 	bl	8000fb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c34:	f000 fa30 	bl	8001098 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 8000c38:	f7ff fc58 	bl	80004ec <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c3c:	f7ff fef4 	bl	8000a28 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000c40:	f004 fa57 	bl	80050f2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <main+0x24>

08000c46 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b092      	sub	sp, #72	; 0x48
 8000c4a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	2230      	movs	r2, #48	; 0x30
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f013 ff99 	bl	8014b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c70:	2310      	movs	r3, #16
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c74:	2302      	movs	r3, #2
 8000c76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000c7c:	230d      	movs	r3, #13
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000c80:	23c3      	movs	r3, #195	; 0xc3
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c88:	2305      	movs	r3, #5
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 f961 	bl	8002f58 <HAL_RCC_OscConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000c9c:	f000 f82c 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2103      	movs	r1, #3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fb9b 	bl	80033f8 <HAL_RCC_ClockConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000cc8:	f000 f816 	bl	8000cf8 <Error_Handler>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3748      	adds	r7, #72	; 0x48
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ce6:	f000 faa7 	bl	8001238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <Error_Handler+0x8>
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_MspInit+0x54>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_MspInit+0x54>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x54>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_MspInit+0x54>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x54>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x54>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	210f      	movs	r1, #15
 8000d46:	f06f 0001 	mvn.w	r0, #1
 8000d4a:	f000 fc66 	bl	800161a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	2036      	movs	r0, #54	; 0x36
 8000d72:	f000 fc52 	bl	800161a <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d76:	2036      	movs	r0, #54	; 0x36
 8000d78:	f000 fc6b 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <HAL_InitTick+0xa4>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <HAL_InitTick+0xa4>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_InitTick+0xa4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	f003 0310 	and.w	r3, r3, #16
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d98:	f107 0210 	add.w	r2, r7, #16
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fd44 	bl	8003830 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000da8:	f002 fcfe 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8000dac:	4603      	mov	r3, r0
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db4:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <HAL_InitTick+0xa8>)
 8000db6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dba:	0c9b      	lsrs	r3, r3, #18
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_InitTick+0xac>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_InitTick+0xb0>)
 8000dc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <HAL_InitTick+0xac>)
 8000dc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dcc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_InitTick+0xac>)
 8000dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_InitTick+0xac>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_InitTick+0xac>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <HAL_InitTick+0xac>)
 8000de2:	f002 fd55 	bl	8003890 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d104      	bne.n	8000df6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dec:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_InitTick+0xac>)
 8000dee:	f002 fda7 	bl	8003940 <HAL_TIM_Base_Start_IT>
 8000df2:	4603      	mov	r3, r0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3730      	adds	r7, #48	; 0x30
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	20004e50 	.word	0x20004e50
 8000e0c:	40001000 	.word	0x40001000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM6_DAC_IRQHandler+0x10>)
 8000e42:	f002 fdeb 	bl	8003a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20004e50 	.word	0x20004e50

08000e50 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <ETH_IRQHandler+0x10>)
 8000e56:	f000 ffdc 	bl	8001e12 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20006c00 	.word	0x20006c00

08000e64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e00a      	b.n	8000e8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e76:	f3af 8000 	nop.w
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	b2ca      	uxtb	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf0      	blt.n	8000e76 <_read+0x12>
	}

return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e009      	b.n	8000ec4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf1      	blt.n	8000eb0 <_write+0x12>
	}
	return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:

int _close(int file)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efc:	605a      	str	r2, [r3, #4]
	return 0;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <_isatty>:

int _isatty(int file)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	return 1;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b085      	sub	sp, #20
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
	return 0;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
	...

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d205      	bcs.n	8000f74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <_sbrk+0x6c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20020000 	.word	0x20020000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	200008fc 	.word	0x200008fc
 8000fa0:	2000bb98 	.word	0x2000bb98
 8000fa4:	2000bb80 	.word	0x2000bb80

08000fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_USART3_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USART3_UART_Init+0x4c>)
 8000fec:	f002 fef2 	bl	8003dd4 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f7ff fe7f 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20004e98 	.word	0x20004e98
 8001004:	40004800 	.word	0x40004800

08001008 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <HAL_UART_MspInit+0x84>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d12c      	bne.n	8001084 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <HAL_UART_MspInit+0x88>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <HAL_UART_MspInit+0x88>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6413      	str	r3, [r2, #64]	; 0x40
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_UART_MspInit+0x88>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_UART_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_UART_MspInit+0x88>)
 8001050:	f043 0308 	orr.w	r3, r3, #8
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_UART_MspInit+0x88>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001062:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001074:	2307      	movs	r3, #7
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <HAL_UART_MspInit+0x8c>)
 8001080:	f001 fc7e 	bl	8002980 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40004800 	.word	0x40004800
 8001090:	40023800 	.word	0x40023800
 8001094:	40020c00 	.word	0x40020c00

08001098 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800109e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010a6:	2204      	movs	r2, #4
 80010a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010ac:	2202      	movs	r2, #2
 80010ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010be:	2201      	movs	r2, #1
 80010c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80010d6:	f001 fe22 	bl	8002d1e <HAL_PCD_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f7ff fe0a 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20004ed8 	.word	0x20004ed8

080010ec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800110c:	d13f      	bne.n	800118e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_PCD_MspInit+0xac>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <HAL_PCD_MspInit+0xac>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <HAL_PCD_MspInit+0xac>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800112a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800113c:	230a      	movs	r3, #10
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4815      	ldr	r0, [pc, #84]	; (800119c <HAL_PCD_MspInit+0xb0>)
 8001148:	f001 fc1a 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800114c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480e      	ldr	r0, [pc, #56]	; (800119c <HAL_PCD_MspInit+0xb0>)
 8001162:	f001 fc0d 	bl	8002980 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <HAL_PCD_MspInit+0xac>)
 8001168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_PCD_MspInit+0xac>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	6353      	str	r3, [r2, #52]	; 0x34
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_PCD_MspInit+0xac>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_PCD_MspInit+0xac>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_PCD_MspInit+0xac>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000

080011a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80011a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011a6:	e003      	b.n	80011b0 <LoopCopyDataInit>

080011a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011ae:	3104      	adds	r1, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	; (80011e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011b8:	d3f6      	bcc.n	80011a8 <CopyDataInit>
  ldr  r2, =_sbss
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011bc:	e002      	b.n	80011c4 <LoopFillZerobss>

080011be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80011be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011c0:	f842 3b04 	str.w	r3, [r2], #4

080011c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011c8:	d3f9      	bcc.n	80011be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ca:	f7ff feed 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f013 fc9d 	bl	8014b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d2:	f7ff fd25 	bl	8000c20 <main>
  bx  lr
 80011d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80011dc:	08018828 	.word	0x08018828
  ldr  r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011e4:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80011e8:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80011ec:	2000bb94 	.word	0x2000bb94

080011f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <HAL_Init+0x40>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_Init+0x40>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_Init+0x40>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f9f1 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fd9a 	bl	8000d5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001228:	f7ff fd6c 	bl	8000d04 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023c00 	.word	0x40023c00

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_IncTick+0x1c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x20>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a03      	ldr	r2, [pc, #12]	; (8001258 <HAL_IncTick+0x20>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000010 	.word	0x20000010
 8001258:	200052d8 	.word	0x200052d8

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_GetTick+0x10>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200052d8 	.word	0x200052d8

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff fff0 	bl	800125c <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001296:	bf00      	nop
 8001298:	f7ff ffe0 	bl	800125c <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000010 	.word	0x20000010

080012b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0ed      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff f93c 	bl	8000554 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0202 	bic.w	r2, r2, #2
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ec:	f7ff ffb6 	bl	800125c <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012f2:	e012      	b.n	800131a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f4:	f7ff ffb2 	bl	800125c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b0a      	cmp	r3, #10
 8001300:	d90b      	bls.n	800131a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2205      	movs	r2, #5
 8001312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0c5      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e5      	bne.n	80012f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001338:	f7ff ff90 	bl	800125c <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133e:	e012      	b.n	8001366 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001340:	f7ff ff8c 	bl	800125c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d90b      	bls.n	8001366 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e09f      	b.n	80014a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0e5      	beq.n	8001340 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7e1b      	ldrb	r3, [r3, #24]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d108      	bne.n	800138e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e007      	b.n	800139e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7e5b      	ldrb	r3, [r3, #25]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d108      	bne.n	80013b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e007      	b.n	80013c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7e9b      	ldrb	r3, [r3, #26]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0220 	orr.w	r2, r2, #32
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e007      	b.n	80013f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0220 	bic.w	r2, r2, #32
 80013f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7edb      	ldrb	r3, [r3, #27]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d108      	bne.n	800140c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0210 	bic.w	r2, r2, #16
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e007      	b.n	800141c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0210 	orr.w	r2, r2, #16
 800141a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7f1b      	ldrb	r3, [r3, #28]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d108      	bne.n	8001436 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0208 	orr.w	r2, r2, #8
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e007      	b.n	8001446 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0208 	bic.w	r2, r2, #8
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7f5b      	ldrb	r3, [r3, #29]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d108      	bne.n	8001460 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0204 	orr.w	r2, r2, #4
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e007      	b.n	8001470 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0204 	bic.w	r2, r2, #4
 800146e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	ea42 0103 	orr.w	r1, r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	1e5a      	subs	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4906      	ldr	r1, [pc, #24]	; (8001548 <__NVIC_EnableIRQ+0x34>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff4f 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff64 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ffb2 	bl	80015a0 <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff81 	bl	800154c <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff57 	bl	8001514 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b088      	sub	sp, #32
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001680:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <HAL_ETH_Init+0x2a0>)
 8001682:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e173      	b.n	800197e <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f003 f8cc 	bl	8004848 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	4b97      	ldr	r3, [pc, #604]	; (8001914 <HAL_ETH_Init+0x2a4>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	4a96      	ldr	r2, [pc, #600]	; (8001914 <HAL_ETH_Init+0x2a4>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016be:	6453      	str	r3, [r2, #68]	; 0x44
 80016c0:	4b94      	ldr	r3, [pc, #592]	; (8001914 <HAL_ETH_Init+0x2a4>)
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016cc:	4b92      	ldr	r3, [pc, #584]	; (8001918 <HAL_ETH_Init+0x2a8>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4a91      	ldr	r2, [pc, #580]	; (8001918 <HAL_ETH_Init+0x2a8>)
 80016d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016d6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016d8:	4b8f      	ldr	r3, [pc, #572]	; (8001918 <HAL_ETH_Init+0x2a8>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	498d      	ldr	r1, [pc, #564]	; (8001918 <HAL_ETH_Init+0x2a8>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016fe:	f7ff fdad 	bl	800125c <HAL_GetTick>
 8001702:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001704:	e011      	b.n	800172a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001706:	f7ff fda9 	bl	800125c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001714:	d909      	bls.n	800172a <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2203      	movs	r2, #3
 800171a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e129      	b.n	800197e <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1e4      	bne.n	8001706 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f023 031c 	bic.w	r3, r3, #28
 800174a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800174c:	f002 f822 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 8001750:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4a71      	ldr	r2, [pc, #452]	; (800191c <HAL_ETH_Init+0x2ac>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d908      	bls.n	800176c <HAL_ETH_Init+0xfc>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4a70      	ldr	r2, [pc, #448]	; (8001920 <HAL_ETH_Init+0x2b0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d804      	bhi.n	800176c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e01a      	b.n	80017a2 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	4a6c      	ldr	r2, [pc, #432]	; (8001920 <HAL_ETH_Init+0x2b0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d908      	bls.n	8001786 <HAL_ETH_Init+0x116>
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	4a66      	ldr	r2, [pc, #408]	; (8001910 <HAL_ETH_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d204      	bcs.n	8001786 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f043 030c 	orr.w	r3, r3, #12
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	e00d      	b.n	80017a2 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4a61      	ldr	r2, [pc, #388]	; (8001910 <HAL_ETH_Init+0x2a0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d303      	bcc.n	8001796 <HAL_ETH_Init+0x126>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4a64      	ldr	r2, [pc, #400]	; (8001924 <HAL_ETH_Init+0x2b4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d904      	bls.n	80017a0 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e000      	b.n	80017a2 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80017a0:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80017aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017ae:	2100      	movs	r1, #0
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fc0f 	bl	8001fd4 <HAL_ETH_WritePHYRegister>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fdc4 	bl	8002350 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0d4      	b.n	800197e <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80017d4:	20ff      	movs	r0, #255	; 0xff
 80017d6:	f7ff fd4b 	bl	8001270 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80a2 	beq.w	8001928 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fd3a 	bl	800125c <HAL_GetTick>
 80017e8:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	461a      	mov	r2, r3
 80017f0:	2101      	movs	r1, #1
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fb86 	bl	8001f04 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80017f8:	f7ff fd30 	bl	800125c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	; 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d90f      	bls.n	800182a <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800180e:	6939      	ldr	r1, [r7, #16]
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 fd9d 	bl	8002350 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0a9      	b.n	800197e <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0da      	beq.n	80017ea <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001838:	2100      	movs	r1, #0
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fbca 	bl	8001fd4 <HAL_ETH_WritePHYRegister>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00b      	beq.n	800185e <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800184a:	6939      	ldr	r1, [r7, #16]
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 fd7f 	bl	8002350 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e08f      	b.n	800197e <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800185e:	f7ff fcfd 	bl	800125c <HAL_GetTick>
 8001862:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	461a      	mov	r2, r3
 800186a:	2101      	movs	r1, #1
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fb49 	bl	8001f04 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001872:	f7ff fcf3 	bl	800125c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d90f      	bls.n	80018a4 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001888:	6939      	ldr	r1, [r7, #16]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fd60 	bl	8002350 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e06c      	b.n	800197e <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0da      	beq.n	8001864 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	461a      	mov	r2, r3
 80018b4:	2110      	movs	r1, #16
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fb24 	bl	8001f04 <HAL_ETH_ReadPHYRegister>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018c6:	6939      	ldr	r1, [r7, #16]
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fd41 	bl	8002350 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e051      	b.n	800197e <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	e002      	b.n	80018f4 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e032      	b.n	800196c <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	e02d      	b.n	800196c <HAL_ETH_Init+0x2fc>
 8001910:	03938700 	.word	0x03938700
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	01312cff 	.word	0x01312cff
 8001920:	02160ebf 	.word	0x02160ebf
 8001924:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	08db      	lsrs	r3, r3, #3
 800192e:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001938:	4313      	orrs	r3, r2
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	2100      	movs	r1, #0
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fb47 	bl	8001fd4 <HAL_ETH_WritePHYRegister>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00b      	beq.n	8001964 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001950:	6939      	ldr	r1, [r7, #16]
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fcfc 	bl	8002350 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e00c      	b.n	800197e <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001964:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001968:	f7ff fc82 	bl	8001270 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800196c:	6939      	ldr	r1, [r7, #16]
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fcee 	bl	8002350 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop

08001988 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_ETH_DMATxDescListInit+0x20>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e052      	b.n	8001a4e <HAL_ETH_DMATxDescListInit+0xc6>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2202      	movs	r2, #2
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e030      	b.n	8001a26 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	4413      	add	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d208      	bcs.n	8001a1a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	015b      	lsls	r3, r3, #5
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	4413      	add	r3, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	e002      	b.n	8001a20 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3ca      	bcc.n	80019c4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	3310      	adds	r3, #16
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ETH_DMARxDescListInit+0x20>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e056      	b.n	8001b26 <HAL_ETH_DMARxDescListInit+0xce>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e034      	b.n	8001afe <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001aa4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001aac:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	4413      	add	r3, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d208      	bcs.n	8001af2 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	015b      	lsls	r3, r3, #5
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4413      	add	r3, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	e002      	b.n	8001af8 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3c6      	bcc.n	8001a94 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b10:	330c      	adds	r3, #12
 8001b12:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_ETH_TransmitFrame+0x24>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e0cd      	b.n	8001cf0 <HAL_ETH_TransmitFrame+0x1c0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0b8      	b.n	8001cf0 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	da09      	bge.n	8001b9c <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2212      	movs	r2, #18
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0a9      	b.n	8001cf0 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d915      	bls.n	8001bd2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	4a54      	ldr	r2, [pc, #336]	; (8001cfc <HAL_ETH_TransmitFrame+0x1cc>)
 8001baa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bae:	0a9b      	lsrs	r3, r3, #10
 8001bb0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <HAL_ETH_TransmitFrame+0x1cc>)
 8001bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	e001      	b.n	8001bd6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d11c      	bne.n	8001c16 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001bea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001bf6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c06:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c14:	e04b      	b.n	8001cae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e044      	b.n	8001ca6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c2a:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d107      	bne.n	8001c42 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c40:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c4a:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d116      	bne.n	8001c84 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c64:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_ETH_TransmitFrame+0x1d0>)
 8001c6a:	fb02 f203 	mul.w	r2, r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	4413      	add	r3, r2
 8001c72:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001c76:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c82:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c92:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3b6      	bcc.n	8001c1c <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb6:	3314      	adds	r3, #20
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00d      	beq.n	8001cde <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cca:	3314      	adds	r3, #20
 8001ccc:	2204      	movs	r2, #4
 8001cce:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd8:	3304      	adds	r3, #4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	ac02b00b 	.word	0xac02b00b
 8001d00:	fffffa0c 	.word	0xfffffa0c

08001d04 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e074      	b.n	8001e08 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001d2e:	e05a      	b.n	8001de6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d44:	d10d      	bne.n	8001d62 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d60:	e041      	b.n	8001de6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10b      	bne.n	8001d88 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
 8001d86:	e02e      	b.n	8001de6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d103      	bne.n	8001daa <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0c1b      	lsrs	r3, r3, #16
 8001db2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001db6:	1f1a      	subs	r2, r3, #4
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e010      	b.n	8001e08 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db02      	blt.n	8001df6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d99c      	bls.n	8001d30 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	3314      	adds	r3, #20
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d112      	bne.n	8001e54 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f002 fdd8 	bl	80049e4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3c:	3314      	adds	r3, #20
 8001e3e:	2240      	movs	r2, #64	; 0x40
 8001e40:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e52:	e01b      	b.n	8001e8c <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5c:	3314      	adds	r3, #20
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d111      	bne.n	8001e8c <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f839 	bl	8001ee0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	3314      	adds	r3, #20
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e94:	3314      	adds	r3, #20
 8001e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e9a:	601a      	str	r2, [r3, #0]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb0:	d112      	bne.n	8001ed8 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f81d 	bl	8001ef2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b82      	cmp	r3, #130	; 0x82
 8001f24:	d101      	bne.n	8001f2a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
 8001f28:	e050      	b.n	8001fcc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2282      	movs	r2, #130	; 0x82
 8001f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 031c 	and.w	r3, r3, #28
 8001f40:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8a1b      	ldrh	r3, [r3, #16]
 8001f46:	02db      	lsls	r3, r3, #11
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f50:	897b      	ldrh	r3, [r7, #10]
 8001f52:	019b      	lsls	r3, r3, #6
 8001f54:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f023 0302 	bic.w	r3, r3, #2
 8001f64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f76:	f7ff f971 	bl	800125c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f7c:	e015      	b.n	8001faa <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001f7e:	f7ff f96d 	bl	800125c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d309      	bcc.n	8001fa2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e014      	b.n	8001fcc <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e4      	bne.n	8001f7e <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b42      	cmp	r3, #66	; 0x42
 8001ff4:	d101      	bne.n	8001ffa <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e04e      	b.n	8002098 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2242      	movs	r2, #66	; 0x42
 8001ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f003 031c 	and.w	r3, r3, #28
 8002010:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8a1b      	ldrh	r3, [r3, #16]
 8002016:	02db      	lsls	r3, r3, #11
 8002018:	b29b      	uxth	r3, r3
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002020:	897b      	ldrh	r3, [r7, #10]
 8002022:	019b      	lsls	r3, r3, #6
 8002024:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002050:	f7ff f904 	bl	800125c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002056:	e015      	b.n	8002084 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002058:	f7ff f900 	bl	800125c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002066:	d309      	bcc.n	800207c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e00d      	b.n	8002098 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1e4      	bne.n	8002058 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ETH_Start+0x16>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e01f      	b.n	80020f6 <HAL_ETH_Start+0x56>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fb42 	bl	8002750 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fb79 	bl	80027c4 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fc0c 	bl	80028f0 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fbad 	bl	8002838 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fbd8 	bl	8002894 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_ETH_Stop+0x16>
 8002110:	2302      	movs	r3, #2
 8002112:	e01f      	b.n	8002154 <HAL_ETH_Stop+0x56>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fb9e 	bl	8002866 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fbc9 	bl	80028c2 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fb64 	bl	80027fe <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fbda 	bl	80028f0 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fb24 	bl	800278a <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_ETH_ConfigMAC+0x1c>
 8002174:	2302      	movs	r3, #2
 8002176:	e0e4      	b.n	8002342 <HAL_ETH_ConfigMAC+0x1e6>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80b1 	beq.w	80022f2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4b6c      	ldr	r3, [pc, #432]	; (800234c <HAL_ETH_ConfigMAC+0x1f0>)
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80021a8:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 80021ae:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 80021b4:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 80021ba:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80021c0:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80021c6:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80021cc:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 80021d2:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80021d8:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 80021de:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 80021e4:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 80021ea:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff f834 	bl	8001270 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002218:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800221e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002224:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 800222a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002230:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002236:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002242:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002244:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800224e:	2001      	movs	r0, #1
 8002250:	f7ff f80e 	bl	8001270 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002264:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800226e:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800228c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002292:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002298:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 800229e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80022a4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7fe ffd7 	bl	8001270 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7fe ffc4 	bl	8001270 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	61da      	str	r2, [r3, #28]
 80022f0:	e01e      	b.n	8002330 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002300:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002322:	2001      	movs	r0, #1
 8002324:	f7fe ffa4 	bl	8001270 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	ff20810f 	.word	0xff20810f

08002350 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0b0      	sub	sp, #192	; 0xc0
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002374:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800237e:	2300      	movs	r3, #0
 8002380:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800239a:	663b      	str	r3, [r7, #96]	; 0x60
 800239c:	e001      	b.n	80023a2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80023a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023ac:	2300      	movs	r3, #0
 80023ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80023bc:	2340      	movs	r3, #64	; 0x40
 80023be:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002424:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002428:	4bac      	ldr	r3, [pc, #688]	; (80026dc <ETH_MACDMAConfig+0x38c>)
 800242a:	4013      	ands	r3, r2
 800242c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002430:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002434:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8002438:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800243a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 800243c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002442:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8002446:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 800244a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8002450:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8002452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8002454:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8002458:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 800245a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 800245c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800245e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8002460:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8002462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8002464:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002466:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002478:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe fef3 	bl	8001270 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002492:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002494:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002498:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800249a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800249c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800249e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80024a2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80024a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80024a8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80024aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80024ae:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80024b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80024b4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80024b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80024c0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80024c2:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f7fe fece 	bl	8001270 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024dc:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024e6:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80024f0:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002500:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002504:	4013      	ands	r3, r2
 8002506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800250a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002514:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002516:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800251a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 800251c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002520:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8002526:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002528:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800252c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800252e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002540:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800254c:	2001      	movs	r0, #1
 800254e:	f7fe fe8f 	bl	8001270 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800255a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800255c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8002560:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe fe7a 	bl	8001270 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002584:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800258a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258e:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002594:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002598:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80025aa:	2304      	movs	r3, #4
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80025ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80025b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c4:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025ce:	2300      	movs	r3, #0
 80025d0:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025da:	3318      	adds	r3, #24
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e6:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <ETH_MACDMAConfig+0x390>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80025ee:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 80025f0:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 80025f2:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 80025f4:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 80025f6:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 80025f8:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 80025fa:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 80025fc:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 80025fe:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002600:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8002602:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002604:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8002606:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 800260a:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 800260e:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002610:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002622:	3318      	adds	r3, #24
 8002624:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002628:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002632:	3318      	adds	r3, #24
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800263a:	2001      	movs	r0, #1
 800263c:	f7fe fe18 	bl	8001270 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	3318      	adds	r3, #24
 800264a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800264e:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002654:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8002658:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800265c:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 800265e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8002660:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002664:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8002666:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8002668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800266a:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002688:	2001      	movs	r0, #1
 800268a:	f7fe fdf1 	bl	8001270 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002696:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800269a:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10f      	bne.n	80026c4 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	331c      	adds	r3, #28
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	331c      	adds	r3, #28
 80026c2:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	461a      	mov	r2, r3
 80026ca:	2100      	movs	r1, #0
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f809 	bl	80026e4 <ETH_MACAddressConfig>
}
 80026d2:	bf00      	nop
 80026d4:	37c0      	adds	r7, #192	; 0xc0
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	ff20810f 	.word	0xff20810f
 80026e0:	f8de3f23 	.word	0xf8de3f23

080026e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3305      	adds	r3, #5
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	3204      	adds	r2, #4
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4b10      	ldr	r3, [pc, #64]	; (8002748 <ETH_MACAddressConfig+0x64>)
 8002706:	4413      	add	r3, r2
 8002708:	461a      	mov	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3303      	adds	r3, #3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	061a      	lsls	r2, r3, #24
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3302      	adds	r3, #2
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3301      	adds	r3, #1
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	4313      	orrs	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <ETH_MACAddressConfig+0x68>)
 8002736:	4413      	add	r3, r2
 8002738:	461a      	mov	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	6013      	str	r3, [r2, #0]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr
 8002748:	40028040 	.word	0x40028040
 800274c:	40028044 	.word	0x40028044

08002750 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0208 	orr.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002774:	2001      	movs	r0, #1
 8002776:	f000 f8e5 	bl	8002944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0208 	bic.w	r2, r2, #8
 80027a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f000 f8c8 	bl	8002944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0204 	orr.w	r2, r2, #4
 80027de:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80027e8:	2001      	movs	r0, #1
 80027ea:	f000 f8ab 	bl	8002944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0204 	bic.w	r2, r2, #4
 8002818:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002822:	2001      	movs	r0, #1
 8002824:	f000 f88e 	bl	8002944 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	3318      	adds	r3, #24
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002858:	3318      	adds	r3, #24
 800285a:	601a      	str	r2, [r3, #0]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002876:	3318      	adds	r3, #24
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	3318      	adds	r3, #24
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a4:	3318      	adds	r3, #24
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0202 	orr.w	r2, r2, #2
 80028b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b4:	3318      	adds	r3, #24
 80028b6:	601a      	str	r2, [r3, #0]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d2:	3318      	adds	r3, #24
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0202 	bic.w	r2, r2, #2
 80028de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e2:	3318      	adds	r3, #24
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002904:	3318      	adds	r3, #24
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002914:	3318      	adds	r3, #24
 8002916:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	3318      	adds	r3, #24
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002926:	2001      	movs	r0, #1
 8002928:	f000 f80c 	bl	8002944 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002936:	3318      	adds	r3, #24
 8002938:	601a      	str	r2, [r3, #0]
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <ETH_Delay+0x34>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <ETH_Delay+0x38>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0a5b      	lsrs	r3, r3, #9
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002960:	bf00      	nop
  }
  while (Delay --);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	60fa      	str	r2, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f9      	bne.n	8002960 <ETH_Delay+0x1c>
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	20000008 	.word	0x20000008
 800297c:	10624dd3 	.word	0x10624dd3

08002980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298e:	e16f      	b.n	8002c70 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8161 	beq.w	8002c6a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d00b      	beq.n	80029c8 <HAL_GPIO_Init+0x48>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d007      	beq.n	80029c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029bc:	2b11      	cmp	r3, #17
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b12      	cmp	r3, #18
 80029c6:	d130      	bne.n	8002a2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fe:	2201      	movs	r2, #1
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0201 	and.w	r2, r3, #1
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2203      	movs	r2, #3
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0xea>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b12      	cmp	r3, #18
 8002a68:	d123      	bne.n	8002ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	6939      	ldr	r1, [r7, #16]
 8002aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80bb 	beq.w	8002c6a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	4b64      	ldr	r3, [pc, #400]	; (8002c8c <HAL_GPIO_Init+0x30c>)
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	4a63      	ldr	r2, [pc, #396]	; (8002c8c <HAL_GPIO_Init+0x30c>)
 8002afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b02:	6453      	str	r3, [r2, #68]	; 0x44
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_GPIO_Init+0x30c>)
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b10:	4a5f      	ldr	r2, [pc, #380]	; (8002c90 <HAL_GPIO_Init+0x310>)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	220f      	movs	r2, #15
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_GPIO_Init+0x314>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d031      	beq.n	8002ba0 <HAL_GPIO_Init+0x220>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_GPIO_Init+0x318>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d02b      	beq.n	8002b9c <HAL_GPIO_Init+0x21c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a55      	ldr	r2, [pc, #340]	; (8002c9c <HAL_GPIO_Init+0x31c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d025      	beq.n	8002b98 <HAL_GPIO_Init+0x218>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a54      	ldr	r2, [pc, #336]	; (8002ca0 <HAL_GPIO_Init+0x320>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d01f      	beq.n	8002b94 <HAL_GPIO_Init+0x214>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a53      	ldr	r2, [pc, #332]	; (8002ca4 <HAL_GPIO_Init+0x324>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d019      	beq.n	8002b90 <HAL_GPIO_Init+0x210>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_GPIO_Init+0x328>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d013      	beq.n	8002b8c <HAL_GPIO_Init+0x20c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a51      	ldr	r2, [pc, #324]	; (8002cac <HAL_GPIO_Init+0x32c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00d      	beq.n	8002b88 <HAL_GPIO_Init+0x208>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a50      	ldr	r2, [pc, #320]	; (8002cb0 <HAL_GPIO_Init+0x330>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d007      	beq.n	8002b84 <HAL_GPIO_Init+0x204>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x334>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d101      	bne.n	8002b80 <HAL_GPIO_Init+0x200>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	e010      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b80:	2309      	movs	r3, #9
 8002b82:	e00e      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b84:	2307      	movs	r3, #7
 8002b86:	e00c      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b88:	2306      	movs	r3, #6
 8002b8a:	e00a      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b8c:	2305      	movs	r3, #5
 8002b8e:	e008      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b90:	2304      	movs	r3, #4
 8002b92:	e006      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b94:	2303      	movs	r3, #3
 8002b96:	e004      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e002      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <HAL_GPIO_Init+0x222>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	f002 0203 	and.w	r2, r2, #3
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	4093      	lsls	r3, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bb4:	4936      	ldr	r1, [pc, #216]	; (8002c90 <HAL_GPIO_Init+0x310>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002be6:	4a34      	ldr	r2, [pc, #208]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c10:	4a29      	ldr	r2, [pc, #164]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_GPIO_Init+0x338>)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f47f ae88 	bne.w	8002990 <HAL_GPIO_Init+0x10>
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40013800 	.word	0x40013800
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020800 	.word	0x40020800
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40021400 	.word	0x40021400
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	40021c00 	.word	0x40021c00
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4013      	ands	r3, r2
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	43d9      	mvns	r1, r3
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d20:	b08f      	sub	sp, #60	; 0x3c
 8002d22:	af0a      	add	r7, sp, #40	; 0x28
 8002d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e10f      	b.n	8002f50 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe f9ce 	bl	80010ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2203      	movs	r2, #3
 8002d54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 f9bf 	bl	80040f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	687e      	ldr	r6, [r7, #4]
 8002d7c:	466d      	mov	r5, sp
 8002d7e:	f106 0410 	add.w	r4, r6, #16
 8002d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d92:	1d33      	adds	r3, r6, #4
 8002d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d96:	6838      	ldr	r0, [r7, #0]
 8002d98:	f001 f954 	bl	8004044 <USB_CoreInit>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0d0      	b.n	8002f50 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 f9ac 	bl	8004112 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
 8002dbe:	e04a      	b.n	8002e56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	333d      	adds	r3, #61	; 0x3d
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	333c      	adds	r3, #60	; 0x3c
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	b298      	uxth	r0, r3
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3342      	adds	r3, #66	; 0x42
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	333f      	adds	r3, #63	; 0x3f
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3344      	adds	r3, #68	; 0x44
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3348      	adds	r3, #72	; 0x48
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3350      	adds	r3, #80	; 0x50
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d3af      	bcc.n	8002dc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e044      	b.n	8002ef0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	3301      	adds	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d3b5      	bcc.n	8002e66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	687e      	ldr	r6, [r7, #4]
 8002f02:	466d      	mov	r5, sp
 8002f04:	f106 0410 	add.w	r4, r6, #16
 8002f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f18:	1d33      	adds	r3, r6, #4
 8002f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f1c:	6838      	ldr	r0, [r7, #0]
 8002f1e:	f001 f923 	bl	8004168 <USB_DevInit>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e00d      	b.n	8002f50 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 facd 	bl	80044e8 <USB_DevDisconnect>

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e237      	b.n	80033da <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d050      	beq.n	8003018 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	4ba3      	ldr	r3, [pc, #652]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f82:	4ba0      	ldr	r3, [pc, #640]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d112      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b9d      	ldr	r3, [pc, #628]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	4b99      	ldr	r3, [pc, #612]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d036      	beq.n	8003016 <HAL_RCC_OscConfig+0xbe>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d132      	bne.n	8003016 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e212      	b.n	80033da <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	4b93      	ldr	r3, [pc, #588]	; (8003208 <HAL_RCC_OscConfig+0x2b0>)
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d013      	beq.n	8002fee <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe f949 	bl	800125c <HAL_GetTick>
 8002fca:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fce:	f7fe f945 	bl	800125c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b64      	cmp	r3, #100	; 0x64
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e1fc      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe0:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x76>
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7fe f935 	bl	800125c <HAL_GetTick>
 8002ff2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff6:	f7fe f931 	bl	800125c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e1e8      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x9e>
 8003014:	e000      	b.n	8003018 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003016:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d077      	beq.n	8003114 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003024:	4b77      	ldr	r3, [pc, #476]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003030:	4b74      	ldr	r3, [pc, #464]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003038:	2b08      	cmp	r3, #8
 800303a:	d126      	bne.n	800308a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303c:	4b71      	ldr	r3, [pc, #452]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d120      	bne.n	800308a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003048:	4b6e      	ldr	r3, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_OscConfig+0x108>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e1bc      	b.n	80033da <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b68      	ldr	r3, [pc, #416]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	21f8      	movs	r1, #248	; 0xf8
 800306e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	69b9      	ldr	r1, [r7, #24]
 8003072:	fa91 f1a1 	rbit	r1, r1
 8003076:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003078:	6979      	ldr	r1, [r7, #20]
 800307a:	fab1 f181 	clz	r1, r1
 800307e:	b2c9      	uxtb	r1, r1
 8003080:	408b      	lsls	r3, r1
 8003082:	4960      	ldr	r1, [pc, #384]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003088:	e044      	b.n	8003114 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d02a      	beq.n	80030e8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003092:	4b5e      	ldr	r3, [pc, #376]	; (800320c <HAL_RCC_OscConfig+0x2b4>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe f8e0 	bl	800125c <HAL_GetTick>
 800309c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe f8dc 	bl	800125c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e193      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b2:	4b54      	ldr	r3, [pc, #336]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	21f8      	movs	r1, #248	; 0xf8
 80030cc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	6939      	ldr	r1, [r7, #16]
 80030d0:	fa91 f1a1 	rbit	r1, r1
 80030d4:	60f9      	str	r1, [r7, #12]
  return result;
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	fab1 f181 	clz	r1, r1
 80030dc:	b2c9      	uxtb	r1, r1
 80030de:	408b      	lsls	r3, r1
 80030e0:	4948      	ldr	r1, [pc, #288]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
 80030e6:	e015      	b.n	8003114 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e8:	4b48      	ldr	r3, [pc, #288]	; (800320c <HAL_RCC_OscConfig+0x2b4>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe f8b5 	bl	800125c <HAL_GetTick>
 80030f2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f6:	f7fe f8b1 	bl	800125c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e168      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d030      	beq.n	8003182 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 800312a:	2201      	movs	r2, #1
 800312c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312e:	f7fe f895 	bl	800125c <HAL_GetTick>
 8003132:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe f891 	bl	800125c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e148      	b.n	80033da <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003148:	4b2e      	ldr	r3, [pc, #184]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x1de>
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315c:	f7fe f87e 	bl	800125c <HAL_GetTick>
 8003160:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003164:	f7fe f87a 	bl	800125c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e131      	b.n	80033da <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 8088 	beq.w	80032a0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003190:	2300      	movs	r3, #0
 8003192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d110      	bne.n	80031c4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a16      	ldr	r2, [pc, #88]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_RCC_OscConfig+0x2bc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a12      	ldr	r2, [pc, #72]	; (8003214 <HAL_RCC_OscConfig+0x2bc>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_RCC_OscConfig+0x2bc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d123      	bne.n	8003224 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_RCC_OscConfig+0x2bc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <HAL_RCC_OscConfig+0x2bc>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e8:	f7fe f838 	bl	800125c <HAL_GetTick>
 80031ec:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ee:	e013      	b.n	8003218 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f0:	f7fe f834 	bl	800125c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0eb      	b.n	80033da <HAL_RCC_OscConfig+0x482>
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40023802 	.word	0x40023802
 800320c:	42470000 	.word	0x42470000
 8003210:	42470e80 	.word	0x42470e80
 8003214:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x48c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0e5      	beq.n	80031f0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x490>)
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003236:	f7fe f811 	bl	800125c <HAL_GetTick>
 800323a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	e00a      	b.n	8003254 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe f80d 	bl	800125c <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e0c2      	b.n	80033da <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003254:	4b65      	ldr	r3, [pc, #404]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0ee      	beq.n	800323e <HAL_RCC_OscConfig+0x2e6>
 8003260:	e014      	b.n	800328c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fd fffb 	bl	800125c <HAL_GetTick>
 8003266:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fd fff7 	bl	800125c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0ac      	b.n	80033da <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	4b5a      	ldr	r3, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ee      	bne.n	800326a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b55      	ldr	r3, [pc, #340]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	4a54      	ldr	r2, [pc, #336]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8097 	beq.w	80033d8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032aa:	4b50      	ldr	r3, [pc, #320]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d061      	beq.n	800337a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d146      	bne.n	800334c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCC_OscConfig+0x498>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fd ffca 	bl	800125c <HAL_GetTick>
 80032c8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fd ffc6 	bl	800125c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e07d      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x49c>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	69d1      	ldr	r1, [r2, #28]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6a12      	ldr	r2, [r2, #32]
 80032fa:	4311      	orrs	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003300:	0192      	lsls	r2, r2, #6
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003308:	0612      	lsls	r2, r2, #24
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003310:	0852      	lsrs	r2, r2, #1
 8003312:	3a01      	subs	r2, #1
 8003314:	0412      	lsls	r2, r2, #16
 8003316:	430a      	orrs	r2, r1
 8003318:	4934      	ldr	r1, [pc, #208]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_RCC_OscConfig+0x498>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fd ff9a 	bl	800125c <HAL_GetTick>
 8003328:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332c:	f7fd ff96 	bl	800125c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04d      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x3d4>
 800334a:	e045      	b.n	80033d8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCC_OscConfig+0x498>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fd ff83 	bl	800125c <HAL_GetTick>
 8003356:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fd ff7f 	bl	800125c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e036      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x402>
 8003378:	e02e      	b.n	80033d8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e029      	b.n	80033da <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_OscConfig+0x494>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d11c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d115      	bne.n	80033d4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d106      	bne.n	80033d4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40007000 	.word	0x40007000
 80033e8:	40023870 	.word	0x40023870
 80033ec:	40023800 	.word	0x40023800
 80033f0:	42470060 	.word	0x42470060
 80033f4:	f0bc8000 	.word	0xf0bc8000

080033f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0d2      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d90c      	bls.n	8003434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b66      	ldr	r3, [pc, #408]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0be      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	4b5c      	ldr	r3, [pc, #368]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a5b      	ldr	r2, [pc, #364]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003464:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a55      	ldr	r2, [pc, #340]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 800346a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800346e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4950      	ldr	r1, [pc, #320]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d040      	beq.n	8003510 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b4a      	ldr	r3, [pc, #296]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d115      	bne.n	80034ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e085      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e079      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e071      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4939      	ldr	r1, [pc, #228]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fd febc 	bl	800125c <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fd feb8 	bl	800125c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e059      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20c      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e03c      	b.n	80035b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	491b      	ldr	r1, [pc, #108]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4913      	ldr	r1, [pc, #76]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003576:	f000 f82b 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 800357a:	4601      	mov	r1, r0
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003584:	22f0      	movs	r2, #240	; 0xf0
 8003586:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	fa92 f2a2 	rbit	r2, r2
 800358e:	60fa      	str	r2, [r7, #12]
  return result;
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	fab2 f282 	clz	r2, r2
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	40d3      	lsrs	r3, r2
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1cc>)
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	fa21 f303 	lsr.w	r3, r1, r3
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1d0>)
 80035a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1d4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fd fbd6 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40023c00 	.word	0x40023c00
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08018338 	.word	0x08018338
 80035c8:	20000008 	.word	0x20000008
 80035cc:	2000000c 	.word	0x2000000c

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	2300      	movs	r3, #0
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e8:	4b67      	ldr	r3, [pc, #412]	; (8003788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d00d      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x40>
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	f200 80bd 	bhi.w	8003774 <HAL_RCC_GetSysClockFreq+0x1a4>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x34>
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x3a>
 8003602:	e0b7      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003606:	60bb      	str	r3, [r7, #8]
       break;
 8003608:	e0b7      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360a:	4b61      	ldr	r3, [pc, #388]	; (8003790 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800360c:	60bb      	str	r3, [r7, #8]
      break;
 800360e:	e0b4      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003610:	4b5d      	ldr	r3, [pc, #372]	; (8003788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003618:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361a:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d04d      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b58      	ldr	r3, [pc, #352]	; (8003788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	461a      	mov	r2, r3
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	ea02 0800 	and.w	r8, r2, r0
 800363e:	ea03 0901 	and.w	r9, r3, r1
 8003642:	4640      	mov	r0, r8
 8003644:	4649      	mov	r1, r9
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	014b      	lsls	r3, r1, #5
 8003650:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003654:	0142      	lsls	r2, r0, #5
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	ebb0 0008 	subs.w	r0, r0, r8
 800365e:	eb61 0109 	sbc.w	r1, r1, r9
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	018b      	lsls	r3, r1, #6
 800366c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003670:	0182      	lsls	r2, r0, #6
 8003672:	1a12      	subs	r2, r2, r0
 8003674:	eb63 0301 	sbc.w	r3, r3, r1
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	00d9      	lsls	r1, r3, #3
 8003682:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003686:	00d0      	lsls	r0, r2, #3
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	eb12 0208 	adds.w	r2, r2, r8
 8003690:	eb43 0309 	adc.w	r3, r3, r9
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	0259      	lsls	r1, r3, #9
 800369e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036a2:	0250      	lsls	r0, r2, #9
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	f7fc fd9e 	bl	80001f4 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e04a      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	461a      	mov	r2, r3
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	ea02 0400 	and.w	r4, r2, r0
 80036da:	ea03 0501 	and.w	r5, r3, r1
 80036de:	4620      	mov	r0, r4
 80036e0:	4629      	mov	r1, r5
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	014b      	lsls	r3, r1, #5
 80036ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036f0:	0142      	lsls	r2, r0, #5
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	1b00      	subs	r0, r0, r4
 80036f8:	eb61 0105 	sbc.w	r1, r1, r5
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	018b      	lsls	r3, r1, #6
 8003706:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800370a:	0182      	lsls	r2, r0, #6
 800370c:	1a12      	subs	r2, r2, r0
 800370e:	eb63 0301 	sbc.w	r3, r3, r1
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	00d9      	lsls	r1, r3, #3
 800371c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003720:	00d0      	lsls	r0, r2, #3
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	1912      	adds	r2, r2, r4
 8003728:	eb45 0303 	adc.w	r3, r5, r3
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0299      	lsls	r1, r3, #10
 8003736:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800373a:	0290      	lsls	r0, r2, #10
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	461a      	mov	r2, r3
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	f7fc fd52 	bl	80001f4 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4613      	mov	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	0c1b      	lsrs	r3, r3, #16
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	3301      	adds	r3, #1
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	60bb      	str	r3, [r7, #8]
      break;
 8003772:	e002      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003776:	60bb      	str	r3, [r7, #8]
      break;
 8003778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377a:	68bb      	ldr	r3, [r7, #8]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	00f42400 	.word	0x00f42400
 8003790:	007a1200 	.word	0x007a1200

08003794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	20000008 	.word	0x20000008

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80037ae:	f7ff fff1 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037b2:	4601      	mov	r1, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80037bc:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80037c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	fa92 f2a2 	rbit	r2, r2
 80037c8:	603a      	str	r2, [r7, #0]
  return result;
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	fab2 f282 	clz	r2, r2
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	40d3      	lsrs	r3, r2
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800
 80037e8:	08018348 	.word	0x08018348

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80037f2:	f7ff ffcf 	bl	8003794 <HAL_RCC_GetHCLKFreq>
 80037f6:	4601      	mov	r1, r0
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003800:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003804:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	fa92 f2a2 	rbit	r2, r2
 800380c:	603a      	str	r2, [r7, #0]
  return result;
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	fab2 f282 	clz	r2, r2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	40d3      	lsrs	r3, r2
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <HAL_RCC_GetPCLK2Freq+0x40>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	08018348 	.word	0x08018348

08003830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	220f      	movs	r2, #15
 800383e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_RCC_GetClockConfig+0x58>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCC_GetClockConfig+0x58>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_GetClockConfig+0x58>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_RCC_GetClockConfig+0x58>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_GetClockConfig+0x5c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 020f 	and.w	r2, r3, #15
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40023800 	.word	0x40023800
 800388c:	40023c00 	.word	0x40023c00

08003890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e041      	b.n	8003926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f839 	bl	800392e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 f9d0 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d001      	beq.n	8003958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e04e      	b.n	80039f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_TIM_Base_Start_IT+0xc0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x80>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003982:	d01d      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x80>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <HAL_TIM_Base_Start_IT+0xc4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x80>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1d      	ldr	r2, [pc, #116]	; (8003a08 <HAL_TIM_Base_Start_IT+0xc8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x80>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <HAL_TIM_Base_Start_IT+0xcc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x80>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_TIM_Base_Start_IT+0xd0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x80>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a18      	ldr	r2, [pc, #96]	; (8003a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x80>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a17      	ldr	r2, [pc, #92]	; (8003a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d111      	bne.n	80039e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b06      	cmp	r3, #6
 80039d0:	d010      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0201 	orr.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e2:	e007      	b.n	80039f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40010400 	.word	0x40010400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40001800 	.word	0x40001800

08003a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d122      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d11b      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0202 	mvn.w	r2, #2
 8003a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8ed 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f8e0 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f8ef 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0204 	mvn.w	r2, #4
 8003a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8c3 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8b6 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8c5 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0208 	mvn.w	r2, #8
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f899 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f88c 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f89b 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f86f 	bl	8003c3e <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f862 	bl	8003c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f871 	bl	8003c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0201 	mvn.w	r2, #1
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd f89a 	bl	8000cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d10e      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d107      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8fb 	bl	8003dc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d107      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f835 	bl	8003c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d10e      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d107      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0220 	mvn.w	r2, #32
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f8c6 	bl	8003db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3f      	ldr	r2, [pc, #252]	; (8003d84 <TIM_Base_SetConfig+0x110>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c92:	d00f      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <TIM_Base_SetConfig+0x114>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3b      	ldr	r2, [pc, #236]	; (8003d8c <TIM_Base_SetConfig+0x118>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3a      	ldr	r2, [pc, #232]	; (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a39      	ldr	r2, [pc, #228]	; (8003d94 <TIM_Base_SetConfig+0x120>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <TIM_Base_SetConfig+0x110>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d027      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <TIM_Base_SetConfig+0x114>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d023      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2a      	ldr	r2, [pc, #168]	; (8003d8c <TIM_Base_SetConfig+0x118>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01f      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <TIM_Base_SetConfig+0x120>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d017      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a27      	ldr	r2, [pc, #156]	; (8003d98 <TIM_Base_SetConfig+0x124>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <TIM_Base_SetConfig+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00f      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <TIM_Base_SetConfig+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <TIM_Base_SetConfig+0x130>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a23      	ldr	r2, [pc, #140]	; (8003da8 <TIM_Base_SetConfig+0x134>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a22      	ldr	r2, [pc, #136]	; (8003dac <TIM_Base_SetConfig+0x138>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <TIM_Base_SetConfig+0x110>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0xf8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <TIM_Base_SetConfig+0x120>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d103      	bne.n	8003d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	615a      	str	r2, [r3, #20]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40000400 	.word	0x40000400
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	40010400 	.word	0x40010400
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800
 8003da4:	40001800 	.word	0x40001800
 8003da8:	40001c00 	.word	0x40001c00
 8003dac:	40002000 	.word	0x40002000

08003db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03f      	b.n	8003e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd f904 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f829 	bl	8003e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eb0:	f023 030c 	bic.w	r3, r3, #12
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a57      	ldr	r2, [pc, #348]	; (8004038 <UART_SetConfig+0x1c8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <UART_SetConfig+0x78>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a56      	ldr	r2, [pc, #344]	; (800403c <UART_SetConfig+0x1cc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d103      	bne.n	8003ef0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7ff fc80 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	e002      	b.n	8003ef6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7ff fc5a 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efe:	d14c      	bne.n	8003f9a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f16:	4a4a      	ldr	r2, [pc, #296]	; (8004040 <UART_SetConfig+0x1d0>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	0119      	lsls	r1, r3, #4
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	009a      	lsls	r2, r3, #2
 8003f2a:	441a      	add	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f36:	4b42      	ldr	r3, [pc, #264]	; (8004040 <UART_SetConfig+0x1d0>)
 8003f38:	fba3 0302 	umull	r0, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2064      	movs	r0, #100	; 0x64
 8003f40:	fb00 f303 	mul.w	r3, r0, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a3d      	ldr	r2, [pc, #244]	; (8004040 <UART_SetConfig+0x1d0>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f58:	4419      	add	r1, r3
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009a      	lsls	r2, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f70:	4b33      	ldr	r3, [pc, #204]	; (8004040 <UART_SetConfig+0x1d0>)
 8003f72:	fba3 0302 	umull	r0, r3, r3, r2
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2064      	movs	r0, #100	; 0x64
 8003f7a:	fb00 f303 	mul.w	r3, r0, r3
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	3332      	adds	r3, #50	; 0x32
 8003f84:	4a2e      	ldr	r2, [pc, #184]	; (8004040 <UART_SetConfig+0x1d0>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 0207 	and.w	r2, r3, #7
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	440a      	add	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f98:	e04a      	b.n	8004030 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009a      	lsls	r2, r3, #2
 8003fa4:	441a      	add	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	4a23      	ldr	r2, [pc, #140]	; (8004040 <UART_SetConfig+0x1d0>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	0119      	lsls	r1, r3, #4
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009a      	lsls	r2, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <UART_SetConfig+0x1d0>)
 8003fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2064      	movs	r0, #100	; 0x64
 8003fda:	fb00 f303 	mul.w	r3, r0, r3
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	3332      	adds	r3, #50	; 0x32
 8003fe4:	4a16      	ldr	r2, [pc, #88]	; (8004040 <UART_SetConfig+0x1d0>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff0:	4419      	add	r1, r3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009a      	lsls	r2, r3, #2
 8003ffc:	441a      	add	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	fbb2 f2f3 	udiv	r2, r2, r3
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <UART_SetConfig+0x1d0>)
 800400a:	fba3 0302 	umull	r0, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2064      	movs	r0, #100	; 0x64
 8004012:	fb00 f303 	mul.w	r3, r0, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	3332      	adds	r3, #50	; 0x32
 800401c:	4a08      	ldr	r2, [pc, #32]	; (8004040 <UART_SetConfig+0x1d0>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	f003 020f 	and.w	r2, r3, #15
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	440a      	add	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40011000 	.word	0x40011000
 800403c:	40011400 	.word	0x40011400
 8004040:	51eb851f 	.word	0x51eb851f

08004044 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004044:	b084      	sub	sp, #16
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	f107 001c 	add.w	r0, r7, #28
 8004052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	2b01      	cmp	r3, #1
 800405a:	d122      	bne.n	80040a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d105      	bne.n	8004096 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa46 	bl	8004528 <USB_CoreReset>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]
 80040a0:	e010      	b.n	80040c4 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa3a 	bl	8004528 <USB_CoreReset>
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10b      	bne.n	80040e2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f043 0206 	orr.w	r2, r3, #6
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f043 0220 	orr.w	r2, r3, #32
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040ee:	b004      	add	sp, #16
 80040f0:	4770      	bx	lr

080040f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f023 0201 	bic.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	e00b      	b.n	8004156 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	60da      	str	r2, [r3, #12]
 8004150:	e001      	b.n	8004156 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e003      	b.n	800415e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004156:	2032      	movs	r0, #50	; 0x32
 8004158:	f7fd f88a 	bl	8001270 <HAL_Delay>

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004168:	b084      	sub	sp, #16
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e009      	b.n	800419c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	3340      	adds	r3, #64	; 0x40
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	2200      	movs	r2, #0
 8004194:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	3301      	adds	r3, #1
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b0e      	cmp	r3, #14
 80041a0:	d9f2      	bls.n	8004188 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d11c      	bne.n	80041e2 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b6:	f043 0302 	orr.w	r3, r3, #2
 80041ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
 80041e0:	e00b      	b.n	80041fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004200:	461a      	mov	r2, r3
 8004202:	2300      	movs	r3, #0
 8004204:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420c:	4619      	mov	r1, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	461a      	mov	r2, r3
 8004216:	680b      	ldr	r3, [r1, #0]
 8004218:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800421a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10c      	bne.n	800423a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d104      	bne.n	8004230 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004226:	2100      	movs	r1, #0
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f945 	bl	80044b8 <USB_SetDevSpeed>
 800422e:	e008      	b.n	8004242 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004230:	2101      	movs	r1, #1
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f940 	bl	80044b8 <USB_SetDevSpeed>
 8004238:	e003      	b.n	8004242 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800423a:	2103      	movs	r1, #3
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f93b 	bl	80044b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004242:	2110      	movs	r1, #16
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8f3 	bl	8004430 <USB_FlushTxFifo>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f90f 	bl	8004478 <USB_FlushRxFifo>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	461a      	mov	r2, r3
 8004278:	2300      	movs	r3, #0
 800427a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	461a      	mov	r2, r3
 8004284:	2300      	movs	r3, #0
 8004286:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	e043      	b.n	8004316 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042a4:	d118      	bne.n	80042d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	461a      	mov	r2, r3
 80042ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e013      	b.n	80042ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ce:	461a      	mov	r2, r3
 80042d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e008      	b.n	80042ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	461a      	mov	r2, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800430e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	3301      	adds	r3, #1
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	d3b7      	bcc.n	800428e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
 8004322:	e043      	b.n	80043ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800433a:	d118      	bne.n	800436e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10a      	bne.n	8004358 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434e:	461a      	mov	r2, r3
 8004350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e013      	b.n	8004380 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	e008      	b.n	8004380 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	461a      	mov	r2, r3
 800437c:	2300      	movs	r3, #0
 800437e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	461a      	mov	r2, r3
 800438e:	2300      	movs	r3, #0
 8004390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3301      	adds	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d3b7      	bcc.n	8004324 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f043 0210 	orr.w	r2, r3, #16
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <USB_DevInit+0x2c4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f043 0208 	orr.w	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004428:	b004      	add	sp, #16
 800442a:	4770      	bx	lr
 800442c:	803c3800 	.word	0x803c3800

08004430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	019b      	lsls	r3, r3, #6
 8004442:	f043 0220 	orr.w	r2, r3, #32
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a08      	ldr	r2, [pc, #32]	; (8004474 <USB_FlushTxFifo+0x44>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e006      	b.n	800446a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b20      	cmp	r3, #32
 8004466:	d0f0      	beq.n	800444a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	00030d40 	.word	0x00030d40

08004478 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2210      	movs	r2, #16
 8004488:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <USB_FlushRxFifo+0x3c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d901      	bls.n	800449c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e006      	b.n	80044aa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d0f0      	beq.n	800448a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	00030d40 	.word	0x00030d40

080044b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a12      	ldr	r2, [pc, #72]	; (8004588 <USB_CoreReset+0x60>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e01b      	b.n	800457e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	daf2      	bge.n	8004534 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <USB_CoreReset+0x60>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d901      	bls.n	8004570 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e006      	b.n	800457e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b01      	cmp	r3, #1
 800457a:	d0f0      	beq.n	800455e <USB_CoreReset+0x36>

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	00030d40 	.word	0x00030d40

0800458c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	b08e      	sub	sp, #56	; 0x38
 8004590:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004592:	4ba0      	ldr	r3, [pc, #640]	; (8004814 <MX_LWIP_Init+0x288>)
 8004594:	22c0      	movs	r2, #192	; 0xc0
 8004596:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004598:	4b9e      	ldr	r3, [pc, #632]	; (8004814 <MX_LWIP_Init+0x288>)
 800459a:	22a8      	movs	r2, #168	; 0xa8
 800459c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800459e:	4b9d      	ldr	r3, [pc, #628]	; (8004814 <MX_LWIP_Init+0x288>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 101;
 80045a4:	4b9b      	ldr	r3, [pc, #620]	; (8004814 <MX_LWIP_Init+0x288>)
 80045a6:	2265      	movs	r2, #101	; 0x65
 80045a8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80045aa:	4b9b      	ldr	r3, [pc, #620]	; (8004818 <MX_LWIP_Init+0x28c>)
 80045ac:	22ff      	movs	r2, #255	; 0xff
 80045ae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80045b0:	4b99      	ldr	r3, [pc, #612]	; (8004818 <MX_LWIP_Init+0x28c>)
 80045b2:	22ff      	movs	r2, #255	; 0xff
 80045b4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80045b6:	4b98      	ldr	r3, [pc, #608]	; (8004818 <MX_LWIP_Init+0x28c>)
 80045b8:	22ff      	movs	r2, #255	; 0xff
 80045ba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80045bc:	4b96      	ldr	r3, [pc, #600]	; (8004818 <MX_LWIP_Init+0x28c>)
 80045be:	2200      	movs	r2, #0
 80045c0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80045c2:	4b96      	ldr	r3, [pc, #600]	; (800481c <MX_LWIP_Init+0x290>)
 80045c4:	22c0      	movs	r2, #192	; 0xc0
 80045c6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80045c8:	4b94      	ldr	r3, [pc, #592]	; (800481c <MX_LWIP_Init+0x290>)
 80045ca:	22a8      	movs	r2, #168	; 0xa8
 80045cc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80045ce:	4b93      	ldr	r3, [pc, #588]	; (800481c <MX_LWIP_Init+0x290>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80045d4:	4b91      	ldr	r3, [pc, #580]	; (800481c <MX_LWIP_Init+0x290>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80045da:	2100      	movs	r1, #0
 80045dc:	2000      	movs	r0, #0
 80045de:	f003 fd27 	bl	8008030 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80045e2:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <MX_LWIP_Init+0x288>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	061a      	lsls	r2, r3, #24
 80045e8:	4b8a      	ldr	r3, [pc, #552]	; (8004814 <MX_LWIP_Init+0x288>)
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	431a      	orrs	r2, r3
 80045f0:	4b88      	ldr	r3, [pc, #544]	; (8004814 <MX_LWIP_Init+0x288>)
 80045f2:	789b      	ldrb	r3, [r3, #2]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	4313      	orrs	r3, r2
 80045f8:	4a86      	ldr	r2, [pc, #536]	; (8004814 <MX_LWIP_Init+0x288>)
 80045fa:	78d2      	ldrb	r2, [r2, #3]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	061a      	lsls	r2, r3, #24
 8004600:	4b84      	ldr	r3, [pc, #528]	; (8004814 <MX_LWIP_Init+0x288>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	0619      	lsls	r1, r3, #24
 8004606:	4b83      	ldr	r3, [pc, #524]	; (8004814 <MX_LWIP_Init+0x288>)
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	4319      	orrs	r1, r3
 800460e:	4b81      	ldr	r3, [pc, #516]	; (8004814 <MX_LWIP_Init+0x288>)
 8004610:	789b      	ldrb	r3, [r3, #2]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	430b      	orrs	r3, r1
 8004616:	497f      	ldr	r1, [pc, #508]	; (8004814 <MX_LWIP_Init+0x288>)
 8004618:	78c9      	ldrb	r1, [r1, #3]
 800461a:	430b      	orrs	r3, r1
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004622:	431a      	orrs	r2, r3
 8004624:	4b7b      	ldr	r3, [pc, #492]	; (8004814 <MX_LWIP_Init+0x288>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	0619      	lsls	r1, r3, #24
 800462a:	4b7a      	ldr	r3, [pc, #488]	; (8004814 <MX_LWIP_Init+0x288>)
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	4319      	orrs	r1, r3
 8004632:	4b78      	ldr	r3, [pc, #480]	; (8004814 <MX_LWIP_Init+0x288>)
 8004634:	789b      	ldrb	r3, [r3, #2]
 8004636:	021b      	lsls	r3, r3, #8
 8004638:	430b      	orrs	r3, r1
 800463a:	4976      	ldr	r1, [pc, #472]	; (8004814 <MX_LWIP_Init+0x288>)
 800463c:	78c9      	ldrb	r1, [r1, #3]
 800463e:	430b      	orrs	r3, r1
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004646:	431a      	orrs	r2, r3
 8004648:	4b72      	ldr	r3, [pc, #456]	; (8004814 <MX_LWIP_Init+0x288>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	0619      	lsls	r1, r3, #24
 800464e:	4b71      	ldr	r3, [pc, #452]	; (8004814 <MX_LWIP_Init+0x288>)
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	041b      	lsls	r3, r3, #16
 8004654:	4319      	orrs	r1, r3
 8004656:	4b6f      	ldr	r3, [pc, #444]	; (8004814 <MX_LWIP_Init+0x288>)
 8004658:	789b      	ldrb	r3, [r3, #2]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	430b      	orrs	r3, r1
 800465e:	496d      	ldr	r1, [pc, #436]	; (8004814 <MX_LWIP_Init+0x288>)
 8004660:	78c9      	ldrb	r1, [r1, #3]
 8004662:	430b      	orrs	r3, r1
 8004664:	0e1b      	lsrs	r3, r3, #24
 8004666:	4313      	orrs	r3, r2
 8004668:	4a6d      	ldr	r2, [pc, #436]	; (8004820 <MX_LWIP_Init+0x294>)
 800466a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800466c:	4b6a      	ldr	r3, [pc, #424]	; (8004818 <MX_LWIP_Init+0x28c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	061a      	lsls	r2, r3, #24
 8004672:	4b69      	ldr	r3, [pc, #420]	; (8004818 <MX_LWIP_Init+0x28c>)
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	041b      	lsls	r3, r3, #16
 8004678:	431a      	orrs	r2, r3
 800467a:	4b67      	ldr	r3, [pc, #412]	; (8004818 <MX_LWIP_Init+0x28c>)
 800467c:	789b      	ldrb	r3, [r3, #2]
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	4313      	orrs	r3, r2
 8004682:	4a65      	ldr	r2, [pc, #404]	; (8004818 <MX_LWIP_Init+0x28c>)
 8004684:	78d2      	ldrb	r2, [r2, #3]
 8004686:	4313      	orrs	r3, r2
 8004688:	061a      	lsls	r2, r3, #24
 800468a:	4b63      	ldr	r3, [pc, #396]	; (8004818 <MX_LWIP_Init+0x28c>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	0619      	lsls	r1, r3, #24
 8004690:	4b61      	ldr	r3, [pc, #388]	; (8004818 <MX_LWIP_Init+0x28c>)
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	4319      	orrs	r1, r3
 8004698:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <MX_LWIP_Init+0x28c>)
 800469a:	789b      	ldrb	r3, [r3, #2]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	430b      	orrs	r3, r1
 80046a0:	495d      	ldr	r1, [pc, #372]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046a2:	78c9      	ldrb	r1, [r1, #3]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046ac:	431a      	orrs	r2, r3
 80046ae:	4b5a      	ldr	r3, [pc, #360]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	0619      	lsls	r1, r3, #24
 80046b4:	4b58      	ldr	r3, [pc, #352]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	4319      	orrs	r1, r3
 80046bc:	4b56      	ldr	r3, [pc, #344]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046be:	789b      	ldrb	r3, [r3, #2]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	430b      	orrs	r3, r1
 80046c4:	4954      	ldr	r1, [pc, #336]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046c6:	78c9      	ldrb	r1, [r1, #3]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046d0:	431a      	orrs	r2, r3
 80046d2:	4b51      	ldr	r3, [pc, #324]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	0619      	lsls	r1, r3, #24
 80046d8:	4b4f      	ldr	r3, [pc, #316]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	4319      	orrs	r1, r3
 80046e0:	4b4d      	ldr	r3, [pc, #308]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046e2:	789b      	ldrb	r3, [r3, #2]
 80046e4:	021b      	lsls	r3, r3, #8
 80046e6:	430b      	orrs	r3, r1
 80046e8:	494b      	ldr	r1, [pc, #300]	; (8004818 <MX_LWIP_Init+0x28c>)
 80046ea:	78c9      	ldrb	r1, [r1, #3]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	0e1b      	lsrs	r3, r3, #24
 80046f0:	4313      	orrs	r3, r2
 80046f2:	4a4c      	ldr	r2, [pc, #304]	; (8004824 <MX_LWIP_Init+0x298>)
 80046f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80046f6:	4b49      	ldr	r3, [pc, #292]	; (800481c <MX_LWIP_Init+0x290>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	061a      	lsls	r2, r3, #24
 80046fc:	4b47      	ldr	r3, [pc, #284]	; (800481c <MX_LWIP_Init+0x290>)
 80046fe:	785b      	ldrb	r3, [r3, #1]
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	4b45      	ldr	r3, [pc, #276]	; (800481c <MX_LWIP_Init+0x290>)
 8004706:	789b      	ldrb	r3, [r3, #2]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	4313      	orrs	r3, r2
 800470c:	4a43      	ldr	r2, [pc, #268]	; (800481c <MX_LWIP_Init+0x290>)
 800470e:	78d2      	ldrb	r2, [r2, #3]
 8004710:	4313      	orrs	r3, r2
 8004712:	061a      	lsls	r2, r3, #24
 8004714:	4b41      	ldr	r3, [pc, #260]	; (800481c <MX_LWIP_Init+0x290>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	0619      	lsls	r1, r3, #24
 800471a:	4b40      	ldr	r3, [pc, #256]	; (800481c <MX_LWIP_Init+0x290>)
 800471c:	785b      	ldrb	r3, [r3, #1]
 800471e:	041b      	lsls	r3, r3, #16
 8004720:	4319      	orrs	r1, r3
 8004722:	4b3e      	ldr	r3, [pc, #248]	; (800481c <MX_LWIP_Init+0x290>)
 8004724:	789b      	ldrb	r3, [r3, #2]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	430b      	orrs	r3, r1
 800472a:	493c      	ldr	r1, [pc, #240]	; (800481c <MX_LWIP_Init+0x290>)
 800472c:	78c9      	ldrb	r1, [r1, #3]
 800472e:	430b      	orrs	r3, r1
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004736:	431a      	orrs	r2, r3
 8004738:	4b38      	ldr	r3, [pc, #224]	; (800481c <MX_LWIP_Init+0x290>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	0619      	lsls	r1, r3, #24
 800473e:	4b37      	ldr	r3, [pc, #220]	; (800481c <MX_LWIP_Init+0x290>)
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	4319      	orrs	r1, r3
 8004746:	4b35      	ldr	r3, [pc, #212]	; (800481c <MX_LWIP_Init+0x290>)
 8004748:	789b      	ldrb	r3, [r3, #2]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	430b      	orrs	r3, r1
 800474e:	4933      	ldr	r1, [pc, #204]	; (800481c <MX_LWIP_Init+0x290>)
 8004750:	78c9      	ldrb	r1, [r1, #3]
 8004752:	430b      	orrs	r3, r1
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800475a:	431a      	orrs	r2, r3
 800475c:	4b2f      	ldr	r3, [pc, #188]	; (800481c <MX_LWIP_Init+0x290>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	0619      	lsls	r1, r3, #24
 8004762:	4b2e      	ldr	r3, [pc, #184]	; (800481c <MX_LWIP_Init+0x290>)
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	4319      	orrs	r1, r3
 800476a:	4b2c      	ldr	r3, [pc, #176]	; (800481c <MX_LWIP_Init+0x290>)
 800476c:	789b      	ldrb	r3, [r3, #2]
 800476e:	021b      	lsls	r3, r3, #8
 8004770:	430b      	orrs	r3, r1
 8004772:	492a      	ldr	r1, [pc, #168]	; (800481c <MX_LWIP_Init+0x290>)
 8004774:	78c9      	ldrb	r1, [r1, #3]
 8004776:	430b      	orrs	r3, r1
 8004778:	0e1b      	lsrs	r3, r3, #24
 800477a:	4313      	orrs	r3, r2
 800477c:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <MX_LWIP_Init+0x29c>)
 800477e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004780:	4b2a      	ldr	r3, [pc, #168]	; (800482c <MX_LWIP_Init+0x2a0>)
 8004782:	9302      	str	r3, [sp, #8]
 8004784:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <MX_LWIP_Init+0x2a4>)
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	2300      	movs	r3, #0
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	4b26      	ldr	r3, [pc, #152]	; (8004828 <MX_LWIP_Init+0x29c>)
 800478e:	4a25      	ldr	r2, [pc, #148]	; (8004824 <MX_LWIP_Init+0x298>)
 8004790:	4923      	ldr	r1, [pc, #140]	; (8004820 <MX_LWIP_Init+0x294>)
 8004792:	4828      	ldr	r0, [pc, #160]	; (8004834 <MX_LWIP_Init+0x2a8>)
 8004794:	f007 f812 	bl	800b7bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004798:	4826      	ldr	r0, [pc, #152]	; (8004834 <MX_LWIP_Init+0x2a8>)
 800479a:	f007 f8f1 	bl	800b980 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800479e:	4b25      	ldr	r3, [pc, #148]	; (8004834 <MX_LWIP_Init+0x2a8>)
 80047a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80047b0:	4820      	ldr	r0, [pc, #128]	; (8004834 <MX_LWIP_Init+0x2a8>)
 80047b2:	f007 f8f3 	bl	800b99c <netif_set_up>
 80047b6:	e002      	b.n	80047be <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80047b8:	481e      	ldr	r0, [pc, #120]	; (8004834 <MX_LWIP_Init+0x2a8>)
 80047ba:	f007 f933 	bl	800ba24 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80047be:	491e      	ldr	r1, [pc, #120]	; (8004838 <MX_LWIP_Init+0x2ac>)
 80047c0:	481c      	ldr	r0, [pc, #112]	; (8004834 <MX_LWIP_Init+0x2a8>)
 80047c2:	f007 f99c 	bl	800bafe <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80047c6:	2300      	movs	r3, #0
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	2300      	movs	r3, #0
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80047ce:	f107 0320 	add.w	r3, r7, #32
 80047d2:	2101      	movs	r1, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fd9f 	bl	8005318 <osSemaphoreCreate>
 80047da:	4603      	mov	r3, r0
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <MX_LWIP_Init+0x2b0>)
 80047de:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80047e0:	4b17      	ldr	r3, [pc, #92]	; (8004840 <MX_LWIP_Init+0x2b4>)
 80047e2:	4a14      	ldr	r2, [pc, #80]	; (8004834 <MX_LWIP_Init+0x2a8>)
 80047e4:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <MX_LWIP_Init+0x2b0>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a15      	ldr	r2, [pc, #84]	; (8004840 <MX_LWIP_Init+0x2b4>)
 80047ec:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <MX_LWIP_Init+0x2b8>)
 80047f0:	1d3c      	adds	r4, r7, #4
 80047f2:	461d      	mov	r5, r3
 80047f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	490f      	ldr	r1, [pc, #60]	; (8004840 <MX_LWIP_Init+0x2b4>)
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fc8b 	bl	8005120 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800480a:	bf00      	nop
 800480c:	3728      	adds	r7, #40	; 0x28
 800480e:	46bd      	mov	sp, r7
 8004810:	bdb0      	pop	{r4, r5, r7, pc}
 8004812:	bf00      	nop
 8004814:	20005324 	.word	0x20005324
 8004818:	20005320 	.word	0x20005320
 800481c:	200052e4 	.word	0x200052e4
 8004820:	2000531c 	.word	0x2000531c
 8004824:	20005328 	.word	0x20005328
 8004828:	2000532c 	.word	0x2000532c
 800482c:	08007f59 	.word	0x08007f59
 8004830:	08004eb5 	.word	0x08004eb5
 8004834:	200052e8 	.word	0x200052e8
 8004838:	08004f99 	.word	0x08004f99
 800483c:	20000900 	.word	0x20000900
 8004840:	200052dc 	.word	0x200052dc
 8004844:	08015c44 	.word	0x08015c44

08004848 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08e      	sub	sp, #56	; 0x38
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	605a      	str	r2, [r3, #4]
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	60da      	str	r2, [r3, #12]
 800485e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a59      	ldr	r2, [pc, #356]	; (80049cc <HAL_ETH_MspInit+0x184>)
 8004866:	4293      	cmp	r3, r2
 8004868:	f040 80ac 	bne.w	80049c4 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800486c:	2300      	movs	r3, #0
 800486e:	623b      	str	r3, [r7, #32]
 8004870:	4b57      	ldr	r3, [pc, #348]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	4a56      	ldr	r2, [pc, #344]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 8004876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800487a:	6313      	str	r3, [r2, #48]	; 0x30
 800487c:	4b54      	ldr	r3, [pc, #336]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	4a4f      	ldr	r2, [pc, #316]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 8004892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004896:	6313      	str	r3, [r2, #48]	; 0x30
 8004898:	4b4d      	ldr	r3, [pc, #308]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	2300      	movs	r3, #0
 80048a6:	61bb      	str	r3, [r7, #24]
 80048a8:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	4a48      	ldr	r2, [pc, #288]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048b2:	6313      	str	r3, [r2, #48]	; 0x30
 80048b4:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	4a41      	ldr	r2, [pc, #260]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	6313      	str	r3, [r2, #48]	; 0x30
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	4a3a      	ldr	r2, [pc, #232]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6313      	str	r3, [r2, #48]	; 0x30
 80048ec:	4b38      	ldr	r3, [pc, #224]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	4b34      	ldr	r3, [pc, #208]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	4a33      	ldr	r2, [pc, #204]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 8004902:	f043 0302 	orr.w	r3, r3, #2
 8004906:	6313      	str	r3, [r2, #48]	; 0x30
 8004908:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
 8004918:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 800491e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004922:	6313      	str	r3, [r2, #48]	; 0x30
 8004924:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <HAL_ETH_MspInit+0x188>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004930:	2332      	movs	r3, #50	; 0x32
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493c:	2303      	movs	r3, #3
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004940:	230b      	movs	r3, #11
 8004942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004948:	4619      	mov	r1, r3
 800494a:	4822      	ldr	r0, [pc, #136]	; (80049d4 <HAL_ETH_MspInit+0x18c>)
 800494c:	f7fe f818 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004950:	2386      	movs	r3, #134	; 0x86
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004954:	2302      	movs	r3, #2
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495c:	2303      	movs	r3, #3
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004960:	230b      	movs	r3, #11
 8004962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004968:	4619      	mov	r1, r3
 800496a:	481b      	ldr	r0, [pc, #108]	; (80049d8 <HAL_ETH_MspInit+0x190>)
 800496c:	f7fe f808 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004976:	2302      	movs	r3, #2
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497a:	2300      	movs	r3, #0
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800497e:	2303      	movs	r3, #3
 8004980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004982:	230b      	movs	r3, #11
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498a:	4619      	mov	r1, r3
 800498c:	4813      	ldr	r0, [pc, #76]	; (80049dc <HAL_ETH_MspInit+0x194>)
 800498e:	f7fd fff7 	bl	8002980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004992:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a0:	2303      	movs	r3, #3
 80049a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80049a4:	230b      	movs	r3, #11
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ac:	4619      	mov	r1, r3
 80049ae:	480c      	ldr	r0, [pc, #48]	; (80049e0 <HAL_ETH_MspInit+0x198>)
 80049b0:	f7fd ffe6 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80049b4:	2200      	movs	r2, #0
 80049b6:	2105      	movs	r1, #5
 80049b8:	203d      	movs	r0, #61	; 0x3d
 80049ba:	f7fc fe2e 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80049be:	203d      	movs	r0, #61	; 0x3d
 80049c0:	f7fc fe47 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80049c4:	bf00      	nop
 80049c6:	3738      	adds	r7, #56	; 0x38
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40028000 	.word	0x40028000
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40020800 	.word	0x40020800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	40020400 	.word	0x40020400
 80049e0:	40021800 	.word	0x40021800

080049e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <HAL_ETH_RxCpltCallback+0x1c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fd11 	bl	8005418 <osSemaphoreRelease>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000904 	.word	0x20000904

08004a04 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004a04:	b5b0      	push	{r4, r5, r7, lr}
 8004a06:	b090      	sub	sp, #64	; 0x40
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a10:	4b60      	ldr	r3, [pc, #384]	; (8004b94 <low_level_init+0x190>)
 8004a12:	4a61      	ldr	r2, [pc, #388]	; (8004b98 <low_level_init+0x194>)
 8004a14:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004a16:	4b5f      	ldr	r3, [pc, #380]	; (8004b94 <low_level_init+0x190>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004a1c:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <low_level_init+0x190>)
 8004a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a22:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a24:	4b5b      	ldr	r3, [pc, #364]	; (8004b94 <low_level_init+0x190>)
 8004a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a2a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004a2c:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <low_level_init+0x190>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8004a3e:	23e1      	movs	r3, #225	; 0xe1
 8004a40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004a56:	4a4f      	ldr	r2, [pc, #316]	; (8004b94 <low_level_init+0x190>)
 8004a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a5c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004a5e:	4b4d      	ldr	r3, [pc, #308]	; (8004b94 <low_level_init+0x190>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004a64:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <low_level_init+0x190>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004a6a:	4b4a      	ldr	r3, [pc, #296]	; (8004b94 <low_level_init+0x190>)
 8004a6c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a70:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a72:	4848      	ldr	r0, [pc, #288]	; (8004b94 <low_level_init+0x190>)
 8004a74:	f7fc fdfc 	bl	8001670 <HAL_ETH_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004a7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004a8c:	f043 0304 	orr.w	r3, r3, #4
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004a98:	2304      	movs	r3, #4
 8004a9a:	4a40      	ldr	r2, [pc, #256]	; (8004b9c <low_level_init+0x198>)
 8004a9c:	4940      	ldr	r1, [pc, #256]	; (8004ba0 <low_level_init+0x19c>)
 8004a9e:	483d      	ldr	r0, [pc, #244]	; (8004b94 <low_level_init+0x190>)
 8004aa0:	f7fc ff72 	bl	8001988 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	4a3f      	ldr	r2, [pc, #252]	; (8004ba4 <low_level_init+0x1a0>)
 8004aa8:	493f      	ldr	r1, [pc, #252]	; (8004ba8 <low_level_init+0x1a4>)
 8004aaa:	483a      	ldr	r0, [pc, #232]	; (8004b94 <low_level_init+0x190>)
 8004aac:	f7fc ffd4 	bl	8001a58 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2206      	movs	r2, #6
 8004ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004ab8:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <low_level_init+0x190>)
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ac4:	4b33      	ldr	r3, [pc, #204]	; (8004b94 <low_level_init+0x190>)
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	785a      	ldrb	r2, [r3, #1]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ad0:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <low_level_init+0x190>)
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	789a      	ldrb	r2, [r3, #2]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <low_level_init+0x190>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	78da      	ldrb	r2, [r3, #3]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <low_level_init+0x190>)
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	791a      	ldrb	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <low_level_init+0x190>)
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	795a      	ldrb	r2, [r3, #5]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b06:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004b0e:	f043 030a 	orr.w	r3, r3, #10
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1e:	2300      	movs	r3, #0
 8004b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fbf5 	bl	8005318 <osSemaphoreCreate>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4a1e      	ldr	r2, [pc, #120]	; (8004bac <low_level_init+0x1a8>)
 8004b32:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004b34:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <low_level_init+0x1ac>)
 8004b36:	f107 040c 	add.w	r4, r7, #12
 8004b3a:	461d      	mov	r5, r3
 8004b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004b48:	f107 030c 	add.w	r3, r7, #12
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fae6 	bl	8005120 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004b54:	480f      	ldr	r0, [pc, #60]	; (8004b94 <low_level_init+0x190>)
 8004b56:	f7fd faa3 	bl	80020a0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004b5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b5e:	461a      	mov	r2, r3
 8004b60:	211d      	movs	r1, #29
 8004b62:	480c      	ldr	r0, [pc, #48]	; (8004b94 <low_level_init+0x190>)
 8004b64:	f7fd f9ce 	bl	8001f04 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	f043 030b 	orr.w	r3, r3, #11
 8004b6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	461a      	mov	r2, r3
 8004b74:	211d      	movs	r1, #29
 8004b76:	4807      	ldr	r0, [pc, #28]	; (8004b94 <low_level_init+0x190>)
 8004b78:	f7fd fa2c 	bl	8001fd4 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004b7c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b80:	461a      	mov	r2, r3
 8004b82:	211d      	movs	r1, #29
 8004b84:	4803      	ldr	r0, [pc, #12]	; (8004b94 <low_level_init+0x190>)
 8004b86:	f7fd f9bd 	bl	8001f04 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004b8a:	bf00      	nop
 8004b8c:	3740      	adds	r7, #64	; 0x40
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bdb0      	pop	{r4, r5, r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20006c00 	.word	0x20006c00
 8004b98:	40028000 	.word	0x40028000
 8004b9c:	20006c48 	.word	0x20006c48
 8004ba0:	20005330 	.word	0x20005330
 8004ba4:	200053b0 	.word	0x200053b0
 8004ba8:	20006b80 	.word	0x20006b80
 8004bac:	20000904 	.word	0x20000904
 8004bb0:	08015c68 	.word	0x08015c68

08004bb4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004bbe:	4b4b      	ldr	r3, [pc, #300]	; (8004cec <low_level_output+0x138>)
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004bd6:	4b45      	ldr	r3, [pc, #276]	; (8004cec <low_level_output+0x138>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	e05a      	b.n	8004c9c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da03      	bge.n	8004bf6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004bee:	23f8      	movs	r3, #248	; 0xf8
 8004bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004bf4:	e05c      	b.n	8004cb0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	895b      	ldrh	r3, [r3, #10]
 8004bfa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004c00:	e02f      	b.n	8004c62 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	18d0      	adds	r0, r2, r3
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	18d1      	adds	r1, r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004c16:	3304      	adds	r3, #4
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f00f ffa9 	bl	8014b70 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	da03      	bge.n	8004c34 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004c2c:	23f8      	movs	r3, #248	; 0xf8
 8004c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004c32:	e03d      	b.n	8004cb0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004c44:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c50:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c5c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d8c8      	bhi.n	8004c02 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	18d0      	adds	r0, r2, r3
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4619      	mov	r1, r3
 8004c82:	f00f ff75 	bl	8014b70 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	623b      	str	r3, [r7, #32]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1a1      	bne.n	8004be6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	4811      	ldr	r0, [pc, #68]	; (8004cec <low_level_output+0x138>)
 8004ca6:	f7fc ff43 	bl	8001b30 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <low_level_output+0x138>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb8:	3314      	adds	r3, #20
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004cc4:	4b09      	ldr	r3, [pc, #36]	; (8004cec <low_level_output+0x138>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ccc:	3314      	adds	r3, #20
 8004cce:	2220      	movs	r2, #32
 8004cd0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <low_level_output+0x138>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cda:	3304      	adds	r3, #4
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004ce0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3728      	adds	r7, #40	; 0x28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20006c00 	.word	0x20006c00

08004cf0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	; 0x30
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004d14:	484e      	ldr	r0, [pc, #312]	; (8004e50 <low_level_input+0x160>)
 8004d16:	f7fc fff5 	bl	8001d04 <HAL_ETH_GetReceivedFrame_IT>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <low_level_input+0x34>

    return NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e091      	b.n	8004e48 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004d24:	4b4a      	ldr	r3, [pc, #296]	; (8004e50 <low_level_input+0x160>)
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004d2a:	4b49      	ldr	r3, [pc, #292]	; (8004e50 <low_level_input+0x160>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004d30:	89fb      	ldrh	r3, [r7, #14]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d006      	beq.n	8004d44 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	2004      	movs	r0, #4
 8004d3e:	f006 ff4f 	bl	800bbe0 <pbuf_alloc>
 8004d42:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d04b      	beq.n	8004de2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004d4a:	4b41      	ldr	r3, [pc, #260]	; (8004e50 <low_level_input+0x160>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d58:	e040      	b.n	8004ddc <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	895b      	ldrh	r3, [r3, #10]
 8004d5e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004d64:	e021      	b.n	8004daa <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	18d0      	adds	r0, r2, r3
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	18d1      	adds	r1, r2, r3
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f00f fef7 	bl	8014b70 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	4413      	add	r3, r2
 8004d94:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004d98:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004da4:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d8d6      	bhi.n	8004d66 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	18d0      	adds	r0, r2, r3
 8004dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f00f fed1 	bl	8014b70 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1bb      	bne.n	8004d5a <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004de2:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <low_level_input+0x160>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	e00b      	b.n	8004e06 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	3301      	adds	r3, #1
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <low_level_input+0x160>)
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3ee      	bcc.n	8004dee <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <low_level_input+0x160>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <low_level_input+0x160>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e1e:	3314      	adds	r3, #20
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00d      	beq.n	8004e46 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <low_level_input+0x160>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e32:	3314      	adds	r3, #20
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <low_level_input+0x160>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e40:	3308      	adds	r3, #8
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3730      	adds	r7, #48	; 0x30
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20006c00 	.word	0x20006c00

08004e54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <ethernetif_input+0x58>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fa87 	bl	800537c <osSemaphoreWait>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f5      	bne.n	8004e60 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004e74:	480e      	ldr	r0, [pc, #56]	; (8004eb0 <ethernetif_input+0x5c>)
 8004e76:	f00f fde9 	bl	8014a4c <sys_mutex_lock>
        p = low_level_input( netif );
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff ff38 	bl	8004cf0 <low_level_input>
 8004e80:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	68f9      	ldr	r1, [r7, #12]
 8004e8e:	68b8      	ldr	r0, [r7, #8]
 8004e90:	4798      	blx	r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004e98:	68b8      	ldr	r0, [r7, #8]
 8004e9a:	f007 fa13 	bl	800c2c4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004e9e:	4804      	ldr	r0, [pc, #16]	; (8004eb0 <ethernetif_input+0x5c>)
 8004ea0:	f00f fde3 	bl	8014a6a <sys_mutex_unlock>
      } while(p!=NULL);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e4      	bne.n	8004e74 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004eaa:	e7d9      	b.n	8004e60 <ethernetif_input+0xc>
 8004eac:	20000904 	.word	0x20000904
 8004eb0:	20008418 	.word	0x20008418

08004eb4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <ethernetif_init+0x1c>
 8004ec2:	4b0e      	ldr	r3, [pc, #56]	; (8004efc <ethernetif_init+0x48>)
 8004ec4:	f240 2235 	movw	r2, #565	; 0x235
 8004ec8:	490d      	ldr	r1, [pc, #52]	; (8004f00 <ethernetif_init+0x4c>)
 8004eca:	480e      	ldr	r0, [pc, #56]	; (8004f04 <ethernetif_init+0x50>)
 8004ecc:	f00f fe66 	bl	8014b9c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2273      	movs	r2, #115	; 0x73
 8004ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2274      	movs	r2, #116	; 0x74
 8004edc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <ethernetif_init+0x54>)
 8004ee4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <ethernetif_init+0x58>)
 8004eea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff fd89 	bl	8004a04 <low_level_init>

  return ERR_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	08015c84 	.word	0x08015c84
 8004f00:	08015ca0 	.word	0x08015ca0
 8004f04:	08015cb0 	.word	0x08015cb0
 8004f08:	08012cd9 	.word	0x08012cd9
 8004f0c:	08004bb5 	.word	0x08004bb5

08004f10 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f14:	f7fc f9a2 	bl	800125c <HAL_GetTick>
 8004f18:	4603      	mov	r3, r0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	461a      	mov	r2, r3
 8004f36:	2101      	movs	r1, #1
 8004f38:	4816      	ldr	r0, [pc, #88]	; (8004f94 <ethernetif_set_link+0x74>)
 8004f3a:	f7fc ffe3 	bl	8001f04 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d108      	bne.n	8004f68 <ethernetif_set_link+0x48>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f006 fd81 	bl	800ba68 <netif_set_link_up>
 8004f66:	e011      	b.n	8004f8c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <ethernetif_set_link+0x6c>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f006 fd99 	bl	800babe <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004f8c:	20c8      	movs	r0, #200	; 0xc8
 8004f8e:	f000 f913 	bl	80051b8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004f92:	e7cd      	b.n	8004f30 <ethernetif_set_link+0x10>
 8004f94:	20006c00 	.word	0x20006c00

08004f98 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d05d      	beq.n	8005076 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004fba:	4b34      	ldr	r3, [pc, #208]	; (800508c <ethernetif_update_config+0xf4>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d03f      	beq.n	8005042 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004fc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4830      	ldr	r0, [pc, #192]	; (800508c <ethernetif_update_config+0xf4>)
 8004fca:	f7fd f803 	bl	8001fd4 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004fce:	f7fc f945 	bl	800125c <HAL_GetTick>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	461a      	mov	r2, r3
 8004fdc:	2101      	movs	r1, #1
 8004fde:	482b      	ldr	r0, [pc, #172]	; (800508c <ethernetif_update_config+0xf4>)
 8004fe0:	f7fc ff90 	bl	8001f04 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004fe4:	f7fc f93a 	bl	800125c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ff2:	d828      	bhi.n	8005046 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0eb      	beq.n	8004fd6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	461a      	mov	r2, r3
 8005004:	2110      	movs	r1, #16
 8005006:	4821      	ldr	r0, [pc, #132]	; (800508c <ethernetif_update_config+0xf4>)
 8005008:	f7fc ff7c 	bl	8001f04 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005016:	4b1d      	ldr	r3, [pc, #116]	; (800508c <ethernetif_update_config+0xf4>)
 8005018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	e002      	b.n	8005026 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <ethernetif_update_config+0xf4>)
 8005022:	2200      	movs	r2, #0
 8005024:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005030:	4b16      	ldr	r3, [pc, #88]	; (800508c <ethernetif_update_config+0xf4>)
 8005032:	2200      	movs	r2, #0
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	e016      	b.n	8005066 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005038:	4b14      	ldr	r3, [pc, #80]	; (800508c <ethernetif_update_config+0xf4>)
 800503a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800503e:	609a      	str	r2, [r3, #8]
 8005040:	e011      	b.n	8005066 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <ethernetif_update_config+0xb0>
          goto error;
 8005046:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005048:	4b10      	ldr	r3, [pc, #64]	; (800508c <ethernetif_update_config+0xf4>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <ethernetif_update_config+0xf4>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005058:	4313      	orrs	r3, r2
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	2100      	movs	r1, #0
 8005060:	480a      	ldr	r0, [pc, #40]	; (800508c <ethernetif_update_config+0xf4>)
 8005062:	f7fc ffb7 	bl	8001fd4 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005066:	2100      	movs	r1, #0
 8005068:	4808      	ldr	r0, [pc, #32]	; (800508c <ethernetif_update_config+0xf4>)
 800506a:	f7fd f877 	bl	800215c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800506e:	4807      	ldr	r0, [pc, #28]	; (800508c <ethernetif_update_config+0xf4>)
 8005070:	f7fd f816 	bl	80020a0 <HAL_ETH_Start>
 8005074:	e002      	b.n	800507c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005076:	4805      	ldr	r0, [pc, #20]	; (800508c <ethernetif_update_config+0xf4>)
 8005078:	f7fd f841 	bl	80020fe <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f807 	bl	8005090 <ethernetif_notify_conn_changed>
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20006c00 	.word	0x20006c00

08005090 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b085      	sub	sp, #20
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	4603      	mov	r3, r0
 80050aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b4:	2b84      	cmp	r3, #132	; 0x84
 80050b6:	d005      	beq.n	80050c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	3303      	adds	r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050d6:	f3ef 8305 	mrs	r3, IPSR
 80050da:	607b      	str	r3, [r7, #4]
  return(result);
 80050dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf14      	ite	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	2300      	moveq	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050f6:	f001 fc51 	bl	800699c <vTaskStartScheduler>
  
  return osOK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}

08005100 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005104:	f7ff ffe4 	bl	80050d0 <inHandlerMode>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800510e:	f001 fd5d 	bl	8006bcc <xTaskGetTickCountFromISR>
 8005112:	4603      	mov	r3, r0
 8005114:	e002      	b.n	800511c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005116:	f001 fd4b 	bl	8006bb0 <xTaskGetTickCount>
 800511a:	4603      	mov	r3, r0
  }
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}

08005120 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005122:	b089      	sub	sp, #36	; 0x24
 8005124:	af04      	add	r7, sp, #16
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d020      	beq.n	8005174 <osThreadCreate+0x54>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01c      	beq.n	8005174 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685c      	ldr	r4, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681d      	ldr	r5, [r3, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691e      	ldr	r6, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ffa8 	bl	80050a2 <makeFreeRtosPriority>
 8005152:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800515c:	9202      	str	r2, [sp, #8]
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	9100      	str	r1, [sp, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	4632      	mov	r2, r6
 8005166:	4629      	mov	r1, r5
 8005168:	4620      	mov	r0, r4
 800516a:	f001 fa58 	bl	800661e <xTaskCreateStatic>
 800516e:	4603      	mov	r3, r0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e01c      	b.n	80051ae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685c      	ldr	r4, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005180:	b29e      	uxth	r6, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff8a 	bl	80050a2 <makeFreeRtosPriority>
 800518e:	4602      	mov	r2, r0
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	9301      	str	r3, [sp, #4]
 8005196:	9200      	str	r2, [sp, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	4632      	mov	r2, r6
 800519c:	4629      	mov	r1, r5
 800519e:	4620      	mov	r0, r4
 80051a0:	f001 fa99 	bl	80066d6 <xTaskCreate>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d001      	beq.n	80051ae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051b8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <osDelay+0x16>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	e000      	b.n	80051d0 <osDelay+0x18>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 fbaf 	bl	8006934 <vTaskDelay>
  
  return osOK;
 80051d6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4619      	mov	r1, r3
 80051f6:	2001      	movs	r0, #1
 80051f8:	f000 fc3e 	bl	8005a78 <xQueueCreateMutexStatic>
 80051fc:	4603      	mov	r3, r0
 80051fe:	e003      	b.n	8005208 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005200:	2001      	movs	r0, #1
 8005202:	f000 fc21 	bl	8005a48 <xQueueCreateMutex>
 8005206:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <osMutexWait+0x18>
    return osErrorParameter;
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	e03a      	b.n	800529e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d103      	bne.n	800523c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	e009      	b.n	8005250 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <osMutexWait+0x40>
      ticks = 1;
 800524c:	2301      	movs	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005250:	f7ff ff3e 	bl	80050d0 <inHandlerMode>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d017      	beq.n	800528a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	461a      	mov	r2, r3
 8005260:	2100      	movs	r1, #0
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 f834 	bl	80062d0 <xQueueReceiveFromISR>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d001      	beq.n	8005272 <osMutexWait+0x62>
      return osErrorOS;
 800526e:	23ff      	movs	r3, #255	; 0xff
 8005270:	e015      	b.n	800529e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d011      	beq.n	800529c <osMutexWait+0x8c>
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <osMutexWait+0x98>)
 800527a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	e008      	b.n	800529c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 ff13 	bl	80060b8 <xQueueSemaphoreTake>
 8005292:	4603      	mov	r3, r0
 8005294:	2b01      	cmp	r3, #1
 8005296:	d001      	beq.n	800529c <osMutexWait+0x8c>
    return osErrorOS;
 8005298:	23ff      	movs	r3, #255	; 0xff
 800529a:	e000      	b.n	800529e <osMutexWait+0x8e>
  }
  
  return osOK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80052bc:	f7ff ff08 	bl	80050d0 <inHandlerMode>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80052c6:	f107 0308 	add.w	r3, r7, #8
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fd85 	bl	8005ddc <xQueueGiveFromISR>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d001      	beq.n	80052dc <osMutexRelease+0x30>
      return osErrorOS;
 80052d8:	23ff      	movs	r3, #255	; 0xff
 80052da:	e017      	b.n	800530c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d013      	beq.n	800530a <osMutexRelease+0x5e>
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <osMutexRelease+0x68>)
 80052e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	e00a      	b.n	800530a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80052f4:	2300      	movs	r3, #0
 80052f6:	2200      	movs	r2, #0
 80052f8:	2100      	movs	r1, #0
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fbd8 	bl	8005ab0 <xQueueGenericSend>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d001      	beq.n	800530a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005306:	23ff      	movs	r3, #255	; 0xff
 8005308:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00f      	beq.n	800534a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10a      	bne.n	8005346 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2203      	movs	r2, #3
 8005336:	9200      	str	r2, [sp, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	2100      	movs	r1, #0
 800533c:	2001      	movs	r0, #1
 800533e:	f000 fa95 	bl	800586c <xQueueGenericCreateStatic>
 8005342:	4603      	mov	r3, r0
 8005344:	e016      	b.n	8005374 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	e014      	b.n	8005374 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d110      	bne.n	8005372 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005350:	2203      	movs	r2, #3
 8005352:	2100      	movs	r1, #0
 8005354:	2001      	movs	r0, #1
 8005356:	f000 fb00 	bl	800595a <xQueueGenericCreate>
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <osSemaphoreCreate+0x56>
 8005362:	2300      	movs	r3, #0
 8005364:	2200      	movs	r2, #0
 8005366:	2100      	movs	r1, #0
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 fba1 	bl	8005ab0 <xQueueGenericSend>
      return sema;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	e000      	b.n	8005374 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005372:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	e03a      	b.n	800540a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539e:	d103      	bne.n	80053a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80053a0:	f04f 33ff 	mov.w	r3, #4294967295
 80053a4:	60fb      	str	r3, [r7, #12]
 80053a6:	e009      	b.n	80053bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d006      	beq.n	80053bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <osSemaphoreWait+0x40>
      ticks = 1;
 80053b8:	2301      	movs	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053bc:	f7ff fe88 	bl	80050d0 <inHandlerMode>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d017      	beq.n	80053f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80053c6:	f107 0308 	add.w	r3, r7, #8
 80053ca:	461a      	mov	r2, r3
 80053cc:	2100      	movs	r1, #0
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 ff7e 	bl	80062d0 <xQueueReceiveFromISR>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <osSemaphoreWait+0x62>
      return osErrorOS;
 80053da:	23ff      	movs	r3, #255	; 0xff
 80053dc:	e015      	b.n	800540a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d011      	beq.n	8005408 <osSemaphoreWait+0x8c>
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <osSemaphoreWait+0x98>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	e008      	b.n	8005408 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fe5d 	bl	80060b8 <xQueueSemaphoreTake>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b01      	cmp	r3, #1
 8005402:	d001      	beq.n	8005408 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005404:	23ff      	movs	r3, #255	; 0xff
 8005406:	e000      	b.n	800540a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005424:	2300      	movs	r3, #0
 8005426:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005428:	f7ff fe52 	bl	80050d0 <inHandlerMode>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fccf 	bl	8005ddc <xQueueGiveFromISR>
 800543e:	4603      	mov	r3, r0
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005444:	23ff      	movs	r3, #255	; 0xff
 8005446:	e017      	b.n	8005478 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d013      	beq.n	8005476 <osSemaphoreRelease+0x5e>
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <osSemaphoreRelease+0x68>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	e00a      	b.n	8005476 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005460:	2300      	movs	r3, #0
 8005462:	2200      	movs	r2, #0
 8005464:	2100      	movs	r1, #0
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fb22 	bl	8005ab0 <xQueueGenericSend>
 800546c:	4603      	mov	r3, r0
 800546e:	2b01      	cmp	r3, #1
 8005470:	d001      	beq.n	8005476 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005472:	23ff      	movs	r3, #255	; 0xff
 8005474:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b085      	sub	sp, #20
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d011      	beq.n	80054ba <osMessageCreate+0x36>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00d      	beq.n	80054ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6859      	ldr	r1, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2400      	movs	r4, #0
 80054b0:	9400      	str	r4, [sp, #0]
 80054b2:	f000 f9db 	bl	800586c <xQueueGenericCreateStatic>
 80054b6:	4603      	mov	r3, r0
 80054b8:	e008      	b.n	80054cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	4619      	mov	r1, r3
 80054c6:	f000 fa48 	bl	800595a <xQueueGenericCreate>
 80054ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd90      	pop	{r4, r7, pc}

080054d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <osMessagePut+0x1e>
    ticks = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80054f2:	f7ff fded 	bl	80050d0 <inHandlerMode>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d018      	beq.n	800552e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80054fc:	f107 0210 	add.w	r2, r7, #16
 8005500:	f107 0108 	add.w	r1, r7, #8
 8005504:	2300      	movs	r3, #0
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fbd0 	bl	8005cac <xQueueGenericSendFromISR>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d001      	beq.n	8005516 <osMessagePut+0x42>
      return osErrorOS;
 8005512:	23ff      	movs	r3, #255	; 0xff
 8005514:	e018      	b.n	8005548 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d014      	beq.n	8005546 <osMessagePut+0x72>
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <osMessagePut+0x7c>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	e00b      	b.n	8005546 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800552e:	f107 0108 	add.w	r1, r7, #8
 8005532:	2300      	movs	r3, #0
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 faba 	bl	8005ab0 <xQueueGenericSend>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d001      	beq.n	8005546 <osMessagePut+0x72>
      return osErrorOS;
 8005542:	23ff      	movs	r3, #255	; 0xff
 8005544:	e000      	b.n	8005548 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005554:	b590      	push	{r4, r7, lr}
 8005556:	b08b      	sub	sp, #44	; 0x2c
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	617b      	str	r3, [r7, #20]
    return event;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	461c      	mov	r4, r3
 8005576:	f107 0314 	add.w	r3, r7, #20
 800557a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800557e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005582:	e054      	b.n	800562e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005584:	2300      	movs	r3, #0
 8005586:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005592:	d103      	bne.n	800559c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005594:	f04f 33ff 	mov.w	r3, #4294967295
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
 800559a:	e009      	b.n	80055b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <osMessageGet+0x5c>
      ticks = 1;
 80055ac:	2301      	movs	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80055b0:	f7ff fd8e 	bl	80050d0 <inHandlerMode>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01c      	beq.n	80055f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80055ba:	f107 0220 	add.w	r2, r7, #32
 80055be:	f107 0314 	add.w	r3, r7, #20
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	68b8      	ldr	r0, [r7, #8]
 80055c8:	f000 fe82 	bl	80062d0 <xQueueReceiveFromISR>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d102      	bne.n	80055d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80055d2:	2310      	movs	r3, #16
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	e001      	b.n	80055dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01d      	beq.n	800561e <osMessageGet+0xca>
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <osMessageGet+0xe4>)
 80055e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	e014      	b.n	800561e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	3304      	adds	r3, #4
 80055fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fc:	4619      	mov	r1, r3
 80055fe:	68b8      	ldr	r0, [r7, #8]
 8005600:	f000 fc7a 	bl	8005ef8 <xQueueReceive>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d102      	bne.n	8005610 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800560a:	2310      	movs	r3, #16
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e006      	b.n	800561e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <osMessageGet+0xc6>
 8005616:	2300      	movs	r3, #0
 8005618:	e000      	b.n	800561c <osMessageGet+0xc8>
 800561a:	2340      	movs	r3, #64	; 0x40
 800561c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	461c      	mov	r4, r3
 8005622:	f107 0314 	add.w	r3, r7, #20
 8005626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800562a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	372c      	adds	r7, #44	; 0x2c
 8005632:	46bd      	mov	sp, r7
 8005634:	bd90      	pop	{r4, r7, pc}
 8005636:	bf00      	nop
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f103 0208 	add.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f04f 32ff 	mov.w	r2, #4294967295
 8005654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f103 0208 	add.w	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f103 0208 	add.w	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr

0800567a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
}
 80056ce:	bf00      	nop
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d103      	bne.n	80056f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e00c      	b.n	8005712 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3308      	adds	r3, #8
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e002      	b.n	8005706 <vListInsert+0x2e>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d2f6      	bcs.n	8005700 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6892      	ldr	r2, [r2, #8]
 800575e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6852      	ldr	r2, [r2, #4]
 8005768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d103      	bne.n	800577c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
	...

0800579c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057c6:	f002 f841 	bl	800784c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057d6:	fb01 f303 	mul.w	r3, r1, r3
 80057da:	441a      	add	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	3b01      	subs	r3, #1
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	441a      	add	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	22ff      	movs	r2, #255	; 0xff
 800580a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	22ff      	movs	r2, #255	; 0xff
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d114      	bne.n	8005846 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01a      	beq.n	800585a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3310      	adds	r3, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f001 fb1d 	bl	8006e68 <xTaskRemoveFromEventList>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005834:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <xQueueGenericReset+0xcc>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	e009      	b.n	800585a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3310      	adds	r3, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fef6 	bl	800563c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3324      	adds	r3, #36	; 0x24
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fef1 	bl	800563c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800585a:	f002 f827 	bl	80078ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800585e:	2301      	movs	r3, #1
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <xQueueGenericCreateStatic+0x52>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <xQueueGenericCreateStatic+0x56>
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <xQueueGenericCreateStatic+0x58>
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	623b      	str	r3, [r7, #32]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d102      	bne.n	80058ea <xQueueGenericCreateStatic+0x7e>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueGenericCreateStatic+0x82>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueGenericCreateStatic+0x84>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	61fb      	str	r3, [r7, #28]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800590a:	2348      	movs	r3, #72	; 0x48
 800590c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b48      	cmp	r3, #72	; 0x48
 8005912:	d00a      	beq.n	800592a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61bb      	str	r3, [r7, #24]
}
 8005926:	bf00      	nop
 8005928:	e7fe      	b.n	8005928 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00d      	beq.n	8005950 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800593c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f843 	bl	80059d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005952:	4618      	mov	r0, r3
 8005954:	3730      	adds	r7, #48	; 0x30
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08a      	sub	sp, #40	; 0x28
 800595e:	af02      	add	r7, sp, #8
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	4613      	mov	r3, r2
 8005966:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <xQueueGenericCreate+0x2a>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	613b      	str	r3, [r7, #16]
}
 8005980:	bf00      	nop
 8005982:	e7fe      	b.n	8005982 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e004      	b.n	800599a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3348      	adds	r3, #72	; 0x48
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 f854 	bl	8007a4c <pvPortMalloc>
 80059a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00f      	beq.n	80059cc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	3348      	adds	r3, #72	; 0x48
 80059b0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059ba:	79fa      	ldrb	r2, [r7, #7]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f805 	bl	80059d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80059cc:	69bb      	ldr	r3, [r7, #24]
	}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e002      	b.n	80059f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a04:	2101      	movs	r1, #1
 8005a06:	69b8      	ldr	r0, [r7, #24]
 8005a08:	f7ff fec8 	bl	800579c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00e      	beq.n	8005a40 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a34:	2300      	movs	r3, #0
 8005a36:	2200      	movs	r2, #0
 8005a38:	2100      	movs	r1, #0
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f838 	bl	8005ab0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a52:	2301      	movs	r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6939      	ldr	r1, [r7, #16]
 8005a60:	6978      	ldr	r0, [r7, #20]
 8005a62:	f7ff ff7a 	bl	800595a <xQueueGenericCreate>
 8005a66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff ffd3 	bl	8005a14 <prvInitialiseMutex>

		return pxNewQueue;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
	}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	4603      	mov	r3, r0
 8005a80:	6039      	str	r1, [r7, #0]
 8005a82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	6939      	ldr	r1, [r7, #16]
 8005a96:	6978      	ldr	r0, [r7, #20]
 8005a98:	f7ff fee8 	bl	800586c <xQueueGenericCreateStatic>
 8005a9c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff ffb8 	bl	8005a14 <prvInitialiseMutex>

		return pxNewQueue;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
	}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08e      	sub	sp, #56	; 0x38
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d103      	bne.n	8005af0 <xQueueGenericSend+0x40>
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <xQueueGenericSend+0x44>
 8005af0:	2301      	movs	r3, #1
 8005af2:	e000      	b.n	8005af6 <xQueueGenericSend+0x46>
 8005af4:	2300      	movs	r3, #0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <xQueueGenericSend+0x60>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d103      	bne.n	8005b1e <xQueueGenericSend+0x6e>
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <xQueueGenericSend+0x72>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <xQueueGenericSend+0x74>
 8005b22:	2300      	movs	r3, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	623b      	str	r3, [r7, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	e7fe      	b.n	8005b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b3e:	f001 fb53 	bl	80071e8 <xTaskGetSchedulerState>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <xQueueGenericSend+0x9e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <xQueueGenericSend+0xa2>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueGenericSend+0xa4>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61fb      	str	r3, [r7, #28]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b6e:	f001 fe6d 	bl	800784c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d302      	bcc.n	8005b84 <xQueueGenericSend+0xd4>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d129      	bne.n	8005bd8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	68b9      	ldr	r1, [r7, #8]
 8005b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8a:	f000 fc38 	bl	80063fe <prvCopyDataToQueue>
 8005b8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	3324      	adds	r3, #36	; 0x24
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 f963 	bl	8006e68 <xTaskRemoveFromEventList>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d013      	beq.n	8005bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ba8:	4b3f      	ldr	r3, [pc, #252]	; (8005ca8 <xQueueGenericSend+0x1f8>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	e00a      	b.n	8005bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d007      	beq.n	8005bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bc0:	4b39      	ldr	r3, [pc, #228]	; (8005ca8 <xQueueGenericSend+0x1f8>)
 8005bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bd0:	f001 fe6c 	bl	80078ac <vPortExitCritical>
				return pdPASS;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e063      	b.n	8005ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bde:	f001 fe65 	bl	80078ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e05c      	b.n	8005ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 f99b 	bl	8006f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bfa:	f001 fe57 	bl	80078ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bfe:	f000 ff2d 	bl	8006a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c02:	f001 fe23 	bl	800784c <vPortEnterCritical>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c0c:	b25b      	sxtb	r3, r3
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d103      	bne.n	8005c1c <xQueueGenericSend+0x16c>
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c22:	b25b      	sxtb	r3, r3
 8005c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c28:	d103      	bne.n	8005c32 <xQueueGenericSend+0x182>
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c32:	f001 fe3b 	bl	80078ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c36:	1d3a      	adds	r2, r7, #4
 8005c38:	f107 0314 	add.w	r3, r7, #20
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 f98a 	bl	8006f58 <xTaskCheckForTimeOut>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d124      	bne.n	8005c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c4c:	f000 fccf 	bl	80065ee <prvIsQueueFull>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	3310      	adds	r3, #16
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 f8de 	bl	8006e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c66:	f000 fc5a 	bl	800651e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c6a:	f000 ff05 	bl	8006a78 <xTaskResumeAll>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f47f af7c 	bne.w	8005b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <xQueueGenericSend+0x1f8>)
 8005c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	e772      	b.n	8005b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c8a:	f000 fc48 	bl	800651e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c8e:	f000 fef3 	bl	8006a78 <xTaskResumeAll>
 8005c92:	e76c      	b.n	8005b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c96:	f000 fc42 	bl	800651e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c9a:	f000 feed 	bl	8006a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c9e:	2300      	movs	r3, #0
		}
	}
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3738      	adds	r7, #56	; 0x38
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08e      	sub	sp, #56	; 0x38
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
 8005cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d103      	bne.n	8005ce8 <xQueueGenericSendFromISR+0x3c>
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <xQueueGenericSendFromISR+0x40>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <xQueueGenericSendFromISR+0x42>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	623b      	str	r3, [r7, #32]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d103      	bne.n	8005d16 <xQueueGenericSendFromISR+0x6a>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <xQueueGenericSendFromISR+0x6e>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <xQueueGenericSendFromISR+0x70>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10a      	bne.n	8005d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	61fb      	str	r3, [r7, #28]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d36:	f001 fe4b 	bl	80079d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	61ba      	str	r2, [r7, #24]
 8005d50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d302      	bcc.n	8005d68 <xQueueGenericSendFromISR+0xbc>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d12c      	bne.n	8005dc2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d78:	f000 fb41 	bl	80063fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d84:	d112      	bne.n	8005dac <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d016      	beq.n	8005dbc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	3324      	adds	r3, #36	; 0x24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 f868 	bl	8006e68 <xTaskRemoveFromEventList>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00e      	beq.n	8005dbc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	e007      	b.n	8005dbc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005db0:	3301      	adds	r3, #1
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	b25a      	sxtb	r2, r3
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005dc0:	e001      	b.n	8005dc6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005dd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3738      	adds	r7, #56	; 0x38
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	; 0x38
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	623b      	str	r3, [r7, #32]
}
 8005e02:	bf00      	nop
 8005e04:	e7fe      	b.n	8005e04 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	61fb      	str	r3, [r7, #28]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <xQueueGiveFromISR+0x58>
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <xQueueGiveFromISR+0x5c>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <xQueueGiveFromISR+0x5e>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	61bb      	str	r3, [r7, #24]
}
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e54:	f001 fdbc 	bl	80079d0 <vPortValidateInterruptPriority>
	__asm volatile
 8005e58:	f3ef 8211 	mrs	r2, BASEPRI
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	617a      	str	r2, [r7, #20]
 8005e6e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005e70:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d22b      	bcs.n	8005edc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d112      	bne.n	8005ec6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d016      	beq.n	8005ed6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	3324      	adds	r3, #36	; 0x24
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 ffdb 	bl	8006e68 <xTaskRemoveFromEventList>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00e      	beq.n	8005ed6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e007      	b.n	8005ed6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eca:	3301      	adds	r3, #1
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	b25a      	sxtb	r2, r3
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eda:	e001      	b.n	8005ee0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f383 8811 	msr	BASEPRI, r3
}
 8005eea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3738      	adds	r7, #56	; 0x38
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08c      	sub	sp, #48	; 0x30
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <xQueueReceive+0x30>
	__asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	623b      	str	r3, [r7, #32]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <xQueueReceive+0x3e>
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <xQueueReceive+0x42>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <xQueueReceive+0x44>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xQueueReceive+0x5e>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61fb      	str	r3, [r7, #28]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f56:	f001 f947 	bl	80071e8 <xTaskGetSchedulerState>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <xQueueReceive+0x6e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <xQueueReceive+0x72>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <xQueueReceive+0x74>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xQueueReceive+0x8e>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	61bb      	str	r3, [r7, #24]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f86:	f001 fc61 	bl	800784c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01f      	beq.n	8005fd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f9a:	f000 fa9a 	bl	80064d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	1e5a      	subs	r2, r3, #1
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00f      	beq.n	8005fce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	3310      	adds	r3, #16
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 ff58 	bl	8006e68 <xTaskRemoveFromEventList>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fbe:	4b3d      	ldr	r3, [pc, #244]	; (80060b4 <xQueueReceive+0x1bc>)
 8005fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fce:	f001 fc6d 	bl	80078ac <vPortExitCritical>
				return pdPASS;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e069      	b.n	80060aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d103      	bne.n	8005fe4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fdc:	f001 fc66 	bl	80078ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e062      	b.n	80060aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fea:	f107 0310 	add.w	r3, r7, #16
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 ff9c 	bl	8006f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ff8:	f001 fc58 	bl	80078ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ffc:	f000 fd2e 	bl	8006a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006000:	f001 fc24 	bl	800784c <vPortEnterCritical>
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800600a:	b25b      	sxtb	r3, r3
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d103      	bne.n	800601a <xQueueReceive+0x122>
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006020:	b25b      	sxtb	r3, r3
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d103      	bne.n	8006030 <xQueueReceive+0x138>
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006030:	f001 fc3c 	bl	80078ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006034:	1d3a      	adds	r2, r7, #4
 8006036:	f107 0310 	add.w	r3, r7, #16
 800603a:	4611      	mov	r1, r2
 800603c:	4618      	mov	r0, r3
 800603e:	f000 ff8b 	bl	8006f58 <xTaskCheckForTimeOut>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d123      	bne.n	8006090 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800604a:	f000 faba 	bl	80065c2 <prvIsQueueEmpty>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d017      	beq.n	8006084 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fedf 	bl	8006e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006064:	f000 fa5b 	bl	800651e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006068:	f000 fd06 	bl	8006a78 <xTaskResumeAll>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d189      	bne.n	8005f86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <xQueueReceive+0x1bc>)
 8006074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	e780      	b.n	8005f86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006084:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006086:	f000 fa4a 	bl	800651e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800608a:	f000 fcf5 	bl	8006a78 <xTaskResumeAll>
 800608e:	e77a      	b.n	8005f86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006092:	f000 fa44 	bl	800651e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006096:	f000 fcef 	bl	8006a78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800609a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800609c:	f000 fa91 	bl	80065c2 <prvIsQueueEmpty>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f43f af6f 	beq.w	8005f86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3730      	adds	r7, #48	; 0x30
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08e      	sub	sp, #56	; 0x38
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	61fb      	str	r3, [r7, #28]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006108:	f001 f86e 	bl	80071e8 <xTaskGetSchedulerState>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <xQueueSemaphoreTake+0x60>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <xQueueSemaphoreTake+0x64>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <xQueueSemaphoreTake+0x66>
 800611c:	2300      	movs	r3, #0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	61bb      	str	r3, [r7, #24]
}
 8006134:	bf00      	nop
 8006136:	e7fe      	b.n	8006136 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006138:	f001 fb88 	bl	800784c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d024      	beq.n	8006192 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614a:	1e5a      	subs	r2, r3, #1
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800614e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006158:	f001 fa10 	bl	800757c <pvTaskIncrementMutexHeldCount>
 800615c:	4602      	mov	r2, r0
 800615e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006160:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00f      	beq.n	800618a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	3310      	adds	r3, #16
 800616e:	4618      	mov	r0, r3
 8006170:	f000 fe7a 	bl	8006e68 <xTaskRemoveFromEventList>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800617a:	4b54      	ldr	r3, [pc, #336]	; (80062cc <xQueueSemaphoreTake+0x214>)
 800617c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800618a:	f001 fb8f 	bl	80078ac <vPortExitCritical>
				return pdPASS;
 800618e:	2301      	movs	r3, #1
 8006190:	e097      	b.n	80062c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d111      	bne.n	80061bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	617b      	str	r3, [r7, #20]
}
 80061b0:	bf00      	nop
 80061b2:	e7fe      	b.n	80061b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80061b4:	f001 fb7a 	bl	80078ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e082      	b.n	80062c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 feb0 	bl	8006f2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061d0:	f001 fb6c 	bl	80078ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061d4:	f000 fc42 	bl	8006a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061d8:	f001 fb38 	bl	800784c <vPortEnterCritical>
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e2:	b25b      	sxtb	r3, r3
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d103      	bne.n	80061f2 <xQueueSemaphoreTake+0x13a>
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d103      	bne.n	8006208 <xQueueSemaphoreTake+0x150>
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006208:	f001 fb50 	bl	80078ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800620c:	463a      	mov	r2, r7
 800620e:	f107 030c 	add.w	r3, r7, #12
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fe9f 	bl	8006f58 <xTaskCheckForTimeOut>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d132      	bne.n	8006286 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006222:	f000 f9ce 	bl	80065c2 <prvIsQueueEmpty>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d026      	beq.n	800627a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006234:	f001 fb0a 	bl	800784c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 fff1 	bl	8007224 <xTaskPriorityInherit>
 8006242:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006244:	f001 fb32 	bl	80078ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	3324      	adds	r3, #36	; 0x24
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fde5 	bl	8006e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006258:	f000 f961 	bl	800651e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800625c:	f000 fc0c 	bl	8006a78 <xTaskResumeAll>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	f47f af68 	bne.w	8006138 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006268:	4b18      	ldr	r3, [pc, #96]	; (80062cc <xQueueSemaphoreTake+0x214>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	e75e      	b.n	8006138 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800627a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800627c:	f000 f94f 	bl	800651e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006280:	f000 fbfa 	bl	8006a78 <xTaskResumeAll>
 8006284:	e758      	b.n	8006138 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006288:	f000 f949 	bl	800651e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800628c:	f000 fbf4 	bl	8006a78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006290:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006292:	f000 f996 	bl	80065c2 <prvIsQueueEmpty>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	f43f af4d 	beq.w	8006138 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80062a4:	f001 fad2 	bl	800784c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80062a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062aa:	f000 f891 	bl	80063d0 <prvGetDisinheritPriorityAfterTimeout>
 80062ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 f8c0 	bl	800743c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80062bc:	f001 faf6 	bl	80078ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3738      	adds	r7, #56	; 0x38
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08e      	sub	sp, #56	; 0x38
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	623b      	str	r3, [r7, #32]
}
 80062f8:	bf00      	nop
 80062fa:	e7fe      	b.n	80062fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <xQueueReceiveFromISR+0x3a>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <xQueueReceiveFromISR+0x3e>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <xQueueReceiveFromISR+0x40>
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	61fb      	str	r3, [r7, #28]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800632a:	f001 fb51 	bl	80079d0 <vPortValidateInterruptPriority>
	__asm volatile
 800632e:	f3ef 8211 	mrs	r2, BASEPRI
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	61ba      	str	r2, [r7, #24]
 8006344:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006346:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02f      	beq.n	80063b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800635c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006364:	f000 f8b5 	bl	80064d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d112      	bne.n	80063a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	3310      	adds	r3, #16
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fd6e 	bl	8006e68 <xTaskRemoveFromEventList>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00e      	beq.n	80063b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e007      	b.n	80063b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80063a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063a4:	3301      	adds	r3, #1
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	b25a      	sxtb	r2, r3
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80063b0:	2301      	movs	r3, #1
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
 80063b4:	e001      	b.n	80063ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f383 8811 	msr	BASEPRI, r3
}
 80063c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3738      	adds	r7, #56	; 0x38
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d006      	beq.n	80063ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f1c3 0307 	rsb	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	e001      	b.n	80063f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063f2:	68fb      	ldr	r3, [r7, #12]
	}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bc80      	pop	{r7}
 80063fc:	4770      	bx	lr

080063fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006412:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10d      	bne.n	8006438 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d14d      	bne.n	80064c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4618      	mov	r0, r3
 800642a:	f000 ff81 	bl	8007330 <xTaskPriorityDisinherit>
 800642e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	e043      	b.n	80064c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d119      	bne.n	8006472 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6898      	ldr	r0, [r3, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	461a      	mov	r2, r3
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	f00e fb91 	bl	8014b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	441a      	add	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d32b      	bcc.n	80064c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	609a      	str	r2, [r3, #8]
 8006470:	e026      	b.n	80064c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68d8      	ldr	r0, [r3, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	461a      	mov	r2, r3
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	f00e fb77 	bl	8014b70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	425b      	negs	r3, r3
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d207      	bcs.n	80064ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	425b      	negs	r3, r3
 80064a8:	441a      	add	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d105      	bne.n	80064c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	3b01      	subs	r3, #1
 80064be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064c8:	697b      	ldr	r3, [r7, #20]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b082      	sub	sp, #8
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d018      	beq.n	8006516 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	441a      	add	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d303      	bcc.n	8006506 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68d9      	ldr	r1, [r3, #12]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	461a      	mov	r2, r3
 8006510:	6838      	ldr	r0, [r7, #0]
 8006512:	f00e fb2d 	bl	8014b70 <memcpy>
	}
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006526:	f001 f991 	bl	800784c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006530:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006532:	e011      	b.n	8006558 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006538:	2b00      	cmp	r3, #0
 800653a:	d012      	beq.n	8006562 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3324      	adds	r3, #36	; 0x24
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fc91 	bl	8006e68 <xTaskRemoveFromEventList>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800654c:	f000 fd66 	bl	800701c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	3b01      	subs	r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	dce9      	bgt.n	8006534 <prvUnlockQueue+0x16>
 8006560:	e000      	b.n	8006564 <prvUnlockQueue+0x46>
					break;
 8006562:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	22ff      	movs	r2, #255	; 0xff
 8006568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800656c:	f001 f99e 	bl	80078ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006570:	f001 f96c 	bl	800784c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800657a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800657c:	e011      	b.n	80065a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d012      	beq.n	80065ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3310      	adds	r3, #16
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fc6c 	bl	8006e68 <xTaskRemoveFromEventList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006596:	f000 fd41 	bl	800701c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	3b01      	subs	r3, #1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dce9      	bgt.n	800657e <prvUnlockQueue+0x60>
 80065aa:	e000      	b.n	80065ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065b6:	f001 f979 	bl	80078ac <vPortExitCritical>
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065ca:	f001 f93f 	bl	800784c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e001      	b.n	80065e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065e0:	f001 f964 	bl	80078ac <vPortExitCritical>

	return xReturn;
 80065e4:	68fb      	ldr	r3, [r7, #12]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065f6:	f001 f929 	bl	800784c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	429a      	cmp	r2, r3
 8006604:	d102      	bne.n	800660c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006606:	2301      	movs	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	e001      	b.n	8006610 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006610:	f001 f94c 	bl	80078ac <vPortExitCritical>

	return xReturn;
 8006614:	68fb      	ldr	r3, [r7, #12]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800661e:	b580      	push	{r7, lr}
 8006620:	b08e      	sub	sp, #56	; 0x38
 8006622:	af04      	add	r7, sp, #16
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800662c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	623b      	str	r3, [r7, #32]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <xTaskCreateStatic+0x46>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	61fb      	str	r3, [r7, #28]
}
 8006660:	bf00      	nop
 8006662:	e7fe      	b.n	8006662 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006664:	2354      	movs	r3, #84	; 0x54
 8006666:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b54      	cmp	r3, #84	; 0x54
 800666c:	d00a      	beq.n	8006684 <xTaskCreateStatic+0x66>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61bb      	str	r3, [r7, #24]
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01e      	beq.n	80066c8 <xTaskCreateStatic+0xaa>
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01b      	beq.n	80066c8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006698:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2202      	movs	r2, #2
 800669e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066a2:	2300      	movs	r3, #0
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	9302      	str	r3, [sp, #8]
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f850 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066c2:	f000 f8cd 	bl	8006860 <prvAddNewTaskToReadyList>
 80066c6:	e001      	b.n	80066cc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066cc:	697b      	ldr	r3, [r7, #20]
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b08c      	sub	sp, #48	; 0x30
 80066da:	af04      	add	r7, sp, #16
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 f9ae 	bl	8007a4c <pvPortMalloc>
 80066f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80066f8:	2054      	movs	r0, #84	; 0x54
 80066fa:	f001 f9a7 	bl	8007a4c <pvPortMalloc>
 80066fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
 800670c:	e005      	b.n	800671a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f001 fa60 	bl	8007bd4 <vPortFree>
 8006714:	e001      	b.n	800671a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d017      	beq.n	8006750 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	2300      	movs	r3, #0
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	9302      	str	r3, [sp, #8]
 8006732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f80e 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006744:	69f8      	ldr	r0, [r7, #28]
 8006746:	f000 f88b 	bl	8006860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800674a:	2301      	movs	r3, #1
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	e002      	b.n	8006756 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006756:	69bb      	ldr	r3, [r7, #24]
	}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006778:	3b01      	subs	r3, #1
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	617b      	str	r3, [r7, #20]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067a8:	2300      	movs	r3, #0
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e012      	b.n	80067d4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	7819      	ldrb	r1, [r3, #0]
 80067b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	4413      	add	r3, r2
 80067bc:	3334      	adds	r3, #52	; 0x34
 80067be:	460a      	mov	r2, r1
 80067c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	4413      	add	r3, r2
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d006      	beq.n	80067dc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3301      	adds	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	2b0f      	cmp	r3, #15
 80067d8:	d9e9      	bls.n	80067ae <prvInitialiseNewTask+0x4e>
 80067da:	e000      	b.n	80067de <prvInitialiseNewTask+0x7e>
		{
			break;
 80067dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	2b06      	cmp	r3, #6
 80067ea:	d901      	bls.n	80067f0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ec:	2306      	movs	r3, #6
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	2200      	movs	r2, #0
 8006800:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	3304      	adds	r3, #4
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe ff37 	bl	800567a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	3318      	adds	r3, #24
 8006810:	4618      	mov	r0, r3
 8006812:	f7fe ff32 	bl	800567a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681e:	f1c3 0207 	rsb	r2, r3, #7
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	2200      	movs	r2, #0
 8006830:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	68f9      	ldr	r1, [r7, #12]
 800683e:	69b8      	ldr	r0, [r7, #24]
 8006840:	f000 ff16 	bl	8007670 <pxPortInitialiseStack>
 8006844:	4602      	mov	r2, r0
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006856:	bf00      	nop
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006868:	f000 fff0 	bl	800784c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800686c:	4b2a      	ldr	r3, [pc, #168]	; (8006918 <prvAddNewTaskToReadyList+0xb8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a29      	ldr	r2, [pc, #164]	; (8006918 <prvAddNewTaskToReadyList+0xb8>)
 8006874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006876:	4b29      	ldr	r3, [pc, #164]	; (800691c <prvAddNewTaskToReadyList+0xbc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800687e:	4a27      	ldr	r2, [pc, #156]	; (800691c <prvAddNewTaskToReadyList+0xbc>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006884:	4b24      	ldr	r3, [pc, #144]	; (8006918 <prvAddNewTaskToReadyList+0xb8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d110      	bne.n	80068ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800688c:	f000 fbea 	bl	8007064 <prvInitialiseTaskLists>
 8006890:	e00d      	b.n	80068ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006892:	4b23      	ldr	r3, [pc, #140]	; (8006920 <prvAddNewTaskToReadyList+0xc0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800689a:	4b20      	ldr	r3, [pc, #128]	; (800691c <prvAddNewTaskToReadyList+0xbc>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d802      	bhi.n	80068ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068a8:	4a1c      	ldr	r2, [pc, #112]	; (800691c <prvAddNewTaskToReadyList+0xbc>)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068ae:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <prvAddNewTaskToReadyList+0xc4>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	4a1b      	ldr	r2, [pc, #108]	; (8006924 <prvAddNewTaskToReadyList+0xc4>)
 80068b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068bc:	2201      	movs	r2, #1
 80068be:	409a      	lsls	r2, r3
 80068c0:	4b19      	ldr	r3, [pc, #100]	; (8006928 <prvAddNewTaskToReadyList+0xc8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	4a18      	ldr	r2, [pc, #96]	; (8006928 <prvAddNewTaskToReadyList+0xc8>)
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4a15      	ldr	r2, [pc, #84]	; (800692c <prvAddNewTaskToReadyList+0xcc>)
 80068d8:	441a      	add	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe fed6 	bl	8005692 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068e6:	f000 ffe1 	bl	80078ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <prvAddNewTaskToReadyList+0xc0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00e      	beq.n	8006910 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068f2:	4b0a      	ldr	r3, [pc, #40]	; (800691c <prvAddNewTaskToReadyList+0xbc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d207      	bcs.n	8006910 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <prvAddNewTaskToReadyList+0xd0>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006910:	bf00      	nop
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000a08 	.word	0x20000a08
 800691c:	20000908 	.word	0x20000908
 8006920:	20000a14 	.word	0x20000a14
 8006924:	20000a24 	.word	0x20000a24
 8006928:	20000a10 	.word	0x20000a10
 800692c:	2000090c 	.word	0x2000090c
 8006930:	e000ed04 	.word	0xe000ed04

08006934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d017      	beq.n	8006976 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006946:	4b13      	ldr	r3, [pc, #76]	; (8006994 <vTaskDelay+0x60>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <vTaskDelay+0x30>
	__asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60bb      	str	r3, [r7, #8]
}
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006964:	f000 f87a 	bl	8006a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006968:	2100      	movs	r1, #0
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fe1a 	bl	80075a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006970:	f000 f882 	bl	8006a78 <xTaskResumeAll>
 8006974:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d107      	bne.n	800698c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800697c:	4b06      	ldr	r3, [pc, #24]	; (8006998 <vTaskDelay+0x64>)
 800697e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	20000a30 	.word	0x20000a30
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069aa:	463a      	mov	r2, r7
 80069ac:	1d39      	adds	r1, r7, #4
 80069ae:	f107 0308 	add.w	r3, r7, #8
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fa f81e 	bl	80009f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	9202      	str	r2, [sp, #8]
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	2300      	movs	r3, #0
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	2300      	movs	r3, #0
 80069c8:	460a      	mov	r2, r1
 80069ca:	491e      	ldr	r1, [pc, #120]	; (8006a44 <vTaskStartScheduler+0xa8>)
 80069cc:	481e      	ldr	r0, [pc, #120]	; (8006a48 <vTaskStartScheduler+0xac>)
 80069ce:	f7ff fe26 	bl	800661e <xTaskCreateStatic>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4a1d      	ldr	r2, [pc, #116]	; (8006a4c <vTaskStartScheduler+0xb0>)
 80069d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80069d8:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <vTaskStartScheduler+0xb0>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80069e0:	2301      	movs	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e001      	b.n	80069ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d116      	bne.n	8006a1e <vTaskStartScheduler+0x82>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	613b      	str	r3, [r7, #16]
}
 8006a02:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a04:	4b12      	ldr	r3, [pc, #72]	; (8006a50 <vTaskStartScheduler+0xb4>)
 8006a06:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a0c:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <vTaskStartScheduler+0xb8>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a12:	4b11      	ldr	r3, [pc, #68]	; (8006a58 <vTaskStartScheduler+0xbc>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a18:	f000 fea6 	bl	8007768 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a1c:	e00e      	b.n	8006a3c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a24:	d10a      	bne.n	8006a3c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60fb      	str	r3, [r7, #12]
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <vTaskStartScheduler+0x9e>
}
 8006a3c:	bf00      	nop
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	08015cd8 	.word	0x08015cd8
 8006a48:	08007035 	.word	0x08007035
 8006a4c:	20000a2c 	.word	0x20000a2c
 8006a50:	20000a28 	.word	0x20000a28
 8006a54:	20000a14 	.word	0x20000a14
 8006a58:	20000a0c 	.word	0x20000a0c

08006a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <vTaskSuspendAll+0x18>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	4a03      	ldr	r2, [pc, #12]	; (8006a74 <vTaskSuspendAll+0x18>)
 8006a68:	6013      	str	r3, [r2, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bc80      	pop	{r7}
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	20000a30 	.word	0x20000a30

08006a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a86:	4b41      	ldr	r3, [pc, #260]	; (8006b8c <xTaskResumeAll+0x114>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	603b      	str	r3, [r7, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006aa4:	f000 fed2 	bl	800784c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006aa8:	4b38      	ldr	r3, [pc, #224]	; (8006b8c <xTaskResumeAll+0x114>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <xTaskResumeAll+0x114>)
 8006ab0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ab2:	4b36      	ldr	r3, [pc, #216]	; (8006b8c <xTaskResumeAll+0x114>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d161      	bne.n	8006b7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006aba:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <xTaskResumeAll+0x118>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d05d      	beq.n	8006b7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ac2:	e02e      	b.n	8006b22 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006ac4:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <xTaskResumeAll+0x11c>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	3318      	adds	r3, #24
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe fe39 	bl	8005748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fe34 	bl	8005748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	4b2b      	ldr	r3, [pc, #172]	; (8006b98 <xTaskResumeAll+0x120>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	4a2a      	ldr	r2, [pc, #168]	; (8006b98 <xTaskResumeAll+0x120>)
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4a27      	ldr	r2, [pc, #156]	; (8006b9c <xTaskResumeAll+0x124>)
 8006b00:	441a      	add	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3304      	adds	r3, #4
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7fe fdc2 	bl	8005692 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b12:	4b23      	ldr	r3, [pc, #140]	; (8006ba0 <xTaskResumeAll+0x128>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d302      	bcc.n	8006b22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006b1c:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <xTaskResumeAll+0x12c>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b22:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <xTaskResumeAll+0x11c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1cc      	bne.n	8006ac4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b30:	f000 fb36 	bl	80071a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b34:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <xTaskResumeAll+0x130>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d010      	beq.n	8006b62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b40:	f000 f856 	bl	8006bf0 <xTaskIncrementTick>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b4a:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <xTaskResumeAll+0x12c>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1f1      	bne.n	8006b40 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006b5c:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <xTaskResumeAll+0x130>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b62:	4b10      	ldr	r3, [pc, #64]	; (8006ba4 <xTaskResumeAll+0x12c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b6e:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <xTaskResumeAll+0x134>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b7e:	f000 fe95 	bl	80078ac <vPortExitCritical>

	return xAlreadyYielded;
 8006b82:	68bb      	ldr	r3, [r7, #8]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000a30 	.word	0x20000a30
 8006b90:	20000a08 	.word	0x20000a08
 8006b94:	200009c8 	.word	0x200009c8
 8006b98:	20000a10 	.word	0x20000a10
 8006b9c:	2000090c 	.word	0x2000090c
 8006ba0:	20000908 	.word	0x20000908
 8006ba4:	20000a1c 	.word	0x20000a1c
 8006ba8:	20000a18 	.word	0x20000a18
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bb6:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <xTaskGetTickCount+0x18>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bbc:	687b      	ldr	r3, [r7, #4]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bc80      	pop	{r7}
 8006bc6:	4770      	bx	lr
 8006bc8:	20000a0c 	.word	0x20000a0c

08006bcc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bd2:	f000 fefd 	bl	80079d0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006bda:	4b04      	ldr	r3, [pc, #16]	; (8006bec <xTaskGetTickCountFromISR+0x20>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006be0:	683b      	ldr	r3, [r7, #0]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20000a0c 	.word	0x20000a0c

08006bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bfa:	4b51      	ldr	r3, [pc, #324]	; (8006d40 <xTaskIncrementTick+0x150>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f040 808d 	bne.w	8006d1e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c04:	4b4f      	ldr	r3, [pc, #316]	; (8006d44 <xTaskIncrementTick+0x154>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c0c:	4a4d      	ldr	r2, [pc, #308]	; (8006d44 <xTaskIncrementTick+0x154>)
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d120      	bne.n	8006c5a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c18:	4b4b      	ldr	r3, [pc, #300]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00a      	beq.n	8006c38 <xTaskIncrementTick+0x48>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	603b      	str	r3, [r7, #0]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <xTaskIncrementTick+0x46>
 8006c38:	4b43      	ldr	r3, [pc, #268]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	4b43      	ldr	r3, [pc, #268]	; (8006d4c <xTaskIncrementTick+0x15c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a41      	ldr	r2, [pc, #260]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4a41      	ldr	r2, [pc, #260]	; (8006d4c <xTaskIncrementTick+0x15c>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4b40      	ldr	r3, [pc, #256]	; (8006d50 <xTaskIncrementTick+0x160>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a3f      	ldr	r2, [pc, #252]	; (8006d50 <xTaskIncrementTick+0x160>)
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	f000 faa3 	bl	80071a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c5a:	4b3e      	ldr	r3, [pc, #248]	; (8006d54 <xTaskIncrementTick+0x164>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d34d      	bcc.n	8006d00 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c64:	4b38      	ldr	r3, [pc, #224]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <xTaskIncrementTick+0x82>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <xTaskIncrementTick+0x84>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d004      	beq.n	8006c82 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c78:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <xTaskIncrementTick+0x164>)
 8006c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7e:	601a      	str	r2, [r3, #0]
					break;
 8006c80:	e03e      	b.n	8006d00 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c82:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <xTaskIncrementTick+0x158>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d203      	bcs.n	8006ca2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c9a:	4a2e      	ldr	r2, [pc, #184]	; (8006d54 <xTaskIncrementTick+0x164>)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6013      	str	r3, [r2, #0]
						break;
 8006ca0:	e02e      	b.n	8006d00 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fd4e 	bl	8005748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d004      	beq.n	8006cbe <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3318      	adds	r3, #24
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fd45 	bl	8005748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	409a      	lsls	r2, r3
 8006cc6:	4b24      	ldr	r3, [pc, #144]	; (8006d58 <xTaskIncrementTick+0x168>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	4a22      	ldr	r2, [pc, #136]	; (8006d58 <xTaskIncrementTick+0x168>)
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4a1f      	ldr	r2, [pc, #124]	; (8006d5c <xTaskIncrementTick+0x16c>)
 8006cde:	441a      	add	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f7fe fcd3 	bl	8005692 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	4b1b      	ldr	r3, [pc, #108]	; (8006d60 <xTaskIncrementTick+0x170>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d3b4      	bcc.n	8006c64 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cfe:	e7b1      	b.n	8006c64 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d00:	4b17      	ldr	r3, [pc, #92]	; (8006d60 <xTaskIncrementTick+0x170>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	4915      	ldr	r1, [pc, #84]	; (8006d5c <xTaskIncrementTick+0x16c>)
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d907      	bls.n	8006d28 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e004      	b.n	8006d28 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d1e:	4b11      	ldr	r3, [pc, #68]	; (8006d64 <xTaskIncrementTick+0x174>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a0f      	ldr	r2, [pc, #60]	; (8006d64 <xTaskIncrementTick+0x174>)
 8006d26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d28:	4b0f      	ldr	r3, [pc, #60]	; (8006d68 <xTaskIncrementTick+0x178>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d34:	697b      	ldr	r3, [r7, #20]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000a30 	.word	0x20000a30
 8006d44:	20000a0c 	.word	0x20000a0c
 8006d48:	200009c0 	.word	0x200009c0
 8006d4c:	200009c4 	.word	0x200009c4
 8006d50:	20000a20 	.word	0x20000a20
 8006d54:	20000a28 	.word	0x20000a28
 8006d58:	20000a10 	.word	0x20000a10
 8006d5c:	2000090c 	.word	0x2000090c
 8006d60:	20000908 	.word	0x20000908
 8006d64:	20000a18 	.word	0x20000a18
 8006d68:	20000a1c 	.word	0x20000a1c

08006d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d72:	4b26      	ldr	r3, [pc, #152]	; (8006e0c <vTaskSwitchContext+0xa0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d7a:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <vTaskSwitchContext+0xa4>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d80:	e03f      	b.n	8006e02 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <vTaskSwitchContext+0xa4>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d88:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <vTaskSwitchContext+0xa8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	fab3 f383 	clz	r3, r3
 8006d94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	f1c3 031f 	rsb	r3, r3, #31
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	491e      	ldr	r1, [pc, #120]	; (8006e18 <vTaskSwitchContext+0xac>)
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	440b      	add	r3, r1
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	607b      	str	r3, [r7, #4]
}
 8006dc4:	bf00      	nop
 8006dc6:	e7fe      	b.n	8006dc6 <vTaskSwitchContext+0x5a>
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4a11      	ldr	r2, [pc, #68]	; (8006e18 <vTaskSwitchContext+0xac>)
 8006dd4:	4413      	add	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	3308      	adds	r3, #8
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d104      	bne.n	8006df8 <vTaskSwitchContext+0x8c>
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	605a      	str	r2, [r3, #4]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	4a07      	ldr	r2, [pc, #28]	; (8006e1c <vTaskSwitchContext+0xb0>)
 8006e00:	6013      	str	r3, [r2, #0]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr
 8006e0c:	20000a30 	.word	0x20000a30
 8006e10:	20000a1c 	.word	0x20000a1c
 8006e14:	20000a10 	.word	0x20000a10
 8006e18:	2000090c 	.word	0x2000090c
 8006e1c:	20000908 	.word	0x20000908

08006e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <vTaskPlaceOnEventList+0x44>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fe fc42 	bl	80056d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e54:	2101      	movs	r1, #1
 8006e56:	6838      	ldr	r0, [r7, #0]
 8006e58:	f000 fba4 	bl	80075a4 <prvAddCurrentTaskToDelayedList>
}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000908 	.word	0x20000908

08006e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60fb      	str	r3, [r7, #12]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	3318      	adds	r3, #24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe fc55 	bl	8005748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e9e:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <xTaskRemoveFromEventList+0xac>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d11c      	bne.n	8006ee0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fc4c 	bl	8005748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	4b17      	ldr	r3, [pc, #92]	; (8006f18 <xTaskRemoveFromEventList+0xb0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	4a16      	ldr	r2, [pc, #88]	; (8006f18 <xTaskRemoveFromEventList+0xb0>)
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <xTaskRemoveFromEventList+0xb4>)
 8006ed0:	441a      	add	r2, r3
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f7fe fbda 	bl	8005692 <vListInsertEnd>
 8006ede:	e005      	b.n	8006eec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	3318      	adds	r3, #24
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	480e      	ldr	r0, [pc, #56]	; (8006f20 <xTaskRemoveFromEventList+0xb8>)
 8006ee8:	f7fe fbd3 	bl	8005692 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <xTaskRemoveFromEventList+0xbc>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d905      	bls.n	8006f06 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <xTaskRemoveFromEventList+0xc0>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e001      	b.n	8006f0a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006f0a:	697b      	ldr	r3, [r7, #20]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000a30 	.word	0x20000a30
 8006f18:	20000a10 	.word	0x20000a10
 8006f1c:	2000090c 	.word	0x2000090c
 8006f20:	200009c8 	.word	0x200009c8
 8006f24:	20000908 	.word	0x20000908
 8006f28:	20000a1c 	.word	0x20000a1c

08006f2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f34:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <vTaskInternalSetTimeOutState+0x24>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <vTaskInternalSetTimeOutState+0x28>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	605a      	str	r2, [r3, #4]
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20000a20 	.word	0x20000a20
 8006f54:	20000a0c 	.word	0x20000a0c

08006f58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10a      	bne.n	8006f7e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	613b      	str	r3, [r7, #16]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10a      	bne.n	8006f9a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	60fb      	str	r3, [r7, #12]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f9a:	f000 fc57 	bl	800784c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f9e:	4b1d      	ldr	r3, [pc, #116]	; (8007014 <xTaskCheckForTimeOut+0xbc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d102      	bne.n	8006fbe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e023      	b.n	8007006 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <xTaskCheckForTimeOut+0xc0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d007      	beq.n	8006fda <xTaskCheckForTimeOut+0x82>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d302      	bcc.n	8006fda <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
 8006fd8:	e015      	b.n	8007006 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d20b      	bcs.n	8006ffc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff ff9b 	bl	8006f2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e004      	b.n	8007006 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007002:	2301      	movs	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007006:	f000 fc51 	bl	80078ac <vPortExitCritical>

	return xReturn;
 800700a:	69fb      	ldr	r3, [r7, #28]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000a0c 	.word	0x20000a0c
 8007018:	20000a20 	.word	0x20000a20

0800701c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007020:	4b03      	ldr	r3, [pc, #12]	; (8007030 <vTaskMissedYield+0x14>)
 8007022:	2201      	movs	r2, #1
 8007024:	601a      	str	r2, [r3, #0]
}
 8007026:	bf00      	nop
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000a1c 	.word	0x20000a1c

08007034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800703c:	f000 f852 	bl	80070e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007040:	4b06      	ldr	r3, [pc, #24]	; (800705c <prvIdleTask+0x28>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d9f9      	bls.n	800703c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <prvIdleTask+0x2c>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007058:	e7f0      	b.n	800703c <prvIdleTask+0x8>
 800705a:	bf00      	nop
 800705c:	2000090c 	.word	0x2000090c
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706a:	2300      	movs	r3, #0
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	e00c      	b.n	800708a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a12      	ldr	r2, [pc, #72]	; (80070c4 <prvInitialiseTaskLists+0x60>)
 800707c:	4413      	add	r3, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fadc 	bl	800563c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3301      	adds	r3, #1
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b06      	cmp	r3, #6
 800708e:	d9ef      	bls.n	8007070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007090:	480d      	ldr	r0, [pc, #52]	; (80070c8 <prvInitialiseTaskLists+0x64>)
 8007092:	f7fe fad3 	bl	800563c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007096:	480d      	ldr	r0, [pc, #52]	; (80070cc <prvInitialiseTaskLists+0x68>)
 8007098:	f7fe fad0 	bl	800563c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800709c:	480c      	ldr	r0, [pc, #48]	; (80070d0 <prvInitialiseTaskLists+0x6c>)
 800709e:	f7fe facd 	bl	800563c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070a2:	480c      	ldr	r0, [pc, #48]	; (80070d4 <prvInitialiseTaskLists+0x70>)
 80070a4:	f7fe faca 	bl	800563c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070a8:	480b      	ldr	r0, [pc, #44]	; (80070d8 <prvInitialiseTaskLists+0x74>)
 80070aa:	f7fe fac7 	bl	800563c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <prvInitialiseTaskLists+0x78>)
 80070b0:	4a05      	ldr	r2, [pc, #20]	; (80070c8 <prvInitialiseTaskLists+0x64>)
 80070b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070b4:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <prvInitialiseTaskLists+0x7c>)
 80070b6:	4a05      	ldr	r2, [pc, #20]	; (80070cc <prvInitialiseTaskLists+0x68>)
 80070b8:	601a      	str	r2, [r3, #0]
}
 80070ba:	bf00      	nop
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	2000090c 	.word	0x2000090c
 80070c8:	20000998 	.word	0x20000998
 80070cc:	200009ac 	.word	0x200009ac
 80070d0:	200009c8 	.word	0x200009c8
 80070d4:	200009dc 	.word	0x200009dc
 80070d8:	200009f4 	.word	0x200009f4
 80070dc:	200009c0 	.word	0x200009c0
 80070e0:	200009c4 	.word	0x200009c4

080070e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070ea:	e019      	b.n	8007120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070ec:	f000 fbae 	bl	800784c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80070f0:	4b10      	ldr	r3, [pc, #64]	; (8007134 <prvCheckTasksWaitingTermination+0x50>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3304      	adds	r3, #4
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe fb23 	bl	8005748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007102:	4b0d      	ldr	r3, [pc, #52]	; (8007138 <prvCheckTasksWaitingTermination+0x54>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3b01      	subs	r3, #1
 8007108:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <prvCheckTasksWaitingTermination+0x54>)
 800710a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <prvCheckTasksWaitingTermination+0x58>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3b01      	subs	r3, #1
 8007112:	4a0a      	ldr	r2, [pc, #40]	; (800713c <prvCheckTasksWaitingTermination+0x58>)
 8007114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007116:	f000 fbc9 	bl	80078ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f810 	bl	8007140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <prvCheckTasksWaitingTermination+0x58>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e1      	bne.n	80070ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	3708      	adds	r7, #8
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	200009dc 	.word	0x200009dc
 8007138:	20000a08 	.word	0x20000a08
 800713c:	200009f0 	.word	0x200009f0

08007140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800714e:	2b00      	cmp	r3, #0
 8007150:	d108      	bne.n	8007164 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fd3c 	bl	8007bd4 <vPortFree>
				vPortFree( pxTCB );
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fd39 	bl	8007bd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007162:	e018      	b.n	8007196 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800716a:	2b01      	cmp	r3, #1
 800716c:	d103      	bne.n	8007176 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fd30 	bl	8007bd4 <vPortFree>
	}
 8007174:	e00f      	b.n	8007196 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800717c:	2b02      	cmp	r3, #2
 800717e:	d00a      	beq.n	8007196 <prvDeleteTCB+0x56>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <prvDeleteTCB+0x54>
	}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a6:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <prvResetNextTaskUnblockTime+0x40>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <prvResetNextTaskUnblockTime+0x14>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <prvResetNextTaskUnblockTime+0x16>
 80071b4:	2300      	movs	r3, #0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d004      	beq.n	80071c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <prvResetNextTaskUnblockTime+0x44>)
 80071bc:	f04f 32ff 	mov.w	r2, #4294967295
 80071c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071c2:	e008      	b.n	80071d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80071c4:	4b06      	ldr	r3, [pc, #24]	; (80071e0 <prvResetNextTaskUnblockTime+0x40>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <prvResetNextTaskUnblockTime+0x44>)
 80071d4:	6013      	str	r3, [r2, #0]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr
 80071e0:	200009c0 	.word	0x200009c0
 80071e4:	20000a28 	.word	0x20000a28

080071e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071ee:	4b0b      	ldr	r3, [pc, #44]	; (800721c <xTaskGetSchedulerState+0x34>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071f6:	2301      	movs	r3, #1
 80071f8:	607b      	str	r3, [r7, #4]
 80071fa:	e008      	b.n	800720e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071fc:	4b08      	ldr	r3, [pc, #32]	; (8007220 <xTaskGetSchedulerState+0x38>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d102      	bne.n	800720a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007204:	2302      	movs	r3, #2
 8007206:	607b      	str	r3, [r7, #4]
 8007208:	e001      	b.n	800720e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800720a:	2300      	movs	r3, #0
 800720c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800720e:	687b      	ldr	r3, [r7, #4]
	}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000a14 	.word	0x20000a14
 8007220:	20000a30 	.word	0x20000a30

08007224 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d06e      	beq.n	8007318 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	4b39      	ldr	r3, [pc, #228]	; (8007324 <xTaskPriorityInherit+0x100>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	429a      	cmp	r2, r3
 8007246:	d25e      	bcs.n	8007306 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	2b00      	cmp	r3, #0
 800724e:	db06      	blt.n	800725e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007250:	4b34      	ldr	r3, [pc, #208]	; (8007324 <xTaskPriorityInherit+0x100>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	f1c3 0207 	rsb	r2, r3, #7
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6959      	ldr	r1, [r3, #20]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a2e      	ldr	r2, [pc, #184]	; (8007328 <xTaskPriorityInherit+0x104>)
 8007270:	4413      	add	r3, r2
 8007272:	4299      	cmp	r1, r3
 8007274:	d101      	bne.n	800727a <xTaskPriorityInherit+0x56>
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <xTaskPriorityInherit+0x58>
 800727a:	2300      	movs	r3, #0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d03a      	beq.n	80072f6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe fa5f 	bl	8005748 <uxListRemove>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d115      	bne.n	80072bc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	4924      	ldr	r1, [pc, #144]	; (8007328 <xTaskPriorityInherit+0x104>)
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <xTaskPriorityInherit+0x98>
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	2201      	movs	r2, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	43da      	mvns	r2, r3
 80072b2:	4b1e      	ldr	r3, [pc, #120]	; (800732c <xTaskPriorityInherit+0x108>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4013      	ands	r3, r2
 80072b8:	4a1c      	ldr	r2, [pc, #112]	; (800732c <xTaskPriorityInherit+0x108>)
 80072ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072bc:	4b19      	ldr	r3, [pc, #100]	; (8007324 <xTaskPriorityInherit+0x100>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ca:	2201      	movs	r2, #1
 80072cc:	409a      	lsls	r2, r3
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <xTaskPriorityInherit+0x108>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	4a15      	ldr	r2, [pc, #84]	; (800732c <xTaskPriorityInherit+0x108>)
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4a10      	ldr	r2, [pc, #64]	; (8007328 <xTaskPriorityInherit+0x104>)
 80072e6:	441a      	add	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4619      	mov	r1, r3
 80072ee:	4610      	mov	r0, r2
 80072f0:	f7fe f9cf 	bl	8005692 <vListInsertEnd>
 80072f4:	e004      	b.n	8007300 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <xTaskPriorityInherit+0x100>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007300:	2301      	movs	r3, #1
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e008      	b.n	8007318 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <xTaskPriorityInherit+0x100>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	429a      	cmp	r2, r3
 8007312:	d201      	bcs.n	8007318 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007314:	2301      	movs	r3, #1
 8007316:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007318:	68fb      	ldr	r3, [r7, #12]
	}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000908 	.word	0x20000908
 8007328:	2000090c 	.word	0x2000090c
 800732c:	20000a10 	.word	0x20000a10

08007330 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d06e      	beq.n	8007424 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007346:	4b3a      	ldr	r3, [pc, #232]	; (8007430 <xTaskPriorityDisinherit+0x100>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	429a      	cmp	r2, r3
 800734e:	d00a      	beq.n	8007366 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	60fb      	str	r3, [r7, #12]
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60bb      	str	r3, [r7, #8]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007388:	1e5a      	subs	r2, r3, #1
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	429a      	cmp	r2, r3
 8007398:	d044      	beq.n	8007424 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d140      	bne.n	8007424 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	3304      	adds	r3, #4
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe f9ce 	bl	8005748 <uxListRemove>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d115      	bne.n	80073de <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	491f      	ldr	r1, [pc, #124]	; (8007434 <xTaskPriorityDisinherit+0x104>)
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xTaskPriorityDisinherit+0xae>
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	2201      	movs	r2, #1
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	43da      	mvns	r2, r3
 80073d4:	4b18      	ldr	r3, [pc, #96]	; (8007438 <xTaskPriorityDisinherit+0x108>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4013      	ands	r3, r2
 80073da:	4a17      	ldr	r2, [pc, #92]	; (8007438 <xTaskPriorityDisinherit+0x108>)
 80073dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ea:	f1c3 0207 	rsb	r2, r3, #7
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f6:	2201      	movs	r2, #1
 80073f8:	409a      	lsls	r2, r3
 80073fa:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <xTaskPriorityDisinherit+0x108>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4313      	orrs	r3, r2
 8007400:	4a0d      	ldr	r2, [pc, #52]	; (8007438 <xTaskPriorityDisinherit+0x108>)
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4a08      	ldr	r2, [pc, #32]	; (8007434 <xTaskPriorityDisinherit+0x104>)
 8007412:	441a      	add	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe f939 	bl	8005692 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007420:	2301      	movs	r3, #1
 8007422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007424:	697b      	ldr	r3, [r7, #20]
	}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000908 	.word	0x20000908
 8007434:	2000090c 	.word	0x2000090c
 8007438:	20000a10 	.word	0x20000a10

0800743c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800744a:	2301      	movs	r3, #1
 800744c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8088 	beq.w	8007566 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	60fb      	str	r3, [r7, #12]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d902      	bls.n	8007484 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	e002      	b.n	800748a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007488:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	429a      	cmp	r2, r3
 8007492:	d068      	beq.n	8007566 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	429a      	cmp	r2, r3
 800749c:	d163      	bne.n	8007566 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800749e:	4b34      	ldr	r3, [pc, #208]	; (8007570 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d10a      	bne.n	80074be <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	60bb      	str	r3, [r7, #8]
}
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	db04      	blt.n	80074dc <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f1c3 0207 	rsb	r2, r3, #7
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	6959      	ldr	r1, [r3, #20]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4a22      	ldr	r2, [pc, #136]	; (8007574 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80074ec:	4413      	add	r3, r2
 80074ee:	4299      	cmp	r1, r3
 80074f0:	d101      	bne.n	80074f6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d034      	beq.n	8007566 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe f921 	bl	8005748 <uxListRemove>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d115      	bne.n	8007538 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007510:	4918      	ldr	r1, [pc, #96]	; (8007574 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10a      	bne.n	8007538 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	2201      	movs	r2, #1
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	43da      	mvns	r2, r3
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4013      	ands	r3, r2
 8007534:	4a10      	ldr	r2, [pc, #64]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007536:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	2201      	movs	r2, #1
 800753e:	409a      	lsls	r2, r3
 8007540:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4313      	orrs	r3, r2
 8007546:	4a0c      	ldr	r2, [pc, #48]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4a07      	ldr	r2, [pc, #28]	; (8007574 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007558:	441a      	add	r2, r3
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7fe f896 	bl	8005692 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007566:	bf00      	nop
 8007568:	3720      	adds	r7, #32
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20000908 	.word	0x20000908
 8007574:	2000090c 	.word	0x2000090c
 8007578:	20000a10 	.word	0x20000a10

0800757c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800758e:	3201      	adds	r2, #1
 8007590:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007592:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007594:	681b      	ldr	r3, [r3, #0]
	}
 8007596:	4618      	mov	r0, r3
 8007598:	46bd      	mov	sp, r7
 800759a:	bc80      	pop	{r7}
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	20000908 	.word	0x20000908

080075a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ae:	4b29      	ldr	r3, [pc, #164]	; (8007654 <prvAddCurrentTaskToDelayedList+0xb0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b4:	4b28      	ldr	r3, [pc, #160]	; (8007658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe f8c4 	bl	8005748 <uxListRemove>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80075c6:	4b24      	ldr	r3, [pc, #144]	; (8007658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	2201      	movs	r2, #1
 80075ce:	fa02 f303 	lsl.w	r3, r2, r3
 80075d2:	43da      	mvns	r2, r3
 80075d4:	4b21      	ldr	r3, [pc, #132]	; (800765c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4013      	ands	r3, r2
 80075da:	4a20      	ldr	r2, [pc, #128]	; (800765c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d10a      	bne.n	80075fc <prvAddCurrentTaskToDelayedList+0x58>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ec:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3304      	adds	r3, #4
 80075f2:	4619      	mov	r1, r3
 80075f4:	481a      	ldr	r0, [pc, #104]	; (8007660 <prvAddCurrentTaskToDelayedList+0xbc>)
 80075f6:	f7fe f84c 	bl	8005692 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075fa:	e026      	b.n	800764a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007604:	4b14      	ldr	r3, [pc, #80]	; (8007658 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	429a      	cmp	r2, r3
 8007612:	d209      	bcs.n	8007628 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007614:	4b13      	ldr	r3, [pc, #76]	; (8007664 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3304      	adds	r3, #4
 800761e:	4619      	mov	r1, r3
 8007620:	4610      	mov	r0, r2
 8007622:	f7fe f859 	bl	80056d8 <vListInsert>
}
 8007626:	e010      	b.n	800764a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007628:	4b0f      	ldr	r3, [pc, #60]	; (8007668 <prvAddCurrentTaskToDelayedList+0xc4>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <prvAddCurrentTaskToDelayedList+0xb4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3304      	adds	r3, #4
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f7fe f84f 	bl	80056d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800763a:	4b0c      	ldr	r3, [pc, #48]	; (800766c <prvAddCurrentTaskToDelayedList+0xc8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	429a      	cmp	r2, r3
 8007642:	d202      	bcs.n	800764a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007644:	4a09      	ldr	r2, [pc, #36]	; (800766c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6013      	str	r3, [r2, #0]
}
 800764a:	bf00      	nop
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000a0c 	.word	0x20000a0c
 8007658:	20000908 	.word	0x20000908
 800765c:	20000a10 	.word	0x20000a10
 8007660:	200009f4 	.word	0x200009f4
 8007664:	200009c4 	.word	0x200009c4
 8007668:	200009c0 	.word	0x200009c0
 800766c:	20000a28 	.word	0x20000a28

08007670 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3b04      	subs	r3, #4
 8007680:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3b04      	subs	r3, #4
 800768e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3b04      	subs	r3, #4
 800769e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076a0:	4a08      	ldr	r2, [pc, #32]	; (80076c4 <pxPortInitialiseStack+0x54>)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3b14      	subs	r3, #20
 80076aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3b20      	subs	r3, #32
 80076b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr
 80076c4:	080076c9 	.word	0x080076c9

080076c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <prvTaskExitError+0x54>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d00a      	beq.n	80076f2 <prvTaskExitError+0x2a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	60fb      	str	r3, [r7, #12]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <prvTaskExitError+0x28>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
}
 8007704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007706:	bf00      	nop
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0fc      	beq.n	8007708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000014 	.word	0x20000014

08007720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007720:	4b07      	ldr	r3, [pc, #28]	; (8007740 <pxCurrentTCBConst2>)
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	6808      	ldr	r0, [r1, #0]
 8007726:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800772a:	f380 8809 	msr	PSP, r0
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	f04e 0e0d 	orr.w	lr, lr, #13
 800773e:	4770      	bx	lr

08007740 <pxCurrentTCBConst2>:
 8007740:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007748:	4806      	ldr	r0, [pc, #24]	; (8007764 <prvPortStartFirstTask+0x1c>)
 800774a:	6800      	ldr	r0, [r0, #0]
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f380 8808 	msr	MSP, r0
 8007752:	b662      	cpsie	i
 8007754:	b661      	cpsie	f
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	df00      	svc	0
 8007760:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007762:	bf00      	nop
 8007764:	e000ed08 	.word	0xe000ed08

08007768 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800776e:	4b32      	ldr	r3, [pc, #200]	; (8007838 <xPortStartScheduler+0xd0>)
 8007770:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	22ff      	movs	r2, #255	; 0xff
 800777e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007790:	b2da      	uxtb	r2, r3
 8007792:	4b2a      	ldr	r3, [pc, #168]	; (800783c <xPortStartScheduler+0xd4>)
 8007794:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007796:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <xPortStartScheduler+0xd8>)
 8007798:	2207      	movs	r2, #7
 800779a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800779c:	e009      	b.n	80077b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800779e:	4b28      	ldr	r3, [pc, #160]	; (8007840 <xPortStartScheduler+0xd8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	4a26      	ldr	r2, [pc, #152]	; (8007840 <xPortStartScheduler+0xd8>)
 80077a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ba:	2b80      	cmp	r3, #128	; 0x80
 80077bc:	d0ef      	beq.n	800779e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077be:	4b20      	ldr	r3, [pc, #128]	; (8007840 <xPortStartScheduler+0xd8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f1c3 0307 	rsb	r3, r3, #7
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d00a      	beq.n	80077e0 <xPortStartScheduler+0x78>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	60bb      	str	r3, [r7, #8]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077e0:	4b17      	ldr	r3, [pc, #92]	; (8007840 <xPortStartScheduler+0xd8>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	021b      	lsls	r3, r3, #8
 80077e6:	4a16      	ldr	r2, [pc, #88]	; (8007840 <xPortStartScheduler+0xd8>)
 80077e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077ea:	4b15      	ldr	r3, [pc, #84]	; (8007840 <xPortStartScheduler+0xd8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077f2:	4a13      	ldr	r2, [pc, #76]	; (8007840 <xPortStartScheduler+0xd8>)
 80077f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077fe:	4b11      	ldr	r3, [pc, #68]	; (8007844 <xPortStartScheduler+0xdc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a10      	ldr	r2, [pc, #64]	; (8007844 <xPortStartScheduler+0xdc>)
 8007804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007808:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800780a:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <xPortStartScheduler+0xdc>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a0d      	ldr	r2, [pc, #52]	; (8007844 <xPortStartScheduler+0xdc>)
 8007810:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007814:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007816:	f000 f8b9 	bl	800798c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800781a:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <xPortStartScheduler+0xe0>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007820:	f7ff ff92 	bl	8007748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007824:	f7ff faa2 	bl	8006d6c <vTaskSwitchContext>
	prvTaskExitError();
 8007828:	f7ff ff4e 	bl	80076c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	e000e400 	.word	0xe000e400
 800783c:	20000a34 	.word	0x20000a34
 8007840:	20000a38 	.word	0x20000a38
 8007844:	e000ed20 	.word	0xe000ed20
 8007848:	20000014 	.word	0x20000014

0800784c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	607b      	str	r3, [r7, #4]
}
 8007864:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007866:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <vPortEnterCritical+0x58>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3301      	adds	r3, #1
 800786c:	4a0d      	ldr	r2, [pc, #52]	; (80078a4 <vPortEnterCritical+0x58>)
 800786e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007870:	4b0c      	ldr	r3, [pc, #48]	; (80078a4 <vPortEnterCritical+0x58>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d10f      	bne.n	8007898 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007878:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <vPortEnterCritical+0x5c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <vPortEnterCritical+0x4c>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	603b      	str	r3, [r7, #0]
}
 8007894:	bf00      	nop
 8007896:	e7fe      	b.n	8007896 <vPortEnterCritical+0x4a>
	}
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	bc80      	pop	{r7}
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	20000014 	.word	0x20000014
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078b2:	4b11      	ldr	r3, [pc, #68]	; (80078f8 <vPortExitCritical+0x4c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <vPortExitCritical+0x24>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	607b      	str	r3, [r7, #4]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078d0:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <vPortExitCritical+0x4c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	4a08      	ldr	r2, [pc, #32]	; (80078f8 <vPortExitCritical+0x4c>)
 80078d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078da:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <vPortExitCritical+0x4c>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <vPortExitCritical+0x42>
 80078e2:	2300      	movs	r3, #0
 80078e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	f383 8811 	msr	BASEPRI, r3
}
 80078ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr
 80078f8:	20000014 	.word	0x20000014
 80078fc:	00000000 	.word	0x00000000

08007900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007900:	f3ef 8009 	mrs	r0, PSP
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4b0d      	ldr	r3, [pc, #52]	; (8007940 <pxCurrentTCBConst>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007910:	6010      	str	r0, [r2, #0]
 8007912:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007916:	f04f 0050 	mov.w	r0, #80	; 0x50
 800791a:	f380 8811 	msr	BASEPRI, r0
 800791e:	f7ff fa25 	bl	8006d6c <vTaskSwitchContext>
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	6808      	ldr	r0, [r1, #0]
 8007932:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007936:	f380 8809 	msr	PSP, r0
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	4770      	bx	lr

08007940 <pxCurrentTCBConst>:
 8007940:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007962:	f7ff f945 	bl	8006bf0 <xTaskIncrementTick>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796c:	4b06      	ldr	r3, [pc, #24]	; (8007988 <SysTick_Handler+0x40>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f383 8811 	msr	BASEPRI, r3
}
 800797e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007990:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <vPortSetupTimerInterrupt+0x30>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007996:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <vPortSetupTimerInterrupt+0x34>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800799c:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <vPortSetupTimerInterrupt+0x38>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <vPortSetupTimerInterrupt+0x3c>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	099b      	lsrs	r3, r3, #6
 80079a8:	4a08      	ldr	r2, [pc, #32]	; (80079cc <vPortSetupTimerInterrupt+0x40>)
 80079aa:	3b01      	subs	r3, #1
 80079ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ae:	4b03      	ldr	r3, [pc, #12]	; (80079bc <vPortSetupTimerInterrupt+0x30>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	e000e010 	.word	0xe000e010
 80079c0:	e000e018 	.word	0xe000e018
 80079c4:	20000008 	.word	0x20000008
 80079c8:	10624dd3 	.word	0x10624dd3
 80079cc:	e000e014 	.word	0xe000e014

080079d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079d6:	f3ef 8305 	mrs	r3, IPSR
 80079da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b0f      	cmp	r3, #15
 80079e0:	d914      	bls.n	8007a0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079e2:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <vPortValidateInterruptPriority+0x6c>)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079ec:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <vPortValidateInterruptPriority+0x70>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	7afa      	ldrb	r2, [r7, #11]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d20a      	bcs.n	8007a0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	607b      	str	r3, [r7, #4]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <vPortValidateInterruptPriority+0x74>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <vPortValidateInterruptPriority+0x78>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d90a      	bls.n	8007a32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	603b      	str	r3, [r7, #0]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <vPortValidateInterruptPriority+0x60>
	}
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	e000e3f0 	.word	0xe000e3f0
 8007a40:	20000a34 	.word	0x20000a34
 8007a44:	e000ed0c 	.word	0xe000ed0c
 8007a48:	20000a38 	.word	0x20000a38

08007a4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a58:	f7ff f800 	bl	8006a5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a5c:	4b58      	ldr	r3, [pc, #352]	; (8007bc0 <pvPortMalloc+0x174>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a64:	f000 f910 	bl	8007c88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a68:	4b56      	ldr	r3, [pc, #344]	; (8007bc4 <pvPortMalloc+0x178>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f040 808e 	bne.w	8007b92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01d      	beq.n	8007ab8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d014      	beq.n	8007ab8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	3308      	adds	r3, #8
 8007a96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <pvPortMalloc+0x6c>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	617b      	str	r3, [r7, #20]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d069      	beq.n	8007b92 <pvPortMalloc+0x146>
 8007abe:	4b42      	ldr	r3, [pc, #264]	; (8007bc8 <pvPortMalloc+0x17c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d864      	bhi.n	8007b92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ac8:	4b40      	ldr	r3, [pc, #256]	; (8007bcc <pvPortMalloc+0x180>)
 8007aca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007acc:	4b3f      	ldr	r3, [pc, #252]	; (8007bcc <pvPortMalloc+0x180>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ad2:	e004      	b.n	8007ade <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d903      	bls.n	8007af0 <pvPortMalloc+0xa4>
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1f1      	bne.n	8007ad4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007af0:	4b33      	ldr	r3, [pc, #204]	; (8007bc0 <pvPortMalloc+0x174>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d04b      	beq.n	8007b92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2208      	movs	r2, #8
 8007b00:	4413      	add	r3, r2
 8007b02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	2308      	movs	r3, #8
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d91f      	bls.n	8007b5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4413      	add	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00a      	beq.n	8007b44 <pvPortMalloc+0xf8>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	613b      	str	r3, [r7, #16]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	1ad2      	subs	r2, r2, r3
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b56:	69b8      	ldr	r0, [r7, #24]
 8007b58:	f000 f8f8 	bl	8007d4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <pvPortMalloc+0x17c>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	4a18      	ldr	r2, [pc, #96]	; (8007bc8 <pvPortMalloc+0x17c>)
 8007b68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b6a:	4b17      	ldr	r3, [pc, #92]	; (8007bc8 <pvPortMalloc+0x17c>)
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <pvPortMalloc+0x184>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d203      	bcs.n	8007b7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b76:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <pvPortMalloc+0x17c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a15      	ldr	r2, [pc, #84]	; (8007bd0 <pvPortMalloc+0x184>)
 8007b7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <pvPortMalloc+0x178>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b92:	f7fe ff71 	bl	8006a78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <pvPortMalloc+0x16a>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <pvPortMalloc+0x168>
	return pvReturn;
 8007bb6:	69fb      	ldr	r3, [r7, #28]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3728      	adds	r7, #40	; 0x28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20004644 	.word	0x20004644
 8007bc4:	20004650 	.word	0x20004650
 8007bc8:	20004648 	.word	0x20004648
 8007bcc:	2000463c 	.word	0x2000463c
 8007bd0:	2000464c 	.word	0x2000464c

08007bd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d048      	beq.n	8007c78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007be6:	2308      	movs	r3, #8
 8007be8:	425b      	negs	r3, r3
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4413      	add	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	4b21      	ldr	r3, [pc, #132]	; (8007c80 <vPortFree+0xac>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10a      	bne.n	8007c18 <vPortFree+0x44>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60fb      	str	r3, [r7, #12]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <vPortFree+0x62>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60bb      	str	r3, [r7, #8]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <vPortFree+0xac>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d019      	beq.n	8007c78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d115      	bne.n	8007c78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4b0b      	ldr	r3, [pc, #44]	; (8007c80 <vPortFree+0xac>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	43db      	mvns	r3, r3
 8007c56:	401a      	ands	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c5c:	f7fe fefe 	bl	8006a5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <vPortFree+0xb0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4413      	add	r3, r2
 8007c6a:	4a06      	ldr	r2, [pc, #24]	; (8007c84 <vPortFree+0xb0>)
 8007c6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c6e:	6938      	ldr	r0, [r7, #16]
 8007c70:	f000 f86c 	bl	8007d4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c74:	f7fe ff00 	bl	8006a78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20004650 	.word	0x20004650
 8007c84:	20004648 	.word	0x20004648

08007c88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c8e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c94:	4b27      	ldr	r3, [pc, #156]	; (8007d34 <prvHeapInit+0xac>)
 8007c96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00c      	beq.n	8007cbc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3307      	adds	r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0307 	bic.w	r3, r3, #7
 8007cae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <prvHeapInit+0xac>)
 8007cb8:	4413      	add	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cc0:	4a1d      	ldr	r2, [pc, #116]	; (8007d38 <prvHeapInit+0xb0>)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cc6:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <prvHeapInit+0xb0>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cd4:	2208      	movs	r2, #8
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <prvHeapInit+0xb4>)
 8007ce8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cea:	4b14      	ldr	r3, [pc, #80]	; (8007d3c <prvHeapInit+0xb4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <prvHeapInit+0xb4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	1ad2      	subs	r2, r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <prvHeapInit+0xb4>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <prvHeapInit+0xb8>)
 8007d16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	4a09      	ldr	r2, [pc, #36]	; (8007d44 <prvHeapInit+0xbc>)
 8007d1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <prvHeapInit+0xc0>)
 8007d22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d26:	601a      	str	r2, [r3, #0]
}
 8007d28:	bf00      	nop
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000a3c 	.word	0x20000a3c
 8007d38:	2000463c 	.word	0x2000463c
 8007d3c:	20004644 	.word	0x20004644
 8007d40:	2000464c 	.word	0x2000464c
 8007d44:	20004648 	.word	0x20004648
 8007d48:	20004650 	.word	0x20004650

08007d4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d54:	4b27      	ldr	r3, [pc, #156]	; (8007df4 <prvInsertBlockIntoFreeList+0xa8>)
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	e002      	b.n	8007d60 <prvInsertBlockIntoFreeList+0x14>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d8f7      	bhi.n	8007d5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	4413      	add	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d108      	bne.n	8007d8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	441a      	add	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	441a      	add	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d118      	bne.n	8007dd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	4b14      	ldr	r3, [pc, #80]	; (8007df8 <prvInsertBlockIntoFreeList+0xac>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d00d      	beq.n	8007dca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	441a      	add	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e008      	b.n	8007ddc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dca:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <prvInsertBlockIntoFreeList+0xac>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e003      	b.n	8007ddc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d002      	beq.n	8007dea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr
 8007df4:	2000463c 	.word	0x2000463c
 8007df8:	20004644 	.word	0x20004644

08007dfc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8007e04:	4b2b      	ldr	r3, [pc, #172]	; (8007eb4 <tcpip_thread+0xb8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8007e0c:	4b29      	ldr	r3, [pc, #164]	; (8007eb4 <tcpip_thread+0xb8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a29      	ldr	r2, [pc, #164]	; (8007eb8 <tcpip_thread+0xbc>)
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8007e18:	4828      	ldr	r0, [pc, #160]	; (8007ebc <tcpip_thread+0xc0>)
 8007e1a:	f00c fe17 	bl	8014a4c <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8007e1e:	4827      	ldr	r0, [pc, #156]	; (8007ebc <tcpip_thread+0xc0>)
 8007e20:	f00c fe23 	bl	8014a6a <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8007e24:	f107 030c 	add.w	r3, r7, #12
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4825      	ldr	r0, [pc, #148]	; (8007ec0 <tcpip_thread+0xc4>)
 8007e2c:	f00a f9ba 	bl	80121a4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007e30:	4822      	ldr	r0, [pc, #136]	; (8007ebc <tcpip_thread+0xc0>)
 8007e32:	f00c fe0b 	bl	8014a4c <sys_mutex_lock>
    if (msg == NULL) {
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007e3c:	4b21      	ldr	r3, [pc, #132]	; (8007ec4 <tcpip_thread+0xc8>)
 8007e3e:	2269      	movs	r2, #105	; 0x69
 8007e40:	4921      	ldr	r1, [pc, #132]	; (8007ec8 <tcpip_thread+0xcc>)
 8007e42:	4822      	ldr	r0, [pc, #136]	; (8007ecc <tcpip_thread+0xd0>)
 8007e44:	f00c feaa 	bl	8014b9c <iprintf>
      continue;
 8007e48:	e032      	b.n	8007eb0 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d020      	beq.n	8007e94 <tcpip_thread+0x98>
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	dc25      	bgt.n	8007ea2 <tcpip_thread+0xa6>
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d002      	beq.n	8007e60 <tcpip_thread+0x64>
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d00e      	beq.n	8007e7c <tcpip_thread+0x80>
 8007e5e:	e020      	b.n	8007ea2 <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	6850      	ldr	r0, [r2, #4]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	6892      	ldr	r2, [r2, #8]
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4619      	mov	r1, r3
 8007e74:	2009      	movs	r0, #9
 8007e76:	f003 fc71 	bl	800b75c <memp_free>
      break;
 8007e7a:	e019      	b.n	8007eb0 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	6892      	ldr	r2, [r2, #8]
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	2008      	movs	r0, #8
 8007e8e:	f003 fc65 	bl	800b75c <memp_free>
      break;
 8007e92:	e00d      	b.n	8007eb0 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	6892      	ldr	r2, [r2, #8]
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
      break;
 8007ea0:	e006      	b.n	8007eb0 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007ea2:	4b08      	ldr	r3, [pc, #32]	; (8007ec4 <tcpip_thread+0xc8>)
 8007ea4:	229b      	movs	r2, #155	; 0x9b
 8007ea6:	4908      	ldr	r1, [pc, #32]	; (8007ec8 <tcpip_thread+0xcc>)
 8007ea8:	4808      	ldr	r0, [pc, #32]	; (8007ecc <tcpip_thread+0xd0>)
 8007eaa:	f00c fe77 	bl	8014b9c <iprintf>
      break;
 8007eae:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8007eb0:	e7b5      	b.n	8007e1e <tcpip_thread+0x22>
 8007eb2:	bf00      	nop
 8007eb4:	20004654 	.word	0x20004654
 8007eb8:	20004658 	.word	0x20004658
 8007ebc:	20008418 	.word	0x20008418
 8007ec0:	2000465c 	.word	0x2000465c
 8007ec4:	08015ce0 	.word	0x08015ce0
 8007ec8:	08015d10 	.word	0x08015d10
 8007ecc:	08015d30 	.word	0x08015d30

08007ed0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8007edc:	481a      	ldr	r0, [pc, #104]	; (8007f48 <tcpip_inpkt+0x78>)
 8007ede:	f00c fd7a 	bl	80149d6 <sys_mbox_valid>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d105      	bne.n	8007ef4 <tcpip_inpkt+0x24>
 8007ee8:	4b18      	ldr	r3, [pc, #96]	; (8007f4c <tcpip_inpkt+0x7c>)
 8007eea:	22b5      	movs	r2, #181	; 0xb5
 8007eec:	4918      	ldr	r1, [pc, #96]	; (8007f50 <tcpip_inpkt+0x80>)
 8007eee:	4819      	ldr	r0, [pc, #100]	; (8007f54 <tcpip_inpkt+0x84>)
 8007ef0:	f00c fe54 	bl	8014b9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007ef4:	2009      	movs	r0, #9
 8007ef6:	f003 fbdf 	bl	800b6b8 <memp_malloc>
 8007efa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007f02:	f04f 33ff 	mov.w	r3, #4294967295
 8007f06:	e01a      	b.n	8007f3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8007f20:	6979      	ldr	r1, [r7, #20]
 8007f22:	4809      	ldr	r0, [pc, #36]	; (8007f48 <tcpip_inpkt+0x78>)
 8007f24:	f00c fcfe 	bl	8014924 <sys_mbox_trypost>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d006      	beq.n	8007f3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007f2e:	6979      	ldr	r1, [r7, #20]
 8007f30:	2009      	movs	r0, #9
 8007f32:	f003 fc13 	bl	800b75c <memp_free>
    return ERR_MEM;
 8007f36:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3a:	e000      	b.n	8007f3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007f3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	2000465c 	.word	0x2000465c
 8007f4c:	08015ce0 	.word	0x08015ce0
 8007f50:	08015d58 	.word	0x08015d58
 8007f54:	08015d30 	.word	0x08015d30

08007f58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f68:	f003 0318 	and.w	r3, r3, #24
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d006      	beq.n	8007f7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007f70:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <tcpip_input+0x3c>)
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f7ff ffab 	bl	8007ed0 <tcpip_inpkt>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	e005      	b.n	8007f8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8007f7e:	4a06      	ldr	r2, [pc, #24]	; (8007f98 <tcpip_input+0x40>)
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff ffa4 	bl	8007ed0 <tcpip_inpkt>
 8007f88:	4603      	mov	r3, r0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	080146f9 	.word	0x080146f9
 8007f98:	080136b5 	.word	0x080136b5

08007f9c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8007faa:	481d      	ldr	r0, [pc, #116]	; (8008020 <tcpip_callback_with_block+0x84>)
 8007fac:	f00c fd13 	bl	80149d6 <sys_mbox_valid>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d105      	bne.n	8007fc2 <tcpip_callback_with_block+0x26>
 8007fb6:	4b1b      	ldr	r3, [pc, #108]	; (8008024 <tcpip_callback_with_block+0x88>)
 8007fb8:	22ee      	movs	r2, #238	; 0xee
 8007fba:	491b      	ldr	r1, [pc, #108]	; (8008028 <tcpip_callback_with_block+0x8c>)
 8007fbc:	481b      	ldr	r0, [pc, #108]	; (800802c <tcpip_callback_with_block+0x90>)
 8007fbe:	f00c fded 	bl	8014b9c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007fc2:	2008      	movs	r0, #8
 8007fc4:	f003 fb78 	bl	800b6b8 <memp_malloc>
 8007fc8:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8007fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd4:	e01f      	b.n	8008016 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2203      	movs	r2, #3
 8007fda:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	609a      	str	r2, [r3, #8]
  if (block) {
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8007fee:	6979      	ldr	r1, [r7, #20]
 8007ff0:	480b      	ldr	r0, [pc, #44]	; (8008020 <tcpip_callback_with_block+0x84>)
 8007ff2:	f00c fc81 	bl	80148f8 <sys_mbox_post>
 8007ff6:	e00d      	b.n	8008014 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8007ff8:	6979      	ldr	r1, [r7, #20]
 8007ffa:	4809      	ldr	r0, [pc, #36]	; (8008020 <tcpip_callback_with_block+0x84>)
 8007ffc:	f00c fc92 	bl	8014924 <sys_mbox_trypost>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d006      	beq.n	8008014 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008006:	6979      	ldr	r1, [r7, #20]
 8008008:	2008      	movs	r0, #8
 800800a:	f003 fba7 	bl	800b75c <memp_free>
      return ERR_MEM;
 800800e:	f04f 33ff 	mov.w	r3, #4294967295
 8008012:	e000      	b.n	8008016 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3718      	adds	r7, #24
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	2000465c 	.word	0x2000465c
 8008024:	08015ce0 	.word	0x08015ce0
 8008028:	08015d58 	.word	0x08015d58
 800802c:	08015d30 	.word	0x08015d30

08008030 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af02      	add	r7, sp, #8
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  lwip_init();
 800803a:	f002 ff75 	bl	800af28 <lwip_init>

  tcpip_init_done = initfunc;
 800803e:	4a17      	ldr	r2, [pc, #92]	; (800809c <tcpip_init+0x6c>)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008044:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <tcpip_init+0x70>)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800804a:	2106      	movs	r1, #6
 800804c:	4815      	ldr	r0, [pc, #84]	; (80080a4 <tcpip_init+0x74>)
 800804e:	f00c fc31 	bl	80148b4 <sys_mbox_new>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d006      	beq.n	8008066 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008058:	4b13      	ldr	r3, [pc, #76]	; (80080a8 <tcpip_init+0x78>)
 800805a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800805e:	4913      	ldr	r1, [pc, #76]	; (80080ac <tcpip_init+0x7c>)
 8008060:	4813      	ldr	r0, [pc, #76]	; (80080b0 <tcpip_init+0x80>)
 8008062:	f00c fd9b 	bl	8014b9c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008066:	4813      	ldr	r0, [pc, #76]	; (80080b4 <tcpip_init+0x84>)
 8008068:	f00c fcd4 	bl	8014a14 <sys_mutex_new>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d006      	beq.n	8008080 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008072:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <tcpip_init+0x78>)
 8008074:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008078:	490f      	ldr	r1, [pc, #60]	; (80080b8 <tcpip_init+0x88>)
 800807a:	480d      	ldr	r0, [pc, #52]	; (80080b0 <tcpip_init+0x80>)
 800807c:	f00c fd8e 	bl	8014b9c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008080:	2300      	movs	r3, #0
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008088:	2200      	movs	r2, #0
 800808a:	490c      	ldr	r1, [pc, #48]	; (80080bc <tcpip_init+0x8c>)
 800808c:	480c      	ldr	r0, [pc, #48]	; (80080c0 <tcpip_init+0x90>)
 800808e:	f00c fcf9 	bl	8014a84 <sys_thread_new>
}
 8008092:	bf00      	nop
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	20004654 	.word	0x20004654
 80080a0:	20004658 	.word	0x20004658
 80080a4:	2000465c 	.word	0x2000465c
 80080a8:	08015ce0 	.word	0x08015ce0
 80080ac:	08015d68 	.word	0x08015d68
 80080b0:	08015d30 	.word	0x08015d30
 80080b4:	20008418 	.word	0x20008418
 80080b8:	08015d8c 	.word	0x08015d8c
 80080bc:	08007dfd 	.word	0x08007dfd
 80080c0:	08015db0 	.word	0x08015db0

080080c4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <fs_open+0x16>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <fs_open+0x1c>
     return ERR_ARG;
 80080da:	f06f 030f 	mvn.w	r3, #15
 80080de:	e028      	b.n	8008132 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80080e0:	4b16      	ldr	r3, [pc, #88]	; (800813c <fs_open+0x78>)
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e020      	b.n	8008128 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6838      	ldr	r0, [r7, #0]
 80080ee:	f7f8 f86f 	bl	80001d0 <strcmp>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d114      	bne.n	8008122 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	7c1a      	ldrb	r2, [r3, #16]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	e007      	b.n	8008132 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1db      	bne.n	80080e6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800812e:	f06f 0305 	mvn.w	r3, #5
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	08018608 	.word	0x08018608

08008140 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr

08008152 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	1ad3      	subs	r3, r2, r3
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr

0800816e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8008174:	20e4      	movs	r0, #228	; 0xe4
 8008176:	f003 f92f 	bl	800b3d8 <mem_malloc>
 800817a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d004      	beq.n	800818c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8008182:	22e4      	movs	r2, #228	; 0xe4
 8008184:	2100      	movs	r1, #0
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f00c fd00 	bl	8014b8c <memset>
  }
  return ret;
 800818c:	687b      	ldr	r3, [r7, #4]
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f002 ffbf 	bl	800b128 <mem_free>
  }
}
 80081aa:	bf00      	nop
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80081ba:	22b0      	movs	r2, #176	; 0xb0
 80081bc:	2100      	movs	r1, #0
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f00c fce4 	bl	8014b8c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80081d2:	20b0      	movs	r0, #176	; 0xb0
 80081d4:	f003 f900 	bl	800b3d8 <mem_malloc>
 80081d8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <http_state_alloc+0x1a>
    http_state_init(ret);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ffe6 	bl	80081b2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80081e6:	687b      	ldr	r3, [r7, #4]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d007      	beq.n	8008210 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ff9b 	bl	8008140 <fs_close>
    hs->handle = NULL;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	2b00      	cmp	r3, #0
 8008216:	d007      	beq.n	8008228 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff ffba 	bl	8008196 <http_ssi_state_free>
    hs->ssi = NULL;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d007      	beq.n	8008240 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	4618      	mov	r0, r3
 8008236:	f004 f845 	bl	800c2c4 <pbuf_free>
    hs->req = NULL;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008240:	bf00      	nop
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <http_state_free+0x1a>
    http_state_eof(hs);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff ffca 	bl	80081f0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f002 ff63 	bl	800b128 <mem_free>
  }
}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <http_write+0x22>
 8008280:	4b2c      	ldr	r3, [pc, #176]	; (8008334 <http_write+0xc8>)
 8008282:	f44f 7204 	mov.w	r2, #528	; 0x210
 8008286:	492c      	ldr	r1, [pc, #176]	; (8008338 <http_write+0xcc>)
 8008288:	482c      	ldr	r0, [pc, #176]	; (800833c <http_write+0xd0>)
 800828a:	f00c fc87 	bl	8014b9c <iprintf>
  len = *length;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008294:	8afb      	ldrh	r3, [r7, #22]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <http_write+0x32>
    return ERR_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	e045      	b.n	800832a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082a4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80082a6:	8aba      	ldrh	r2, [r7, #20]
 80082a8:	8afb      	ldrh	r3, [r7, #22]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d201      	bcs.n	80082b2 <http_write+0x46>
    len = max_len;
 80082ae:	8abb      	ldrh	r3, [r7, #20]
 80082b0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 80082ba:	8afa      	ldrh	r2, [r7, #22]
 80082bc:	8abb      	ldrh	r3, [r7, #20]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d901      	bls.n	80082c6 <http_write+0x5a>
    len = max_len;
 80082c2:	8abb      	ldrh	r3, [r7, #20]
 80082c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	8afa      	ldrh	r2, [r7, #22]
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f008 fc2b 	bl	8010b28 <tcp_write>
 80082d2:	4603      	mov	r3, r0
 80082d4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80082d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082de:	d10f      	bne.n	8008300 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d004      	beq.n	80082f4 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d902      	bls.n	80082fa <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 80082f4:	2301      	movs	r3, #1
 80082f6:	82fb      	strh	r3, [r7, #22]
 80082f8:	e002      	b.n	8008300 <http_write+0x94>
      } else {
        len /= 2;
 80082fa:	8afb      	ldrh	r3, [r7, #22]
 80082fc:	085b      	lsrs	r3, r3, #1
 80082fe:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008308:	d102      	bne.n	8008310 <http_write+0xa4>
 800830a:	8afb      	ldrh	r3, [r7, #22]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d8da      	bhi.n	80082c6 <http_write+0x5a>

  if (err == ERR_OK) {
 8008310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	8afa      	ldrh	r2, [r7, #22]
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	e002      	b.n	8008326 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 8008326:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	08015e2c 	.word	0x08015e2c
 8008338:	08015e64 	.word	0x08015e64
 800833c:	08015e74 	.word	0x08015e74

08008340 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 800834e:	2100      	movs	r1, #0
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f005 fdaf 	bl	800deb4 <tcp_arg>
  tcp_recv(pcb, NULL);
 8008356:	2100      	movs	r1, #0
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f005 fdbb 	bl	800ded4 <tcp_recv>
  tcp_err(pcb, NULL);
 800835e:	2100      	movs	r1, #0
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	f005 fdf9 	bl	800df58 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f005 fe2c 	bl	800dfc8 <tcp_poll>
  tcp_sent(pcb, NULL);
 8008370:	2100      	movs	r1, #0
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f005 fdd0 	bl	800df18 <tcp_sent>
  if (hs != NULL) {
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800837e:	68b8      	ldr	r0, [r7, #8]
 8008380:	f7ff ff62 	bl	8008248 <http_state_free>
  }

  if (abort_conn) {
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f004 fcfe 	bl	800cd8c <tcp_abort>
    return ERR_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	e00f      	b.n	80083b4 <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f004 fc2f 	bl	800cbf8 <tcp_close>
 800839a:	4603      	mov	r3, r0
 800839c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800839e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d004      	beq.n	80083b0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80083a6:	2204      	movs	r2, #4
 80083a8:	4904      	ldr	r1, [pc, #16]	; (80083bc <http_close_or_abort_conn+0x7c>)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f005 fe0c 	bl	800dfc8 <tcp_poll>
  }
  return err;
 80083b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	0800939f 	.word	0x0800939f

080083c0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 80083ca:	2200      	movs	r2, #0
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff ffb6 	bl	8008340 <http_close_or_abort_conn>
 80083d4:	4603      	mov	r3, r0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ffe8 	bl	80083c0 <http_close_conn>
  }
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d003      	beq.n	8008410 <extract_uri_parameters+0x18>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <extract_uri_parameters+0x1c>
      return(0);
 8008410:	2300      	movs	r3, #0
 8008412:	e04b      	b.n	80084ac <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	e03f      	b.n	800849e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	320c      	adds	r2, #12
 8008424:	6979      	ldr	r1, [r7, #20]
 8008426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800842e:	2126      	movs	r1, #38	; 0x26
 8008430:	6978      	ldr	r0, [r7, #20]
 8008432:	f00c fbcb 	bl	8014bcc <strchr>
 8008436:	6178      	str	r0, [r7, #20]
    if(pair) {
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d006      	beq.n	800844c <extract_uri_parameters+0x54>
      *pair = '\0';
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
      pair++;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3301      	adds	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	e00c      	b.n	8008466 <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 800844c:	2120      	movs	r1, #32
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f00c fbbc 	bl	8014bcc <strchr>
 8008454:	6178      	str	r0, [r7, #20]
        if(pair) {
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <extract_uri_parameters+0x6a>
            *pair = '\0';
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2200      	movs	r2, #0
 8008460:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 8008462:	2300      	movs	r3, #0
 8008464:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8008466:	213d      	movs	r1, #61	; 0x3d
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f00c fbaf 	bl	8014bcc <strchr>
 800846e:	60f8      	str	r0, [r7, #12]
    if(equals) {
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <extract_uri_parameters+0x94>
      *equals = '\0';
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	1c59      	adds	r1, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	321c      	adds	r2, #28
 8008486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800848a:	e005      	b.n	8008498 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	321c      	adds	r2, #28
 8008492:	2100      	movs	r1, #0
 8008494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	3301      	adds	r3, #1
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b0f      	cmp	r3, #15
 80084a2:	dc02      	bgt.n	80084aa <extract_uri_parameters+0xb2>
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1b9      	bne.n	800841e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80084aa:	693b      	ldr	r3, [r7, #16]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d106      	bne.n	80084d0 <get_tag_insert+0x1c>
 80084c2:	4b52      	ldr	r3, [pc, #328]	; (800860c <get_tag_insert+0x158>)
 80084c4:	f240 22fb 	movw	r2, #763	; 0x2fb
 80084c8:	4951      	ldr	r1, [pc, #324]	; (8008610 <get_tag_insert+0x15c>)
 80084ca:	4852      	ldr	r0, [pc, #328]	; (8008614 <get_tag_insert+0x160>)
 80084cc:	f00c fb66 	bl	8014b9c <iprintf>
  ssi = hs->ssi;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <get_tag_insert+0x36>
 80084dc:	4b4b      	ldr	r3, [pc, #300]	; (800860c <get_tag_insert+0x158>)
 80084de:	f240 22fd 	movw	r2, #765	; 0x2fd
 80084e2:	494d      	ldr	r1, [pc, #308]	; (8008618 <get_tag_insert+0x164>)
 80084e4:	484b      	ldr	r0, [pc, #300]	; (8008614 <get_tag_insert+0x160>)
 80084e6:	f00c fb59 	bl	8014b9c <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 80084ea:	4b4c      	ldr	r3, [pc, #304]	; (800861c <get_tag_insert+0x168>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d02e      	beq.n	8008550 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 80084f2:	4b4b      	ldr	r3, [pc, #300]	; (8008620 <get_tag_insert+0x16c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d02a      	beq.n	8008550 <get_tag_insert+0x9c>
 80084fa:	4b4a      	ldr	r3, [pc, #296]	; (8008624 <get_tag_insert+0x170>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d026      	beq.n	8008550 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	e01e      	b.n	8008546 <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f103 0011 	add.w	r0, r3, #17
 800850e:	4b44      	ldr	r3, [pc, #272]	; (8008620 <get_tag_insert+0x16c>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4619      	mov	r1, r3
 800851c:	f7f7 fe58 	bl	80001d0 <strcmp>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10c      	bne.n	8008540 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 8008526:	4b3d      	ldr	r3, [pc, #244]	; (800861c <get_tag_insert+0x168>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8008530:	22c0      	movs	r2, #192	; 0xc0
 8008532:	6978      	ldr	r0, [r7, #20]
 8008534:	4798      	blx	r3
 8008536:	4603      	mov	r3, r0
 8008538:	461a      	mov	r2, r3
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800853e:	e061      	b.n	8008604 <get_tag_insert+0x150>
    for(tag = 0; tag < g_iNumTags; tag++) {
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	3301      	adds	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
 8008546:	4b37      	ldr	r3, [pc, #220]	; (8008624 <get_tag_insert+0x170>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	429a      	cmp	r2, r3
 800854e:	dbdb      	blt.n	8008508 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	3311      	adds	r3, #17
 8008554:	4618      	mov	r0, r3
 8008556:	f7f7 fe45 	bl	80001e4 <strlen>
 800855a:	4603      	mov	r3, r0
 800855c:	2ba6      	cmp	r3, #166	; 0xa6
 800855e:	d818      	bhi.n	8008592 <get_tag_insert+0xde>
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	3311      	adds	r3, #17
 8008564:	4618      	mov	r0, r3
 8008566:	f7f7 fe3d 	bl	80001e4 <strlen>
 800856a:	4603      	mov	r3, r0
 800856c:	2b11      	cmp	r3, #17
 800856e:	d810      	bhi.n	8008592 <get_tag_insert+0xde>
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	3311      	adds	r3, #17
 8008574:	4618      	mov	r0, r3
 8008576:	f7f7 fe35 	bl	80001e4 <strlen>
 800857a:	4603      	mov	r3, r0
 800857c:	2ba6      	cmp	r3, #166	; 0xa6
 800857e:	d806      	bhi.n	800858e <get_tag_insert+0xda>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	3311      	adds	r3, #17
 8008584:	4618      	mov	r0, r3
 8008586:	f7f7 fe2d 	bl	80001e4 <strlen>
 800858a:	4603      	mov	r3, r0
 800858c:	e002      	b.n	8008594 <get_tag_insert+0xe0>
 800858e:	23a7      	movs	r3, #167	; 0xa7
 8008590:	e000      	b.n	8008594 <get_tag_insert+0xe0>
 8008592:	2311      	movs	r3, #17
 8008594:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	3322      	adds	r3, #34	; 0x22
 800859a:	2212      	movs	r2, #18
 800859c:	4922      	ldr	r1, [pc, #136]	; (8008628 <get_tag_insert+0x174>)
 800859e:	4618      	mov	r0, r3
 80085a0:	f00c fae6 	bl	8014b70 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	3311      	adds	r3, #17
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4619      	mov	r1, r3
 80085b2:	f00c fadd 	bl	8014b70 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3312      	adds	r3, #18
 80085ba:	3320      	adds	r3, #32
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4413      	add	r3, r2
 80085c0:	3302      	adds	r3, #2
 80085c2:	2207      	movs	r2, #7
 80085c4:	4919      	ldr	r1, [pc, #100]	; (800862c <get_tag_insert+0x178>)
 80085c6:	4618      	mov	r0, r3
 80085c8:	f00c fad2 	bl	8014b70 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3319      	adds	r3, #25
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	4413      	add	r3, r2
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  len = strlen(ssi->tag_insert);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	3322      	adds	r3, #34	; 0x22
 80085de:	4618      	mov	r0, r3
 80085e0:	f7f7 fe00 	bl	80001e4 <strlen>
 80085e4:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ec:	d306      	bcc.n	80085fc <get_tag_insert+0x148>
 80085ee:	4b07      	ldr	r3, [pc, #28]	; (800860c <get_tag_insert+0x158>)
 80085f0:	f240 3236 	movw	r2, #822	; 0x336
 80085f4:	490e      	ldr	r1, [pc, #56]	; (8008630 <get_tag_insert+0x17c>)
 80085f6:	4807      	ldr	r0, [pc, #28]	; (8008614 <get_tag_insert+0x160>)
 80085f8:	f00c fad0 	bl	8014b9c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	b29a      	uxth	r2, r3
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	81da      	strh	r2, [r3, #14]
}
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	08015e2c 	.word	0x08015e2c
 8008610:	08015e9c 	.word	0x08015e9c
 8008614:	08015e74 	.word	0x08015e74
 8008618:	08015ea8 	.word	0x08015ea8
 800861c:	20008420 	.word	0x20008420
 8008620:	20008430 	.word	0x20008430
 8008624:	20008428 	.word	0x20008428
 8008628:	08015eb4 	.word	0x08015eb4
 800862c:	08015ec8 	.word	0x08015ec8
 8008630:	08015ed0 	.word	0x08015ed0

08008634 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d105      	bne.n	8008652 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff fec8 	bl	80083de <http_eof>
    return 0;
 800864e:	2300      	movs	r3, #0
 8008650:	e016      	b.n	8008680 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff fd7b 	bl	8008152 <fs_bytes_left>
 800865c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	dc05      	bgt.n	8008670 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff feb9 	bl	80083de <http_eof>
    return 0;
 800866c:	2300      	movs	r3, #0
 800866e:	e007      	b.n	8008680 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008670:	4b05      	ldr	r3, [pc, #20]	; (8008688 <http_check_eof+0x54>)
 8008672:	f240 4283 	movw	r2, #1155	; 0x483
 8008676:	4905      	ldr	r1, [pc, #20]	; (800868c <http_check_eof+0x58>)
 8008678:	4805      	ldr	r0, [pc, #20]	; (8008690 <http_check_eof+0x5c>)
 800867a:	f00c fa8f 	bl	8014b9c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800867e:	2301      	movs	r3, #1
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	08015e2c 	.word	0x08015e2c
 800868c:	08015ee0 	.word	0x08015ee0
 8008690:	08015e74 	.word	0x08015e74

08008694 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d803      	bhi.n	80086b6 <http_send_data_nonssi+0x22>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	e001      	b.n	80086ba <http_send_data_nonssi+0x26>
 80086b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086ba:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	6999      	ldr	r1, [r3, #24]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	bf14      	ite	ne
 80086c8:	2301      	movne	r3, #1
 80086ca:	2300      	moveq	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	f107 020c 	add.w	r2, r7, #12
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff fdca 	bl	800826c <http_write>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80086dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10d      	bne.n	8008700 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	89ba      	ldrh	r2, [r7, #12]
 80086ee:	441a      	add	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	89ba      	ldrh	r2, [r7, #12]
 80086fa:	1a9a      	subs	r2, r3, r2
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008700:	7bfb      	ldrb	r3, [r7, #15]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800871a:	2300      	movs	r3, #0
 800871c:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <http_send_data_ssi+0x2c>
 800872a:	4b97      	ldr	r3, [pc, #604]	; (8008988 <http_send_data_ssi+0x27c>)
 800872c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8008730:	4996      	ldr	r1, [pc, #600]	; (800898c <http_send_data_ssi+0x280>)
 8008732:	4897      	ldr	r0, [pc, #604]	; (8008990 <http_send_data_ssi+0x284>)
 8008734:	f00c fa32 	bl	8014b9c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800873e:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	429a      	cmp	r2, r3
 800874a:	f240 8249 	bls.w	8008be0 <http_send_data_ssi+0x4d4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800875c:	4293      	cmp	r3, r2
 800875e:	dc06      	bgt.n	800876e <http_send_data_ssi+0x62>
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	b29b      	uxth	r3, r3
 800876c:	e001      	b.n	8008772 <http_send_data_ssi+0x66>
 800876e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008772:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	6999      	ldr	r1, [r3, #24]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	bf14      	ite	ne
 8008780:	2301      	movne	r3, #1
 8008782:	2300      	moveq	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f107 020e 	add.w	r2, r7, #14
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fd6e 	bl	800826c <http_write>
 8008790:	4603      	mov	r3, r0
 8008792:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10d      	bne.n	80087b8 <http_send_data_ssi+0xac>
      data_to_send = 1;
 800879c:	2301      	movs	r3, #1
 800879e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	89fa      	ldrh	r2, [r7, #14]
 80087a6:	441a      	add	r2, r3
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	89fa      	ldrh	r2, [r7, #14]
 80087b2:	1a9a      	subs	r2, r3, r2
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 820e 	bne.w	8008be0 <http_send_data_ssi+0x4d4>
      return data_to_send;
 80087c4:	7dbb      	ldrb	r3, [r7, #22]
 80087c6:	e255      	b.n	8008c74 <http_send_data_ssi+0x568>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80087c8:	89fb      	ldrh	r3, [r7, #14]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <http_send_data_ssi+0xc6>
      return data_to_send;
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
 80087d0:	e250      	b.n	8008c74 <http_send_data_ssi+0x568>
    }
    switch(ssi->tag_state) {
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80087d8:	2b04      	cmp	r3, #4
 80087da:	f200 8200 	bhi.w	8008bde <http_send_data_ssi+0x4d2>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <http_send_data_ssi+0xd8>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	080087f9 	.word	0x080087f9
 80087e8:	0800882b 	.word	0x0800882b
 80087ec:	08008883 	.word	0x08008883
 80087f0:	080089bf 	.word	0x080089bf
 80087f4:	08008af9 	.word	0x08008af9
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	781a      	ldrb	r2, [r3, #0]
 80087fe:	4b65      	ldr	r3, [pc, #404]	; (8008994 <http_send_data_ssi+0x288>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d106      	bne.n	8008814 <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          ssi->tag_index = 1;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2201      	movs	r2, #1
 8008812:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	1e5a      	subs	r2, r3, #1
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	601a      	str	r2, [r3, #0]
        break;
 8008828:	e1da      	b.n	8008be0 <http_send_data_ssi+0x4d4>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	899b      	ldrh	r3, [r3, #12]
 800882e:	2b05      	cmp	r3, #5
 8008830:	d107      	bne.n	8008842 <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2200      	movs	r2, #0
 8008836:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8008840:	e1ce      	b.n	8008be0 <http_send_data_ssi+0x4d4>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	781a      	ldrb	r2, [r3, #0]
 8008848:	4952      	ldr	r1, [pc, #328]	; (8008994 <http_send_data_ssi+0x288>)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	899b      	ldrh	r3, [r3, #12]
 800884e:	440b      	add	r3, r1
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d106      	bne.n	8008864 <http_send_data_ssi+0x158>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	899b      	ldrh	r3, [r3, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	819a      	strh	r2, [r3, #12]
 8008862:	e003      	b.n	800886c <http_send_data_ssi+0x160>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	1e5a      	subs	r2, r3, #1
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	601a      	str	r2, [r3, #0]
        }
        break;
 8008880:	e1ae      	b.n	8008be0 <http_send_data_ssi+0x4d4>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	899b      	ldrh	r3, [r3, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d11e      	bne.n	80088c8 <http_send_data_ssi+0x1bc>
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b20      	cmp	r3, #32
 8008892:	d00e      	beq.n	80088b2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800889a:	2b09      	cmp	r3, #9
 800889c:	d009      	beq.n	80088b2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	2b0a      	cmp	r3, #10
 80088a6:	d004      	beq.n	80088b2 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80088ae:	2b0d      	cmp	r3, #13
 80088b0:	d10a      	bne.n	80088c8 <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	1e5a      	subs	r2, r3, #1
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	601a      	str	r2, [r3, #0]
          break;
 80088c6:	e18b      	b.n	8008be0 <http_send_data_ssi+0x4d4>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	4b32      	ldr	r3, [pc, #200]	; (8008998 <http_send_data_ssi+0x28c>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d013      	beq.n	80088fe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d00e      	beq.n	80088fe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b09      	cmp	r3, #9
 80088e8:	d009      	beq.n	80088fe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80088f0:	2b0a      	cmp	r3, #10
 80088f2:	d004      	beq.n	80088fe <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	2b0d      	cmp	r3, #13
 80088fc:	d132      	bne.n	8008964 <http_send_data_ssi+0x258>

          if(ssi->tag_index == 0) {
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	899b      	ldrh	r3, [r3, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          if(ssi->tag_index == 0) {
 800890e:	e04b      	b.n	80089a8 <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2203      	movs	r2, #3
 8008914:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	899b      	ldrh	r3, [r3, #12]
 800891c:	2bff      	cmp	r3, #255	; 0xff
 800891e:	d906      	bls.n	800892e <http_send_data_ssi+0x222>
 8008920:	4b19      	ldr	r3, [pc, #100]	; (8008988 <http_send_data_ssi+0x27c>)
 8008922:	f240 521b 	movw	r2, #1307	; 0x51b
 8008926:	491d      	ldr	r1, [pc, #116]	; (800899c <http_send_data_ssi+0x290>)
 8008928:	4819      	ldr	r0, [pc, #100]	; (8008990 <http_send_data_ssi+0x284>)
 800892a:	f00c f937 	bl	8014b9c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	899b      	ldrh	r3, [r3, #12]
 8008932:	b2da      	uxtb	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	899b      	ldrh	r3, [r3, #12]
 800893c:	461a      	mov	r2, r3
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	4413      	add	r3, r2
 8008942:	2200      	movs	r2, #0
 8008944:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	4b12      	ldr	r3, [pc, #72]	; (8008998 <http_send_data_ssi+0x28c>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d103      	bne.n	800895c <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2201      	movs	r2, #1
 8008958:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 800895a:	e025      	b.n	80089a8 <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2200      	movs	r2, #0
 8008960:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8008962:	e021      	b.n	80089a8 <http_send_data_ssi+0x29c>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	899b      	ldrh	r3, [r3, #12]
 8008968:	2b0f      	cmp	r3, #15
 800896a:	d819      	bhi.n	80089a0 <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	899b      	ldrh	r3, [r3, #12]
 8008974:	1c59      	adds	r1, r3, #1
 8008976:	b288      	uxth	r0, r1
 8008978:	6939      	ldr	r1, [r7, #16]
 800897a:	8188      	strh	r0, [r1, #12]
 800897c:	4619      	mov	r1, r3
 800897e:	7812      	ldrb	r2, [r2, #0]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	440b      	add	r3, r1
 8008984:	745a      	strb	r2, [r3, #17]
 8008986:	e00f      	b.n	80089a8 <http_send_data_ssi+0x29c>
 8008988:	08015e2c 	.word	0x08015e2c
 800898c:	08015ea8 	.word	0x08015ea8
 8008990:	08015e74 	.word	0x08015e74
 8008994:	08015e20 	.word	0x08015e20
 8008998:	08015e28 	.word	0x08015e28
 800899c:	08015f18 	.word	0x08015f18
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	1e5a      	subs	r2, r3, #1
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	601a      	str	r2, [r3, #0]

        break;
 80089bc:	e110      	b.n	8008be0 <http_send_data_ssi+0x4d4>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	899b      	ldrh	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d11e      	bne.n	8008a04 <http_send_data_ssi+0x2f8>
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d00e      	beq.n	80089ee <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80089d6:	2b09      	cmp	r3, #9
 80089d8:	d009      	beq.n	80089ee <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b0a      	cmp	r3, #10
 80089e2:	d004      	beq.n	80089ee <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80089ea:	2b0d      	cmp	r3, #13
 80089ec:	d10a      	bne.n	8008a04 <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	1e5a      	subs	r2, r3, #1
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	601a      	str	r2, [r3, #0]
          break;
 8008a02:	e0ed      	b.n	8008be0 <http_send_data_ssi+0x4d4>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	499c      	ldr	r1, [pc, #624]	; (8008c7c <http_send_data_ssi+0x570>)
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	899b      	ldrh	r3, [r3, #12]
 8008a10:	440b      	add	r3, r1
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d160      	bne.n	8008ada <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	1e5a      	subs	r2, r3, #1
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	899b      	ldrh	r3, [r3, #12]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d14b      	bne.n	8008acc <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8008a34:	6838      	ldr	r0, [r7, #0]
 8008a36:	f7ff fd3d 	bl	80084b4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2204      	movs	r2, #4
 8008a44:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
            ssi->tag_end = ssi->parsed;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	f240 80c1 	bls.w	8008be0 <http_send_data_ssi+0x4d4>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	685a      	ldr	r2, [r3, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	dc06      	bgt.n	8008a7e <http_send_data_ssi+0x372>
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	685a      	ldr	r2, [r3, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	e001      	b.n	8008a82 <http_send_data_ssi+0x376>
 8008a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a82:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	6999      	ldr	r1, [r3, #24]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bf14      	ite	ne
 8008a90:	2301      	movne	r3, #1
 8008a92:	2300      	moveq	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f107 020e 	add.w	r2, r7, #14
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7ff fbe6 	bl	800826c <http_write>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8008aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f040 8099 	bne.w	8008be0 <http_send_data_ssi+0x4d4>
                data_to_send = 1;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	89fa      	ldrh	r2, [r7, #14]
 8008ab8:	441a      	add	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	89fa      	ldrh	r2, [r7, #14]
 8008ac4:	1a9a      	subs	r2, r3, r2
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	625a      	str	r2, [r3, #36]	; 0x24
 8008aca:	e089      	b.n	8008be0 <http_send_data_ssi+0x4d4>
              }
            }
          } else {
            ssi->tag_index++;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	899b      	ldrh	r3, [r3, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	819a      	strh	r2, [r3, #12]
 8008ad8:	e082      	b.n	8008be0 <http_send_data_ssi+0x4d4>
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	1e5a      	subs	r2, r3, #1
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
        }
        break;
 8008af6:	e073      	b.n	8008be0 <http_send_data_ssi+0x4d4>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d93b      	bls.n	8008b7c <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008b12:	4293      	cmp	r3, r2
 8008b14:	dc06      	bgt.n	8008b24 <http_send_data_ssi+0x418>
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	699b      	ldr	r3, [r3, #24]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	e001      	b.n	8008b28 <http_send_data_ssi+0x41c>
 8008b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b28:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8008b2a:	89fb      	ldrh	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d010      	beq.n	8008b52 <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	6999      	ldr	r1, [r3, #24]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f107 020e 	add.w	r2, r7, #14
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff fb90 	bl	800826c <http_write>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	e001      	b.n	8008b56 <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8008b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d140      	bne.n	8008be0 <http_send_data_ssi+0x4d4>
            data_to_send = 1;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	89fa      	ldrh	r2, [r7, #14]
 8008b68:	441a      	add	r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	89fa      	ldrh	r2, [r7, #14]
 8008b74:	1a9a      	subs	r2, r3, r2
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	625a      	str	r2, [r3, #36]	; 0x24
 8008b7a:	e031      	b.n	8008be0 <http_send_data_ssi+0x4d4>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	899a      	ldrh	r2, [r3, #12]
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	89db      	ldrh	r3, [r3, #14]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d222      	bcs.n	8008bce <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	89da      	ldrh	r2, [r3, #14]
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	899b      	ldrh	r3, [r3, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	899b      	ldrh	r3, [r3, #12]
 8008b9a:	3320      	adds	r3, #32
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	1c99      	adds	r1, r3, #2
 8008ba2:	f107 020e 	add.w	r2, r7, #14
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff fb5f 	bl	800826c <http_write>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8008bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d112      	bne.n	8008be0 <http_send_data_ssi+0x4d4>
              data_to_send = 1;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	899a      	ldrh	r2, [r3, #12]
 8008bc2:	89fb      	ldrh	r3, [r7, #14]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	819a      	strh	r2, [r3, #12]
 8008bcc:	e008      	b.n	8008be0 <http_send_data_ssi+0x4d4>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8008bdc:	e000      	b.n	8008be0 <http_send_data_ssi+0x4d4>
        default:
          break;
 8008bde:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d004      	beq.n	8008bf2 <http_send_data_ssi+0x4e6>
 8008be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f43f adeb 	beq.w	80087c8 <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d03a      	beq.n	8008c72 <http_send_data_ssi+0x566>
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d934      	bls.n	8008c72 <http_send_data_ssi+0x566>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008c16:	4293      	cmp	r3, r2
 8008c18:	dc06      	bgt.n	8008c28 <http_send_data_ssi+0x51c>
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	e001      	b.n	8008c2c <http_send_data_ssi+0x520>
 8008c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c2c:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6999      	ldr	r1, [r3, #24]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	bf14      	ite	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	2300      	moveq	r3, #0
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f107 020e 	add.w	r2, r7, #14
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7ff fb11 	bl	800826c <http_write>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <http_send_data_ssi+0x566>
      data_to_send = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	89fa      	ldrh	r2, [r7, #14]
 8008c60:	441a      	add	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	89fa      	ldrh	r2, [r7, #14]
 8008c6c:	1a9a      	subs	r2, r3, r2
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8008c72:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	08015e28 	.word	0x08015e28

08008c80 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <http_send+0x18>
    return 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e030      	b.n	8008cfa <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d108      	bne.n	8008cb2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff fcc6 	bl	8008634 <http_check_eof>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <http_send+0x32>
      return 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	e023      	b.n	8008cfa <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d006      	beq.n	8008cc8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff fd25 	bl	800870c <http_send_data_ssi>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	73fb      	strb	r3, [r7, #15]
 8008cc6:	e005      	b.n	8008cd4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff fce2 	bl	8008694 <http_send_data_nonssi>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10d      	bne.n	8008cf8 <http_send+0x78>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fa36 	bl	8008152 <fs_bytes_left>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	dc05      	bgt.n	8008cf8 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff fb75 	bl	80083de <http_eof>
    return 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e000      	b.n	8008cfa <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
	...

08008d04 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	4a1c      	ldr	r2, [pc, #112]	; (8008d84 <http_get_404_file+0x80>)
 8008d12:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7ff f9d1 	bl	80080c4 <fs_open>
 8008d22:	4603      	mov	r3, r0
 8008d24:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d024      	beq.n	8008d78 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	4a15      	ldr	r2, [pc, #84]	; (8008d88 <http_get_404_file+0x84>)
 8008d32:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7ff f9c1 	bl	80080c4 <fs_open>
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d014      	beq.n	8008d78 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	4a0e      	ldr	r2, [pc, #56]	; (8008d8c <http_get_404_file+0x88>)
 8008d52:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	f7ff f9b1 	bl	80080c4 <fs_open>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8008d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d004      	beq.n	8008d78 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]
        return NULL;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e000      	b.n	8008d7a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8008d78:	687b      	ldr	r3, [r7, #4]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	08015f30 	.word	0x08015f30
 8008d88:	08015f3c 	.word	0x08015f3c
 8008d8c:	08015f48 	.word	0x08015f48

08008d90 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08e      	sub	sp, #56	; 0x38
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d106      	bne.n	8008db4 <http_parse_request+0x24>
 8008da6:	4b65      	ldr	r3, [pc, #404]	; (8008f3c <http_parse_request+0x1ac>)
 8008da8:	f240 727e 	movw	r2, #1918	; 0x77e
 8008dac:	4964      	ldr	r1, [pc, #400]	; (8008f40 <http_parse_request+0x1b0>)
 8008dae:	4865      	ldr	r0, [pc, #404]	; (8008f44 <http_parse_request+0x1b4>)
 8008db0:	f00b fef4 	bl	8014b9c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <http_parse_request+0x38>
 8008dba:	4b60      	ldr	r3, [pc, #384]	; (8008f3c <http_parse_request+0x1ac>)
 8008dbc:	f240 727f 	movw	r2, #1919	; 0x77f
 8008dc0:	4961      	ldr	r1, [pc, #388]	; (8008f48 <http_parse_request+0x1b8>)
 8008dc2:	4860      	ldr	r0, [pc, #384]	; (8008f44 <http_parse_request+0x1b4>)
 8008dc4:	f00b feea 	bl	8014b9c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <http_parse_request+0x48>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8008dd8:	f06f 0307 	mvn.w	r3, #7
 8008ddc:	e0a9      	b.n	8008f32 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	621a      	str	r2, [r3, #32]
 8008dec:	e005      	b.n	8008dfa <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008df4:	4618      	mov	r0, r3
 8008df6:	f003 fb3d 	bl	800c474 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8008dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dfc:	f003 fb12 	bl	800c424 <pbuf_ref>

  if (hs->req->next != NULL) {
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d012      	beq.n	8008e30 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	891b      	ldrh	r3, [r3, #8]
 8008e10:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8008e14:	4293      	cmp	r3, r2
 8008e16:	bf28      	it	cs
 8008e18:	4613      	movcs	r3, r2
 8008e1a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	6a18      	ldr	r0, [r3, #32]
 8008e20:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008e22:	2300      	movs	r3, #0
 8008e24:	4949      	ldr	r1, [pc, #292]	; (8008f4c <http_parse_request+0x1bc>)
 8008e26:	f003 fc47 	bl	800c6b8 <pbuf_copy_partial>
    data = httpd_req_buf;
 8008e2a:	4b48      	ldr	r3, [pc, #288]	; (8008f4c <http_parse_request+0x1bc>)
 8008e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2e:	e005      	b.n	8008e3c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	895b      	ldrh	r3, [r3, #10]
 8008e3a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8008e3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008e3e:	2b06      	cmp	r3, #6
 8008e40:	d962      	bls.n	8008f08 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8008e42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008e44:	461a      	mov	r2, r3
 8008e46:	4942      	ldr	r1, [pc, #264]	; (8008f50 <http_parse_request+0x1c0>)
 8008e48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008e4a:	f002 f804 	bl	800ae56 <lwip_strnstr>
 8008e4e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8008e50:	6a3b      	ldr	r3, [r7, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d058      	beq.n	8008f08 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8008e5a:	2204      	movs	r2, #4
 8008e5c:	493d      	ldr	r1, [pc, #244]	; (8008f54 <http_parse_request+0x1c4>)
 8008e5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008e60:	f00b fec9 	bl	8014bf6 <strncmp>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d116      	bne.n	8008e98 <http_parse_request+0x108>
        sp1 = data + 3;
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6c:	3303      	adds	r3, #3
 8008e6e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3301      	adds	r3, #1
 8008e84:	8b7a      	ldrh	r2, [r7, #26]
 8008e86:	4934      	ldr	r1, [pc, #208]	; (8008f58 <http_parse_request+0x1c8>)
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 ffe4 	bl	800ae56 <lwip_strnstr>
 8008e8e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d111      	bne.n	8008eba <http_parse_request+0x12a>
 8008e96:	e006      	b.n	8008ea6 <http_parse_request+0x116>
        data[4] = 0;
 8008e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8008ea0:	f06f 030f 	mvn.w	r3, #15
 8008ea4:	e045      	b.n	8008f32 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	8b7a      	ldrh	r2, [r7, #26]
 8008eac:	4928      	ldr	r1, [pc, #160]	; (8008f50 <http_parse_request+0x1c0>)
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 ffd1 	bl	800ae56 <lwip_strnstr>
 8008eb4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d01e      	beq.n	8008f08 <http_parse_request+0x178>
 8008eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d91a      	bls.n	8008f08 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8008ed2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	4921      	ldr	r1, [pc, #132]	; (8008f5c <http_parse_request+0x1cc>)
 8008ed8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008eda:	f001 ffbc 	bl	800ae56 <lwip_strnstr>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d011      	beq.n	8008f08 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8008ef0:	8b3b      	ldrh	r3, [r7, #24]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8008efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008efc:	6979      	ldr	r1, [r7, #20]
 8008efe:	68b8      	ldr	r0, [r7, #8]
 8008f00:	f000 f82e 	bl	8008f60 <http_find_file>
 8008f04:	4603      	mov	r3, r0
 8008f06:	e014      	b.n	8008f32 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f003 fa73 	bl	800c3f8 <pbuf_clen>
 8008f12:	4603      	mov	r3, r0
 8008f14:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	891b      	ldrh	r3, [r3, #8]
 8008f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f20:	d205      	bcs.n	8008f2e <http_parse_request+0x19e>
 8008f22:	8a7b      	ldrh	r3, [r7, #18]
 8008f24:	2b05      	cmp	r3, #5
 8008f26:	d802      	bhi.n	8008f2e <http_parse_request+0x19e>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8008f28:	f06f 0304 	mvn.w	r3, #4
 8008f2c:	e001      	b.n	8008f32 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8008f2e:	f06f 030f 	mvn.w	r3, #15
  }
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3738      	adds	r7, #56	; 0x38
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	08015e2c 	.word	0x08015e2c
 8008f40:	08015f54 	.word	0x08015f54
 8008f44:	08015e74 	.word	0x08015e74
 8008f48:	08015e9c 	.word	0x08015e9c
 8008f4c:	20004660 	.word	0x20004660
 8008f50:	08015f60 	.word	0x08015f60
 8008f54:	08015f64 	.word	0x08015f64
 8008f58:	08015f6c 	.word	0x08015f6c
 8008f5c:	08015f70 	.word	0x08015f70

08008f60 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8008f60:	b590      	push	{r4, r7, lr}
 8008f62:	b097      	sub	sp, #92	; 0x5c
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  char *params = NULL;
 8008f70:	2300      	movs	r3, #0
 8008f72:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7f7 f931 	bl	80001e4 <strlen>
 8008f82:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8008f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d06c      	beq.n	8009064 <http_find_file+0x104>
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b2f      	cmp	r3, #47	; 0x2f
 8008f96:	d165      	bne.n	8009064 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8008f98:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8008f9a:	4a97      	ldr	r2, [pc, #604]	; (80091f8 <http_find_file+0x298>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d102      	bne.n	8008fa6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d15e      	bne.n	8009064 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8008fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	2b3f      	cmp	r3, #63	; 0x3f
 8008fac:	bf28      	it	cs
 8008fae:	233f      	movcs	r3, #63	; 0x3f
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (copy_len > 0) {
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00a      	beq.n	8008fce <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	488e      	ldr	r0, [pc, #568]	; (80091f8 <http_find_file+0x298>)
 8008fc0:	f00b fdd6 	bl	8014b70 <memcpy>
      http_uri_buf[copy_len] = 0;
 8008fc4:	4a8c      	ldr	r2, [pc, #560]	; (80091f8 <http_find_file+0x298>)
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	4413      	add	r3, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8008fce:	2300      	movs	r3, #0
 8008fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd2:	e044      	b.n	800905e <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8008fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d022      	beq.n	8009020 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24
        if (len_left > 0) {
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d018      	beq.n	800901a <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8008fe8:	4a84      	ldr	r2, [pc, #528]	; (80091fc <http_find_file+0x29c>)
 8008fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f7 f8f7 	bl	80001e4 <strlen>
 8008ff6:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8008ff8:	6a3a      	ldr	r2, [r7, #32]
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	bf28      	it	cs
 8009000:	4613      	movcs	r3, r2
 8009002:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	4a7c      	ldr	r2, [pc, #496]	; (80091f8 <http_find_file+0x298>)
 8009008:	1898      	adds	r0, r3, r2
 800900a:	4a7c      	ldr	r2, [pc, #496]	; (80091fc <http_find_file+0x29c>)
 800900c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	4619      	mov	r1, r3
 8009016:	f00b fdab 	bl	8014b70 <memcpy>
        }
        file_name = http_uri_buf;
 800901a:	4b77      	ldr	r3, [pc, #476]	; (80091f8 <http_find_file+0x298>)
 800901c:	63bb      	str	r3, [r7, #56]	; 0x38
 800901e:	e004      	b.n	800902a <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 8009020:	4a76      	ldr	r2, [pc, #472]	; (80091fc <http_find_file+0x29c>)
 8009022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009028:	63bb      	str	r3, [r7, #56]	; 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff f848 	bl	80080c4 <fs_open>
 8009034:	4603      	mov	r3, r0
 8009036:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 8009038:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <http_find_file+0xf8>
        uri = file_name;
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	64bb      	str	r3, [r7, #72]	; 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 8009048:	4a6c      	ldr	r2, [pc, #432]	; (80091fc <http_find_file+0x29c>)
 800904a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800904c:	00db      	lsls	r3, r3, #3
 800904e:	4413      	add	r3, r2
 8009050:	791b      	ldrb	r3, [r3, #4]
 8009052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 8009056:	e005      	b.n	8009064 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905a:	3301      	adds	r3, #1
 800905c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009060:	2b04      	cmp	r3, #4
 8009062:	d9b7      	bls.n	8008fd4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8009064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009066:	2b00      	cmp	r3, #0
 8009068:	f040 80ab 	bne.w	80091c2 <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	213f      	movs	r1, #63	; 0x3f
 8009070:	4618      	mov	r0, r3
 8009072:	f00b fdab 	bl	8014bcc <strchr>
 8009076:	6478      	str	r0, [r7, #68]	; 0x44
    if (params != NULL) {
 8009078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800907e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009080:	2200      	movs	r2, #0
 8009082:	701a      	strb	r2, [r3, #0]
      params++;
 8009084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009086:	3301      	adds	r3, #1
 8009088:	647b      	str	r3, [r7, #68]	; 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800908a:	4b5d      	ldr	r3, [pc, #372]	; (8009200 <http_find_file+0x2a0>)
 800908c:	f04f 32ff 	mov.w	r2, #4294967295
 8009090:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 8009092:	4b5c      	ldr	r3, [pc, #368]	; (8009204 <http_find_file+0x2a4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d034      	beq.n	8009104 <http_find_file+0x1a4>
 800909a:	4b5b      	ldr	r3, [pc, #364]	; (8009208 <http_find_file+0x2a8>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d030      	beq.n	8009104 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 80090a2:	2300      	movs	r3, #0
 80090a4:	643b      	str	r3, [r7, #64]	; 0x40
 80090a6:	e028      	b.n	80090fa <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 80090a8:	68b8      	ldr	r0, [r7, #8]
 80090aa:	4b57      	ldr	r3, [pc, #348]	; (8009208 <http_find_file+0x2a8>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b0:	00db      	lsls	r3, r3, #3
 80090b2:	4413      	add	r3, r2
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4619      	mov	r1, r3
 80090b8:	f7f7 f88a 	bl	80001d0 <strcmp>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d118      	bne.n	80090f4 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 80090c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7ff f997 	bl	80083f8 <extract_uri_parameters>
 80090ca:	4603      	mov	r3, r0
 80090cc:	4a4c      	ldr	r2, [pc, #304]	; (8009200 <http_find_file+0x2a0>)
 80090ce:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80090d0:	4b4d      	ldr	r3, [pc, #308]	; (8009208 <http_find_file+0x2a8>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	4413      	add	r3, r2
 80090da:	685c      	ldr	r4, [r3, #4]
 80090dc:	4b48      	ldr	r3, [pc, #288]	; (8009200 <http_find_file+0x2a0>)
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                          hs->param_vals);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3370      	adds	r3, #112	; 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80090ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80090ec:	47a0      	blx	r4
 80090ee:	4603      	mov	r3, r0
 80090f0:	60bb      	str	r3, [r7, #8]
           break;
 80090f2:	e007      	b.n	8009104 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 80090f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090f6:	3301      	adds	r3, #1
 80090f8:	643b      	str	r3, [r7, #64]	; 0x40
 80090fa:	4b42      	ldr	r3, [pc, #264]	; (8009204 <http_find_file+0x2a4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009100:	429a      	cmp	r2, r3
 8009102:	dbd1      	blt.n	80090a8 <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	4611      	mov	r1, r2
 800910a:	4618      	mov	r0, r3
 800910c:	f7fe ffda 	bl	80080c4 <fs_open>
 8009110:	4603      	mov	r3, r0
 8009112:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 8009114:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d102      	bne.n	8009122 <http_find_file+0x1c2>
       file = &hs->file_handle;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009120:	e006      	b.n	8009130 <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	4619      	mov	r1, r3
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff fdeb 	bl	8008d04 <http_get_404_file>
 800912e:	64b8      	str	r0, [r7, #72]	; 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8009130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009132:	2b00      	cmp	r3, #0
 8009134:	d045      	beq.n	80091c2 <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 8009136:	2300      	movs	r3, #0
 8009138:	637b      	str	r3, [r7, #52]	; 0x34
      char* param = (char*)strstr(uri, "?");
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	213f      	movs	r1, #63	; 0x3f
 800913e:	4618      	mov	r0, r3
 8009140:	f00b fd44 	bl	8014bcc <strchr>
 8009144:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2200      	movs	r2, #0
 8009150:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	633b      	str	r3, [r7, #48]	; 0x30
      ext = uri;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	637b      	str	r3, [r7, #52]	; 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800915a:	212e      	movs	r1, #46	; 0x2e
 800915c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800915e:	f00b fd35 	bl	8014bcc <strchr>
 8009162:	6338      	str	r0, [r7, #48]	; 0x30
 8009164:	e009      	b.n	800917a <http_find_file+0x21a>
      {
         ext = sub;
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
         sub++;
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	3301      	adds	r3, #1
 800916e:	633b      	str	r3, [r7, #48]	; 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 8009170:	212e      	movs	r1, #46	; 0x2e
 8009172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009174:	f00b fd2a 	bl	8014bcc <strchr>
 8009178:	6338      	str	r0, [r7, #48]	; 0x30
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f2      	bne.n	8009166 <http_find_file+0x206>
      }
      tag_check = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009186:	2300      	movs	r3, #0
 8009188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800918a:	e011      	b.n	80091b0 <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800918c:	4a1f      	ldr	r2, [pc, #124]	; (800920c <http_find_file+0x2ac>)
 800918e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009194:	4619      	mov	r1, r3
 8009196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009198:	f001 fe93 	bl	800aec2 <lwip_stricmp>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d103      	bne.n	80091aa <http_find_file+0x24a>
          tag_check = 1;
 80091a2:	2301      	movs	r3, #1
 80091a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 80091a8:	e005      	b.n	80091b6 <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80091aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ac:	3301      	adds	r3, #1
 80091ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d9ea      	bls.n	800918c <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <http_find_file+0x262>
         *param = '?';
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	223f      	movs	r2, #63	; 0x3f
 80091c0:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80091c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80091c8:	f107 0308 	add.w	r3, r7, #8
 80091cc:	4619      	mov	r1, r3
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff fd98 	bl	8008d04 <http_get_404_file>
 80091d4:	64b8      	str	r0, [r7, #72]	; 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4613      	mov	r3, r2
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 f811 	bl	8009210 <http_init_file>
 80091ee:	4603      	mov	r3, r0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3754      	adds	r7, #84	; 0x54
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}
 80091f8:	20004a60 	.word	0x20004a60
 80091fc:	0801862c 	.word	0x0801862c
 8009200:	20008424 	.word	0x20008424
 8009204:	2000841c 	.word	0x2000841c
 8009208:	2000842c 	.word	0x2000842c
 800920c:	0801861c 	.word	0x0801861c

08009210 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
 800921c:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d072      	beq.n	800930a <http_init_file+0xfa>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 8009224:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01c      	beq.n	8009266 <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800922c:	f7fe ff9f 	bl	800816e <http_ssi_state_alloc>
 8009230:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d016      	beq.n	8009266 <http_init_file+0x56>
        ssi->tag_index = 0;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	2200      	movs	r2, #0
 800923c:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
        ssi->parsed = file->data;
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	461a      	mov	r2, r3
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	69fa      	ldr	r2, [r7, #28]
 8009264:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	da06      	bge.n	800928a <http_init_file+0x7a>
 800927c:	4b2c      	ldr	r3, [pc, #176]	; (8009330 <http_init_file+0x120>)
 800927e:	f640 02cf 	movw	r2, #2255	; 0x8cf
 8009282:	492c      	ldr	r1, [pc, #176]	; (8009334 <http_init_file+0x124>)
 8009284:	482c      	ldr	r0, [pc, #176]	; (8009338 <http_init_file+0x128>)
 8009286:	f00b fc89 	bl	8014b9c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	461a      	mov	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	7c1b      	ldrb	r3, [r3, #16]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d106      	bne.n	80092b8 <http_init_file+0xa8>
 80092aa:	4b21      	ldr	r3, [pc, #132]	; (8009330 <http_init_file+0x120>)
 80092ac:	f640 02de 	movw	r2, #2270	; 0x8de
 80092b0:	4922      	ldr	r1, [pc, #136]	; (800933c <http_init_file+0x12c>)
 80092b2:	4821      	ldr	r0, [pc, #132]	; (8009338 <http_init_file+0x128>)
 80092b4:	f00b fc72 	bl	8014b9c <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d032      	beq.n	8009324 <http_init_file+0x114>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	7c1b      	ldrb	r3, [r3, #16]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d02b      	beq.n	8009324 <http_init_file+0x114>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6998      	ldr	r0, [r3, #24]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	461a      	mov	r2, r3
 80092d6:	491a      	ldr	r1, [pc, #104]	; (8009340 <http_init_file+0x130>)
 80092d8:	f001 fdbd 	bl	800ae56 <lwip_strnstr>
 80092dc:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d01f      	beq.n	8009324 <http_init_file+0x114>
        size_t diff = file_start + 4 - hs->file;
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	1d1a      	adds	r2, r3, #4
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	441a      	add	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	1ad2      	subs	r2, r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	625a      	str	r2, [r3, #36]	; 0x24
 8009308:	e00c      	b.n	8009324 <http_init_file+0x114>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3720      	adds	r7, #32
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	08015e2c 	.word	0x08015e2c
 8009334:	08015f78 	.word	0x08015f78
 8009338:	08015e74 	.word	0x08015e74
 800933c:	08015f98 	.word	0x08015f98
 8009340:	08015f70 	.word	0x08015f70

08009344 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <http_err+0x1c>
    http_state_free(hs);
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7fe ff74 	bl	8008248 <http_state_free>
  }
}
 8009360:	bf00      	nop
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <http_sent+0x1c>
    return ERR_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	e008      	b.n	8009396 <http_sent+0x2e>
  }

  hs->retries = 0;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800938c:	6979      	ldr	r1, [r7, #20]
 800938e:	68b8      	ldr	r0, [r7, #8]
 8009390:	f7ff fc76 	bl	8008c80 <http_send>

  return ERR_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d107      	bne.n	80093c2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80093b2:	2100      	movs	r1, #0
 80093b4:	6838      	ldr	r0, [r7, #0]
 80093b6:	f7ff f803 	bl	80083c0 <http_close_conn>
 80093ba:	4603      	mov	r3, r0
 80093bc:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	e024      	b.n	800940c <http_poll+0x6e>
  } else {
    hs->retries++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093c8:	3301      	adds	r3, #1
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d105      	bne.n	80093e8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80093dc:	68f9      	ldr	r1, [r7, #12]
 80093de:	6838      	ldr	r0, [r7, #0]
 80093e0:	f7fe ffee 	bl	80083c0 <http_close_conn>
      return ERR_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	e011      	b.n	800940c <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00d      	beq.n	800940a <http_poll+0x6c>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d009      	beq.n	800940a <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	6838      	ldr	r0, [r7, #0]
 80093fa:	f7ff fc41 	bl	8008c80 <http_send>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 8009404:	6838      	ldr	r0, [r7, #0]
 8009406:	f008 f841 	bl	801148c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d105      	bne.n	800943a <http_recv+0x26>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <http_recv+0x26>
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d111      	bne.n	800945e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d008      	beq.n	8009452 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	891b      	ldrh	r3, [r3, #8]
 8009444:	4619      	mov	r1, r3
 8009446:	68b8      	ldr	r0, [r7, #8]
 8009448:	f003 fe46 	bl	800d0d8 <tcp_recved>
      pbuf_free(p);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f002 ff39 	bl	800c2c4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	68b8      	ldr	r0, [r7, #8]
 8009456:	f7fe ffb3 	bl	80083c0 <http_close_conn>
    return ERR_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	e055      	b.n	800950a <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	891b      	ldrh	r3, [r3, #8]
 8009462:	4619      	mov	r1, r3
 8009464:	68b8      	ldr	r0, [r7, #8]
 8009466:	f003 fe37 	bl	800d0d8 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d147      	bne.n	8009502 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	6979      	ldr	r1, [r7, #20]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f7ff fc8a 	bl	8008d90 <http_parse_request>
 800947c:	4603      	mov	r3, r0
 800947e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8009480:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d015      	beq.n	80094b4 <http_recv+0xa0>
 8009488:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800948c:	f113 0f05 	cmn.w	r3, #5
 8009490:	d010      	beq.n	80094b4 <http_recv+0xa0>
 8009492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009496:	f113 0f10 	cmn.w	r3, #16
 800949a:	d00b      	beq.n	80094b4 <http_recv+0xa0>
 800949c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094a0:	f113 0f08 	cmn.w	r3, #8
 80094a4:	d006      	beq.n	80094b4 <http_recv+0xa0>
 80094a6:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <http_recv+0x100>)
 80094a8:	f640 12b4 	movw	r2, #2484	; 0x9b4
 80094ac:	491a      	ldr	r1, [pc, #104]	; (8009518 <http_recv+0x104>)
 80094ae:	481b      	ldr	r0, [pc, #108]	; (800951c <http_recv+0x108>)
 80094b0:	f00b fb74 	bl	8014b9c <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80094b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094b8:	f113 0f05 	cmn.w	r3, #5
 80094bc:	d00b      	beq.n	80094d6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d007      	beq.n	80094d6 <http_recv+0xc2>
          pbuf_free(hs->req);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f002 fefa 	bl	800c2c4 <pbuf_free>
          hs->req = NULL;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2200      	movs	r2, #0
 80094d4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f002 fef4 	bl	800c2c4 <pbuf_free>
      if (parsed == ERR_OK) {
 80094dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d104      	bne.n	80094ee <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 80094e4:	6979      	ldr	r1, [r7, #20]
 80094e6:	68b8      	ldr	r0, [r7, #8]
 80094e8:	f7ff fbca 	bl	8008c80 <http_send>
 80094ec:	e00c      	b.n	8009508 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80094ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094f2:	f113 0f10 	cmn.w	r3, #16
 80094f6:	d107      	bne.n	8009508 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80094f8:	6979      	ldr	r1, [r7, #20]
 80094fa:	68b8      	ldr	r0, [r7, #8]
 80094fc:	f7fe ff60 	bl	80083c0 <http_close_conn>
 8009500:	e002      	b.n	8009508 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f002 fede 	bl	800c2c4 <pbuf_free>
    }
  }
  return ERR_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	08015e2c 	.word	0x08015e2c
 8009518:	08015fc4 	.word	0x08015fc4
 800951c:	08015e74 	.word	0x08015e74

08009520 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800952e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <http_accept+0x1c>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <http_accept+0x22>
    return ERR_VAL;
 800953c:	f06f 0305 	mvn.w	r3, #5
 8009540:	e025      	b.n	800958e <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009542:	2101      	movs	r1, #1
 8009544:	68b8      	ldr	r0, [r7, #8]
 8009546:	f004 fb15 	bl	800db74 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800954a:	f7fe fe3f 	bl	80081cc <http_state_alloc>
 800954e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d102      	bne.n	800955c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8009556:	f04f 33ff 	mov.w	r3, #4294967295
 800955a:	e018      	b.n	800958e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8009562:	6979      	ldr	r1, [r7, #20]
 8009564:	68b8      	ldr	r0, [r7, #8]
 8009566:	f004 fca5 	bl	800deb4 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800956a:	490b      	ldr	r1, [pc, #44]	; (8009598 <http_accept+0x78>)
 800956c:	68b8      	ldr	r0, [r7, #8]
 800956e:	f004 fcb1 	bl	800ded4 <tcp_recv>
  tcp_err(pcb, http_err);
 8009572:	490a      	ldr	r1, [pc, #40]	; (800959c <http_accept+0x7c>)
 8009574:	68b8      	ldr	r0, [r7, #8]
 8009576:	f004 fcef 	bl	800df58 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800957a:	2204      	movs	r2, #4
 800957c:	4908      	ldr	r1, [pc, #32]	; (80095a0 <http_accept+0x80>)
 800957e:	68b8      	ldr	r0, [r7, #8]
 8009580:	f004 fd22 	bl	800dfc8 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8009584:	4907      	ldr	r1, [pc, #28]	; (80095a4 <http_accept+0x84>)
 8009586:	68b8      	ldr	r0, [r7, #8]
 8009588:	f004 fcc6 	bl	800df18 <tcp_sent>

  return ERR_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	08009415 	.word	0x08009415
 800959c:	08009345 	.word	0x08009345
 80095a0:	0800939f 	.word	0x0800939f
 80095a4:	08009369 	.word	0x08009369

080095a8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 80095ae:	202e      	movs	r0, #46	; 0x2e
 80095b0:	f004 fc72 	bl	800de98 <tcp_new_ip_type>
 80095b4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d106      	bne.n	80095ca <httpd_init+0x22>
 80095bc:	4b19      	ldr	r3, [pc, #100]	; (8009624 <httpd_init+0x7c>)
 80095be:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 80095c2:	4919      	ldr	r1, [pc, #100]	; (8009628 <httpd_init+0x80>)
 80095c4:	4819      	ldr	r0, [pc, #100]	; (800962c <httpd_init+0x84>)
 80095c6:	f00b fae9 	bl	8014b9c <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80095ca:	2101      	movs	r1, #1
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f004 fad1 	bl	800db74 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 80095d2:	2250      	movs	r2, #80	; 0x50
 80095d4:	4916      	ldr	r1, [pc, #88]	; (8009630 <httpd_init+0x88>)
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f003 fbe4 	bl	800cda4 <tcp_bind>
 80095dc:	4603      	mov	r3, r0
 80095de:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80095e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d006      	beq.n	80095f6 <httpd_init+0x4e>
 80095e8:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <httpd_init+0x7c>)
 80095ea:	f640 2215 	movw	r2, #2581	; 0xa15
 80095ee:	4911      	ldr	r1, [pc, #68]	; (8009634 <httpd_init+0x8c>)
 80095f0:	480e      	ldr	r0, [pc, #56]	; (800962c <httpd_init+0x84>)
 80095f2:	f00b fad3 	bl	8014b9c <iprintf>
  pcb = tcp_listen(pcb);
 80095f6:	21ff      	movs	r1, #255	; 0xff
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f003 fc75 	bl	800cee8 <tcp_listen_with_backlog>
 80095fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <httpd_init+0x6c>
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <httpd_init+0x7c>)
 8009608:	f640 2217 	movw	r2, #2583	; 0xa17
 800960c:	490a      	ldr	r1, [pc, #40]	; (8009638 <httpd_init+0x90>)
 800960e:	4807      	ldr	r0, [pc, #28]	; (800962c <httpd_init+0x84>)
 8009610:	f00b fac4 	bl	8014b9c <iprintf>
  tcp_accept(pcb, http_accept);
 8009614:	4909      	ldr	r1, [pc, #36]	; (800963c <httpd_init+0x94>)
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f004 fcc0 	bl	800df9c <tcp_accept>
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	08015e2c 	.word	0x08015e2c
 8009628:	08015ff0 	.word	0x08015ff0
 800962c:	08015e74 	.word	0x08015e74
 8009630:	08018764 	.word	0x08018764
 8009634:	0801600c 	.word	0x0801600c
 8009638:	08016028 	.word	0x08016028
 800963c:	08009521 	.word	0x08009521

08009640 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <http_set_ssi_handler+0x20>
 8009652:	4b14      	ldr	r3, [pc, #80]	; (80096a4 <http_set_ssi_handler+0x64>)
 8009654:	f640 2228 	movw	r2, #2600	; 0xa28
 8009658:	4913      	ldr	r1, [pc, #76]	; (80096a8 <http_set_ssi_handler+0x68>)
 800965a:	4814      	ldr	r0, [pc, #80]	; (80096ac <http_set_ssi_handler+0x6c>)
 800965c:	f00b fa9e 	bl	8014b9c <iprintf>
  g_pfnSSIHandler = ssi_handler;
 8009660:	4a13      	ldr	r2, [pc, #76]	; (80096b0 <http_set_ssi_handler+0x70>)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d106      	bne.n	800967a <http_set_ssi_handler+0x3a>
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <http_set_ssi_handler+0x64>)
 800966e:	f640 222f 	movw	r2, #2607	; 0xa2f
 8009672:	4910      	ldr	r1, [pc, #64]	; (80096b4 <http_set_ssi_handler+0x74>)
 8009674:	480d      	ldr	r0, [pc, #52]	; (80096ac <http_set_ssi_handler+0x6c>)
 8009676:	f00b fa91 	bl	8014b9c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	dc06      	bgt.n	800968e <http_set_ssi_handler+0x4e>
 8009680:	4b08      	ldr	r3, [pc, #32]	; (80096a4 <http_set_ssi_handler+0x64>)
 8009682:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8009686:	490c      	ldr	r1, [pc, #48]	; (80096b8 <http_set_ssi_handler+0x78>)
 8009688:	4808      	ldr	r0, [pc, #32]	; (80096ac <http_set_ssi_handler+0x6c>)
 800968a:	f00b fa87 	bl	8014b9c <iprintf>

  g_ppcTags = tags;
 800968e:	4a0b      	ldr	r2, [pc, #44]	; (80096bc <http_set_ssi_handler+0x7c>)
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <http_set_ssi_handler+0x80>)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	08015e2c 	.word	0x08015e2c
 80096a8:	08016048 	.word	0x08016048
 80096ac:	08015e74 	.word	0x08015e74
 80096b0:	20008420 	.word	0x20008420
 80096b4:	08016060 	.word	0x08016060
 80096b8:	08016070 	.word	0x08016070
 80096bc:	20008430 	.word	0x20008430
 80096c0:	20008428 	.word	0x20008428

080096c4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <http_set_cgi_handlers+0x1e>
 80096d4:	4b0d      	ldr	r3, [pc, #52]	; (800970c <http_set_cgi_handlers+0x48>)
 80096d6:	f640 2242 	movw	r2, #2626	; 0xa42
 80096da:	490d      	ldr	r1, [pc, #52]	; (8009710 <http_set_cgi_handlers+0x4c>)
 80096dc:	480d      	ldr	r0, [pc, #52]	; (8009714 <http_set_cgi_handlers+0x50>)
 80096de:	f00b fa5d 	bl	8014b9c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	dc06      	bgt.n	80096f6 <http_set_cgi_handlers+0x32>
 80096e8:	4b08      	ldr	r3, [pc, #32]	; (800970c <http_set_cgi_handlers+0x48>)
 80096ea:	f640 2243 	movw	r2, #2627	; 0xa43
 80096ee:	490a      	ldr	r1, [pc, #40]	; (8009718 <http_set_cgi_handlers+0x54>)
 80096f0:	4808      	ldr	r0, [pc, #32]	; (8009714 <http_set_cgi_handlers+0x50>)
 80096f2:	f00b fa53 	bl	8014b9c <iprintf>

  g_pCGIs = cgis;
 80096f6:	4a09      	ldr	r2, [pc, #36]	; (800971c <http_set_cgi_handlers+0x58>)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 80096fc:	4a08      	ldr	r2, [pc, #32]	; (8009720 <http_set_cgi_handlers+0x5c>)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6013      	str	r3, [r2, #0]
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	08015e2c 	.word	0x08015e2c
 8009710:	08016088 	.word	0x08016088
 8009714:	08015e74 	.word	0x08015e74
 8009718:	08016098 	.word	0x08016098
 800971c:	2000842c 	.word	0x2000842c
 8009720:	2000841c 	.word	0x2000841c

08009724 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	88db      	ldrh	r3, [r3, #6]
 8009730:	3301      	adds	r3, #1
 8009732:	b29a      	uxth	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	88db      	ldrh	r3, [r3, #6]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d105      	bne.n	800974c <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	88db      	ldrh	r3, [r3, #6]
 8009744:	3301      	adds	r3, #1
 8009746:	b29a      	uxth	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	88db      	ldrh	r3, [r3, #6]
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
	...

0800975c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct tcp_pcb *tpcb)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	885b      	ldrh	r3, [r3, #2]
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	8811      	ldrh	r1, [r2, #0]
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	8852      	ldrh	r2, [r2, #2]
 800977c:	1a8a      	subs	r2, r1, r2
 800977e:	b292      	uxth	r2, r2
 8009780:	4293      	cmp	r3, r2
 8009782:	bfa8      	it	ge
 8009784:	4613      	movge	r3, r2
 8009786:	817b      	strh	r3, [r7, #10]
  u16_t send_len = tcp_sndbuf(tpcb);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800978e:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <mqtt_output_send+0x46>
 8009796:	4b3a      	ldr	r3, [pc, #232]	; (8009880 <mqtt_output_send+0x124>)
 8009798:	22d3      	movs	r2, #211	; 0xd3
 800979a:	493a      	ldr	r1, [pc, #232]	; (8009884 <mqtt_output_send+0x128>)
 800979c:	483a      	ldr	r0, [pc, #232]	; (8009888 <mqtt_output_send+0x12c>)
 800979e:	f00b f9fd 	bl	8014b9c <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80097a2:	89bb      	ldrh	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d066      	beq.n	8009876 <mqtt_output_send+0x11a>
 80097a8:	897b      	ldrh	r3, [r7, #10]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d063      	beq.n	8009876 <mqtt_output_send+0x11a>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                send_len, ringbuf_lin_len, ((rb)->get & MQTT_RINGBUF_IDX_MASK), ((rb)->put & MQTT_RINGBUF_IDX_MASK)));

  if (send_len > ringbuf_lin_len) {
 80097ae:	89ba      	ldrh	r2, [r7, #12]
 80097b0:	897b      	ldrh	r3, [r7, #10]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d90e      	bls.n	80097d4 <mqtt_output_send+0x78>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 80097b6:	897b      	ldrh	r3, [r7, #10]
 80097b8:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	881a      	ldrh	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	885b      	ldrh	r3, [r3, #2]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	897a      	ldrh	r2, [r7, #10]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	bf34      	ite	cc
 80097cc:	2301      	movcc	r3, #1
 80097ce:	2300      	movcs	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	73bb      	strb	r3, [r7, #14]
  }
  err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	885b      	ldrh	r3, [r3, #2]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	4413      	add	r3, r2
 80097de:	1d19      	adds	r1, r3, #4
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <mqtt_output_send+0x8e>
 80097e6:	2303      	movs	r3, #3
 80097e8:	e000      	b.n	80097ec <mqtt_output_send+0x90>
 80097ea:	2301      	movs	r3, #1
 80097ec:	89ba      	ldrh	r2, [r7, #12]
 80097ee:	6838      	ldr	r0, [r7, #0]
 80097f0:	f007 f99a 	bl	8010b28 <tcp_write>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 80097f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d12b      	bne.n	8009858 <mqtt_output_send+0xfc>
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d028      	beq.n	8009858 <mqtt_output_send+0xfc>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	885a      	ldrh	r2, [r3, #2]
 800980a:	89bb      	ldrh	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	b29a      	uxth	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	805a      	strh	r2, [r3, #2]
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	885b      	ldrh	r3, [r3, #2]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	8811      	ldrh	r1, [r2, #0]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	8852      	ldrh	r2, [r2, #2]
 8009826:	1a8a      	subs	r2, r1, r2
 8009828:	b292      	uxth	r2, r2
 800982a:	4293      	cmp	r3, r2
 800982c:	bfa8      	it	ge
 800982e:	4613      	movge	r3, r2
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009836:	4293      	cmp	r3, r2
 8009838:	bfa8      	it	ge
 800983a:	4613      	movge	r3, r2
 800983c:	81bb      	strh	r3, [r7, #12]
    err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	885b      	ldrh	r3, [r3, #2]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	4413      	add	r3, r2
 8009848:	1d19      	adds	r1, r3, #4
 800984a:	89ba      	ldrh	r2, [r7, #12]
 800984c:	2301      	movs	r3, #1
 800984e:	6838      	ldr	r0, [r7, #0]
 8009850:	f007 f96a 	bl	8010b28 <tcp_write>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8009858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10b      	bne.n	8009878 <mqtt_output_send+0x11c>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	885a      	ldrh	r2, [r3, #2]
 8009864:	89bb      	ldrh	r3, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	805a      	strh	r2, [r3, #2]
    /* Flush */
    tcp_output(tpcb);
 800986e:	6838      	ldr	r0, [r7, #0]
 8009870:	f007 fe0c 	bl	801148c <tcp_output>
 8009874:	e000      	b.n	8009878 <mqtt_output_send+0x11c>
    return;
 8009876:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	080160b4 	.word	0x080160b4
 8009884:	080160ec 	.word	0x080160ec
 8009888:	0801610c 	.word	0x0801610c

0800988c <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	607a      	str	r2, [r7, #4]
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	460b      	mov	r3, r1
 800989a:	817b      	strh	r3, [r7, #10]
  struct mqtt_request_t *r = NULL;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <mqtt_create_request+0x28>
 80098a6:	4b19      	ldr	r3, [pc, #100]	; (800990c <mqtt_create_request+0x80>)
 80098a8:	f240 1205 	movw	r2, #261	; 0x105
 80098ac:	4918      	ldr	r1, [pc, #96]	; (8009910 <mqtt_create_request+0x84>)
 80098ae:	4819      	ldr	r0, [pc, #100]	; (8009914 <mqtt_create_request+0x88>)
 80098b0:	f00b f974 	bl	8014b9c <iprintf>
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 80098b4:	2300      	movs	r3, #0
 80098b6:	74fb      	strb	r3, [r7, #19]
 80098b8:	e01f      	b.n	80098fa <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 80098ba:	7cfb      	ldrb	r3, [r7, #19]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	7cfb      	ldrb	r3, [r7, #19]
 80098c6:	011b      	lsls	r3, r3, #4
 80098c8:	68f9      	ldr	r1, [r7, #12]
 80098ca:	440b      	add	r3, r1
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d111      	bne.n	80098f4 <mqtt_create_request+0x68>
      r = &r_objs[n];
 80098d0:	7cfb      	ldrb	r3, [r7, #19]
 80098d2:	011b      	lsls	r3, r3, #4
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	897a      	ldrh	r2, [r7, #10]
 80098f0:	819a      	strh	r2, [r3, #12]
      break;
 80098f2:	e005      	b.n	8009900 <mqtt_create_request+0x74>
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 80098f4:	7cfb      	ldrb	r3, [r7, #19]
 80098f6:	3301      	adds	r3, #1
 80098f8:	74fb      	strb	r3, [r7, #19]
 80098fa:	7cfb      	ldrb	r3, [r7, #19]
 80098fc:	2b03      	cmp	r3, #3
 80098fe:	d9dc      	bls.n	80098ba <mqtt_create_request+0x2e>
    }
  }
  return r;
 8009900:	697b      	ldr	r3, [r7, #20]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	080160b4 	.word	0x080160b4
 8009910:	08016134 	.word	0x08016134
 8009914:	0801610c 	.word	0x0801610c

08009918 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8009926:	2300      	movs	r3, #0
 8009928:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d106      	bne.n	800993e <mqtt_append_request+0x26>
 8009930:	4b1b      	ldr	r3, [pc, #108]	; (80099a0 <mqtt_append_request+0x88>)
 8009932:	f240 1221 	movw	r2, #289	; 0x121
 8009936:	491b      	ldr	r1, [pc, #108]	; (80099a4 <mqtt_append_request+0x8c>)
 8009938:	481b      	ldr	r0, [pc, #108]	; (80099a8 <mqtt_append_request+0x90>)
 800993a:	f00b f92f 	bl	8014b9c <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	e00a      	b.n	800995c <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	89da      	ldrh	r2, [r3, #14]
 800994a:	8a7b      	ldrh	r3, [r7, #18]
 800994c:	4413      	add	r3, r2
 800994e:	b29b      	uxth	r3, r3
 8009950:	827b      	strh	r3, [r7, #18]
    head = iter;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f1      	bne.n	8009946 <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8009962:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009966:	2b1e      	cmp	r3, #30
 8009968:	dd06      	ble.n	8009978 <mqtt_append_request+0x60>
 800996a:	4b0d      	ldr	r3, [pc, #52]	; (80099a0 <mqtt_append_request+0x88>)
 800996c:	f240 1229 	movw	r2, #297	; 0x129
 8009970:	490e      	ldr	r1, [pc, #56]	; (80099ac <mqtt_append_request+0x94>)
 8009972:	480d      	ldr	r0, [pc, #52]	; (80099a8 <mqtt_append_request+0x90>)
 8009974:	f00b f912 	bl	8014b9c <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8009978:	8a7b      	ldrh	r3, [r7, #18]
 800997a:	f1c3 031e 	rsb	r3, r3, #30
 800997e:	b29a      	uxth	r2, r3
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d103      	bne.n	8009992 <mqtt_append_request+0x7a>
    *tail = r;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8009990:	e002      	b.n	8009998 <mqtt_append_request+0x80>
    head->next = r;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	601a      	str	r2, [r3, #0]
}
 8009998:	bf00      	nop
 800999a:	3718      	adds	r7, #24
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	080160b4 	.word	0x080160b4
 80099a4:	08016158 	.word	0x08016158
 80099a8:	0801610c 	.word	0x0801610c
 80099ac:	0801617c 	.word	0x0801617c

080099b0 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <mqtt_delete_request+0x14>
    r->next = r;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	601a      	str	r2, [r3, #0]
  }
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr
	...

080099d0 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 80099dc:	2300      	movs	r3, #0
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	2300      	movs	r3, #0
 80099e2:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d106      	bne.n	80099f8 <mqtt_take_request+0x28>
 80099ea:	4b1f      	ldr	r3, [pc, #124]	; (8009a68 <mqtt_take_request+0x98>)
 80099ec:	f240 1249 	movw	r2, #329	; 0x149
 80099f0:	491e      	ldr	r1, [pc, #120]	; (8009a6c <mqtt_take_request+0x9c>)
 80099f2:	481f      	ldr	r0, [pc, #124]	; (8009a70 <mqtt_take_request+0xa0>)
 80099f4:	f00b f8d2 	bl	8014b9c <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	e009      	b.n	8009a14 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	899b      	ldrh	r3, [r3, #12]
 8009a04:	887a      	ldrh	r2, [r7, #2]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d008      	beq.n	8009a1c <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f2      	bne.n	8009a00 <mqtt_take_request+0x30>
 8009a1a:	e000      	b.n	8009a1e <mqtt_take_request+0x4e>
      break;
 8009a1c:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01c      	beq.n	8009a5e <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <mqtt_take_request+0x64>
      *tail= iter->next;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	e003      	b.n	8009a3c <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d009      	beq.n	8009a58 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	89d9      	ldrh	r1, [r3, #14]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	89da      	ldrh	r2, [r3, #14]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	440a      	add	r2, r1
 8009a54:	b292      	uxth	r2, r2
 8009a56:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	080160b4 	.word	0x080160b4
 8009a6c:	080161b4 	.word	0x080161b4
 8009a70:	0801610c 	.word	0x0801610c

08009a74 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <mqtt_request_time_elapsed+0x20>
 8009a86:	4b21      	ldr	r3, [pc, #132]	; (8009b0c <mqtt_request_time_elapsed+0x98>)
 8009a88:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009a8c:	4920      	ldr	r1, [pc, #128]	; (8009b10 <mqtt_request_time_elapsed+0x9c>)
 8009a8e:	4821      	ldr	r0, [pc, #132]	; (8009b14 <mqtt_request_time_elapsed+0xa0>)
 8009a90:	f00b f884 	bl	8014b9c <iprintf>
  r = *tail;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8009a9a:	e02c      	b.n	8009af6 <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	89db      	ldrh	r3, [r3, #14]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d31c      	bcc.n	8009ae2 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	89db      	ldrh	r3, [r3, #14]
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	78fa      	ldrb	r2, [r7, #3]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d007      	beq.n	8009ad4 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	6892      	ldr	r2, [r2, #8]
 8009acc:	f06f 0102 	mvn.w	r1, #2
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f7ff ff6b 	bl	80099b0 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t * const volatile *)tail;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	e009      	b.n	8009af6 <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	89da      	ldrh	r2, [r3, #14]
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	81da      	strh	r2, [r3, #14]
      t = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <mqtt_request_time_elapsed+0x8e>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1cc      	bne.n	8009a9c <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8009b02:	bf00      	nop
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	080160b4 	.word	0x080160b4
 8009b10:	080161d4 	.word	0x080161d4
 8009b14:	0801610c 	.word	0x0801610c

08009b18 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <mqtt_clear_requests+0x1c>
 8009b26:	4b0e      	ldr	r3, [pc, #56]	; (8009b60 <mqtt_clear_requests+0x48>)
 8009b28:	f240 1289 	movw	r2, #393	; 0x189
 8009b2c:	490d      	ldr	r1, [pc, #52]	; (8009b64 <mqtt_clear_requests+0x4c>)
 8009b2e:	480e      	ldr	r0, [pc, #56]	; (8009b68 <mqtt_clear_requests+0x50>)
 8009b30:	f00b f834 	bl	8014b9c <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e007      	b.n	8009b4c <mqtt_clear_requests+0x34>
    next = iter->next;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff ff34 	bl	80099b0 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1f4      	bne.n	8009b3c <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	601a      	str	r2, [r3, #0]
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	080160b4 	.word	0x080160b4
 8009b64:	080161fc 	.word	0x080161fc
 8009b68:	0801610c 	.word	0x0801610c

08009b6c <mqtt_init_requests>:
 * Initialize all request items
 * @param r_objs Pointer to request objects
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <mqtt_init_requests+0x1c>
 8009b7a:	4b0f      	ldr	r3, [pc, #60]	; (8009bb8 <mqtt_init_requests+0x4c>)
 8009b7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009b80:	490e      	ldr	r1, [pc, #56]	; (8009bbc <mqtt_init_requests+0x50>)
 8009b82:	480f      	ldr	r0, [pc, #60]	; (8009bc0 <mqtt_init_requests+0x54>)
 8009b84:	f00b f80a 	bl	8014b9c <iprintf>
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]
 8009b8c:	e00b      	b.n	8009ba6 <mqtt_init_requests+0x3a>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	011a      	lsls	r2, r3, #4
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	011b      	lsls	r3, r3, #4
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	440b      	add	r3, r1
 8009b9a:	6879      	ldr	r1, [r7, #4]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	601a      	str	r2, [r3, #0]
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	73fb      	strb	r3, [r7, #15]
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d9f0      	bls.n	8009b8e <mqtt_init_requests+0x22>
  }
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	080160b4 	.word	0x080160b4
 8009bbc:	08016220 	.word	0x08016220
 8009bc0:	0801610c 	.word	0x0801610c

08009bc4 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	1c5a      	adds	r2, r3, #1
 8009bd6:	b291      	uxth	r1, r2
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	8011      	strh	r1, [r2, #0]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	4413      	add	r3, r2
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	711a      	strb	r2, [r3, #4]
}
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bc80      	pop	{r7}
 8009bee:	4770      	bx	lr

08009bf0 <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8009bfc:	887b      	ldrh	r3, [r7, #2]
 8009bfe:	0a1b      	lsrs	r3, r3, #8
 8009c00:	b299      	uxth	r1, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	b290      	uxth	r0, r2
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	8010      	strh	r0, [r2, #0]
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	b2c9      	uxtb	r1, r1
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	4413      	add	r3, r2
 8009c16:	460a      	mov	r2, r1
 8009c18:	711a      	strb	r2, [r3, #4]
  mqtt_ringbuf_put(rb, value & 0xff);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	1c5a      	adds	r2, r3, #1
 8009c20:	b291      	uxth	r1, r2
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	8011      	strh	r1, [r2, #0]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	887a      	ldrh	r2, [r7, #2]
 8009c2a:	b2d1      	uxtb	r1, r2
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	4413      	add	r3, r2
 8009c30:	460a      	mov	r2, r1
 8009c32:	711a      	strb	r2, [r3, #4]
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr

08009c3e <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b087      	sub	sp, #28
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	82fb      	strh	r3, [r7, #22]
 8009c50:	e011      	b.n	8009c76 <mqtt_output_append_buf+0x38>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8009c52:	8afb      	ldrh	r3, [r7, #22]
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	441a      	add	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	1c59      	adds	r1, r3, #1
 8009c5e:	b288      	uxth	r0, r1
 8009c60:	68f9      	ldr	r1, [r7, #12]
 8009c62:	8008      	strh	r0, [r1, #0]
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	7811      	ldrb	r1, [r2, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	460a      	mov	r2, r1
 8009c6e:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 8009c70:	8afb      	ldrh	r3, [r7, #22]
 8009c72:	3301      	adds	r3, #1
 8009c74:	82fb      	strh	r3, [r7, #22]
 8009c76:	8afa      	ldrh	r2, [r7, #22]
 8009c78:	88fb      	ldrh	r3, [r7, #6]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d3e9      	bcc.n	8009c52 <mqtt_output_append_buf+0x14>
  }
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	371c      	adds	r7, #28
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bc80      	pop	{r7}
 8009c88:	4770      	bx	lr

08009c8a <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b087      	sub	sp, #28
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	4613      	mov	r3, r2
 8009c96:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	0a1b      	lsrs	r3, r3, #8
 8009c9c:	b299      	uxth	r1, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	1c5a      	adds	r2, r3, #1
 8009ca4:	b290      	uxth	r0, r2
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	8010      	strh	r0, [r2, #0]
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	b2c9      	uxtb	r1, r1
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	460a      	mov	r2, r1
 8009cb4:	711a      	strb	r2, [r3, #4]
  mqtt_ringbuf_put(rb, length & 0xff);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	b291      	uxth	r1, r2
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	8011      	strh	r1, [r2, #0]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	88fa      	ldrh	r2, [r7, #6]
 8009cc6:	b2d1      	uxtb	r1, r2
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	4413      	add	r3, r2
 8009ccc:	460a      	mov	r2, r1
 8009cce:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	82fb      	strh	r3, [r7, #22]
 8009cd4:	e011      	b.n	8009cfa <mqtt_output_append_string+0x70>
    mqtt_ringbuf_put(rb, str[n]);
 8009cd6:	8afb      	ldrh	r3, [r7, #22]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	441a      	add	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	1c59      	adds	r1, r3, #1
 8009ce2:	b288      	uxth	r0, r1
 8009ce4:	68f9      	ldr	r1, [r7, #12]
 8009ce6:	8008      	strh	r0, [r1, #0]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	7811      	ldrb	r1, [r2, #0]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	460a      	mov	r2, r1
 8009cf2:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 8009cf4:	8afb      	ldrh	r3, [r7, #22]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	82fb      	strh	r3, [r7, #22]
 8009cfa:	8afa      	ldrh	r2, [r7, #22]
 8009cfc:	88fb      	ldrh	r3, [r7, #6]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d3e9      	bcc.n	8009cd6 <mqtt_output_append_string+0x4c>
  }
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	371c      	adds	r7, #28
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr

08009d0e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
                 u8_t qos, u8_t retain, u16_t r_length)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	4608      	mov	r0, r1
 8009d18:	4611      	mov	r1, r2
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	70fb      	strb	r3, [r7, #3]
 8009d20:	460b      	mov	r3, r1
 8009d22:	70bb      	strb	r3, [r7, #2]
 8009d24:	4613      	mov	r3, r2
 8009d26:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	011b      	lsls	r3, r3, #4
 8009d2c:	b25a      	sxtb	r2, r3
 8009d2e:	78bb      	ldrb	r3, [r7, #2]
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	b25b      	sxtb	r3, r3
 8009d34:	f003 0308 	and.w	r3, r3, #8
 8009d38:	b25b      	sxtb	r3, r3
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	b25a      	sxtb	r2, r3
 8009d3e:	787b      	ldrb	r3, [r7, #1]
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	b25b      	sxtb	r3, r3
 8009d44:	f003 0306 	and.w	r3, r3, #6
 8009d48:	b25b      	sxtb	r3, r3
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	b25a      	sxtb	r2, r3
 8009d4e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	b25b      	sxtb	r3, r3
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	b25b      	sxtb	r3, r3
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff ff2f 	bl	8009bc4 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8009d66:	8abb      	ldrh	r3, [r7, #20]
 8009d68:	b25b      	sxtb	r3, r3
 8009d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d6e:	b25b      	sxtb	r3, r3
 8009d70:	8aba      	ldrh	r2, [r7, #20]
 8009d72:	2a7f      	cmp	r2, #127	; 0x7f
 8009d74:	d902      	bls.n	8009d7c <mqtt_output_append_fixed_header+0x6e>
 8009d76:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8009d7a:	e000      	b.n	8009d7e <mqtt_output_append_fixed_header+0x70>
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	b25b      	sxtb	r3, r3
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff ff1c 	bl	8009bc4 <mqtt_output_append_u8>
    r_length >>= 7;
 8009d8c:	8abb      	ldrh	r3, [r7, #20]
 8009d8e:	09db      	lsrs	r3, r3, #7
 8009d90:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8009d92:	8abb      	ldrh	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e6      	bne.n	8009d66 <mqtt_output_append_fixed_header+0x58>
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	460b      	mov	r3, r1
 8009dae:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8009db0:	887b      	ldrh	r3, [r7, #2]
 8009db2:	3301      	adds	r3, #1
 8009db4:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d106      	bne.n	8009dca <mqtt_output_check_space+0x26>
 8009dbc:	4b10      	ldr	r3, [pc, #64]	; (8009e00 <mqtt_output_check_space+0x5c>)
 8009dbe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009dc2:	4910      	ldr	r1, [pc, #64]	; (8009e04 <mqtt_output_check_space+0x60>)
 8009dc4:	4810      	ldr	r0, [pc, #64]	; (8009e08 <mqtt_output_check_space+0x64>)
 8009dc6:	f00a fee9 	bl	8014b9c <iprintf>

 /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8009dca:	89fb      	ldrh	r3, [r7, #14]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8009dd0:	887b      	ldrh	r3, [r7, #2]
 8009dd2:	09db      	lsrs	r3, r3, #7
 8009dd4:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8009dd6:	887b      	ldrh	r3, [r7, #2]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f6      	bne.n	8009dca <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8009ddc:	89fa      	ldrh	r2, [r7, #14]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	8819      	ldrh	r1, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	885b      	ldrh	r3, [r3, #2]
 8009de6:	1acb      	subs	r3, r1, r3
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009dee:	429a      	cmp	r2, r3
 8009df0:	bfd4      	ite	le
 8009df2:	2301      	movle	r3, #1
 8009df4:	2300      	movgt	r3, #0
 8009df6:	b2db      	uxtb	r3, r3
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	080160b4 	.word	0x080160b4
 8009e04:	08016244 	.word	0x08016244
 8009e08:	0801610c 	.word	0x0801610c

08009e0c <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <mqtt_close+0x20>
 8009e1e:	4b27      	ldr	r3, [pc, #156]	; (8009ebc <mqtt_close+0xb0>)
 8009e20:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8009e24:	4926      	ldr	r1, [pc, #152]	; (8009ec0 <mqtt_close+0xb4>)
 8009e26:	4827      	ldr	r0, [pc, #156]	; (8009ec4 <mqtt_close+0xb8>)
 8009e28:	f00a feb8 	bl	8014b9c <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d024      	beq.n	8009e7e <mqtt_close+0x72>
    err_t res;
    tcp_recv(client->conn, NULL);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2100      	movs	r1, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f004 f84a 	bl	800ded4 <tcp_recv>
    tcp_err(client->conn,  NULL);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f004 f886 	bl	800df58 <tcp_err>
    tcp_sent(client->conn, NULL);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	2100      	movs	r1, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	f004 f860 	bl	800df18 <tcp_sent>
    res = tcp_close(client->conn);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f002 fecb 	bl	800cbf8 <tcp_close>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8009e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d004      	beq.n	8009e78 <mqtt_close+0x6c>
      tcp_abort(client->conn);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f002 ff8a 	bl	800cd8c <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3318      	adds	r3, #24
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff fe48 	bl	8009b18 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	480f      	ldr	r0, [pc, #60]	; (8009ec8 <mqtt_close+0xbc>)
 8009e8c:	f008 f8cc 	bl	8012028 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7a9b      	ldrb	r3, [r3, #10]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00d      	beq.n	8009eb4 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d006      	beq.n	8009eb4 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6911      	ldr	r1, [r2, #16]
 8009eae:	887a      	ldrh	r2, [r7, #2]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
    }
  }
}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	080160b4 	.word	0x080160b4
 8009ec0:	08016268 	.word	0x08016268
 8009ec4:	0801610c 	.word	0x0801610c
 8009ec8:	08009ecd 	.word	0x08009ecd

08009ecc <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d106      	bne.n	8009ef0 <mqtt_cyclic_timer+0x24>
 8009ee2:	4b42      	ldr	r3, [pc, #264]	; (8009fec <mqtt_cyclic_timer+0x120>)
 8009ee4:	f240 2225 	movw	r2, #549	; 0x225
 8009ee8:	4941      	ldr	r1, [pc, #260]	; (8009ff0 <mqtt_cyclic_timer+0x124>)
 8009eea:	4842      	ldr	r0, [pc, #264]	; (8009ff4 <mqtt_cyclic_timer+0x128>)
 8009eec:	f00a fe56 	bl	8014b9c <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	7a9b      	ldrb	r3, [r3, #10]
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d115      	bne.n	8009f24 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	3301      	adds	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	2b63      	cmp	r3, #99	; 0x63
 8009f12:	dd5e      	ble.n	8009fd2 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8009f14:	f240 1101 	movw	r1, #257	; 0x101
 8009f18:	68b8      	ldr	r0, [r7, #8]
 8009f1a:	f7ff ff77 	bl	8009e0c <mqtt_close>
      restart_timer = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	73fb      	strb	r3, [r7, #15]
 8009f22:	e056      	b.n	8009fd2 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	7a9b      	ldrb	r3, [r3, #10]
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d150      	bne.n	8009fce <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	3318      	adds	r3, #24
 8009f30:	2105      	movs	r1, #5
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7ff fd9e 	bl	8009a74 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	885b      	ldrh	r3, [r3, #2]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d048      	beq.n	8009fd2 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	889b      	ldrh	r3, [r3, #4]
 8009f44:	3301      	adds	r3, #1
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive/2)) {
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	889b      	ldrh	r3, [r3, #4]
 8009f50:	461a      	mov	r2, r3
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	885b      	ldrh	r3, [r3, #2]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	885b      	ldrh	r3, [r3, #2]
 8009f62:	085b      	lsrs	r3, r3, #1
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	440b      	add	r3, r1
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	dd06      	ble.n	8009f7a <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8009f6c:	f240 1101 	movw	r1, #257	; 0x101
 8009f70:	68b8      	ldr	r0, [r7, #8]
 8009f72:	f7ff ff4b 	bl	8009e0c <mqtt_close>
        restart_timer = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	8852      	ldrh	r2, [r2, #2]
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	db18      	blt.n	8009fc0 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	33ec      	adds	r3, #236	; 0xec
 8009f92:	2100      	movs	r1, #0
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff ff05 	bl	8009da4 <mqtt_output_check_space>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d018      	beq.n	8009fd2 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	9301      	str	r3, [sp, #4]
 8009faa:	2300      	movs	r3, #0
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	210c      	movs	r1, #12
 8009fb4:	f7ff feab 	bl	8009d0e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	801a      	strh	r2, [r3, #0]
 8009fbe:	e008      	b.n	8009fd2 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	801a      	strh	r2, [r3, #0]
 8009fcc:	e001      	b.n	8009fd2 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	4907      	ldr	r1, [pc, #28]	; (8009ff8 <mqtt_cyclic_timer+0x12c>)
 8009fdc:	f241 3088 	movw	r0, #5000	; 0x1388
 8009fe0:	f007 ff7e 	bl	8011ee0 <sys_timeout>
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	080160b4 	.word	0x080160b4
 8009ff0:	08016284 	.word	0x08016284
 8009ff4:	0801610c 	.word	0x0801610c
 8009ff8:	08009ecd 	.word	0x08009ecd

08009ffc <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	4608      	mov	r0, r1
 800a006:	4611      	mov	r1, r2
 800a008:	461a      	mov	r2, r3
 800a00a:	4603      	mov	r3, r0
 800a00c:	70fb      	strb	r3, [r7, #3]
 800a00e:	460b      	mov	r3, r1
 800a010:	803b      	strh	r3, [r7, #0]
 800a012:	4613      	mov	r3, r2
 800a014:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	33ec      	adds	r3, #236	; 0xec
 800a01e:	2102      	movs	r1, #2
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff febf 	bl	8009da4 <mqtt_output_check_space>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d01c      	beq.n	800a066 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a032:	78bb      	ldrb	r3, [r7, #2]
 800a034:	78f9      	ldrb	r1, [r7, #3]
 800a036:	2202      	movs	r2, #2
 800a038:	9201      	str	r2, [sp, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	9200      	str	r2, [sp, #0]
 800a03e:	2200      	movs	r2, #0
 800a040:	f7ff fe65 	bl	8009d0e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	33ec      	adds	r3, #236	; 0xec
 800a048:	883a      	ldrh	r2, [r7, #0]
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7ff fdcf 	bl	8009bf0 <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	4619      	mov	r1, r3
 800a05e:	4610      	mov	r0, r2
 800a060:	f7ff fb7c 	bl	800975c <mqtt_output_send>
 800a064:	e001      	b.n	800a06a <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                  mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800a066:	23ff      	movs	r3, #255	; 0xff
 800a068:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800a06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00c      	beq.n	800a0a4 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	6890      	ldr	r0, [r2, #8]
 800a092:	78fa      	ldrb	r2, [r7, #3]
 800a094:	2a02      	cmp	r2, #2
 800a096:	d801      	bhi.n	800a09c <mqtt_incomming_suback+0x26>
 800a098:	2200      	movs	r2, #0
 800a09a:	e001      	b.n	800a0a0 <mqtt_incomming_suback+0x2a>
 800a09c:	f06f 020c 	mvn.w	r2, #12
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4798      	blx	r3
  }
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
  mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800a0ac:	b590      	push	{r4, r7, lr}
 800a0ae:	b08d      	sub	sp, #52	; 0x34
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	607b      	str	r3, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	72fb      	strb	r3, [r7, #11]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a0c8:	7afb      	ldrb	r3, [r7, #11]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  u16_t pkt_id = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	843b      	strh	r3, [r7, #32]

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800a0de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d11f      	bne.n	800a126 <mqtt_message_received+0x7a>
    if (client->conn_state == MQTT_CONNECTING) {
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	7a9b      	ldrb	r3, [r3, #10]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	f040 8119 	bne.w	800a322 <mqtt_message_received+0x276>
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800a0f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f040 8111 	bne.w	800a322 <mqtt_message_received+0x276>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2203      	movs	r2, #3
 800a10a:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	695b      	ldr	r3, [r3, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 8106 	beq.w	800a322 <mqtt_message_received+0x276>
          client->connect_cb(client, client->connect_arg, res);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	6911      	ldr	r1, [r2, #16]
 800a11e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	4798      	blx	r3
 800a124:	e0fd      	b.n	800a322 <mqtt_message_received+0x276>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800a126:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a12a:	2b0d      	cmp	r3, #13
 800a12c:	f000 80f9 	beq.w	800a322 <mqtt_message_received+0x276>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800a130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a134:	2b03      	cmp	r3, #3
 800a136:	f040 8096 	bne.w	800a266 <mqtt_message_received+0x1ba>
    u16_t payload_offset = 0;
 800a13a:	2300      	movs	r3, #0
 800a13c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    u16_t payload_length = length;
 800a13e:	893b      	ldrh	r3, [r7, #8]
 800a140:	857b      	strh	r3, [r7, #42]	; 0x2a
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a148:	105b      	asrs	r3, r3, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f003 0303 	and.w	r3, r3, #3
 800a150:	76fb      	strb	r3, [r7, #27]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a156:	2b80      	cmp	r3, #128	; 0x80
 800a158:	d85a      	bhi.n	800a210 <mqtt_message_received+0x164>
      /* Should have topic and pkt id*/
      uint8_t *topic;
      uint16_t after_topic;
      u8_t bkp;
      u16_t topic_len = var_hdr_payload[0];
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	833b      	strh	r3, [r7, #24]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800a160:	8b3b      	ldrh	r3, [r7, #24]
 800a162:	021b      	lsls	r3, r3, #8
 800a164:	b29a      	uxth	r2, r3
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	3301      	adds	r3, #1
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	4413      	add	r3, r2
 800a170:	833b      	strh	r3, [r7, #24]

      topic = var_hdr_payload + 2;
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	3302      	adds	r3, #2
 800a176:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800a178:	8b3b      	ldrh	r3, [r7, #24]
 800a17a:	3302      	adds	r3, #2
 800a17c:	853b      	strh	r3, [r7, #40]	; 0x28
      /* Check length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos? 2 : 1)) > length) {
 800a17e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a180:	7efa      	ldrb	r2, [r7, #27]
 800a182:	2a00      	cmp	r2, #0
 800a184:	d001      	beq.n	800a18a <mqtt_message_received+0xde>
 800a186:	2202      	movs	r2, #2
 800a188:	e000      	b.n	800a18c <mqtt_message_received+0xe0>
 800a18a:	2201      	movs	r2, #1
 800a18c:	441a      	add	r2, r3
 800a18e:	893b      	ldrh	r3, [r7, #8]
 800a190:	429a      	cmp	r2, r3
 800a192:	f300 80c8 	bgt.w	800a326 <mqtt_message_received+0x27a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800a196:	7efb      	ldrb	r3, [r7, #27]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d014      	beq.n	800a1c6 <mqtt_message_received+0x11a>
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800a19c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a0:	4413      	add	r3, r2
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1b0:	440b      	add	r3, r1
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	4413      	add	r3, r2
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800a1be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	853b      	strh	r3, [r7, #40]	; 0x28
 800a1c4:	e002      	b.n	800a1cc <mqtt_message_received+0x120>
      } else {
        client->inpub_pkt_id = 0;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800a1cc:	8b3b      	ldrh	r3, [r7, #24]
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	4413      	add	r3, r2
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800a1d6:	8b3b      	ldrh	r3, [r7, #24]
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	4413      	add	r3, r2
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800a1e0:	893a      	ldrh	r2, [r7, #8]
 800a1e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	857b      	strh	r3, [r7, #42]	; 0x2a
      payload_offset = after_topic;
 800a1e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1ea:	85bb      	strh	r3, [r7, #44]	; 0x2c

      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %d\n",
                                    qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d008      	beq.n	800a206 <mqtt_message_received+0x15a>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a1fc:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	440a      	add	r2, r1
 800a202:	6979      	ldr	r1, [r7, #20]
 800a204:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800a206:	8b3b      	ldrh	r3, [r7, #24]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	4413      	add	r3, r2
 800a20c:	7cfa      	ldrb	r2, [r7, #19]
 800a20e:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800a210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a212:	2b00      	cmp	r3, #0
 800a214:	d103      	bne.n	800a21e <mqtt_message_received+0x172>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f040 8082 	bne.w	800a322 <mqtt_message_received+0x276>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a22a:	18d1      	adds	r1, r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	bf0c      	ite	eq
 800a232:	2301      	moveq	r3, #1
 800a234:	2300      	movne	r3, #0
 800a236:	b2db      	uxtb	r3, r3
 800a238:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800a23a:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d16f      	bne.n	800a322 <mqtt_message_received+0x276>
 800a242:	7efb      	ldrb	r3, [r7, #27]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d06c      	beq.n	800a322 <mqtt_message_received+0x276>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800a248:	7efb      	ldrb	r3, [r7, #27]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <mqtt_message_received+0x1a6>
 800a24e:	2304      	movs	r3, #4
 800a250:	e000      	b.n	800a254 <mqtt_message_received+0x1a8>
 800a252:	2305      	movs	r3, #5
 800a254:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                      mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	891a      	ldrh	r2, [r3, #8]
 800a25a:	7cb9      	ldrb	r1, [r7, #18]
 800a25c:	2300      	movs	r3, #0
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff fecc 	bl	8009ffc <pub_ack_rec_rel_response>
 800a264:	e05d      	b.n	800a322 <mqtt_message_received+0x276>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800a266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	843b      	strh	r3, [r7, #32]
    pkt_id |= (u16_t)var_hdr_payload[1];
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	3301      	adds	r3, #1
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b29a      	uxth	r2, r3
 800a278:	8c3b      	ldrh	r3, [r7, #32]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	843b      	strh	r3, [r7, #32]
    if (pkt_id == 0) {
 800a27e:	8c3b      	ldrh	r3, [r7, #32]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d052      	beq.n	800a32a <mqtt_message_received+0x27e>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800a284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a288:	2b05      	cmp	r3, #5
 800a28a:	d106      	bne.n	800a29a <mqtt_message_received+0x1ee>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n",pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800a28c:	8c3a      	ldrh	r2, [r7, #32]
 800a28e:	2301      	movs	r3, #1
 800a290:	2106      	movs	r1, #6
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f7ff feb2 	bl	8009ffc <pub_ack_rec_rel_response>
 800a298:	e043      	b.n	800a322 <mqtt_message_received+0x276>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800a29a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a29e:	2b06      	cmp	r3, #6
 800a2a0:	d106      	bne.n	800a2b0 <mqtt_message_received+0x204>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n",pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800a2a2:	8c3a      	ldrh	r2, [r7, #32]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2107      	movs	r1, #7
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fea7 	bl	8009ffc <pub_ack_rec_rel_response>
 800a2ae:	e038      	b.n	800a322 <mqtt_message_received+0x276>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800a2b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2b4:	2b09      	cmp	r3, #9
 800a2b6:	d00b      	beq.n	800a2d0 <mqtt_message_received+0x224>
 800a2b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2bc:	2b0b      	cmp	r3, #11
 800a2be:	d007      	beq.n	800a2d0 <mqtt_message_received+0x224>
 800a2c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2c4:	2b07      	cmp	r3, #7
 800a2c6:	d003      	beq.n	800a2d0 <mqtt_message_received+0x224>
              pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800a2c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2cc:	2b04      	cmp	r3, #4
 800a2ce:	d12e      	bne.n	800a32e <mqtt_message_received+0x282>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	3318      	adds	r3, #24
 800a2d4:	8c3a      	ldrh	r2, [r7, #32]
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7ff fb79 	bl	80099d0 <mqtt_take_request>
 800a2de:	61f8      	str	r0, [r7, #28]
      if (r != NULL) {
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d01c      	beq.n	800a320 <mqtt_message_received+0x274>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800a2e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2ea:	2b09      	cmp	r3, #9
 800a2ec:	d10a      	bne.n	800a304 <mqtt_message_received+0x258>
          if (length < 3) {
 800a2ee:	893b      	ldrh	r3, [r7, #8]
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d91e      	bls.n	800a332 <mqtt_message_received+0x286>
            LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	69f8      	ldr	r0, [r7, #28]
 800a2fe:	f7ff feba 	bl	800a076 <mqtt_incomming_suback>
 800a302:	e00a      	b.n	800a31a <mqtt_message_received+0x26e>
          }
        } else if (r->cb != NULL) {
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d006      	beq.n	800a31a <mqtt_message_received+0x26e>
          r->cb(r->arg, ERR_OK);
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	69fa      	ldr	r2, [r7, #28]
 800a312:	6892      	ldr	r2, [r2, #8]
 800a314:	2100      	movs	r1, #0
 800a316:	4610      	mov	r0, r2
 800a318:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800a31a:	69f8      	ldr	r0, [r7, #28]
 800a31c:	f7ff fb48 	bl	80099b0 <mqtt_delete_request>
              pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800a320:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800a322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a324:	e008      	b.n	800a338 <mqtt_message_received+0x28c>
        goto out_disconnect;
 800a326:	bf00      	nop
 800a328:	e004      	b.n	800a334 <mqtt_message_received+0x288>
      goto out_disconnect;
 800a32a:	bf00      	nop
 800a32c:	e002      	b.n	800a334 <mqtt_message_received+0x288>
      goto out_disconnect;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <mqtt_message_received+0x288>
            goto out_disconnect;
 800a332:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800a334:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3734      	adds	r7, #52	; 0x34
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd90      	pop	{r4, r7, pc}

0800a340 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b088      	sub	sp, #32
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800a35a:	e0bc      	b.n	800a4d6 <mqtt_parse_incoming+0x196>
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d903      	bls.n	800a36a <mqtt_parse_incoming+0x2a>
 800a362:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800a366:	2b00      	cmp	r3, #0
 800a368:	da4d      	bge.n	800a406 <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800a36a:	7dfa      	ldrb	r2, [r7, #23]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a370:	429a      	cmp	r2, r3
 800a372:	d206      	bcs.n	800a382 <mqtt_parse_incoming+0x42>
        b = client->rx_buffer[fixed_hdr_idx];
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	4413      	add	r3, r2
 800a37a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a37e:	75bb      	strb	r3, [r7, #22]
 800a380:	e012      	b.n	800a3a8 <mqtt_parse_incoming+0x68>
      } else {
        b = pbuf_get_at(p, in_offset++);
 800a382:	8bfb      	ldrh	r3, [r7, #30]
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	83fa      	strh	r2, [r7, #30]
 800a388:	4619      	mov	r1, r3
 800a38a:	6838      	ldr	r0, [r7, #0]
 800a38c:	f002 fa36 	bl	800c7fc <pbuf_get_at>
 800a390:	4603      	mov	r3, r0
 800a392:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a398:	1c59      	adds	r1, r3, #1
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	6691      	str	r1, [r2, #104]	; 0x68
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	7dba      	ldrb	r2, [r7, #22]
 800a3a4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	f240 8090 	bls.w	800a4d6 <mqtt_parse_incoming+0x196>
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800a3b6:	7dbb      	ldrb	r3, [r7, #22]
 800a3b8:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	1e9a      	subs	r2, r3, #2
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800a3d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	db7e      	blt.n	800a4d6 <mqtt_parse_incoming+0x196>
          LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_parse_incoming: Remaining length after fixed header: %d\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10b      	bne.n	800a3f6 <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800a3de:	7df9      	ldrb	r1, [r7, #23]
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fe61 	bl	800a0ac <mqtt_message_received>
            client->msg_idx = 0;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	75fb      	strb	r3, [r7, #23]
 800a3f4:	e06f      	b.n	800a4d6 <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800a3f6:	7dfa      	ldrb	r2, [r7, #23]
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	441a      	add	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800a404:	e067      	b.n	800a4d6 <mqtt_parse_incoming+0x196>
        }
      }
    } else {
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	7dfa      	ldrb	r2, [r7, #23]
 800a410:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800a414:	fbb3 f1f2 	udiv	r1, r3, r2
 800a418:	fb02 f201 	mul.w	r2, r2, r1
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	b29a      	uxth	r2, r3
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	b29b      	uxth	r3, r3
 800a424:	4413      	add	r3, r2
 800a426:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	891a      	ldrh	r2, [r3, #8]
 800a42c:	8bfb      	ldrh	r3, [r7, #30]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	b29b      	uxth	r3, r3
 800a432:	461a      	mov	r2, r3
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	4293      	cmp	r3, r2
 800a438:	d905      	bls.n	800a446 <mqtt_parse_incoming+0x106>
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	891a      	ldrh	r2, [r3, #8]
 800a43e:	8bfb      	ldrh	r3, [r7, #30]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	b29b      	uxth	r3, r3
 800a444:	e001      	b.n	800a44a <mqtt_parse_incoming+0x10a>
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800a44c:	8a7b      	ldrh	r3, [r7, #18]
 800a44e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800a452:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800a454:	8aba      	ldrh	r2, [r7, #20]
 800a456:	8a3b      	ldrh	r3, [r7, #16]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d901      	bls.n	800a460 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800a45c:	8a3b      	ldrh	r3, [r7, #16]
 800a45e:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a466:	8a7b      	ldrh	r3, [r7, #18]
 800a468:	18d1      	adds	r1, r2, r3
 800a46a:	8bfb      	ldrh	r3, [r7, #30]
 800a46c:	8aba      	ldrh	r2, [r7, #20]
 800a46e:	6838      	ldr	r0, [r7, #0]
 800a470:	f002 f922 	bl	800c6b8 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a478:	8abb      	ldrh	r3, [r7, #20]
 800a47a:	441a      	add	r2, r3
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800a480:	8bfa      	ldrh	r2, [r7, #30]
 800a482:	8abb      	ldrh	r3, [r7, #20]
 800a484:	4413      	add	r3, r2
 800a486:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800a488:	8abb      	ldrh	r3, [r7, #20]
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_parse_incoming: msg_idx: %d, cpy_len: %d, remaining %d\n", client->msg_idx, cpy_len, msg_rem_len));
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <mqtt_parse_incoming+0x15e>
 800a496:	8aba      	ldrh	r2, [r7, #20]
 800a498:	8a3b      	ldrh	r3, [r7, #16]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d11b      	bne.n	800a4d6 <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800a49e:	8a7a      	ldrh	r2, [r7, #18]
 800a4a0:	8abb      	ldrh	r3, [r7, #20]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	7df9      	ldrb	r1, [r7, #23]
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff fdfa 	bl	800a0ac <mqtt_message_received>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800a4bc:	89fb      	ldrh	r3, [r7, #14]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <mqtt_parse_incoming+0x186>
          return res;
 800a4c2:	89fb      	ldrh	r3, [r7, #14]
 800a4c4:	e00e      	b.n	800a4e4 <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d104      	bne.n	800a4d6 <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	891b      	ldrh	r3, [r3, #8]
 800a4da:	8bfa      	ldrh	r2, [r7, #30]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	f4ff af3d 	bcc.w	800a35c <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
 800a4f8:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d106      	bne.n	800a512 <mqtt_tcp_recv_cb+0x26>
 800a504:	4b24      	ldr	r3, [pc, #144]	; (800a598 <mqtt_tcp_recv_cb+0xac>)
 800a506:	f240 325f 	movw	r2, #863	; 0x35f
 800a50a:	4924      	ldr	r1, [pc, #144]	; (800a59c <mqtt_tcp_recv_cb+0xb0>)
 800a50c:	4824      	ldr	r0, [pc, #144]	; (800a5a0 <mqtt_tcp_recv_cb+0xb4>)
 800a50e:	f00a fb45 	bl	8014b9c <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d006      	beq.n	800a52a <mqtt_tcp_recv_cb+0x3e>
 800a51c:	4b1e      	ldr	r3, [pc, #120]	; (800a598 <mqtt_tcp_recv_cb+0xac>)
 800a51e:	f44f 7258 	mov.w	r2, #864	; 0x360
 800a522:	4920      	ldr	r1, [pc, #128]	; (800a5a4 <mqtt_tcp_recv_cb+0xb8>)
 800a524:	481e      	ldr	r0, [pc, #120]	; (800a5a0 <mqtt_tcp_recv_cb+0xb4>)
 800a526:	f00a fb39 	bl	8014b9c <iprintf>

  if (p == NULL) {
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d105      	bne.n	800a53c <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800a530:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a534:	6978      	ldr	r0, [r7, #20]
 800a536:	f7ff fc69 	bl	8009e0c <mqtt_close>
 800a53a:	e027      	b.n	800a58c <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800a53c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d005      	beq.n	800a550 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f001 febd 	bl	800c2c4 <pbuf_free>
      return err;
 800a54a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a54e:	e01e      	b.n	800a58e <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    tcp_recved(pcb, p->tot_len);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	891b      	ldrh	r3, [r3, #8]
 800a554:	4619      	mov	r1, r3
 800a556:	68b8      	ldr	r0, [r7, #8]
 800a558:	f002 fdbe 	bl	800d0d8 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	6978      	ldr	r0, [r7, #20]
 800a560:	f7ff feee 	bl	800a340 <mqtt_parse_incoming>
 800a564:	4603      	mov	r3, r0
 800a566:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 feab 	bl	800c2c4 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800a56e:	8a7b      	ldrh	r3, [r7, #18]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d004      	beq.n	800a57e <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800a574:	8a7b      	ldrh	r3, [r7, #18]
 800a576:	4619      	mov	r1, r3
 800a578:	6978      	ldr	r0, [r7, #20]
 800a57a:	f7ff fc47 	bl	8009e0c <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	885b      	ldrh	r3, [r3, #2]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d002      	beq.n	800a58c <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2200      	movs	r2, #0
 800a58a:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	080160b4 	.word	0x080160b4
 800a59c:	080162a8 	.word	0x080162a8
 800a5a0:	0801610c 	.word	0x0801610c
 800a5a4:	080162cc 	.word	0x080162cc

0800a5a8 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	7a9b      	ldrb	r3, [r3, #10]
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d127      	bne.n	800a612 <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800a5ce:	e00d      	b.n	800a5ec <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d006      	beq.n	800a5e6 <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	6892      	ldr	r2, [r2, #8]
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4610      	mov	r0, r2
 800a5e4:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800a5e6:	6938      	ldr	r0, [r7, #16]
 800a5e8:	f7ff f9e2 	bl	80099b0 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	3318      	adds	r3, #24
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff f9ec 	bl	80099d0 <mqtt_take_request>
 800a5f8:	6138      	str	r0, [r7, #16]
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1e7      	bne.n	800a5d0 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7ff f8a5 	bl	800975c <mqtt_output_send>
  }
  return ERR_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <mqtt_tcp_err_cb+0x24>
 800a632:	4b09      	ldr	r3, [pc, #36]	; (800a658 <mqtt_tcp_err_cb+0x3c>)
 800a634:	f240 32ae 	movw	r2, #942	; 0x3ae
 800a638:	4908      	ldr	r1, [pc, #32]	; (800a65c <mqtt_tcp_err_cb+0x40>)
 800a63a:	4809      	ldr	r0, [pc, #36]	; (800a660 <mqtt_tcp_err_cb+0x44>)
 800a63c:	f00a faae 	bl	8014b9c <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800a646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7ff fbde 	bl	8009e0c <mqtt_close>
}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	080160b4 	.word	0x080160b4
 800a65c:	080162f4 	.word	0x080162f4
 800a660:	0801610c 	.word	0x0801610c

0800a664 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct tcp_pcb *tpcb)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	7a9b      	ldrb	r3, [r3, #10]
 800a676:	2b03      	cmp	r3, #3
 800a678:	d105      	bne.n	800a686 <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	33ec      	adds	r3, #236	; 0xec
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	4618      	mov	r0, r3
 800a682:	f7ff f86b 	bl	800975c <mqtt_output_send>
  }
  return ERR_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	4613      	mov	r3, r2
 800a69c:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t* client = (mqtt_client_t *)arg;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800a6a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800a6aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ae:	e025      	b.n	800a6fc <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  tcp_recv(tpcb, mqtt_tcp_recv_cb);
 800a6b6:	4913      	ldr	r1, [pc, #76]	; (800a704 <mqtt_tcp_connect_cb+0x74>)
 800a6b8:	68b8      	ldr	r0, [r7, #8]
 800a6ba:	f003 fc0b 	bl	800ded4 <tcp_recv>
  tcp_sent(tpcb, mqtt_tcp_sent_cb);
 800a6be:	4912      	ldr	r1, [pc, #72]	; (800a708 <mqtt_tcp_connect_cb+0x78>)
 800a6c0:	68b8      	ldr	r0, [r7, #8]
 800a6c2:	f003 fc29 	bl	800df18 <tcp_sent>
  tcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	4910      	ldr	r1, [pc, #64]	; (800a70c <mqtt_tcp_connect_cb+0x7c>)
 800a6ca:	68b8      	ldr	r0, [r7, #8]
 800a6cc:	f003 fc7c 	bl	800dfc8 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 800a6d6:	697a      	ldr	r2, [r7, #20]
 800a6d8:	490d      	ldr	r1, [pc, #52]	; (800a710 <mqtt_tcp_connect_cb+0x80>)
 800a6da:	f241 3088 	movw	r0, #5000	; 0x1388
 800a6de:	f007 fbff 	bl	8011ee0 <sys_timeout>
  client->cyclic_tick = 0;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	68db      	ldr	r3, [r3, #12]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	f7ff f831 	bl	800975c <mqtt_output_send>

  return ERR_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3718      	adds	r7, #24
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	0800a4ed 	.word	0x0800a4ed
 800a708:	0800a5a9 	.word	0x0800a5a9
 800a70c:	0800a665 	.word	0x0800a665
 800a710:	08009ecd 	.word	0x08009ecd

0800a714 <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08c      	sub	sp, #48	; 0x30
 800a718:	af02      	add	r7, sp, #8
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	807b      	strh	r3, [r7, #2]
  size_t topic_strlen;
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d106      	bne.n	800a736 <mqtt_publish+0x22>
 800a728:	4b5c      	ldr	r3, [pc, #368]	; (800a89c <mqtt_publish+0x188>)
 800a72a:	f240 420b 	movw	r2, #1035	; 0x40b
 800a72e:	495c      	ldr	r1, [pc, #368]	; (800a8a0 <mqtt_publish+0x18c>)
 800a730:	485c      	ldr	r0, [pc, #368]	; (800a8a4 <mqtt_publish+0x190>)
 800a732:	f00a fa33 	bl	8014b9c <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d106      	bne.n	800a74a <mqtt_publish+0x36>
 800a73c:	4b57      	ldr	r3, [pc, #348]	; (800a89c <mqtt_publish+0x188>)
 800a73e:	f240 420c 	movw	r2, #1036	; 0x40c
 800a742:	4959      	ldr	r1, [pc, #356]	; (800a8a8 <mqtt_publish+0x194>)
 800a744:	4857      	ldr	r0, [pc, #348]	; (800a8a4 <mqtt_publish+0x190>)
 800a746:	f00a fa29 	bl	8014b9c <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	7a9b      	ldrb	r3, [r3, #10]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d109      	bne.n	800a766 <mqtt_publish+0x52>
 800a752:	4b52      	ldr	r3, [pc, #328]	; (800a89c <mqtt_publish+0x188>)
 800a754:	f240 420d 	movw	r2, #1037	; 0x40d
 800a758:	4954      	ldr	r1, [pc, #336]	; (800a8ac <mqtt_publish+0x198>)
 800a75a:	4852      	ldr	r0, [pc, #328]	; (800a8a4 <mqtt_publish+0x190>)
 800a75c:	f00a fa1e 	bl	8014b9c <iprintf>
 800a760:	f06f 030a 	mvn.w	r3, #10
 800a764:	e095      	b.n	800a892 <mqtt_publish+0x17e>

  topic_strlen = strlen(topic);
 800a766:	68b8      	ldr	r0, [r7, #8]
 800a768:	f7f5 fd3c 	bl	80001e4 <strlen>
 800a76c:	6238      	str	r0, [r7, #32]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800a774:	4293      	cmp	r3, r2
 800a776:	d909      	bls.n	800a78c <mqtt_publish+0x78>
 800a778:	4b48      	ldr	r3, [pc, #288]	; (800a89c <mqtt_publish+0x188>)
 800a77a:	f44f 6282 	mov.w	r2, #1040	; 0x410
 800a77e:	494c      	ldr	r1, [pc, #304]	; (800a8b0 <mqtt_publish+0x19c>)
 800a780:	4848      	ldr	r0, [pc, #288]	; (800a8a4 <mqtt_publish+0x190>)
 800a782:	f00a fa0b 	bl	8014b9c <iprintf>
 800a786:	f06f 030f 	mvn.w	r3, #15
 800a78a:	e082      	b.n	800a892 <mqtt_publish+0x17e>
  topic_len = (u16_t)topic_strlen;
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	83fb      	strh	r3, [r7, #30]
  total_len = 2 + topic_len + payload_length;
 800a790:	8bfb      	ldrh	r3, [r7, #30]
 800a792:	1c9a      	adds	r2, r3, #2
 800a794:	887b      	ldrh	r3, [r7, #2]
 800a796:	4413      	add	r3, r2
 800a798:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7a0:	d309      	bcc.n	800a7b6 <mqtt_publish+0xa2>
 800a7a2:	4b3e      	ldr	r3, [pc, #248]	; (800a89c <mqtt_publish+0x188>)
 800a7a4:	f240 4213 	movw	r2, #1043	; 0x413
 800a7a8:	4942      	ldr	r1, [pc, #264]	; (800a8b4 <mqtt_publish+0x1a0>)
 800a7aa:	483e      	ldr	r0, [pc, #248]	; (800a8a4 <mqtt_publish+0x190>)
 800a7ac:	f00a f9f6 	bl	8014b9c <iprintf>
 800a7b0:	f06f 030f 	mvn.w	r3, #15
 800a7b4:	e06d      	b.n	800a892 <mqtt_publish+0x17e>
  remaining_length = (u16_t)total_len;
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  if (qos > 0) {
 800a7ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d008      	beq.n	800a7d4 <mqtt_publish+0xc0>
    remaining_length += 2;
 800a7c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7fe ffab 	bl	8009724 <msg_generate_packet_id>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a7d2:	e001      	b.n	800a7d8 <mqtt_publish+0xc4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f103 001c 	add.w	r0, r3, #28
 800a7de:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800a7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7e4:	f7ff f852 	bl	800988c <mqtt_create_request>
 800a7e8:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d102      	bne.n	800a7f6 <mqtt_publish+0xe2>
    return ERR_MEM;
 800a7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f4:	e04d      	b.n	800a892 <mqtt_publish+0x17e>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	33ec      	adds	r3, #236	; 0xec
 800a7fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff fad0 	bl	8009da4 <mqtt_output_check_space>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d105      	bne.n	800a816 <mqtt_publish+0x102>
    mqtt_delete_request(r);
 800a80a:	6978      	ldr	r0, [r7, #20]
 800a80c:	f7ff f8d0 	bl	80099b0 <mqtt_delete_request>
    return ERR_MEM;
 800a810:	f04f 33ff 	mov.w	r3, #4294967295
 800a814:	e03d      	b.n	800a892 <mqtt_publish+0x17e>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a81c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a828:	9300      	str	r3, [sp, #0]
 800a82a:	4613      	mov	r3, r2
 800a82c:	2200      	movs	r2, #0
 800a82e:	2103      	movs	r1, #3
 800a830:	f7ff fa6d 	bl	8009d0e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	33ec      	adds	r3, #236	; 0xec
 800a838:	8bfa      	ldrh	r2, [r7, #30]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff fa24 	bl	8009c8a <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800a842:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a846:	2b00      	cmp	r3, #0
 800a848:	d006      	beq.n	800a858 <mqtt_publish+0x144>
    mqtt_output_append_u16(&client->output, pkt_id);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	33ec      	adds	r3, #236	; 0xec
 800a84e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a850:	4611      	mov	r1, r2
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff f9cc 	bl	8009bf0 <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d009      	beq.n	800a872 <mqtt_publish+0x15e>
 800a85e:	887b      	ldrh	r3, [r7, #2]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d006      	beq.n	800a872 <mqtt_publish+0x15e>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	33ec      	adds	r3, #236	; 0xec
 800a868:	887a      	ldrh	r2, [r7, #2]
 800a86a:	6879      	ldr	r1, [r7, #4]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff f9e6 	bl	8009c3e <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3318      	adds	r3, #24
 800a876:	6979      	ldr	r1, [r7, #20]
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff f84d 	bl	8009918 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	4619      	mov	r1, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	f7fe ff66 	bl	800975c <mqtt_output_send>
  return ERR_OK;
 800a890:	2300      	movs	r3, #0
}
 800a892:	4618      	mov	r0, r3
 800a894:	3728      	adds	r7, #40	; 0x28
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	080160b4 	.word	0x080160b4
 800a8a0:	08016314 	.word	0x08016314
 800a8a4:	0801610c 	.word	0x0801610c
 800a8a8:	08016334 	.word	0x08016334
 800a8ac:	08016350 	.word	0x08016350
 800a8b0:	08016370 	.word	0x08016370
 800a8b4:	08016394 	.word	0x08016394

0800a8b8 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08c      	sub	sp, #48	; 0x30
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	71fb      	strb	r3, [r7, #7]
  u16_t topic_len;
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d106      	bne.n	800a8dc <mqtt_sub_unsub+0x24>
 800a8ce:	4b5d      	ldr	r3, [pc, #372]	; (800aa44 <mqtt_sub_unsub+0x18c>)
 800a8d0:	f240 4255 	movw	r2, #1109	; 0x455
 800a8d4:	495c      	ldr	r1, [pc, #368]	; (800aa48 <mqtt_sub_unsub+0x190>)
 800a8d6:	485d      	ldr	r0, [pc, #372]	; (800aa4c <mqtt_sub_unsub+0x194>)
 800a8d8:	f00a f960 	bl	8014b9c <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <mqtt_sub_unsub+0x38>
 800a8e2:	4b58      	ldr	r3, [pc, #352]	; (800aa44 <mqtt_sub_unsub+0x18c>)
 800a8e4:	f240 4256 	movw	r2, #1110	; 0x456
 800a8e8:	4959      	ldr	r1, [pc, #356]	; (800aa50 <mqtt_sub_unsub+0x198>)
 800a8ea:	4858      	ldr	r0, [pc, #352]	; (800aa4c <mqtt_sub_unsub+0x194>)
 800a8ec:	f00a f956 	bl	8014b9c <iprintf>

  topic_strlen = strlen(topic);
 800a8f0:	68b8      	ldr	r0, [r7, #8]
 800a8f2:	f7f5 fc77 	bl	80001e4 <strlen>
 800a8f6:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d909      	bls.n	800a916 <mqtt_sub_unsub+0x5e>
 800a902:	4b50      	ldr	r3, [pc, #320]	; (800aa44 <mqtt_sub_unsub+0x18c>)
 800a904:	f240 4259 	movw	r2, #1113	; 0x459
 800a908:	4952      	ldr	r1, [pc, #328]	; (800aa54 <mqtt_sub_unsub+0x19c>)
 800a90a:	4850      	ldr	r0, [pc, #320]	; (800aa4c <mqtt_sub_unsub+0x194>)
 800a90c:	f00a f946 	bl	8014b9c <iprintf>
 800a910:	f06f 030f 	mvn.w	r3, #15
 800a914:	e091      	b.n	800aa3a <mqtt_sub_unsub+0x182>
  topic_len = (u16_t)topic_strlen;
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800a91a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a91c:	3304      	adds	r3, #4
 800a91e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800a922:	2a00      	cmp	r2, #0
 800a924:	bf14      	ite	ne
 800a926:	2201      	movne	r2, #1
 800a928:	2200      	moveq	r2, #0
 800a92a:	b2d2      	uxtb	r2, r2
 800a92c:	4413      	add	r3, r2
 800a92e:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a936:	d309      	bcc.n	800a94c <mqtt_sub_unsub+0x94>
 800a938:	4b42      	ldr	r3, [pc, #264]	; (800aa44 <mqtt_sub_unsub+0x18c>)
 800a93a:	f240 425d 	movw	r2, #1117	; 0x45d
 800a93e:	4946      	ldr	r1, [pc, #280]	; (800aa58 <mqtt_sub_unsub+0x1a0>)
 800a940:	4842      	ldr	r0, [pc, #264]	; (800aa4c <mqtt_sub_unsub+0x194>)
 800a942:	f00a f92b 	bl	8014b9c <iprintf>
 800a946:	f06f 030f 	mvn.w	r3, #15
 800a94a:	e076      	b.n	800aa3a <mqtt_sub_unsub+0x182>
  remaining_length = (u16_t)total_len;
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	2b02      	cmp	r3, #2
 800a954:	d906      	bls.n	800a964 <mqtt_sub_unsub+0xac>
 800a956:	4b3b      	ldr	r3, [pc, #236]	; (800aa44 <mqtt_sub_unsub+0x18c>)
 800a958:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800a95c:	493f      	ldr	r1, [pc, #252]	; (800aa5c <mqtt_sub_unsub+0x1a4>)
 800a95e:	483b      	ldr	r0, [pc, #236]	; (800aa4c <mqtt_sub_unsub+0x194>)
 800a960:	f00a f91c 	bl	8014b9c <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	7a9b      	ldrb	r3, [r3, #10]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 800a96c:	f06f 030a 	mvn.w	r3, #10
 800a970:	e063      	b.n	800aa3a <mqtt_sub_unsub+0x182>
  }

  pkt_id = msg_generate_packet_id(client);
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f7fe fed6 	bl	8009724 <msg_generate_packet_id>
 800a978:	4603      	mov	r3, r0
 800a97a:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f103 001c 	add.w	r0, r3, #28
 800a982:	8b39      	ldrh	r1, [r7, #24]
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	f7fe ff80 	bl	800988c <mqtt_create_request>
 800a98c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d102      	bne.n	800a99a <mqtt_sub_unsub+0xe2>
    return ERR_MEM;
 800a994:	f04f 33ff 	mov.w	r3, #4294967295
 800a998:	e04f      	b.n	800aa3a <mqtt_sub_unsub+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	33ec      	adds	r3, #236	; 0xec
 800a99e:	8b7a      	ldrh	r2, [r7, #26]
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff f9fe 	bl	8009da4 <mqtt_output_check_space>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d105      	bne.n	800a9ba <mqtt_sub_unsub+0x102>
    mqtt_delete_request(r);
 800a9ae:	6978      	ldr	r0, [r7, #20]
 800a9b0:	f7fe fffe 	bl	80099b0 <mqtt_delete_request>
    return ERR_MEM;
 800a9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b8:	e03f      	b.n	800aa3a <mqtt_sub_unsub+0x182>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a9c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <mqtt_sub_unsub+0x114>
 800a9c8:	2108      	movs	r1, #8
 800a9ca:	e000      	b.n	800a9ce <mqtt_sub_unsub+0x116>
 800a9cc:	210a      	movs	r1, #10
 800a9ce:	8b7b      	ldrh	r3, [r7, #26]
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f7ff f998 	bl	8009d0e <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	33ec      	adds	r3, #236	; 0xec
 800a9e2:	8b3a      	ldrh	r2, [r7, #24]
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7ff f902 	bl	8009bf0 <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	33ec      	adds	r3, #236	; 0xec
 800a9f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff f948 	bl	8009c8a <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 800a9fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00b      	beq.n	800aa1a <mqtt_sub_unsub+0x162>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800aa08:	79fb      	ldrb	r3, [r7, #7]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	bf28      	it	cs
 800aa0e:	2302      	movcs	r3, #2
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7ff f8d5 	bl	8009bc4 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3318      	adds	r3, #24
 800aa1e:	6979      	ldr	r1, [r7, #20]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe ff79 	bl	8009918 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f7fe fe92 	bl	800975c <mqtt_output_send>
  return ERR_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3728      	adds	r7, #40	; 0x28
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	080160b4 	.word	0x080160b4
 800aa48:	080163b8 	.word	0x080163b8
 800aa4c:	0801610c 	.word	0x0801610c
 800aa50:	080163d8 	.word	0x080163d8
 800aa54:	080163f8 	.word	0x080163f8
 800aa58:	08016420 	.word	0x08016420
 800aa5c:	08016448 	.word	0x08016448

0800aa60 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                             mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <mqtt_set_inpub_callback+0x22>
 800aa74:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <mqtt_set_inpub_callback+0x3c>)
 800aa76:	f240 428f 	movw	r2, #1167	; 0x48f
 800aa7a:	4909      	ldr	r1, [pc, #36]	; (800aaa0 <mqtt_set_inpub_callback+0x40>)
 800aa7c:	4809      	ldr	r0, [pc, #36]	; (800aaa4 <mqtt_set_inpub_callback+0x44>)
 800aa7e:	f00a f88d 	bl	8014b9c <iprintf>
  client->data_cb = data_cb;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800aa94:	bf00      	nop
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	080160b4 	.word	0x080160b4
 800aaa0:	08016460 	.word	0x08016460
 800aaa4:	0801610c 	.word	0x0801610c

0800aaa8 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08a      	sub	sp, #40	; 0x28
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	4613      	mov	r3, r2
 800aab6:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800aab8:	230a      	movs	r3, #10
 800aaba:	83bb      	strh	r3, [r7, #28]
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	76fb      	strb	r3, [r7, #27]
 800aac0:	2300      	movs	r3, #0
 800aac2:	76bb      	strb	r3, [r7, #26]
 800aac4:	2300      	movs	r3, #0
 800aac6:	767b      	strb	r3, [r7, #25]

  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <mqtt_client_connect+0x34>
 800aace:	4b7c      	ldr	r3, [pc, #496]	; (800acc0 <mqtt_client_connect+0x218>)
 800aad0:	f240 42bb 	movw	r2, #1211	; 0x4bb
 800aad4:	497b      	ldr	r1, [pc, #492]	; (800acc4 <mqtt_client_connect+0x21c>)
 800aad6:	487c      	ldr	r0, [pc, #496]	; (800acc8 <mqtt_client_connect+0x220>)
 800aad8:	f00a f860 	bl	8014b9c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <mqtt_client_connect+0x48>
 800aae2:	4b77      	ldr	r3, [pc, #476]	; (800acc0 <mqtt_client_connect+0x218>)
 800aae4:	f240 42bc 	movw	r2, #1212	; 0x4bc
 800aae8:	4978      	ldr	r1, [pc, #480]	; (800accc <mqtt_client_connect+0x224>)
 800aaea:	4877      	ldr	r0, [pc, #476]	; (800acc8 <mqtt_client_connect+0x220>)
 800aaec:	f00a f856 	bl	8014b9c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d106      	bne.n	800ab04 <mqtt_client_connect+0x5c>
 800aaf6:	4b72      	ldr	r3, [pc, #456]	; (800acc0 <mqtt_client_connect+0x218>)
 800aaf8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800aafc:	4974      	ldr	r1, [pc, #464]	; (800acd0 <mqtt_client_connect+0x228>)
 800aafe:	4872      	ldr	r0, [pc, #456]	; (800acc8 <mqtt_client_connect+0x220>)
 800ab00:	f00a f84c 	bl	8014b9c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800ab04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d106      	bne.n	800ab1a <mqtt_client_connect+0x72>
 800ab0c:	4b6c      	ldr	r3, [pc, #432]	; (800acc0 <mqtt_client_connect+0x218>)
 800ab0e:	f240 42be 	movw	r2, #1214	; 0x4be
 800ab12:	4970      	ldr	r1, [pc, #448]	; (800acd4 <mqtt_client_connect+0x22c>)
 800ab14:	486c      	ldr	r0, [pc, #432]	; (800acc8 <mqtt_client_connect+0x220>)
 800ab16:	f00a f841 	bl	8014b9c <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	7a9b      	ldrb	r3, [r3, #10]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <mqtt_client_connect+0x80>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800ab22:	f06f 0309 	mvn.w	r3, #9
 800ab26:	e164      	b.n	800adf2 <mqtt_client_connect+0x34a>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800ab28:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f00a f82c 	bl	8014b8c <memset>
  client->connect_arg = arg;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab38:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800ab40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab42:	899a      	ldrh	r2, [r3, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	331c      	adds	r3, #28
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7ff f80d 	bl	8009b6c <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d06a      	beq.n	800ac30 <mqtt_client_connect+0x188>
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d066      	beq.n	800ac30 <mqtt_client_connect+0x188>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800ab62:	7efb      	ldrb	r3, [r7, #27]
 800ab64:	f043 0304 	orr.w	r3, r3, #4
 800ab68:	76fb      	strb	r3, [r7, #27]
    flags |= (client_info->will_qos & 3) << 3;
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	7e1b      	ldrb	r3, [r3, #24]
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	b25b      	sxtb	r3, r3
 800ab72:	f003 0318 	and.w	r3, r3, #24
 800ab76:	b25a      	sxtb	r2, r3
 800ab78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	b25b      	sxtb	r3, r3
 800ab80:	76fb      	strb	r3, [r7, #27]
    if (client_info->will_retain) {
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	7e5b      	ldrb	r3, [r3, #25]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <mqtt_client_connect+0xea>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800ab8a:	7efb      	ldrb	r3, [r7, #27]
 800ab8c:	f043 0320 	orr.w	r3, r3, #32
 800ab90:	76fb      	strb	r3, [r7, #27]
    }
    len = strlen(client_info->will_topic);
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7f5 fb24 	bl	80001e4 <strlen>
 800ab9c:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2bff      	cmp	r3, #255	; 0xff
 800aba2:	d909      	bls.n	800abb8 <mqtt_client_connect+0x110>
 800aba4:	4b46      	ldr	r3, [pc, #280]	; (800acc0 <mqtt_client_connect+0x218>)
 800aba6:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800abaa:	494b      	ldr	r1, [pc, #300]	; (800acd8 <mqtt_client_connect+0x230>)
 800abac:	4846      	ldr	r0, [pc, #280]	; (800acc8 <mqtt_client_connect+0x220>)
 800abae:	f009 fff5 	bl	8014b9c <iprintf>
 800abb2:	f06f 0305 	mvn.w	r3, #5
 800abb6:	e11c      	b.n	800adf2 <mqtt_client_connect+0x34a>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d109      	bne.n	800abd2 <mqtt_client_connect+0x12a>
 800abbe:	4b40      	ldr	r3, [pc, #256]	; (800acc0 <mqtt_client_connect+0x218>)
 800abc0:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800abc4:	4945      	ldr	r1, [pc, #276]	; (800acdc <mqtt_client_connect+0x234>)
 800abc6:	4840      	ldr	r0, [pc, #256]	; (800acc8 <mqtt_client_connect+0x220>)
 800abc8:	f009 ffe8 	bl	8014b9c <iprintf>
 800abcc:	f06f 0305 	mvn.w	r3, #5
 800abd0:	e10f      	b.n	800adf2 <mqtt_client_connect+0x34a>
    will_topic_len = (u8_t)len;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	76bb      	strb	r3, [r7, #26]
    len = strlen(client_info->will_msg);
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7f5 fb02 	bl	80001e4 <strlen>
 800abe0:	6178      	str	r0, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	2bff      	cmp	r3, #255	; 0xff
 800abe6:	d909      	bls.n	800abfc <mqtt_client_connect+0x154>
 800abe8:	4b35      	ldr	r3, [pc, #212]	; (800acc0 <mqtt_client_connect+0x218>)
 800abea:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 800abee:	493c      	ldr	r1, [pc, #240]	; (800ace0 <mqtt_client_connect+0x238>)
 800abf0:	4835      	ldr	r0, [pc, #212]	; (800acc8 <mqtt_client_connect+0x220>)
 800abf2:	f009 ffd3 	bl	8014b9c <iprintf>
 800abf6:	f06f 0305 	mvn.w	r3, #5
 800abfa:	e0fa      	b.n	800adf2 <mqtt_client_connect+0x34a>
    will_msg_len = (u8_t)len;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	767b      	strb	r3, [r7, #25]
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800ac00:	8bbb      	ldrh	r3, [r7, #28]
 800ac02:	1c9a      	adds	r2, r3, #2
 800ac04:	7ebb      	ldrb	r3, [r7, #26]
 800ac06:	4413      	add	r3, r2
 800ac08:	1c9a      	adds	r2, r3, #2
 800ac0a:	7e7b      	ldrb	r3, [r7, #25]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	617b      	str	r3, [r7, #20]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac16:	d309      	bcc.n	800ac2c <mqtt_client_connect+0x184>
 800ac18:	4b29      	ldr	r3, [pc, #164]	; (800acc0 <mqtt_client_connect+0x218>)
 800ac1a:	f240 42db 	movw	r2, #1243	; 0x4db
 800ac1e:	4931      	ldr	r1, [pc, #196]	; (800ace4 <mqtt_client_connect+0x23c>)
 800ac20:	4829      	ldr	r0, [pc, #164]	; (800acc8 <mqtt_client_connect+0x220>)
 800ac22:	f009 ffbb 	bl	8014b9c <iprintf>
 800ac26:	f06f 0305 	mvn.w	r3, #5
 800ac2a:	e0e2      	b.n	800adf2 <mqtt_client_connect+0x34a>
    remaining_length = (u16_t)len;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	83bb      	strh	r3, [r7, #28]
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800ac30:	7efb      	ldrb	r3, [r7, #27]
 800ac32:	f043 0302 	orr.w	r3, r3, #2
 800ac36:	76fb      	strb	r3, [r7, #27]

  len = strlen(client_info->client_id);
 800ac38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7f5 fad1 	bl	80001e4 <strlen>
 800ac42:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac4a:	d309      	bcc.n	800ac60 <mqtt_client_connect+0x1b8>
 800ac4c:	4b1c      	ldr	r3, [pc, #112]	; (800acc0 <mqtt_client_connect+0x218>)
 800ac4e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ac52:	4925      	ldr	r1, [pc, #148]	; (800ace8 <mqtt_client_connect+0x240>)
 800ac54:	481c      	ldr	r0, [pc, #112]	; (800acc8 <mqtt_client_connect+0x220>)
 800ac56:	f009 ffa1 	bl	8014b9c <iprintf>
 800ac5a:	f06f 0305 	mvn.w	r3, #5
 800ac5e:	e0c8      	b.n	800adf2 <mqtt_client_connect+0x34a>
  client_id_length = (u16_t)len;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	827b      	strh	r3, [r7, #18]
  len = remaining_length + 2 + client_id_length;
 800ac64:	8bbb      	ldrh	r3, [r7, #28]
 800ac66:	1c9a      	adds	r2, r3, #2
 800ac68:	8a7b      	ldrh	r3, [r7, #18]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac74:	d309      	bcc.n	800ac8a <mqtt_client_connect+0x1e2>
 800ac76:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <mqtt_client_connect+0x218>)
 800ac78:	f240 42e6 	movw	r2, #1254	; 0x4e6
 800ac7c:	4919      	ldr	r1, [pc, #100]	; (800ace4 <mqtt_client_connect+0x23c>)
 800ac7e:	4812      	ldr	r0, [pc, #72]	; (800acc8 <mqtt_client_connect+0x220>)
 800ac80:	f009 ff8c 	bl	8014b9c <iprintf>
 800ac84:	f06f 0305 	mvn.w	r3, #5
 800ac88:	e0b3      	b.n	800adf2 <mqtt_client_connect+0x34a>
  remaining_length = (u16_t)len;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	83bb      	strh	r3, [r7, #28]

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	33ec      	adds	r3, #236	; 0xec
 800ac92:	8bba      	ldrh	r2, [r7, #28]
 800ac94:	4611      	mov	r1, r2
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff f884 	bl	8009da4 <mqtt_output_check_space>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d102      	bne.n	800aca8 <mqtt_client_connect+0x200>
    return ERR_MEM;
 800aca2:	f04f 33ff 	mov.w	r3, #4294967295
 800aca6:	e0a4      	b.n	800adf2 <mqtt_client_connect+0x34a>
  }

  client->conn = tcp_new();
 800aca8:	f003 f8ee 	bl	800de88 <tcp_new>
 800acac:	4602      	mov	r2, r0
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	60da      	str	r2, [r3, #12]
  if (client->conn == NULL) {
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d118      	bne.n	800acec <mqtt_client_connect+0x244>
    return ERR_MEM;
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	e098      	b.n	800adf2 <mqtt_client_connect+0x34a>
 800acc0:	080160b4 	.word	0x080160b4
 800acc4:	08016488 	.word	0x08016488
 800acc8:	0801610c 	.word	0x0801610c
 800accc:	080164ac 	.word	0x080164ac
 800acd0:	080164d4 	.word	0x080164d4
 800acd4:	08016500 	.word	0x08016500
 800acd8:	08016534 	.word	0x08016534
 800acdc:	08016574 	.word	0x08016574
 800ace0:	080165b4 	.word	0x080165b4
 800ace4:	080165f0 	.word	0x080165f0
 800ace8:	08016620 	.word	0x08016620
  }

  /* Set arg pointer for callbacks */
  tcp_arg(client->conn, client);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	68f9      	ldr	r1, [r7, #12]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f003 f8de 	bl	800deb4 <tcp_arg>
  /* Any local address, pick random local port number */
  err = tcp_bind(client->conn, IP_ADDR_ANY, 0);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	493f      	ldr	r1, [pc, #252]	; (800adfc <mqtt_client_connect+0x354>)
 800ad00:	4618      	mov	r0, r3
 800ad02:	f002 f84f 	bl	800cda4 <tcp_bind>
 800ad06:	4603      	mov	r3, r0
 800ad08:	77fb      	strb	r3, [r7, #31]
  if (err != ERR_OK) {
 800ad0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d162      	bne.n	800add8 <mqtt_client_connect+0x330>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = tcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	68d8      	ldr	r0, [r3, #12]
 800ad16:	88fa      	ldrh	r2, [r7, #6]
 800ad18:	4b39      	ldr	r3, [pc, #228]	; (800ae00 <mqtt_client_connect+0x358>)
 800ad1a:	68b9      	ldr	r1, [r7, #8]
 800ad1c:	f002 fa7a 	bl	800d214 <tcp_connect>
 800ad20:	4603      	mov	r3, r0
 800ad22:	77fb      	strb	r3, [r7, #31]
  if (err != ERR_OK) {
 800ad24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d157      	bne.n	800addc <mqtt_client_connect+0x334>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  tcp_err(client->conn, mqtt_tcp_err_cb);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	4934      	ldr	r1, [pc, #208]	; (800ae04 <mqtt_client_connect+0x35c>)
 800ad32:	4618      	mov	r0, r3
 800ad34:	f003 f910 	bl	800df58 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad44:	8bbb      	ldrh	r3, [r7, #28]
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2101      	movs	r1, #1
 800ad52:	f7fe ffdc 	bl	8009d0e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	33ec      	adds	r3, #236	; 0xec
 800ad5a:	2204      	movs	r2, #4
 800ad5c:	492a      	ldr	r1, [pc, #168]	; (800ae08 <mqtt_client_connect+0x360>)
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fe ff93 	bl	8009c8a <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	33ec      	adds	r3, #236	; 0xec
 800ad68:	2104      	movs	r1, #4
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fe ff2a 	bl	8009bc4 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	33ec      	adds	r3, #236	; 0xec
 800ad74:	7efa      	ldrb	r2, [r7, #27]
 800ad76:	4611      	mov	r1, r2
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fe ff23 	bl	8009bc4 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	899b      	ldrh	r3, [r3, #12]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7fe ff30 	bl	8009bf0 <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	8a7a      	ldrh	r2, [r7, #18]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	f7fe ff74 	bl	8009c8a <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800ada2:	7efb      	ldrb	r3, [r7, #27]
 800ada4:	f003 0304 	and.w	r3, r3, #4
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d013      	beq.n	800add4 <mqtt_client_connect+0x32c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800adb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	7eba      	ldrb	r2, [r7, #26]
 800adb8:	b292      	uxth	r2, r2
 800adba:	4619      	mov	r1, r3
 800adbc:	f7fe ff65 	bl	8009c8a <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	7e7a      	ldrb	r2, [r7, #25]
 800adcc:	b292      	uxth	r2, r2
 800adce:	4619      	mov	r1, r3
 800add0:	f7fe ff5b 	bl	8009c8a <mqtt_output_append_string>
  }
  return ERR_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	e00c      	b.n	800adf2 <mqtt_client_connect+0x34a>
    goto tcp_fail;
 800add8:	bf00      	nop
 800adda:	e000      	b.n	800adde <mqtt_client_connect+0x336>
    goto tcp_fail;
 800addc:	bf00      	nop

tcp_fail:
  tcp_abort(client->conn);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f001 ffd2 	bl	800cd8c <tcp_abort>
  client->conn = NULL;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	60da      	str	r2, [r3, #12]
  return err;
 800adee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	08018764 	.word	0x08018764
 800ae00:	0800a691 	.word	0x0800a691
 800ae04:	0800a61d 	.word	0x0800a61d
 800ae08:	0801665c 	.word	0x0801665c

0800ae0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800ae16:	88fb      	ldrh	r3, [r7, #6]
 800ae18:	ba5b      	rev16	r3, r3
 800ae1a:	b29b      	uxth	r3, r3
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bc80      	pop	{r7}
 800ae24:	4770      	bx	lr

0800ae26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b083      	sub	sp, #12
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	061a      	lsls	r2, r3, #24
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	021b      	lsls	r3, r3, #8
 800ae36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae44:	431a      	orrs	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	0e1b      	lsrs	r3, r3, #24
 800ae4a:	4313      	orrs	r3, r2
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bc80      	pop	{r7}
 800ae54:	4770      	bx	lr

0800ae56 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b086      	sub	sp, #24
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 800ae62:	68b8      	ldr	r0, [r7, #8]
 800ae64:	f7f5 f9be 	bl	80001e4 <strlen>
 800ae68:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	e022      	b.n	800aeba <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	e012      	b.n	800aea0 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	781a      	ldrb	r2, [r3, #0]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d109      	bne.n	800ae9a <lwip_strnstr+0x44>
 800ae86:	693a      	ldr	r2, [r7, #16]
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	6978      	ldr	r0, [r7, #20]
 800ae8c:	f009 feb3 	bl	8014bf6 <strncmp>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	e00f      	b.n	800aeba <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	617b      	str	r3, [r7, #20]
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d007      	beq.n	800aeb8 <lwip_strnstr+0x62>
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	441a      	add	r2, r3
 800aeae:	68f9      	ldr	r1, [r7, #12]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	440b      	add	r3, r1
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d9e0      	bls.n	800ae7a <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b085      	sub	sp, #20
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	1c5a      	adds	r2, r3, #1
 800aed0:	607a      	str	r2, [r7, #4]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	603a      	str	r2, [r7, #0]
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800aee0:	7bfa      	ldrb	r2, [r7, #15]
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d016      	beq.n	800af16 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	f043 0320 	orr.w	r3, r3, #32
 800aeee:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800aef0:	7b7b      	ldrb	r3, [r7, #13]
 800aef2:	2b60      	cmp	r3, #96	; 0x60
 800aef4:	d90c      	bls.n	800af10 <lwip_stricmp+0x4e>
 800aef6:	7b7b      	ldrb	r3, [r7, #13]
 800aef8:	2b7a      	cmp	r3, #122	; 0x7a
 800aefa:	d809      	bhi.n	800af10 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	f043 0320 	orr.w	r3, r3, #32
 800af02:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800af04:	7b7a      	ldrb	r2, [r7, #13]
 800af06:	7b3b      	ldrb	r3, [r7, #12]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d003      	beq.n	800af14 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e006      	b.n	800af1e <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800af10:	2301      	movs	r3, #1
 800af12:	e004      	b.n	800af1e <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800af14:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1d7      	bne.n	800aecc <lwip_stricmp+0xa>
  return 0;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr

0800af28 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800af32:	f009 fd61 	bl	80149f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800af36:	f000 f8a7 	bl	800b088 <mem_init>
  memp_init();
 800af3a:	f000 fb71 	bl	800b620 <memp_init>
  pbuf_init();
  netif_init();
 800af3e:	f000 fc37 	bl	800b7b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800af42:	f007 f955 	bl	80121f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800af46:	f001 fc92 	bl	800c86e <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800af4a:	f006 ffa1 	bl	8011e90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800af60:	4b40      	ldr	r3, [pc, #256]	; (800b064 <plug_holes+0x10c>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	429a      	cmp	r2, r3
 800af68:	d206      	bcs.n	800af78 <plug_holes+0x20>
 800af6a:	4b3f      	ldr	r3, [pc, #252]	; (800b068 <plug_holes+0x110>)
 800af6c:	f240 125d 	movw	r2, #349	; 0x15d
 800af70:	493e      	ldr	r1, [pc, #248]	; (800b06c <plug_holes+0x114>)
 800af72:	483f      	ldr	r0, [pc, #252]	; (800b070 <plug_holes+0x118>)
 800af74:	f009 fe12 	bl	8014b9c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800af78:	4b3e      	ldr	r3, [pc, #248]	; (800b074 <plug_holes+0x11c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d306      	bcc.n	800af90 <plug_holes+0x38>
 800af82:	4b39      	ldr	r3, [pc, #228]	; (800b068 <plug_holes+0x110>)
 800af84:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800af88:	493b      	ldr	r1, [pc, #236]	; (800b078 <plug_holes+0x120>)
 800af8a:	4839      	ldr	r0, [pc, #228]	; (800b070 <plug_holes+0x118>)
 800af8c:	f009 fe06 	bl	8014b9c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	791b      	ldrb	r3, [r3, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <plug_holes+0x4e>
 800af98:	4b33      	ldr	r3, [pc, #204]	; (800b068 <plug_holes+0x110>)
 800af9a:	f240 125f 	movw	r2, #351	; 0x15f
 800af9e:	4937      	ldr	r1, [pc, #220]	; (800b07c <plug_holes+0x124>)
 800afa0:	4833      	ldr	r0, [pc, #204]	; (800b070 <plug_holes+0x118>)
 800afa2:	f009 fdfb 	bl	8014b9c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afae:	d906      	bls.n	800afbe <plug_holes+0x66>
 800afb0:	4b2d      	ldr	r3, [pc, #180]	; (800b068 <plug_holes+0x110>)
 800afb2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800afb6:	4932      	ldr	r1, [pc, #200]	; (800b080 <plug_holes+0x128>)
 800afb8:	482d      	ldr	r0, [pc, #180]	; (800b070 <plug_holes+0x118>)
 800afba:	f009 fdef 	bl	8014b9c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800afbe:	4b29      	ldr	r3, [pc, #164]	; (800b064 <plug_holes+0x10c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	8812      	ldrh	r2, [r2, #0]
 800afc6:	4413      	add	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d01f      	beq.n	800b012 <plug_holes+0xba>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	791b      	ldrb	r3, [r3, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d11b      	bne.n	800b012 <plug_holes+0xba>
 800afda:	4b26      	ldr	r3, [pc, #152]	; (800b074 <plug_holes+0x11c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d016      	beq.n	800b012 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800afe4:	4b27      	ldr	r3, [pc, #156]	; (800b084 <plug_holes+0x12c>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	429a      	cmp	r2, r3
 800afec:	d102      	bne.n	800aff4 <plug_holes+0x9c>
      lfree = mem;
 800afee:	4a25      	ldr	r2, [pc, #148]	; (800b084 <plug_holes+0x12c>)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	881a      	ldrh	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800affc:	4b19      	ldr	r3, [pc, #100]	; (800b064 <plug_holes+0x10c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	1ad1      	subs	r1, r2, r3
 800b004:	4b17      	ldr	r3, [pc, #92]	; (800b064 <plug_holes+0x10c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	8812      	ldrh	r2, [r2, #0]
 800b00c:	4413      	add	r3, r2
 800b00e:	b28a      	uxth	r2, r1
 800b010:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800b012:	4b14      	ldr	r3, [pc, #80]	; (800b064 <plug_holes+0x10c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	8852      	ldrh	r2, [r2, #2]
 800b01a:	4413      	add	r3, r2
 800b01c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	429a      	cmp	r2, r3
 800b024:	d01a      	beq.n	800b05c <plug_holes+0x104>
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	791b      	ldrb	r3, [r3, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d116      	bne.n	800b05c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b02e:	4b15      	ldr	r3, [pc, #84]	; (800b084 <plug_holes+0x12c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	d102      	bne.n	800b03e <plug_holes+0xe6>
      lfree = pmem;
 800b038:	4a12      	ldr	r2, [pc, #72]	; (800b084 <plug_holes+0x12c>)
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	881a      	ldrh	r2, [r3, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800b046:	4b07      	ldr	r3, [pc, #28]	; (800b064 <plug_holes+0x10c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	1ad1      	subs	r1, r2, r3
 800b04e:	4b05      	ldr	r3, [pc, #20]	; (800b064 <plug_holes+0x10c>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	8812      	ldrh	r2, [r2, #0]
 800b056:	4413      	add	r3, r2
 800b058:	b28a      	uxth	r2, r1
 800b05a:	805a      	strh	r2, [r3, #2]
  }
}
 800b05c:	bf00      	nop
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20004aa0 	.word	0x20004aa0
 800b068:	080166b0 	.word	0x080166b0
 800b06c:	080166e0 	.word	0x080166e0
 800b070:	080166f8 	.word	0x080166f8
 800b074:	20004aa4 	.word	0x20004aa4
 800b078:	08016720 	.word	0x08016720
 800b07c:	0801673c 	.word	0x0801673c
 800b080:	08016758 	.word	0x08016758
 800b084:	20004aa8 	.word	0x20004aa8

0800b088 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b08e:	4b1e      	ldr	r3, [pc, #120]	; (800b108 <mem_init+0x80>)
 800b090:	3303      	adds	r3, #3
 800b092:	f023 0303 	bic.w	r3, r3, #3
 800b096:	461a      	mov	r2, r3
 800b098:	4b1c      	ldr	r3, [pc, #112]	; (800b10c <mem_init+0x84>)
 800b09a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b09c:	4b1b      	ldr	r3, [pc, #108]	; (800b10c <mem_init+0x84>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b0a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800b0b6:	4b15      	ldr	r3, [pc, #84]	; (800b10c <mem_init+0x84>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b0be:	4a14      	ldr	r2, [pc, #80]	; (800b110 <mem_init+0x88>)
 800b0c0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b0c2:	4b13      	ldr	r3, [pc, #76]	; (800b110 <mem_init+0x88>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b0ca:	4b11      	ldr	r3, [pc, #68]	; (800b110 <mem_init+0x88>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b0d2:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b0d4:	4b0e      	ldr	r3, [pc, #56]	; (800b110 <mem_init+0x88>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b0dc:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b0de:	4b0b      	ldr	r3, [pc, #44]	; (800b10c <mem_init+0x84>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a0c      	ldr	r2, [pc, #48]	; (800b114 <mem_init+0x8c>)
 800b0e4:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b0e6:	480c      	ldr	r0, [pc, #48]	; (800b118 <mem_init+0x90>)
 800b0e8:	f009 fc94 	bl	8014a14 <sys_mutex_new>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d006      	beq.n	800b100 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <mem_init+0x94>)
 800b0f4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b0f8:	4909      	ldr	r1, [pc, #36]	; (800b120 <mem_init+0x98>)
 800b0fa:	480a      	ldr	r0, [pc, #40]	; (800b124 <mem_init+0x9c>)
 800b0fc:	f009 fd4e 	bl	8014b9c <iprintf>
  }
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	2000844c 	.word	0x2000844c
 800b10c:	20004aa0 	.word	0x20004aa0
 800b110:	20004aa4 	.word	0x20004aa4
 800b114:	20004aa8 	.word	0x20004aa8
 800b118:	20004aac 	.word	0x20004aac
 800b11c:	080166b0 	.word	0x080166b0
 800b120:	08016784 	.word	0x08016784
 800b124:	080166f8 	.word	0x080166f8

0800b128 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d050      	beq.n	800b1d8 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f003 0303 	and.w	r3, r3, #3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d006      	beq.n	800b14e <mem_free+0x26>
 800b140:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <mem_free+0xb8>)
 800b142:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800b146:	4927      	ldr	r1, [pc, #156]	; (800b1e4 <mem_free+0xbc>)
 800b148:	4827      	ldr	r0, [pc, #156]	; (800b1e8 <mem_free+0xc0>)
 800b14a:	f009 fd27 	bl	8014b9c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b14e:	4b27      	ldr	r3, [pc, #156]	; (800b1ec <mem_free+0xc4>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d304      	bcc.n	800b162 <mem_free+0x3a>
 800b158:	4b25      	ldr	r3, [pc, #148]	; (800b1f0 <mem_free+0xc8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d306      	bcc.n	800b170 <mem_free+0x48>
 800b162:	4b1f      	ldr	r3, [pc, #124]	; (800b1e0 <mem_free+0xb8>)
 800b164:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800b168:	4922      	ldr	r1, [pc, #136]	; (800b1f4 <mem_free+0xcc>)
 800b16a:	481f      	ldr	r0, [pc, #124]	; (800b1e8 <mem_free+0xc0>)
 800b16c:	f009 fd16 	bl	8014b9c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b170:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <mem_free+0xc4>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d304      	bcc.n	800b184 <mem_free+0x5c>
 800b17a:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <mem_free+0xc8>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d306      	bcc.n	800b192 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b184:	f009 fca4 	bl	8014ad0 <sys_arch_protect>
 800b188:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b18a:	68b8      	ldr	r0, [r7, #8]
 800b18c:	f009 fcae 	bl	8014aec <sys_arch_unprotect>
    return;
 800b190:	e023      	b.n	800b1da <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b192:	4819      	ldr	r0, [pc, #100]	; (800b1f8 <mem_free+0xd0>)
 800b194:	f009 fc5a 	bl	8014a4c <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3b08      	subs	r3, #8
 800b19c:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	791b      	ldrb	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <mem_free+0x8c>
 800b1a6:	4b0e      	ldr	r3, [pc, #56]	; (800b1e0 <mem_free+0xb8>)
 800b1a8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b1ac:	4913      	ldr	r1, [pc, #76]	; (800b1fc <mem_free+0xd4>)
 800b1ae:	480e      	ldr	r0, [pc, #56]	; (800b1e8 <mem_free+0xc0>)
 800b1b0:	f009 fcf4 	bl	8014b9c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b1ba:	4b11      	ldr	r3, [pc, #68]	; (800b200 <mem_free+0xd8>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d202      	bcs.n	800b1ca <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b1c4:	4a0e      	ldr	r2, [pc, #56]	; (800b200 <mem_free+0xd8>)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f7ff fec4 	bl	800af58 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b1d0:	4809      	ldr	r0, [pc, #36]	; (800b1f8 <mem_free+0xd0>)
 800b1d2:	f009 fc4a 	bl	8014a6a <sys_mutex_unlock>
 800b1d6:	e000      	b.n	800b1da <mem_free+0xb2>
    return;
 800b1d8:	bf00      	nop
}
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	080166b0 	.word	0x080166b0
 800b1e4:	080167a0 	.word	0x080167a0
 800b1e8:	080166f8 	.word	0x080166f8
 800b1ec:	20004aa0 	.word	0x20004aa0
 800b1f0:	20004aa4 	.word	0x20004aa4
 800b1f4:	080167c4 	.word	0x080167c4
 800b1f8:	20004aac 	.word	0x20004aac
 800b1fc:	080167dc 	.word	0x080167dc
 800b200:	20004aa8 	.word	0x20004aa8

0800b204 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b210:	887b      	ldrh	r3, [r7, #2]
 800b212:	3303      	adds	r3, #3
 800b214:	b29b      	uxth	r3, r3
 800b216:	f023 0303 	bic.w	r3, r3, #3
 800b21a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b21c:	887b      	ldrh	r3, [r7, #2]
 800b21e:	2b0b      	cmp	r3, #11
 800b220:	d801      	bhi.n	800b226 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b222:	230c      	movs	r3, #12
 800b224:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b226:	887b      	ldrh	r3, [r7, #2]
 800b228:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b22c:	d901      	bls.n	800b232 <mem_trim+0x2e>
    return NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	e0bd      	b.n	800b3ae <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b232:	4b61      	ldr	r3, [pc, #388]	; (800b3b8 <mem_trim+0x1b4>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d304      	bcc.n	800b246 <mem_trim+0x42>
 800b23c:	4b5f      	ldr	r3, [pc, #380]	; (800b3bc <mem_trim+0x1b8>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	429a      	cmp	r2, r3
 800b244:	d306      	bcc.n	800b254 <mem_trim+0x50>
 800b246:	4b5e      	ldr	r3, [pc, #376]	; (800b3c0 <mem_trim+0x1bc>)
 800b248:	f240 12f3 	movw	r2, #499	; 0x1f3
 800b24c:	495d      	ldr	r1, [pc, #372]	; (800b3c4 <mem_trim+0x1c0>)
 800b24e:	485e      	ldr	r0, [pc, #376]	; (800b3c8 <mem_trim+0x1c4>)
 800b250:	f009 fca4 	bl	8014b9c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b254:	4b58      	ldr	r3, [pc, #352]	; (800b3b8 <mem_trim+0x1b4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d304      	bcc.n	800b268 <mem_trim+0x64>
 800b25e:	4b57      	ldr	r3, [pc, #348]	; (800b3bc <mem_trim+0x1b8>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d307      	bcc.n	800b278 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b268:	f009 fc32 	bl	8014ad0 <sys_arch_protect>
 800b26c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f009 fc3c 	bl	8014aec <sys_arch_unprotect>
    return rmem;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	e09a      	b.n	800b3ae <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3b08      	subs	r3, #8
 800b27c:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b27e:	4b4e      	ldr	r3, [pc, #312]	; (800b3b8 <mem_trim+0x1b4>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	69fa      	ldr	r2, [r7, #28]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	881a      	ldrh	r2, [r3, #0]
 800b28c:	8b7b      	ldrh	r3, [r7, #26]
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	b29b      	uxth	r3, r3
 800b292:	3b08      	subs	r3, #8
 800b294:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b296:	887a      	ldrh	r2, [r7, #2]
 800b298:	8b3b      	ldrh	r3, [r7, #24]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d906      	bls.n	800b2ac <mem_trim+0xa8>
 800b29e:	4b48      	ldr	r3, [pc, #288]	; (800b3c0 <mem_trim+0x1bc>)
 800b2a0:	f240 2206 	movw	r2, #518	; 0x206
 800b2a4:	4949      	ldr	r1, [pc, #292]	; (800b3cc <mem_trim+0x1c8>)
 800b2a6:	4848      	ldr	r0, [pc, #288]	; (800b3c8 <mem_trim+0x1c4>)
 800b2a8:	f009 fc78 	bl	8014b9c <iprintf>
  if (newsize > size) {
 800b2ac:	887a      	ldrh	r2, [r7, #2]
 800b2ae:	8b3b      	ldrh	r3, [r7, #24]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d901      	bls.n	800b2b8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	e07a      	b.n	800b3ae <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b2b8:	887a      	ldrh	r2, [r7, #2]
 800b2ba:	8b3b      	ldrh	r3, [r7, #24]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d101      	bne.n	800b2c4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	e074      	b.n	800b3ae <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b2c4:	4842      	ldr	r0, [pc, #264]	; (800b3d0 <mem_trim+0x1cc>)
 800b2c6:	f009 fbc1 	bl	8014a4c <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b2ca:	4b3b      	ldr	r3, [pc, #236]	; (800b3b8 <mem_trim+0x1b4>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	8812      	ldrh	r2, [r2, #0]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	791b      	ldrb	r3, [r3, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d131      	bne.n	800b342 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	881b      	ldrh	r3, [r3, #0]
 800b2e2:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b2e4:	8b7a      	ldrh	r2, [r7, #26]
 800b2e6:	887b      	ldrh	r3, [r7, #2]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800b2f0:	4b38      	ldr	r3, [pc, #224]	; (800b3d4 <mem_trim+0x1d0>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d105      	bne.n	800b306 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b2fa:	4b2f      	ldr	r3, [pc, #188]	; (800b3b8 <mem_trim+0x1b4>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	8a7b      	ldrh	r3, [r7, #18]
 800b300:	4413      	add	r3, r2
 800b302:	4a34      	ldr	r2, [pc, #208]	; (800b3d4 <mem_trim+0x1d0>)
 800b304:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b306:	4b2c      	ldr	r3, [pc, #176]	; (800b3b8 <mem_trim+0x1b4>)
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	8a7b      	ldrh	r3, [r7, #18]
 800b30c:	4413      	add	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2200      	movs	r2, #0
 800b314:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	8a3a      	ldrh	r2, [r7, #16]
 800b31a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	8b7a      	ldrh	r2, [r7, #26]
 800b320:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	8a7a      	ldrh	r2, [r7, #18]
 800b326:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b330:	d039      	beq.n	800b3a6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b332:	4b21      	ldr	r3, [pc, #132]	; (800b3b8 <mem_trim+0x1b4>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	8812      	ldrh	r2, [r2, #0]
 800b33a:	4413      	add	r3, r2
 800b33c:	8a7a      	ldrh	r2, [r7, #18]
 800b33e:	805a      	strh	r2, [r3, #2]
 800b340:	e031      	b.n	800b3a6 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b342:	887b      	ldrh	r3, [r7, #2]
 800b344:	f103 0214 	add.w	r2, r3, #20
 800b348:	8b3b      	ldrh	r3, [r7, #24]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d82b      	bhi.n	800b3a6 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b34e:	8b7a      	ldrh	r2, [r7, #26]
 800b350:	887b      	ldrh	r3, [r7, #2]
 800b352:	4413      	add	r3, r2
 800b354:	b29b      	uxth	r3, r3
 800b356:	3308      	adds	r3, #8
 800b358:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b35a:	4b17      	ldr	r3, [pc, #92]	; (800b3b8 <mem_trim+0x1b4>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	8a7b      	ldrh	r3, [r7, #18]
 800b360:	4413      	add	r3, r2
 800b362:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800b364:	4b1b      	ldr	r3, [pc, #108]	; (800b3d4 <mem_trim+0x1d0>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	697a      	ldr	r2, [r7, #20]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d202      	bcs.n	800b374 <mem_trim+0x170>
      lfree = mem2;
 800b36e:	4a19      	ldr	r2, [pc, #100]	; (800b3d4 <mem_trim+0x1d0>)
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2200      	movs	r2, #0
 800b378:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	881a      	ldrh	r2, [r3, #0]
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	8b7a      	ldrh	r2, [r7, #26]
 800b386:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	8a7a      	ldrh	r2, [r7, #18]
 800b38c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b396:	d006      	beq.n	800b3a6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b398:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <mem_trim+0x1b4>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	8812      	ldrh	r2, [r2, #0]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	8a7a      	ldrh	r2, [r7, #18]
 800b3a4:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b3a6:	480a      	ldr	r0, [pc, #40]	; (800b3d0 <mem_trim+0x1cc>)
 800b3a8:	f009 fb5f 	bl	8014a6a <sys_mutex_unlock>
  return rmem;
 800b3ac:	687b      	ldr	r3, [r7, #4]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3720      	adds	r7, #32
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20004aa0 	.word	0x20004aa0
 800b3bc:	20004aa4 	.word	0x20004aa4
 800b3c0:	080166b0 	.word	0x080166b0
 800b3c4:	080167f0 	.word	0x080167f0
 800b3c8:	080166f8 	.word	0x080166f8
 800b3cc:	08016808 	.word	0x08016808
 800b3d0:	20004aac 	.word	0x20004aac
 800b3d4:	20004aa8 	.word	0x20004aa8

0800b3d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800b3e2:	88fb      	ldrh	r3, [r7, #6]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d101      	bne.n	800b3ec <mem_malloc+0x14>
    return NULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e0d0      	b.n	800b58e <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800b3ec:	88fb      	ldrh	r3, [r7, #6]
 800b3ee:	3303      	adds	r3, #3
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	f023 0303 	bic.w	r3, r3, #3
 800b3f6:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	2b0b      	cmp	r3, #11
 800b3fc:	d801      	bhi.n	800b402 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b3fe:	230c      	movs	r3, #12
 800b400:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800b402:	88fb      	ldrh	r3, [r7, #6]
 800b404:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b408:	d901      	bls.n	800b40e <mem_malloc+0x36>
    return NULL;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e0bf      	b.n	800b58e <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b40e:	4862      	ldr	r0, [pc, #392]	; (800b598 <mem_malloc+0x1c0>)
 800b410:	f009 fb1c 	bl	8014a4c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b414:	4b61      	ldr	r3, [pc, #388]	; (800b59c <mem_malloc+0x1c4>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	4b61      	ldr	r3, [pc, #388]	; (800b5a0 <mem_malloc+0x1c8>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	83fb      	strh	r3, [r7, #30]
 800b420:	e0aa      	b.n	800b578 <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800b422:	4b5f      	ldr	r3, [pc, #380]	; (800b5a0 <mem_malloc+0x1c8>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	8bfb      	ldrh	r3, [r7, #30]
 800b428:	4413      	add	r3, r2
 800b42a:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	791b      	ldrb	r3, [r3, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	f040 809b 	bne.w	800b56c <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	8bfb      	ldrh	r3, [r7, #30]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	f1a3 0208 	sub.w	r2, r3, #8
 800b444:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800b446:	429a      	cmp	r2, r3
 800b448:	f0c0 8090 	bcc.w	800b56c <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	881b      	ldrh	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	8bfb      	ldrh	r3, [r7, #30]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	f1a3 0208 	sub.w	r2, r3, #8
 800b45a:	88fb      	ldrh	r3, [r7, #6]
 800b45c:	3314      	adds	r3, #20
 800b45e:	429a      	cmp	r2, r3
 800b460:	d327      	bcc.n	800b4b2 <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800b462:	8bfa      	ldrh	r2, [r7, #30]
 800b464:	88fb      	ldrh	r3, [r7, #6]
 800b466:	4413      	add	r3, r2
 800b468:	b29b      	uxth	r3, r3
 800b46a:	3308      	adds	r3, #8
 800b46c:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800b46e:	4b4c      	ldr	r3, [pc, #304]	; (800b5a0 <mem_malloc+0x1c8>)
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	8a7b      	ldrh	r3, [r7, #18]
 800b474:	4413      	add	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	881a      	ldrh	r2, [r3, #0]
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8bfa      	ldrh	r2, [r7, #30]
 800b48a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	8a7a      	ldrh	r2, [r7, #18]
 800b490:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2201      	movs	r2, #1
 800b496:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b4a0:	d00a      	beq.n	800b4b8 <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b4a2:	4b3f      	ldr	r3, [pc, #252]	; (800b5a0 <mem_malloc+0x1c8>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	8812      	ldrh	r2, [r2, #0]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	8a7a      	ldrh	r2, [r7, #18]
 800b4ae:	805a      	strh	r2, [r3, #2]
 800b4b0:	e002      	b.n	800b4b8 <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b4b8:	4b38      	ldr	r3, [pc, #224]	; (800b59c <mem_malloc+0x1c4>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d127      	bne.n	800b512 <mem_malloc+0x13a>
          struct mem *cur = lfree;
 800b4c2:	4b36      	ldr	r3, [pc, #216]	; (800b59c <mem_malloc+0x1c4>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b4c8:	e005      	b.n	800b4d6 <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800b4ca:	4b35      	ldr	r3, [pc, #212]	; (800b5a0 <mem_malloc+0x1c8>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	8812      	ldrh	r2, [r2, #0]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	791b      	ldrb	r3, [r3, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d004      	beq.n	800b4e8 <mem_malloc+0x110>
 800b4de:	4b31      	ldr	r3, [pc, #196]	; (800b5a4 <mem_malloc+0x1cc>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	69ba      	ldr	r2, [r7, #24]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d1f0      	bne.n	800b4ca <mem_malloc+0xf2>
          }
          lfree = cur;
 800b4e8:	4a2c      	ldr	r2, [pc, #176]	; (800b59c <mem_malloc+0x1c4>)
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b4ee:	4b2b      	ldr	r3, [pc, #172]	; (800b59c <mem_malloc+0x1c4>)
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4b2c      	ldr	r3, [pc, #176]	; (800b5a4 <mem_malloc+0x1cc>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d00b      	beq.n	800b512 <mem_malloc+0x13a>
 800b4fa:	4b28      	ldr	r3, [pc, #160]	; (800b59c <mem_malloc+0x1c4>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	791b      	ldrb	r3, [r3, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d006      	beq.n	800b512 <mem_malloc+0x13a>
 800b504:	4b28      	ldr	r3, [pc, #160]	; (800b5a8 <mem_malloc+0x1d0>)
 800b506:	f240 22cf 	movw	r2, #719	; 0x2cf
 800b50a:	4928      	ldr	r1, [pc, #160]	; (800b5ac <mem_malloc+0x1d4>)
 800b50c:	4828      	ldr	r0, [pc, #160]	; (800b5b0 <mem_malloc+0x1d8>)
 800b50e:	f009 fb45 	bl	8014b9c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b512:	4821      	ldr	r0, [pc, #132]	; (800b598 <mem_malloc+0x1c0>)
 800b514:	f009 faa9 	bl	8014a6a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b518:	88fa      	ldrh	r2, [r7, #6]
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	4413      	add	r3, r2
 800b51e:	3308      	adds	r3, #8
 800b520:	4a20      	ldr	r2, [pc, #128]	; (800b5a4 <mem_malloc+0x1cc>)
 800b522:	6812      	ldr	r2, [r2, #0]
 800b524:	4293      	cmp	r3, r2
 800b526:	d906      	bls.n	800b536 <mem_malloc+0x15e>
 800b528:	4b1f      	ldr	r3, [pc, #124]	; (800b5a8 <mem_malloc+0x1d0>)
 800b52a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b52e:	4921      	ldr	r1, [pc, #132]	; (800b5b4 <mem_malloc+0x1dc>)
 800b530:	481f      	ldr	r0, [pc, #124]	; (800b5b0 <mem_malloc+0x1d8>)
 800b532:	f009 fb33 	bl	8014b9c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	f003 0303 	and.w	r3, r3, #3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <mem_malloc+0x176>
 800b540:	4b19      	ldr	r3, [pc, #100]	; (800b5a8 <mem_malloc+0x1d0>)
 800b542:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b546:	491c      	ldr	r1, [pc, #112]	; (800b5b8 <mem_malloc+0x1e0>)
 800b548:	4819      	ldr	r0, [pc, #100]	; (800b5b0 <mem_malloc+0x1d8>)
 800b54a:	f009 fb27 	bl	8014b9c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	f003 0303 	and.w	r3, r3, #3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d006      	beq.n	800b566 <mem_malloc+0x18e>
 800b558:	4b13      	ldr	r3, [pc, #76]	; (800b5a8 <mem_malloc+0x1d0>)
 800b55a:	f240 22d7 	movw	r2, #727	; 0x2d7
 800b55e:	4917      	ldr	r1, [pc, #92]	; (800b5bc <mem_malloc+0x1e4>)
 800b560:	4813      	ldr	r0, [pc, #76]	; (800b5b0 <mem_malloc+0x1d8>)
 800b562:	f009 fb1b 	bl	8014b9c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	3308      	adds	r3, #8
 800b56a:	e010      	b.n	800b58e <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800b56c:	4b0c      	ldr	r3, [pc, #48]	; (800b5a0 <mem_malloc+0x1c8>)
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	8bfb      	ldrh	r3, [r7, #30]
 800b572:	4413      	add	r3, r2
 800b574:	881b      	ldrh	r3, [r3, #0]
 800b576:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b578:	8bfa      	ldrh	r2, [r7, #30]
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b580:	429a      	cmp	r2, r3
 800b582:	f4ff af4e 	bcc.w	800b422 <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b586:	4804      	ldr	r0, [pc, #16]	; (800b598 <mem_malloc+0x1c0>)
 800b588:	f009 fa6f 	bl	8014a6a <sys_mutex_unlock>
  return NULL;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3720      	adds	r7, #32
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20004aac 	.word	0x20004aac
 800b59c:	20004aa8 	.word	0x20004aa8
 800b5a0:	20004aa0 	.word	0x20004aa0
 800b5a4:	20004aa4 	.word	0x20004aa4
 800b5a8:	080166b0 	.word	0x080166b0
 800b5ac:	08016828 	.word	0x08016828
 800b5b0:	080166f8 	.word	0x080166f8
 800b5b4:	08016844 	.word	0x08016844
 800b5b8:	08016874 	.word	0x08016874
 800b5bc:	080168a4 	.word	0x080168a4

0800b5c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	f023 0303 	bic.w	r3, r3, #3
 800b5da:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e011      	b.n	800b606 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3301      	adds	r3, #1
 800b604:	60fb      	str	r3, [r7, #12]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	885b      	ldrh	r3, [r3, #2]
 800b60a:	461a      	mov	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4293      	cmp	r3, r2
 800b610:	dbe7      	blt.n	800b5e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	bc80      	pop	{r7}
 800b61c:	4770      	bx	lr
	...

0800b620 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b626:	2300      	movs	r3, #0
 800b628:	80fb      	strh	r3, [r7, #6]
 800b62a:	e009      	b.n	800b640 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	4a08      	ldr	r2, [pc, #32]	; (800b650 <memp_init+0x30>)
 800b630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff ffc3 	bl	800b5c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b63a:	88fb      	ldrh	r3, [r7, #6]
 800b63c:	3301      	adds	r3, #1
 800b63e:	80fb      	strh	r3, [r7, #6]
 800b640:	88fb      	ldrh	r3, [r7, #6]
 800b642:	2b0c      	cmp	r3, #12
 800b644:	d9f2      	bls.n	800b62c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b646:	bf00      	nop
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	080186f0 	.word	0x080186f0

0800b654 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b65c:	f009 fa38 	bl	8014ad0 <sys_arch_protect>
 800b660:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d015      	beq.n	800b69c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	6812      	ldr	r2, [r2, #0]
 800b678:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f003 0303 	and.w	r3, r3, #3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d006      	beq.n	800b692 <do_memp_malloc_pool+0x3e>
 800b684:	4b09      	ldr	r3, [pc, #36]	; (800b6ac <do_memp_malloc_pool+0x58>)
 800b686:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800b68a:	4909      	ldr	r1, [pc, #36]	; (800b6b0 <do_memp_malloc_pool+0x5c>)
 800b68c:	4809      	ldr	r0, [pc, #36]	; (800b6b4 <do_memp_malloc_pool+0x60>)
 800b68e:	f009 fa85 	bl	8014b9c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f009 fa2a 	bl	8014aec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	e003      	b.n	800b6a4 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f009 fa25 	bl	8014aec <sys_arch_unprotect>
  return NULL;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	080168c8 	.word	0x080168c8
 800b6b0:	080168f8 	.word	0x080168f8
 800b6b4:	0801691c 	.word	0x0801691c

0800b6b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	4603      	mov	r3, r0
 800b6c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	2b0c      	cmp	r3, #12
 800b6c6:	d908      	bls.n	800b6da <memp_malloc+0x22>
 800b6c8:	4b0a      	ldr	r3, [pc, #40]	; (800b6f4 <memp_malloc+0x3c>)
 800b6ca:	f240 1287 	movw	r2, #391	; 0x187
 800b6ce:	490a      	ldr	r1, [pc, #40]	; (800b6f8 <memp_malloc+0x40>)
 800b6d0:	480a      	ldr	r0, [pc, #40]	; (800b6fc <memp_malloc+0x44>)
 800b6d2:	f009 fa63 	bl	8014b9c <iprintf>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e008      	b.n	800b6ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b6da:	79fb      	ldrb	r3, [r7, #7]
 800b6dc:	4a08      	ldr	r2, [pc, #32]	; (800b700 <memp_malloc+0x48>)
 800b6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff ffb6 	bl	800b654 <do_memp_malloc_pool>
 800b6e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3710      	adds	r7, #16
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	080168c8 	.word	0x080168c8
 800b6f8:	08016958 	.word	0x08016958
 800b6fc:	0801691c 	.word	0x0801691c
 800b700:	080186f0 	.word	0x080186f0

0800b704 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	f003 0303 	and.w	r3, r3, #3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d006      	beq.n	800b726 <do_memp_free_pool+0x22>
 800b718:	4b0d      	ldr	r3, [pc, #52]	; (800b750 <do_memp_free_pool+0x4c>)
 800b71a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b71e:	490d      	ldr	r1, [pc, #52]	; (800b754 <do_memp_free_pool+0x50>)
 800b720:	480d      	ldr	r0, [pc, #52]	; (800b758 <do_memp_free_pool+0x54>)
 800b722:	f009 fa3b 	bl	8014b9c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b72a:	f009 f9d1 	bl	8014ad0 <sys_arch_protect>
 800b72e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	689b      	ldr	r3, [r3, #8]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b742:	68b8      	ldr	r0, [r7, #8]
 800b744:	f009 f9d2 	bl	8014aec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b748:	bf00      	nop
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	080168c8 	.word	0x080168c8
 800b754:	08016978 	.word	0x08016978
 800b758:	0801691c 	.word	0x0801691c

0800b75c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	6039      	str	r1, [r7, #0]
 800b766:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b768:	79fb      	ldrb	r3, [r7, #7]
 800b76a:	2b0c      	cmp	r3, #12
 800b76c:	d907      	bls.n	800b77e <memp_free+0x22>
 800b76e:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <memp_free+0x44>)
 800b770:	f240 12db 	movw	r2, #475	; 0x1db
 800b774:	490b      	ldr	r1, [pc, #44]	; (800b7a4 <memp_free+0x48>)
 800b776:	480c      	ldr	r0, [pc, #48]	; (800b7a8 <memp_free+0x4c>)
 800b778:	f009 fa10 	bl	8014b9c <iprintf>
 800b77c:	e00c      	b.n	800b798 <memp_free+0x3c>

  if (mem == NULL) {
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d008      	beq.n	800b796 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	4a09      	ldr	r2, [pc, #36]	; (800b7ac <memp_free+0x50>)
 800b788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	4618      	mov	r0, r3
 800b790:	f7ff ffb8 	bl	800b704 <do_memp_free_pool>
 800b794:	e000      	b.n	800b798 <memp_free+0x3c>
    return;
 800b796:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	080168c8 	.word	0x080168c8
 800b7a4:	08016998 	.word	0x08016998
 800b7a8:	0801691c 	.word	0x0801691c
 800b7ac:	080186f0 	.word	0x080186f0

0800b7b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b7b4:	bf00      	nop
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bc80      	pop	{r7}
 800b7ba:	4770      	bx	lr

0800b7bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <netif_add+0x20>
 800b7d0:	4b21      	ldr	r3, [pc, #132]	; (800b858 <netif_add+0x9c>)
 800b7d2:	22fb      	movs	r2, #251	; 0xfb
 800b7d4:	4921      	ldr	r1, [pc, #132]	; (800b85c <netif_add+0xa0>)
 800b7d6:	4822      	ldr	r0, [pc, #136]	; (800b860 <netif_add+0xa4>)
 800b7d8:	f009 f9e0 	bl	8014b9c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2203      	movs	r2, #3
 800b7fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800b80a:	4b16      	ldr	r3, [pc, #88]	; (800b864 <netif_add+0xa8>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	b2d1      	uxtb	r1, r2
 800b812:	4a14      	ldr	r2, [pc, #80]	; (800b864 <netif_add+0xa8>)
 800b814:	7011      	strb	r1, [r2, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6a3a      	ldr	r2, [r7, #32]
 800b820:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f81f 	bl	800b86c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	4798      	blx	r3
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <netif_add+0x82>
    return NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	e007      	b.n	800b84e <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b83e:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <netif_add+0xac>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b846:	4a08      	ldr	r2, [pc, #32]	; (800b868 <netif_add+0xac>)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800b84c:	68fb      	ldr	r3, [r7, #12]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	080169b4 	.word	0x080169b4
 800b85c:	080169e8 	.word	0x080169e8
 800b860:	08016a00 	.word	0x08016a00
 800b864:	20004ae4 	.word	0x20004ae4
 800b868:	2000bb54 	.word	0x2000bb54

0800b86c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d003      	beq.n	800b888 <netif_set_addr+0x1c>
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10c      	bne.n	800b8a2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800b888:	68b9      	ldr	r1, [r7, #8]
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 f81a 	bl	800b8c4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 f861 	bl	800b95a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f84a 	bl	800b934 <netif_set_gw>
 800b8a0:	e00c      	b.n	800b8bc <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f000 f858 	bl	800b95a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	68f8      	ldr	r0, [r7, #12]
 800b8ae:	f000 f841 	bl	800b934 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f000 f805 	bl	800b8c4 <netif_set_ipaddr>
  }
}
 800b8ba:	bf00      	nop
 800b8bc:	bf00      	nop
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d003      	beq.n	800b8dc <netif_set_ipaddr+0x18>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	e002      	b.n	800b8e2 <netif_set_ipaddr+0x1e>
 800b8dc:	4b14      	ldr	r3, [pc, #80]	; (800b930 <netif_set_ipaddr+0x6c>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d01c      	beq.n	800b928 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	f107 020c 	add.w	r2, r7, #12
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f002 fca3 	bl	800e244 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	3304      	adds	r3, #4
 800b902:	f107 020c 	add.w	r2, r7, #12
 800b906:	4611      	mov	r1, r2
 800b908:	4618      	mov	r0, r3
 800b90a:	f006 fd97 	bl	801243c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <netif_set_ipaddr+0x56>
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	e000      	b.n	800b91c <netif_set_ipaddr+0x58>
 800b91a:	2300      	movs	r3, #0
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b920:	2101      	movs	r1, #1
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f85d 	bl	800b9e2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800b928:	bf00      	nop
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	08018764 	.word	0x08018764

0800b934 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d002      	beq.n	800b94a <netif_set_gw+0x16>
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	e000      	b.n	800b94c <netif_set_gw+0x18>
 800b94a:	2300      	movs	r3, #0
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr

0800b95a <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800b95a:	b480      	push	{r7}
 800b95c:	b083      	sub	sp, #12
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d002      	beq.n	800b970 <netif_set_netmask+0x16>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	e000      	b.n	800b972 <netif_set_netmask+0x18>
 800b970:	2300      	movs	r3, #0
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bc80      	pop	{r7}
 800b97e:	4770      	bx	lr

0800b980 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b988:	4a03      	ldr	r2, [pc, #12]	; (800b998 <netif_set_default+0x18>)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b98e:	bf00      	nop
 800b990:	370c      	adds	r7, #12
 800b992:	46bd      	mov	sp, r7
 800b994:	bc80      	pop	{r7}
 800b996:	4770      	bx	lr
 800b998:	2000bb58 	.word	0x2000bb58

0800b99c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d113      	bne.n	800b9da <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b9b8:	f043 0301 	orr.w	r3, r3, #1
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b9ca:	f003 0304 	and.w	r3, r3, #4
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800b9d2:	2103      	movs	r1, #3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 f804 	bl	800b9e2 <netif_issue_reports>
    }
  }
}
 800b9da:	bf00      	nop
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d011      	beq.n	800ba1c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00c      	beq.n	800ba1c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba08:	f003 0308 	and.w	r3, r3, #8
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d005      	beq.n	800ba1c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f007 fc42 	bl	80132a0 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba32:	f003 0301 	and.w	r3, r3, #1
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d012      	beq.n	800ba60 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba40:	f023 0301 	bic.w	r3, r3, #1
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba52:	f003 0308 	and.w	r3, r3, #8
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d002      	beq.n	800ba60 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f006 ffe6 	bl	8012a2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ba60:	bf00      	nop
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d11b      	bne.n	800bab6 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba84:	f043 0304 	orr.w	r3, r3, #4
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800ba9e:	2103      	movs	r1, #3
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f7ff ff9e 	bl	800b9e2 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <netif_set_link_up+0x4e>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	69db      	ldr	r3, [r3, #28]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	4798      	blx	r3
  }
}
 800bab6:	bf00      	nop
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b082      	sub	sp, #8
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d010      	beq.n	800baf6 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bada:	f023 0304 	bic.w	r3, r3, #4
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	69db      	ldr	r3, [r3, #28]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <netif_set_link_down+0x38>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
  }
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
  if (netif) {
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d002      	beq.n	800bb14 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	61da      	str	r2, [r3, #28]
  }
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bc80      	pop	{r7}
 800bb1c:	4770      	bx	lr
	...

0800bb20 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bb26:	f008 ffd3 	bl	8014ad0 <sys_arch_protect>
 800bb2a:	6038      	str	r0, [r7, #0]
 800bb2c:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <pbuf_free_ooseq+0x4c>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	6838      	ldr	r0, [r7, #0]
 800bb34:	f008 ffda 	bl	8014aec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb38:	4b0d      	ldr	r3, [pc, #52]	; (800bb70 <pbuf_free_ooseq+0x50>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	607b      	str	r3, [r7, #4]
 800bb3e:	e00f      	b.n	800bb60 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d008      	beq.n	800bb5a <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 ffe4 	bl	800db1a <tcp_segs_free>
      pcb->ooseq = NULL;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800bb58:	e005      	b.n	800bb66 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	607b      	str	r3, [r7, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1ec      	bne.n	800bb40 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	2000bb5c 	.word	0x2000bb5c
 800bb70:	2000bb64 	.word	0x2000bb64

0800bb74 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bb7c:	f7ff ffd0 	bl	800bb20 <pbuf_free_ooseq>
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bb8e:	f008 ff9f 	bl	8014ad0 <sys_arch_protect>
 800bb92:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bb94:	4b10      	ldr	r3, [pc, #64]	; (800bbd8 <pbuf_pool_is_empty+0x50>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bb9a:	4b0f      	ldr	r3, [pc, #60]	; (800bbd8 <pbuf_pool_is_empty+0x50>)
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f008 ffa3 	bl	8014aec <sys_arch_unprotect>

  if (!queued) {
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d110      	bne.n	800bbce <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bbac:	2200      	movs	r2, #0
 800bbae:	2100      	movs	r1, #0
 800bbb0:	480a      	ldr	r0, [pc, #40]	; (800bbdc <pbuf_pool_is_empty+0x54>)
 800bbb2:	f7fc f9f3 	bl	8007f9c <tcpip_callback_with_block>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d008      	beq.n	800bbce <pbuf_pool_is_empty+0x46>
 800bbbc:	f008 ff88 	bl	8014ad0 <sys_arch_protect>
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <pbuf_pool_is_empty+0x50>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	701a      	strb	r2, [r3, #0]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f008 ff8f 	bl	8014aec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bbce:	bf00      	nop
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	2000bb5c 	.word	0x2000bb5c
 800bbdc:	0800bb75 	.word	0x0800bb75

0800bbe0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b088      	sub	sp, #32
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	71fb      	strb	r3, [r7, #7]
 800bbea:	460b      	mov	r3, r1
 800bbec:	80bb      	strh	r3, [r7, #4]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800bbf2:	79fb      	ldrb	r3, [r7, #7]
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	d81c      	bhi.n	800bc32 <pbuf_alloc+0x52>
 800bbf8:	a201      	add	r2, pc, #4	; (adr r2, 800bc00 <pbuf_alloc+0x20>)
 800bbfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbfe:	bf00      	nop
 800bc00:	0800bc15 	.word	0x0800bc15
 800bc04:	0800bc1b 	.word	0x0800bc1b
 800bc08:	0800bc21 	.word	0x0800bc21
 800bc0c:	0800bc27 	.word	0x0800bc27
 800bc10:	0800bc2d 	.word	0x0800bc2d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bc14:	2336      	movs	r3, #54	; 0x36
 800bc16:	82fb      	strh	r3, [r7, #22]
    break;
 800bc18:	e014      	b.n	800bc44 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bc1a:	2322      	movs	r3, #34	; 0x22
 800bc1c:	82fb      	strh	r3, [r7, #22]
    break;
 800bc1e:	e011      	b.n	800bc44 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bc20:	230e      	movs	r3, #14
 800bc22:	82fb      	strh	r3, [r7, #22]
    break;
 800bc24:	e00e      	b.n	800bc44 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800bc26:	2300      	movs	r3, #0
 800bc28:	82fb      	strh	r3, [r7, #22]
    break;
 800bc2a:	e00b      	b.n	800bc44 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	82fb      	strh	r3, [r7, #22]
    break;
 800bc30:	e008      	b.n	800bc44 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800bc32:	4ba5      	ldr	r3, [pc, #660]	; (800bec8 <pbuf_alloc+0x2e8>)
 800bc34:	f44f 728b 	mov.w	r2, #278	; 0x116
 800bc38:	49a4      	ldr	r1, [pc, #656]	; (800becc <pbuf_alloc+0x2ec>)
 800bc3a:	48a5      	ldr	r0, [pc, #660]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bc3c:	f008 ffae 	bl	8014b9c <iprintf>
    return NULL;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e15d      	b.n	800bf00 <pbuf_alloc+0x320>
  }

  switch (type) {
 800bc44:	79bb      	ldrb	r3, [r7, #6]
 800bc46:	2b03      	cmp	r3, #3
 800bc48:	d00d      	beq.n	800bc66 <pbuf_alloc+0x86>
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	f300 8133 	bgt.w	800beb6 <pbuf_alloc+0x2d6>
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 80d0 	beq.w	800bdf6 <pbuf_alloc+0x216>
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f2c0 812d 	blt.w	800beb6 <pbuf_alloc+0x2d6>
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	f200 8129 	bhi.w	800beb6 <pbuf_alloc+0x2d6>
 800bc64:	e10d      	b.n	800be82 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bc66:	200c      	movs	r0, #12
 800bc68:	f7ff fd26 	bl	800b6b8 <memp_malloc>
 800bc6c:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d103      	bne.n	800bc7c <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800bc74:	f7ff ff88 	bl	800bb88 <pbuf_pool_is_empty>
      return NULL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	e141      	b.n	800bf00 <pbuf_alloc+0x320>
    }
    p->type = type;
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	79ba      	ldrb	r2, [r7, #6]
 800bc80:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	2200      	movs	r2, #0
 800bc86:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800bc88:	8afb      	ldrh	r3, [r7, #22]
 800bc8a:	3310      	adds	r3, #16
 800bc8c:	69fa      	ldr	r2, [r7, #28]
 800bc8e:	4413      	add	r3, r2
 800bc90:	3303      	adds	r3, #3
 800bc92:	f023 0303 	bic.w	r3, r3, #3
 800bc96:	461a      	mov	r2, r3
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	f003 0303 	and.w	r3, r3, #3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d006      	beq.n	800bcb6 <pbuf_alloc+0xd6>
 800bca8:	4b87      	ldr	r3, [pc, #540]	; (800bec8 <pbuf_alloc+0x2e8>)
 800bcaa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bcae:	4989      	ldr	r1, [pc, #548]	; (800bed4 <pbuf_alloc+0x2f4>)
 800bcb0:	4887      	ldr	r0, [pc, #540]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bcb2:	f008 ff73 	bl	8014b9c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	88ba      	ldrh	r2, [r7, #4]
 800bcba:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800bcbc:	8afb      	ldrh	r3, [r7, #22]
 800bcbe:	3303      	adds	r3, #3
 800bcc0:	f023 0303 	bic.w	r3, r3, #3
 800bcc4:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800bcc8:	88bb      	ldrh	r3, [r7, #4]
 800bcca:	4293      	cmp	r3, r2
 800bccc:	bf28      	it	cs
 800bcce:	4613      	movcs	r3, r2
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	69fa      	ldr	r2, [r7, #28]
 800bcdc:	8952      	ldrh	r2, [r2, #10]
 800bcde:	441a      	add	r2, r3
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d906      	bls.n	800bcf8 <pbuf_alloc+0x118>
 800bcea:	4b77      	ldr	r3, [pc, #476]	; (800bec8 <pbuf_alloc+0x2e8>)
 800bcec:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800bcf0:	4979      	ldr	r1, [pc, #484]	; (800bed8 <pbuf_alloc+0x2f8>)
 800bcf2:	4877      	ldr	r0, [pc, #476]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bcf4:	f008 ff52 	bl	8014b9c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bcf8:	8afb      	ldrh	r3, [r7, #22]
 800bcfa:	3303      	adds	r3, #3
 800bcfc:	f023 0303 	bic.w	r3, r3, #3
 800bd00:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd04:	d106      	bne.n	800bd14 <pbuf_alloc+0x134>
 800bd06:	4b70      	ldr	r3, [pc, #448]	; (800bec8 <pbuf_alloc+0x2e8>)
 800bd08:	f240 1231 	movw	r2, #305	; 0x131
 800bd0c:	4973      	ldr	r1, [pc, #460]	; (800bedc <pbuf_alloc+0x2fc>)
 800bd0e:	4870      	ldr	r0, [pc, #448]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bd10:	f008 ff44 	bl	8014b9c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	2201      	movs	r2, #1
 800bd18:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800bd1e:	88bb      	ldrh	r3, [r7, #4]
 800bd20:	69fa      	ldr	r2, [r7, #28]
 800bd22:	8952      	ldrh	r2, [r2, #10]
 800bd24:	1a9b      	subs	r3, r3, r2
 800bd26:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800bd28:	e061      	b.n	800bdee <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bd2a:	200c      	movs	r0, #12
 800bd2c:	f7ff fcc4 	bl	800b6b8 <memp_malloc>
 800bd30:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d106      	bne.n	800bd46 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800bd38:	f7ff ff26 	bl	800bb88 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800bd3c:	69f8      	ldr	r0, [r7, #28]
 800bd3e:	f000 fac1 	bl	800c2c4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e0dc      	b.n	800bf00 <pbuf_alloc+0x320>
      }
      q->type = type;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	79ba      	ldrb	r2, [r7, #6]
 800bd4a:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd64:	4293      	cmp	r3, r2
 800bd66:	dd06      	ble.n	800bd76 <pbuf_alloc+0x196>
 800bd68:	4b57      	ldr	r3, [pc, #348]	; (800bec8 <pbuf_alloc+0x2e8>)
 800bd6a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800bd6e:	495c      	ldr	r1, [pc, #368]	; (800bee0 <pbuf_alloc+0x300>)
 800bd70:	4857      	ldr	r0, [pc, #348]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bd72:	f008 ff13 	bl	8014b9c <iprintf>
      q->tot_len = (u16_t)rem_len;
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd86:	bf28      	it	cs
 800bd88:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f103 0210 	add.w	r2, r3, #16
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f003 0303 	and.w	r3, r3, #3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d006      	beq.n	800bdb6 <pbuf_alloc+0x1d6>
 800bda8:	4b47      	ldr	r3, [pc, #284]	; (800bec8 <pbuf_alloc+0x2e8>)
 800bdaa:	f240 1251 	movw	r2, #337	; 0x151
 800bdae:	494d      	ldr	r1, [pc, #308]	; (800bee4 <pbuf_alloc+0x304>)
 800bdb0:	4847      	ldr	r0, [pc, #284]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bdb2:	f008 fef3 	bl	8014b9c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	69fa      	ldr	r2, [r7, #28]
 800bdbc:	8952      	ldrh	r2, [r2, #10]
 800bdbe:	441a      	add	r2, r3
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d906      	bls.n	800bdd8 <pbuf_alloc+0x1f8>
 800bdca:	4b3f      	ldr	r3, [pc, #252]	; (800bec8 <pbuf_alloc+0x2e8>)
 800bdcc:	f240 1253 	movw	r2, #339	; 0x153
 800bdd0:	4941      	ldr	r1, [pc, #260]	; (800bed8 <pbuf_alloc+0x2f8>)
 800bdd2:	483f      	ldr	r0, [pc, #252]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bdd4:	f008 fee2 	bl	8014b9c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2201      	movs	r2, #1
 800bddc:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	895b      	ldrh	r3, [r3, #10]
 800bde2:	461a      	mov	r2, r3
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	1a9b      	subs	r3, r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	dc9a      	bgt.n	800bd2a <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800bdf4:	e07d      	b.n	800bef2 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800bdf6:	8afb      	ldrh	r3, [r7, #22]
 800bdf8:	3313      	adds	r3, #19
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	b29a      	uxth	r2, r3
 800be02:	88bb      	ldrh	r3, [r7, #4]
 800be04:	3303      	adds	r3, #3
 800be06:	b29b      	uxth	r3, r3
 800be08:	f023 0303 	bic.w	r3, r3, #3
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	4413      	add	r3, r2
 800be10:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800be12:	897a      	ldrh	r2, [r7, #10]
 800be14:	88bb      	ldrh	r3, [r7, #4]
 800be16:	3303      	adds	r3, #3
 800be18:	f023 0303 	bic.w	r3, r3, #3
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d201      	bcs.n	800be24 <pbuf_alloc+0x244>
        return NULL;
 800be20:	2300      	movs	r3, #0
 800be22:	e06d      	b.n	800bf00 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800be24:	897b      	ldrh	r3, [r7, #10]
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff fad6 	bl	800b3d8 <mem_malloc>
 800be2c:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <pbuf_alloc+0x258>
      return NULL;
 800be34:	2300      	movs	r3, #0
 800be36:	e063      	b.n	800bf00 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800be38:	8afb      	ldrh	r3, [r7, #22]
 800be3a:	3310      	adds	r3, #16
 800be3c:	69fa      	ldr	r2, [r7, #28]
 800be3e:	4413      	add	r3, r2
 800be40:	3303      	adds	r3, #3
 800be42:	f023 0303 	bic.w	r3, r3, #3
 800be46:	461a      	mov	r2, r3
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	88ba      	ldrh	r2, [r7, #4]
 800be50:	811a      	strh	r2, [r3, #8]
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	891a      	ldrh	r2, [r3, #8]
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	2200      	movs	r2, #0
 800be5e:	601a      	str	r2, [r3, #0]
    p->type = type;
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	79ba      	ldrb	r2, [r7, #6]
 800be64:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f003 0303 	and.w	r3, r3, #3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d03e      	beq.n	800bef0 <pbuf_alloc+0x310>
 800be72:	4b15      	ldr	r3, [pc, #84]	; (800bec8 <pbuf_alloc+0x2e8>)
 800be74:	f44f 72bb 	mov.w	r2, #374	; 0x176
 800be78:	491b      	ldr	r1, [pc, #108]	; (800bee8 <pbuf_alloc+0x308>)
 800be7a:	4815      	ldr	r0, [pc, #84]	; (800bed0 <pbuf_alloc+0x2f0>)
 800be7c:	f008 fe8e 	bl	8014b9c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800be80:	e036      	b.n	800bef0 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be82:	200b      	movs	r0, #11
 800be84:	f7ff fc18 	bl	800b6b8 <memp_malloc>
 800be88:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800be90:	2300      	movs	r3, #0
 800be92:	e035      	b.n	800bf00 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	2200      	movs	r2, #0
 800be98:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	88ba      	ldrh	r2, [r7, #4]
 800be9e:	811a      	strh	r2, [r3, #8]
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	891a      	ldrh	r2, [r3, #8]
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
    p->type = type;
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	79ba      	ldrb	r2, [r7, #6]
 800beb2:	731a      	strb	r2, [r3, #12]
    break;
 800beb4:	e01d      	b.n	800bef2 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800beb6:	4b04      	ldr	r3, [pc, #16]	; (800bec8 <pbuf_alloc+0x2e8>)
 800beb8:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800bebc:	490b      	ldr	r1, [pc, #44]	; (800beec <pbuf_alloc+0x30c>)
 800bebe:	4804      	ldr	r0, [pc, #16]	; (800bed0 <pbuf_alloc+0x2f0>)
 800bec0:	f008 fe6c 	bl	8014b9c <iprintf>
    return NULL;
 800bec4:	2300      	movs	r3, #0
 800bec6:	e01b      	b.n	800bf00 <pbuf_alloc+0x320>
 800bec8:	08016a28 	.word	0x08016a28
 800becc:	08016a58 	.word	0x08016a58
 800bed0:	08016a74 	.word	0x08016a74
 800bed4:	08016a9c 	.word	0x08016a9c
 800bed8:	08016acc 	.word	0x08016acc
 800bedc:	08016b00 	.word	0x08016b00
 800bee0:	08016b34 	.word	0x08016b34
 800bee4:	08016b48 	.word	0x08016b48
 800bee8:	08016b78 	.word	0x08016b78
 800beec:	08016ba4 	.word	0x08016ba4
    break;
 800bef0:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	2201      	movs	r2, #1
 800bef6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	2200      	movs	r2, #0
 800befc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800befe:	69fb      	ldr	r3, [r7, #28]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3720      	adds	r7, #32
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	4603      	mov	r3, r0
 800bf12:	71fb      	strb	r3, [r7, #7]
 800bf14:	460b      	mov	r3, r1
 800bf16:	80bb      	strh	r3, [r7, #4]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800bf1c:	79fb      	ldrb	r3, [r7, #7]
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	d81b      	bhi.n	800bf5a <pbuf_alloced_custom+0x52>
 800bf22:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <pbuf_alloced_custom+0x20>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf43 	.word	0x0800bf43
 800bf30:	0800bf49 	.word	0x0800bf49
 800bf34:	0800bf4f 	.word	0x0800bf4f
 800bf38:	0800bf55 	.word	0x0800bf55
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bf3c:	2336      	movs	r3, #54	; 0x36
 800bf3e:	81fb      	strh	r3, [r7, #14]
    break;
 800bf40:	e014      	b.n	800bf6c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bf42:	2322      	movs	r3, #34	; 0x22
 800bf44:	81fb      	strh	r3, [r7, #14]
    break;
 800bf46:	e011      	b.n	800bf6c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bf48:	230e      	movs	r3, #14
 800bf4a:	81fb      	strh	r3, [r7, #14]
    break;
 800bf4c:	e00e      	b.n	800bf6c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	81fb      	strh	r3, [r7, #14]
    break;
 800bf52:	e00b      	b.n	800bf6c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	81fb      	strh	r3, [r7, #14]
    break;
 800bf58:	e008      	b.n	800bf6c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800bf5a:	4b1d      	ldr	r3, [pc, #116]	; (800bfd0 <pbuf_alloced_custom+0xc8>)
 800bf5c:	f240 12c5 	movw	r2, #453	; 0x1c5
 800bf60:	491c      	ldr	r1, [pc, #112]	; (800bfd4 <pbuf_alloced_custom+0xcc>)
 800bf62:	481d      	ldr	r0, [pc, #116]	; (800bfd8 <pbuf_alloced_custom+0xd0>)
 800bf64:	f008 fe1a 	bl	8014b9c <iprintf>
    return NULL;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	e02d      	b.n	800bfc8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bf6c:	89fb      	ldrh	r3, [r7, #14]
 800bf6e:	3303      	adds	r3, #3
 800bf70:	f023 0203 	bic.w	r2, r3, #3
 800bf74:	88bb      	ldrh	r3, [r7, #4]
 800bf76:	441a      	add	r2, r3
 800bf78:	8bbb      	ldrh	r3, [r7, #28]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d901      	bls.n	800bf82 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e022      	b.n	800bfc8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800bf88:	69bb      	ldr	r3, [r7, #24]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d008      	beq.n	800bfa0 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bf8e:	89fb      	ldrh	r3, [r7, #14]
 800bf90:	3303      	adds	r3, #3
 800bf92:	f023 0303 	bic.w	r3, r3, #3
 800bf96:	69ba      	ldr	r2, [r7, #24]
 800bf98:	441a      	add	r2, r3
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	605a      	str	r2, [r3, #4]
 800bf9e:	e002      	b.n	800bfa6 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	88ba      	ldrh	r2, [r7, #4]
 800bfb0:	811a      	strh	r2, [r3, #8]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	891a      	ldrh	r2, [r3, #8]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	79ba      	ldrb	r2, [r7, #6]
 800bfbe:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800bfc6:	683b      	ldr	r3, [r7, #0]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	08016a28 	.word	0x08016a28
 800bfd4:	08016bc0 	.word	0x08016bc0
 800bfd8:	08016a74 	.word	0x08016a74

0800bfdc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d106      	bne.n	800bffc <pbuf_realloc+0x20>
 800bfee:	4b4b      	ldr	r3, [pc, #300]	; (800c11c <pbuf_realloc+0x140>)
 800bff0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800bff4:	494a      	ldr	r1, [pc, #296]	; (800c120 <pbuf_realloc+0x144>)
 800bff6:	484b      	ldr	r0, [pc, #300]	; (800c124 <pbuf_realloc+0x148>)
 800bff8:	f008 fdd0 	bl	8014b9c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	7b1b      	ldrb	r3, [r3, #12]
 800c000:	2b03      	cmp	r3, #3
 800c002:	d012      	beq.n	800c02a <pbuf_realloc+0x4e>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7b1b      	ldrb	r3, [r3, #12]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d00e      	beq.n	800c02a <pbuf_realloc+0x4e>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	7b1b      	ldrb	r3, [r3, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00a      	beq.n	800c02a <pbuf_realloc+0x4e>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	7b1b      	ldrb	r3, [r3, #12]
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d006      	beq.n	800c02a <pbuf_realloc+0x4e>
 800c01c:	4b3f      	ldr	r3, [pc, #252]	; (800c11c <pbuf_realloc+0x140>)
 800c01e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c022:	4941      	ldr	r1, [pc, #260]	; (800c128 <pbuf_realloc+0x14c>)
 800c024:	483f      	ldr	r0, [pc, #252]	; (800c124 <pbuf_realloc+0x148>)
 800c026:	f008 fdb9 	bl	8014b9c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	891b      	ldrh	r3, [r3, #8]
 800c02e:	887a      	ldrh	r2, [r7, #2]
 800c030:	429a      	cmp	r2, r3
 800c032:	d26e      	bcs.n	800c112 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800c034:	887b      	ldrh	r3, [r7, #2]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	8912      	ldrh	r2, [r2, #8]
 800c03a:	1a9b      	subs	r3, r3, r2
 800c03c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c03e:	887b      	ldrh	r3, [r7, #2]
 800c040:	827b      	strh	r3, [r7, #18]
  q = p;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c046:	e025      	b.n	800c094 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	895b      	ldrh	r3, [r3, #10]
 800c04c:	8a7a      	ldrh	r2, [r7, #18]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c058:	4293      	cmp	r3, r2
 800c05a:	dd06      	ble.n	800c06a <pbuf_realloc+0x8e>
 800c05c:	4b2f      	ldr	r3, [pc, #188]	; (800c11c <pbuf_realloc+0x140>)
 800c05e:	f240 220b 	movw	r2, #523	; 0x20b
 800c062:	4932      	ldr	r1, [pc, #200]	; (800c12c <pbuf_realloc+0x150>)
 800c064:	482f      	ldr	r0, [pc, #188]	; (800c124 <pbuf_realloc+0x148>)
 800c066:	f008 fd99 	bl	8014b9c <iprintf>
    q->tot_len += (u16_t)grow;
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	891a      	ldrh	r2, [r3, #8]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	b29b      	uxth	r3, r3
 800c072:	4413      	add	r3, r2
 800c074:	b29a      	uxth	r2, r3
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <pbuf_realloc+0xb8>
 800c086:	4b25      	ldr	r3, [pc, #148]	; (800c11c <pbuf_realloc+0x140>)
 800c088:	f240 220f 	movw	r2, #527	; 0x20f
 800c08c:	4928      	ldr	r1, [pc, #160]	; (800c130 <pbuf_realloc+0x154>)
 800c08e:	4825      	ldr	r0, [pc, #148]	; (800c124 <pbuf_realloc+0x148>)
 800c090:	f008 fd84 	bl	8014b9c <iprintf>
  while (rem_len > q->len) {
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	895b      	ldrh	r3, [r3, #10]
 800c098:	8a7a      	ldrh	r2, [r7, #18]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d8d4      	bhi.n	800c048 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	7b1b      	ldrb	r3, [r3, #12]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d121      	bne.n	800c0ea <pbuf_realloc+0x10e>
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	895b      	ldrh	r3, [r3, #10]
 800c0aa:	8a7a      	ldrh	r2, [r7, #18]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d01c      	beq.n	800c0ea <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	7b5b      	ldrb	r3, [r3, #13]
 800c0b4:	f003 0302 	and.w	r3, r3, #2
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d116      	bne.n	800c0ea <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	1ad3      	subs	r3, r2, r3
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	8a7b      	ldrh	r3, [r7, #18]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6978      	ldr	r0, [r7, #20]
 800c0d0:	f7ff f898 	bl	800b204 <mem_trim>
 800c0d4:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <pbuf_realloc+0x10e>
 800c0dc:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <pbuf_realloc+0x140>)
 800c0de:	f240 221d 	movw	r2, #541	; 0x21d
 800c0e2:	4914      	ldr	r1, [pc, #80]	; (800c134 <pbuf_realloc+0x158>)
 800c0e4:	480f      	ldr	r0, [pc, #60]	; (800c124 <pbuf_realloc+0x148>)
 800c0e6:	f008 fd59 	bl	8014b9c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	8a7a      	ldrh	r2, [r7, #18]
 800c0ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	895a      	ldrh	r2, [r3, #10]
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d004      	beq.n	800c10a <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4618      	mov	r0, r3
 800c106:	f000 f8dd 	bl	800c2c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	e000      	b.n	800c114 <pbuf_realloc+0x138>
    return;
 800c112:	bf00      	nop

}
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	08016a28 	.word	0x08016a28
 800c120:	08016be4 	.word	0x08016be4
 800c124:	08016a74 	.word	0x08016a74
 800c128:	08016bfc 	.word	0x08016bfc
 800c12c:	08016c18 	.word	0x08016c18
 800c130:	08016c2c 	.word	0x08016c2c
 800c134:	08016c44 	.word	0x08016c44

0800c138 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	807b      	strh	r3, [r7, #2]
 800c144:	4613      	mov	r3, r2
 800c146:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d106      	bne.n	800c15c <pbuf_header_impl+0x24>
 800c14e:	4b46      	ldr	r3, [pc, #280]	; (800c268 <pbuf_header_impl+0x130>)
 800c150:	f240 223f 	movw	r2, #575	; 0x23f
 800c154:	4945      	ldr	r1, [pc, #276]	; (800c26c <pbuf_header_impl+0x134>)
 800c156:	4846      	ldr	r0, [pc, #280]	; (800c270 <pbuf_header_impl+0x138>)
 800c158:	f008 fd20 	bl	8014b9c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800c15c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d002      	beq.n	800c16a <pbuf_header_impl+0x32>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <pbuf_header_impl+0x36>
    return 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	e078      	b.n	800c260 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c16e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c172:	2b00      	cmp	r3, #0
 800c174:	da10      	bge.n	800c198 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c176:	887b      	ldrh	r3, [r7, #2]
 800c178:	425b      	negs	r3, r3
 800c17a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	895b      	ldrh	r3, [r3, #10]
 800c180:	89fa      	ldrh	r2, [r7, #14]
 800c182:	429a      	cmp	r2, r3
 800c184:	d90a      	bls.n	800c19c <pbuf_header_impl+0x64>
 800c186:	4b38      	ldr	r3, [pc, #224]	; (800c268 <pbuf_header_impl+0x130>)
 800c188:	f240 2247 	movw	r2, #583	; 0x247
 800c18c:	4939      	ldr	r1, [pc, #228]	; (800c274 <pbuf_header_impl+0x13c>)
 800c18e:	4838      	ldr	r0, [pc, #224]	; (800c270 <pbuf_header_impl+0x138>)
 800c190:	f008 fd04 	bl	8014b9c <iprintf>
 800c194:	2301      	movs	r3, #1
 800c196:	e063      	b.n	800c260 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c198:	887b      	ldrh	r3, [r7, #2]
 800c19a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	7b1b      	ldrb	r3, [r3, #12]
 800c1a0:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c1a8:	89bb      	ldrh	r3, [r7, #12]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <pbuf_header_impl+0x7c>
 800c1ae:	89bb      	ldrh	r3, [r7, #12]
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d112      	bne.n	800c1da <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1bc:	425b      	negs	r3, r3
 800c1be:	441a      	add	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3310      	adds	r3, #16
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d238      	bcs.n	800c242 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e042      	b.n	800c260 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c1da:	89bb      	ldrh	r3, [r7, #12]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d002      	beq.n	800c1e6 <pbuf_header_impl+0xae>
 800c1e0:	89bb      	ldrh	r3, [r7, #12]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d124      	bne.n	800c230 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c1e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da0d      	bge.n	800c20a <pbuf_header_impl+0xd2>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	895b      	ldrh	r3, [r3, #10]
 800c1f2:	89fa      	ldrh	r2, [r7, #14]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d808      	bhi.n	800c20a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c200:	425b      	negs	r3, r3
 800c202:	441a      	add	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	605a      	str	r2, [r3, #4]
 800c208:	e011      	b.n	800c22e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800c20a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dd0b      	ble.n	800c22a <pbuf_header_impl+0xf2>
 800c212:	787b      	ldrb	r3, [r7, #1]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d008      	beq.n	800c22a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685a      	ldr	r2, [r3, #4]
 800c21c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c220:	425b      	negs	r3, r3
 800c222:	441a      	add	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	605a      	str	r2, [r3, #4]
 800c228:	e001      	b.n	800c22e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e018      	b.n	800c260 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c22e:	e008      	b.n	800c242 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c230:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <pbuf_header_impl+0x130>)
 800c232:	f240 2277 	movw	r2, #631	; 0x277
 800c236:	4910      	ldr	r1, [pc, #64]	; (800c278 <pbuf_header_impl+0x140>)
 800c238:	480d      	ldr	r0, [pc, #52]	; (800c270 <pbuf_header_impl+0x138>)
 800c23a:	f008 fcaf 	bl	8014b9c <iprintf>
    return 1;
 800c23e:	2301      	movs	r3, #1
 800c240:	e00e      	b.n	800c260 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	895a      	ldrh	r2, [r3, #10]
 800c246:	887b      	ldrh	r3, [r7, #2]
 800c248:	4413      	add	r3, r2
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	891a      	ldrh	r2, [r3, #8]
 800c254:	887b      	ldrh	r3, [r7, #2]
 800c256:	4413      	add	r3, r2
 800c258:	b29a      	uxth	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	08016a28 	.word	0x08016a28
 800c26c:	08016c60 	.word	0x08016c60
 800c270:	08016a74 	.word	0x08016a74
 800c274:	08016c6c 	.word	0x08016c6c
 800c278:	08016c8c 	.word	0x08016c8c

0800c27c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c288:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c28c:	2200      	movs	r2, #0
 800c28e:	4619      	mov	r1, r3
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff ff51 	bl	800c138 <pbuf_header_impl>
 800c296:	4603      	mov	r3, r0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c2ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff ff3f 	bl	800c138 <pbuf_header_impl>
 800c2ba:	4603      	mov	r3, r0
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b088      	sub	sp, #32
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10b      	bne.n	800c2ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d106      	bne.n	800c2e6 <pbuf_free+0x22>
 800c2d8:	4b41      	ldr	r3, [pc, #260]	; (800c3e0 <pbuf_free+0x11c>)
 800c2da:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c2de:	4941      	ldr	r1, [pc, #260]	; (800c3e4 <pbuf_free+0x120>)
 800c2e0:	4841      	ldr	r0, [pc, #260]	; (800c3e8 <pbuf_free+0x124>)
 800c2e2:	f008 fc5b 	bl	8014b9c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e076      	b.n	800c3d8 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	7b1b      	ldrb	r3, [r3, #12]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d012      	beq.n	800c318 <pbuf_free+0x54>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	7b1b      	ldrb	r3, [r3, #12]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d00e      	beq.n	800c318 <pbuf_free+0x54>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	7b1b      	ldrb	r3, [r3, #12]
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d00a      	beq.n	800c318 <pbuf_free+0x54>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	7b1b      	ldrb	r3, [r3, #12]
 800c306:	2b03      	cmp	r3, #3
 800c308:	d006      	beq.n	800c318 <pbuf_free+0x54>
 800c30a:	4b35      	ldr	r3, [pc, #212]	; (800c3e0 <pbuf_free+0x11c>)
 800c30c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c310:	4936      	ldr	r1, [pc, #216]	; (800c3ec <pbuf_free+0x128>)
 800c312:	4835      	ldr	r0, [pc, #212]	; (800c3e8 <pbuf_free+0x124>)
 800c314:	f008 fc42 	bl	8014b9c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c31c:	e058      	b.n	800c3d0 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c31e:	f008 fbd7 	bl	8014ad0 <sys_arch_protect>
 800c322:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	89db      	ldrh	r3, [r3, #14]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <pbuf_free+0x76>
 800c32c:	4b2c      	ldr	r3, [pc, #176]	; (800c3e0 <pbuf_free+0x11c>)
 800c32e:	f240 22eb 	movw	r2, #747	; 0x2eb
 800c332:	492f      	ldr	r1, [pc, #188]	; (800c3f0 <pbuf_free+0x12c>)
 800c334:	482c      	ldr	r0, [pc, #176]	; (800c3e8 <pbuf_free+0x124>)
 800c336:	f008 fc31 	bl	8014b9c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	89db      	ldrh	r3, [r3, #14]
 800c33e:	3b01      	subs	r3, #1
 800c340:	b29a      	uxth	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	81da      	strh	r2, [r3, #14]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	89db      	ldrh	r3, [r3, #14]
 800c34a:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c34c:	69b8      	ldr	r0, [r7, #24]
 800c34e:	f008 fbcd 	bl	8014aec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c352:	8afb      	ldrh	r3, [r7, #22]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d139      	bne.n	800c3cc <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	7b1b      	ldrb	r3, [r3, #12]
 800c362:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	7b5b      	ldrb	r3, [r3, #13]
 800c368:	f003 0302 	and.w	r3, r3, #2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d011      	beq.n	800c394 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d106      	bne.n	800c38a <pbuf_free+0xc6>
 800c37c:	4b18      	ldr	r3, [pc, #96]	; (800c3e0 <pbuf_free+0x11c>)
 800c37e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800c382:	491c      	ldr	r1, [pc, #112]	; (800c3f4 <pbuf_free+0x130>)
 800c384:	4818      	ldr	r0, [pc, #96]	; (800c3e8 <pbuf_free+0x124>)
 800c386:	f008 fc09 	bl	8014b9c <iprintf>
        pc->custom_free_function(p);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	4798      	blx	r3
 800c392:	e015      	b.n	800c3c0 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c394:	89fb      	ldrh	r3, [r7, #14]
 800c396:	2b03      	cmp	r3, #3
 800c398:	d104      	bne.n	800c3a4 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	200c      	movs	r0, #12
 800c39e:	f7ff f9dd 	bl	800b75c <memp_free>
 800c3a2:	e00d      	b.n	800c3c0 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c3a4:	89fb      	ldrh	r3, [r7, #14]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d002      	beq.n	800c3b0 <pbuf_free+0xec>
 800c3aa:	89fb      	ldrh	r3, [r7, #14]
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d104      	bne.n	800c3ba <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c3b0:	6879      	ldr	r1, [r7, #4]
 800c3b2:	200b      	movs	r0, #11
 800c3b4:	f7ff f9d2 	bl	800b75c <memp_free>
 800c3b8:	e002      	b.n	800c3c0 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f7fe feb4 	bl	800b128 <mem_free>
        }
      }
      count++;
 800c3c0:	7ffb      	ldrb	r3, [r7, #31]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	607b      	str	r3, [r7, #4]
 800c3ca:	e001      	b.n	800c3d0 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1a3      	bne.n	800c31e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c3d6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3720      	adds	r7, #32
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	08016a28 	.word	0x08016a28
 800c3e4:	08016c60 	.word	0x08016c60
 800c3e8:	08016a74 	.word	0x08016a74
 800c3ec:	08016c9c 	.word	0x08016c9c
 800c3f0:	08016cb4 	.word	0x08016cb4
 800c3f4:	08016ccc 	.word	0x08016ccc

0800c3f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b085      	sub	sp, #20
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c404:	e005      	b.n	800c412 <pbuf_clen+0x1a>
    ++len;
 800c406:	89fb      	ldrh	r3, [r7, #14]
 800c408:	3301      	adds	r3, #1
 800c40a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1f6      	bne.n	800c406 <pbuf_clen+0xe>
  }
  return len;
 800c418:	89fb      	ldrh	r3, [r7, #14]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	bc80      	pop	{r7}
 800c422:	4770      	bx	lr

0800c424 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d016      	beq.n	800c460 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800c432:	f008 fb4d 	bl	8014ad0 <sys_arch_protect>
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	89db      	ldrh	r3, [r3, #14]
 800c43c:	3301      	adds	r3, #1
 800c43e:	b29a      	uxth	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	81da      	strh	r2, [r3, #14]
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f008 fb51 	bl	8014aec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	89db      	ldrh	r3, [r3, #14]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <pbuf_ref+0x3c>
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <pbuf_ref+0x44>)
 800c454:	f240 3239 	movw	r2, #825	; 0x339
 800c458:	4904      	ldr	r1, [pc, #16]	; (800c46c <pbuf_ref+0x48>)
 800c45a:	4805      	ldr	r0, [pc, #20]	; (800c470 <pbuf_ref+0x4c>)
 800c45c:	f008 fb9e 	bl	8014b9c <iprintf>
  }
}
 800c460:	bf00      	nop
 800c462:	3710      	adds	r7, #16
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	08016a28 	.word	0x08016a28
 800c46c:	08016cf0 	.word	0x08016cf0
 800c470:	08016a74 	.word	0x08016a74

0800c474 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d002      	beq.n	800c48a <pbuf_cat+0x16>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d107      	bne.n	800c49a <pbuf_cat+0x26>
 800c48a:	4b20      	ldr	r3, [pc, #128]	; (800c50c <pbuf_cat+0x98>)
 800c48c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800c490:	491f      	ldr	r1, [pc, #124]	; (800c510 <pbuf_cat+0x9c>)
 800c492:	4820      	ldr	r0, [pc, #128]	; (800c514 <pbuf_cat+0xa0>)
 800c494:	f008 fb82 	bl	8014b9c <iprintf>
 800c498:	e034      	b.n	800c504 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	60fb      	str	r3, [r7, #12]
 800c49e:	e00a      	b.n	800c4b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	891a      	ldrh	r2, [r3, #8]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	891b      	ldrh	r3, [r3, #8]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	b29a      	uxth	r2, r3
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	60fb      	str	r3, [r7, #12]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1f0      	bne.n	800c4a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	891a      	ldrh	r2, [r3, #8]
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	895b      	ldrh	r3, [r3, #10]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d006      	beq.n	800c4d8 <pbuf_cat+0x64>
 800c4ca:	4b10      	ldr	r3, [pc, #64]	; (800c50c <pbuf_cat+0x98>)
 800c4cc:	f240 3255 	movw	r2, #853	; 0x355
 800c4d0:	4911      	ldr	r1, [pc, #68]	; (800c518 <pbuf_cat+0xa4>)
 800c4d2:	4810      	ldr	r0, [pc, #64]	; (800c514 <pbuf_cat+0xa0>)
 800c4d4:	f008 fb62 	bl	8014b9c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <pbuf_cat+0x7a>
 800c4e0:	4b0a      	ldr	r3, [pc, #40]	; (800c50c <pbuf_cat+0x98>)
 800c4e2:	f240 3256 	movw	r2, #854	; 0x356
 800c4e6:	490d      	ldr	r1, [pc, #52]	; (800c51c <pbuf_cat+0xa8>)
 800c4e8:	480a      	ldr	r0, [pc, #40]	; (800c514 <pbuf_cat+0xa0>)
 800c4ea:	f008 fb57 	bl	8014b9c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	891a      	ldrh	r2, [r3, #8]
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	891b      	ldrh	r3, [r3, #8]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	b29a      	uxth	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	683a      	ldr	r2, [r7, #0]
 800c502:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	08016a28 	.word	0x08016a28
 800c510:	08016d04 	.word	0x08016d04
 800c514:	08016a74 	.word	0x08016a74
 800c518:	08016d3c 	.word	0x08016d3c
 800c51c:	08016d6c 	.word	0x08016d6c

0800c520 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800c52a:	2300      	movs	r3, #0
 800c52c:	81fb      	strh	r3, [r7, #14]
 800c52e:	2300      	movs	r3, #0
 800c530:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d008      	beq.n	800c54a <pbuf_copy+0x2a>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d005      	beq.n	800c54a <pbuf_copy+0x2a>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	891a      	ldrh	r2, [r3, #8]
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	891b      	ldrh	r3, [r3, #8]
 800c546:	429a      	cmp	r2, r3
 800c548:	d209      	bcs.n	800c55e <pbuf_copy+0x3e>
 800c54a:	4b54      	ldr	r3, [pc, #336]	; (800c69c <pbuf_copy+0x17c>)
 800c54c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c550:	4953      	ldr	r1, [pc, #332]	; (800c6a0 <pbuf_copy+0x180>)
 800c552:	4854      	ldr	r0, [pc, #336]	; (800c6a4 <pbuf_copy+0x184>)
 800c554:	f008 fb22 	bl	8014b9c <iprintf>
 800c558:	f06f 030f 	mvn.w	r3, #15
 800c55c:	e099      	b.n	800c692 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	895b      	ldrh	r3, [r3, #10]
 800c562:	461a      	mov	r2, r3
 800c564:	89fb      	ldrh	r3, [r7, #14]
 800c566:	1ad2      	subs	r2, r2, r3
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	895b      	ldrh	r3, [r3, #10]
 800c56c:	4619      	mov	r1, r3
 800c56e:	89bb      	ldrh	r3, [r7, #12]
 800c570:	1acb      	subs	r3, r1, r3
 800c572:	429a      	cmp	r2, r3
 800c574:	db05      	blt.n	800c582 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	895a      	ldrh	r2, [r3, #10]
 800c57a:	89bb      	ldrh	r3, [r7, #12]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	817b      	strh	r3, [r7, #10]
 800c580:	e004      	b.n	800c58c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	895a      	ldrh	r2, [r3, #10]
 800c586:	89fb      	ldrh	r3, [r7, #14]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	89fb      	ldrh	r3, [r7, #14]
 800c592:	18d0      	adds	r0, r2, r3
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685a      	ldr	r2, [r3, #4]
 800c598:	89bb      	ldrh	r3, [r7, #12]
 800c59a:	4413      	add	r3, r2
 800c59c:	897a      	ldrh	r2, [r7, #10]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	f008 fae6 	bl	8014b70 <memcpy>
    offset_to += len;
 800c5a4:	89fa      	ldrh	r2, [r7, #14]
 800c5a6:	897b      	ldrh	r3, [r7, #10]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800c5ac:	89ba      	ldrh	r2, [r7, #12]
 800c5ae:	897b      	ldrh	r3, [r7, #10]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	895b      	ldrh	r3, [r3, #10]
 800c5b8:	89fa      	ldrh	r2, [r7, #14]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d906      	bls.n	800c5cc <pbuf_copy+0xac>
 800c5be:	4b37      	ldr	r3, [pc, #220]	; (800c69c <pbuf_copy+0x17c>)
 800c5c0:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c5c4:	4938      	ldr	r1, [pc, #224]	; (800c6a8 <pbuf_copy+0x188>)
 800c5c6:	4837      	ldr	r0, [pc, #220]	; (800c6a4 <pbuf_copy+0x184>)
 800c5c8:	f008 fae8 	bl	8014b9c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	895b      	ldrh	r3, [r3, #10]
 800c5d0:	89ba      	ldrh	r2, [r7, #12]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d906      	bls.n	800c5e4 <pbuf_copy+0xc4>
 800c5d6:	4b31      	ldr	r3, [pc, #196]	; (800c69c <pbuf_copy+0x17c>)
 800c5d8:	f240 32ce 	movw	r2, #974	; 0x3ce
 800c5dc:	4933      	ldr	r1, [pc, #204]	; (800c6ac <pbuf_copy+0x18c>)
 800c5de:	4831      	ldr	r0, [pc, #196]	; (800c6a4 <pbuf_copy+0x184>)
 800c5e0:	f008 fadc 	bl	8014b9c <iprintf>
    if (offset_from >= p_from->len) {
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	895b      	ldrh	r3, [r3, #10]
 800c5e8:	89ba      	ldrh	r2, [r7, #12]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d304      	bcc.n	800c5f8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	895b      	ldrh	r3, [r3, #10]
 800c5fc:	89fa      	ldrh	r2, [r7, #14]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d114      	bne.n	800c62c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10c      	bne.n	800c62c <pbuf_copy+0x10c>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d009      	beq.n	800c62c <pbuf_copy+0x10c>
 800c618:	4b20      	ldr	r3, [pc, #128]	; (800c69c <pbuf_copy+0x17c>)
 800c61a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c61e:	4924      	ldr	r1, [pc, #144]	; (800c6b0 <pbuf_copy+0x190>)
 800c620:	4820      	ldr	r0, [pc, #128]	; (800c6a4 <pbuf_copy+0x184>)
 800c622:	f008 fabb 	bl	8014b9c <iprintf>
 800c626:	f06f 030f 	mvn.w	r3, #15
 800c62a:	e032      	b.n	800c692 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d013      	beq.n	800c65a <pbuf_copy+0x13a>
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	895a      	ldrh	r2, [r3, #10]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	891b      	ldrh	r3, [r3, #8]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d10d      	bne.n	800c65a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d009      	beq.n	800c65a <pbuf_copy+0x13a>
 800c646:	4b15      	ldr	r3, [pc, #84]	; (800c69c <pbuf_copy+0x17c>)
 800c648:	f240 32dd 	movw	r2, #989	; 0x3dd
 800c64c:	4919      	ldr	r1, [pc, #100]	; (800c6b4 <pbuf_copy+0x194>)
 800c64e:	4815      	ldr	r0, [pc, #84]	; (800c6a4 <pbuf_copy+0x184>)
 800c650:	f008 faa4 	bl	8014b9c <iprintf>
 800c654:	f06f 0305 	mvn.w	r3, #5
 800c658:	e01b      	b.n	800c692 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d013      	beq.n	800c688 <pbuf_copy+0x168>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	895a      	ldrh	r2, [r3, #10]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	891b      	ldrh	r3, [r3, #8]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d10d      	bne.n	800c688 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d009      	beq.n	800c688 <pbuf_copy+0x168>
 800c674:	4b09      	ldr	r3, [pc, #36]	; (800c69c <pbuf_copy+0x17c>)
 800c676:	f240 32e2 	movw	r2, #994	; 0x3e2
 800c67a:	490e      	ldr	r1, [pc, #56]	; (800c6b4 <pbuf_copy+0x194>)
 800c67c:	4809      	ldr	r0, [pc, #36]	; (800c6a4 <pbuf_copy+0x184>)
 800c67e:	f008 fa8d 	bl	8014b9c <iprintf>
 800c682:	f06f 0305 	mvn.w	r3, #5
 800c686:	e004      	b.n	800c692 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f47f af67 	bne.w	800c55e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	08016a28 	.word	0x08016a28
 800c6a0:	08016db8 	.word	0x08016db8
 800c6a4:	08016a74 	.word	0x08016a74
 800c6a8:	08016de8 	.word	0x08016de8
 800c6ac:	08016e00 	.word	0x08016e00
 800c6b0:	08016e1c 	.word	0x08016e1c
 800c6b4:	08016e2c 	.word	0x08016e2c

0800c6b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	80fb      	strh	r3, [r7, #6]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d108      	bne.n	800c6ea <pbuf_copy_partial+0x32>
 800c6d8:	4b30      	ldr	r3, [pc, #192]	; (800c79c <pbuf_copy_partial+0xe4>)
 800c6da:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800c6de:	4930      	ldr	r1, [pc, #192]	; (800c7a0 <pbuf_copy_partial+0xe8>)
 800c6e0:	4830      	ldr	r0, [pc, #192]	; (800c7a4 <pbuf_copy_partial+0xec>)
 800c6e2:	f008 fa5b 	bl	8014b9c <iprintf>
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e054      	b.n	800c794 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d108      	bne.n	800c702 <pbuf_copy_partial+0x4a>
 800c6f0:	4b2a      	ldr	r3, [pc, #168]	; (800c79c <pbuf_copy_partial+0xe4>)
 800c6f2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c6f6:	492c      	ldr	r1, [pc, #176]	; (800c7a8 <pbuf_copy_partial+0xf0>)
 800c6f8:	482a      	ldr	r0, [pc, #168]	; (800c7a4 <pbuf_copy_partial+0xec>)
 800c6fa:	f008 fa4f 	bl	8014b9c <iprintf>
 800c6fe:	2300      	movs	r3, #0
 800c700:	e048      	b.n	800c794 <pbuf_copy_partial+0xdc>

  left = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <pbuf_copy_partial+0x5a>
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <pbuf_copy_partial+0x5e>
    return 0;
 800c712:	2300      	movs	r3, #0
 800c714:	e03e      	b.n	800c794 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	61fb      	str	r3, [r7, #28]
 800c71a:	e034      	b.n	800c786 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800c71c:	88bb      	ldrh	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00a      	beq.n	800c738 <pbuf_copy_partial+0x80>
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	895b      	ldrh	r3, [r3, #10]
 800c726:	88ba      	ldrh	r2, [r7, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d305      	bcc.n	800c738 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	895b      	ldrh	r3, [r3, #10]
 800c730:	88ba      	ldrh	r2, [r7, #4]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	80bb      	strh	r3, [r7, #4]
 800c736:	e023      	b.n	800c780 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	895a      	ldrh	r2, [r3, #10]
 800c73c:	88bb      	ldrh	r3, [r7, #4]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c742:	8b3a      	ldrh	r2, [r7, #24]
 800c744:	88fb      	ldrh	r3, [r7, #6]
 800c746:	429a      	cmp	r2, r3
 800c748:	d901      	bls.n	800c74e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800c74a:	88fb      	ldrh	r3, [r7, #6]
 800c74c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800c74e:	8b7b      	ldrh	r3, [r7, #26]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	18d0      	adds	r0, r2, r3
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	88bb      	ldrh	r3, [r7, #4]
 800c75a:	4413      	add	r3, r2
 800c75c:	8b3a      	ldrh	r2, [r7, #24]
 800c75e:	4619      	mov	r1, r3
 800c760:	f008 fa06 	bl	8014b70 <memcpy>
      copied_total += buf_copy_len;
 800c764:	8afa      	ldrh	r2, [r7, #22]
 800c766:	8b3b      	ldrh	r3, [r7, #24]
 800c768:	4413      	add	r3, r2
 800c76a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800c76c:	8b7a      	ldrh	r2, [r7, #26]
 800c76e:	8b3b      	ldrh	r3, [r7, #24]
 800c770:	4413      	add	r3, r2
 800c772:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800c774:	88fa      	ldrh	r2, [r7, #6]
 800c776:	8b3b      	ldrh	r3, [r7, #24]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	61fb      	str	r3, [r7, #28]
 800c786:	88fb      	ldrh	r3, [r7, #6]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <pbuf_copy_partial+0xda>
 800c78c:	69fb      	ldr	r3, [r7, #28]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1c4      	bne.n	800c71c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800c792:	8afb      	ldrh	r3, [r7, #22]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3720      	adds	r7, #32
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	08016a28 	.word	0x08016a28
 800c7a0:	08016e58 	.word	0x08016e58
 800c7a4:	08016a74 	.word	0x08016a74
 800c7a8:	08016e78 	.word	0x08016e78

0800c7ac <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b087      	sub	sp, #28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800c7ba:	897b      	ldrh	r3, [r7, #10]
 800c7bc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800c7c2:	e007      	b.n	800c7d4 <pbuf_skip_const+0x28>
    offset_left -= q->len;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	895b      	ldrh	r3, [r3, #10]
 800c7c8:	8afa      	ldrh	r2, [r7, #22]
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d004      	beq.n	800c7e4 <pbuf_skip_const+0x38>
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	895b      	ldrh	r3, [r3, #10]
 800c7de:	8afa      	ldrh	r2, [r7, #22]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d2ef      	bcs.n	800c7c4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d002      	beq.n	800c7f0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	8afa      	ldrh	r2, [r7, #22]
 800c7ee:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800c7f0:	693b      	ldr	r3, [r7, #16]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	371c      	adds	r7, #28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bc80      	pop	{r7}
 800c7fa:	4770      	bx	lr

0800c7fc <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800c808:	887b      	ldrh	r3, [r7, #2]
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f80c 	bl	800c82a <pbuf_try_get_at>
 800c812:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2b00      	cmp	r3, #0
 800c818:	db02      	blt.n	800c820 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	e000      	b.n	800c822 <pbuf_get_at+0x26>
  }
  return 0;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	460b      	mov	r3, r1
 800c834:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
 800c836:	f107 020a 	add.w	r2, r7, #10
 800c83a:	887b      	ldrh	r3, [r7, #2]
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff ffb4 	bl	800c7ac <pbuf_skip_const>
 800c844:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <pbuf_try_get_at+0x38>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	895a      	ldrh	r2, [r3, #10]
 800c850:	897b      	ldrh	r3, [r7, #10]
 800c852:	429a      	cmp	r2, r3
 800c854:	d905      	bls.n	800c862 <pbuf_try_get_at+0x38>
    return ((u8_t*)q->payload)[q_idx];
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	897a      	ldrh	r2, [r7, #10]
 800c85c:	4413      	add	r3, r2
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	e001      	b.n	800c866 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800c862:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c86e:	b480      	push	{r7}
 800c870:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c872:	bf00      	nop
 800c874:	46bd      	mov	sp, r7
 800c876:	bc80      	pop	{r7}
 800c878:	4770      	bx	lr
	...

0800c87c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c880:	f001 f87e 	bl	800d980 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c884:	4b07      	ldr	r3, [pc, #28]	; (800c8a4 <tcp_tmr+0x28>)
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	3301      	adds	r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <tcp_tmr+0x28>)
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	4b04      	ldr	r3, [pc, #16]	; (800c8a4 <tcp_tmr+0x28>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	f003 0301 	and.w	r3, r3, #1
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d001      	beq.n	800c8a0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c89c:	f000 fdae 	bl	800d3fc <tcp_slowtmr>
  }
}
 800c8a0:	bf00      	nop
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	20004ae5 	.word	0x20004ae5

0800c8a8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b085      	sub	sp, #20
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	e00a      	b.n	800c8ce <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d102      	bne.n	800c8c8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	60fb      	str	r3, [r7, #12]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1f1      	bne.n	800c8b8 <tcp_remove_listener+0x10>
      }
   }
}
 800c8d4:	bf00      	nop
 800c8d6:	bf00      	nop
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bc80      	pop	{r7}
 800c8de:	4770      	bx	lr

0800c8e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d105      	bne.n	800c8fa <tcp_listen_closed+0x1a>
 800c8ee:	4b13      	ldr	r3, [pc, #76]	; (800c93c <tcp_listen_closed+0x5c>)
 800c8f0:	22c0      	movs	r2, #192	; 0xc0
 800c8f2:	4913      	ldr	r1, [pc, #76]	; (800c940 <tcp_listen_closed+0x60>)
 800c8f4:	4813      	ldr	r0, [pc, #76]	; (800c944 <tcp_listen_closed+0x64>)
 800c8f6:	f008 f951 	bl	8014b9c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	7d1b      	ldrb	r3, [r3, #20]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d005      	beq.n	800c90e <tcp_listen_closed+0x2e>
 800c902:	4b0e      	ldr	r3, [pc, #56]	; (800c93c <tcp_listen_closed+0x5c>)
 800c904:	22c1      	movs	r2, #193	; 0xc1
 800c906:	4910      	ldr	r1, [pc, #64]	; (800c948 <tcp_listen_closed+0x68>)
 800c908:	480e      	ldr	r0, [pc, #56]	; (800c944 <tcp_listen_closed+0x64>)
 800c90a:	f008 f947 	bl	8014b9c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c90e:	2301      	movs	r3, #1
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	e00b      	b.n	800c92c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800c914:	4a0d      	ldr	r2, [pc, #52]	; (800c94c <tcp_listen_closed+0x6c>)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4618      	mov	r0, r3
 800c922:	f7ff ffc1 	bl	800c8a8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3301      	adds	r3, #1
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d9f0      	bls.n	800c914 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c932:	bf00      	nop
 800c934:	bf00      	nop
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	08016fac 	.word	0x08016fac
 800c940:	08016fdc 	.word	0x08016fdc
 800c944:	08016fe8 	.word	0x08016fe8
 800c948:	08017010 	.word	0x08017010
 800c94c:	0801873c 	.word	0x0801873c

0800c950 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c950:	b5b0      	push	{r4, r5, r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af02      	add	r7, sp, #8
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	460b      	mov	r3, r1
 800c95a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c95c:	78fb      	ldrb	r3, [r7, #3]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d075      	beq.n	800ca4e <tcp_close_shutdown+0xfe>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	7d1b      	ldrb	r3, [r3, #20]
 800c966:	2b04      	cmp	r3, #4
 800c968:	d003      	beq.n	800c972 <tcp_close_shutdown+0x22>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	7d1b      	ldrb	r3, [r3, #20]
 800c96e:	2b07      	cmp	r3, #7
 800c970:	d16d      	bne.n	800ca4e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c976:	2b00      	cmp	r3, #0
 800c978:	d104      	bne.n	800c984 <tcp_close_shutdown+0x34>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c97e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c982:	d064      	beq.n	800ca4e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	7e9b      	ldrb	r3, [r3, #26]
 800c988:	f003 0310 	and.w	r3, r3, #16
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d106      	bne.n	800c99e <tcp_close_shutdown+0x4e>
 800c990:	4b5b      	ldr	r3, [pc, #364]	; (800cb00 <tcp_close_shutdown+0x1b0>)
 800c992:	f240 120f 	movw	r2, #271	; 0x10f
 800c996:	495b      	ldr	r1, [pc, #364]	; (800cb04 <tcp_close_shutdown+0x1b4>)
 800c998:	485b      	ldr	r0, [pc, #364]	; (800cb08 <tcp_close_shutdown+0x1b8>)
 800c99a:	f008 f8ff 	bl	8014b9c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c9a6:	687c      	ldr	r4, [r7, #4]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	1d1d      	adds	r5, r3, #4
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	8adb      	ldrh	r3, [r3, #22]
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	8b12      	ldrh	r2, [r2, #24]
 800c9b4:	9201      	str	r2, [sp, #4]
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	462b      	mov	r3, r5
 800c9ba:	4622      	mov	r2, r4
 800c9bc:	f004 ffea 	bl	8011994 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 fb25 	bl	800e010 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c9c6:	4b51      	ldr	r3, [pc, #324]	; (800cb0c <tcp_close_shutdown+0x1bc>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d105      	bne.n	800c9dc <tcp_close_shutdown+0x8c>
 800c9d0:	4b4e      	ldr	r3, [pc, #312]	; (800cb0c <tcp_close_shutdown+0x1bc>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	4a4d      	ldr	r2, [pc, #308]	; (800cb0c <tcp_close_shutdown+0x1bc>)
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	e013      	b.n	800ca04 <tcp_close_shutdown+0xb4>
 800c9dc:	4b4b      	ldr	r3, [pc, #300]	; (800cb0c <tcp_close_shutdown+0x1bc>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	60fb      	str	r3, [r7, #12]
 800c9e2:	e00c      	b.n	800c9fe <tcp_close_shutdown+0xae>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d104      	bne.n	800c9f8 <tcp_close_shutdown+0xa8>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	60da      	str	r2, [r3, #12]
 800c9f6:	e005      	b.n	800ca04 <tcp_close_shutdown+0xb4>
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1ef      	bne.n	800c9e4 <tcp_close_shutdown+0x94>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	60da      	str	r2, [r3, #12]
 800ca0a:	4b41      	ldr	r3, [pc, #260]	; (800cb10 <tcp_close_shutdown+0x1c0>)
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7d1b      	ldrb	r3, [r3, #20]
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	d10c      	bne.n	800ca32 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	220a      	movs	r2, #10
 800ca1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ca1e:	4b3d      	ldr	r3, [pc, #244]	; (800cb14 <tcp_close_shutdown+0x1c4>)
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	60da      	str	r2, [r3, #12]
 800ca26:	4a3b      	ldr	r2, [pc, #236]	; (800cb14 <tcp_close_shutdown+0x1c4>)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6013      	str	r3, [r2, #0]
 800ca2c:	f005 f9fa 	bl	8011e24 <tcp_timer_needed>
 800ca30:	e00b      	b.n	800ca4a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800ca32:	4b39      	ldr	r3, [pc, #228]	; (800cb18 <tcp_close_shutdown+0x1c8>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d102      	bne.n	800ca42 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800ca3c:	f003 fe4a 	bl	80106d4 <tcp_trigger_input_pcb_close>
 800ca40:	e003      	b.n	800ca4a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	2001      	movs	r0, #1
 800ca46:	f7fe fe89 	bl	800b75c <memp_free>
        }
      }
      return ERR_OK;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e053      	b.n	800caf6 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	7d1b      	ldrb	r3, [r3, #20]
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d03d      	beq.n	800cad2 <tcp_close_shutdown+0x182>
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	dc47      	bgt.n	800caea <tcp_close_shutdown+0x19a>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d002      	beq.n	800ca64 <tcp_close_shutdown+0x114>
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d02b      	beq.n	800caba <tcp_close_shutdown+0x16a>
 800ca62:	e042      	b.n	800caea <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	8adb      	ldrh	r3, [r3, #22]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d021      	beq.n	800cab0 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca6c:	4b2b      	ldr	r3, [pc, #172]	; (800cb1c <tcp_close_shutdown+0x1cc>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d105      	bne.n	800ca82 <tcp_close_shutdown+0x132>
 800ca76:	4b29      	ldr	r3, [pc, #164]	; (800cb1c <tcp_close_shutdown+0x1cc>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	4a27      	ldr	r2, [pc, #156]	; (800cb1c <tcp_close_shutdown+0x1cc>)
 800ca7e:	6013      	str	r3, [r2, #0]
 800ca80:	e013      	b.n	800caaa <tcp_close_shutdown+0x15a>
 800ca82:	4b26      	ldr	r3, [pc, #152]	; (800cb1c <tcp_close_shutdown+0x1cc>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	60bb      	str	r3, [r7, #8]
 800ca88:	e00c      	b.n	800caa4 <tcp_close_shutdown+0x154>
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d104      	bne.n	800ca9e <tcp_close_shutdown+0x14e>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68da      	ldr	r2, [r3, #12]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	60da      	str	r2, [r3, #12]
 800ca9c:	e005      	b.n	800caaa <tcp_close_shutdown+0x15a>
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	60bb      	str	r3, [r7, #8]
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1ef      	bne.n	800ca8a <tcp_close_shutdown+0x13a>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	2001      	movs	r0, #1
 800cab4:	f7fe fe52 	bl	800b75c <memp_free>
    break;
 800cab8:	e01c      	b.n	800caf4 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7ff ff10 	bl	800c8e0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4817      	ldr	r0, [pc, #92]	; (800cb20 <tcp_close_shutdown+0x1d0>)
 800cac4:	f001 fae6 	bl	800e094 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	2002      	movs	r0, #2
 800cacc:	f7fe fe46 	bl	800b75c <memp_free>
    break;
 800cad0:	e010      	b.n	800caf4 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800cad2:	6879      	ldr	r1, [r7, #4]
 800cad4:	480d      	ldr	r0, [pc, #52]	; (800cb0c <tcp_close_shutdown+0x1bc>)
 800cad6:	f001 fadd 	bl	800e094 <tcp_pcb_remove>
 800cada:	4b0d      	ldr	r3, [pc, #52]	; (800cb10 <tcp_close_shutdown+0x1c0>)
 800cadc:	2201      	movs	r2, #1
 800cade:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800cae0:	6879      	ldr	r1, [r7, #4]
 800cae2:	2001      	movs	r0, #1
 800cae4:	f7fe fe3a 	bl	800b75c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800cae8:	e004      	b.n	800caf4 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f81a 	bl	800cb24 <tcp_close_shutdown_fin>
 800caf0:	4603      	mov	r3, r0
 800caf2:	e000      	b.n	800caf6 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bdb0      	pop	{r4, r5, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	08016fac 	.word	0x08016fac
 800cb04:	08017028 	.word	0x08017028
 800cb08:	08016fe8 	.word	0x08016fe8
 800cb0c:	2000bb64 	.word	0x2000bb64
 800cb10:	2000bb60 	.word	0x2000bb60
 800cb14:	2000bb74 	.word	0x2000bb74
 800cb18:	2000bb78 	.word	0x2000bb78
 800cb1c:	2000bb70 	.word	0x2000bb70
 800cb20:	2000bb6c 	.word	0x2000bb6c

0800cb24 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d106      	bne.n	800cb40 <tcp_close_shutdown_fin+0x1c>
 800cb32:	4b2e      	ldr	r3, [pc, #184]	; (800cbec <tcp_close_shutdown_fin+0xc8>)
 800cb34:	f240 124d 	movw	r2, #333	; 0x14d
 800cb38:	492d      	ldr	r1, [pc, #180]	; (800cbf0 <tcp_close_shutdown_fin+0xcc>)
 800cb3a:	482e      	ldr	r0, [pc, #184]	; (800cbf4 <tcp_close_shutdown_fin+0xd0>)
 800cb3c:	f008 f82e 	bl	8014b9c <iprintf>

  switch (pcb->state) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	7d1b      	ldrb	r3, [r3, #20]
 800cb44:	2b07      	cmp	r3, #7
 800cb46:	d020      	beq.n	800cb8a <tcp_close_shutdown_fin+0x66>
 800cb48:	2b07      	cmp	r3, #7
 800cb4a:	dc2b      	bgt.n	800cba4 <tcp_close_shutdown_fin+0x80>
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d002      	beq.n	800cb56 <tcp_close_shutdown_fin+0x32>
 800cb50:	2b04      	cmp	r3, #4
 800cb52:	d00d      	beq.n	800cb70 <tcp_close_shutdown_fin+0x4c>
 800cb54:	e026      	b.n	800cba4 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f003 fe46 	bl	80107e8 <tcp_send_fin>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cb60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d11f      	bne.n	800cba8 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2205      	movs	r2, #5
 800cb6c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cb6e:	e01b      	b.n	800cba8 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f003 fe39 	bl	80107e8 <tcp_send_fin>
 800cb76:	4603      	mov	r3, r0
 800cb78:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d114      	bne.n	800cbac <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2205      	movs	r2, #5
 800cb86:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cb88:	e010      	b.n	800cbac <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f003 fe2c 	bl	80107e8 <tcp_send_fin>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d109      	bne.n	800cbb0 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2209      	movs	r2, #9
 800cba0:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cba2:	e005      	b.n	800cbb0 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	e01c      	b.n	800cbe2 <tcp_close_shutdown_fin+0xbe>
    break;
 800cba8:	bf00      	nop
 800cbaa:	e002      	b.n	800cbb2 <tcp_close_shutdown_fin+0x8e>
    break;
 800cbac:	bf00      	nop
 800cbae:	e000      	b.n	800cbb2 <tcp_close_shutdown_fin+0x8e>
    break;
 800cbb0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cbb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d103      	bne.n	800cbc2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f004 fc66 	bl	801148c <tcp_output>
 800cbc0:	e00d      	b.n	800cbde <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cbc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbca:	d108      	bne.n	800cbde <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	7e9b      	ldrb	r3, [r3, #26]
 800cbd0:	f043 0308 	orr.w	r3, r3, #8
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	e001      	b.n	800cbe2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cbde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	08016fac 	.word	0x08016fac
 800cbf0:	08016fdc 	.word	0x08016fdc
 800cbf4:	08016fe8 	.word	0x08016fe8

0800cbf8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	7d1b      	ldrb	r3, [r3, #20]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d006      	beq.n	800cc16 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7e9b      	ldrb	r3, [r3, #26]
 800cc0c:	f043 0310 	orr.w	r3, r3, #16
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cc16:	2101      	movs	r1, #1
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff fe99 	bl	800c950 <tcp_close_shutdown>
 800cc1e:	4603      	mov	r3, r0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3708      	adds	r7, #8
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08c      	sub	sp, #48	; 0x30
 800cc2c:	af02      	add	r7, sp, #8
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	7d1b      	ldrb	r3, [r3, #20]
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d106      	bne.n	800cc48 <tcp_abandon+0x20>
 800cc3a:	4b4d      	ldr	r3, [pc, #308]	; (800cd70 <tcp_abandon+0x148>)
 800cc3c:	f240 12df 	movw	r2, #479	; 0x1df
 800cc40:	494c      	ldr	r1, [pc, #304]	; (800cd74 <tcp_abandon+0x14c>)
 800cc42:	484d      	ldr	r0, [pc, #308]	; (800cd78 <tcp_abandon+0x150>)
 800cc44:	f007 ffaa 	bl	8014b9c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7d1b      	ldrb	r3, [r3, #20]
 800cc4c:	2b0a      	cmp	r3, #10
 800cc4e:	d108      	bne.n	800cc62 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	484a      	ldr	r0, [pc, #296]	; (800cd7c <tcp_abandon+0x154>)
 800cc54:	f001 fa1e 	bl	800e094 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800cc58:	6879      	ldr	r1, [r7, #4]
 800cc5a:	2001      	movs	r0, #1
 800cc5c:	f7fe fd7e 	bl	800b75c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800cc60:	e081      	b.n	800cd66 <tcp_abandon+0x13e>
    int send_rst = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc74:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc7c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	7d1b      	ldrb	r3, [r3, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d126      	bne.n	800ccda <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	8adb      	ldrh	r3, [r3, #22]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d02e      	beq.n	800ccf2 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc94:	4b3a      	ldr	r3, [pc, #232]	; (800cd80 <tcp_abandon+0x158>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d105      	bne.n	800ccaa <tcp_abandon+0x82>
 800cc9e:	4b38      	ldr	r3, [pc, #224]	; (800cd80 <tcp_abandon+0x158>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	4a36      	ldr	r2, [pc, #216]	; (800cd80 <tcp_abandon+0x158>)
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	e013      	b.n	800ccd2 <tcp_abandon+0xaa>
 800ccaa:	4b35      	ldr	r3, [pc, #212]	; (800cd80 <tcp_abandon+0x158>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	61fb      	str	r3, [r7, #28]
 800ccb0:	e00c      	b.n	800cccc <tcp_abandon+0xa4>
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d104      	bne.n	800ccc6 <tcp_abandon+0x9e>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68da      	ldr	r2, [r3, #12]
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	60da      	str	r2, [r3, #12]
 800ccc4:	e005      	b.n	800ccd2 <tcp_abandon+0xaa>
 800ccc6:	69fb      	ldr	r3, [r7, #28]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	61fb      	str	r3, [r7, #28]
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1ef      	bne.n	800ccb2 <tcp_abandon+0x8a>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	60da      	str	r2, [r3, #12]
 800ccd8:	e00b      	b.n	800ccf2 <tcp_abandon+0xca>
      send_rst = reset;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	8adb      	ldrh	r3, [r3, #22]
 800cce2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	4827      	ldr	r0, [pc, #156]	; (800cd84 <tcp_abandon+0x15c>)
 800cce8:	f001 f9d4 	bl	800e094 <tcp_pcb_remove>
 800ccec:	4b26      	ldr	r3, [pc, #152]	; (800cd88 <tcp_abandon+0x160>)
 800ccee:	2201      	movs	r2, #1
 800ccf0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d004      	beq.n	800cd04 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 ff0b 	bl	800db1a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d004      	beq.n	800cd16 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 ff02 	bl	800db1a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d004      	beq.n	800cd28 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 fef9 	bl	800db1a <tcp_segs_free>
    if (send_rst) {
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d00c      	beq.n	800cd48 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	1d19      	adds	r1, r3, #4
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	8b1b      	ldrh	r3, [r3, #24]
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	460b      	mov	r3, r1
 800cd40:	6979      	ldr	r1, [r7, #20]
 800cd42:	69b8      	ldr	r0, [r7, #24]
 800cd44:	f004 fe26 	bl	8011994 <tcp_rst>
    last_state = pcb->state;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	7d1b      	ldrb	r3, [r3, #20]
 800cd4c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800cd4e:	6879      	ldr	r1, [r7, #4]
 800cd50:	2001      	movs	r0, #1
 800cd52:	f7fe fd03 	bl	800b75c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <tcp_abandon+0x13e>
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	f06f 010c 	mvn.w	r1, #12
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	4798      	blx	r3
}
 800cd66:	bf00      	nop
 800cd68:	3728      	adds	r7, #40	; 0x28
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	08016fac 	.word	0x08016fac
 800cd74:	08017044 	.word	0x08017044
 800cd78:	08016fe8 	.word	0x08016fe8
 800cd7c:	2000bb74 	.word	0x2000bb74
 800cd80:	2000bb70 	.word	0x2000bb70
 800cd84:	2000bb64 	.word	0x2000bb64
 800cd88:	2000bb60 	.word	0x2000bb60

0800cd8c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cd94:	2101      	movs	r1, #1
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7ff ff46 	bl	800cc28 <tcp_abandon>
}
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cdb2:	2304      	movs	r3, #4
 800cdb4:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cdbc:	4b3c      	ldr	r3, [pc, #240]	; (800ceb0 <tcp_bind+0x10c>)
 800cdbe:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <tcp_bind+0x28>
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d102      	bne.n	800cdd2 <tcp_bind+0x2e>
    return ERR_VAL;
 800cdcc:	f06f 0305 	mvn.w	r3, #5
 800cdd0:	e06a      	b.n	800cea8 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	7d1b      	ldrb	r3, [r3, #20]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d009      	beq.n	800cdee <tcp_bind+0x4a>
 800cdda:	4b36      	ldr	r3, [pc, #216]	; (800ceb4 <tcp_bind+0x110>)
 800cddc:	f44f 7211 	mov.w	r2, #580	; 0x244
 800cde0:	4935      	ldr	r1, [pc, #212]	; (800ceb8 <tcp_bind+0x114>)
 800cde2:	4836      	ldr	r0, [pc, #216]	; (800cebc <tcp_bind+0x118>)
 800cde4:	f007 feda 	bl	8014b9c <iprintf>
 800cde8:	f06f 0305 	mvn.w	r3, #5
 800cdec:	e05c      	b.n	800cea8 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800cdee:	88fb      	ldrh	r3, [r7, #6]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d109      	bne.n	800ce08 <tcp_bind+0x64>
    port = tcp_new_port();
 800cdf4:	f000 f9ca 	bl	800d18c <tcp_new_port>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cdfc:	88fb      	ldrh	r3, [r7, #6]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d135      	bne.n	800ce6e <tcp_bind+0xca>
      return ERR_BUF;
 800ce02:	f06f 0301 	mvn.w	r3, #1
 800ce06:	e04f      	b.n	800cea8 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ce08:	2300      	movs	r3, #0
 800ce0a:	61fb      	str	r3, [r7, #28]
 800ce0c:	e02b      	b.n	800ce66 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ce0e:	4a2c      	ldr	r2, [pc, #176]	; (800cec0 <tcp_bind+0x11c>)
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	61bb      	str	r3, [r7, #24]
 800ce1a:	e01e      	b.n	800ce5a <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	8adb      	ldrh	r3, [r3, #22]
 800ce20:	88fa      	ldrh	r2, [r7, #6]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d116      	bne.n	800ce54 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ce26:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d010      	beq.n	800ce4e <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00c      	beq.n	800ce4e <tcp_bind+0xaa>
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d009      	beq.n	800ce4e <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d005      	beq.n	800ce4e <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d102      	bne.n	800ce54 <tcp_bind+0xb0>
              return ERR_USE;
 800ce4e:	f06f 0307 	mvn.w	r3, #7
 800ce52:	e029      	b.n	800cea8 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	61bb      	str	r3, [r7, #24]
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1dd      	bne.n	800ce1c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	3301      	adds	r3, #1
 800ce64:	61fb      	str	r3, [r7, #28]
 800ce66:	69fa      	ldr	r2, [r7, #28]
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	dbcf      	blt.n	800ce0e <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00c      	beq.n	800ce8e <tcp_bind+0xea>
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d008      	beq.n	800ce8e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <tcp_bind+0xe4>
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	e000      	b.n	800ce8a <tcp_bind+0xe6>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	88fa      	ldrh	r2, [r7, #6]
 800ce92:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <tcp_bind+0x120>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	60da      	str	r2, [r3, #12]
 800ce9c:	4a09      	ldr	r2, [pc, #36]	; (800cec4 <tcp_bind+0x120>)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	f004 ffbf 	bl	8011e24 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cea6:	2300      	movs	r3, #0
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3720      	adds	r7, #32
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	08018764 	.word	0x08018764
 800ceb4:	08016fac 	.word	0x08016fac
 800ceb8:	08017078 	.word	0x08017078
 800cebc:	08016fe8 	.word	0x08016fe8
 800cec0:	0801873c 	.word	0x0801873c
 800cec4:	2000bb70 	.word	0x2000bb70

0800cec8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	4613      	mov	r3, r2
 800ced4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800ced6:	68b8      	ldr	r0, [r7, #8]
 800ced8:	f7ff ff58 	bl	800cd8c <tcp_abort>

  return ERR_ABRT;
 800cedc:	f06f 030c 	mvn.w	r3, #12
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	460b      	mov	r3, r1
 800cef2:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cef4:	78fb      	ldrb	r3, [r7, #3]
 800cef6:	2200      	movs	r2, #0
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f806 	bl	800cf0c <tcp_listen_with_backlog_and_err>
 800cf00:	4603      	mov	r3, r0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
	...

0800cf0c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b088      	sub	sp, #32
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	460b      	mov	r3, r1
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	7d1b      	ldrb	r3, [r3, #20]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d009      	beq.n	800cf3a <tcp_listen_with_backlog_and_err+0x2e>
 800cf26:	4b3f      	ldr	r3, [pc, #252]	; (800d024 <tcp_listen_with_backlog_and_err+0x118>)
 800cf28:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800cf2c:	493e      	ldr	r1, [pc, #248]	; (800d028 <tcp_listen_with_backlog_and_err+0x11c>)
 800cf2e:	483f      	ldr	r0, [pc, #252]	; (800d02c <tcp_listen_with_backlog_and_err+0x120>)
 800cf30:	f007 fe34 	bl	8014b9c <iprintf>
 800cf34:	23f1      	movs	r3, #241	; 0xf1
 800cf36:	76fb      	strb	r3, [r7, #27]
 800cf38:	e069      	b.n	800d00e <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	7d1b      	ldrb	r3, [r3, #20]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d104      	bne.n	800cf4c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cf46:	23f7      	movs	r3, #247	; 0xf7
 800cf48:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cf4a:	e060      	b.n	800d00e <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cf4c:	2002      	movs	r0, #2
 800cf4e:	f7fe fbb3 	bl	800b6b8 <memp_malloc>
 800cf52:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d102      	bne.n	800cf60 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800cf5a:	23ff      	movs	r3, #255	; 0xff
 800cf5c:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cf5e:	e056      	b.n	800d00e <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	691a      	ldr	r2, [r3, #16]
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8ada      	ldrh	r2, [r3, #22]
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	2201      	movs	r2, #1
 800cf74:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	7d5a      	ldrb	r2, [r3, #21]
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7a1a      	ldrb	r2, [r3, #8]
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	7a9a      	ldrb	r2, [r3, #10]
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	7a5a      	ldrb	r2, [r3, #9]
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	8adb      	ldrh	r3, [r3, #22]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d021      	beq.n	800cfea <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cfa6:	4b22      	ldr	r3, [pc, #136]	; (800d030 <tcp_listen_with_backlog_and_err+0x124>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d105      	bne.n	800cfbc <tcp_listen_with_backlog_and_err+0xb0>
 800cfb0:	4b1f      	ldr	r3, [pc, #124]	; (800d030 <tcp_listen_with_backlog_and_err+0x124>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	4a1e      	ldr	r2, [pc, #120]	; (800d030 <tcp_listen_with_backlog_and_err+0x124>)
 800cfb8:	6013      	str	r3, [r2, #0]
 800cfba:	e013      	b.n	800cfe4 <tcp_listen_with_backlog_and_err+0xd8>
 800cfbc:	4b1c      	ldr	r3, [pc, #112]	; (800d030 <tcp_listen_with_backlog_and_err+0x124>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	617b      	str	r3, [r7, #20]
 800cfc2:	e00c      	b.n	800cfde <tcp_listen_with_backlog_and_err+0xd2>
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d104      	bne.n	800cfd8 <tcp_listen_with_backlog_and_err+0xcc>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	68da      	ldr	r2, [r3, #12]
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	60da      	str	r2, [r3, #12]
 800cfd6:	e005      	b.n	800cfe4 <tcp_listen_with_backlog_and_err+0xd8>
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1ef      	bne.n	800cfc4 <tcp_listen_with_backlog_and_err+0xb8>
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800cfea:	68f9      	ldr	r1, [r7, #12]
 800cfec:	2001      	movs	r0, #1
 800cfee:	f7fe fbb5 	bl	800b75c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	4a0f      	ldr	r2, [pc, #60]	; (800d034 <tcp_listen_with_backlog_and_err+0x128>)
 800cff6:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800cff8:	4b0f      	ldr	r3, [pc, #60]	; (800d038 <tcp_listen_with_backlog_and_err+0x12c>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	60da      	str	r2, [r3, #12]
 800d000:	4a0d      	ldr	r2, [pc, #52]	; (800d038 <tcp_listen_with_backlog_and_err+0x12c>)
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	f004 ff0d 	bl	8011e24 <tcp_timer_needed>
  res = ERR_OK;
 800d00a:	2300      	movs	r3, #0
 800d00c:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	7efa      	ldrb	r2, [r7, #27]
 800d018:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d01a:	69fb      	ldr	r3, [r7, #28]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3720      	adds	r7, #32
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	08016fac 	.word	0x08016fac
 800d028:	080170a0 	.word	0x080170a0
 800d02c:	08016fe8 	.word	0x08016fe8
 800d030:	2000bb70 	.word	0x2000bb70
 800d034:	0800cec9 	.word	0x0800cec9
 800d038:	2000bb6c 	.word	0x2000bb6c

0800d03c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d04c:	4413      	add	r3, r2
 800d04e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d058:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d05c:	bf28      	it	cs
 800d05e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d062:	b292      	uxth	r2, r2
 800d064:	4413      	add	r3, r2
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	db08      	blt.n	800d080 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	1ad3      	subs	r3, r2, r3
 800d07e:	e020      	b.n	800d0c2 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	dd03      	ble.n	800d096 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d094:	e014      	b.n	800d0c0 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0a8:	d306      	bcc.n	800d0b8 <tcp_update_rcv_ann_wnd+0x7c>
 800d0aa:	4b08      	ldr	r3, [pc, #32]	; (800d0cc <tcp_update_rcv_ann_wnd+0x90>)
 800d0ac:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d0b0:	4907      	ldr	r1, [pc, #28]	; (800d0d0 <tcp_update_rcv_ann_wnd+0x94>)
 800d0b2:	4808      	ldr	r0, [pc, #32]	; (800d0d4 <tcp_update_rcv_ann_wnd+0x98>)
 800d0b4:	f007 fd72 	bl	8014b9c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d0c0:	2300      	movs	r3, #0
  }
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	08016fac 	.word	0x08016fac
 800d0d0:	080170c4 	.word	0x080170c4
 800d0d4:	08016fe8 	.word	0x08016fe8

0800d0d8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	7d1b      	ldrb	r3, [r3, #20]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d106      	bne.n	800d0fa <tcp_recved+0x22>
 800d0ec:	4b23      	ldr	r3, [pc, #140]	; (800d17c <tcp_recved+0xa4>)
 800d0ee:	f240 321f 	movw	r2, #799	; 0x31f
 800d0f2:	4923      	ldr	r1, [pc, #140]	; (800d180 <tcp_recved+0xa8>)
 800d0f4:	4823      	ldr	r0, [pc, #140]	; (800d184 <tcp_recved+0xac>)
 800d0f6:	f007 fd51 	bl	8014b9c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0fe:	887b      	ldrh	r3, [r7, #2]
 800d100:	4413      	add	r3, r2
 800d102:	b29a      	uxth	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d10c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d110:	d904      	bls.n	800d11c <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d118:	851a      	strh	r2, [r3, #40]	; 0x28
 800d11a:	e017      	b.n	800d14c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d120:	2b00      	cmp	r3, #0
 800d122:	d113      	bne.n	800d14c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7d1b      	ldrb	r3, [r3, #20]
 800d128:	2b07      	cmp	r3, #7
 800d12a:	d003      	beq.n	800d134 <tcp_recved+0x5c>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	7d1b      	ldrb	r3, [r3, #20]
 800d130:	2b09      	cmp	r3, #9
 800d132:	d104      	bne.n	800d13e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d13a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d13c:	e006      	b.n	800d14c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800d13e:	4b0f      	ldr	r3, [pc, #60]	; (800d17c <tcp_recved+0xa4>)
 800d140:	f240 322d 	movw	r2, #813	; 0x32d
 800d144:	4910      	ldr	r1, [pc, #64]	; (800d188 <tcp_recved+0xb0>)
 800d146:	480f      	ldr	r0, [pc, #60]	; (800d184 <tcp_recved+0xac>)
 800d148:	f007 fd28 	bl	8014b9c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff ff75 	bl	800d03c <tcp_update_rcv_ann_wnd>
 800d152:	4603      	mov	r3, r0
 800d154:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d15c:	db09      	blt.n	800d172 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7e9b      	ldrb	r3, [r3, #26]
 800d162:	f043 0302 	orr.w	r3, r3, #2
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f004 f98d 	bl	801148c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d172:	bf00      	nop
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	08016fac 	.word	0x08016fac
 800d180:	080170e0 	.word	0x080170e0
 800d184:	08016fe8 	.word	0x08016fe8
 800d188:	08017108 	.word	0x08017108

0800d18c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800d196:	4b1d      	ldr	r3, [pc, #116]	; (800d20c <tcp_new_port+0x80>)
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	b291      	uxth	r1, r2
 800d19e:	4a1b      	ldr	r2, [pc, #108]	; (800d20c <tcp_new_port+0x80>)
 800d1a0:	8011      	strh	r1, [r2, #0]
 800d1a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d103      	bne.n	800d1b2 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d1aa:	4b18      	ldr	r3, [pc, #96]	; (800d20c <tcp_new_port+0x80>)
 800d1ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d1b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	71fb      	strb	r3, [r7, #7]
 800d1b6:	e01e      	b.n	800d1f6 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	4a15      	ldr	r2, [pc, #84]	; (800d210 <tcp_new_port+0x84>)
 800d1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	603b      	str	r3, [r7, #0]
 800d1c4:	e011      	b.n	800d1ea <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	8ada      	ldrh	r2, [r3, #22]
 800d1ca:	4b10      	ldr	r3, [pc, #64]	; (800d20c <tcp_new_port+0x80>)
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d108      	bne.n	800d1e4 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d1d2:	88bb      	ldrh	r3, [r7, #4]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	80bb      	strh	r3, [r7, #4]
 800d1d8:	88bb      	ldrh	r3, [r7, #4]
 800d1da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1de:	d3da      	bcc.n	800d196 <tcp_new_port+0xa>
          return 0;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	e00d      	b.n	800d200 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	603b      	str	r3, [r7, #0]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1ea      	bne.n	800d1c6 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d1f0:	79fb      	ldrb	r3, [r7, #7]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	71fb      	strb	r3, [r7, #7]
 800d1f6:	79fb      	ldrb	r3, [r7, #7]
 800d1f8:	2b03      	cmp	r3, #3
 800d1fa:	d9dd      	bls.n	800d1b8 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d1fc:	4b03      	ldr	r3, [pc, #12]	; (800d20c <tcp_new_port+0x80>)
 800d1fe:	881b      	ldrh	r3, [r3, #0]
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	bc80      	pop	{r7}
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	20000018 	.word	0x20000018
 800d210:	0801873c 	.word	0x0801873c

0800d214 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08a      	sub	sp, #40	; 0x28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	603b      	str	r3, [r7, #0]
 800d220:	4613      	mov	r3, r2
 800d222:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <tcp_connect+0x1c>
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <tcp_connect+0x22>
    return ERR_VAL;
 800d230:	f06f 0305 	mvn.w	r3, #5
 800d234:	e0d1      	b.n	800d3da <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	7d1b      	ldrb	r3, [r3, #20]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d009      	beq.n	800d252 <tcp_connect+0x3e>
 800d23e:	4b69      	ldr	r3, [pc, #420]	; (800d3e4 <tcp_connect+0x1d0>)
 800d240:	f44f 725e 	mov.w	r2, #888	; 0x378
 800d244:	4968      	ldr	r1, [pc, #416]	; (800d3e8 <tcp_connect+0x1d4>)
 800d246:	4869      	ldr	r0, [pc, #420]	; (800d3ec <tcp_connect+0x1d8>)
 800d248:	f007 fca8 	bl	8014b9c <iprintf>
 800d24c:	f06f 0309 	mvn.w	r3, #9
 800d250:	e0c3      	b.n	800d3da <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <tcp_connect+0x4a>
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	e000      	b.n	800d260 <tcp_connect+0x4c>
 800d25e:	2300      	movs	r3, #0
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	88fa      	ldrh	r2, [r7, #6]
 800d268:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d003      	beq.n	800d278 <tcp_connect+0x64>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d11a      	bne.n	800d2ae <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3304      	adds	r3, #4
 800d27c:	4618      	mov	r0, r3
 800d27e:	f006 f9af 	bl	80135e0 <ip4_route>
 800d282:	6238      	str	r0, [r7, #32]
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d002      	beq.n	800d290 <tcp_connect+0x7c>
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	3304      	adds	r3, #4
 800d28e:	e000      	b.n	800d292 <tcp_connect+0x7e>
 800d290:	2300      	movs	r3, #0
 800d292:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800d294:	6a3b      	ldr	r3, [r7, #32]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <tcp_connect+0x8c>
 800d29a:	69fb      	ldr	r3, [r7, #28]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d102      	bne.n	800d2a6 <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800d2a0:	f06f 0303 	mvn.w	r3, #3
 800d2a4:	e099      	b.n	800d3da <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	8adb      	ldrh	r3, [r3, #22]
 800d2b2:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	8adb      	ldrh	r3, [r3, #22]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10c      	bne.n	800d2d6 <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800d2bc:	f7ff ff66 	bl	800d18c <tcp_new_port>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	8adb      	ldrh	r3, [r3, #22]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <tcp_connect+0xc2>
      return ERR_BUF;
 800d2d0:	f06f 0301 	mvn.w	r3, #1
 800d2d4:	e081      	b.n	800d3da <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f000 ff58 	bl	800e18c <tcp_next_iss>
 800d2dc:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	1e5a      	subs	r2, r3, #1
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	1e5a      	subs	r2, r3, #1
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	1e5a      	subs	r2, r3, #1
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d308:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d32a:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3304      	adds	r3, #4
 800d334:	4619      	mov	r1, r3
 800d336:	4610      	mov	r0, r2
 800d338:	f000 ff3e 	bl	800e1b8 <tcp_eff_send_mss_impl>
 800d33c:	4603      	mov	r3, r0
 800d33e:	461a      	mov	r2, r3
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2201      	movs	r2, #1
 800d348:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d354:	2102      	movs	r1, #2
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f003 ff40 	bl	80111dc <tcp_enqueue_flags>
 800d35c:	4603      	mov	r3, r0
 800d35e:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d360:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d136      	bne.n	800d3d6 <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2202      	movs	r2, #2
 800d36c:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d36e:	8b7b      	ldrh	r3, [r7, #26]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d021      	beq.n	800d3b8 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d374:	4b1e      	ldr	r3, [pc, #120]	; (800d3f0 <tcp_connect+0x1dc>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d105      	bne.n	800d38a <tcp_connect+0x176>
 800d37e:	4b1c      	ldr	r3, [pc, #112]	; (800d3f0 <tcp_connect+0x1dc>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	4a1a      	ldr	r2, [pc, #104]	; (800d3f0 <tcp_connect+0x1dc>)
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	e013      	b.n	800d3b2 <tcp_connect+0x19e>
 800d38a:	4b19      	ldr	r3, [pc, #100]	; (800d3f0 <tcp_connect+0x1dc>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	627b      	str	r3, [r7, #36]	; 0x24
 800d390:	e00c      	b.n	800d3ac <tcp_connect+0x198>
 800d392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d104      	bne.n	800d3a6 <tcp_connect+0x192>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	68da      	ldr	r2, [r3, #12]
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a2:	60da      	str	r2, [r3, #12]
 800d3a4:	e005      	b.n	800d3b2 <tcp_connect+0x19e>
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1ef      	bne.n	800d392 <tcp_connect+0x17e>
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d3b8:	4b0e      	ldr	r3, [pc, #56]	; (800d3f4 <tcp_connect+0x1e0>)
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	60da      	str	r2, [r3, #12]
 800d3c0:	4a0c      	ldr	r2, [pc, #48]	; (800d3f4 <tcp_connect+0x1e0>)
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6013      	str	r3, [r2, #0]
 800d3c6:	f004 fd2d 	bl	8011e24 <tcp_timer_needed>
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <tcp_connect+0x1e4>)
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f004 f85b 	bl	801148c <tcp_output>
  }
  return ret;
 800d3d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3728      	adds	r7, #40	; 0x28
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	08016fac 	.word	0x08016fac
 800d3e8:	0801712c 	.word	0x0801712c
 800d3ec:	08016fe8 	.word	0x08016fe8
 800d3f0:	2000bb70 	.word	0x2000bb70
 800d3f4:	2000bb64 	.word	0x2000bb64
 800d3f8:	2000bb60 	.word	0x2000bb60

0800d3fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d3fc:	b5b0      	push	{r4, r5, r7, lr}
 800d3fe:	b08c      	sub	sp, #48	; 0x30
 800d400:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d406:	4b97      	ldr	r3, [pc, #604]	; (800d664 <tcp_slowtmr+0x268>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3301      	adds	r3, #1
 800d40c:	4a95      	ldr	r2, [pc, #596]	; (800d664 <tcp_slowtmr+0x268>)
 800d40e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d410:	4b95      	ldr	r3, [pc, #596]	; (800d668 <tcp_slowtmr+0x26c>)
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	3301      	adds	r3, #1
 800d416:	b2da      	uxtb	r2, r3
 800d418:	4b93      	ldr	r3, [pc, #588]	; (800d668 <tcp_slowtmr+0x26c>)
 800d41a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d41c:	2300      	movs	r3, #0
 800d41e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d420:	4b92      	ldr	r3, [pc, #584]	; (800d66c <tcp_slowtmr+0x270>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d426:	e227      	b.n	800d878 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	7d1b      	ldrb	r3, [r3, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d106      	bne.n	800d43e <tcp_slowtmr+0x42>
 800d430:	4b8f      	ldr	r3, [pc, #572]	; (800d670 <tcp_slowtmr+0x274>)
 800d432:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d436:	498f      	ldr	r1, [pc, #572]	; (800d674 <tcp_slowtmr+0x278>)
 800d438:	488f      	ldr	r0, [pc, #572]	; (800d678 <tcp_slowtmr+0x27c>)
 800d43a:	f007 fbaf 	bl	8014b9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	7d1b      	ldrb	r3, [r3, #20]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d106      	bne.n	800d454 <tcp_slowtmr+0x58>
 800d446:	4b8a      	ldr	r3, [pc, #552]	; (800d670 <tcp_slowtmr+0x274>)
 800d448:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d44c:	498b      	ldr	r1, [pc, #556]	; (800d67c <tcp_slowtmr+0x280>)
 800d44e:	488a      	ldr	r0, [pc, #552]	; (800d678 <tcp_slowtmr+0x27c>)
 800d450:	f007 fba4 	bl	8014b9c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	7d1b      	ldrb	r3, [r3, #20]
 800d458:	2b0a      	cmp	r3, #10
 800d45a:	d106      	bne.n	800d46a <tcp_slowtmr+0x6e>
 800d45c:	4b84      	ldr	r3, [pc, #528]	; (800d670 <tcp_slowtmr+0x274>)
 800d45e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d462:	4987      	ldr	r1, [pc, #540]	; (800d680 <tcp_slowtmr+0x284>)
 800d464:	4884      	ldr	r0, [pc, #528]	; (800d678 <tcp_slowtmr+0x27c>)
 800d466:	f007 fb99 	bl	8014b9c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	7f5a      	ldrb	r2, [r3, #29]
 800d46e:	4b7e      	ldr	r3, [pc, #504]	; (800d668 <tcp_slowtmr+0x26c>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	429a      	cmp	r2, r3
 800d474:	d103      	bne.n	800d47e <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d47c:	e1fc      	b.n	800d878 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d47e:	4b7a      	ldr	r3, [pc, #488]	; (800d668 <tcp_slowtmr+0x26c>)
 800d480:	781a      	ldrb	r2, [r3, #0]
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	7d1b      	ldrb	r3, [r3, #20]
 800d492:	2b02      	cmp	r3, #2
 800d494:	d108      	bne.n	800d4a8 <tcp_slowtmr+0xac>
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d49c:	2b05      	cmp	r3, #5
 800d49e:	d903      	bls.n	800d4a8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d4a0:	7ffb      	ldrb	r3, [r7, #31]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	77fb      	strb	r3, [r7, #31]
 800d4a6:	e0a2      	b.n	800d5ee <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4ae:	2b0b      	cmp	r3, #11
 800d4b0:	d903      	bls.n	800d4ba <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d4b2:	7ffb      	ldrb	r3, [r7, #31]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	77fb      	strb	r3, [r7, #31]
 800d4b8:	e099      	b.n	800d5ee <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4bc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d032      	beq.n	800d52a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	4a6d      	ldr	r2, [pc, #436]	; (800d684 <tcp_slowtmr+0x288>)
 800d4ce:	5cd3      	ldrb	r3, [r2, r3]
 800d4d0:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d4d8:	7cfa      	ldrb	r2, [r7, #19]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d907      	bls.n	800d4ee <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	b2da      	uxtb	r2, r3
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ea:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800d4f4:	7cfa      	ldrb	r2, [r7, #19]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d879      	bhi.n	800d5ee <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d4fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4fc:	f004 fbd1 	bl	8011ca2 <tcp_zero_window_probe>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d173      	bne.n	800d5ee <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	2200      	movs	r2, #0
 800d50a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d514:	2b06      	cmp	r3, #6
 800d516:	d86a      	bhi.n	800d5ee <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d51e:	3301      	adds	r3, #1
 800d520:	b2da      	uxtb	r2, r3
 800d522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d524:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d528:	e061      	b.n	800d5ee <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d530:	2b00      	cmp	r3, #0
 800d532:	db08      	blt.n	800d546 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	3301      	adds	r3, #1
 800d53e:	b29b      	uxth	r3, r3
 800d540:	b21a      	sxth	r2, r3
 800d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d544:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d04f      	beq.n	800d5ee <tcp_slowtmr+0x1f2>
 800d54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d550:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d55a:	429a      	cmp	r2, r3
 800d55c:	db47      	blt.n	800d5ee <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d560:	7d1b      	ldrb	r3, [r3, #20]
 800d562:	2b02      	cmp	r3, #2
 800d564:	d018      	beq.n	800d598 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d568:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d56c:	2b0c      	cmp	r3, #12
 800d56e:	bf28      	it	cs
 800d570:	230c      	movcs	r3, #12
 800d572:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d576:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d57a:	10db      	asrs	r3, r3, #3
 800d57c:	b21b      	sxth	r3, r3
 800d57e:	461a      	mov	r2, r3
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d586:	4413      	add	r3, r2
 800d588:	7dfa      	ldrb	r2, [r7, #23]
 800d58a:	493f      	ldr	r1, [pc, #252]	; (800d688 <tcp_slowtmr+0x28c>)
 800d58c:	5c8a      	ldrb	r2, [r1, r2]
 800d58e:	4093      	lsls	r3, r2
 800d590:	b21a      	sxth	r2, r3
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59a:	2200      	movs	r2, #0
 800d59c:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	bf28      	it	cs
 800d5ae:	4613      	movcs	r3, r2
 800d5b0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800d5b2:	8abb      	ldrh	r3, [r7, #20]
 800d5b4:	085b      	lsrs	r3, r3, #1
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5c8:	005b      	lsls	r3, r3, #1
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d206      	bcs.n	800d5de <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5d4:	005b      	lsls	r3, r3, #1
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d5e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5ea:	f004 fa49 	bl	8011a80 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	7d1b      	ldrb	r3, [r3, #20]
 800d5f2:	2b06      	cmp	r3, #6
 800d5f4:	d10f      	bne.n	800d616 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f8:	7e9b      	ldrb	r3, [r3, #26]
 800d5fa:	f003 0310 	and.w	r3, r3, #16
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d009      	beq.n	800d616 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d602:	4b18      	ldr	r3, [pc, #96]	; (800d664 <tcp_slowtmr+0x268>)
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	2b28      	cmp	r3, #40	; 0x28
 800d60e:	d902      	bls.n	800d616 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d610:	7ffb      	ldrb	r3, [r7, #31]
 800d612:	3301      	adds	r3, #1
 800d614:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	7a1b      	ldrb	r3, [r3, #8]
 800d61a:	f003 0308 	and.w	r3, r3, #8
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d05d      	beq.n	800d6de <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d626:	2b04      	cmp	r3, #4
 800d628:	d003      	beq.n	800d632 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d62e:	2b07      	cmp	r3, #7
 800d630:	d155      	bne.n	800d6de <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d632:	4b0c      	ldr	r3, [pc, #48]	; (800d664 <tcp_slowtmr+0x268>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d642:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d646:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d64a:	4910      	ldr	r1, [pc, #64]	; (800d68c <tcp_slowtmr+0x290>)
 800d64c:	fba1 1303 	umull	r1, r3, r1, r3
 800d650:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d652:	429a      	cmp	r2, r3
 800d654:	d91c      	bls.n	800d690 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d656:	7ffb      	ldrb	r3, [r7, #31]
 800d658:	3301      	adds	r3, #1
 800d65a:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d65c:	7fbb      	ldrb	r3, [r7, #30]
 800d65e:	3301      	adds	r3, #1
 800d660:	77bb      	strb	r3, [r7, #30]
 800d662:	e03c      	b.n	800d6de <tcp_slowtmr+0x2e2>
 800d664:	2000bb68 	.word	0x2000bb68
 800d668:	20004ae6 	.word	0x20004ae6
 800d66c:	2000bb64 	.word	0x2000bb64
 800d670:	08016fac 	.word	0x08016fac
 800d674:	0801715c 	.word	0x0801715c
 800d678:	08016fe8 	.word	0x08016fe8
 800d67c:	08017188 	.word	0x08017188
 800d680:	080171b4 	.word	0x080171b4
 800d684:	08018734 	.word	0x08018734
 800d688:	08018724 	.word	0x08018724
 800d68c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d690:	4b97      	ldr	r3, [pc, #604]	; (800d8f0 <tcp_slowtmr+0x4f4>)
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	6a1b      	ldr	r3, [r3, #32]
 800d698:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	4b92      	ldr	r3, [pc, #584]	; (800d8f4 <tcp_slowtmr+0x4f8>)
 800d6aa:	fb03 f300 	mul.w	r3, r3, r0
 800d6ae:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d6b0:	4991      	ldr	r1, [pc, #580]	; (800d8f8 <tcp_slowtmr+0x4fc>)
 800d6b2:	fba1 1303 	umull	r1, r3, r1, r3
 800d6b6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d910      	bls.n	800d6de <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800d6bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6be:	f004 fab3 	bl	8011c28 <tcp_keepalive>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d6c6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d107      	bne.n	800d6de <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	b2da      	uxtb	r2, r3
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d016      	beq.n	800d714 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d6e6:	4b82      	ldr	r3, [pc, #520]	; (800d8f0 <tcp_slowtmr+0x4f4>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	1ad2      	subs	r2, r2, r3
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	440b      	add	r3, r1
 800d6fe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d700:	429a      	cmp	r2, r3
 800d702:	d307      	bcc.n	800d714 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d708:	4618      	mov	r0, r3
 800d70a:	f000 fa06 	bl	800db1a <tcp_segs_free>
      pcb->ooseq = NULL;
 800d70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d710:	2200      	movs	r2, #0
 800d712:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	7d1b      	ldrb	r3, [r3, #20]
 800d718:	2b03      	cmp	r3, #3
 800d71a:	d109      	bne.n	800d730 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d71c:	4b74      	ldr	r3, [pc, #464]	; (800d8f0 <tcp_slowtmr+0x4f4>)
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	6a1b      	ldr	r3, [r3, #32]
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	2b28      	cmp	r3, #40	; 0x28
 800d728:	d902      	bls.n	800d730 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d72a:	7ffb      	ldrb	r3, [r7, #31]
 800d72c:	3301      	adds	r3, #1
 800d72e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	7d1b      	ldrb	r3, [r3, #20]
 800d734:	2b09      	cmp	r3, #9
 800d736:	d109      	bne.n	800d74c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d738:	4b6d      	ldr	r3, [pc, #436]	; (800d8f0 <tcp_slowtmr+0x4f4>)
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	2bf0      	cmp	r3, #240	; 0xf0
 800d744:	d902      	bls.n	800d74c <tcp_slowtmr+0x350>
        ++pcb_remove;
 800d746:	7ffb      	ldrb	r3, [r7, #31]
 800d748:	3301      	adds	r3, #1
 800d74a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d74c:	7ffb      	ldrb	r3, [r7, #31]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d05d      	beq.n	800d80e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d758:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d75a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d75c:	f000 fc58 	bl	800e010 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d010      	beq.n	800d788 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d766:	4b65      	ldr	r3, [pc, #404]	; (800d8fc <tcp_slowtmr+0x500>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d106      	bne.n	800d77e <tcp_slowtmr+0x382>
 800d770:	4b63      	ldr	r3, [pc, #396]	; (800d900 <tcp_slowtmr+0x504>)
 800d772:	f240 4289 	movw	r2, #1161	; 0x489
 800d776:	4963      	ldr	r1, [pc, #396]	; (800d904 <tcp_slowtmr+0x508>)
 800d778:	4863      	ldr	r0, [pc, #396]	; (800d908 <tcp_slowtmr+0x50c>)
 800d77a:	f007 fa0f 	bl	8014b9c <iprintf>
        prev->next = pcb->next;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d780:	68da      	ldr	r2, [r3, #12]
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	60da      	str	r2, [r3, #12]
 800d786:	e00f      	b.n	800d7a8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d788:	4b5c      	ldr	r3, [pc, #368]	; (800d8fc <tcp_slowtmr+0x500>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d78e:	429a      	cmp	r2, r3
 800d790:	d006      	beq.n	800d7a0 <tcp_slowtmr+0x3a4>
 800d792:	4b5b      	ldr	r3, [pc, #364]	; (800d900 <tcp_slowtmr+0x504>)
 800d794:	f240 428d 	movw	r2, #1165	; 0x48d
 800d798:	495c      	ldr	r1, [pc, #368]	; (800d90c <tcp_slowtmr+0x510>)
 800d79a:	485b      	ldr	r0, [pc, #364]	; (800d908 <tcp_slowtmr+0x50c>)
 800d79c:	f007 f9fe 	bl	8014b9c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	4a55      	ldr	r2, [pc, #340]	; (800d8fc <tcp_slowtmr+0x500>)
 800d7a6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d7a8:	7fbb      	ldrb	r3, [r7, #30]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d010      	beq.n	800d7d0 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d7b6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ba:	1d1d      	adds	r5, r3, #4
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7be:	8adb      	ldrh	r3, [r3, #22]
 800d7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7c2:	8b12      	ldrh	r2, [r2, #24]
 800d7c4:	9201      	str	r2, [sp, #4]
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	462b      	mov	r3, r5
 800d7ca:	4622      	mov	r2, r4
 800d7cc:	f004 f8e2 	bl	8011994 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	7d1b      	ldrb	r3, [r3, #20]
 800d7da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	f7fd ffb7 	bl	800b75c <memp_free>

      tcp_active_pcbs_changed = 0;
 800d7ee:	4b48      	ldr	r3, [pc, #288]	; (800d910 <tcp_slowtmr+0x514>)
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d004      	beq.n	800d804 <tcp_slowtmr+0x408>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f06f 010c 	mvn.w	r1, #12
 800d800:	68b8      	ldr	r0, [r7, #8]
 800d802:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d804:	4b42      	ldr	r3, [pc, #264]	; (800d910 <tcp_slowtmr+0x514>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d035      	beq.n	800d878 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800d80c:	e606      	b.n	800d41c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d818:	6a3b      	ldr	r3, [r7, #32]
 800d81a:	7edb      	ldrb	r3, [r3, #27]
 800d81c:	3301      	adds	r3, #1
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	6a3b      	ldr	r3, [r7, #32]
 800d822:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	7eda      	ldrb	r2, [r3, #27]
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	7f1b      	ldrb	r3, [r3, #28]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d323      	bcc.n	800d878 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800d830:	6a3b      	ldr	r3, [r7, #32]
 800d832:	2200      	movs	r2, #0
 800d834:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d836:	4b36      	ldr	r3, [pc, #216]	; (800d910 <tcp_slowtmr+0x514>)
 800d838:	2200      	movs	r2, #0
 800d83a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d83c:	6a3b      	ldr	r3, [r7, #32]
 800d83e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00a      	beq.n	800d85c <tcp_slowtmr+0x460>
 800d846:	6a3b      	ldr	r3, [r7, #32]
 800d848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d84c:	6a3a      	ldr	r2, [r7, #32]
 800d84e:	6912      	ldr	r2, [r2, #16]
 800d850:	6a39      	ldr	r1, [r7, #32]
 800d852:	4610      	mov	r0, r2
 800d854:	4798      	blx	r3
 800d856:	4603      	mov	r3, r0
 800d858:	777b      	strb	r3, [r7, #29]
 800d85a:	e001      	b.n	800d860 <tcp_slowtmr+0x464>
 800d85c:	2300      	movs	r3, #0
 800d85e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800d860:	4b2b      	ldr	r3, [pc, #172]	; (800d910 <tcp_slowtmr+0x514>)
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d000      	beq.n	800d86a <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800d868:	e5d8      	b.n	800d41c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d86a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d102      	bne.n	800d878 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800d872:	6a38      	ldr	r0, [r7, #32]
 800d874:	f003 fe0a 	bl	801148c <tcp_output>
  while (pcb != NULL) {
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f47f add4 	bne.w	800d428 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d880:	2300      	movs	r3, #0
 800d882:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800d884:	4b23      	ldr	r3, [pc, #140]	; (800d914 <tcp_slowtmr+0x518>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d88a:	e068      	b.n	800d95e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	7d1b      	ldrb	r3, [r3, #20]
 800d890:	2b0a      	cmp	r3, #10
 800d892:	d006      	beq.n	800d8a2 <tcp_slowtmr+0x4a6>
 800d894:	4b1a      	ldr	r3, [pc, #104]	; (800d900 <tcp_slowtmr+0x504>)
 800d896:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d89a:	491f      	ldr	r1, [pc, #124]	; (800d918 <tcp_slowtmr+0x51c>)
 800d89c:	481a      	ldr	r0, [pc, #104]	; (800d908 <tcp_slowtmr+0x50c>)
 800d89e:	f007 f97d 	bl	8014b9c <iprintf>
    pcb_remove = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d8a6:	4b12      	ldr	r3, [pc, #72]	; (800d8f0 <tcp_slowtmr+0x4f4>)
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ac:	6a1b      	ldr	r3, [r3, #32]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	2bf0      	cmp	r3, #240	; 0xf0
 800d8b2:	d902      	bls.n	800d8ba <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800d8b4:	7ffb      	ldrb	r3, [r7, #31]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d8ba:	7ffb      	ldrb	r3, [r7, #31]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d049      	beq.n	800d954 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8c2:	f000 fba5 	bl	800e010 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d029      	beq.n	800d920 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d8cc:	4b11      	ldr	r3, [pc, #68]	; (800d914 <tcp_slowtmr+0x518>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d106      	bne.n	800d8e4 <tcp_slowtmr+0x4e8>
 800d8d6:	4b0a      	ldr	r3, [pc, #40]	; (800d900 <tcp_slowtmr+0x504>)
 800d8d8:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800d8dc:	490f      	ldr	r1, [pc, #60]	; (800d91c <tcp_slowtmr+0x520>)
 800d8de:	480a      	ldr	r0, [pc, #40]	; (800d908 <tcp_slowtmr+0x50c>)
 800d8e0:	f007 f95c 	bl	8014b9c <iprintf>
        prev->next = pcb->next;
 800d8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	60da      	str	r2, [r3, #12]
 800d8ec:	e028      	b.n	800d940 <tcp_slowtmr+0x544>
 800d8ee:	bf00      	nop
 800d8f0:	2000bb68 	.word	0x2000bb68
 800d8f4:	000124f8 	.word	0x000124f8
 800d8f8:	10624dd3 	.word	0x10624dd3
 800d8fc:	2000bb64 	.word	0x2000bb64
 800d900:	08016fac 	.word	0x08016fac
 800d904:	080171e4 	.word	0x080171e4
 800d908:	08016fe8 	.word	0x08016fe8
 800d90c:	08017210 	.word	0x08017210
 800d910:	2000bb60 	.word	0x2000bb60
 800d914:	2000bb74 	.word	0x2000bb74
 800d918:	0801723c 	.word	0x0801723c
 800d91c:	0801726c 	.word	0x0801726c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d920:	4b13      	ldr	r3, [pc, #76]	; (800d970 <tcp_slowtmr+0x574>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d926:	429a      	cmp	r2, r3
 800d928:	d006      	beq.n	800d938 <tcp_slowtmr+0x53c>
 800d92a:	4b12      	ldr	r3, [pc, #72]	; (800d974 <tcp_slowtmr+0x578>)
 800d92c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800d930:	4911      	ldr	r1, [pc, #68]	; (800d978 <tcp_slowtmr+0x57c>)
 800d932:	4812      	ldr	r0, [pc, #72]	; (800d97c <tcp_slowtmr+0x580>)
 800d934:	f007 f932 	bl	8014b9c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	4a0c      	ldr	r2, [pc, #48]	; (800d970 <tcp_slowtmr+0x574>)
 800d93e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800d944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d94a:	69b9      	ldr	r1, [r7, #24]
 800d94c:	2001      	movs	r0, #1
 800d94e:	f7fd ff05 	bl	800b75c <memp_free>
 800d952:	e004      	b.n	800d95e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	2b00      	cmp	r3, #0
 800d962:	d193      	bne.n	800d88c <tcp_slowtmr+0x490>
    }
  }
}
 800d964:	bf00      	nop
 800d966:	bf00      	nop
 800d968:	3728      	adds	r7, #40	; 0x28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bdb0      	pop	{r4, r5, r7, pc}
 800d96e:	bf00      	nop
 800d970:	2000bb74 	.word	0x2000bb74
 800d974:	08016fac 	.word	0x08016fac
 800d978:	08017294 	.word	0x08017294
 800d97c:	08016fe8 	.word	0x08016fe8

0800d980 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d986:	4b2d      	ldr	r3, [pc, #180]	; (800da3c <tcp_fasttmr+0xbc>)
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	3301      	adds	r3, #1
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	4b2b      	ldr	r3, [pc, #172]	; (800da3c <tcp_fasttmr+0xbc>)
 800d990:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d992:	4b2b      	ldr	r3, [pc, #172]	; (800da40 <tcp_fasttmr+0xc0>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d998:	e048      	b.n	800da2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7f5a      	ldrb	r2, [r3, #29]
 800d99e:	4b27      	ldr	r3, [pc, #156]	; (800da3c <tcp_fasttmr+0xbc>)
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d03f      	beq.n	800da26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d9a6:	4b25      	ldr	r3, [pc, #148]	; (800da3c <tcp_fasttmr+0xbc>)
 800d9a8:	781a      	ldrb	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	7e9b      	ldrb	r3, [r3, #26]
 800d9b2:	f003 0301 	and.w	r3, r3, #1
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d010      	beq.n	800d9dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	7e9b      	ldrb	r3, [r3, #26]
 800d9be:	f043 0302 	orr.w	r3, r3, #2
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f003 fd5f 	bl	801148c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	7e9b      	ldrb	r3, [r3, #26]
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	7e9b      	ldrb	r3, [r3, #26]
 800d9e0:	f003 0308 	and.w	r3, r3, #8
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d009      	beq.n	800d9fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	7e9b      	ldrb	r3, [r3, #26]
 800d9ec:	f023 0308 	bic.w	r3, r3, #8
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff f894 	bl	800cb24 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da06:	2b00      	cmp	r3, #0
 800da08:	d00a      	beq.n	800da20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800da0a:	4b0e      	ldr	r3, [pc, #56]	; (800da44 <tcp_fasttmr+0xc4>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 f819 	bl	800da48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800da16:	4b0b      	ldr	r3, [pc, #44]	; (800da44 <tcp_fasttmr+0xc4>)
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d000      	beq.n	800da20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800da1e:	e7b8      	b.n	800d992 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	607b      	str	r3, [r7, #4]
 800da24:	e002      	b.n	800da2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d1b3      	bne.n	800d99a <tcp_fasttmr+0x1a>
    }
  }
}
 800da32:	bf00      	nop
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	20004ae6 	.word	0x20004ae6
 800da40:	2000bb64 	.word	0x2000bb64
 800da44:	2000bb60 	.word	0x2000bb60

0800da48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800da48:	b590      	push	{r4, r7, lr}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da54:	7b5b      	ldrb	r3, [r3, #13]
 800da56:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da5c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00b      	beq.n	800da86 <tcp_process_refused_data+0x3e>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6918      	ldr	r0, [r3, #16]
 800da78:	2300      	movs	r3, #0
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	6879      	ldr	r1, [r7, #4]
 800da7e:	47a0      	blx	r4
 800da80:	4603      	mov	r3, r0
 800da82:	73fb      	strb	r3, [r7, #15]
 800da84:	e007      	b.n	800da96 <tcp_process_refused_data+0x4e>
 800da86:	2300      	movs	r3, #0
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	6879      	ldr	r1, [r7, #4]
 800da8c:	2000      	movs	r0, #0
 800da8e:	f000 f89b 	bl	800dbc8 <tcp_recv_null>
 800da92:	4603      	mov	r3, r0
 800da94:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800da96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d12a      	bne.n	800daf4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800da9e:	7bbb      	ldrb	r3, [r7, #14]
 800daa0:	f003 0320 	and.w	r3, r3, #32
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d033      	beq.n	800db10 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dab0:	d005      	beq.n	800dabe <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dab6:	3301      	adds	r3, #1
 800dab8:	b29a      	uxth	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00b      	beq.n	800dae0 <tcp_process_refused_data+0x98>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6918      	ldr	r0, [r3, #16]
 800dad2:	2300      	movs	r3, #0
 800dad4:	2200      	movs	r2, #0
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	47a0      	blx	r4
 800dada:	4603      	mov	r3, r0
 800dadc:	73fb      	strb	r3, [r7, #15]
 800dade:	e001      	b.n	800dae4 <tcp_process_refused_data+0x9c>
 800dae0:	2300      	movs	r3, #0
 800dae2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dae8:	f113 0f0d 	cmn.w	r3, #13
 800daec:	d110      	bne.n	800db10 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800daee:	f06f 030c 	mvn.w	r3, #12
 800daf2:	e00e      	b.n	800db12 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800daf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf8:	f113 0f0d 	cmn.w	r3, #13
 800dafc:	d102      	bne.n	800db04 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dafe:	f06f 030c 	mvn.w	r3, #12
 800db02:	e006      	b.n	800db12 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800db0a:	f06f 0304 	mvn.w	r3, #4
 800db0e:	e000      	b.n	800db12 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	bd90      	pop	{r4, r7, pc}

0800db1a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800db22:	e007      	b.n	800db34 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 f80a 	bl	800db44 <tcp_seg_free>
    seg = next;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1f4      	bne.n	800db24 <tcp_segs_free+0xa>
  }
}
 800db3a:	bf00      	nop
 800db3c:	bf00      	nop
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00c      	beq.n	800db6c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d004      	beq.n	800db64 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fe fbb0 	bl	800c2c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800db64:	6879      	ldr	r1, [r7, #4]
 800db66:	2003      	movs	r0, #3
 800db68:	f7fd fdf8 	bl	800b75c <memp_free>
  }
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	78fa      	ldrb	r2, [r7, #3]
 800db84:	755a      	strb	r2, [r3, #21]
}
 800db86:	bf00      	nop
 800db88:	370c      	adds	r7, #12
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bc80      	pop	{r7}
 800db8e:	4770      	bx	lr

0800db90 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800db98:	2003      	movs	r0, #3
 800db9a:	f7fd fd8d 	bl	800b6b8 <memp_malloc>
 800db9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <tcp_seg_copy+0x1a>
    return NULL;
 800dba6:	2300      	movs	r3, #0
 800dba8:	e00a      	b.n	800dbc0 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dbaa:	2210      	movs	r2, #16
 800dbac:	6879      	ldr	r1, [r7, #4]
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	f006 ffde 	bl	8014b70 <memcpy>
  pbuf_ref(cseg->p);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fe fc33 	bl	800c424 <pbuf_ref>
  return cseg;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d009      	beq.n	800dbf0 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	891b      	ldrh	r3, [r3, #8]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	68b8      	ldr	r0, [r7, #8]
 800dbe4:	f7ff fa78 	bl	800d0d8 <tcp_recved>
    pbuf_free(p);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f7fe fb6b 	bl	800c2c4 <pbuf_free>
 800dbee:	e008      	b.n	800dc02 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800dbf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d104      	bne.n	800dc02 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800dbf8:	68b8      	ldr	r0, [r7, #8]
 800dbfa:	f7fe fffd 	bl	800cbf8 <tcp_close>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	e000      	b.n	800dc04 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dc16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	db01      	blt.n	800dc22 <tcp_kill_prio+0x16>
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	e000      	b.n	800dc24 <tcp_kill_prio+0x18>
 800dc22:	237f      	movs	r3, #127	; 0x7f
 800dc24:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc2e:	4b16      	ldr	r3, [pc, #88]	; (800dc88 <tcp_kill_prio+0x7c>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	e01a      	b.n	800dc6c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	7d5b      	ldrb	r3, [r3, #21]
 800dc3a:	7afa      	ldrb	r2, [r7, #11]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d312      	bcc.n	800dc66 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dc40:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <tcp_kill_prio+0x80>)
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d80a      	bhi.n	800dc66 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800dc50:	4b0e      	ldr	r3, [pc, #56]	; (800dc8c <tcp_kill_prio+0x80>)
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	6a1b      	ldr	r3, [r3, #32]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	7d5b      	ldrb	r3, [r3, #21]
 800dc64:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	68db      	ldr	r3, [r3, #12]
 800dc6a:	617b      	str	r3, [r7, #20]
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1e1      	bne.n	800dc36 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d002      	beq.n	800dc7e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dc78:	6938      	ldr	r0, [r7, #16]
 800dc7a:	f7ff f887 	bl	800cd8c <tcp_abort>
  }
}
 800dc7e:	bf00      	nop
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	2000bb64 	.word	0x2000bb64
 800dc8c:	2000bb68 	.word	0x2000bb68

0800dc90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dc9a:	79fb      	ldrb	r3, [r7, #7]
 800dc9c:	2b08      	cmp	r3, #8
 800dc9e:	d009      	beq.n	800dcb4 <tcp_kill_state+0x24>
 800dca0:	79fb      	ldrb	r3, [r7, #7]
 800dca2:	2b09      	cmp	r3, #9
 800dca4:	d006      	beq.n	800dcb4 <tcp_kill_state+0x24>
 800dca6:	4b1a      	ldr	r3, [pc, #104]	; (800dd10 <tcp_kill_state+0x80>)
 800dca8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800dcac:	4919      	ldr	r1, [pc, #100]	; (800dd14 <tcp_kill_state+0x84>)
 800dcae:	481a      	ldr	r0, [pc, #104]	; (800dd18 <tcp_kill_state+0x88>)
 800dcb0:	f006 ff74 	bl	8014b9c <iprintf>

  inactivity = 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcbc:	4b17      	ldr	r3, [pc, #92]	; (800dd1c <tcp_kill_state+0x8c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	e017      	b.n	800dcf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	7d1b      	ldrb	r3, [r3, #20]
 800dcc8:	79fa      	ldrb	r2, [r7, #7]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d10f      	bne.n	800dcee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcce:	4b14      	ldr	r3, [pc, #80]	; (800dd20 <tcp_kill_state+0x90>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	6a1b      	ldr	r3, [r3, #32]
 800dcd6:	1ad3      	subs	r3, r2, r3
 800dcd8:	68fa      	ldr	r2, [r7, #12]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d807      	bhi.n	800dcee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <tcp_kill_state+0x90>)
 800dce0:	681a      	ldr	r2, [r3, #0]
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	6a1b      	ldr	r3, [r3, #32]
 800dce6:	1ad3      	subs	r3, r2, r3
 800dce8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1e4      	bne.n	800dcc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dd00:	2100      	movs	r1, #0
 800dd02:	6938      	ldr	r0, [r7, #16]
 800dd04:	f7fe ff90 	bl	800cc28 <tcp_abandon>
  }
}
 800dd08:	bf00      	nop
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	08016fac 	.word	0x08016fac
 800dd14:	080172bc 	.word	0x080172bc
 800dd18:	08016fe8 	.word	0x08016fe8
 800dd1c:	2000bb64 	.word	0x2000bb64
 800dd20:	2000bb68 	.word	0x2000bb68

0800dd24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd32:	4b12      	ldr	r3, [pc, #72]	; (800dd7c <tcp_kill_timewait+0x58>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	e012      	b.n	800dd60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd3a:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <tcp_kill_timewait+0x5c>)
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6a1b      	ldr	r3, [r3, #32]
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d807      	bhi.n	800dd5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dd4a:	4b0d      	ldr	r3, [pc, #52]	; (800dd80 <tcp_kill_timewait+0x5c>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6a1b      	ldr	r3, [r3, #32]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1e9      	bne.n	800dd3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd6c:	68b8      	ldr	r0, [r7, #8]
 800dd6e:	f7ff f80d 	bl	800cd8c <tcp_abort>
  }
}
 800dd72:	bf00      	nop
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	2000bb74 	.word	0x2000bb74
 800dd80:	2000bb68 	.word	0x2000bb68

0800dd84 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dd8e:	2001      	movs	r0, #1
 800dd90:	f7fd fc92 	bl	800b6b8 <memp_malloc>
 800dd94:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d124      	bne.n	800dde6 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dd9c:	f7ff ffc2 	bl	800dd24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dda0:	2001      	movs	r0, #1
 800dda2:	f7fd fc89 	bl	800b6b8 <memp_malloc>
 800dda6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d11b      	bne.n	800dde6 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ddae:	2009      	movs	r0, #9
 800ddb0:	f7ff ff6e 	bl	800dc90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddb4:	2001      	movs	r0, #1
 800ddb6:	f7fd fc7f 	bl	800b6b8 <memp_malloc>
 800ddba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d111      	bne.n	800dde6 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ddc2:	2008      	movs	r0, #8
 800ddc4:	f7ff ff64 	bl	800dc90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddc8:	2001      	movs	r0, #1
 800ddca:	f7fd fc75 	bl	800b6b8 <memp_malloc>
 800ddce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d107      	bne.n	800dde6 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff ff17 	bl	800dc0c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddde:	2001      	movs	r0, #1
 800dde0:	f7fd fc6a 	bl	800b6b8 <memp_malloc>
 800dde4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d03f      	beq.n	800de6c <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ddec:	2298      	movs	r2, #152	; 0x98
 800ddee:	2100      	movs	r1, #0
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f006 fecb 	bl	8014b8c <memset>
    pcb->prio = prio;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	79fa      	ldrb	r2, [r7, #7]
 800ddfa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	22ff      	movs	r2, #255	; 0xff
 800de1a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de22:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2206      	movs	r2, #6
 800de28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2206      	movs	r2, #6
 800de30:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de38:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2201      	movs	r2, #1
 800de3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800de42:	4b0d      	ldr	r3, [pc, #52]	; (800de78 <tcp_alloc+0xf4>)
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800de4a:	4b0c      	ldr	r3, [pc, #48]	; (800de7c <tcp_alloc+0xf8>)
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4a08      	ldr	r2, [pc, #32]	; (800de80 <tcp_alloc+0xfc>)
 800de60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	4a07      	ldr	r2, [pc, #28]	; (800de84 <tcp_alloc+0x100>)
 800de68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800de6c:	68fb      	ldr	r3, [r7, #12]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	2000bb68 	.word	0x2000bb68
 800de7c:	20004ae6 	.word	0x20004ae6
 800de80:	0800dbc9 	.word	0x0800dbc9
 800de84:	006ddd00 	.word	0x006ddd00

0800de88 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800de8c:	2040      	movs	r0, #64	; 0x40
 800de8e:	f7ff ff79 	bl	800dd84 <tcp_alloc>
 800de92:	4603      	mov	r3, r0
}
 800de94:	4618      	mov	r0, r3
 800de96:	bd80      	pop	{r7, pc}

0800de98 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	4603      	mov	r3, r0
 800dea0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dea2:	2040      	movs	r0, #64	; 0x40
 800dea4:	f7ff ff6e 	bl	800dd84 <tcp_alloc>
 800dea8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800deaa:	68fb      	ldr	r3, [r7, #12]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d002      	beq.n	800deca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	683a      	ldr	r2, [r7, #0]
 800dec8:	611a      	str	r2, [r3, #16]
  }
}
 800deca:	bf00      	nop
 800decc:	370c      	adds	r7, #12
 800dece:	46bd      	mov	sp, r7
 800ded0:	bc80      	pop	{r7}
 800ded2:	4770      	bx	lr

0800ded4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d00e      	beq.n	800df02 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d106      	bne.n	800defa <tcp_recv+0x26>
 800deec:	4b07      	ldr	r3, [pc, #28]	; (800df0c <tcp_recv+0x38>)
 800deee:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800def2:	4907      	ldr	r1, [pc, #28]	; (800df10 <tcp_recv+0x3c>)
 800def4:	4807      	ldr	r0, [pc, #28]	; (800df14 <tcp_recv+0x40>)
 800def6:	f006 fe51 	bl	8014b9c <iprintf>
    pcb->recv = recv;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	08016fac 	.word	0x08016fac
 800df10:	080172cc 	.word	0x080172cc
 800df14:	08016fe8 	.word	0x08016fe8

0800df18 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00d      	beq.n	800df44 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	7d1b      	ldrb	r3, [r3, #20]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d106      	bne.n	800df3e <tcp_sent+0x26>
 800df30:	4b06      	ldr	r3, [pc, #24]	; (800df4c <tcp_sent+0x34>)
 800df32:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800df36:	4906      	ldr	r1, [pc, #24]	; (800df50 <tcp_sent+0x38>)
 800df38:	4806      	ldr	r0, [pc, #24]	; (800df54 <tcp_sent+0x3c>)
 800df3a:	f006 fe2f 	bl	8014b9c <iprintf>
    pcb->sent = sent;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800df44:	bf00      	nop
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	08016fac 	.word	0x08016fac
 800df50:	080172f4 	.word	0x080172f4
 800df54:	08016fe8 	.word	0x08016fe8

0800df58 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00e      	beq.n	800df86 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	7d1b      	ldrb	r3, [r3, #20]
 800df6c:	2b01      	cmp	r3, #1
 800df6e:	d106      	bne.n	800df7e <tcp_err+0x26>
 800df70:	4b07      	ldr	r3, [pc, #28]	; (800df90 <tcp_err+0x38>)
 800df72:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800df76:	4907      	ldr	r1, [pc, #28]	; (800df94 <tcp_err+0x3c>)
 800df78:	4807      	ldr	r0, [pc, #28]	; (800df98 <tcp_err+0x40>)
 800df7a:	f006 fe0f 	bl	8014b9c <iprintf>
    pcb->errf = err;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800df86:	bf00      	nop
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	08016fac 	.word	0x08016fac
 800df94:	0801731c 	.word	0x0801731c
 800df98:	08016fe8 	.word	0x08016fe8

0800df9c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d008      	beq.n	800dfbe <tcp_accept+0x22>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	7d1b      	ldrb	r3, [r3, #20]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d104      	bne.n	800dfbe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	619a      	str	r2, [r3, #24]
  }
}
 800dfbe:	bf00      	nop
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bc80      	pop	{r7}
 800dfc6:	4770      	bx	lr

0800dfc8 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	7d1b      	ldrb	r3, [r3, #20]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d106      	bne.n	800dfec <tcp_poll+0x24>
 800dfde:	4b09      	ldr	r3, [pc, #36]	; (800e004 <tcp_poll+0x3c>)
 800dfe0:	f240 7203 	movw	r2, #1795	; 0x703
 800dfe4:	4908      	ldr	r1, [pc, #32]	; (800e008 <tcp_poll+0x40>)
 800dfe6:	4809      	ldr	r0, [pc, #36]	; (800e00c <tcp_poll+0x44>)
 800dfe8:	f006 fdd8 	bl	8014b9c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	79fa      	ldrb	r2, [r7, #7]
 800dff8:	771a      	strb	r2, [r3, #28]
}
 800dffa:	bf00      	nop
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	08016fac 	.word	0x08016fac
 800e008:	08017344 	.word	0x08017344
 800e00c:	08016fe8 	.word	0x08016fe8

0800e010 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	7d1b      	ldrb	r3, [r3, #20]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d034      	beq.n	800e08a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e024:	2b0a      	cmp	r3, #10
 800e026:	d030      	beq.n	800e08a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d02c      	beq.n	800e08a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e034:	2b00      	cmp	r3, #0
 800e036:	d007      	beq.n	800e048 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7fe f941 	bl	800c2c4 <pbuf_free>
      pcb->refused_data = NULL;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2200      	movs	r2, #0
 800e046:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff fd64 	bl	800db1a <tcp_segs_free>
    pcb->ooseq = NULL;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e05e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e064:	4618      	mov	r0, r3
 800e066:	f7ff fd58 	bl	800db1a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff fd53 	bl	800db1a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	669a      	str	r2, [r3, #104]	; 0x68
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e08a:	bf00      	nop
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
	...

0800e094 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d105      	bne.n	800e0b4 <tcp_pcb_remove+0x20>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	68da      	ldr	r2, [r3, #12]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	601a      	str	r2, [r3, #0]
 800e0b2:	e013      	b.n	800e0dc <tcp_pcb_remove+0x48>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	60fb      	str	r3, [r7, #12]
 800e0ba:	e00c      	b.n	800e0d6 <tcp_pcb_remove+0x42>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	683a      	ldr	r2, [r7, #0]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d104      	bne.n	800e0d0 <tcp_pcb_remove+0x3c>
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	60da      	str	r2, [r3, #12]
 800e0ce:	e005      	b.n	800e0dc <tcp_pcb_remove+0x48>
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	60fb      	str	r3, [r7, #12]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1ef      	bne.n	800e0bc <tcp_pcb_remove+0x28>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e0e2:	6838      	ldr	r0, [r7, #0]
 800e0e4:	f7ff ff94 	bl	800e010 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	7d1b      	ldrb	r3, [r3, #20]
 800e0ec:	2b0a      	cmp	r3, #10
 800e0ee:	d013      	beq.n	800e118 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d00f      	beq.n	800e118 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	7e9b      	ldrb	r3, [r3, #26]
 800e0fc:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e100:	2b00      	cmp	r3, #0
 800e102:	d009      	beq.n	800e118 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	7e9b      	ldrb	r3, [r3, #26]
 800e108:	f043 0302 	orr.w	r3, r3, #2
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e112:	6838      	ldr	r0, [r7, #0]
 800e114:	f003 f9ba 	bl	801148c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	7d1b      	ldrb	r3, [r3, #20]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d020      	beq.n	800e162 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e124:	2b00      	cmp	r3, #0
 800e126:	d006      	beq.n	800e136 <tcp_pcb_remove+0xa2>
 800e128:	4b13      	ldr	r3, [pc, #76]	; (800e178 <tcp_pcb_remove+0xe4>)
 800e12a:	f240 7253 	movw	r2, #1875	; 0x753
 800e12e:	4913      	ldr	r1, [pc, #76]	; (800e17c <tcp_pcb_remove+0xe8>)
 800e130:	4813      	ldr	r0, [pc, #76]	; (800e180 <tcp_pcb_remove+0xec>)
 800e132:	f006 fd33 	bl	8014b9c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d006      	beq.n	800e14c <tcp_pcb_remove+0xb8>
 800e13e:	4b0e      	ldr	r3, [pc, #56]	; (800e178 <tcp_pcb_remove+0xe4>)
 800e140:	f240 7254 	movw	r2, #1876	; 0x754
 800e144:	490f      	ldr	r1, [pc, #60]	; (800e184 <tcp_pcb_remove+0xf0>)
 800e146:	480e      	ldr	r0, [pc, #56]	; (800e180 <tcp_pcb_remove+0xec>)
 800e148:	f006 fd28 	bl	8014b9c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e150:	2b00      	cmp	r3, #0
 800e152:	d006      	beq.n	800e162 <tcp_pcb_remove+0xce>
 800e154:	4b08      	ldr	r3, [pc, #32]	; (800e178 <tcp_pcb_remove+0xe4>)
 800e156:	f240 7256 	movw	r2, #1878	; 0x756
 800e15a:	490b      	ldr	r1, [pc, #44]	; (800e188 <tcp_pcb_remove+0xf4>)
 800e15c:	4808      	ldr	r0, [pc, #32]	; (800e180 <tcp_pcb_remove+0xec>)
 800e15e:	f006 fd1d 	bl	8014b9c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	2200      	movs	r2, #0
 800e166:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2200      	movs	r2, #0
 800e16c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e16e:	bf00      	nop
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	08016fac 	.word	0x08016fac
 800e17c:	08017364 	.word	0x08017364
 800e180:	08016fe8 	.word	0x08016fe8
 800e184:	0801737c 	.word	0x0801737c
 800e188:	08017398 	.word	0x08017398

0800e18c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e194:	4b06      	ldr	r3, [pc, #24]	; (800e1b0 <tcp_next_iss+0x24>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	4b06      	ldr	r3, [pc, #24]	; (800e1b4 <tcp_next_iss+0x28>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4413      	add	r3, r2
 800e19e:	4a04      	ldr	r2, [pc, #16]	; (800e1b0 <tcp_next_iss+0x24>)
 800e1a0:	6013      	str	r3, [r2, #0]
  return iss;
 800e1a2:	4b03      	ldr	r3, [pc, #12]	; (800e1b0 <tcp_next_iss+0x24>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	370c      	adds	r7, #12
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bc80      	pop	{r7}
 800e1ae:	4770      	bx	lr
 800e1b0:	2000001c 	.word	0x2000001c
 800e1b4:	2000bb68 	.word	0x2000bb68

0800e1b8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	4603      	mov	r3, r0
 800e1c0:	6039      	str	r1, [r7, #0]
 800e1c2:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e1c4:	6838      	ldr	r0, [r7, #0]
 800e1c6:	f005 fa0b 	bl	80135e0 <ip4_route>
 800e1ca:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d101      	bne.n	800e1d6 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e1d2:	88fb      	ldrh	r3, [r7, #6]
 800e1d4:	e010      	b.n	800e1f8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1da:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e1dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d008      	beq.n	800e1f6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e1e4:	897b      	ldrh	r3, [r7, #10]
 800e1e6:	3b28      	subs	r3, #40	; 0x28
 800e1e8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e1ea:	893a      	ldrh	r2, [r7, #8]
 800e1ec:	88fb      	ldrh	r3, [r7, #6]
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	bf28      	it	cs
 800e1f2:	4613      	movcs	r3, r2
 800e1f4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e1f6:	88fb      	ldrh	r3, [r7, #6]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e20e:	e011      	b.n	800e234 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d108      	bne.n	800e22e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f7fe fdb2 	bl	800cd8c <tcp_abort>
      pcb = next;
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	60fb      	str	r3, [r7, #12]
 800e22c:	e002      	b.n	800e234 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d1ea      	bne.n	800e210 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e23a:	bf00      	nop
 800e23c:	bf00      	nop
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d02c      	beq.n	800e2ae <tcp_netif_ip_addr_changed+0x6a>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d028      	beq.n	800e2ae <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e25c:	4b16      	ldr	r3, [pc, #88]	; (800e2b8 <tcp_netif_ip_addr_changed+0x74>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4619      	mov	r1, r3
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7ff ffcc 	bl	800e200 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e268:	4b14      	ldr	r3, [pc, #80]	; (800e2bc <tcp_netif_ip_addr_changed+0x78>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4619      	mov	r1, r3
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7ff ffc6 	bl	800e200 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d019      	beq.n	800e2ae <tcp_netif_ip_addr_changed+0x6a>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d015      	beq.n	800e2ae <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e282:	4b0f      	ldr	r3, [pc, #60]	; (800e2c0 <tcp_netif_ip_addr_changed+0x7c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	e00e      	b.n	800e2a8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	68db      	ldr	r3, [r3, #12]
 800e28e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d103      	bne.n	800e2a4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	60fb      	str	r3, [r7, #12]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1ed      	bne.n	800e28a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e2ae:	bf00      	nop
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	2000bb64 	.word	0x2000bb64
 800e2bc:	2000bb70 	.word	0x2000bb70
 800e2c0:	2000bb6c 	.word	0x2000bb6c

0800e2c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e2c4:	b590      	push	{r4, r7, lr}
 800e2c6:	b08b      	sub	sp, #44	; 0x2c
 800e2c8:	af02      	add	r7, sp, #8
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	4a82      	ldr	r2, [pc, #520]	; (800e4dc <tcp_input+0x218>)
 800e2d4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	895b      	ldrh	r3, [r3, #10]
 800e2da:	2b13      	cmp	r3, #19
 800e2dc:	f240 838a 	bls.w	800e9f4 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e2e0:	4b7f      	ldr	r3, [pc, #508]	; (800e4e0 <tcp_input+0x21c>)
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	4a7e      	ldr	r2, [pc, #504]	; (800e4e0 <tcp_input+0x21c>)
 800e2e6:	6812      	ldr	r2, [r2, #0]
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f005 fbf4 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f040 8380 	bne.w	800e9f8 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e2f8:	4b79      	ldr	r3, [pc, #484]	; (800e4e0 <tcp_input+0x21c>)
 800e2fa:	695b      	ldr	r3, [r3, #20]
 800e2fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e300:	2be0      	cmp	r3, #224	; 0xe0
 800e302:	f000 8379 	beq.w	800e9f8 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e306:	4b75      	ldr	r3, [pc, #468]	; (800e4dc <tcp_input+0x218>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	899b      	ldrh	r3, [r3, #12]
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fc fd7c 	bl	800ae0c <lwip_htons>
 800e314:	4603      	mov	r3, r0
 800e316:	0b1b      	lsrs	r3, r3, #12
 800e318:	b29b      	uxth	r3, r3
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e320:	7cbb      	ldrb	r3, [r7, #18]
 800e322:	2b13      	cmp	r3, #19
 800e324:	f240 836a 	bls.w	800e9fc <tcp_input+0x738>
 800e328:	7cbb      	ldrb	r3, [r7, #18]
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	891b      	ldrh	r3, [r3, #8]
 800e330:	429a      	cmp	r2, r3
 800e332:	f200 8363 	bhi.w	800e9fc <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e336:	7cbb      	ldrb	r3, [r7, #18]
 800e338:	b29b      	uxth	r3, r3
 800e33a:	3b14      	subs	r3, #20
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	4b69      	ldr	r3, [pc, #420]	; (800e4e4 <tcp_input+0x220>)
 800e340:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e342:	4b69      	ldr	r3, [pc, #420]	; (800e4e8 <tcp_input+0x224>)
 800e344:	2200      	movs	r2, #0
 800e346:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	895a      	ldrh	r2, [r3, #10]
 800e34c:	7cbb      	ldrb	r3, [r7, #18]
 800e34e:	b29b      	uxth	r3, r3
 800e350:	429a      	cmp	r2, r3
 800e352:	d30d      	bcc.n	800e370 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e354:	4b63      	ldr	r3, [pc, #396]	; (800e4e4 <tcp_input+0x220>)
 800e356:	881a      	ldrh	r2, [r3, #0]
 800e358:	4b64      	ldr	r3, [pc, #400]	; (800e4ec <tcp_input+0x228>)
 800e35a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e35c:	7cbb      	ldrb	r3, [r7, #18]
 800e35e:	b29b      	uxth	r3, r3
 800e360:	425b      	negs	r3, r3
 800e362:	b29b      	uxth	r3, r3
 800e364:	b21b      	sxth	r3, r3
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7fd ff87 	bl	800c27c <pbuf_header>
 800e36e:	e055      	b.n	800e41c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d105      	bne.n	800e384 <tcp_input+0xc0>
 800e378:	4b5d      	ldr	r3, [pc, #372]	; (800e4f0 <tcp_input+0x22c>)
 800e37a:	22b2      	movs	r2, #178	; 0xb2
 800e37c:	495d      	ldr	r1, [pc, #372]	; (800e4f4 <tcp_input+0x230>)
 800e37e:	485e      	ldr	r0, [pc, #376]	; (800e4f8 <tcp_input+0x234>)
 800e380:	f006 fc0c 	bl	8014b9c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e384:	f06f 0113 	mvn.w	r1, #19
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7fd ff77 	bl	800c27c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	895a      	ldrh	r2, [r3, #10]
 800e392:	4b56      	ldr	r3, [pc, #344]	; (800e4ec <tcp_input+0x228>)
 800e394:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e396:	4b53      	ldr	r3, [pc, #332]	; (800e4e4 <tcp_input+0x220>)
 800e398:	881a      	ldrh	r2, [r3, #0]
 800e39a:	4b54      	ldr	r3, [pc, #336]	; (800e4ec <tcp_input+0x228>)
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	1ad3      	subs	r3, r2, r3
 800e3a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e3a2:	4b52      	ldr	r3, [pc, #328]	; (800e4ec <tcp_input+0x228>)
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	425b      	negs	r3, r3
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	b21b      	sxth	r3, r3
 800e3ac:	4619      	mov	r1, r3
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7fd ff64 	bl	800c27c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	895b      	ldrh	r3, [r3, #10]
 800e3ba:	8a3a      	ldrh	r2, [r7, #16]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	f200 831f 	bhi.w	800ea00 <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	4a47      	ldr	r2, [pc, #284]	; (800e4e8 <tcp_input+0x224>)
 800e3ca:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	8a3b      	ldrh	r3, [r7, #16]
 800e3d2:	425b      	negs	r3, r3
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	b21b      	sxth	r3, r3
 800e3d8:	4619      	mov	r1, r3
 800e3da:	4610      	mov	r0, r2
 800e3dc:	f7fd ff4e 	bl	800c27c <pbuf_header>
    p->tot_len -= opt2len;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	891a      	ldrh	r2, [r3, #8]
 800e3e4:	8a3b      	ldrh	r3, [r7, #16]
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	895b      	ldrh	r3, [r3, #10]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d005      	beq.n	800e402 <tcp_input+0x13e>
 800e3f6:	4b3e      	ldr	r3, [pc, #248]	; (800e4f0 <tcp_input+0x22c>)
 800e3f8:	22cf      	movs	r2, #207	; 0xcf
 800e3fa:	4940      	ldr	r1, [pc, #256]	; (800e4fc <tcp_input+0x238>)
 800e3fc:	483e      	ldr	r0, [pc, #248]	; (800e4f8 <tcp_input+0x234>)
 800e3fe:	f006 fbcd 	bl	8014b9c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	891a      	ldrh	r2, [r3, #8]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	891b      	ldrh	r3, [r3, #8]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d005      	beq.n	800e41c <tcp_input+0x158>
 800e410:	4b37      	ldr	r3, [pc, #220]	; (800e4f0 <tcp_input+0x22c>)
 800e412:	22d0      	movs	r2, #208	; 0xd0
 800e414:	493a      	ldr	r1, [pc, #232]	; (800e500 <tcp_input+0x23c>)
 800e416:	4838      	ldr	r0, [pc, #224]	; (800e4f8 <tcp_input+0x234>)
 800e418:	f006 fbc0 	bl	8014b9c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e41c:	4b2f      	ldr	r3, [pc, #188]	; (800e4dc <tcp_input+0x218>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	881b      	ldrh	r3, [r3, #0]
 800e422:	b29b      	uxth	r3, r3
 800e424:	4a2d      	ldr	r2, [pc, #180]	; (800e4dc <tcp_input+0x218>)
 800e426:	6814      	ldr	r4, [r2, #0]
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fc fcef 	bl	800ae0c <lwip_htons>
 800e42e:	4603      	mov	r3, r0
 800e430:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e432:	4b2a      	ldr	r3, [pc, #168]	; (800e4dc <tcp_input+0x218>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	885b      	ldrh	r3, [r3, #2]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	4a28      	ldr	r2, [pc, #160]	; (800e4dc <tcp_input+0x218>)
 800e43c:	6814      	ldr	r4, [r2, #0]
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fc fce4 	bl	800ae0c <lwip_htons>
 800e444:	4603      	mov	r3, r0
 800e446:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e448:	4b24      	ldr	r3, [pc, #144]	; (800e4dc <tcp_input+0x218>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	685b      	ldr	r3, [r3, #4]
 800e44e:	4a23      	ldr	r2, [pc, #140]	; (800e4dc <tcp_input+0x218>)
 800e450:	6814      	ldr	r4, [r2, #0]
 800e452:	4618      	mov	r0, r3
 800e454:	f7fc fce7 	bl	800ae26 <lwip_htonl>
 800e458:	4603      	mov	r3, r0
 800e45a:	6063      	str	r3, [r4, #4]
 800e45c:	6863      	ldr	r3, [r4, #4]
 800e45e:	4a29      	ldr	r2, [pc, #164]	; (800e504 <tcp_input+0x240>)
 800e460:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e462:	4b1e      	ldr	r3, [pc, #120]	; (800e4dc <tcp_input+0x218>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	4a1c      	ldr	r2, [pc, #112]	; (800e4dc <tcp_input+0x218>)
 800e46a:	6814      	ldr	r4, [r2, #0]
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fc fcda 	bl	800ae26 <lwip_htonl>
 800e472:	4603      	mov	r3, r0
 800e474:	60a3      	str	r3, [r4, #8]
 800e476:	68a3      	ldr	r3, [r4, #8]
 800e478:	4a23      	ldr	r2, [pc, #140]	; (800e508 <tcp_input+0x244>)
 800e47a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e47c:	4b17      	ldr	r3, [pc, #92]	; (800e4dc <tcp_input+0x218>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	89db      	ldrh	r3, [r3, #14]
 800e482:	b29b      	uxth	r3, r3
 800e484:	4a15      	ldr	r2, [pc, #84]	; (800e4dc <tcp_input+0x218>)
 800e486:	6814      	ldr	r4, [r2, #0]
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fc fcbf 	bl	800ae0c <lwip_htons>
 800e48e:	4603      	mov	r3, r0
 800e490:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e492:	4b12      	ldr	r3, [pc, #72]	; (800e4dc <tcp_input+0x218>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	899b      	ldrh	r3, [r3, #12]
 800e498:	b29b      	uxth	r3, r3
 800e49a:	4618      	mov	r0, r3
 800e49c:	f7fc fcb6 	bl	800ae0c <lwip_htons>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4a8:	b2da      	uxtb	r2, r3
 800e4aa:	4b18      	ldr	r3, [pc, #96]	; (800e50c <tcp_input+0x248>)
 800e4ac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	891a      	ldrh	r2, [r3, #8]
 800e4b2:	4b16      	ldr	r3, [pc, #88]	; (800e50c <tcp_input+0x248>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	f003 0303 	and.w	r3, r3, #3
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	bf14      	ite	ne
 800e4be:	2301      	movne	r3, #1
 800e4c0:	2300      	moveq	r3, #0
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	4413      	add	r3, r2
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	4b11      	ldr	r3, [pc, #68]	; (800e510 <tcp_input+0x24c>)
 800e4cc:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e4d2:	4b10      	ldr	r3, [pc, #64]	; (800e514 <tcp_input+0x250>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	61fb      	str	r3, [r7, #28]
 800e4d8:	e082      	b.n	800e5e0 <tcp_input+0x31c>
 800e4da:	bf00      	nop
 800e4dc:	20004af8 	.word	0x20004af8
 800e4e0:	20008434 	.word	0x20008434
 800e4e4:	20004afc 	.word	0x20004afc
 800e4e8:	20004b00 	.word	0x20004b00
 800e4ec:	20004afe 	.word	0x20004afe
 800e4f0:	080173b0 	.word	0x080173b0
 800e4f4:	080173e4 	.word	0x080173e4
 800e4f8:	080173f4 	.word	0x080173f4
 800e4fc:	0801741c 	.word	0x0801741c
 800e500:	08017428 	.word	0x08017428
 800e504:	20004b08 	.word	0x20004b08
 800e508:	20004b0c 	.word	0x20004b0c
 800e50c:	20004b14 	.word	0x20004b14
 800e510:	20004b12 	.word	0x20004b12
 800e514:	2000bb64 	.word	0x2000bb64
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	7d1b      	ldrb	r3, [r3, #20]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d105      	bne.n	800e52c <tcp_input+0x268>
 800e520:	4b8f      	ldr	r3, [pc, #572]	; (800e760 <tcp_input+0x49c>)
 800e522:	22e2      	movs	r2, #226	; 0xe2
 800e524:	498f      	ldr	r1, [pc, #572]	; (800e764 <tcp_input+0x4a0>)
 800e526:	4890      	ldr	r0, [pc, #576]	; (800e768 <tcp_input+0x4a4>)
 800e528:	f006 fb38 	bl	8014b9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	7d1b      	ldrb	r3, [r3, #20]
 800e530:	2b0a      	cmp	r3, #10
 800e532:	d105      	bne.n	800e540 <tcp_input+0x27c>
 800e534:	4b8a      	ldr	r3, [pc, #552]	; (800e760 <tcp_input+0x49c>)
 800e536:	22e3      	movs	r2, #227	; 0xe3
 800e538:	498c      	ldr	r1, [pc, #560]	; (800e76c <tcp_input+0x4a8>)
 800e53a:	488b      	ldr	r0, [pc, #556]	; (800e768 <tcp_input+0x4a4>)
 800e53c:	f006 fb2e 	bl	8014b9c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	7d1b      	ldrb	r3, [r3, #20]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d105      	bne.n	800e554 <tcp_input+0x290>
 800e548:	4b85      	ldr	r3, [pc, #532]	; (800e760 <tcp_input+0x49c>)
 800e54a:	22e4      	movs	r2, #228	; 0xe4
 800e54c:	4988      	ldr	r1, [pc, #544]	; (800e770 <tcp_input+0x4ac>)
 800e54e:	4886      	ldr	r0, [pc, #536]	; (800e768 <tcp_input+0x4a4>)
 800e550:	f006 fb24 	bl	8014b9c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	8b1a      	ldrh	r2, [r3, #24]
 800e558:	4b86      	ldr	r3, [pc, #536]	; (800e774 <tcp_input+0x4b0>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	881b      	ldrh	r3, [r3, #0]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	429a      	cmp	r2, r3
 800e562:	d138      	bne.n	800e5d6 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	8ada      	ldrh	r2, [r3, #22]
 800e568:	4b82      	ldr	r3, [pc, #520]	; (800e774 <tcp_input+0x4b0>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	885b      	ldrh	r3, [r3, #2]
 800e56e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e570:	429a      	cmp	r2, r3
 800e572:	d130      	bne.n	800e5d6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	685a      	ldr	r2, [r3, #4]
 800e578:	4b7f      	ldr	r3, [pc, #508]	; (800e778 <tcp_input+0x4b4>)
 800e57a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d12a      	bne.n	800e5d6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e580:	69fb      	ldr	r3, [r7, #28]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	4b7c      	ldr	r3, [pc, #496]	; (800e778 <tcp_input+0x4b4>)
 800e586:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e588:	429a      	cmp	r2, r3
 800e58a:	d124      	bne.n	800e5d6 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	69fa      	ldr	r2, [r7, #28]
 800e592:	429a      	cmp	r2, r3
 800e594:	d105      	bne.n	800e5a2 <tcp_input+0x2de>
 800e596:	4b72      	ldr	r3, [pc, #456]	; (800e760 <tcp_input+0x49c>)
 800e598:	22ec      	movs	r2, #236	; 0xec
 800e59a:	4978      	ldr	r1, [pc, #480]	; (800e77c <tcp_input+0x4b8>)
 800e59c:	4872      	ldr	r0, [pc, #456]	; (800e768 <tcp_input+0x4a4>)
 800e59e:	f006 fafd 	bl	8014b9c <iprintf>
      if (prev != NULL) {
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d00a      	beq.n	800e5be <tcp_input+0x2fa>
        prev->next = pcb->next;
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	68da      	ldr	r2, [r3, #12]
 800e5ac:	69bb      	ldr	r3, [r7, #24]
 800e5ae:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e5b0:	4b73      	ldr	r3, [pc, #460]	; (800e780 <tcp_input+0x4bc>)
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e5b8:	4a71      	ldr	r2, [pc, #452]	; (800e780 <tcp_input+0x4bc>)
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	69fa      	ldr	r2, [r7, #28]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d10f      	bne.n	800e5e8 <tcp_input+0x324>
 800e5c8:	4b65      	ldr	r3, [pc, #404]	; (800e760 <tcp_input+0x49c>)
 800e5ca:	22f4      	movs	r2, #244	; 0xf4
 800e5cc:	496d      	ldr	r1, [pc, #436]	; (800e784 <tcp_input+0x4c0>)
 800e5ce:	4866      	ldr	r0, [pc, #408]	; (800e768 <tcp_input+0x4a4>)
 800e5d0:	f006 fae4 	bl	8014b9c <iprintf>
      break;
 800e5d4:	e008      	b.n	800e5e8 <tcp_input+0x324>
    }
    prev = pcb;
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	61fb      	str	r3, [r7, #28]
 800e5e0:	69fb      	ldr	r3, [r7, #28]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d198      	bne.n	800e518 <tcp_input+0x254>
 800e5e6:	e000      	b.n	800e5ea <tcp_input+0x326>
      break;
 800e5e8:	bf00      	nop
  }

  if (pcb == NULL) {
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d173      	bne.n	800e6d8 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5f0:	4b65      	ldr	r3, [pc, #404]	; (800e788 <tcp_input+0x4c4>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	61fb      	str	r3, [r7, #28]
 800e5f6:	e02f      	b.n	800e658 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	7d1b      	ldrb	r3, [r3, #20]
 800e5fc:	2b0a      	cmp	r3, #10
 800e5fe:	d005      	beq.n	800e60c <tcp_input+0x348>
 800e600:	4b57      	ldr	r3, [pc, #348]	; (800e760 <tcp_input+0x49c>)
 800e602:	22fe      	movs	r2, #254	; 0xfe
 800e604:	4961      	ldr	r1, [pc, #388]	; (800e78c <tcp_input+0x4c8>)
 800e606:	4858      	ldr	r0, [pc, #352]	; (800e768 <tcp_input+0x4a4>)
 800e608:	f006 fac8 	bl	8014b9c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	8b1a      	ldrh	r2, [r3, #24]
 800e610:	4b58      	ldr	r3, [pc, #352]	; (800e774 <tcp_input+0x4b0>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	881b      	ldrh	r3, [r3, #0]
 800e616:	b29b      	uxth	r3, r3
 800e618:	429a      	cmp	r2, r3
 800e61a:	d11a      	bne.n	800e652 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	8ada      	ldrh	r2, [r3, #22]
 800e620:	4b54      	ldr	r3, [pc, #336]	; (800e774 <tcp_input+0x4b0>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	885b      	ldrh	r3, [r3, #2]
 800e626:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e628:	429a      	cmp	r2, r3
 800e62a:	d112      	bne.n	800e652 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	685a      	ldr	r2, [r3, #4]
 800e630:	4b51      	ldr	r3, [pc, #324]	; (800e778 <tcp_input+0x4b4>)
 800e632:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e634:	429a      	cmp	r2, r3
 800e636:	d10c      	bne.n	800e652 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	4b4e      	ldr	r3, [pc, #312]	; (800e778 <tcp_input+0x4b4>)
 800e63e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e640:	429a      	cmp	r2, r3
 800e642:	d106      	bne.n	800e652 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e644:	69f8      	ldr	r0, [r7, #28]
 800e646:	f000 fb15 	bl	800ec74 <tcp_timewait_input>
        pbuf_free(p);
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7fd fe3a 	bl	800c2c4 <pbuf_free>
        return;
 800e650:	e1dc      	b.n	800ea0c <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	61fb      	str	r3, [r7, #28]
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1cc      	bne.n	800e5f8 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e65e:	2300      	movs	r3, #0
 800e660:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e662:	4b4b      	ldr	r3, [pc, #300]	; (800e790 <tcp_input+0x4cc>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	617b      	str	r3, [r7, #20]
 800e668:	e019      	b.n	800e69e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	8ada      	ldrh	r2, [r3, #22]
 800e66e:	4b41      	ldr	r3, [pc, #260]	; (800e774 <tcp_input+0x4b0>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	885b      	ldrh	r3, [r3, #2]
 800e674:	b29b      	uxth	r3, r3
 800e676:	429a      	cmp	r2, r3
 800e678:	d10c      	bne.n	800e694 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	4b3e      	ldr	r3, [pc, #248]	; (800e778 <tcp_input+0x4b4>)
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	429a      	cmp	r2, r3
 800e684:	d00f      	beq.n	800e6a6 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00d      	beq.n	800e6a8 <tcp_input+0x3e4>
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d009      	beq.n	800e6a8 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	617b      	str	r3, [r7, #20]
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1e2      	bne.n	800e66a <tcp_input+0x3a6>
 800e6a4:	e000      	b.n	800e6a8 <tcp_input+0x3e4>
            break;
 800e6a6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d014      	beq.n	800e6d8 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00a      	beq.n	800e6ca <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	68da      	ldr	r2, [r3, #12]
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e6bc:	4b34      	ldr	r3, [pc, #208]	; (800e790 <tcp_input+0x4cc>)
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e6c4:	4a32      	ldr	r2, [pc, #200]	; (800e790 <tcp_input+0x4cc>)
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e6ca:	6978      	ldr	r0, [r7, #20]
 800e6cc:	f000 f9f2 	bl	800eab4 <tcp_listen_input>
      pbuf_free(p);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7fd fdf7 	bl	800c2c4 <pbuf_free>
      return;
 800e6d6:	e199      	b.n	800ea0c <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 8164 	beq.w	800e9a8 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e6e0:	4b2c      	ldr	r3, [pc, #176]	; (800e794 <tcp_input+0x4d0>)
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	891a      	ldrh	r2, [r3, #8]
 800e6ea:	4b2a      	ldr	r3, [pc, #168]	; (800e794 <tcp_input+0x4d0>)
 800e6ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e6ee:	4a29      	ldr	r2, [pc, #164]	; (800e794 <tcp_input+0x4d0>)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e6f4:	4b1f      	ldr	r3, [pc, #124]	; (800e774 <tcp_input+0x4b0>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a26      	ldr	r2, [pc, #152]	; (800e794 <tcp_input+0x4d0>)
 800e6fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e6fc:	4b26      	ldr	r3, [pc, #152]	; (800e798 <tcp_input+0x4d4>)
 800e6fe:	2200      	movs	r2, #0
 800e700:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e702:	4b26      	ldr	r3, [pc, #152]	; (800e79c <tcp_input+0x4d8>)
 800e704:	2200      	movs	r2, #0
 800e706:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e708:	4b25      	ldr	r3, [pc, #148]	; (800e7a0 <tcp_input+0x4dc>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e70e:	4b25      	ldr	r3, [pc, #148]	; (800e7a4 <tcp_input+0x4e0>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	f003 0308 	and.w	r3, r3, #8
 800e716:	2b00      	cmp	r3, #0
 800e718:	d006      	beq.n	800e728 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7b5b      	ldrb	r3, [r3, #13]
 800e71e:	f043 0301 	orr.w	r3, r3, #1
 800e722:	b2da      	uxtb	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d03d      	beq.n	800e7ac <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e730:	69f8      	ldr	r0, [r7, #28]
 800e732:	f7ff f989 	bl	800da48 <tcp_process_refused_data>
 800e736:	4603      	mov	r3, r0
 800e738:	f113 0f0d 	cmn.w	r3, #13
 800e73c:	d007      	beq.n	800e74e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e742:	2b00      	cmp	r3, #0
 800e744:	d032      	beq.n	800e7ac <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e746:	4b18      	ldr	r3, [pc, #96]	; (800e7a8 <tcp_input+0x4e4>)
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d02e      	beq.n	800e7ac <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e74e:	69fb      	ldr	r3, [r7, #28]
 800e750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e752:	2b00      	cmp	r3, #0
 800e754:	f040 8108 	bne.w	800e968 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e758:	69f8      	ldr	r0, [r7, #28]
 800e75a:	f002 fe3b 	bl	80113d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e75e:	e103      	b.n	800e968 <tcp_input+0x6a4>
 800e760:	080173b0 	.word	0x080173b0
 800e764:	08017448 	.word	0x08017448
 800e768:	080173f4 	.word	0x080173f4
 800e76c:	08017470 	.word	0x08017470
 800e770:	0801749c 	.word	0x0801749c
 800e774:	20004af8 	.word	0x20004af8
 800e778:	20008434 	.word	0x20008434
 800e77c:	080174c4 	.word	0x080174c4
 800e780:	2000bb64 	.word	0x2000bb64
 800e784:	080174f0 	.word	0x080174f0
 800e788:	2000bb74 	.word	0x2000bb74
 800e78c:	0801751c 	.word	0x0801751c
 800e790:	2000bb6c 	.word	0x2000bb6c
 800e794:	20004ae8 	.word	0x20004ae8
 800e798:	20004b18 	.word	0x20004b18
 800e79c:	20004b15 	.word	0x20004b15
 800e7a0:	20004b10 	.word	0x20004b10
 800e7a4:	20004b14 	.word	0x20004b14
 800e7a8:	20004b12 	.word	0x20004b12
      }
    }
    tcp_input_pcb = pcb;
 800e7ac:	4a99      	ldr	r2, [pc, #612]	; (800ea14 <tcp_input+0x750>)
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e7b2:	69f8      	ldr	r0, [r7, #28]
 800e7b4:	f000 fac6 	bl	800ed44 <tcp_process>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e7bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e7c0:	f113 0f0d 	cmn.w	r3, #13
 800e7c4:	f000 80d2 	beq.w	800e96c <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800e7c8:	4b93      	ldr	r3, [pc, #588]	; (800ea18 <tcp_input+0x754>)
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	f003 0308 	and.w	r3, r3, #8
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d016      	beq.n	800e802 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d008      	beq.n	800e7f0 <tcp_input+0x52c>
 800e7de:	69fb      	ldr	r3, [r7, #28]
 800e7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7e4:	69fa      	ldr	r2, [r7, #28]
 800e7e6:	6912      	ldr	r2, [r2, #16]
 800e7e8:	f06f 010d 	mvn.w	r1, #13
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e7f0:	69f9      	ldr	r1, [r7, #28]
 800e7f2:	488a      	ldr	r0, [pc, #552]	; (800ea1c <tcp_input+0x758>)
 800e7f4:	f7ff fc4e 	bl	800e094 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e7f8:	69f9      	ldr	r1, [r7, #28]
 800e7fa:	2001      	movs	r0, #1
 800e7fc:	f7fc ffae 	bl	800b75c <memp_free>
 800e800:	e0bf      	b.n	800e982 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e806:	4b86      	ldr	r3, [pc, #536]	; (800ea20 <tcp_input+0x75c>)
 800e808:	881b      	ldrh	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d01b      	beq.n	800e846 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e80e:	4b84      	ldr	r3, [pc, #528]	; (800ea20 <tcp_input+0x75c>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d009      	beq.n	800e830 <tcp_input+0x56c>
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e820:	69fa      	ldr	r2, [r7, #28]
 800e822:	6910      	ldr	r0, [r2, #16]
 800e824:	89fa      	ldrh	r2, [r7, #14]
 800e826:	69f9      	ldr	r1, [r7, #28]
 800e828:	4798      	blx	r3
 800e82a:	4603      	mov	r3, r0
 800e82c:	74fb      	strb	r3, [r7, #19]
 800e82e:	e001      	b.n	800e834 <tcp_input+0x570>
 800e830:	2300      	movs	r3, #0
 800e832:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e834:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e838:	f113 0f0d 	cmn.w	r3, #13
 800e83c:	f000 8098 	beq.w	800e970 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e840:	4b77      	ldr	r3, [pc, #476]	; (800ea20 <tcp_input+0x75c>)
 800e842:	2200      	movs	r2, #0
 800e844:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e846:	69f8      	ldr	r0, [r7, #28]
 800e848:	f000 f902 	bl	800ea50 <tcp_input_delayed_close>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	f040 8090 	bne.w	800e974 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e854:	4b73      	ldr	r3, [pc, #460]	; (800ea24 <tcp_input+0x760>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d041      	beq.n	800e8e0 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e860:	2b00      	cmp	r3, #0
 800e862:	d006      	beq.n	800e872 <tcp_input+0x5ae>
 800e864:	4b70      	ldr	r3, [pc, #448]	; (800ea28 <tcp_input+0x764>)
 800e866:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800e86a:	4970      	ldr	r1, [pc, #448]	; (800ea2c <tcp_input+0x768>)
 800e86c:	4870      	ldr	r0, [pc, #448]	; (800ea30 <tcp_input+0x76c>)
 800e86e:	f006 f995 	bl	8014b9c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	7e9b      	ldrb	r3, [r3, #26]
 800e876:	f003 0310 	and.w	r3, r3, #16
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d008      	beq.n	800e890 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e87e:	4b69      	ldr	r3, [pc, #420]	; (800ea24 <tcp_input+0x760>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4618      	mov	r0, r3
 800e884:	f7fd fd1e 	bl	800c2c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e888:	69f8      	ldr	r0, [r7, #28]
 800e88a:	f7fe fa7f 	bl	800cd8c <tcp_abort>
            goto aborted;
 800e88e:	e078      	b.n	800e982 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00c      	beq.n	800e8b4 <tcp_input+0x5f0>
 800e89a:	69fb      	ldr	r3, [r7, #28]
 800e89c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	6918      	ldr	r0, [r3, #16]
 800e8a4:	4b5f      	ldr	r3, [pc, #380]	; (800ea24 <tcp_input+0x760>)
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	69f9      	ldr	r1, [r7, #28]
 800e8ac:	47a0      	blx	r4
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	74fb      	strb	r3, [r7, #19]
 800e8b2:	e008      	b.n	800e8c6 <tcp_input+0x602>
 800e8b4:	4b5b      	ldr	r3, [pc, #364]	; (800ea24 <tcp_input+0x760>)
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	69f9      	ldr	r1, [r7, #28]
 800e8bc:	2000      	movs	r0, #0
 800e8be:	f7ff f983 	bl	800dbc8 <tcp_recv_null>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e8c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8ca:	f113 0f0d 	cmn.w	r3, #13
 800e8ce:	d053      	beq.n	800e978 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e8d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e8d8:	4b52      	ldr	r3, [pc, #328]	; (800ea24 <tcp_input+0x760>)
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e8e0:	4b4d      	ldr	r3, [pc, #308]	; (800ea18 <tcp_input+0x754>)
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	f003 0320 	and.w	r3, r3, #32
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d030      	beq.n	800e94e <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d009      	beq.n	800e908 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8f8:	7b5a      	ldrb	r2, [r3, #13]
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8fe:	f042 0220 	orr.w	r2, r2, #32
 800e902:	b2d2      	uxtb	r2, r2
 800e904:	735a      	strb	r2, [r3, #13]
 800e906:	e022      	b.n	800e94e <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e90c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e910:	d005      	beq.n	800e91e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800e912:	69fb      	ldr	r3, [r7, #28]
 800e914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e916:	3301      	adds	r3, #1
 800e918:	b29a      	uxth	r2, r3
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00b      	beq.n	800e940 <tcp_input+0x67c>
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	6918      	ldr	r0, [r3, #16]
 800e932:	2300      	movs	r3, #0
 800e934:	2200      	movs	r2, #0
 800e936:	69f9      	ldr	r1, [r7, #28]
 800e938:	47a0      	blx	r4
 800e93a:	4603      	mov	r3, r0
 800e93c:	74fb      	strb	r3, [r7, #19]
 800e93e:	e001      	b.n	800e944 <tcp_input+0x680>
 800e940:	2300      	movs	r3, #0
 800e942:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e944:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e948:	f113 0f0d 	cmn.w	r3, #13
 800e94c:	d016      	beq.n	800e97c <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e94e:	4b31      	ldr	r3, [pc, #196]	; (800ea14 <tcp_input+0x750>)
 800e950:	2200      	movs	r2, #0
 800e952:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e954:	69f8      	ldr	r0, [r7, #28]
 800e956:	f000 f87b 	bl	800ea50 <tcp_input_delayed_close>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d10f      	bne.n	800e980 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e960:	69f8      	ldr	r0, [r7, #28]
 800e962:	f002 fd93 	bl	801148c <tcp_output>
 800e966:	e00c      	b.n	800e982 <tcp_input+0x6be>
        goto aborted;
 800e968:	bf00      	nop
 800e96a:	e00a      	b.n	800e982 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e96c:	bf00      	nop
 800e96e:	e008      	b.n	800e982 <tcp_input+0x6be>
              goto aborted;
 800e970:	bf00      	nop
 800e972:	e006      	b.n	800e982 <tcp_input+0x6be>
          goto aborted;
 800e974:	bf00      	nop
 800e976:	e004      	b.n	800e982 <tcp_input+0x6be>
            goto aborted;
 800e978:	bf00      	nop
 800e97a:	e002      	b.n	800e982 <tcp_input+0x6be>
              goto aborted;
 800e97c:	bf00      	nop
 800e97e:	e000      	b.n	800e982 <tcp_input+0x6be>
          goto aborted;
 800e980:	bf00      	nop
    tcp_input_pcb = NULL;
 800e982:	4b24      	ldr	r3, [pc, #144]	; (800ea14 <tcp_input+0x750>)
 800e984:	2200      	movs	r2, #0
 800e986:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e988:	4b26      	ldr	r3, [pc, #152]	; (800ea24 <tcp_input+0x760>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800e98e:	4b29      	ldr	r3, [pc, #164]	; (800ea34 <tcp_input+0x770>)
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d039      	beq.n	800ea0a <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 800e996:	4b27      	ldr	r3, [pc, #156]	; (800ea34 <tcp_input+0x770>)
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7fd fc92 	bl	800c2c4 <pbuf_free>
      inseg.p = NULL;
 800e9a0:	4b24      	ldr	r3, [pc, #144]	; (800ea34 <tcp_input+0x770>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e9a6:	e030      	b.n	800ea0a <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e9a8:	4b23      	ldr	r3, [pc, #140]	; (800ea38 <tcp_input+0x774>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	899b      	ldrh	r3, [r3, #12]
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fc fa2b 	bl	800ae0c <lwip_htons>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	f003 0304 	and.w	r3, r3, #4
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d115      	bne.n	800e9ec <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9c0:	4b1e      	ldr	r3, [pc, #120]	; (800ea3c <tcp_input+0x778>)
 800e9c2:	6818      	ldr	r0, [r3, #0]
 800e9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ea40 <tcp_input+0x77c>)
 800e9c6:	881b      	ldrh	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ea44 <tcp_input+0x780>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9d0:	4b19      	ldr	r3, [pc, #100]	; (800ea38 <tcp_input+0x774>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9d4:	885b      	ldrh	r3, [r3, #2]
 800e9d6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9d8:	4a17      	ldr	r2, [pc, #92]	; (800ea38 <tcp_input+0x774>)
 800e9da:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9dc:	8812      	ldrh	r2, [r2, #0]
 800e9de:	b292      	uxth	r2, r2
 800e9e0:	9201      	str	r2, [sp, #4]
 800e9e2:	9300      	str	r3, [sp, #0]
 800e9e4:	4b18      	ldr	r3, [pc, #96]	; (800ea48 <tcp_input+0x784>)
 800e9e6:	4a19      	ldr	r2, [pc, #100]	; (800ea4c <tcp_input+0x788>)
 800e9e8:	f002 ffd4 	bl	8011994 <tcp_rst>
    pbuf_free(p);
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f7fd fc69 	bl	800c2c4 <pbuf_free>
  return;
 800e9f2:	e00a      	b.n	800ea0a <tcp_input+0x746>
    goto dropped;
 800e9f4:	bf00      	nop
 800e9f6:	e004      	b.n	800ea02 <tcp_input+0x73e>
    goto dropped;
 800e9f8:	bf00      	nop
 800e9fa:	e002      	b.n	800ea02 <tcp_input+0x73e>
    goto dropped;
 800e9fc:	bf00      	nop
 800e9fe:	e000      	b.n	800ea02 <tcp_input+0x73e>
      goto dropped;
 800ea00:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7fd fc5e 	bl	800c2c4 <pbuf_free>
 800ea08:	e000      	b.n	800ea0c <tcp_input+0x748>
  return;
 800ea0a:	bf00      	nop
}
 800ea0c:	3724      	adds	r7, #36	; 0x24
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd90      	pop	{r4, r7, pc}
 800ea12:	bf00      	nop
 800ea14:	2000bb78 	.word	0x2000bb78
 800ea18:	20004b15 	.word	0x20004b15
 800ea1c:	2000bb64 	.word	0x2000bb64
 800ea20:	20004b10 	.word	0x20004b10
 800ea24:	20004b18 	.word	0x20004b18
 800ea28:	080173b0 	.word	0x080173b0
 800ea2c:	0801754c 	.word	0x0801754c
 800ea30:	080173f4 	.word	0x080173f4
 800ea34:	20004ae8 	.word	0x20004ae8
 800ea38:	20004af8 	.word	0x20004af8
 800ea3c:	20004b0c 	.word	0x20004b0c
 800ea40:	20004b12 	.word	0x20004b12
 800ea44:	20004b08 	.word	0x20004b08
 800ea48:	20008444 	.word	0x20008444
 800ea4c:	20008448 	.word	0x20008448

0800ea50 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b082      	sub	sp, #8
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800ea58:	4b14      	ldr	r3, [pc, #80]	; (800eaac <tcp_input_delayed_close+0x5c>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	f003 0310 	and.w	r3, r3, #16
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d01d      	beq.n	800eaa0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	7e9b      	ldrb	r3, [r3, #26]
 800ea68:	f003 0310 	and.w	r3, r3, #16
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10d      	bne.n	800ea8c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d008      	beq.n	800ea8c <tcp_input_delayed_close+0x3c>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	6912      	ldr	r2, [r2, #16]
 800ea84:	f06f 010e 	mvn.w	r1, #14
 800ea88:	4610      	mov	r0, r2
 800ea8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	4808      	ldr	r0, [pc, #32]	; (800eab0 <tcp_input_delayed_close+0x60>)
 800ea90:	f7ff fb00 	bl	800e094 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	2001      	movs	r0, #1
 800ea98:	f7fc fe60 	bl	800b75c <memp_free>
    return 1;
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e000      	b.n	800eaa2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3708      	adds	r7, #8
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	20004b15 	.word	0x20004b15
 800eab0:	2000bb64 	.word	0x2000bb64

0800eab4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af02      	add	r7, sp, #8
 800eaba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eabc:	4b63      	ldr	r3, [pc, #396]	; (800ec4c <tcp_listen_input+0x198>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	f003 0304 	and.w	r3, r3, #4
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f040 80bb 	bne.w	800ec40 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eaca:	4b60      	ldr	r3, [pc, #384]	; (800ec4c <tcp_listen_input+0x198>)
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	f003 0310 	and.w	r3, r3, #16
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d016      	beq.n	800eb04 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ead6:	4b5e      	ldr	r3, [pc, #376]	; (800ec50 <tcp_listen_input+0x19c>)
 800ead8:	6818      	ldr	r0, [r3, #0]
 800eada:	4b5e      	ldr	r3, [pc, #376]	; (800ec54 <tcp_listen_input+0x1a0>)
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	461a      	mov	r2, r3
 800eae0:	4b5d      	ldr	r3, [pc, #372]	; (800ec58 <tcp_listen_input+0x1a4>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eae6:	4b5d      	ldr	r3, [pc, #372]	; (800ec5c <tcp_listen_input+0x1a8>)
 800eae8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaea:	885b      	ldrh	r3, [r3, #2]
 800eaec:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eaee:	4a5b      	ldr	r2, [pc, #364]	; (800ec5c <tcp_listen_input+0x1a8>)
 800eaf0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaf2:	8812      	ldrh	r2, [r2, #0]
 800eaf4:	b292      	uxth	r2, r2
 800eaf6:	9201      	str	r2, [sp, #4]
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	4b59      	ldr	r3, [pc, #356]	; (800ec60 <tcp_listen_input+0x1ac>)
 800eafc:	4a59      	ldr	r2, [pc, #356]	; (800ec64 <tcp_listen_input+0x1b0>)
 800eafe:	f002 ff49 	bl	8011994 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800eb02:	e09f      	b.n	800ec44 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800eb04:	4b51      	ldr	r3, [pc, #324]	; (800ec4c <tcp_listen_input+0x198>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 8099 	beq.w	800ec44 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	7d5b      	ldrb	r3, [r3, #21]
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7ff f934 	bl	800dd84 <tcp_alloc>
 800eb1c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d111      	bne.n	800eb48 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d00a      	beq.n	800eb42 <tcp_listen_input+0x8e>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	699b      	ldr	r3, [r3, #24]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	6910      	ldr	r0, [r2, #16]
 800eb34:	f04f 32ff 	mov.w	r2, #4294967295
 800eb38:	2100      	movs	r1, #0
 800eb3a:	4798      	blx	r3
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73bb      	strb	r3, [r7, #14]
      return;
 800eb40:	e081      	b.n	800ec46 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800eb42:	23f0      	movs	r3, #240	; 0xf0
 800eb44:	73bb      	strb	r3, [r7, #14]
      return;
 800eb46:	e07e      	b.n	800ec46 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800eb48:	4b47      	ldr	r3, [pc, #284]	; (800ec68 <tcp_listen_input+0x1b4>)
 800eb4a:	695a      	ldr	r2, [r3, #20]
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800eb50:	4b45      	ldr	r3, [pc, #276]	; (800ec68 <tcp_listen_input+0x1b4>)
 800eb52:	691a      	ldr	r2, [r3, #16]
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	8ada      	ldrh	r2, [r3, #22]
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800eb60:	4b3e      	ldr	r3, [pc, #248]	; (800ec5c <tcp_listen_input+0x1a8>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	2203      	movs	r2, #3
 800eb70:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800eb72:	4b39      	ldr	r3, [pc, #228]	; (800ec58 <tcp_listen_input+0x1a4>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	1c5a      	adds	r2, r3, #1
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800eb84:	6978      	ldr	r0, [r7, #20]
 800eb86:	f7ff fb01 	bl	800e18c <tcp_next_iss>
 800eb8a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	693a      	ldr	r2, [r7, #16]
 800eb96:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	693a      	ldr	r2, [r7, #16]
 800eb9c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	693a      	ldr	r2, [r7, #16]
 800eba2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800eba4:	4b2c      	ldr	r3, [pc, #176]	; (800ec58 <tcp_listen_input+0x1a4>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	1e5a      	subs	r2, r3, #1
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	691a      	ldr	r2, [r3, #16]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	7a1b      	ldrb	r3, [r3, #8]
 800ebc0:	f003 030c 	and.w	r3, r3, #12
 800ebc4:	b2da      	uxtb	r2, r3
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ebca:	4b28      	ldr	r3, [pc, #160]	; (800ec6c <tcp_listen_input+0x1b8>)
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	60da      	str	r2, [r3, #12]
 800ebd2:	4a26      	ldr	r2, [pc, #152]	; (800ec6c <tcp_listen_input+0x1b8>)
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	6013      	str	r3, [r2, #0]
 800ebd8:	f003 f924 	bl	8011e24 <tcp_timer_needed>
 800ebdc:	4b24      	ldr	r3, [pc, #144]	; (800ec70 <tcp_listen_input+0x1bc>)
 800ebde:	2201      	movs	r2, #1
 800ebe0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ebe2:	6978      	ldr	r0, [r7, #20]
 800ebe4:	f001 fd10 	bl	8010608 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ebe8:	4b1c      	ldr	r3, [pc, #112]	; (800ec5c <tcp_listen_input+0x1a8>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	89db      	ldrh	r3, [r3, #14]
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	3304      	adds	r3, #4
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	f7ff fad3 	bl	800e1b8 <tcp_eff_send_mss_impl>
 800ec12:	4603      	mov	r3, r0
 800ec14:	461a      	mov	r2, r3
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ec1a:	2112      	movs	r1, #18
 800ec1c:	6978      	ldr	r0, [r7, #20]
 800ec1e:	f002 fadd 	bl	80111dc <tcp_enqueue_flags>
 800ec22:	4603      	mov	r3, r0
 800ec24:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ec26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d004      	beq.n	800ec38 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ec2e:	2100      	movs	r1, #0
 800ec30:	6978      	ldr	r0, [r7, #20]
 800ec32:	f7fd fff9 	bl	800cc28 <tcp_abandon>
      return;
 800ec36:	e006      	b.n	800ec46 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800ec38:	6978      	ldr	r0, [r7, #20]
 800ec3a:	f002 fc27 	bl	801148c <tcp_output>
  return;
 800ec3e:	e001      	b.n	800ec44 <tcp_listen_input+0x190>
    return;
 800ec40:	bf00      	nop
 800ec42:	e000      	b.n	800ec46 <tcp_listen_input+0x192>
  return;
 800ec44:	bf00      	nop
}
 800ec46:	3718      	adds	r7, #24
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	20004b14 	.word	0x20004b14
 800ec50:	20004b0c 	.word	0x20004b0c
 800ec54:	20004b12 	.word	0x20004b12
 800ec58:	20004b08 	.word	0x20004b08
 800ec5c:	20004af8 	.word	0x20004af8
 800ec60:	20008444 	.word	0x20008444
 800ec64:	20008448 	.word	0x20008448
 800ec68:	20008434 	.word	0x20008434
 800ec6c:	2000bb64 	.word	0x2000bb64
 800ec70:	2000bb60 	.word	0x2000bb60

0800ec74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af02      	add	r7, sp, #8
 800ec7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ec7c:	4b29      	ldr	r3, [pc, #164]	; (800ed24 <tcp_timewait_input+0xb0>)
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	f003 0304 	and.w	r3, r3, #4
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d146      	bne.n	800ed16 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ec88:	4b26      	ldr	r3, [pc, #152]	; (800ed24 <tcp_timewait_input+0xb0>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	f003 0302 	and.w	r3, r3, #2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d027      	beq.n	800ece4 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ec94:	4b24      	ldr	r3, [pc, #144]	; (800ed28 <tcp_timewait_input+0xb4>)
 800ec96:	681a      	ldr	r2, [r3, #0]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	db2a      	blt.n	800ecf8 <tcp_timewait_input+0x84>
 800eca2:	4b21      	ldr	r3, [pc, #132]	; (800ed28 <tcp_timewait_input+0xb4>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecae:	440b      	add	r3, r1
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	dc20      	bgt.n	800ecf8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecb6:	4b1d      	ldr	r3, [pc, #116]	; (800ed2c <tcp_timewait_input+0xb8>)
 800ecb8:	6818      	ldr	r0, [r3, #0]
 800ecba:	4b1d      	ldr	r3, [pc, #116]	; (800ed30 <tcp_timewait_input+0xbc>)
 800ecbc:	881b      	ldrh	r3, [r3, #0]
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	4b19      	ldr	r3, [pc, #100]	; (800ed28 <tcp_timewait_input+0xb4>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc6:	4b1b      	ldr	r3, [pc, #108]	; (800ed34 <tcp_timewait_input+0xc0>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecca:	885b      	ldrh	r3, [r3, #2]
 800eccc:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecce:	4a19      	ldr	r2, [pc, #100]	; (800ed34 <tcp_timewait_input+0xc0>)
 800ecd0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd2:	8812      	ldrh	r2, [r2, #0]
 800ecd4:	b292      	uxth	r2, r2
 800ecd6:	9201      	str	r2, [sp, #4]
 800ecd8:	9300      	str	r3, [sp, #0]
 800ecda:	4b17      	ldr	r3, [pc, #92]	; (800ed38 <tcp_timewait_input+0xc4>)
 800ecdc:	4a17      	ldr	r2, [pc, #92]	; (800ed3c <tcp_timewait_input+0xc8>)
 800ecde:	f002 fe59 	bl	8011994 <tcp_rst>
      return;
 800ece2:	e01b      	b.n	800ed1c <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800ece4:	4b0f      	ldr	r3, [pc, #60]	; (800ed24 <tcp_timewait_input+0xb0>)
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	f003 0301 	and.w	r3, r3, #1
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d003      	beq.n	800ecf8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ecf0:	4b13      	ldr	r3, [pc, #76]	; (800ed40 <tcp_timewait_input+0xcc>)
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ecf8:	4b0d      	ldr	r3, [pc, #52]	; (800ed30 <tcp_timewait_input+0xbc>)
 800ecfa:	881b      	ldrh	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d00c      	beq.n	800ed1a <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	7e9b      	ldrb	r3, [r3, #26]
 800ed04:	f043 0302 	orr.w	r3, r3, #2
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f002 fbbc 	bl	801148c <tcp_output>
  }
  return;
 800ed14:	e001      	b.n	800ed1a <tcp_timewait_input+0xa6>
    return;
 800ed16:	bf00      	nop
 800ed18:	e000      	b.n	800ed1c <tcp_timewait_input+0xa8>
  return;
 800ed1a:	bf00      	nop
}
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	20004b14 	.word	0x20004b14
 800ed28:	20004b08 	.word	0x20004b08
 800ed2c:	20004b0c 	.word	0x20004b0c
 800ed30:	20004b12 	.word	0x20004b12
 800ed34:	20004af8 	.word	0x20004af8
 800ed38:	20008444 	.word	0x20008444
 800ed3c:	20008448 	.word	0x20008448
 800ed40:	2000bb68 	.word	0x2000bb68

0800ed44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b08a      	sub	sp, #40	; 0x28
 800ed48:	af02      	add	r7, sp, #8
 800ed4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ed54:	4ba4      	ldr	r3, [pc, #656]	; (800efe8 <tcp_process+0x2a4>)
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	f003 0304 	and.w	r3, r3, #4
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d04e      	beq.n	800edfe <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	7d1b      	ldrb	r3, [r3, #20]
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	d108      	bne.n	800ed7a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed6c:	4b9f      	ldr	r3, [pc, #636]	; (800efec <tcp_process+0x2a8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d123      	bne.n	800edbc <tcp_process+0x78>
        acceptable = 1;
 800ed74:	2301      	movs	r3, #1
 800ed76:	76fb      	strb	r3, [r7, #27]
 800ed78:	e020      	b.n	800edbc <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed7e:	4b9c      	ldr	r3, [pc, #624]	; (800eff0 <tcp_process+0x2ac>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d102      	bne.n	800ed8c <tcp_process+0x48>
        acceptable = 1;
 800ed86:	2301      	movs	r3, #1
 800ed88:	76fb      	strb	r3, [r7, #27]
 800ed8a:	e017      	b.n	800edbc <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ed8c:	4b98      	ldr	r3, [pc, #608]	; (800eff0 <tcp_process+0x2ac>)
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	db10      	blt.n	800edbc <tcp_process+0x78>
 800ed9a:	4b95      	ldr	r3, [pc, #596]	; (800eff0 <tcp_process+0x2ac>)
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda2:	6879      	ldr	r1, [r7, #4]
 800eda4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eda6:	440b      	add	r3, r1
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	dc06      	bgt.n	800edbc <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	7e9b      	ldrb	r3, [r3, #26]
 800edb2:	f043 0302 	orr.w	r3, r3, #2
 800edb6:	b2da      	uxtb	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800edbc:	7efb      	ldrb	r3, [r7, #27]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d01b      	beq.n	800edfa <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	7d1b      	ldrb	r3, [r3, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d106      	bne.n	800edd8 <tcp_process+0x94>
 800edca:	4b8a      	ldr	r3, [pc, #552]	; (800eff4 <tcp_process+0x2b0>)
 800edcc:	f240 22e7 	movw	r2, #743	; 0x2e7
 800edd0:	4989      	ldr	r1, [pc, #548]	; (800eff8 <tcp_process+0x2b4>)
 800edd2:	488a      	ldr	r0, [pc, #552]	; (800effc <tcp_process+0x2b8>)
 800edd4:	f005 fee2 	bl	8014b9c <iprintf>
      recv_flags |= TF_RESET;
 800edd8:	4b89      	ldr	r3, [pc, #548]	; (800f000 <tcp_process+0x2bc>)
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	f043 0308 	orr.w	r3, r3, #8
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	4b87      	ldr	r3, [pc, #540]	; (800f000 <tcp_process+0x2bc>)
 800ede4:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	7e9b      	ldrb	r3, [r3, #26]
 800edea:	f023 0301 	bic.w	r3, r3, #1
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800edf4:	f06f 030d 	mvn.w	r3, #13
 800edf8:	e34d      	b.n	800f496 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	e34b      	b.n	800f496 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800edfe:	4b7a      	ldr	r3, [pc, #488]	; (800efe8 <tcp_process+0x2a4>)
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	f003 0302 	and.w	r3, r3, #2
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d010      	beq.n	800ee2c <tcp_process+0xe8>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	7d1b      	ldrb	r3, [r3, #20]
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	d00c      	beq.n	800ee2c <tcp_process+0xe8>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	7d1b      	ldrb	r3, [r3, #20]
 800ee16:	2b03      	cmp	r3, #3
 800ee18:	d008      	beq.n	800ee2c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	7e9b      	ldrb	r3, [r3, #26]
 800ee1e:	f043 0302 	orr.w	r3, r3, #2
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	e334      	b.n	800f496 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	7e9b      	ldrb	r3, [r3, #26]
 800ee30:	f003 0310 	and.w	r3, r3, #16
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d103      	bne.n	800ee40 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ee38:	4b72      	ldr	r3, [pc, #456]	; (800f004 <tcp_process+0x2c0>)
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f001 fbdd 	bl	8010608 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	7d1b      	ldrb	r3, [r3, #20]
 800ee52:	3b02      	subs	r3, #2
 800ee54:	2b07      	cmp	r3, #7
 800ee56:	f200 830e 	bhi.w	800f476 <tcp_process+0x732>
 800ee5a:	a201      	add	r2, pc, #4	; (adr r2, 800ee60 <tcp_process+0x11c>)
 800ee5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee60:	0800ee81 	.word	0x0800ee81
 800ee64:	0800f079 	.word	0x0800f079
 800ee68:	0800f1d1 	.word	0x0800f1d1
 800ee6c:	0800f1fb 	.word	0x0800f1fb
 800ee70:	0800f325 	.word	0x0800f325
 800ee74:	0800f1d1 	.word	0x0800f1d1
 800ee78:	0800f3b1 	.word	0x0800f3b1
 800ee7c:	0800f441 	.word	0x0800f441
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ee80:	4b59      	ldr	r3, [pc, #356]	; (800efe8 <tcp_process+0x2a4>)
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f003 0310 	and.w	r3, r3, #16
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f000 80cb 	beq.w	800f024 <tcp_process+0x2e0>
 800ee8e:	4b56      	ldr	r3, [pc, #344]	; (800efe8 <tcp_process+0x2a4>)
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	f003 0302 	and.w	r3, r3, #2
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f000 80c4 	beq.w	800f024 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eea0:	1c5a      	adds	r2, r3, #1
 800eea2:	4b52      	ldr	r3, [pc, #328]	; (800efec <tcp_process+0x2a8>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	f040 80bc 	bne.w	800f024 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800eeac:	4b50      	ldr	r3, [pc, #320]	; (800eff0 <tcp_process+0x2ac>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	1c5a      	adds	r2, r3, #1
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800eebe:	4b4b      	ldr	r3, [pc, #300]	; (800efec <tcp_process+0x2a8>)
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800eec6:	4b50      	ldr	r3, [pc, #320]	; (800f008 <tcp_process+0x2c4>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	89db      	ldrh	r3, [r3, #14]
 800eecc:	b29a      	uxth	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800eee0:	4b43      	ldr	r3, [pc, #268]	; (800eff0 <tcp_process+0x2ac>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	1e5a      	subs	r2, r3, #1
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2204      	movs	r2, #4
 800eeee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	3304      	adds	r3, #4
 800eef8:	4619      	mov	r1, r3
 800eefa:	4610      	mov	r0, r2
 800eefc:	f7ff f95c 	bl	800e1b8 <tcp_eff_send_mss_impl>
 800ef00:	4603      	mov	r3, r0
 800ef02:	461a      	mov	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef0c:	005b      	lsls	r3, r3, #1
 800ef0e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ef12:	429a      	cmp	r2, r3
 800ef14:	bf38      	it	cc
 800ef16:	461a      	movcc	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	bf28      	it	cs
 800ef22:	4613      	movcs	r3, r2
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d106      	bne.n	800ef44 <tcp_process+0x200>
 800ef36:	4b2f      	ldr	r3, [pc, #188]	; (800eff4 <tcp_process+0x2b0>)
 800ef38:	f240 321a 	movw	r2, #794	; 0x31a
 800ef3c:	4933      	ldr	r1, [pc, #204]	; (800f00c <tcp_process+0x2c8>)
 800ef3e:	482f      	ldr	r0, [pc, #188]	; (800effc <tcp_process+0x2b8>)
 800ef40:	f005 fe2c 	bl	8014b9c <iprintf>
      --pcb->snd_queuelen;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef4a:	3b01      	subs	r3, #1
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef58:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ef5a:	69fb      	ldr	r3, [r7, #28]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d111      	bne.n	800ef84 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef64:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ef66:	69fb      	ldr	r3, [r7, #28]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d106      	bne.n	800ef7a <tcp_process+0x236>
 800ef6c:	4b21      	ldr	r3, [pc, #132]	; (800eff4 <tcp_process+0x2b0>)
 800ef6e:	f240 3222 	movw	r2, #802	; 0x322
 800ef72:	4927      	ldr	r1, [pc, #156]	; (800f010 <tcp_process+0x2cc>)
 800ef74:	4821      	ldr	r0, [pc, #132]	; (800effc <tcp_process+0x2b8>)
 800ef76:	f005 fe11 	bl	8014b9c <iprintf>
        pcb->unsent = rseg->next;
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	669a      	str	r2, [r3, #104]	; 0x68
 800ef82:	e003      	b.n	800ef8c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800ef8c:	69f8      	ldr	r0, [r7, #28]
 800ef8e:	f7fe fdd9 	bl	800db44 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d104      	bne.n	800efa4 <tcp_process+0x260>
        pcb->rtime = -1;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa0:	861a      	strh	r2, [r3, #48]	; 0x30
 800efa2:	e006      	b.n	800efb2 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00a      	beq.n	800efd2 <tcp_process+0x28e>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	6910      	ldr	r0, [r2, #16]
 800efc6:	2200      	movs	r2, #0
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	4798      	blx	r3
 800efcc:	4603      	mov	r3, r0
 800efce:	76bb      	strb	r3, [r7, #26]
 800efd0:	e001      	b.n	800efd6 <tcp_process+0x292>
 800efd2:	2300      	movs	r3, #0
 800efd4:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800efd6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800efda:	f113 0f0d 	cmn.w	r3, #13
 800efde:	d119      	bne.n	800f014 <tcp_process+0x2d0>
        return ERR_ABRT;
 800efe0:	f06f 030c 	mvn.w	r3, #12
 800efe4:	e257      	b.n	800f496 <tcp_process+0x752>
 800efe6:	bf00      	nop
 800efe8:	20004b14 	.word	0x20004b14
 800efec:	20004b0c 	.word	0x20004b0c
 800eff0:	20004b08 	.word	0x20004b08
 800eff4:	080173b0 	.word	0x080173b0
 800eff8:	08017568 	.word	0x08017568
 800effc:	080173f4 	.word	0x080173f4
 800f000:	20004b15 	.word	0x20004b15
 800f004:	2000bb68 	.word	0x2000bb68
 800f008:	20004af8 	.word	0x20004af8
 800f00c:	08017588 	.word	0x08017588
 800f010:	080175a0 	.word	0x080175a0
      }
      tcp_ack_now(pcb);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	7e9b      	ldrb	r3, [r3, #26]
 800f018:	f043 0302 	orr.w	r3, r3, #2
 800f01c:	b2da      	uxtb	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f022:	e22a      	b.n	800f47a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f024:	4b9f      	ldr	r3, [pc, #636]	; (800f2a4 <tcp_process+0x560>)
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	f003 0310 	and.w	r3, r3, #16
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f000 8224 	beq.w	800f47a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f032:	4b9d      	ldr	r3, [pc, #628]	; (800f2a8 <tcp_process+0x564>)
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	4b9d      	ldr	r3, [pc, #628]	; (800f2ac <tcp_process+0x568>)
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	461a      	mov	r2, r3
 800f03c:	4b9c      	ldr	r3, [pc, #624]	; (800f2b0 <tcp_process+0x56c>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f042:	4b9c      	ldr	r3, [pc, #624]	; (800f2b4 <tcp_process+0x570>)
 800f044:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f046:	885b      	ldrh	r3, [r3, #2]
 800f048:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f04a:	4a9a      	ldr	r2, [pc, #616]	; (800f2b4 <tcp_process+0x570>)
 800f04c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f04e:	8812      	ldrh	r2, [r2, #0]
 800f050:	b292      	uxth	r2, r2
 800f052:	9201      	str	r2, [sp, #4]
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	4b98      	ldr	r3, [pc, #608]	; (800f2b8 <tcp_process+0x574>)
 800f058:	4a98      	ldr	r2, [pc, #608]	; (800f2bc <tcp_process+0x578>)
 800f05a:	f002 fc9b 	bl	8011994 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f064:	2b05      	cmp	r3, #5
 800f066:	f200 8208 	bhi.w	800f47a <tcp_process+0x736>
        pcb->rtime = 0;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f002 fd05 	bl	8011a80 <tcp_rexmit_rto>
    break;
 800f076:	e200      	b.n	800f47a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f078:	4b8a      	ldr	r3, [pc, #552]	; (800f2a4 <tcp_process+0x560>)
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	f003 0310 	and.w	r3, r3, #16
 800f080:	2b00      	cmp	r3, #0
 800f082:	f000 8091 	beq.w	800f1a8 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f086:	4b88      	ldr	r3, [pc, #544]	; (800f2a8 <tcp_process+0x564>)
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	3b01      	subs	r3, #1
 800f092:	2b00      	cmp	r3, #0
 800f094:	db71      	blt.n	800f17a <tcp_process+0x436>
 800f096:	4b84      	ldr	r3, [pc, #528]	; (800f2a8 <tcp_process+0x564>)
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f09e:	1ad3      	subs	r3, r2, r3
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	dc6a      	bgt.n	800f17a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2204      	movs	r2, #4
 800f0a8:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00b      	beq.n	800f0ca <tcp_process+0x386>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d106      	bne.n	800f0ca <tcp_process+0x386>
 800f0bc:	4b80      	ldr	r3, [pc, #512]	; (800f2c0 <tcp_process+0x57c>)
 800f0be:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f0c2:	4980      	ldr	r1, [pc, #512]	; (800f2c4 <tcp_process+0x580>)
 800f0c4:	4880      	ldr	r0, [pc, #512]	; (800f2c8 <tcp_process+0x584>)
 800f0c6:	f005 fd69 	bl	8014b9c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d102      	bne.n	800f0d8 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f0d2:	23fa      	movs	r3, #250	; 0xfa
 800f0d4:	76bb      	strb	r3, [r7, #26]
 800f0d6:	e011      	b.n	800f0fc <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0dc:	699b      	ldr	r3, [r3, #24]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00a      	beq.n	800f0f8 <tcp_process+0x3b4>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0e6:	699b      	ldr	r3, [r3, #24]
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	6910      	ldr	r0, [r2, #16]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	6879      	ldr	r1, [r7, #4]
 800f0f0:	4798      	blx	r3
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	76bb      	strb	r3, [r7, #26]
 800f0f6:	e001      	b.n	800f0fc <tcp_process+0x3b8>
 800f0f8:	23f0      	movs	r3, #240	; 0xf0
 800f0fa:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f0fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00a      	beq.n	800f11a <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f104:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f108:	f113 0f0d 	cmn.w	r3, #13
 800f10c:	d002      	beq.n	800f114 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7fd fe3c 	bl	800cd8c <tcp_abort>
          }
          return ERR_ABRT;
 800f114:	f06f 030c 	mvn.w	r3, #12
 800f118:	e1bd      	b.n	800f496 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fa42 	bl	800f5a4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f120:	4b6a      	ldr	r3, [pc, #424]	; (800f2cc <tcp_process+0x588>)
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d005      	beq.n	800f134 <tcp_process+0x3f0>
          recv_acked--;
 800f128:	4b68      	ldr	r3, [pc, #416]	; (800f2cc <tcp_process+0x588>)
 800f12a:	881b      	ldrh	r3, [r3, #0]
 800f12c:	3b01      	subs	r3, #1
 800f12e:	b29a      	uxth	r2, r3
 800f130:	4b66      	ldr	r3, [pc, #408]	; (800f2cc <tcp_process+0x588>)
 800f132:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f138:	005b      	lsls	r3, r3, #1
 800f13a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f13e:	429a      	cmp	r2, r3
 800f140:	bf38      	it	cc
 800f142:	461a      	movcc	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	4293      	cmp	r3, r2
 800f14c:	bf28      	it	cs
 800f14e:	4613      	movcs	r3, r2
 800f150:	b29a      	uxth	r2, r3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f158:	4b5d      	ldr	r3, [pc, #372]	; (800f2d0 <tcp_process+0x58c>)
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	f003 0320 	and.w	r3, r3, #32
 800f160:	2b00      	cmp	r3, #0
 800f162:	d034      	beq.n	800f1ce <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	7e9b      	ldrb	r3, [r3, #26]
 800f168:	f043 0302 	orr.w	r3, r3, #2
 800f16c:	b2da      	uxtb	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2207      	movs	r2, #7
 800f176:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f178:	e029      	b.n	800f1ce <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f17a:	4b4b      	ldr	r3, [pc, #300]	; (800f2a8 <tcp_process+0x564>)
 800f17c:	6818      	ldr	r0, [r3, #0]
 800f17e:	4b4b      	ldr	r3, [pc, #300]	; (800f2ac <tcp_process+0x568>)
 800f180:	881b      	ldrh	r3, [r3, #0]
 800f182:	461a      	mov	r2, r3
 800f184:	4b4a      	ldr	r3, [pc, #296]	; (800f2b0 <tcp_process+0x56c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f18a:	4b4a      	ldr	r3, [pc, #296]	; (800f2b4 <tcp_process+0x570>)
 800f18c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f18e:	885b      	ldrh	r3, [r3, #2]
 800f190:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f192:	4a48      	ldr	r2, [pc, #288]	; (800f2b4 <tcp_process+0x570>)
 800f194:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f196:	8812      	ldrh	r2, [r2, #0]
 800f198:	b292      	uxth	r2, r2
 800f19a:	9201      	str	r2, [sp, #4]
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	4b46      	ldr	r3, [pc, #280]	; (800f2b8 <tcp_process+0x574>)
 800f1a0:	4a46      	ldr	r2, [pc, #280]	; (800f2bc <tcp_process+0x578>)
 800f1a2:	f002 fbf7 	bl	8011994 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f1a6:	e16a      	b.n	800f47e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f1a8:	4b3e      	ldr	r3, [pc, #248]	; (800f2a4 <tcp_process+0x560>)
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	f003 0302 	and.w	r3, r3, #2
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f000 8164 	beq.w	800f47e <tcp_process+0x73a>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ba:	1e5a      	subs	r2, r3, #1
 800f1bc:	4b3c      	ldr	r3, [pc, #240]	; (800f2b0 <tcp_process+0x56c>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	f040 815c 	bne.w	800f47e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f002 fc90 	bl	8011aec <tcp_rexmit>
    break;
 800f1cc:	e157      	b.n	800f47e <tcp_process+0x73a>
 800f1ce:	e156      	b.n	800f47e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 f9e7 	bl	800f5a4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f1d6:	4b3e      	ldr	r3, [pc, #248]	; (800f2d0 <tcp_process+0x58c>)
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	f003 0320 	and.w	r3, r3, #32
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f000 814f 	beq.w	800f482 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	7e9b      	ldrb	r3, [r3, #26]
 800f1e8:	f043 0302 	orr.w	r3, r3, #2
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2207      	movs	r2, #7
 800f1f6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f1f8:	e143      	b.n	800f482 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f000 f9d2 	bl	800f5a4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f200:	4b33      	ldr	r3, [pc, #204]	; (800f2d0 <tcp_process+0x58c>)
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	f003 0320 	and.w	r3, r3, #32
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d074      	beq.n	800f2f6 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f20c:	4b25      	ldr	r3, [pc, #148]	; (800f2a4 <tcp_process+0x560>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	f003 0310 	and.w	r3, r3, #16
 800f214:	2b00      	cmp	r3, #0
 800f216:	d063      	beq.n	800f2e0 <tcp_process+0x59c>
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f21c:	4b22      	ldr	r3, [pc, #136]	; (800f2a8 <tcp_process+0x564>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	429a      	cmp	r2, r3
 800f222:	d15d      	bne.n	800f2e0 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d159      	bne.n	800f2e0 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	7e9b      	ldrb	r3, [r3, #26]
 800f230:	f043 0302 	orr.w	r3, r3, #2
 800f234:	b2da      	uxtb	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7fe fee8 	bl	800e010 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f240:	4b24      	ldr	r3, [pc, #144]	; (800f2d4 <tcp_process+0x590>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	429a      	cmp	r2, r3
 800f248:	d105      	bne.n	800f256 <tcp_process+0x512>
 800f24a:	4b22      	ldr	r3, [pc, #136]	; (800f2d4 <tcp_process+0x590>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	4a20      	ldr	r2, [pc, #128]	; (800f2d4 <tcp_process+0x590>)
 800f252:	6013      	str	r3, [r2, #0]
 800f254:	e013      	b.n	800f27e <tcp_process+0x53a>
 800f256:	4b1f      	ldr	r3, [pc, #124]	; (800f2d4 <tcp_process+0x590>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	617b      	str	r3, [r7, #20]
 800f25c:	e00c      	b.n	800f278 <tcp_process+0x534>
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	429a      	cmp	r2, r3
 800f266:	d104      	bne.n	800f272 <tcp_process+0x52e>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	68da      	ldr	r2, [r3, #12]
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	60da      	str	r2, [r3, #12]
 800f270:	e005      	b.n	800f27e <tcp_process+0x53a>
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	617b      	str	r3, [r7, #20]
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1ef      	bne.n	800f25e <tcp_process+0x51a>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	60da      	str	r2, [r3, #12]
 800f284:	4b14      	ldr	r3, [pc, #80]	; (800f2d8 <tcp_process+0x594>)
 800f286:	2201      	movs	r2, #1
 800f288:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	220a      	movs	r2, #10
 800f28e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f290:	4b12      	ldr	r3, [pc, #72]	; (800f2dc <tcp_process+0x598>)
 800f292:	681a      	ldr	r2, [r3, #0]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	60da      	str	r2, [r3, #12]
 800f298:	4a10      	ldr	r2, [pc, #64]	; (800f2dc <tcp_process+0x598>)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6013      	str	r3, [r2, #0]
 800f29e:	f002 fdc1 	bl	8011e24 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f2a2:	e0f0      	b.n	800f486 <tcp_process+0x742>
 800f2a4:	20004b14 	.word	0x20004b14
 800f2a8:	20004b0c 	.word	0x20004b0c
 800f2ac:	20004b12 	.word	0x20004b12
 800f2b0:	20004b08 	.word	0x20004b08
 800f2b4:	20004af8 	.word	0x20004af8
 800f2b8:	20008444 	.word	0x20008444
 800f2bc:	20008448 	.word	0x20008448
 800f2c0:	080173b0 	.word	0x080173b0
 800f2c4:	080175b4 	.word	0x080175b4
 800f2c8:	080173f4 	.word	0x080173f4
 800f2cc:	20004b10 	.word	0x20004b10
 800f2d0:	20004b15 	.word	0x20004b15
 800f2d4:	2000bb64 	.word	0x2000bb64
 800f2d8:	2000bb60 	.word	0x2000bb60
 800f2dc:	2000bb74 	.word	0x2000bb74
        tcp_ack_now(pcb);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	7e9b      	ldrb	r3, [r3, #26]
 800f2e4:	f043 0302 	orr.w	r3, r3, #2
 800f2e8:	b2da      	uxtb	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2208      	movs	r2, #8
 800f2f2:	751a      	strb	r2, [r3, #20]
    break;
 800f2f4:	e0c7      	b.n	800f486 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f2f6:	4b6a      	ldr	r3, [pc, #424]	; (800f4a0 <tcp_process+0x75c>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	f003 0310 	and.w	r3, r3, #16
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f000 80c1 	beq.w	800f486 <tcp_process+0x742>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f308:	4b66      	ldr	r3, [pc, #408]	; (800f4a4 <tcp_process+0x760>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	f040 80ba 	bne.w	800f486 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f316:	2b00      	cmp	r3, #0
 800f318:	f040 80b5 	bne.w	800f486 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2206      	movs	r2, #6
 800f320:	751a      	strb	r2, [r3, #20]
    break;
 800f322:	e0b0      	b.n	800f486 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f93d 	bl	800f5a4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f32a:	4b5f      	ldr	r3, [pc, #380]	; (800f4a8 <tcp_process+0x764>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	f003 0320 	and.w	r3, r3, #32
 800f332:	2b00      	cmp	r3, #0
 800f334:	f000 80a9 	beq.w	800f48a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7e9b      	ldrb	r3, [r3, #26]
 800f33c:	f043 0302 	orr.w	r3, r3, #2
 800f340:	b2da      	uxtb	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7fe fe62 	bl	800e010 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f34c:	4b57      	ldr	r3, [pc, #348]	; (800f4ac <tcp_process+0x768>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	429a      	cmp	r2, r3
 800f354:	d105      	bne.n	800f362 <tcp_process+0x61e>
 800f356:	4b55      	ldr	r3, [pc, #340]	; (800f4ac <tcp_process+0x768>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	4a53      	ldr	r2, [pc, #332]	; (800f4ac <tcp_process+0x768>)
 800f35e:	6013      	str	r3, [r2, #0]
 800f360:	e013      	b.n	800f38a <tcp_process+0x646>
 800f362:	4b52      	ldr	r3, [pc, #328]	; (800f4ac <tcp_process+0x768>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	613b      	str	r3, [r7, #16]
 800f368:	e00c      	b.n	800f384 <tcp_process+0x640>
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	429a      	cmp	r2, r3
 800f372:	d104      	bne.n	800f37e <tcp_process+0x63a>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	68da      	ldr	r2, [r3, #12]
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	60da      	str	r2, [r3, #12]
 800f37c:	e005      	b.n	800f38a <tcp_process+0x646>
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	613b      	str	r3, [r7, #16]
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d1ef      	bne.n	800f36a <tcp_process+0x626>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2200      	movs	r2, #0
 800f38e:	60da      	str	r2, [r3, #12]
 800f390:	4b47      	ldr	r3, [pc, #284]	; (800f4b0 <tcp_process+0x76c>)
 800f392:	2201      	movs	r2, #1
 800f394:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	220a      	movs	r2, #10
 800f39a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f39c:	4b45      	ldr	r3, [pc, #276]	; (800f4b4 <tcp_process+0x770>)
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	60da      	str	r2, [r3, #12]
 800f3a4:	4a43      	ldr	r2, [pc, #268]	; (800f4b4 <tcp_process+0x770>)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6013      	str	r3, [r2, #0]
 800f3aa:	f002 fd3b 	bl	8011e24 <tcp_timer_needed>
    }
    break;
 800f3ae:	e06c      	b.n	800f48a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f8f7 	bl	800f5a4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f3b6:	4b3a      	ldr	r3, [pc, #232]	; (800f4a0 <tcp_process+0x75c>)
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	f003 0310 	and.w	r3, r3, #16
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d065      	beq.n	800f48e <tcp_process+0x74a>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3c6:	4b37      	ldr	r3, [pc, #220]	; (800f4a4 <tcp_process+0x760>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d15f      	bne.n	800f48e <tcp_process+0x74a>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d15b      	bne.n	800f48e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7fe fe1a 	bl	800e010 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f3dc:	4b33      	ldr	r3, [pc, #204]	; (800f4ac <tcp_process+0x768>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d105      	bne.n	800f3f2 <tcp_process+0x6ae>
 800f3e6:	4b31      	ldr	r3, [pc, #196]	; (800f4ac <tcp_process+0x768>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	4a2f      	ldr	r2, [pc, #188]	; (800f4ac <tcp_process+0x768>)
 800f3ee:	6013      	str	r3, [r2, #0]
 800f3f0:	e013      	b.n	800f41a <tcp_process+0x6d6>
 800f3f2:	4b2e      	ldr	r3, [pc, #184]	; (800f4ac <tcp_process+0x768>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	60fb      	str	r3, [r7, #12]
 800f3f8:	e00c      	b.n	800f414 <tcp_process+0x6d0>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	429a      	cmp	r2, r3
 800f402:	d104      	bne.n	800f40e <tcp_process+0x6ca>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	68da      	ldr	r2, [r3, #12]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	60da      	str	r2, [r3, #12]
 800f40c:	e005      	b.n	800f41a <tcp_process+0x6d6>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	60fb      	str	r3, [r7, #12]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1ef      	bne.n	800f3fa <tcp_process+0x6b6>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	60da      	str	r2, [r3, #12]
 800f420:	4b23      	ldr	r3, [pc, #140]	; (800f4b0 <tcp_process+0x76c>)
 800f422:	2201      	movs	r2, #1
 800f424:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	220a      	movs	r2, #10
 800f42a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f42c:	4b21      	ldr	r3, [pc, #132]	; (800f4b4 <tcp_process+0x770>)
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	60da      	str	r2, [r3, #12]
 800f434:	4a1f      	ldr	r2, [pc, #124]	; (800f4b4 <tcp_process+0x770>)
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6013      	str	r3, [r2, #0]
 800f43a:	f002 fcf3 	bl	8011e24 <tcp_timer_needed>
    }
    break;
 800f43e:	e026      	b.n	800f48e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f000 f8af 	bl	800f5a4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f446:	4b16      	ldr	r3, [pc, #88]	; (800f4a0 <tcp_process+0x75c>)
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	f003 0310 	and.w	r3, r3, #16
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d01f      	beq.n	800f492 <tcp_process+0x74e>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f456:	4b13      	ldr	r3, [pc, #76]	; (800f4a4 <tcp_process+0x760>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d119      	bne.n	800f492 <tcp_process+0x74e>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f462:	2b00      	cmp	r3, #0
 800f464:	d115      	bne.n	800f492 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f466:	4b10      	ldr	r3, [pc, #64]	; (800f4a8 <tcp_process+0x764>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	f043 0310 	orr.w	r3, r3, #16
 800f46e:	b2da      	uxtb	r2, r3
 800f470:	4b0d      	ldr	r3, [pc, #52]	; (800f4a8 <tcp_process+0x764>)
 800f472:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f474:	e00d      	b.n	800f492 <tcp_process+0x74e>
  default:
    break;
 800f476:	bf00      	nop
 800f478:	e00c      	b.n	800f494 <tcp_process+0x750>
    break;
 800f47a:	bf00      	nop
 800f47c:	e00a      	b.n	800f494 <tcp_process+0x750>
    break;
 800f47e:	bf00      	nop
 800f480:	e008      	b.n	800f494 <tcp_process+0x750>
    break;
 800f482:	bf00      	nop
 800f484:	e006      	b.n	800f494 <tcp_process+0x750>
    break;
 800f486:	bf00      	nop
 800f488:	e004      	b.n	800f494 <tcp_process+0x750>
    break;
 800f48a:	bf00      	nop
 800f48c:	e002      	b.n	800f494 <tcp_process+0x750>
    break;
 800f48e:	bf00      	nop
 800f490:	e000      	b.n	800f494 <tcp_process+0x750>
    break;
 800f492:	bf00      	nop
  }
  return ERR_OK;
 800f494:	2300      	movs	r3, #0
}
 800f496:	4618      	mov	r0, r3
 800f498:	3720      	adds	r7, #32
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	20004b14 	.word	0x20004b14
 800f4a4:	20004b0c 	.word	0x20004b0c
 800f4a8:	20004b15 	.word	0x20004b15
 800f4ac:	2000bb64 	.word	0x2000bb64
 800f4b0:	2000bb60 	.word	0x2000bb60
 800f4b4:	2000bb74 	.word	0x2000bb74

0800f4b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f4b8:	b590      	push	{r4, r7, lr}
 800f4ba:	b085      	sub	sp, #20
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
 800f4c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	899b      	ldrh	r3, [r3, #12]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fb fc9e 	bl	800ae0c <lwip_htons>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	f003 0301 	and.w	r3, r3, #1
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d027      	beq.n	800f52a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f4da:	6838      	ldr	r0, [r7, #0]
 800f4dc:	f7fe fb1d 	bl	800db1a <tcp_segs_free>
    next = NULL;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	603b      	str	r3, [r7, #0]
 800f4e4:	e055      	b.n	800f592 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	899b      	ldrh	r3, [r3, #12]
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fb fc8c 	bl	800ae0c <lwip_htons>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f003 0301 	and.w	r3, r3, #1
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00d      	beq.n	800f51a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	899b      	ldrh	r3, [r3, #12]
 800f504:	b29c      	uxth	r4, r3
 800f506:	2001      	movs	r0, #1
 800f508:	f7fb fc80 	bl	800ae0c <lwip_htons>
 800f50c:	4603      	mov	r3, r0
 800f50e:	461a      	mov	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	4322      	orrs	r2, r4
 800f516:	b292      	uxth	r2, r2
 800f518:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f7fe fb0d 	bl	800db44 <tcp_seg_free>
    while (next &&
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00e      	beq.n	800f54e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	891b      	ldrh	r3, [r3, #8]
 800f534:	461a      	mov	r2, r3
 800f536:	4b1a      	ldr	r3, [pc, #104]	; (800f5a0 <tcp_oos_insert_segment+0xe8>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	441a      	add	r2, r3
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	6839      	ldr	r1, [r7, #0]
 800f544:	8909      	ldrh	r1, [r1, #8]
 800f546:	440b      	add	r3, r1
 800f548:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	dacb      	bge.n	800f4e6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d01e      	beq.n	800f592 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	891b      	ldrh	r3, [r3, #8]
 800f558:	461a      	mov	r2, r3
 800f55a:	4b11      	ldr	r3, [pc, #68]	; (800f5a0 <tcp_oos_insert_segment+0xe8>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	441a      	add	r2, r3
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f568:	2b00      	cmp	r3, #0
 800f56a:	dd12      	ble.n	800f592 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	b29a      	uxth	r2, r3
 800f574:	4b0a      	ldr	r3, [pc, #40]	; (800f5a0 <tcp_oos_insert_segment+0xe8>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	1ad3      	subs	r3, r2, r3
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	891b      	ldrh	r3, [r3, #8]
 800f58a:	4619      	mov	r1, r3
 800f58c:	4610      	mov	r0, r2
 800f58e:	f7fc fd25 	bl	800bfdc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	683a      	ldr	r2, [r7, #0]
 800f596:	601a      	str	r2, [r3, #0]
}
 800f598:	bf00      	nop
 800f59a:	3714      	adds	r7, #20
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd90      	pop	{r4, r7, pc}
 800f5a0:	20004b08 	.word	0x20004b08

0800f5a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5a6:	b08d      	sub	sp, #52	; 0x34
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	7d1b      	ldrb	r3, [r3, #20]
 800f5b4:	2b03      	cmp	r3, #3
 800f5b6:	d806      	bhi.n	800f5c6 <tcp_receive+0x22>
 800f5b8:	4ba6      	ldr	r3, [pc, #664]	; (800f854 <tcp_receive+0x2b0>)
 800f5ba:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f5be:	49a6      	ldr	r1, [pc, #664]	; (800f858 <tcp_receive+0x2b4>)
 800f5c0:	48a6      	ldr	r0, [pc, #664]	; (800f85c <tcp_receive+0x2b8>)
 800f5c2:	f005 faeb 	bl	8014b9c <iprintf>

  if (flags & TCP_ACK) {
 800f5c6:	4ba6      	ldr	r3, [pc, #664]	; (800f860 <tcp_receive+0x2bc>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	f003 0310 	and.w	r3, r3, #16
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f000 82bf 	beq.w	800fb52 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5da:	461a      	mov	r2, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5e0:	4413      	add	r3, r2
 800f5e2:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5e8:	4b9e      	ldr	r3, [pc, #632]	; (800f864 <tcp_receive+0x2c0>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	db1b      	blt.n	800f62a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5f6:	4b9b      	ldr	r3, [pc, #620]	; (800f864 <tcp_receive+0x2c0>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d106      	bne.n	800f60c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f602:	4b99      	ldr	r3, [pc, #612]	; (800f868 <tcp_receive+0x2c4>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	db0e      	blt.n	800f62a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f610:	4b95      	ldr	r3, [pc, #596]	; (800f868 <tcp_receive+0x2c4>)
 800f612:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f614:	429a      	cmp	r2, r3
 800f616:	d141      	bne.n	800f69c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f618:	4b94      	ldr	r3, [pc, #592]	; (800f86c <tcp_receive+0x2c8>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	89db      	ldrh	r3, [r3, #14]
 800f61e:	b29a      	uxth	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f626:	429a      	cmp	r2, r3
 800f628:	d938      	bls.n	800f69c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f62a:	4b90      	ldr	r3, [pc, #576]	; (800f86c <tcp_receive+0x2c8>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	89db      	ldrh	r3, [r3, #14]
 800f630:	b29a      	uxth	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f644:	429a      	cmp	r2, r3
 800f646:	d205      	bcs.n	800f654 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f654:	4b83      	ldr	r3, [pc, #524]	; (800f864 <tcp_receive+0x2c0>)
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f65c:	4b82      	ldr	r3, [pc, #520]	; (800f868 <tcp_receive+0x2c4>)
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10d      	bne.n	800f68a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f674:	2b00      	cmp	r3, #0
 800f676:	d111      	bne.n	800f69c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2201      	movs	r2, #1
 800f684:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800f688:	e008      	b.n	800f69c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f690:	2b00      	cmp	r3, #0
 800f692:	d003      	beq.n	800f69c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f69c:	4b72      	ldr	r3, [pc, #456]	; (800f868 <tcp_receive+0x2c4>)
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	dc53      	bgt.n	800f752 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f6aa:	4b71      	ldr	r3, [pc, #452]	; (800f870 <tcp_receive+0x2cc>)
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d146      	bne.n	800f740 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f6bc:	4413      	add	r3, r2
 800f6be:	697a      	ldr	r2, [r7, #20]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d13d      	bne.n	800f740 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	db38      	blt.n	800f740 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6d2:	4b65      	ldr	r3, [pc, #404]	; (800f868 <tcp_receive+0x2c4>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d132      	bne.n	800f740 <tcp_receive+0x19c>
              found_dupack = 1;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6e4:	2bff      	cmp	r3, #255	; 0xff
 800f6e6:	d007      	beq.n	800f6f8 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	b2da      	uxtb	r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6fe:	2b03      	cmp	r3, #3
 800f700:	d916      	bls.n	800f730 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f70c:	4413      	add	r3, r2
 800f70e:	b29a      	uxth	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f716:	429a      	cmp	r2, r3
 800f718:	d912      	bls.n	800f740 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f724:	4413      	add	r3, r2
 800f726:	b29a      	uxth	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f72e:	e007      	b.n	800f740 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f736:	2b03      	cmp	r3, #3
 800f738:	d102      	bne.n	800f740 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f002 fa26 	bl	8011b8c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	2b00      	cmp	r3, #0
 800f744:	f040 8169 	bne.w	800fa1a <tcp_receive+0x476>
        pcb->dupacks = 0;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f750:	e163      	b.n	800fa1a <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f752:	4b45      	ldr	r3, [pc, #276]	; (800f868 <tcp_receive+0x2c4>)
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	3b01      	subs	r3, #1
 800f75e:	2b00      	cmp	r3, #0
 800f760:	f2c0 8107 	blt.w	800f972 <tcp_receive+0x3ce>
 800f764:	4b40      	ldr	r3, [pc, #256]	; (800f868 <tcp_receive+0x2c4>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f76c:	1ad3      	subs	r3, r2, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f300 80ff 	bgt.w	800f972 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	7e9b      	ldrb	r3, [r3, #26]
 800f778:	f003 0304 	and.w	r3, r3, #4
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00c      	beq.n	800f79a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	7e9b      	ldrb	r3, [r3, #26]
 800f784:	f023 0304 	bic.w	r3, r3, #4
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7a8:	10db      	asrs	r3, r3, #3
 800f7aa:	b21b      	sxth	r3, r3
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	4413      	add	r3, r2
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	b21a      	sxth	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f7ca:	4b27      	ldr	r3, [pc, #156]	; (800f868 <tcp_receive+0x2c4>)
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	7d1b      	ldrb	r3, [r3, #20]
 800f7d6:	2b03      	cmp	r3, #3
 800f7d8:	f240 8094 	bls.w	800f904 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d216      	bcs.n	800f81a <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7f6:	4413      	add	r3, r2
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f800:	429a      	cmp	r2, r3
 800f802:	d97f      	bls.n	800f904 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f80e:	4413      	add	r3, r2
 800f810:	b29a      	uxth	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f818:	e074      	b.n	800f904 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f824:	4619      	mov	r1, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f82a:	fb03 f301 	mul.w	r3, r3, r1
 800f82e:	6879      	ldr	r1, [r7, #4]
 800f830:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800f834:	fb93 f3f1 	sdiv	r3, r3, r1
 800f838:	b29b      	uxth	r3, r3
 800f83a:	4413      	add	r3, r2
 800f83c:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f844:	8a7a      	ldrh	r2, [r7, #18]
 800f846:	429a      	cmp	r2, r3
 800f848:	d95c      	bls.n	800f904 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	8a7a      	ldrh	r2, [r7, #18]
 800f84e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f852:	e057      	b.n	800f904 <tcp_receive+0x360>
 800f854:	080173b0 	.word	0x080173b0
 800f858:	080175d4 	.word	0x080175d4
 800f85c:	080173f4 	.word	0x080173f4
 800f860:	20004b14 	.word	0x20004b14
 800f864:	20004b08 	.word	0x20004b08
 800f868:	20004b0c 	.word	0x20004b0c
 800f86c:	20004af8 	.word	0x20004af8
 800f870:	20004b12 	.word	0x20004b12
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f878:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fc fdb2 	bl	800c3f8 <pbuf_clen>
 800f894:	4603      	mov	r3, r0
 800f896:	429c      	cmp	r4, r3
 800f898:	d206      	bcs.n	800f8a8 <tcp_receive+0x304>
 800f89a:	4b70      	ldr	r3, [pc, #448]	; (800fa5c <tcp_receive+0x4b8>)
 800f89c:	f240 429e 	movw	r2, #1182	; 0x49e
 800f8a0:	496f      	ldr	r1, [pc, #444]	; (800fa60 <tcp_receive+0x4bc>)
 800f8a2:	4870      	ldr	r0, [pc, #448]	; (800fa64 <tcp_receive+0x4c0>)
 800f8a4:	f005 f97a 	bl	8014b9c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7fc fda3 	bl	800c3f8 <pbuf_clen>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8bc:	1a9b      	subs	r3, r3, r2
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800f8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c8:	891a      	ldrh	r2, [r3, #8]
 800f8ca:	4b67      	ldr	r3, [pc, #412]	; (800fa68 <tcp_receive+0x4c4>)
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	4b65      	ldr	r3, [pc, #404]	; (800fa68 <tcp_receive+0x4c4>)
 800f8d4:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f8d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8d8:	f7fe f934 	bl	800db44 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d00e      	beq.n	800f904 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d10a      	bne.n	800f904 <tcp_receive+0x360>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d106      	bne.n	800f904 <tcp_receive+0x360>
 800f8f6:	4b59      	ldr	r3, [pc, #356]	; (800fa5c <tcp_receive+0x4b8>)
 800f8f8:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800f8fc:	495b      	ldr	r1, [pc, #364]	; (800fa6c <tcp_receive+0x4c8>)
 800f8fe:	4859      	ldr	r0, [pc, #356]	; (800fa64 <tcp_receive+0x4c0>)
 800f900:	f005 f94c 	bl	8014b9c <iprintf>
      while (pcb->unacked != NULL &&
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d022      	beq.n	800f952 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	4618      	mov	r0, r3
 800f916:	f7fb fa86 	bl	800ae26 <lwip_htonl>
 800f91a:	4604      	mov	r4, r0
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f920:	891b      	ldrh	r3, [r3, #8]
 800f922:	461d      	mov	r5, r3
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	899b      	ldrh	r3, [r3, #12]
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fb fa6c 	bl	800ae0c <lwip_htons>
 800f934:	4603      	mov	r3, r0
 800f936:	f003 0303 	and.w	r3, r3, #3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d001      	beq.n	800f942 <tcp_receive+0x39e>
 800f93e:	2301      	movs	r3, #1
 800f940:	e000      	b.n	800f944 <tcp_receive+0x3a0>
 800f942:	2300      	movs	r3, #0
 800f944:	442b      	add	r3, r5
 800f946:	18e2      	adds	r2, r4, r3
 800f948:	4b49      	ldr	r3, [pc, #292]	; (800fa70 <tcp_receive+0x4cc>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800f94e:	2b00      	cmp	r3, #0
 800f950:	dd90      	ble.n	800f874 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f956:	2b00      	cmp	r3, #0
 800f958:	d104      	bne.n	800f964 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f960:	861a      	strh	r2, [r3, #48]	; 0x30
 800f962:	e002      	b.n	800f96a <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2200      	movs	r2, #0
 800f968:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2200      	movs	r2, #0
 800f96e:	76da      	strb	r2, [r3, #27]
 800f970:	e002      	b.n	800f978 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f001 fd2e 	bl	80113d4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800f978:	e04f      	b.n	800fa1a <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f97e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d103      	bne.n	800f99a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fc fd27 	bl	800c3f8 <pbuf_clen>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	d206      	bcs.n	800f9be <tcp_receive+0x41a>
 800f9b0:	4b2a      	ldr	r3, [pc, #168]	; (800fa5c <tcp_receive+0x4b8>)
 800f9b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f9b6:	492a      	ldr	r1, [pc, #168]	; (800fa60 <tcp_receive+0x4bc>)
 800f9b8:	482a      	ldr	r0, [pc, #168]	; (800fa64 <tcp_receive+0x4c0>)
 800f9ba:	f005 f8ef 	bl	8014b9c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800f9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7fc fd18 	bl	800c3f8 <pbuf_clen>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f9d2:	1a9b      	subs	r3, r3, r2
 800f9d4:	b29a      	uxth	r2, r3
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800f9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9de:	891a      	ldrh	r2, [r3, #8]
 800f9e0:	4b21      	ldr	r3, [pc, #132]	; (800fa68 <tcp_receive+0x4c4>)
 800f9e2:	881b      	ldrh	r3, [r3, #0]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	4b1f      	ldr	r3, [pc, #124]	; (800fa68 <tcp_receive+0x4c4>)
 800f9ea:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800f9ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9ee:	f7fe f8a9 	bl	800db44 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00e      	beq.n	800fa1a <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d10a      	bne.n	800fa1a <tcp_receive+0x476>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d106      	bne.n	800fa1a <tcp_receive+0x476>
 800fa0c:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <tcp_receive+0x4b8>)
 800fa0e:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800fa12:	4916      	ldr	r1, [pc, #88]	; (800fa6c <tcp_receive+0x4c8>)
 800fa14:	4813      	ldr	r0, [pc, #76]	; (800fa64 <tcp_receive+0x4c0>)
 800fa16:	f005 f8c1 	bl	8014b9c <iprintf>
    while (pcb->unsent != NULL &&
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d036      	beq.n	800fa90 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fa22:	4b13      	ldr	r3, [pc, #76]	; (800fa70 <tcp_receive+0x4cc>)
 800fa24:	681c      	ldr	r4, [r3, #0]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa2a:	68db      	ldr	r3, [r3, #12]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fb f9f9 	bl	800ae26 <lwip_htonl>
 800fa34:	4605      	mov	r5, r0
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa3a:	891b      	ldrh	r3, [r3, #8]
 800fa3c:	461e      	mov	r6, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	899b      	ldrh	r3, [r3, #12]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fb f9df 	bl	800ae0c <lwip_htons>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	f003 0303 	and.w	r3, r3, #3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00d      	beq.n	800fa74 <tcp_receive+0x4d0>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	e00c      	b.n	800fa76 <tcp_receive+0x4d2>
 800fa5c:	080173b0 	.word	0x080173b0
 800fa60:	080175f0 	.word	0x080175f0
 800fa64:	080173f4 	.word	0x080173f4
 800fa68:	20004b10 	.word	0x20004b10
 800fa6c:	08017618 	.word	0x08017618
 800fa70:	20004b0c 	.word	0x20004b0c
 800fa74:	2300      	movs	r3, #0
 800fa76:	4433      	add	r3, r6
 800fa78:	442b      	add	r3, r5
 800fa7a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	db07      	blt.n	800fa90 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fa80:	4b8d      	ldr	r3, [pc, #564]	; (800fcb8 <tcp_receive+0x714>)
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa88:	1ad3      	subs	r3, r2, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f77f af75 	ble.w	800f97a <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa96:	4b89      	ldr	r3, [pc, #548]	; (800fcbc <tcp_receive+0x718>)
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	4413      	add	r3, r2
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d052      	beq.n	800fb52 <tcp_receive+0x5ae>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fab0:	4b81      	ldr	r3, [pc, #516]	; (800fcb8 <tcp_receive+0x714>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	1ad3      	subs	r3, r2, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	da4b      	bge.n	800fb52 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800faba:	4b81      	ldr	r3, [pc, #516]	; (800fcc0 <tcp_receive+0x71c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	b29b      	uxth	r3, r3
 800faca:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800facc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fad4:	10db      	asrs	r3, r3, #3
 800fad6:	b21b      	sxth	r3, r3
 800fad8:	b29b      	uxth	r3, r3
 800fada:	1ad3      	subs	r3, r2, r3
 800fadc:	b29b      	uxth	r3, r3
 800fade:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800faea:	4413      	add	r3, r2
 800faec:	b29b      	uxth	r3, r3
 800faee:	b21a      	sxth	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800faf4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	da03      	bge.n	800fb04 <tcp_receive+0x560>
        m = -m;
 800fafc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fafe:	425b      	negs	r3, r3
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800fb04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb0c:	109b      	asrs	r3, r3, #2
 800fb0e:	b21b      	sxth	r3, r3
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fb22:	4413      	add	r3, r2
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	b21a      	sxth	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb32:	10db      	asrs	r3, r3, #3
 800fb34:	b21b      	sxth	r3, r3
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	4413      	add	r3, r2
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	b21a      	sxth	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fb52:	4b5c      	ldr	r3, [pc, #368]	; (800fcc4 <tcp_receive+0x720>)
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	f000 84f1 	beq.w	801053e <tcp_receive+0xf9a>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7d1b      	ldrb	r3, [r3, #20]
 800fb60:	2b06      	cmp	r3, #6
 800fb62:	f200 84ec 	bhi.w	801053e <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb6a:	4b57      	ldr	r3, [pc, #348]	; (800fcc8 <tcp_receive+0x724>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	1ad3      	subs	r3, r2, r3
 800fb70:	3b01      	subs	r3, #1
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f2c0 80b8 	blt.w	800fce8 <tcp_receive+0x744>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb7c:	4b51      	ldr	r3, [pc, #324]	; (800fcc4 <tcp_receive+0x720>)
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	4619      	mov	r1, r3
 800fb82:	4b51      	ldr	r3, [pc, #324]	; (800fcc8 <tcp_receive+0x724>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	440b      	add	r3, r1
 800fb88:	1ad3      	subs	r3, r2, r3
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f300 80ab 	bgt.w	800fce8 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fb92:	4b4e      	ldr	r3, [pc, #312]	; (800fccc <tcp_receive+0x728>)
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb9c:	4b4a      	ldr	r3, [pc, #296]	; (800fcc8 <tcp_receive+0x724>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	1ad3      	subs	r3, r2, r3
 800fba2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fba4:	4b49      	ldr	r3, [pc, #292]	; (800fccc <tcp_receive+0x728>)
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d106      	bne.n	800fbba <tcp_receive+0x616>
 800fbac:	4b48      	ldr	r3, [pc, #288]	; (800fcd0 <tcp_receive+0x72c>)
 800fbae:	f240 523c 	movw	r2, #1340	; 0x53c
 800fbb2:	4948      	ldr	r1, [pc, #288]	; (800fcd4 <tcp_receive+0x730>)
 800fbb4:	4848      	ldr	r0, [pc, #288]	; (800fcd8 <tcp_receive+0x734>)
 800fbb6:	f004 fff1 	bl	8014b9c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	dd06      	ble.n	800fbd2 <tcp_receive+0x62e>
 800fbc4:	4b42      	ldr	r3, [pc, #264]	; (800fcd0 <tcp_receive+0x72c>)
 800fbc6:	f240 523d 	movw	r2, #1341	; 0x53d
 800fbca:	4944      	ldr	r1, [pc, #272]	; (800fcdc <tcp_receive+0x738>)
 800fbcc:	4842      	ldr	r0, [pc, #264]	; (800fcd8 <tcp_receive+0x734>)
 800fbce:	f004 ffe5 	bl	8014b9c <iprintf>
      if (inseg.p->len < off) {
 800fbd2:	4b3e      	ldr	r3, [pc, #248]	; (800fccc <tcp_receive+0x728>)
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	895b      	ldrh	r3, [r3, #10]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	dd3e      	ble.n	800fc5e <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fbe0:	4b3a      	ldr	r3, [pc, #232]	; (800fccc <tcp_receive+0x728>)
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	891b      	ldrh	r3, [r3, #8]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbea:	4293      	cmp	r3, r2
 800fbec:	dd06      	ble.n	800fbfc <tcp_receive+0x658>
 800fbee:	4b38      	ldr	r3, [pc, #224]	; (800fcd0 <tcp_receive+0x72c>)
 800fbf0:	f240 523f 	movw	r2, #1343	; 0x53f
 800fbf4:	493a      	ldr	r1, [pc, #232]	; (800fce0 <tcp_receive+0x73c>)
 800fbf6:	4838      	ldr	r0, [pc, #224]	; (800fcd8 <tcp_receive+0x734>)
 800fbf8:	f004 ffd0 	bl	8014b9c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fbfc:	4b33      	ldr	r3, [pc, #204]	; (800fccc <tcp_receive+0x728>)
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	891a      	ldrh	r2, [r3, #8]
 800fc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	1ad3      	subs	r3, r2, r3
 800fc08:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800fc0a:	e00e      	b.n	800fc2a <tcp_receive+0x686>
          off -= p->len;
 800fc0c:	69bb      	ldr	r3, [r7, #24]
 800fc0e:	895b      	ldrh	r3, [r3, #10]
 800fc10:	461a      	mov	r2, r3
 800fc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc14:	1a9b      	subs	r3, r3, r2
 800fc16:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	8a3a      	ldrh	r2, [r7, #16]
 800fc1c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	2200      	movs	r2, #0
 800fc22:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	895b      	ldrh	r3, [r3, #10]
 800fc2e:	461a      	mov	r2, r3
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	4293      	cmp	r3, r2
 800fc34:	dcea      	bgt.n	800fc0c <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800fc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	425b      	negs	r3, r3
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	b21b      	sxth	r3, r3
 800fc40:	4619      	mov	r1, r3
 800fc42:	69b8      	ldr	r0, [r7, #24]
 800fc44:	f7fc fb1a 	bl	800c27c <pbuf_header>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d01c      	beq.n	800fc88 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fc4e:	4b20      	ldr	r3, [pc, #128]	; (800fcd0 <tcp_receive+0x72c>)
 800fc50:	f240 524c 	movw	r2, #1356	; 0x54c
 800fc54:	4923      	ldr	r1, [pc, #140]	; (800fce4 <tcp_receive+0x740>)
 800fc56:	4820      	ldr	r0, [pc, #128]	; (800fcd8 <tcp_receive+0x734>)
 800fc58:	f004 ffa0 	bl	8014b9c <iprintf>
 800fc5c:	e014      	b.n	800fc88 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800fc5e:	4b1b      	ldr	r3, [pc, #108]	; (800fccc <tcp_receive+0x728>)
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc64:	b292      	uxth	r2, r2
 800fc66:	4252      	negs	r2, r2
 800fc68:	b292      	uxth	r2, r2
 800fc6a:	b212      	sxth	r2, r2
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fc fb04 	bl	800c27c <pbuf_header>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d006      	beq.n	800fc88 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fc7a:	4b15      	ldr	r3, [pc, #84]	; (800fcd0 <tcp_receive+0x72c>)
 800fc7c:	f240 5251 	movw	r2, #1361	; 0x551
 800fc80:	4918      	ldr	r1, [pc, #96]	; (800fce4 <tcp_receive+0x740>)
 800fc82:	4815      	ldr	r0, [pc, #84]	; (800fcd8 <tcp_receive+0x734>)
 800fc84:	f004 ff8a 	bl	8014b9c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800fc88:	4b10      	ldr	r3, [pc, #64]	; (800fccc <tcp_receive+0x728>)
 800fc8a:	891a      	ldrh	r2, [r3, #8]
 800fc8c:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <tcp_receive+0x724>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	b299      	uxth	r1, r3
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	1acb      	subs	r3, r1, r3
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	4413      	add	r3, r2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	4b0a      	ldr	r3, [pc, #40]	; (800fccc <tcp_receive+0x728>)
 800fca2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca8:	4a07      	ldr	r2, [pc, #28]	; (800fcc8 <tcp_receive+0x724>)
 800fcaa:	6013      	str	r3, [r2, #0]
 800fcac:	4b07      	ldr	r3, [pc, #28]	; (800fccc <tcp_receive+0x728>)
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	4a05      	ldr	r2, [pc, #20]	; (800fcc8 <tcp_receive+0x724>)
 800fcb2:	6812      	ldr	r2, [r2, #0]
 800fcb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fcb6:	e025      	b.n	800fd04 <tcp_receive+0x760>
 800fcb8:	20004b0c 	.word	0x20004b0c
 800fcbc:	20004b10 	.word	0x20004b10
 800fcc0:	2000bb68 	.word	0x2000bb68
 800fcc4:	20004b12 	.word	0x20004b12
 800fcc8:	20004b08 	.word	0x20004b08
 800fccc:	20004ae8 	.word	0x20004ae8
 800fcd0:	080173b0 	.word	0x080173b0
 800fcd4:	08017638 	.word	0x08017638
 800fcd8:	080173f4 	.word	0x080173f4
 800fcdc:	08017648 	.word	0x08017648
 800fce0:	08017658 	.word	0x08017658
 800fce4:	08017668 	.word	0x08017668
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fce8:	4b87      	ldr	r3, [pc, #540]	; (800ff08 <tcp_receive+0x964>)
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf0:	1ad3      	subs	r3, r2, r3
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	da06      	bge.n	800fd04 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	7e9b      	ldrb	r3, [r3, #26]
 800fcfa:	f043 0302 	orr.w	r3, r3, #2
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd04:	4b80      	ldr	r3, [pc, #512]	; (800ff08 <tcp_receive+0x964>)
 800fd06:	681a      	ldr	r2, [r3, #0]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0c:	1ad3      	subs	r3, r2, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f2c0 8410 	blt.w	8010534 <tcp_receive+0xf90>
 800fd14:	4b7c      	ldr	r3, [pc, #496]	; (800ff08 <tcp_receive+0x964>)
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd1c:	6879      	ldr	r1, [r7, #4]
 800fd1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd20:	440b      	add	r3, r1
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	3301      	adds	r3, #1
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f300 8404 	bgt.w	8010534 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd30:	4b75      	ldr	r3, [pc, #468]	; (800ff08 <tcp_receive+0x964>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	f040 8287 	bne.w	8010248 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fd3a:	4b74      	ldr	r3, [pc, #464]	; (800ff0c <tcp_receive+0x968>)
 800fd3c:	891c      	ldrh	r4, [r3, #8]
 800fd3e:	4b73      	ldr	r3, [pc, #460]	; (800ff0c <tcp_receive+0x968>)
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	899b      	ldrh	r3, [r3, #12]
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fb f860 	bl	800ae0c <lwip_htons>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	f003 0303 	and.w	r3, r3, #3
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d001      	beq.n	800fd5a <tcp_receive+0x7b6>
 800fd56:	2301      	movs	r3, #1
 800fd58:	e000      	b.n	800fd5c <tcp_receive+0x7b8>
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	4423      	add	r3, r4
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	4b6b      	ldr	r3, [pc, #428]	; (800ff10 <tcp_receive+0x96c>)
 800fd62:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd68:	4b69      	ldr	r3, [pc, #420]	; (800ff10 <tcp_receive+0x96c>)
 800fd6a:	881b      	ldrh	r3, [r3, #0]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d26e      	bcs.n	800fe4e <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd70:	4b66      	ldr	r3, [pc, #408]	; (800ff0c <tcp_receive+0x968>)
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	899b      	ldrh	r3, [r3, #12]
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fb f847 	bl	800ae0c <lwip_htons>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	f003 0301 	and.w	r3, r3, #1
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d01b      	beq.n	800fdc0 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fd88:	4b60      	ldr	r3, [pc, #384]	; (800ff0c <tcp_receive+0x968>)
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	899b      	ldrh	r3, [r3, #12]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fd94:	b29c      	uxth	r4, r3
 800fd96:	4b5d      	ldr	r3, [pc, #372]	; (800ff0c <tcp_receive+0x968>)
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	899b      	ldrh	r3, [r3, #12]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fb f834 	bl	800ae0c <lwip_htons>
 800fda4:	4603      	mov	r3, r0
 800fda6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fb f82d 	bl	800ae0c <lwip_htons>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	4b55      	ldr	r3, [pc, #340]	; (800ff0c <tcp_receive+0x968>)
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	4322      	orrs	r2, r4
 800fdbc:	b292      	uxth	r2, r2
 800fdbe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fdc4:	4b51      	ldr	r3, [pc, #324]	; (800ff0c <tcp_receive+0x968>)
 800fdc6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fdc8:	4b50      	ldr	r3, [pc, #320]	; (800ff0c <tcp_receive+0x968>)
 800fdca:	68db      	ldr	r3, [r3, #12]
 800fdcc:	899b      	ldrh	r3, [r3, #12]
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fb f81b 	bl	800ae0c <lwip_htons>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	f003 0302 	and.w	r3, r3, #2
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d005      	beq.n	800fdec <tcp_receive+0x848>
            inseg.len -= 1;
 800fde0:	4b4a      	ldr	r3, [pc, #296]	; (800ff0c <tcp_receive+0x968>)
 800fde2:	891b      	ldrh	r3, [r3, #8]
 800fde4:	3b01      	subs	r3, #1
 800fde6:	b29a      	uxth	r2, r3
 800fde8:	4b48      	ldr	r3, [pc, #288]	; (800ff0c <tcp_receive+0x968>)
 800fdea:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fdec:	4b47      	ldr	r3, [pc, #284]	; (800ff0c <tcp_receive+0x968>)
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	4a46      	ldr	r2, [pc, #280]	; (800ff0c <tcp_receive+0x968>)
 800fdf2:	8912      	ldrh	r2, [r2, #8]
 800fdf4:	4611      	mov	r1, r2
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fc f8f0 	bl	800bfdc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fdfc:	4b43      	ldr	r3, [pc, #268]	; (800ff0c <tcp_receive+0x968>)
 800fdfe:	891c      	ldrh	r4, [r3, #8]
 800fe00:	4b42      	ldr	r3, [pc, #264]	; (800ff0c <tcp_receive+0x968>)
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	899b      	ldrh	r3, [r3, #12]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fa ffff 	bl	800ae0c <lwip_htons>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	f003 0303 	and.w	r3, r3, #3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <tcp_receive+0x878>
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e000      	b.n	800fe1e <tcp_receive+0x87a>
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4423      	add	r3, r4
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	4b3b      	ldr	r3, [pc, #236]	; (800ff10 <tcp_receive+0x96c>)
 800fe24:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fe26:	4b3a      	ldr	r3, [pc, #232]	; (800ff10 <tcp_receive+0x96c>)
 800fe28:	881b      	ldrh	r3, [r3, #0]
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	4b36      	ldr	r3, [pc, #216]	; (800ff08 <tcp_receive+0x964>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	441a      	add	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe36:	6879      	ldr	r1, [r7, #4]
 800fe38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe3a:	440b      	add	r3, r1
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d006      	beq.n	800fe4e <tcp_receive+0x8aa>
 800fe40:	4b34      	ldr	r3, [pc, #208]	; (800ff14 <tcp_receive+0x970>)
 800fe42:	f240 527e 	movw	r2, #1406	; 0x57e
 800fe46:	4934      	ldr	r1, [pc, #208]	; (800ff18 <tcp_receive+0x974>)
 800fe48:	4834      	ldr	r0, [pc, #208]	; (800ff1c <tcp_receive+0x978>)
 800fe4a:	f004 fea7 	bl	8014b9c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	f000 80e1 	beq.w	801001a <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe58:	4b2c      	ldr	r3, [pc, #176]	; (800ff0c <tcp_receive+0x968>)
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	899b      	ldrh	r3, [r3, #12]
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fa ffd3 	bl	800ae0c <lwip_htons>
 800fe66:	4603      	mov	r3, r0
 800fe68:	f003 0301 	and.w	r3, r3, #1
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d010      	beq.n	800fe92 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fe70:	e00a      	b.n	800fe88 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe76:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800fe82:	68b8      	ldr	r0, [r7, #8]
 800fe84:	f7fd fe5e 	bl	800db44 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1f0      	bne.n	800fe72 <tcp_receive+0x8ce>
 800fe90:	e0c3      	b.n	801001a <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe96:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fe98:	e04f      	b.n	800ff3a <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fe9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9c:	68db      	ldr	r3, [r3, #12]
 800fe9e:	899b      	ldrh	r3, [r3, #12]
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fa ffb2 	bl	800ae0c <lwip_htons>
 800fea8:	4603      	mov	r3, r0
 800feaa:	f003 0301 	and.w	r3, r3, #1
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d03b      	beq.n	800ff2a <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800feb2:	4b16      	ldr	r3, [pc, #88]	; (800ff0c <tcp_receive+0x968>)
 800feb4:	68db      	ldr	r3, [r3, #12]
 800feb6:	899b      	ldrh	r3, [r3, #12]
 800feb8:	b29b      	uxth	r3, r3
 800feba:	4618      	mov	r0, r3
 800febc:	f7fa ffa6 	bl	800ae0c <lwip_htons>
 800fec0:	4603      	mov	r3, r0
 800fec2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d12f      	bne.n	800ff2a <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800feca:	4b10      	ldr	r3, [pc, #64]	; (800ff0c <tcp_receive+0x968>)
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	899b      	ldrh	r3, [r3, #12]
 800fed0:	b29c      	uxth	r4, r3
 800fed2:	2001      	movs	r0, #1
 800fed4:	f7fa ff9a 	bl	800ae0c <lwip_htons>
 800fed8:	4603      	mov	r3, r0
 800feda:	461a      	mov	r2, r3
 800fedc:	4b0b      	ldr	r3, [pc, #44]	; (800ff0c <tcp_receive+0x968>)
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	4322      	orrs	r2, r4
 800fee2:	b292      	uxth	r2, r2
 800fee4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fee6:	4b09      	ldr	r3, [pc, #36]	; (800ff0c <tcp_receive+0x968>)
 800fee8:	891c      	ldrh	r4, [r3, #8]
 800feea:	4b08      	ldr	r3, [pc, #32]	; (800ff0c <tcp_receive+0x968>)
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	899b      	ldrh	r3, [r3, #12]
 800fef0:	b29b      	uxth	r3, r3
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fa ff8a 	bl	800ae0c <lwip_htons>
 800fef8:	4603      	mov	r3, r0
 800fefa:	f003 0303 	and.w	r3, r3, #3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00e      	beq.n	800ff20 <tcp_receive+0x97c>
 800ff02:	2301      	movs	r3, #1
 800ff04:	e00d      	b.n	800ff22 <tcp_receive+0x97e>
 800ff06:	bf00      	nop
 800ff08:	20004b08 	.word	0x20004b08
 800ff0c:	20004ae8 	.word	0x20004ae8
 800ff10:	20004b12 	.word	0x20004b12
 800ff14:	080173b0 	.word	0x080173b0
 800ff18:	0801767c 	.word	0x0801767c
 800ff1c:	080173f4 	.word	0x080173f4
 800ff20:	2300      	movs	r3, #0
 800ff22:	4423      	add	r3, r4
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	4b95      	ldr	r3, [pc, #596]	; (801017c <tcp_receive+0xbd8>)
 800ff28:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800ff2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800ff34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff36:	f7fd fe05 	bl	800db44 <tcp_seg_free>
            while (next &&
 800ff3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d00e      	beq.n	800ff5e <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ff40:	4b8e      	ldr	r3, [pc, #568]	; (801017c <tcp_receive+0xbd8>)
 800ff42:	881b      	ldrh	r3, [r3, #0]
 800ff44:	461a      	mov	r2, r3
 800ff46:	4b8e      	ldr	r3, [pc, #568]	; (8010180 <tcp_receive+0xbdc>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	441a      	add	r2, r3
 800ff4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff54:	8909      	ldrh	r1, [r1, #8]
 800ff56:	440b      	add	r3, r1
 800ff58:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	da9d      	bge.n	800fe9a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ff5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d057      	beq.n	8010014 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800ff64:	4b85      	ldr	r3, [pc, #532]	; (801017c <tcp_receive+0xbd8>)
 800ff66:	881b      	ldrh	r3, [r3, #0]
 800ff68:	461a      	mov	r2, r3
 800ff6a:	4b85      	ldr	r3, [pc, #532]	; (8010180 <tcp_receive+0xbdc>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	441a      	add	r2, r3
 800ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	dd4b      	ble.n	8010014 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ff7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	b29a      	uxth	r2, r3
 800ff84:	4b7e      	ldr	r3, [pc, #504]	; (8010180 <tcp_receive+0xbdc>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	4b7d      	ldr	r3, [pc, #500]	; (8010184 <tcp_receive+0xbe0>)
 800ff90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ff92:	4b7c      	ldr	r3, [pc, #496]	; (8010184 <tcp_receive+0xbe0>)
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	899b      	ldrh	r3, [r3, #12]
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fa ff36 	bl	800ae0c <lwip_htons>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	f003 0302 	and.w	r3, r3, #2
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d005      	beq.n	800ffb6 <tcp_receive+0xa12>
                inseg.len -= 1;
 800ffaa:	4b76      	ldr	r3, [pc, #472]	; (8010184 <tcp_receive+0xbe0>)
 800ffac:	891b      	ldrh	r3, [r3, #8]
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	4b74      	ldr	r3, [pc, #464]	; (8010184 <tcp_receive+0xbe0>)
 800ffb4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ffb6:	4b73      	ldr	r3, [pc, #460]	; (8010184 <tcp_receive+0xbe0>)
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	4a72      	ldr	r2, [pc, #456]	; (8010184 <tcp_receive+0xbe0>)
 800ffbc:	8912      	ldrh	r2, [r2, #8]
 800ffbe:	4611      	mov	r1, r2
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fc f80b 	bl	800bfdc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ffc6:	4b6f      	ldr	r3, [pc, #444]	; (8010184 <tcp_receive+0xbe0>)
 800ffc8:	891c      	ldrh	r4, [r3, #8]
 800ffca:	4b6e      	ldr	r3, [pc, #440]	; (8010184 <tcp_receive+0xbe0>)
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	899b      	ldrh	r3, [r3, #12]
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fa ff1a 	bl	800ae0c <lwip_htons>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	f003 0303 	and.w	r3, r3, #3
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <tcp_receive+0xa42>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e000      	b.n	800ffe8 <tcp_receive+0xa44>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	4423      	add	r3, r4
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	4b63      	ldr	r3, [pc, #396]	; (801017c <tcp_receive+0xbd8>)
 800ffee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fff0:	4b62      	ldr	r3, [pc, #392]	; (801017c <tcp_receive+0xbd8>)
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	461a      	mov	r2, r3
 800fff6:	4b62      	ldr	r3, [pc, #392]	; (8010180 <tcp_receive+0xbdc>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	441a      	add	r2, r3
 800fffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	429a      	cmp	r2, r3
 8010004:	d006      	beq.n	8010014 <tcp_receive+0xa70>
 8010006:	4b60      	ldr	r3, [pc, #384]	; (8010188 <tcp_receive+0xbe4>)
 8010008:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801000c:	495f      	ldr	r1, [pc, #380]	; (801018c <tcp_receive+0xbe8>)
 801000e:	4860      	ldr	r0, [pc, #384]	; (8010190 <tcp_receive+0xbec>)
 8010010:	f004 fdc4 	bl	8014b9c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010018:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801001a:	4b58      	ldr	r3, [pc, #352]	; (801017c <tcp_receive+0xbd8>)
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	4b57      	ldr	r3, [pc, #348]	; (8010180 <tcp_receive+0xbdc>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	441a      	add	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801002e:	4b53      	ldr	r3, [pc, #332]	; (801017c <tcp_receive+0xbd8>)
 8010030:	881b      	ldrh	r3, [r3, #0]
 8010032:	429a      	cmp	r2, r3
 8010034:	d206      	bcs.n	8010044 <tcp_receive+0xaa0>
 8010036:	4b54      	ldr	r3, [pc, #336]	; (8010188 <tcp_receive+0xbe4>)
 8010038:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801003c:	4955      	ldr	r1, [pc, #340]	; (8010194 <tcp_receive+0xbf0>)
 801003e:	4854      	ldr	r0, [pc, #336]	; (8010190 <tcp_receive+0xbec>)
 8010040:	f004 fdac 	bl	8014b9c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010048:	4b4c      	ldr	r3, [pc, #304]	; (801017c <tcp_receive+0xbd8>)
 801004a:	881b      	ldrh	r3, [r3, #0]
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	b29a      	uxth	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7fc fff1 	bl	800d03c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801005a:	4b4a      	ldr	r3, [pc, #296]	; (8010184 <tcp_receive+0xbe0>)
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	891b      	ldrh	r3, [r3, #8]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d006      	beq.n	8010072 <tcp_receive+0xace>
          recv_data = inseg.p;
 8010064:	4b47      	ldr	r3, [pc, #284]	; (8010184 <tcp_receive+0xbe0>)
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	4a4b      	ldr	r2, [pc, #300]	; (8010198 <tcp_receive+0xbf4>)
 801006a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801006c:	4b45      	ldr	r3, [pc, #276]	; (8010184 <tcp_receive+0xbe0>)
 801006e:	2200      	movs	r2, #0
 8010070:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010072:	4b44      	ldr	r3, [pc, #272]	; (8010184 <tcp_receive+0xbe0>)
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	899b      	ldrh	r3, [r3, #12]
 8010078:	b29b      	uxth	r3, r3
 801007a:	4618      	mov	r0, r3
 801007c:	f7fa fec6 	bl	800ae0c <lwip_htons>
 8010080:	4603      	mov	r3, r0
 8010082:	f003 0301 	and.w	r3, r3, #1
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 80b4 	beq.w	80101f4 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801008c:	4b43      	ldr	r3, [pc, #268]	; (801019c <tcp_receive+0xbf8>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	f043 0320 	orr.w	r3, r3, #32
 8010094:	b2da      	uxtb	r2, r3
 8010096:	4b41      	ldr	r3, [pc, #260]	; (801019c <tcp_receive+0xbf8>)
 8010098:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801009a:	e0ab      	b.n	80101f4 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a0:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	4a35      	ldr	r2, [pc, #212]	; (8010180 <tcp_receive+0xbdc>)
 80100ac:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	891b      	ldrh	r3, [r3, #8]
 80100b2:	461c      	mov	r4, r3
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	899b      	ldrh	r3, [r3, #12]
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	4618      	mov	r0, r3
 80100be:	f7fa fea5 	bl	800ae0c <lwip_htons>
 80100c2:	4603      	mov	r3, r0
 80100c4:	f003 0303 	and.w	r3, r3, #3
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <tcp_receive+0xb2c>
 80100cc:	2301      	movs	r3, #1
 80100ce:	e000      	b.n	80100d2 <tcp_receive+0xb2e>
 80100d0:	2300      	movs	r3, #0
 80100d2:	191a      	adds	r2, r3, r4
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d8:	441a      	add	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100e2:	461c      	mov	r4, r3
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	891b      	ldrh	r3, [r3, #8]
 80100e8:	461d      	mov	r5, r3
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	899b      	ldrh	r3, [r3, #12]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fa fe8a 	bl	800ae0c <lwip_htons>
 80100f8:	4603      	mov	r3, r0
 80100fa:	f003 0303 	and.w	r3, r3, #3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d001      	beq.n	8010106 <tcp_receive+0xb62>
 8010102:	2301      	movs	r3, #1
 8010104:	e000      	b.n	8010108 <tcp_receive+0xb64>
 8010106:	2300      	movs	r3, #0
 8010108:	442b      	add	r3, r5
 801010a:	429c      	cmp	r4, r3
 801010c:	d206      	bcs.n	801011c <tcp_receive+0xb78>
 801010e:	4b1e      	ldr	r3, [pc, #120]	; (8010188 <tcp_receive+0xbe4>)
 8010110:	f240 52dd 	movw	r2, #1501	; 0x5dd
 8010114:	4922      	ldr	r1, [pc, #136]	; (80101a0 <tcp_receive+0xbfc>)
 8010116:	481e      	ldr	r0, [pc, #120]	; (8010190 <tcp_receive+0xbec>)
 8010118:	f004 fd40 	bl	8014b9c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	891b      	ldrh	r3, [r3, #8]
 8010120:	461c      	mov	r4, r3
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	68db      	ldr	r3, [r3, #12]
 8010126:	899b      	ldrh	r3, [r3, #12]
 8010128:	b29b      	uxth	r3, r3
 801012a:	4618      	mov	r0, r3
 801012c:	f7fa fe6e 	bl	800ae0c <lwip_htons>
 8010130:	4603      	mov	r3, r0
 8010132:	f003 0303 	and.w	r3, r3, #3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d001      	beq.n	801013e <tcp_receive+0xb9a>
 801013a:	2301      	movs	r3, #1
 801013c:	e000      	b.n	8010140 <tcp_receive+0xb9c>
 801013e:	2300      	movs	r3, #0
 8010140:	1919      	adds	r1, r3, r4
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010146:	b28b      	uxth	r3, r1
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	b29a      	uxth	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f7fc ff73 	bl	800d03c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	891b      	ldrh	r3, [r3, #8]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d028      	beq.n	80101b2 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010160:	4b0d      	ldr	r3, [pc, #52]	; (8010198 <tcp_receive+0xbf4>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d01d      	beq.n	80101a4 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8010168:	4b0b      	ldr	r3, [pc, #44]	; (8010198 <tcp_receive+0xbf4>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	4619      	mov	r1, r3
 8010172:	4610      	mov	r0, r2
 8010174:	f7fc f97e 	bl	800c474 <pbuf_cat>
 8010178:	e018      	b.n	80101ac <tcp_receive+0xc08>
 801017a:	bf00      	nop
 801017c:	20004b12 	.word	0x20004b12
 8010180:	20004b08 	.word	0x20004b08
 8010184:	20004ae8 	.word	0x20004ae8
 8010188:	080173b0 	.word	0x080173b0
 801018c:	080176b4 	.word	0x080176b4
 8010190:	080173f4 	.word	0x080173f4
 8010194:	080176f0 	.word	0x080176f0
 8010198:	20004b18 	.word	0x20004b18
 801019c:	20004b15 	.word	0x20004b15
 80101a0:	08017710 	.word	0x08017710
            } else {
              recv_data = cseg->p;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	4a71      	ldr	r2, [pc, #452]	; (8010370 <tcp_receive+0xdcc>)
 80101aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2200      	movs	r2, #0
 80101b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	68db      	ldr	r3, [r3, #12]
 80101b6:	899b      	ldrh	r3, [r3, #12]
 80101b8:	b29b      	uxth	r3, r3
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fa fe26 	bl	800ae0c <lwip_htons>
 80101c0:	4603      	mov	r3, r0
 80101c2:	f003 0301 	and.w	r3, r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00d      	beq.n	80101e6 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80101ca:	4b6a      	ldr	r3, [pc, #424]	; (8010374 <tcp_receive+0xdd0>)
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	f043 0320 	orr.w	r3, r3, #32
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	4b67      	ldr	r3, [pc, #412]	; (8010374 <tcp_receive+0xdd0>)
 80101d6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	7d1b      	ldrb	r3, [r3, #20]
 80101dc:	2b04      	cmp	r3, #4
 80101de:	d102      	bne.n	80101e6 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2207      	movs	r2, #7
 80101e4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681a      	ldr	r2, [r3, #0]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f7fd fca8 	bl	800db44 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d008      	beq.n	801020e <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010208:	429a      	cmp	r2, r3
 801020a:	f43f af47 	beq.w	801009c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	7e9b      	ldrb	r3, [r3, #26]
 8010212:	f003 0301 	and.w	r3, r3, #1
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00e      	beq.n	8010238 <tcp_receive+0xc94>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	7e9b      	ldrb	r3, [r3, #26]
 801021e:	f023 0301 	bic.w	r3, r3, #1
 8010222:	b2da      	uxtb	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	769a      	strb	r2, [r3, #26]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	7e9b      	ldrb	r3, [r3, #26]
 801022c:	f043 0302 	orr.w	r3, r3, #2
 8010230:	b2da      	uxtb	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010236:	e181      	b.n	801053c <tcp_receive+0xf98>
        tcp_ack(pcb);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	7e9b      	ldrb	r3, [r3, #26]
 801023c:	f043 0301 	orr.w	r3, r3, #1
 8010240:	b2da      	uxtb	r2, r3
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010246:	e179      	b.n	801053c <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f001 f8c3 	bl	80113d4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010256:	4848      	ldr	r0, [pc, #288]	; (8010378 <tcp_receive+0xdd4>)
 8010258:	f7fd fc9a 	bl	800db90 <tcp_seg_copy>
 801025c:	4602      	mov	r2, r0
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8010262:	e16b      	b.n	801053c <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8010264:	2300      	movs	r3, #0
 8010266:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801026c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801026e:	e150      	b.n	8010512 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8010270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010272:	68db      	ldr	r3, [r3, #12]
 8010274:	685a      	ldr	r2, [r3, #4]
 8010276:	4b41      	ldr	r3, [pc, #260]	; (801037c <tcp_receive+0xdd8>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	429a      	cmp	r2, r3
 801027c:	d11d      	bne.n	80102ba <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801027e:	4b3e      	ldr	r3, [pc, #248]	; (8010378 <tcp_receive+0xdd4>)
 8010280:	891a      	ldrh	r2, [r3, #8]
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	891b      	ldrh	r3, [r3, #8]
 8010286:	429a      	cmp	r2, r3
 8010288:	f240 8148 	bls.w	801051c <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801028c:	483a      	ldr	r0, [pc, #232]	; (8010378 <tcp_receive+0xdd4>)
 801028e:	f7fd fc7f 	bl	800db90 <tcp_seg_copy>
 8010292:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	f000 8142 	beq.w	8010520 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 801029c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d003      	beq.n	80102aa <tcp_receive+0xd06>
                    prev->next = cseg;
 80102a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	601a      	str	r2, [r3, #0]
 80102a8:	e002      	b.n	80102b0 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80102b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f7ff f900 	bl	800f4b8 <tcp_oos_insert_segment>
                }
                break;
 80102b8:	e132      	b.n	8010520 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80102ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d117      	bne.n	80102f0 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80102c0:	4b2e      	ldr	r3, [pc, #184]	; (801037c <tcp_receive+0xdd8>)
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	da57      	bge.n	8010380 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80102d0:	4829      	ldr	r0, [pc, #164]	; (8010378 <tcp_receive+0xdd4>)
 80102d2:	f7fd fc5d 	bl	800db90 <tcp_seg_copy>
 80102d6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f000 8122 	beq.w	8010524 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	68fa      	ldr	r2, [r7, #12]
 80102e4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80102e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	f7ff f8e5 	bl	800f4b8 <tcp_oos_insert_segment>
                  }
                  break;
 80102ee:	e119      	b.n	8010524 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80102f0:	4b22      	ldr	r3, [pc, #136]	; (801037c <tcp_receive+0xdd8>)
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	1ad3      	subs	r3, r2, r3
 80102fc:	3b01      	subs	r3, #1
 80102fe:	2b00      	cmp	r3, #0
 8010300:	db3e      	blt.n	8010380 <tcp_receive+0xddc>
 8010302:	4b1e      	ldr	r3, [pc, #120]	; (801037c <tcp_receive+0xdd8>)
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	1ad3      	subs	r3, r2, r3
 801030e:	3301      	adds	r3, #1
 8010310:	2b00      	cmp	r3, #0
 8010312:	dc35      	bgt.n	8010380 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8010314:	4818      	ldr	r0, [pc, #96]	; (8010378 <tcp_receive+0xdd4>)
 8010316:	f7fd fc3b 	bl	800db90 <tcp_seg_copy>
 801031a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b00      	cmp	r3, #0
 8010320:	f000 8102 	beq.w	8010528 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801032c:	8912      	ldrh	r2, [r2, #8]
 801032e:	441a      	add	r2, r3
 8010330:	4b12      	ldr	r3, [pc, #72]	; (801037c <tcp_receive+0xdd8>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	1ad3      	subs	r3, r2, r3
 8010336:	2b00      	cmp	r3, #0
 8010338:	dd12      	ble.n	8010360 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801033a:	4b10      	ldr	r3, [pc, #64]	; (801037c <tcp_receive+0xdd8>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	b29a      	uxth	r2, r3
 8010340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	b29b      	uxth	r3, r3
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	b29a      	uxth	r2, r3
 801034c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801034e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010352:	685a      	ldr	r2, [r3, #4]
 8010354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010356:	891b      	ldrh	r3, [r3, #8]
 8010358:	4619      	mov	r1, r3
 801035a:	4610      	mov	r0, r2
 801035c:	f7fb fe3e 	bl	800bfdc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010368:	68f8      	ldr	r0, [r7, #12]
 801036a:	f7ff f8a5 	bl	800f4b8 <tcp_oos_insert_segment>
                  }
                  break;
 801036e:	e0db      	b.n	8010528 <tcp_receive+0xf84>
 8010370:	20004b18 	.word	0x20004b18
 8010374:	20004b15 	.word	0x20004b15
 8010378:	20004ae8 	.word	0x20004ae8
 801037c:	20004b08 	.word	0x20004b08
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	f040 80bf 	bne.w	8010508 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801038a:	4b7c      	ldr	r3, [pc, #496]	; (801057c <tcp_receive+0xfd8>)
 801038c:	681a      	ldr	r2, [r3, #0]
 801038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010396:	2b00      	cmp	r3, #0
 8010398:	f340 80b6 	ble.w	8010508 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801039c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	899b      	ldrh	r3, [r3, #12]
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fa fd31 	bl	800ae0c <lwip_htons>
 80103aa:	4603      	mov	r3, r0
 80103ac:	f003 0301 	and.w	r3, r3, #1
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	f040 80bb 	bne.w	801052c <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80103b6:	4872      	ldr	r0, [pc, #456]	; (8010580 <tcp_receive+0xfdc>)
 80103b8:	f7fd fbea 	bl	800db90 <tcp_seg_copy>
 80103bc:	4602      	mov	r2, r0
 80103be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80103c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f000 80b2 	beq.w	8010530 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103d4:	8912      	ldrh	r2, [r2, #8]
 80103d6:	441a      	add	r2, r3
 80103d8:	4b68      	ldr	r3, [pc, #416]	; (801057c <tcp_receive+0xfd8>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	2b00      	cmp	r3, #0
 80103e0:	dd12      	ble.n	8010408 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80103e2:	4b66      	ldr	r3, [pc, #408]	; (801057c <tcp_receive+0xfd8>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	1ad3      	subs	r3, r2, r3
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80103f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fa:	685a      	ldr	r2, [r3, #4]
 80103fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fe:	891b      	ldrh	r3, [r3, #8]
 8010400:	4619      	mov	r1, r3
 8010402:	4610      	mov	r0, r2
 8010404:	f7fb fdea 	bl	800bfdc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010408:	4b5e      	ldr	r3, [pc, #376]	; (8010584 <tcp_receive+0xfe0>)
 801040a:	881b      	ldrh	r3, [r3, #0]
 801040c:	461a      	mov	r2, r3
 801040e:	4b5b      	ldr	r3, [pc, #364]	; (801057c <tcp_receive+0xfd8>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	441a      	add	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010418:	6879      	ldr	r1, [r7, #4]
 801041a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801041c:	440b      	add	r3, r1
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	2b00      	cmp	r3, #0
 8010422:	f340 8085 	ble.w	8010530 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	899b      	ldrh	r3, [r3, #12]
 801042e:	b29b      	uxth	r3, r3
 8010430:	4618      	mov	r0, r3
 8010432:	f7fa fceb 	bl	800ae0c <lwip_htons>
 8010436:	4603      	mov	r3, r0
 8010438:	f003 0301 	and.w	r3, r3, #1
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01e      	beq.n	801047e <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	899b      	ldrh	r3, [r3, #12]
 8010448:	b29b      	uxth	r3, r3
 801044a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801044e:	b29c      	uxth	r4, r3
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	899b      	ldrh	r3, [r3, #12]
 8010458:	b29b      	uxth	r3, r3
 801045a:	4618      	mov	r0, r3
 801045c:	f7fa fcd6 	bl	800ae0c <lwip_htons>
 8010460:	4603      	mov	r3, r0
 8010462:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010466:	b29b      	uxth	r3, r3
 8010468:	4618      	mov	r0, r3
 801046a:	f7fa fccf 	bl	800ae0c <lwip_htons>
 801046e:	4603      	mov	r3, r0
 8010470:	461a      	mov	r2, r3
 8010472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	4322      	orrs	r2, r4
 801047a:	b292      	uxth	r2, r2
 801047c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010482:	b29a      	uxth	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010488:	4413      	add	r3, r2
 801048a:	b299      	uxth	r1, r3
 801048c:	4b3b      	ldr	r3, [pc, #236]	; (801057c <tcp_receive+0xfd8>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	b29a      	uxth	r2, r3
 8010492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	1a8a      	subs	r2, r1, r2
 8010498:	b292      	uxth	r2, r2
 801049a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	685a      	ldr	r2, [r3, #4]
 80104a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	891b      	ldrh	r3, [r3, #8]
 80104a8:	4619      	mov	r1, r3
 80104aa:	4610      	mov	r0, r2
 80104ac:	f7fb fd96 	bl	800bfdc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	891c      	ldrh	r4, [r3, #8]
 80104b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	899b      	ldrh	r3, [r3, #12]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fa fca3 	bl	800ae0c <lwip_htons>
 80104c6:	4603      	mov	r3, r0
 80104c8:	f003 0303 	and.w	r3, r3, #3
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d001      	beq.n	80104d4 <tcp_receive+0xf30>
 80104d0:	2301      	movs	r3, #1
 80104d2:	e000      	b.n	80104d6 <tcp_receive+0xf32>
 80104d4:	2300      	movs	r3, #0
 80104d6:	4423      	add	r3, r4
 80104d8:	b29a      	uxth	r2, r3
 80104da:	4b2a      	ldr	r3, [pc, #168]	; (8010584 <tcp_receive+0xfe0>)
 80104dc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80104de:	4b29      	ldr	r3, [pc, #164]	; (8010584 <tcp_receive+0xfe0>)
 80104e0:	881b      	ldrh	r3, [r3, #0]
 80104e2:	461a      	mov	r2, r3
 80104e4:	4b25      	ldr	r3, [pc, #148]	; (801057c <tcp_receive+0xfd8>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	441a      	add	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ee:	6879      	ldr	r1, [r7, #4]
 80104f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104f2:	440b      	add	r3, r1
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d01b      	beq.n	8010530 <tcp_receive+0xf8c>
 80104f8:	4b23      	ldr	r3, [pc, #140]	; (8010588 <tcp_receive+0xfe4>)
 80104fa:	f240 627a 	movw	r2, #1658	; 0x67a
 80104fe:	4923      	ldr	r1, [pc, #140]	; (801058c <tcp_receive+0xfe8>)
 8010500:	4823      	ldr	r0, [pc, #140]	; (8010590 <tcp_receive+0xfec>)
 8010502:	f004 fb4b 	bl	8014b9c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010506:	e013      	b.n	8010530 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8010508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	2b00      	cmp	r3, #0
 8010516:	f47f aeab 	bne.w	8010270 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 801051a:	e00f      	b.n	801053c <tcp_receive+0xf98>
                break;
 801051c:	bf00      	nop
 801051e:	e00d      	b.n	801053c <tcp_receive+0xf98>
                break;
 8010520:	bf00      	nop
 8010522:	e00b      	b.n	801053c <tcp_receive+0xf98>
                  break;
 8010524:	bf00      	nop
 8010526:	e009      	b.n	801053c <tcp_receive+0xf98>
                  break;
 8010528:	bf00      	nop
 801052a:	e007      	b.n	801053c <tcp_receive+0xf98>
                  break;
 801052c:	bf00      	nop
 801052e:	e005      	b.n	801053c <tcp_receive+0xf98>
                break;
 8010530:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8010532:	e003      	b.n	801053c <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 ff4d 	bl	80113d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801053a:	e01a      	b.n	8010572 <tcp_receive+0xfce>
 801053c:	e019      	b.n	8010572 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801053e:	4b0f      	ldr	r3, [pc, #60]	; (801057c <tcp_receive+0xfd8>)
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010546:	1ad3      	subs	r3, r2, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	db0a      	blt.n	8010562 <tcp_receive+0xfbe>
 801054c:	4b0b      	ldr	r3, [pc, #44]	; (801057c <tcp_receive+0xfd8>)
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010554:	6879      	ldr	r1, [r7, #4]
 8010556:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010558:	440b      	add	r3, r1
 801055a:	1ad3      	subs	r3, r2, r3
 801055c:	3301      	adds	r3, #1
 801055e:	2b00      	cmp	r3, #0
 8010560:	dd07      	ble.n	8010572 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	7e9b      	ldrb	r3, [r3, #26]
 8010566:	f043 0302 	orr.w	r3, r3, #2
 801056a:	b2da      	uxtb	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8010570:	e7ff      	b.n	8010572 <tcp_receive+0xfce>
 8010572:	bf00      	nop
 8010574:	3734      	adds	r7, #52	; 0x34
 8010576:	46bd      	mov	sp, r7
 8010578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801057a:	bf00      	nop
 801057c:	20004b08 	.word	0x20004b08
 8010580:	20004ae8 	.word	0x20004ae8
 8010584:	20004b12 	.word	0x20004b12
 8010588:	080173b0 	.word	0x080173b0
 801058c:	0801767c 	.word	0x0801767c
 8010590:	080173f4 	.word	0x080173f4

08010594 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801059a:	4b17      	ldr	r3, [pc, #92]	; (80105f8 <tcp_getoptbyte+0x64>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d005      	beq.n	80105ae <tcp_getoptbyte+0x1a>
 80105a2:	4b16      	ldr	r3, [pc, #88]	; (80105fc <tcp_getoptbyte+0x68>)
 80105a4:	881a      	ldrh	r2, [r3, #0]
 80105a6:	4b16      	ldr	r3, [pc, #88]	; (8010600 <tcp_getoptbyte+0x6c>)
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d20e      	bcs.n	80105cc <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80105ae:	4b15      	ldr	r3, [pc, #84]	; (8010604 <tcp_getoptbyte+0x70>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	3314      	adds	r3, #20
 80105b4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80105b6:	4b11      	ldr	r3, [pc, #68]	; (80105fc <tcp_getoptbyte+0x68>)
 80105b8:	881b      	ldrh	r3, [r3, #0]
 80105ba:	1c5a      	adds	r2, r3, #1
 80105bc:	b291      	uxth	r1, r2
 80105be:	4a0f      	ldr	r2, [pc, #60]	; (80105fc <tcp_getoptbyte+0x68>)
 80105c0:	8011      	strh	r1, [r2, #0]
 80105c2:	461a      	mov	r2, r3
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	4413      	add	r3, r2
 80105c8:	781b      	ldrb	r3, [r3, #0]
 80105ca:	e010      	b.n	80105ee <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80105cc:	4b0b      	ldr	r3, [pc, #44]	; (80105fc <tcp_getoptbyte+0x68>)
 80105ce:	881b      	ldrh	r3, [r3, #0]
 80105d0:	1c5a      	adds	r2, r3, #1
 80105d2:	b291      	uxth	r1, r2
 80105d4:	4a09      	ldr	r2, [pc, #36]	; (80105fc <tcp_getoptbyte+0x68>)
 80105d6:	8011      	strh	r1, [r2, #0]
 80105d8:	b2da      	uxtb	r2, r3
 80105da:	4b09      	ldr	r3, [pc, #36]	; (8010600 <tcp_getoptbyte+0x6c>)
 80105dc:	881b      	ldrh	r3, [r3, #0]
 80105de:	b2db      	uxtb	r3, r3
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80105e4:	4b04      	ldr	r3, [pc, #16]	; (80105f8 <tcp_getoptbyte+0x64>)
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	4413      	add	r3, r2
 80105ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	370c      	adds	r7, #12
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bc80      	pop	{r7}
 80105f6:	4770      	bx	lr
 80105f8:	20004b00 	.word	0x20004b00
 80105fc:	20004b04 	.word	0x20004b04
 8010600:	20004afe 	.word	0x20004afe
 8010604:	20004af8 	.word	0x20004af8

08010608 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b084      	sub	sp, #16
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010610:	4b2e      	ldr	r3, [pc, #184]	; (80106cc <tcp_parseopt+0xc4>)
 8010612:	881b      	ldrh	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d055      	beq.n	80106c4 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010618:	4b2d      	ldr	r3, [pc, #180]	; (80106d0 <tcp_parseopt+0xc8>)
 801061a:	2200      	movs	r2, #0
 801061c:	801a      	strh	r2, [r3, #0]
 801061e:	e045      	b.n	80106ac <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 8010620:	f7ff ffb8 	bl	8010594 <tcp_getoptbyte>
 8010624:	4603      	mov	r3, r0
 8010626:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010628:	7bfb      	ldrb	r3, [r7, #15]
 801062a:	2b02      	cmp	r3, #2
 801062c:	d006      	beq.n	801063c <tcp_parseopt+0x34>
 801062e:	2b02      	cmp	r3, #2
 8010630:	dc2b      	bgt.n	801068a <tcp_parseopt+0x82>
 8010632:	2b00      	cmp	r3, #0
 8010634:	d041      	beq.n	80106ba <tcp_parseopt+0xb2>
 8010636:	2b01      	cmp	r3, #1
 8010638:	d127      	bne.n	801068a <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 801063a:	e037      	b.n	80106ac <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801063c:	f7ff ffaa 	bl	8010594 <tcp_getoptbyte>
 8010640:	4603      	mov	r3, r0
 8010642:	2b04      	cmp	r3, #4
 8010644:	d13b      	bne.n	80106be <tcp_parseopt+0xb6>
 8010646:	4b22      	ldr	r3, [pc, #136]	; (80106d0 <tcp_parseopt+0xc8>)
 8010648:	881b      	ldrh	r3, [r3, #0]
 801064a:	3301      	adds	r3, #1
 801064c:	4a1f      	ldr	r2, [pc, #124]	; (80106cc <tcp_parseopt+0xc4>)
 801064e:	8812      	ldrh	r2, [r2, #0]
 8010650:	4293      	cmp	r3, r2
 8010652:	da34      	bge.n	80106be <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010654:	f7ff ff9e 	bl	8010594 <tcp_getoptbyte>
 8010658:	4603      	mov	r3, r0
 801065a:	b29b      	uxth	r3, r3
 801065c:	021b      	lsls	r3, r3, #8
 801065e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8010660:	f7ff ff98 	bl	8010594 <tcp_getoptbyte>
 8010664:	4603      	mov	r3, r0
 8010666:	b29a      	uxth	r2, r3
 8010668:	89bb      	ldrh	r3, [r7, #12]
 801066a:	4313      	orrs	r3, r2
 801066c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801066e:	89bb      	ldrh	r3, [r7, #12]
 8010670:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010674:	d804      	bhi.n	8010680 <tcp_parseopt+0x78>
 8010676:	89bb      	ldrh	r3, [r7, #12]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d001      	beq.n	8010680 <tcp_parseopt+0x78>
 801067c:	89ba      	ldrh	r2, [r7, #12]
 801067e:	e001      	b.n	8010684 <tcp_parseopt+0x7c>
 8010680:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010688:	e010      	b.n	80106ac <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801068a:	f7ff ff83 	bl	8010594 <tcp_getoptbyte>
 801068e:	4603      	mov	r3, r0
 8010690:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8010692:	7afb      	ldrb	r3, [r7, #11]
 8010694:	2b01      	cmp	r3, #1
 8010696:	d914      	bls.n	80106c2 <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010698:	7afb      	ldrb	r3, [r7, #11]
 801069a:	b29a      	uxth	r2, r3
 801069c:	4b0c      	ldr	r3, [pc, #48]	; (80106d0 <tcp_parseopt+0xc8>)
 801069e:	881b      	ldrh	r3, [r3, #0]
 80106a0:	4413      	add	r3, r2
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	3b02      	subs	r3, #2
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	4b09      	ldr	r3, [pc, #36]	; (80106d0 <tcp_parseopt+0xc8>)
 80106aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80106ac:	4b08      	ldr	r3, [pc, #32]	; (80106d0 <tcp_parseopt+0xc8>)
 80106ae:	881a      	ldrh	r2, [r3, #0]
 80106b0:	4b06      	ldr	r3, [pc, #24]	; (80106cc <tcp_parseopt+0xc4>)
 80106b2:	881b      	ldrh	r3, [r3, #0]
 80106b4:	429a      	cmp	r2, r3
 80106b6:	d3b3      	bcc.n	8010620 <tcp_parseopt+0x18>
 80106b8:	e004      	b.n	80106c4 <tcp_parseopt+0xbc>
        return;
 80106ba:	bf00      	nop
 80106bc:	e002      	b.n	80106c4 <tcp_parseopt+0xbc>
          return;
 80106be:	bf00      	nop
 80106c0:	e000      	b.n	80106c4 <tcp_parseopt+0xbc>
          return;
 80106c2:	bf00      	nop
      }
    }
  }
}
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	20004afc 	.word	0x20004afc
 80106d0:	20004b04 	.word	0x20004b04

080106d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80106d4:	b480      	push	{r7}
 80106d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80106d8:	4b05      	ldr	r3, [pc, #20]	; (80106f0 <tcp_trigger_input_pcb_close+0x1c>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	f043 0310 	orr.w	r3, r3, #16
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	4b03      	ldr	r3, [pc, #12]	; (80106f0 <tcp_trigger_input_pcb_close+0x1c>)
 80106e4:	701a      	strb	r2, [r3, #0]
}
 80106e6:	bf00      	nop
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bc80      	pop	{r7}
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	20004b15 	.word	0x20004b15

080106f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b086      	sub	sp, #24
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	607b      	str	r3, [r7, #4]
 80106fe:	460b      	mov	r3, r1
 8010700:	817b      	strh	r3, [r7, #10]
 8010702:	4613      	mov	r3, r2
 8010704:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010706:	897a      	ldrh	r2, [r7, #10]
 8010708:	893b      	ldrh	r3, [r7, #8]
 801070a:	4413      	add	r3, r2
 801070c:	b29b      	uxth	r3, r3
 801070e:	3314      	adds	r3, #20
 8010710:	b29b      	uxth	r3, r3
 8010712:	2200      	movs	r2, #0
 8010714:	4619      	mov	r1, r3
 8010716:	2001      	movs	r0, #1
 8010718:	f7fb fa62 	bl	800bbe0 <pbuf_alloc>
 801071c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d056      	beq.n	80107d2 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010724:	897b      	ldrh	r3, [r7, #10]
 8010726:	3313      	adds	r3, #19
 8010728:	697a      	ldr	r2, [r7, #20]
 801072a:	8952      	ldrh	r2, [r2, #10]
 801072c:	4293      	cmp	r3, r2
 801072e:	db05      	blt.n	801073c <tcp_output_alloc_header+0x48>
 8010730:	4b2a      	ldr	r3, [pc, #168]	; (80107dc <tcp_output_alloc_header+0xe8>)
 8010732:	2272      	movs	r2, #114	; 0x72
 8010734:	492a      	ldr	r1, [pc, #168]	; (80107e0 <tcp_output_alloc_header+0xec>)
 8010736:	482b      	ldr	r0, [pc, #172]	; (80107e4 <tcp_output_alloc_header+0xf0>)
 8010738:	f004 fa30 	bl	8014b9c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	8adb      	ldrh	r3, [r3, #22]
 8010746:	4618      	mov	r0, r3
 8010748:	f7fa fb60 	bl	800ae0c <lwip_htons>
 801074c:	4603      	mov	r3, r0
 801074e:	461a      	mov	r2, r3
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	8b1b      	ldrh	r3, [r3, #24]
 8010758:	4618      	mov	r0, r3
 801075a:	f7fa fb57 	bl	800ae0c <lwip_htons>
 801075e:	4603      	mov	r3, r0
 8010760:	461a      	mov	r2, r3
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	687a      	ldr	r2, [r7, #4]
 801076a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010770:	4618      	mov	r0, r3
 8010772:	f7fa fb58 	bl	800ae26 <lwip_htonl>
 8010776:	4602      	mov	r2, r0
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 801077c:	897b      	ldrh	r3, [r7, #10]
 801077e:	089b      	lsrs	r3, r3, #2
 8010780:	b29b      	uxth	r3, r3
 8010782:	3305      	adds	r3, #5
 8010784:	b29b      	uxth	r3, r3
 8010786:	031b      	lsls	r3, r3, #12
 8010788:	b29b      	uxth	r3, r3
 801078a:	f043 0310 	orr.w	r3, r3, #16
 801078e:	b29b      	uxth	r3, r3
 8010790:	4618      	mov	r0, r3
 8010792:	f7fa fb3b 	bl	800ae0c <lwip_htons>
 8010796:	4603      	mov	r3, r0
 8010798:	461a      	mov	r2, r3
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fa fb32 	bl	800ae0c <lwip_htons>
 80107a8:	4603      	mov	r3, r0
 80107aa:	461a      	mov	r2, r3
 80107ac:	693b      	ldr	r3, [r7, #16]
 80107ae:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	2200      	movs	r2, #0
 80107b4:	741a      	strb	r2, [r3, #16]
 80107b6:	2200      	movs	r2, #0
 80107b8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	2200      	movs	r2, #0
 80107be:	749a      	strb	r2, [r3, #18]
 80107c0:	2200      	movs	r2, #0
 80107c2:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c8:	68fa      	ldr	r2, [r7, #12]
 80107ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80107cc:	441a      	add	r2, r3
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80107d2:	697b      	ldr	r3, [r7, #20]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3718      	adds	r7, #24
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	08017738 	.word	0x08017738
 80107e0:	0801776c 	.word	0x0801776c
 80107e4:	0801779c 	.word	0x0801779c

080107e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80107e8:	b590      	push	{r4, r7, lr}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d02d      	beq.n	8010854 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107fc:	60fb      	str	r3, [r7, #12]
 80107fe:	e002      	b.n	8010806 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1f8      	bne.n	8010800 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	899b      	ldrh	r3, [r3, #12]
 8010814:	b29b      	uxth	r3, r3
 8010816:	4618      	mov	r0, r3
 8010818:	f7fa faf8 	bl	800ae0c <lwip_htons>
 801081c:	4603      	mov	r3, r0
 801081e:	f003 0307 	and.w	r3, r3, #7
 8010822:	2b00      	cmp	r3, #0
 8010824:	d116      	bne.n	8010854 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	68db      	ldr	r3, [r3, #12]
 801082a:	899b      	ldrh	r3, [r3, #12]
 801082c:	b29c      	uxth	r4, r3
 801082e:	2001      	movs	r0, #1
 8010830:	f7fa faec 	bl	800ae0c <lwip_htons>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	4322      	orrs	r2, r4
 801083e:	b292      	uxth	r2, r2
 8010840:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	7e9b      	ldrb	r3, [r3, #26]
 8010846:	f043 0320 	orr.w	r3, r3, #32
 801084a:	b2da      	uxtb	r2, r3
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010850:	2300      	movs	r3, #0
 8010852:	e004      	b.n	801085e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010854:	2101      	movs	r1, #1
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 fcc0 	bl	80111dc <tcp_enqueue_flags>
 801085c:	4603      	mov	r3, r0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3714      	adds	r7, #20
 8010862:	46bd      	mov	sp, r7
 8010864:	bd90      	pop	{r4, r7, pc}
	...

08010868 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010868:	b590      	push	{r4, r7, lr}
 801086a:	b087      	sub	sp, #28
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	60b9      	str	r1, [r7, #8]
 8010872:	603b      	str	r3, [r7, #0]
 8010874:	4613      	mov	r3, r2
 8010876:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	b2db      	uxtb	r3, r3
 8010880:	f003 0304 	and.w	r3, r3, #4
 8010884:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010886:	2003      	movs	r0, #3
 8010888:	f7fa ff16 	bl	800b6b8 <memp_malloc>
 801088c:	6138      	str	r0, [r7, #16]
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d104      	bne.n	801089e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010894:	68b8      	ldr	r0, [r7, #8]
 8010896:	f7fb fd15 	bl	800c2c4 <pbuf_free>
    return NULL;
 801089a:	2300      	movs	r3, #0
 801089c:	e061      	b.n	8010962 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80108a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	2200      	movs	r2, #0
 80108aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80108ac:	693b      	ldr	r3, [r7, #16]
 80108ae:	68ba      	ldr	r2, [r7, #8]
 80108b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	891a      	ldrh	r2, [r3, #8]
 80108b6:	7dfb      	ldrb	r3, [r7, #23]
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d205      	bcs.n	80108ca <tcp_create_segment+0x62>
 80108be:	4b2b      	ldr	r3, [pc, #172]	; (801096c <tcp_create_segment+0x104>)
 80108c0:	22ba      	movs	r2, #186	; 0xba
 80108c2:	492b      	ldr	r1, [pc, #172]	; (8010970 <tcp_create_segment+0x108>)
 80108c4:	482b      	ldr	r0, [pc, #172]	; (8010974 <tcp_create_segment+0x10c>)
 80108c6:	f004 f969 	bl	8014b9c <iprintf>
  seg->len = p->tot_len - optlen;
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	891a      	ldrh	r2, [r3, #8]
 80108ce:	7dfb      	ldrb	r3, [r7, #23]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	b29a      	uxth	r2, r3
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80108da:	2114      	movs	r1, #20
 80108dc:	68b8      	ldr	r0, [r7, #8]
 80108de:	f7fb fccd 	bl	800c27c <pbuf_header>
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d004      	beq.n	80108f2 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80108e8:	6938      	ldr	r0, [r7, #16]
 80108ea:	f7fd f92b 	bl	800db44 <tcp_seg_free>
    return NULL;
 80108ee:	2300      	movs	r3, #0
 80108f0:	e037      	b.n	8010962 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	8ada      	ldrh	r2, [r3, #22]
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	68dc      	ldr	r4, [r3, #12]
 8010904:	4610      	mov	r0, r2
 8010906:	f7fa fa81 	bl	800ae0c <lwip_htons>
 801090a:	4603      	mov	r3, r0
 801090c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	8b1a      	ldrh	r2, [r3, #24]
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	68dc      	ldr	r4, [r3, #12]
 8010916:	4610      	mov	r0, r2
 8010918:	f7fa fa78 	bl	800ae0c <lwip_htons>
 801091c:	4603      	mov	r3, r0
 801091e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	68dc      	ldr	r4, [r3, #12]
 8010924:	6838      	ldr	r0, [r7, #0]
 8010926:	f7fa fa7e 	bl	800ae26 <lwip_htonl>
 801092a:	4603      	mov	r3, r0
 801092c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801092e:	7dfb      	ldrb	r3, [r7, #23]
 8010930:	089b      	lsrs	r3, r3, #2
 8010932:	b2db      	uxtb	r3, r3
 8010934:	b29b      	uxth	r3, r3
 8010936:	3305      	adds	r3, #5
 8010938:	b29b      	uxth	r3, r3
 801093a:	031b      	lsls	r3, r3, #12
 801093c:	b29a      	uxth	r2, r3
 801093e:	79fb      	ldrb	r3, [r7, #7]
 8010940:	b29b      	uxth	r3, r3
 8010942:	4313      	orrs	r3, r2
 8010944:	b29a      	uxth	r2, r3
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	68dc      	ldr	r4, [r3, #12]
 801094a:	4610      	mov	r0, r2
 801094c:	f7fa fa5e 	bl	800ae0c <lwip_htons>
 8010950:	4603      	mov	r3, r0
 8010952:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	2200      	movs	r2, #0
 801095a:	749a      	strb	r2, [r3, #18]
 801095c:	2200      	movs	r2, #0
 801095e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010960:	693b      	ldr	r3, [r7, #16]
}
 8010962:	4618      	mov	r0, r3
 8010964:	371c      	adds	r7, #28
 8010966:	46bd      	mov	sp, r7
 8010968:	bd90      	pop	{r4, r7, pc}
 801096a:	bf00      	nop
 801096c:	08017738 	.word	0x08017738
 8010970:	080177c4 	.word	0x080177c4
 8010974:	0801779c 	.word	0x0801779c

08010978 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b086      	sub	sp, #24
 801097c:	af00      	add	r7, sp, #0
 801097e:	607b      	str	r3, [r7, #4]
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]
 8010984:	460b      	mov	r3, r1
 8010986:	81bb      	strh	r3, [r7, #12]
 8010988:	4613      	mov	r3, r2
 801098a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801098c:	89bb      	ldrh	r3, [r7, #12]
 801098e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010990:	89ba      	ldrh	r2, [r7, #12]
 8010992:	897b      	ldrh	r3, [r7, #10]
 8010994:	429a      	cmp	r2, r3
 8010996:	d221      	bcs.n	80109dc <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010998:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801099c:	f003 0302 	and.w	r3, r3, #2
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d111      	bne.n	80109c8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80109a4:	6a3b      	ldr	r3, [r7, #32]
 80109a6:	7e9b      	ldrb	r3, [r3, #26]
 80109a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d115      	bne.n	80109dc <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80109b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d007      	beq.n	80109c8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80109b8:	6a3b      	ldr	r3, [r7, #32]
 80109ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d103      	bne.n	80109c8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80109c0:	6a3b      	ldr	r3, [r7, #32]
 80109c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d009      	beq.n	80109dc <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80109c8:	89bb      	ldrh	r3, [r7, #12]
 80109ca:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80109ce:	f023 0203 	bic.w	r2, r3, #3
 80109d2:	897b      	ldrh	r3, [r7, #10]
 80109d4:	4293      	cmp	r3, r2
 80109d6:	bf28      	it	cs
 80109d8:	4613      	movcs	r3, r2
 80109da:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80109dc:	8af9      	ldrh	r1, [r7, #22]
 80109de:	7bfb      	ldrb	r3, [r7, #15]
 80109e0:	2200      	movs	r2, #0
 80109e2:	4618      	mov	r0, r3
 80109e4:	f7fb f8fc 	bl	800bbe0 <pbuf_alloc>
 80109e8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d101      	bne.n	80109f4 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80109f0:	2300      	movs	r3, #0
 80109f2:	e019      	b.n	8010a28 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80109f4:	693b      	ldr	r3, [r7, #16]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d006      	beq.n	8010a0a <tcp_pbuf_prealloc+0x92>
 80109fc:	4b0c      	ldr	r3, [pc, #48]	; (8010a30 <tcp_pbuf_prealloc+0xb8>)
 80109fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8010a02:	490c      	ldr	r1, [pc, #48]	; (8010a34 <tcp_pbuf_prealloc+0xbc>)
 8010a04:	480c      	ldr	r0, [pc, #48]	; (8010a38 <tcp_pbuf_prealloc+0xc0>)
 8010a06:	f004 f8c9 	bl	8014b9c <iprintf>
  *oversize = p->len - length;
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	895a      	ldrh	r2, [r3, #10]
 8010a0e:	89bb      	ldrh	r3, [r7, #12]
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	89ba      	ldrh	r2, [r7, #12]
 8010a1c:	811a      	strh	r2, [r3, #8]
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	891a      	ldrh	r2, [r3, #8]
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	815a      	strh	r2, [r3, #10]
  return p;
 8010a26:	693b      	ldr	r3, [r7, #16]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3718      	adds	r7, #24
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	08017738 	.word	0x08017738
 8010a34:	080177dc 	.word	0x080177dc
 8010a38:	0801779c 	.word	0x0801779c

08010a3c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b082      	sub	sp, #8
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	460b      	mov	r3, r1
 8010a46:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	7d1b      	ldrb	r3, [r3, #20]
 8010a4c:	2b04      	cmp	r3, #4
 8010a4e:	d00e      	beq.n	8010a6e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010a54:	2b07      	cmp	r3, #7
 8010a56:	d00a      	beq.n	8010a6e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010a5c:	2b02      	cmp	r3, #2
 8010a5e:	d006      	beq.n	8010a6e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	d002      	beq.n	8010a6e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010a68:	f06f 030a 	mvn.w	r3, #10
 8010a6c:	e04f      	b.n	8010b0e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8010a6e:	887b      	ldrh	r3, [r7, #2]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d101      	bne.n	8010a78 <tcp_write_checks+0x3c>
    return ERR_OK;
 8010a74:	2300      	movs	r3, #0
 8010a76:	e04a      	b.n	8010b0e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a7e:	887a      	ldrh	r2, [r7, #2]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d909      	bls.n	8010a98 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	7e9b      	ldrb	r3, [r3, #26]
 8010a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010a8c:	b2da      	uxtb	r2, r3
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010a92:	f04f 33ff 	mov.w	r3, #4294967295
 8010a96:	e03a      	b.n	8010b0e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a9e:	2b08      	cmp	r3, #8
 8010aa0:	d806      	bhi.n	8010ab0 <tcp_write_checks+0x74>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010aa8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d909      	bls.n	8010ac4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	7e9b      	ldrb	r3, [r3, #26]
 8010ab4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010abe:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac2:	e024      	b.n	8010b0e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d00f      	beq.n	8010aee <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d11a      	bne.n	8010b0c <tcp_write_checks+0xd0>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d116      	bne.n	8010b0c <tcp_write_checks+0xd0>
 8010ade:	4b0e      	ldr	r3, [pc, #56]	; (8010b18 <tcp_write_checks+0xdc>)
 8010ae0:	f240 1255 	movw	r2, #341	; 0x155
 8010ae4:	490d      	ldr	r1, [pc, #52]	; (8010b1c <tcp_write_checks+0xe0>)
 8010ae6:	480e      	ldr	r0, [pc, #56]	; (8010b20 <tcp_write_checks+0xe4>)
 8010ae8:	f004 f858 	bl	8014b9c <iprintf>
 8010aec:	e00e      	b.n	8010b0c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d103      	bne.n	8010afe <tcp_write_checks+0xc2>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d006      	beq.n	8010b0c <tcp_write_checks+0xd0>
 8010afe:	4b06      	ldr	r3, [pc, #24]	; (8010b18 <tcp_write_checks+0xdc>)
 8010b00:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010b04:	4907      	ldr	r1, [pc, #28]	; (8010b24 <tcp_write_checks+0xe8>)
 8010b06:	4806      	ldr	r0, [pc, #24]	; (8010b20 <tcp_write_checks+0xe4>)
 8010b08:	f004 f848 	bl	8014b9c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	08017738 	.word	0x08017738
 8010b1c:	080177f0 	.word	0x080177f0
 8010b20:	0801779c 	.word	0x0801779c
 8010b24:	0801782c 	.word	0x0801782c

08010b28 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010b28:	b590      	push	{r4, r7, lr}
 8010b2a:	b09b      	sub	sp, #108	; 0x6c
 8010b2c:	af04      	add	r7, sp, #16
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	4611      	mov	r1, r2
 8010b34:	461a      	mov	r2, r3
 8010b36:	460b      	mov	r3, r1
 8010b38:	80fb      	strh	r3, [r7, #6]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010b42:	2300      	movs	r3, #0
 8010b44:	653b      	str	r3, [r7, #80]	; 0x50
 8010b46:	2300      	movs	r3, #0
 8010b48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b4e:	2300      	movs	r3, #0
 8010b50:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010b52:	2300      	movs	r3, #0
 8010b54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010b64:	2300      	movs	r3, #0
 8010b66:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b76:	085b      	lsrs	r3, r3, #1
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	bf28      	it	cs
 8010b82:	4613      	movcs	r3, r2
 8010b84:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d102      	bne.n	8010b92 <tcp_write+0x6a>
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b90:	e000      	b.n	8010b94 <tcp_write+0x6c>
 8010b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b94:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d109      	bne.n	8010bb0 <tcp_write+0x88>
 8010b9c:	4b92      	ldr	r3, [pc, #584]	; (8010de8 <tcp_write+0x2c0>)
 8010b9e:	f240 1291 	movw	r2, #401	; 0x191
 8010ba2:	4992      	ldr	r1, [pc, #584]	; (8010dec <tcp_write+0x2c4>)
 8010ba4:	4892      	ldr	r0, [pc, #584]	; (8010df0 <tcp_write+0x2c8>)
 8010ba6:	f003 fff9 	bl	8014b9c <iprintf>
 8010baa:	f06f 030f 	mvn.w	r3, #15
 8010bae:	e30a      	b.n	80111c6 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010bb0:	88fb      	ldrh	r3, [r7, #6]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	68f8      	ldr	r0, [r7, #12]
 8010bb6:	f7ff ff41 	bl	8010a3c <tcp_write_checks>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010bc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <tcp_write+0xa6>
    return err;
 8010bc8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010bcc:	e2fb      	b.n	80111c6 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010bd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	f000 80f4 	beq.w	8010dca <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010be6:	653b      	str	r3, [r7, #80]	; 0x50
 8010be8:	e002      	b.n	8010bf0 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8010bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d1f8      	bne.n	8010bea <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bfa:	7a9b      	ldrb	r3, [r3, #10]
 8010bfc:	009b      	lsls	r3, r3, #2
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	f003 0304 	and.w	r3, r3, #4
 8010c04:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0a:	891b      	ldrh	r3, [r3, #8]
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	8c3b      	ldrh	r3, [r7, #32]
 8010c10:	440b      	add	r3, r1
 8010c12:	429a      	cmp	r2, r3
 8010c14:	da06      	bge.n	8010c24 <tcp_write+0xfc>
 8010c16:	4b74      	ldr	r3, [pc, #464]	; (8010de8 <tcp_write+0x2c0>)
 8010c18:	f240 12c7 	movw	r2, #455	; 0x1c7
 8010c1c:	4975      	ldr	r1, [pc, #468]	; (8010df4 <tcp_write+0x2cc>)
 8010c1e:	4874      	ldr	r0, [pc, #464]	; (8010df0 <tcp_write+0x2c8>)
 8010c20:	f003 ffbc 	bl	8014b9c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c26:	891a      	ldrh	r2, [r3, #8]
 8010c28:	8c3b      	ldrh	r3, [r7, #32]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c3a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010c3c:	8a7b      	ldrh	r3, [r7, #18]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d026      	beq.n	8010c90 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010c42:	8a7b      	ldrh	r3, [r7, #18]
 8010c44:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d206      	bcs.n	8010c58 <tcp_write+0x130>
 8010c4a:	4b67      	ldr	r3, [pc, #412]	; (8010de8 <tcp_write+0x2c0>)
 8010c4c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010c50:	4969      	ldr	r1, [pc, #420]	; (8010df8 <tcp_write+0x2d0>)
 8010c52:	4867      	ldr	r0, [pc, #412]	; (8010df0 <tcp_write+0x2c8>)
 8010c54:	f003 ffa2 	bl	8014b9c <iprintf>
      seg = last_unsent;
 8010c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010c5c:	8a7b      	ldrh	r3, [r7, #18]
 8010c5e:	88fa      	ldrh	r2, [r7, #6]
 8010c60:	4293      	cmp	r3, r2
 8010c62:	bf28      	it	cs
 8010c64:	4613      	movcs	r3, r2
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	bf28      	it	cs
 8010c6e:	4613      	movcs	r3, r2
 8010c70:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010c72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c78:	4413      	add	r3, r2
 8010c7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010c7e:	8a7a      	ldrh	r2, [r7, #18]
 8010c80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010c88:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010c8a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c8c:	1ad3      	subs	r3, r2, r3
 8010c8e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010c90:	8a7b      	ldrh	r3, [r7, #18]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d00b      	beq.n	8010cae <tcp_write+0x186>
 8010c96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c9a:	88fb      	ldrh	r3, [r7, #6]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d006      	beq.n	8010cae <tcp_write+0x186>
 8010ca0:	4b51      	ldr	r3, [pc, #324]	; (8010de8 <tcp_write+0x2c0>)
 8010ca2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010ca6:	4955      	ldr	r1, [pc, #340]	; (8010dfc <tcp_write+0x2d4>)
 8010ca8:	4851      	ldr	r0, [pc, #324]	; (8010df0 <tcp_write+0x2c8>)
 8010caa:	f003 ff77 	bl	8014b9c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010cae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cb2:	88fb      	ldrh	r3, [r7, #6]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	f080 8169 	bcs.w	8010f8c <tcp_write+0x464>
 8010cba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f000 8165 	beq.w	8010f8c <tcp_write+0x464>
 8010cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cc4:	891b      	ldrh	r3, [r3, #8]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f000 8160 	beq.w	8010f8c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010ccc:	88fa      	ldrh	r2, [r7, #6]
 8010cce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cd2:	1ad2      	subs	r2, r2, r3
 8010cd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	bfa8      	it	ge
 8010cda:	4613      	movge	r3, r2
 8010cdc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010ce2:	797b      	ldrb	r3, [r7, #5]
 8010ce4:	f003 0301 	and.w	r3, r3, #1
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d027      	beq.n	8010d3c <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010cec:	f107 0012 	add.w	r0, r7, #18
 8010cf0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010cf2:	8bf9      	ldrh	r1, [r7, #30]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	9302      	str	r3, [sp, #8]
 8010cf8:	797b      	ldrb	r3, [r7, #5]
 8010cfa:	9301      	str	r3, [sp, #4]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	4603      	mov	r3, r0
 8010d02:	2004      	movs	r0, #4
 8010d04:	f7ff fe38 	bl	8010978 <tcp_pbuf_prealloc>
 8010d08:	6578      	str	r0, [r7, #84]	; 0x54
 8010d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f000 8228 	beq.w	8011162 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d14:	6858      	ldr	r0, [r3, #4]
 8010d16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d1a:	68ba      	ldr	r2, [r7, #8]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	8bfa      	ldrh	r2, [r7, #30]
 8010d20:	4619      	mov	r1, r3
 8010d22:	f003 ff25 	bl	8014b70 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010d26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010d28:	f7fb fb66 	bl	800c3f8 <pbuf_clen>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	461a      	mov	r2, r3
 8010d30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010d34:	4413      	add	r3, r2
 8010d36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010d3a:	e03f      	b.n	8010dbc <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	637b      	str	r3, [r7, #52]	; 0x34
 8010d42:	e002      	b.n	8010d4a <tcp_write+0x222>
 8010d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	637b      	str	r3, [r7, #52]	; 0x34
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d1f8      	bne.n	8010d44 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d54:	7b1b      	ldrb	r3, [r3, #12]
 8010d56:	2b01      	cmp	r3, #1
 8010d58:	d115      	bne.n	8010d86 <tcp_write+0x25e>
 8010d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d60:	8952      	ldrh	r2, [r2, #10]
 8010d62:	4413      	add	r3, r2
 8010d64:	68ba      	ldr	r2, [r7, #8]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d10d      	bne.n	8010d86 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010d6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d006      	beq.n	8010d80 <tcp_write+0x258>
 8010d72:	4b1d      	ldr	r3, [pc, #116]	; (8010de8 <tcp_write+0x2c0>)
 8010d74:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8010d78:	4921      	ldr	r1, [pc, #132]	; (8010e00 <tcp_write+0x2d8>)
 8010d7a:	481d      	ldr	r0, [pc, #116]	; (8010df0 <tcp_write+0x2c8>)
 8010d7c:	f003 ff0e 	bl	8014b9c <iprintf>
          extendlen = seglen;
 8010d80:	8bfb      	ldrh	r3, [r7, #30]
 8010d82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010d84:	e01a      	b.n	8010dbc <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010d86:	8bfb      	ldrh	r3, [r7, #30]
 8010d88:	2201      	movs	r2, #1
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	2004      	movs	r0, #4
 8010d8e:	f7fa ff27 	bl	800bbe0 <pbuf_alloc>
 8010d92:	6578      	str	r0, [r7, #84]	; 0x54
 8010d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f000 81e5 	beq.w	8011166 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8010d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	441a      	add	r2, r3
 8010da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010da6:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010da8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010daa:	f7fb fb25 	bl	800c3f8 <pbuf_clen>
 8010dae:	4603      	mov	r3, r0
 8010db0:	461a      	mov	r2, r3
 8010db2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010db6:	4413      	add	r3, r2
 8010db8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010dbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010dc0:	8bfb      	ldrh	r3, [r7, #30]
 8010dc2:	4413      	add	r3, r2
 8010dc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010dc8:	e0e0      	b.n	8010f8c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	f000 80db 	beq.w	8010f8c <tcp_write+0x464>
 8010dd6:	4b04      	ldr	r3, [pc, #16]	; (8010de8 <tcp_write+0x2c0>)
 8010dd8:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010ddc:	4909      	ldr	r1, [pc, #36]	; (8010e04 <tcp_write+0x2dc>)
 8010dde:	4804      	ldr	r0, [pc, #16]	; (8010df0 <tcp_write+0x2c8>)
 8010de0:	f003 fedc 	bl	8014b9c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010de4:	e0d2      	b.n	8010f8c <tcp_write+0x464>
 8010de6:	bf00      	nop
 8010de8:	08017738 	.word	0x08017738
 8010dec:	08017860 	.word	0x08017860
 8010df0:	0801779c 	.word	0x0801779c
 8010df4:	08017894 	.word	0x08017894
 8010df8:	080178ac 	.word	0x080178ac
 8010dfc:	080178cc 	.word	0x080178cc
 8010e00:	080178ec 	.word	0x080178ec
 8010e04:	08017918 	.word	0x08017918
    struct pbuf *p;
    u16_t left = len - pos;
 8010e08:	88fa      	ldrh	r2, [r7, #6]
 8010e0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e0e:	1ad3      	subs	r3, r2, r3
 8010e10:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010e1e:	8b7a      	ldrh	r2, [r7, #26]
 8010e20:	8bbb      	ldrh	r3, [r7, #28]
 8010e22:	4293      	cmp	r3, r2
 8010e24:	bf28      	it	cs
 8010e26:	4613      	movcs	r3, r2
 8010e28:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010e2a:	797b      	ldrb	r3, [r7, #5]
 8010e2c:	f003 0301 	and.w	r3, r3, #1
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d036      	beq.n	8010ea2 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e38:	b29a      	uxth	r2, r3
 8010e3a:	8b3b      	ldrh	r3, [r7, #24]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	b299      	uxth	r1, r3
 8010e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	bf0c      	ite	eq
 8010e46:	2301      	moveq	r3, #1
 8010e48:	2300      	movne	r3, #0
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	f107 0012 	add.w	r0, r7, #18
 8010e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e52:	9302      	str	r3, [sp, #8]
 8010e54:	797b      	ldrb	r3, [r7, #5]
 8010e56:	9301      	str	r3, [sp, #4]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2000      	movs	r0, #0
 8010e60:	f7ff fd8a 	bl	8010978 <tcp_pbuf_prealloc>
 8010e64:	6338      	str	r0, [r7, #48]	; 0x30
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 817e 	beq.w	801116a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e70:	895b      	ldrh	r3, [r3, #10]
 8010e72:	8b3a      	ldrh	r2, [r7, #24]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d906      	bls.n	8010e86 <tcp_write+0x35e>
 8010e78:	4b8f      	ldr	r3, [pc, #572]	; (80110b8 <tcp_write+0x590>)
 8010e7a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010e7e:	498f      	ldr	r1, [pc, #572]	; (80110bc <tcp_write+0x594>)
 8010e80:	488f      	ldr	r0, [pc, #572]	; (80110c0 <tcp_write+0x598>)
 8010e82:	f003 fe8b 	bl	8014b9c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8010e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e88:	685a      	ldr	r2, [r3, #4]
 8010e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e8e:	18d0      	adds	r0, r2, r3
 8010e90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	4413      	add	r3, r2
 8010e98:	8b3a      	ldrh	r2, [r7, #24]
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	f003 fe68 	bl	8014b70 <memcpy>
 8010ea0:	e02e      	b.n	8010f00 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010ea2:	8a7b      	ldrh	r3, [r7, #18]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d006      	beq.n	8010eb6 <tcp_write+0x38e>
 8010ea8:	4b83      	ldr	r3, [pc, #524]	; (80110b8 <tcp_write+0x590>)
 8010eaa:	f240 224b 	movw	r2, #587	; 0x24b
 8010eae:	4985      	ldr	r1, [pc, #532]	; (80110c4 <tcp_write+0x59c>)
 8010eb0:	4883      	ldr	r0, [pc, #524]	; (80110c0 <tcp_write+0x598>)
 8010eb2:	f003 fe73 	bl	8014b9c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010eb6:	8b3b      	ldrh	r3, [r7, #24]
 8010eb8:	2201      	movs	r2, #1
 8010eba:	4619      	mov	r1, r3
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	f7fa fe8f 	bl	800bbe0 <pbuf_alloc>
 8010ec2:	6178      	str	r0, [r7, #20]
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	f000 8151 	beq.w	801116e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8010ecc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ed0:	68ba      	ldr	r2, [r7, #8]
 8010ed2:	441a      	add	r2, r3
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	2200      	movs	r2, #0
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	f7fa fe7c 	bl	800bbe0 <pbuf_alloc>
 8010ee8:	6338      	str	r0, [r7, #48]	; 0x30
 8010eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d103      	bne.n	8010ef8 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010ef0:	6978      	ldr	r0, [r7, #20]
 8010ef2:	f7fb f9e7 	bl	800c2c4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010ef6:	e13d      	b.n	8011174 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010ef8:	6979      	ldr	r1, [r7, #20]
 8010efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010efc:	f7fb faba 	bl	800c474 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f02:	f7fb fa79 	bl	800c3f8 <pbuf_clen>
 8010f06:	4603      	mov	r3, r0
 8010f08:	461a      	mov	r2, r3
 8010f0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f0e:	4413      	add	r3, r2
 8010f10:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010f14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f18:	2b09      	cmp	r3, #9
 8010f1a:	d805      	bhi.n	8010f28 <tcp_write+0x400>
 8010f1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f20:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d903      	bls.n	8010f30 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f2a:	f7fb f9cb 	bl	800c2c4 <pbuf_free>
      goto memerr;
 8010f2e:	e121      	b.n	8011174 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f38:	441a      	add	r2, r3
 8010f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	4613      	mov	r3, r2
 8010f42:	2200      	movs	r2, #0
 8010f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f7ff fc8e 	bl	8010868 <tcp_create_segment>
 8010f4c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	f000 810e 	beq.w	8011172 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d102      	bne.n	8010f62 <tcp_write+0x43a>
      queue = seg;
 8010f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8010f60:	e00c      	b.n	8010f7c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d106      	bne.n	8010f76 <tcp_write+0x44e>
 8010f68:	4b53      	ldr	r3, [pc, #332]	; (80110b8 <tcp_write+0x590>)
 8010f6a:	f240 2285 	movw	r2, #645	; 0x285
 8010f6e:	4956      	ldr	r1, [pc, #344]	; (80110c8 <tcp_write+0x5a0>)
 8010f70:	4853      	ldr	r0, [pc, #332]	; (80110c0 <tcp_write+0x598>)
 8010f72:	f003 fe13 	bl	8014b9c <iprintf>
      prev_seg->next = seg;
 8010f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f7a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f7e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010f80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f84:	8b3b      	ldrh	r3, [r7, #24]
 8010f86:	4413      	add	r3, r2
 8010f88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010f8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f90:	88fb      	ldrh	r3, [r7, #6]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	f4ff af38 	bcc.w	8010e08 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010f98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d02c      	beq.n	8010ff8 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fa4:	e01e      	b.n	8010fe4 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8010fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa8:	891a      	ldrh	r2, [r3, #8]
 8010faa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fac:	4413      	add	r3, r2
 8010fae:	b29a      	uxth	r2, r3
 8010fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d110      	bne.n	8010fde <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fc2:	8952      	ldrh	r2, [r2, #10]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010fc8:	68b9      	ldr	r1, [r7, #8]
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f003 fdd0 	bl	8014b70 <memcpy>
        p->len += oversize_used;
 8010fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd2:	895a      	ldrh	r2, [r3, #10]
 8010fd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fd6:	4413      	add	r3, r2
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fdc:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d1dd      	bne.n	8010fa6 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8010fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fec:	891a      	ldrh	r2, [r3, #8]
 8010fee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ff0:	4413      	add	r3, r2
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ff6:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010ff8:	8a7a      	ldrh	r2, [r7, #18]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011002:	2b00      	cmp	r3, #0
 8011004:	d018      	beq.n	8011038 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011008:	2b00      	cmp	r3, #0
 801100a:	d106      	bne.n	801101a <tcp_write+0x4f2>
 801100c:	4b2a      	ldr	r3, [pc, #168]	; (80110b8 <tcp_write+0x590>)
 801100e:	f240 22ba 	movw	r2, #698	; 0x2ba
 8011012:	492e      	ldr	r1, [pc, #184]	; (80110cc <tcp_write+0x5a4>)
 8011014:	482a      	ldr	r0, [pc, #168]	; (80110c0 <tcp_write+0x598>)
 8011016:	f003 fdc1 	bl	8014b9c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801101a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011020:	4618      	mov	r0, r3
 8011022:	f7fb fa27 	bl	800c474 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011028:	891a      	ldrh	r2, [r3, #8]
 801102a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801102c:	891b      	ldrh	r3, [r3, #8]
 801102e:	4413      	add	r3, r2
 8011030:	b29a      	uxth	r2, r3
 8011032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011034:	811a      	strh	r2, [r3, #8]
 8011036:	e037      	b.n	80110a8 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8011038:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801103a:	2b00      	cmp	r3, #0
 801103c:	d034      	beq.n	80110a8 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801103e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011040:	2b00      	cmp	r3, #0
 8011042:	d003      	beq.n	801104c <tcp_write+0x524>
 8011044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011046:	685b      	ldr	r3, [r3, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d106      	bne.n	801105a <tcp_write+0x532>
 801104c:	4b1a      	ldr	r3, [pc, #104]	; (80110b8 <tcp_write+0x590>)
 801104e:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8011052:	491f      	ldr	r1, [pc, #124]	; (80110d0 <tcp_write+0x5a8>)
 8011054:	481a      	ldr	r0, [pc, #104]	; (80110c0 <tcp_write+0x598>)
 8011056:	f003 fda1 	bl	8014b9c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801105a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011060:	e009      	b.n	8011076 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8011062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011064:	891a      	ldrh	r2, [r3, #8]
 8011066:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011068:	4413      	add	r3, r2
 801106a:	b29a      	uxth	r2, r3
 801106c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801106e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	62bb      	str	r3, [r7, #40]	; 0x28
 8011076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1f1      	bne.n	8011062 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011080:	891a      	ldrh	r2, [r3, #8]
 8011082:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011084:	4413      	add	r3, r2
 8011086:	b29a      	uxth	r2, r3
 8011088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108e:	895a      	ldrh	r2, [r3, #10]
 8011090:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011092:	4413      	add	r3, r2
 8011094:	b29a      	uxth	r2, r3
 8011096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011098:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801109c:	891a      	ldrh	r2, [r3, #8]
 801109e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80110a0:	4413      	add	r3, r2
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110a6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80110a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d112      	bne.n	80110d4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110b2:	669a      	str	r2, [r3, #104]	; 0x68
 80110b4:	e011      	b.n	80110da <tcp_write+0x5b2>
 80110b6:	bf00      	nop
 80110b8:	08017738 	.word	0x08017738
 80110bc:	08017948 	.word	0x08017948
 80110c0:	0801779c 	.word	0x0801779c
 80110c4:	08017988 	.word	0x08017988
 80110c8:	08017998 	.word	0x08017998
 80110cc:	080179ac 	.word	0x080179ac
 80110d0:	080179e4 	.word	0x080179e4
  } else {
    last_unsent->next = queue;
 80110d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110d8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80110de:	88fb      	ldrh	r3, [r7, #6]
 80110e0:	441a      	add	r2, r3
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80110ec:	88fb      	ldrh	r3, [r7, #6]
 80110ee:	1ad3      	subs	r3, r2, r3
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80110fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00e      	beq.n	801112a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011110:	2b00      	cmp	r3, #0
 8011112:	d10a      	bne.n	801112a <tcp_write+0x602>
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011118:	2b00      	cmp	r3, #0
 801111a:	d106      	bne.n	801112a <tcp_write+0x602>
 801111c:	4b2c      	ldr	r3, [pc, #176]	; (80111d0 <tcp_write+0x6a8>)
 801111e:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8011122:	492c      	ldr	r1, [pc, #176]	; (80111d4 <tcp_write+0x6ac>)
 8011124:	482c      	ldr	r0, [pc, #176]	; (80111d8 <tcp_write+0x6b0>)
 8011126:	f003 fd39 	bl	8014b9c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801112a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801112c:	2b00      	cmp	r3, #0
 801112e:	d016      	beq.n	801115e <tcp_write+0x636>
 8011130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d012      	beq.n	801115e <tcp_write+0x636>
 8011138:	797b      	ldrb	r3, [r7, #5]
 801113a:	f003 0302 	and.w	r3, r3, #2
 801113e:	2b00      	cmp	r3, #0
 8011140:	d10d      	bne.n	801115e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	899b      	ldrh	r3, [r3, #12]
 8011148:	b29c      	uxth	r4, r3
 801114a:	2008      	movs	r0, #8
 801114c:	f7f9 fe5e 	bl	800ae0c <lwip_htons>
 8011150:	4603      	mov	r3, r0
 8011152:	461a      	mov	r2, r3
 8011154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	4322      	orrs	r2, r4
 801115a:	b292      	uxth	r2, r2
 801115c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801115e:	2300      	movs	r3, #0
 8011160:	e031      	b.n	80111c6 <tcp_write+0x69e>
          goto memerr;
 8011162:	bf00      	nop
 8011164:	e006      	b.n	8011174 <tcp_write+0x64c>
            goto memerr;
 8011166:	bf00      	nop
 8011168:	e004      	b.n	8011174 <tcp_write+0x64c>
        goto memerr;
 801116a:	bf00      	nop
 801116c:	e002      	b.n	8011174 <tcp_write+0x64c>
        goto memerr;
 801116e:	bf00      	nop
 8011170:	e000      	b.n	8011174 <tcp_write+0x64c>
      goto memerr;
 8011172:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	7e9b      	ldrb	r3, [r3, #26]
 8011178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801117c:	b2da      	uxtb	r2, r3
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011184:	2b00      	cmp	r3, #0
 8011186:	d002      	beq.n	801118e <tcp_write+0x666>
    pbuf_free(concat_p);
 8011188:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801118a:	f7fb f89b 	bl	800c2c4 <pbuf_free>
  }
  if (queue != NULL) {
 801118e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011190:	2b00      	cmp	r3, #0
 8011192:	d002      	beq.n	801119a <tcp_write+0x672>
    tcp_segs_free(queue);
 8011194:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011196:	f7fc fcc0 	bl	800db1a <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00e      	beq.n	80111c2 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d10a      	bne.n	80111c2 <tcp_write+0x69a>
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d106      	bne.n	80111c2 <tcp_write+0x69a>
 80111b4:	4b06      	ldr	r3, [pc, #24]	; (80111d0 <tcp_write+0x6a8>)
 80111b6:	f240 3201 	movw	r2, #769	; 0x301
 80111ba:	4906      	ldr	r1, [pc, #24]	; (80111d4 <tcp_write+0x6ac>)
 80111bc:	4806      	ldr	r0, [pc, #24]	; (80111d8 <tcp_write+0x6b0>)
 80111be:	f003 fced 	bl	8014b9c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80111c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	375c      	adds	r7, #92	; 0x5c
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd90      	pop	{r4, r7, pc}
 80111ce:	bf00      	nop
 80111d0:	08017738 	.word	0x08017738
 80111d4:	08017a1c 	.word	0x08017a1c
 80111d8:	0801779c 	.word	0x0801779c

080111dc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b08a      	sub	sp, #40	; 0x28
 80111e0:	af02      	add	r7, sp, #8
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	460b      	mov	r3, r1
 80111e6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80111e8:	2300      	movs	r3, #0
 80111ea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80111ec:	2300      	movs	r3, #0
 80111ee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80111f0:	78fb      	ldrb	r3, [r7, #3]
 80111f2:	f003 0303 	and.w	r3, r3, #3
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d106      	bne.n	8011208 <tcp_enqueue_flags+0x2c>
 80111fa:	4b6f      	ldr	r3, [pc, #444]	; (80113b8 <tcp_enqueue_flags+0x1dc>)
 80111fc:	f240 321a 	movw	r2, #794	; 0x31a
 8011200:	496e      	ldr	r1, [pc, #440]	; (80113bc <tcp_enqueue_flags+0x1e0>)
 8011202:	486f      	ldr	r0, [pc, #444]	; (80113c0 <tcp_enqueue_flags+0x1e4>)
 8011204:	f003 fcca 	bl	8014b9c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801120e:	2b08      	cmp	r3, #8
 8011210:	d806      	bhi.n	8011220 <tcp_enqueue_flags+0x44>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011218:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801121c:	4293      	cmp	r3, r2
 801121e:	d90e      	bls.n	801123e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011220:	78fb      	ldrb	r3, [r7, #3]
 8011222:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011226:	2b00      	cmp	r3, #0
 8011228:	d109      	bne.n	801123e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	7e9b      	ldrb	r3, [r3, #26]
 801122e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011232:	b2da      	uxtb	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011238:	f04f 33ff 	mov.w	r3, #4294967295
 801123c:	e0b7      	b.n	80113ae <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801123e:	78fb      	ldrb	r3, [r7, #3]
 8011240:	f003 0302 	and.w	r3, r3, #2
 8011244:	2b00      	cmp	r3, #0
 8011246:	d001      	beq.n	801124c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011248:	2301      	movs	r3, #1
 801124a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801124c:	7ffb      	ldrb	r3, [r7, #31]
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	b2db      	uxtb	r3, r3
 8011252:	f003 0304 	and.w	r3, r3, #4
 8011256:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011258:	7dfb      	ldrb	r3, [r7, #23]
 801125a:	b29b      	uxth	r3, r3
 801125c:	2200      	movs	r2, #0
 801125e:	4619      	mov	r1, r3
 8011260:	2000      	movs	r0, #0
 8011262:	f7fa fcbd 	bl	800bbe0 <pbuf_alloc>
 8011266:	6138      	str	r0, [r7, #16]
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d109      	bne.n	8011282 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	7e9b      	ldrb	r3, [r3, #26]
 8011272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011276:	b2da      	uxtb	r2, r3
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801127c:	f04f 33ff 	mov.w	r3, #4294967295
 8011280:	e095      	b.n	80113ae <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	895a      	ldrh	r2, [r3, #10]
 8011286:	7dfb      	ldrb	r3, [r7, #23]
 8011288:	b29b      	uxth	r3, r3
 801128a:	429a      	cmp	r2, r3
 801128c:	d206      	bcs.n	801129c <tcp_enqueue_flags+0xc0>
 801128e:	4b4a      	ldr	r3, [pc, #296]	; (80113b8 <tcp_enqueue_flags+0x1dc>)
 8011290:	f44f 7250 	mov.w	r2, #832	; 0x340
 8011294:	494b      	ldr	r1, [pc, #300]	; (80113c4 <tcp_enqueue_flags+0x1e8>)
 8011296:	484a      	ldr	r0, [pc, #296]	; (80113c0 <tcp_enqueue_flags+0x1e4>)
 8011298:	f003 fc80 	bl	8014b9c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80112a0:	78fa      	ldrb	r2, [r7, #3]
 80112a2:	7ffb      	ldrb	r3, [r7, #31]
 80112a4:	9300      	str	r3, [sp, #0]
 80112a6:	460b      	mov	r3, r1
 80112a8:	6939      	ldr	r1, [r7, #16]
 80112aa:	6878      	ldr	r0, [r7, #4]
 80112ac:	f7ff fadc 	bl	8010868 <tcp_create_segment>
 80112b0:	60f8      	str	r0, [r7, #12]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d109      	bne.n	80112cc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	7e9b      	ldrb	r3, [r3, #26]
 80112bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80112c0:	b2da      	uxtb	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80112c6:	f04f 33ff 	mov.w	r3, #4294967295
 80112ca:	e070      	b.n	80113ae <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	f003 0303 	and.w	r3, r3, #3
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d006      	beq.n	80112e6 <tcp_enqueue_flags+0x10a>
 80112d8:	4b37      	ldr	r3, [pc, #220]	; (80113b8 <tcp_enqueue_flags+0x1dc>)
 80112da:	f240 3249 	movw	r2, #841	; 0x349
 80112de:	493a      	ldr	r1, [pc, #232]	; (80113c8 <tcp_enqueue_flags+0x1ec>)
 80112e0:	4837      	ldr	r0, [pc, #220]	; (80113c0 <tcp_enqueue_flags+0x1e4>)
 80112e2:	f003 fc5b 	bl	8014b9c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	891b      	ldrh	r3, [r3, #8]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d006      	beq.n	80112fc <tcp_enqueue_flags+0x120>
 80112ee:	4b32      	ldr	r3, [pc, #200]	; (80113b8 <tcp_enqueue_flags+0x1dc>)
 80112f0:	f240 324a 	movw	r2, #842	; 0x34a
 80112f4:	4935      	ldr	r1, [pc, #212]	; (80113cc <tcp_enqueue_flags+0x1f0>)
 80112f6:	4832      	ldr	r0, [pc, #200]	; (80113c0 <tcp_enqueue_flags+0x1e4>)
 80112f8:	f003 fc50 	bl	8014b9c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011300:	2b00      	cmp	r3, #0
 8011302:	d103      	bne.n	801130c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	68fa      	ldr	r2, [r7, #12]
 8011308:	669a      	str	r2, [r3, #104]	; 0x68
 801130a:	e00d      	b.n	8011328 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011310:	61bb      	str	r3, [r7, #24]
 8011312:	e002      	b.n	801131a <tcp_enqueue_flags+0x13e>
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	61bb      	str	r3, [r7, #24]
 801131a:	69bb      	ldr	r3, [r7, #24]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1f8      	bne.n	8011314 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	68fa      	ldr	r2, [r7, #12]
 8011326:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011330:	78fb      	ldrb	r3, [r7, #3]
 8011332:	f003 0302 	and.w	r3, r3, #2
 8011336:	2b00      	cmp	r3, #0
 8011338:	d104      	bne.n	8011344 <tcp_enqueue_flags+0x168>
 801133a:	78fb      	ldrb	r3, [r7, #3]
 801133c:	f003 0301 	and.w	r3, r3, #1
 8011340:	2b00      	cmp	r3, #0
 8011342:	d004      	beq.n	801134e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011348:	1c5a      	adds	r2, r3, #1
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801134e:	78fb      	ldrb	r3, [r7, #3]
 8011350:	f003 0301 	and.w	r3, r3, #1
 8011354:	2b00      	cmp	r3, #0
 8011356:	d006      	beq.n	8011366 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	7e9b      	ldrb	r3, [r3, #26]
 801135c:	f043 0320 	orr.w	r3, r3, #32
 8011360:	b2da      	uxtb	r2, r3
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	4618      	mov	r0, r3
 801136c:	f7fb f844 	bl	800c3f8 <pbuf_clen>
 8011370:	4603      	mov	r3, r0
 8011372:	461a      	mov	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801137a:	4413      	add	r3, r2
 801137c:	b29a      	uxth	r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00e      	beq.n	80113ac <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011392:	2b00      	cmp	r3, #0
 8011394:	d10a      	bne.n	80113ac <tcp_enqueue_flags+0x1d0>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <tcp_enqueue_flags+0x1d0>
 801139e:	4b06      	ldr	r3, [pc, #24]	; (80113b8 <tcp_enqueue_flags+0x1dc>)
 80113a0:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80113a4:	490a      	ldr	r1, [pc, #40]	; (80113d0 <tcp_enqueue_flags+0x1f4>)
 80113a6:	4806      	ldr	r0, [pc, #24]	; (80113c0 <tcp_enqueue_flags+0x1e4>)
 80113a8:	f003 fbf8 	bl	8014b9c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3720      	adds	r7, #32
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	08017738 	.word	0x08017738
 80113bc:	08017a3c 	.word	0x08017a3c
 80113c0:	0801779c 	.word	0x0801779c
 80113c4:	08017a94 	.word	0x08017a94
 80113c8:	08017ad0 	.word	0x08017ad0
 80113cc:	08017ae8 	.word	0x08017ae8
 80113d0:	08017b14 	.word	0x08017b14

080113d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80113d4:	b590      	push	{r4, r7, lr}
 80113d6:	b08b      	sub	sp, #44	; 0x2c
 80113d8:	af04      	add	r7, sp, #16
 80113da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80113dc:	2300      	movs	r3, #0
 80113de:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80113e0:	7dbb      	ldrb	r3, [r7, #22]
 80113e2:	b29c      	uxth	r4, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7f9 fd1c 	bl	800ae26 <lwip_htonl>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2200      	movs	r2, #0
 80113f2:	4621      	mov	r1, r4
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7ff f97d 	bl	80106f4 <tcp_output_alloc_header>
 80113fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d109      	bne.n	8011416 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	7e9b      	ldrb	r3, [r3, #26]
 8011406:	f043 0303 	orr.w	r3, r3, #3
 801140a:	b2da      	uxtb	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011410:	f06f 0301 	mvn.w	r3, #1
 8011414:	e036      	b.n	8011484 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	3304      	adds	r3, #4
 801141a:	4618      	mov	r0, r3
 801141c:	f002 f8e0 	bl	80135e0 <ip4_route>
 8011420:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d102      	bne.n	801142e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8011428:	23fc      	movs	r3, #252	; 0xfc
 801142a:	75fb      	strb	r3, [r7, #23]
 801142c:	e012      	b.n	8011454 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801142e:	6879      	ldr	r1, [r7, #4]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	1d18      	adds	r0, r3, #4
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	7a9c      	ldrb	r4, [r3, #10]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	7a5b      	ldrb	r3, [r3, #9]
 801143c:	68fa      	ldr	r2, [r7, #12]
 801143e:	9202      	str	r2, [sp, #8]
 8011440:	2206      	movs	r2, #6
 8011442:	9201      	str	r2, [sp, #4]
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	4623      	mov	r3, r4
 8011448:	4602      	mov	r2, r0
 801144a:	6938      	ldr	r0, [r7, #16]
 801144c:	f002 fa72 	bl	8013934 <ip4_output_if>
 8011450:	4603      	mov	r3, r0
 8011452:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011454:	6938      	ldr	r0, [r7, #16]
 8011456:	f7fa ff35 	bl	800c2c4 <pbuf_free>

  if (err != ERR_OK) {
 801145a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d007      	beq.n	8011472 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	7e9b      	ldrb	r3, [r3, #26]
 8011466:	f043 0303 	orr.w	r3, r3, #3
 801146a:	b2da      	uxtb	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	769a      	strb	r2, [r3, #26]
 8011470:	e006      	b.n	8011480 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	7e9b      	ldrb	r3, [r3, #26]
 8011476:	f023 0303 	bic.w	r3, r3, #3
 801147a:	b2da      	uxtb	r2, r3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011480:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011484:	4618      	mov	r0, r3
 8011486:	371c      	adds	r7, #28
 8011488:	46bd      	mov	sp, r7
 801148a:	bd90      	pop	{r4, r7, pc}

0801148c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801148c:	b5b0      	push	{r4, r5, r7, lr}
 801148e:	b08a      	sub	sp, #40	; 0x28
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	7d1b      	ldrb	r3, [r3, #20]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d106      	bne.n	80114aa <tcp_output+0x1e>
 801149c:	4ba8      	ldr	r3, [pc, #672]	; (8011740 <tcp_output+0x2b4>)
 801149e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80114a2:	49a8      	ldr	r1, [pc, #672]	; (8011744 <tcp_output+0x2b8>)
 80114a4:	48a8      	ldr	r0, [pc, #672]	; (8011748 <tcp_output+0x2bc>)
 80114a6:	f003 fb79 	bl	8014b9c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80114aa:	4ba8      	ldr	r3, [pc, #672]	; (801174c <tcp_output+0x2c0>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d101      	bne.n	80114b8 <tcp_output+0x2c>
    return ERR_OK;
 80114b4:	2300      	movs	r3, #0
 80114b6:	e1cb      	b.n	8011850 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80114c4:	4293      	cmp	r3, r2
 80114c6:	bf28      	it	cs
 80114c8:	4613      	movcs	r3, r2
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80114d2:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7e9b      	ldrb	r3, [r3, #26]
 80114d8:	f003 0302 	and.w	r3, r3, #2
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d017      	beq.n	8011510 <tcp_output+0x84>
 80114e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d00f      	beq.n	8011506 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80114e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e8:	68db      	ldr	r3, [r3, #12]
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7f9 fc9a 	bl	800ae26 <lwip_htonl>
 80114f2:	4602      	mov	r2, r0
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114f8:	1ad3      	subs	r3, r2, r3
 80114fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114fc:	8912      	ldrh	r2, [r2, #8]
 80114fe:	4413      	add	r3, r2
     (seg == NULL ||
 8011500:	69ba      	ldr	r2, [r7, #24]
 8011502:	429a      	cmp	r2, r3
 8011504:	d204      	bcs.n	8011510 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f7ff ff64 	bl	80113d4 <tcp_send_empty_ack>
 801150c:	4603      	mov	r3, r0
 801150e:	e19f      	b.n	8011850 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011514:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011516:	6a3b      	ldr	r3, [r7, #32]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d007      	beq.n	801152c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801151c:	e002      	b.n	8011524 <tcp_output+0x98>
 801151e:	6a3b      	ldr	r3, [r7, #32]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	623b      	str	r3, [r7, #32]
 8011524:	6a3b      	ldr	r3, [r7, #32]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1f8      	bne.n	801151e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	3304      	adds	r3, #4
 8011530:	4618      	mov	r0, r3
 8011532:	f002 f855 	bl	80135e0 <ip4_route>
 8011536:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d102      	bne.n	8011544 <tcp_output+0xb8>
    return ERR_RTE;
 801153e:	f06f 0303 	mvn.w	r3, #3
 8011542:	e185      	b.n	8011850 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d003      	beq.n	8011552 <tcp_output+0xc6>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d111      	bne.n	8011576 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d002      	beq.n	801155e <tcp_output+0xd2>
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	3304      	adds	r3, #4
 801155c:	e000      	b.n	8011560 <tcp_output+0xd4>
 801155e:	2300      	movs	r3, #0
 8011560:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d102      	bne.n	801156e <tcp_output+0xe2>
      return ERR_RTE;
 8011568:	f06f 0303 	mvn.w	r3, #3
 801156c:	e170      	b.n	8011850 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 813f 	beq.w	80117fc <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	4618      	mov	r0, r3
 8011586:	f7f9 fc4e 	bl	800ae26 <lwip_htonl>
 801158a:	4602      	mov	r2, r0
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011594:	8912      	ldrh	r2, [r2, #8]
 8011596:	4413      	add	r3, r2
  if (seg != NULL &&
 8011598:	69ba      	ldr	r2, [r7, #24]
 801159a:	429a      	cmp	r2, r3
 801159c:	f080 812e 	bcs.w	80117fc <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	f000 812a 	beq.w	80117fc <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80115ae:	461a      	mov	r2, r3
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	4293      	cmp	r3, r2
 80115b4:	f040 8122 	bne.w	80117fc <tcp_output+0x370>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f040 811d 	bne.w	80117fc <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f040 812c 	bne.w	8011826 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2200      	movs	r2, #0
 80115d2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2201      	movs	r2, #1
 80115da:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80115de:	e122      	b.n	8011826 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80115e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	899b      	ldrh	r3, [r3, #12]
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7f9 fc0f 	bl	800ae0c <lwip_htons>
 80115ee:	4603      	mov	r3, r0
 80115f0:	f003 0304 	and.w	r3, r3, #4
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d006      	beq.n	8011606 <tcp_output+0x17a>
 80115f8:	4b51      	ldr	r3, [pc, #324]	; (8011740 <tcp_output+0x2b4>)
 80115fa:	f240 4245 	movw	r2, #1093	; 0x445
 80115fe:	4954      	ldr	r1, [pc, #336]	; (8011750 <tcp_output+0x2c4>)
 8011600:	4851      	ldr	r0, [pc, #324]	; (8011748 <tcp_output+0x2bc>)
 8011602:	f003 facb 	bl	8014b9c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801160a:	2b00      	cmp	r3, #0
 801160c:	d01f      	beq.n	801164e <tcp_output+0x1c2>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	7e9b      	ldrb	r3, [r3, #26]
 8011612:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011616:	2b00      	cmp	r3, #0
 8011618:	d119      	bne.n	801164e <tcp_output+0x1c2>
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801161e:	2b00      	cmp	r3, #0
 8011620:	d00b      	beq.n	801163a <tcp_output+0x1ae>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d110      	bne.n	801164e <tcp_output+0x1c2>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011630:	891a      	ldrh	r2, [r3, #8]
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011636:	429a      	cmp	r2, r3
 8011638:	d209      	bcs.n	801164e <tcp_output+0x1c2>
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011640:	2b00      	cmp	r3, #0
 8011642:	d004      	beq.n	801164e <tcp_output+0x1c2>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801164a:	2b08      	cmp	r3, #8
 801164c:	d901      	bls.n	8011652 <tcp_output+0x1c6>
 801164e:	2301      	movs	r3, #1
 8011650:	e000      	b.n	8011654 <tcp_output+0x1c8>
 8011652:	2300      	movs	r3, #0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d106      	bne.n	8011666 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	7e9b      	ldrb	r3, [r3, #26]
 801165c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011660:	2b00      	cmp	r3, #0
 8011662:	f000 80e2 	beq.w	801182a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	7d1b      	ldrb	r3, [r3, #20]
 801166a:	2b02      	cmp	r3, #2
 801166c:	d00d      	beq.n	801168a <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	899b      	ldrh	r3, [r3, #12]
 8011674:	b29c      	uxth	r4, r3
 8011676:	2010      	movs	r0, #16
 8011678:	f7f9 fbc8 	bl	800ae0c <lwip_htons>
 801167c:	4603      	mov	r3, r0
 801167e:	461a      	mov	r2, r3
 8011680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	4322      	orrs	r2, r4
 8011686:	b292      	uxth	r2, r2
 8011688:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801168a:	697a      	ldr	r2, [r7, #20]
 801168c:	6879      	ldr	r1, [r7, #4]
 801168e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011690:	f000 f8e2 	bl	8011858 <tcp_output_segment>
 8011694:	4603      	mov	r3, r0
 8011696:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d009      	beq.n	80116b4 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	7e9b      	ldrb	r3, [r3, #26]
 80116a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	769a      	strb	r2, [r3, #26]
      return err;
 80116ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116b2:	e0cd      	b.n	8011850 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 80116b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	7d1b      	ldrb	r3, [r3, #20]
 80116c0:	2b02      	cmp	r3, #2
 80116c2:	d006      	beq.n	80116d2 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	7e9b      	ldrb	r3, [r3, #26]
 80116c8:	f023 0303 	bic.w	r3, r3, #3
 80116cc:	b2da      	uxtb	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	68db      	ldr	r3, [r3, #12]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	4618      	mov	r0, r3
 80116da:	f7f9 fba4 	bl	800ae26 <lwip_htonl>
 80116de:	4604      	mov	r4, r0
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	891b      	ldrh	r3, [r3, #8]
 80116e4:	461d      	mov	r5, r3
 80116e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e8:	68db      	ldr	r3, [r3, #12]
 80116ea:	899b      	ldrh	r3, [r3, #12]
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7f9 fb8c 	bl	800ae0c <lwip_htons>
 80116f4:	4603      	mov	r3, r0
 80116f6:	f003 0303 	and.w	r3, r3, #3
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d001      	beq.n	8011702 <tcp_output+0x276>
 80116fe:	2301      	movs	r3, #1
 8011700:	e000      	b.n	8011704 <tcp_output+0x278>
 8011702:	2300      	movs	r3, #0
 8011704:	442b      	add	r3, r5
 8011706:	4423      	add	r3, r4
 8011708:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	1ad3      	subs	r3, r2, r3
 8011712:	2b00      	cmp	r3, #0
 8011714:	da02      	bge.n	801171c <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	68ba      	ldr	r2, [r7, #8]
 801171a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801171e:	891b      	ldrh	r3, [r3, #8]
 8011720:	461c      	mov	r4, r3
 8011722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	899b      	ldrh	r3, [r3, #12]
 8011728:	b29b      	uxth	r3, r3
 801172a:	4618      	mov	r0, r3
 801172c:	f7f9 fb6e 	bl	800ae0c <lwip_htons>
 8011730:	4603      	mov	r3, r0
 8011732:	f003 0303 	and.w	r3, r3, #3
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00c      	beq.n	8011754 <tcp_output+0x2c8>
 801173a:	2301      	movs	r3, #1
 801173c:	e00b      	b.n	8011756 <tcp_output+0x2ca>
 801173e:	bf00      	nop
 8011740:	08017738 	.word	0x08017738
 8011744:	08017b3c 	.word	0x08017b3c
 8011748:	0801779c 	.word	0x0801779c
 801174c:	2000bb78 	.word	0x2000bb78
 8011750:	08017b64 	.word	0x08017b64
 8011754:	2300      	movs	r3, #0
 8011756:	4423      	add	r3, r4
 8011758:	2b00      	cmp	r3, #0
 801175a:	d049      	beq.n	80117f0 <tcp_output+0x364>
      seg->next = NULL;
 801175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175e:	2200      	movs	r2, #0
 8011760:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011766:	2b00      	cmp	r3, #0
 8011768:	d105      	bne.n	8011776 <tcp_output+0x2ea>
        pcb->unacked = seg;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801176e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011772:	623b      	str	r3, [r7, #32]
 8011774:	e03f      	b.n	80117f6 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	4618      	mov	r0, r3
 801177e:	f7f9 fb52 	bl	800ae26 <lwip_htonl>
 8011782:	4604      	mov	r4, r0
 8011784:	6a3b      	ldr	r3, [r7, #32]
 8011786:	68db      	ldr	r3, [r3, #12]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	4618      	mov	r0, r3
 801178c:	f7f9 fb4b 	bl	800ae26 <lwip_htonl>
 8011790:	4603      	mov	r3, r0
 8011792:	1ae3      	subs	r3, r4, r3
 8011794:	2b00      	cmp	r3, #0
 8011796:	da24      	bge.n	80117e2 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	336c      	adds	r3, #108	; 0x6c
 801179c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801179e:	e002      	b.n	80117a6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d011      	beq.n	80117d2 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f7f9 fb35 	bl	800ae26 <lwip_htonl>
 80117bc:	4604      	mov	r4, r0
 80117be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	4618      	mov	r0, r3
 80117c6:	f7f9 fb2e 	bl	800ae26 <lwip_htonl>
 80117ca:	4603      	mov	r3, r0
 80117cc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	dbe6      	blt.n	80117a0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117de:	601a      	str	r2, [r3, #0]
 80117e0:	e009      	b.n	80117f6 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117e6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80117e8:	6a3b      	ldr	r3, [r7, #32]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	623b      	str	r3, [r7, #32]
 80117ee:	e002      	b.n	80117f6 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80117f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117f2:	f7fc f9a7 	bl	800db44 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80117fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d015      	beq.n	801182e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	4618      	mov	r0, r3
 801180a:	f7f9 fb0c 	bl	800ae26 <lwip_htonl>
 801180e:	4602      	mov	r2, r0
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011814:	1ad3      	subs	r3, r2, r3
 8011816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011818:	8912      	ldrh	r2, [r2, #8]
 801181a:	4413      	add	r3, r2
  while (seg != NULL &&
 801181c:	69ba      	ldr	r2, [r7, #24]
 801181e:	429a      	cmp	r2, r3
 8011820:	f4bf aede 	bcs.w	80115e0 <tcp_output+0x154>
  }
output_done:
 8011824:	e003      	b.n	801182e <tcp_output+0x3a2>
    goto output_done;
 8011826:	bf00      	nop
 8011828:	e002      	b.n	8011830 <tcp_output+0x3a4>
      break;
 801182a:	bf00      	nop
 801182c:	e000      	b.n	8011830 <tcp_output+0x3a4>
output_done:
 801182e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011834:	2b00      	cmp	r3, #0
 8011836:	d103      	bne.n	8011840 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2200      	movs	r2, #0
 801183c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	7e9b      	ldrb	r3, [r3, #26]
 8011844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011848:	b2da      	uxtb	r2, r3
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3728      	adds	r7, #40	; 0x28
 8011854:	46bd      	mov	sp, r7
 8011856:	bdb0      	pop	{r4, r5, r7, pc}

08011858 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011858:	b5b0      	push	{r4, r5, r7, lr}
 801185a:	b08c      	sub	sp, #48	; 0x30
 801185c:	af04      	add	r7, sp, #16
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	89db      	ldrh	r3, [r3, #14]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d001      	beq.n	8011872 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801186e:	2300      	movs	r3, #0
 8011870:	e08a      	b.n	8011988 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	68dc      	ldr	r4, [r3, #12]
 801187a:	4610      	mov	r0, r2
 801187c:	f7f9 fad3 	bl	800ae26 <lwip_htonl>
 8011880:	4603      	mov	r3, r0
 8011882:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	68dc      	ldr	r4, [r3, #12]
 801188c:	4610      	mov	r0, r2
 801188e:	f7f9 fabd 	bl	800ae0c <lwip_htons>
 8011892:	4603      	mov	r3, r0
 8011894:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801189e:	441a      	add	r2, r3
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	3314      	adds	r3, #20
 80118aa:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	7a9b      	ldrb	r3, [r3, #10]
 80118b0:	f003 0301 	and.w	r3, r3, #1
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d014      	beq.n	80118e2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	3304      	adds	r3, #4
 80118bc:	4619      	mov	r1, r3
 80118be:	f44f 7006 	mov.w	r0, #536	; 0x218
 80118c2:	f7fc fc79 	bl	800e1b8 <tcp_eff_send_mss_impl>
 80118c6:	4603      	mov	r3, r0
 80118c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80118ca:	8b7b      	ldrh	r3, [r7, #26]
 80118cc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7f9 faa8 	bl	800ae26 <lwip_htonl>
 80118d6:	4602      	mov	r2, r0
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	601a      	str	r2, [r3, #0]
    opts += 1;
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	3304      	adds	r3, #4
 80118e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	da02      	bge.n	80118f2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	2200      	movs	r2, #0
 80118f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d10c      	bne.n	8011914 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80118fa:	4b25      	ldr	r3, [pc, #148]	; (8011990 <tcp_output_segment+0x138>)
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	4618      	mov	r0, r3
 801190a:	f7f9 fa8c 	bl	800ae26 <lwip_htonl>
 801190e:	4602      	mov	r2, r0
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	68da      	ldr	r2, [r3, #12]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	8959      	ldrh	r1, [r3, #10]
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	685b      	ldr	r3, [r3, #4]
 801192c:	8b3a      	ldrh	r2, [r7, #24]
 801192e:	1a8a      	subs	r2, r1, r2
 8011930:	b292      	uxth	r2, r2
 8011932:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	8919      	ldrh	r1, [r3, #8]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	8b3a      	ldrh	r2, [r7, #24]
 8011940:	1a8a      	subs	r2, r1, r2
 8011942:	b292      	uxth	r2, r2
 8011944:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	68fa      	ldr	r2, [r7, #12]
 801194c:	68d2      	ldr	r2, [r2, #12]
 801194e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	2200      	movs	r2, #0
 8011956:	741a      	strb	r2, [r3, #16]
 8011958:	2200      	movs	r2, #0
 801195a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	6858      	ldr	r0, [r3, #4]
 8011960:	68b9      	ldr	r1, [r7, #8]
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	1d1c      	adds	r4, r3, #4
 8011966:	68bb      	ldr	r3, [r7, #8]
 8011968:	7a9d      	ldrb	r5, [r3, #10]
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	7a5b      	ldrb	r3, [r3, #9]
 801196e:	687a      	ldr	r2, [r7, #4]
 8011970:	9202      	str	r2, [sp, #8]
 8011972:	2206      	movs	r2, #6
 8011974:	9201      	str	r2, [sp, #4]
 8011976:	9300      	str	r3, [sp, #0]
 8011978:	462b      	mov	r3, r5
 801197a:	4622      	mov	r2, r4
 801197c:	f001 ffda 	bl	8013934 <ip4_output_if>
 8011980:	4603      	mov	r3, r0
 8011982:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8011984:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011988:	4618      	mov	r0, r3
 801198a:	3720      	adds	r7, #32
 801198c:	46bd      	mov	sp, r7
 801198e:	bdb0      	pop	{r4, r5, r7, pc}
 8011990:	2000bb68 	.word	0x2000bb68

08011994 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b08c      	sub	sp, #48	; 0x30
 8011998:	af04      	add	r7, sp, #16
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	607a      	str	r2, [r7, #4]
 80119a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80119a2:	2200      	movs	r2, #0
 80119a4:	2114      	movs	r1, #20
 80119a6:	2001      	movs	r0, #1
 80119a8:	f7fa f91a 	bl	800bbe0 <pbuf_alloc>
 80119ac:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d05b      	beq.n	8011a6c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	895b      	ldrh	r3, [r3, #10]
 80119b8:	2b13      	cmp	r3, #19
 80119ba:	d806      	bhi.n	80119ca <tcp_rst+0x36>
 80119bc:	4b2d      	ldr	r3, [pc, #180]	; (8011a74 <tcp_rst+0xe0>)
 80119be:	f240 524c 	movw	r2, #1356	; 0x54c
 80119c2:	492d      	ldr	r1, [pc, #180]	; (8011a78 <tcp_rst+0xe4>)
 80119c4:	482d      	ldr	r0, [pc, #180]	; (8011a7c <tcp_rst+0xe8>)
 80119c6:	f003 f8e9 	bl	8014b9c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80119ca:	69fb      	ldr	r3, [r7, #28]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80119d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7f9 fa1a 	bl	800ae0c <lwip_htons>
 80119d8:	4603      	mov	r3, r0
 80119da:	461a      	mov	r2, r3
 80119dc:	69bb      	ldr	r3, [r7, #24]
 80119de:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80119e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7f9 fa12 	bl	800ae0c <lwip_htons>
 80119e8:	4603      	mov	r3, r0
 80119ea:	461a      	mov	r2, r3
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80119f0:	68f8      	ldr	r0, [r7, #12]
 80119f2:	f7f9 fa18 	bl	800ae26 <lwip_htonl>
 80119f6:	4602      	mov	r2, r0
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80119fc:	68b8      	ldr	r0, [r7, #8]
 80119fe:	f7f9 fa12 	bl	800ae26 <lwip_htonl>
 8011a02:	4602      	mov	r2, r0
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011a08:	f245 0014 	movw	r0, #20500	; 0x5014
 8011a0c:	f7f9 f9fe 	bl	800ae0c <lwip_htons>
 8011a10:	4603      	mov	r3, r0
 8011a12:	461a      	mov	r2, r3
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011a18:	69bb      	ldr	r3, [r7, #24]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f042 0208 	orr.w	r2, r2, #8
 8011a20:	739a      	strb	r2, [r3, #14]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011a28:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	741a      	strb	r2, [r3, #16]
 8011a30:	2200      	movs	r2, #0
 8011a32:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011a34:	69bb      	ldr	r3, [r7, #24]
 8011a36:	2200      	movs	r2, #0
 8011a38:	749a      	strb	r2, [r3, #18]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8011a3e:	6838      	ldr	r0, [r7, #0]
 8011a40:	f001 fdce 	bl	80135e0 <ip4_route>
 8011a44:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00b      	beq.n	8011a64 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	9302      	str	r3, [sp, #8]
 8011a50:	2306      	movs	r3, #6
 8011a52:	9301      	str	r3, [sp, #4]
 8011a54:	2300      	movs	r3, #0
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	23ff      	movs	r3, #255	; 0xff
 8011a5a:	683a      	ldr	r2, [r7, #0]
 8011a5c:	6879      	ldr	r1, [r7, #4]
 8011a5e:	69f8      	ldr	r0, [r7, #28]
 8011a60:	f001 ff68 	bl	8013934 <ip4_output_if>
  }
  pbuf_free(p);
 8011a64:	69f8      	ldr	r0, [r7, #28]
 8011a66:	f7fa fc2d 	bl	800c2c4 <pbuf_free>
 8011a6a:	e000      	b.n	8011a6e <tcp_rst+0xda>
    return;
 8011a6c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011a6e:	3720      	adds	r7, #32
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	08017738 	.word	0x08017738
 8011a78:	0801776c 	.word	0x0801776c
 8011a7c:	0801779c 	.word	0x0801779c

08011a80 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d029      	beq.n	8011ae4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a94:	60fb      	str	r3, [r7, #12]
 8011a96:	e002      	b.n	8011a9e <tcp_rexmit_rto+0x1e>
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	60fb      	str	r3, [r7, #12]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1f8      	bne.n	8011a98 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ac2:	2bff      	cmp	r3, #255	; 0xff
 8011ac4:	d007      	beq.n	8011ad6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011acc:	3301      	adds	r3, #1
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7ff fcd5 	bl	801148c <tcp_output>
 8011ae2:	e000      	b.n	8011ae6 <tcp_rexmit_rto+0x66>
    return;
 8011ae4:	bf00      	nop
}
 8011ae6:	3710      	adds	r7, #16
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011aec:	b590      	push	{r4, r7, lr}
 8011aee:	b085      	sub	sp, #20
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d043      	beq.n	8011b84 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b00:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	681a      	ldr	r2, [r3, #0]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	3368      	adds	r3, #104	; 0x68
 8011b0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011b10:	e002      	b.n	8011b18 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d011      	beq.n	8011b44 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7f9 f97c 	bl	800ae26 <lwip_htonl>
 8011b2e:	4604      	mov	r4, r0
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	685b      	ldr	r3, [r3, #4]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7f9 f975 	bl	800ae26 <lwip_htonl>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	dbe6      	blt.n	8011b12 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	68ba      	ldr	r2, [r7, #8]
 8011b50:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d103      	bne.n	8011b62 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2200      	movs	r2, #0
 8011b5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b68:	2bff      	cmp	r3, #255	; 0xff
 8011b6a:	d007      	beq.n	8011b7c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b72:	3301      	adds	r3, #1
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	635a      	str	r2, [r3, #52]	; 0x34
 8011b82:	e000      	b.n	8011b86 <tcp_rexmit+0x9a>
    return;
 8011b84:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011b86:	3714      	adds	r7, #20
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd90      	pop	{r4, r7, pc}

08011b8c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b082      	sub	sp, #8
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d041      	beq.n	8011c20 <tcp_rexmit_fast+0x94>
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	7e9b      	ldrb	r3, [r3, #26]
 8011ba0:	f003 0304 	and.w	r3, r3, #4
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d13b      	bne.n	8011c20 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011ba8:	6878      	ldr	r0, [r7, #4]
 8011baa:	f7ff ff9f 	bl	8011aec <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	bf28      	it	cs
 8011bbe:	4613      	movcs	r3, r2
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	0fda      	lsrs	r2, r3, #31
 8011bc4:	4413      	add	r3, r2
 8011bc6:	105b      	asrs	r3, r3, #1
 8011bc8:	b29a      	uxth	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bdc:	005b      	lsls	r3, r3, #1
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d206      	bcs.n	8011bf0 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011be6:	005b      	lsls	r3, r3, #1
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	0049      	lsls	r1, r1, #1
 8011bfe:	440b      	add	r3, r1
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	4413      	add	r3, r2
 8011c04:	b29a      	uxth	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	7e9b      	ldrb	r3, [r3, #26]
 8011c10:	f043 0304 	orr.w	r3, r3, #4
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8011c20:	bf00      	nop
 8011c22:	3708      	adds	r7, #8
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b08a      	sub	sp, #40	; 0x28
 8011c2c:	af04      	add	r7, sp, #16
 8011c2e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c34:	3b01      	subs	r3, #1
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7f9 f8f5 	bl	800ae26 <lwip_htonl>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2200      	movs	r2, #0
 8011c40:	2100      	movs	r1, #0
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7fe fd56 	bl	80106f4 <tcp_output_alloc_header>
 8011c48:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d102      	bne.n	8011c56 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011c50:	f04f 33ff 	mov.w	r3, #4294967295
 8011c54:	e021      	b.n	8011c9a <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3304      	adds	r3, #4
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f001 fcc0 	bl	80135e0 <ip4_route>
 8011c60:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d102      	bne.n	8011c6e <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011c68:	23fc      	movs	r3, #252	; 0xfc
 8011c6a:	75fb      	strb	r3, [r7, #23]
 8011c6c:	e010      	b.n	8011c90 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8011c6e:	6879      	ldr	r1, [r7, #4]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	1d1a      	adds	r2, r3, #4
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	7a98      	ldrb	r0, [r3, #10]
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	9302      	str	r3, [sp, #8]
 8011c7c:	2306      	movs	r3, #6
 8011c7e:	9301      	str	r3, [sp, #4]
 8011c80:	2300      	movs	r3, #0
 8011c82:	9300      	str	r3, [sp, #0]
 8011c84:	4603      	mov	r3, r0
 8011c86:	6938      	ldr	r0, [r7, #16]
 8011c88:	f001 fe54 	bl	8013934 <ip4_output_if>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011c90:	6938      	ldr	r0, [r7, #16]
 8011c92:	f7fa fb17 	bl	800c2c4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3718      	adds	r7, #24
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011ca2:	b590      	push	{r4, r7, lr}
 8011ca4:	b08f      	sub	sp, #60	; 0x3c
 8011ca6:	af04      	add	r7, sp, #16
 8011ca8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cae:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8011cb0:	6a3b      	ldr	r3, [r7, #32]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d102      	bne.n	8011cbc <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011cba:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8011cbc:	6a3b      	ldr	r3, [r7, #32]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d101      	bne.n	8011cc6 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	e085      	b.n	8011dd2 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011cc6:	6a3b      	ldr	r3, [r7, #32]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	899b      	ldrh	r3, [r3, #12]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7f9 f89c 	bl	800ae0c <lwip_htons>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	f003 0301 	and.w	r3, r3, #1
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d005      	beq.n	8011cea <tcp_zero_window_probe+0x48>
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	891b      	ldrh	r3, [r3, #8]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d101      	bne.n	8011cea <tcp_zero_window_probe+0x48>
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	e000      	b.n	8011cec <tcp_zero_window_probe+0x4a>
 8011cea:	2300      	movs	r3, #0
 8011cec:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011cee:	7ffb      	ldrb	r3, [r7, #31]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	bf0c      	ite	eq
 8011cf4:	2301      	moveq	r3, #1
 8011cf6:	2300      	movne	r3, #0
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8011cfc:	6a3b      	ldr	r3, [r7, #32]
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	685b      	ldr	r3, [r3, #4]
 8011d02:	8bba      	ldrh	r2, [r7, #28]
 8011d04:	2100      	movs	r1, #0
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7fe fcf4 	bl	80106f4 <tcp_output_alloc_header>
 8011d0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d102      	bne.n	8011d1a <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011d14:	f04f 33ff 	mov.w	r3, #4294967295
 8011d18:	e05b      	b.n	8011dd2 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011d20:	7ffb      	ldrb	r3, [r7, #31]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00e      	beq.n	8011d44 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	899b      	ldrh	r3, [r3, #12]
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d30:	b29c      	uxth	r4, r3
 8011d32:	2011      	movs	r0, #17
 8011d34:	f7f9 f86a 	bl	800ae0c <lwip_htons>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	4323      	orrs	r3, r4
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	819a      	strh	r2, [r3, #12]
 8011d42:	e010      	b.n	8011d66 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011d44:	69bb      	ldr	r3, [r7, #24]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	3314      	adds	r3, #20
 8011d4a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011d4c:	6a3b      	ldr	r3, [r7, #32]
 8011d4e:	6858      	ldr	r0, [r3, #4]
 8011d50:	6a3b      	ldr	r3, [r7, #32]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	891a      	ldrh	r2, [r3, #8]
 8011d56:	6a3b      	ldr	r3, [r7, #32]
 8011d58:	891b      	ldrh	r3, [r3, #8]
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	b29b      	uxth	r3, r3
 8011d5e:	2201      	movs	r2, #1
 8011d60:	6939      	ldr	r1, [r7, #16]
 8011d62:	f7fa fca9 	bl	800c6b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011d66:	6a3b      	ldr	r3, [r7, #32]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f9 f85a 	bl	800ae26 <lwip_htonl>
 8011d72:	4603      	mov	r3, r0
 8011d74:	3301      	adds	r3, #1
 8011d76:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	1ad3      	subs	r3, r2, r3
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	da02      	bge.n	8011d8a <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	68fa      	ldr	r2, [r7, #12]
 8011d88:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	3304      	adds	r3, #4
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f001 fc26 	bl	80135e0 <ip4_route>
 8011d94:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d103      	bne.n	8011da4 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8011d9c:	23fc      	movs	r3, #252	; 0xfc
 8011d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011da2:	e011      	b.n	8011dc8 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011da4:	6879      	ldr	r1, [r7, #4]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	1d1a      	adds	r2, r3, #4
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	7a98      	ldrb	r0, [r3, #10]
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	9302      	str	r3, [sp, #8]
 8011db2:	2306      	movs	r3, #6
 8011db4:	9301      	str	r3, [sp, #4]
 8011db6:	2300      	movs	r3, #0
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	4603      	mov	r3, r0
 8011dbc:	69b8      	ldr	r0, [r7, #24]
 8011dbe:	f001 fdb9 	bl	8013934 <ip4_output_if>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011dc8:	69b8      	ldr	r0, [r7, #24]
 8011dca:	f7fa fa7b 	bl	800c2c4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	372c      	adds	r7, #44	; 0x2c
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd90      	pop	{r4, r7, pc}
	...

08011ddc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011de4:	f7fa fd4a 	bl	800c87c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011de8:	4b0a      	ldr	r3, [pc, #40]	; (8011e14 <tcpip_tcp_timer+0x38>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d103      	bne.n	8011df8 <tcpip_tcp_timer+0x1c>
 8011df0:	4b09      	ldr	r3, [pc, #36]	; (8011e18 <tcpip_tcp_timer+0x3c>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d005      	beq.n	8011e04 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011df8:	2200      	movs	r2, #0
 8011dfa:	4908      	ldr	r1, [pc, #32]	; (8011e1c <tcpip_tcp_timer+0x40>)
 8011dfc:	20fa      	movs	r0, #250	; 0xfa
 8011dfe:	f000 f86f 	bl	8011ee0 <sys_timeout>
 8011e02:	e003      	b.n	8011e0c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011e04:	4b06      	ldr	r3, [pc, #24]	; (8011e20 <tcpip_tcp_timer+0x44>)
 8011e06:	2200      	movs	r2, #0
 8011e08:	601a      	str	r2, [r3, #0]
  }
}
 8011e0a:	bf00      	nop
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}
 8011e14:	2000bb64 	.word	0x2000bb64
 8011e18:	2000bb74 	.word	0x2000bb74
 8011e1c:	08011ddd 	.word	0x08011ddd
 8011e20:	20004b24 	.word	0x20004b24

08011e24 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011e28:	4b0a      	ldr	r3, [pc, #40]	; (8011e54 <tcp_timer_needed+0x30>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d10f      	bne.n	8011e50 <tcp_timer_needed+0x2c>
 8011e30:	4b09      	ldr	r3, [pc, #36]	; (8011e58 <tcp_timer_needed+0x34>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d103      	bne.n	8011e40 <tcp_timer_needed+0x1c>
 8011e38:	4b08      	ldr	r3, [pc, #32]	; (8011e5c <tcp_timer_needed+0x38>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d007      	beq.n	8011e50 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011e40:	4b04      	ldr	r3, [pc, #16]	; (8011e54 <tcp_timer_needed+0x30>)
 8011e42:	2201      	movs	r2, #1
 8011e44:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011e46:	2200      	movs	r2, #0
 8011e48:	4905      	ldr	r1, [pc, #20]	; (8011e60 <tcp_timer_needed+0x3c>)
 8011e4a:	20fa      	movs	r0, #250	; 0xfa
 8011e4c:	f000 f848 	bl	8011ee0 <sys_timeout>
  }
}
 8011e50:	bf00      	nop
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	20004b24 	.word	0x20004b24
 8011e58:	2000bb64 	.word	0x2000bb64
 8011e5c:	2000bb74 	.word	0x2000bb74
 8011e60:	08011ddd 	.word	0x08011ddd

08011e64 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	4903      	ldr	r1, [pc, #12]	; (8011e8c <cyclic_timer+0x28>)
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f000 f82e 	bl	8011ee0 <sys_timeout>
}
 8011e84:	bf00      	nop
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}
 8011e8c:	08011e65 	.word	0x08011e65

08011e90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011e96:	2301      	movs	r3, #1
 8011e98:	607b      	str	r3, [r7, #4]
 8011e9a:	e00e      	b.n	8011eba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011e9c:	4a0d      	ldr	r2, [pc, #52]	; (8011ed4 <sys_timeouts_init+0x44>)
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	00db      	lsls	r3, r3, #3
 8011ea8:	4a0a      	ldr	r2, [pc, #40]	; (8011ed4 <sys_timeouts_init+0x44>)
 8011eaa:	4413      	add	r3, r2
 8011eac:	461a      	mov	r2, r3
 8011eae:	490a      	ldr	r1, [pc, #40]	; (8011ed8 <sys_timeouts_init+0x48>)
 8011eb0:	f000 f816 	bl	8011ee0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3301      	adds	r3, #1
 8011eb8:	607b      	str	r3, [r7, #4]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b02      	cmp	r3, #2
 8011ebe:	d9ed      	bls.n	8011e9c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8011ec0:	f7f3 f826 	bl	8004f10 <sys_now>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	4a05      	ldr	r2, [pc, #20]	; (8011edc <sys_timeouts_init+0x4c>)
 8011ec8:	6013      	str	r3, [r2, #0]
}
 8011eca:	bf00      	nop
 8011ecc:	3708      	adds	r7, #8
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	0801874c 	.word	0x0801874c
 8011ed8:	08011e65 	.word	0x08011e65
 8011edc:	20004b20 	.word	0x20004b20

08011ee0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b088      	sub	sp, #32
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011eec:	200a      	movs	r0, #10
 8011eee:	f7f9 fbe3 	bl	800b6b8 <memp_malloc>
 8011ef2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d10a      	bne.n	8011f10 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	f040 8084 	bne.w	801200a <sys_timeout+0x12a>
 8011f02:	4b44      	ldr	r3, [pc, #272]	; (8012014 <sys_timeout+0x134>)
 8011f04:	22d4      	movs	r2, #212	; 0xd4
 8011f06:	4944      	ldr	r1, [pc, #272]	; (8012018 <sys_timeout+0x138>)
 8011f08:	4844      	ldr	r0, [pc, #272]	; (801201c <sys_timeout+0x13c>)
 8011f0a:	f002 fe47 	bl	8014b9c <iprintf>
    return;
 8011f0e:	e07c      	b.n	801200a <sys_timeout+0x12a>
  }

  now = sys_now();
 8011f10:	f7f2 fffe 	bl	8004f10 <sys_now>
 8011f14:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011f16:	4b42      	ldr	r3, [pc, #264]	; (8012020 <sys_timeout+0x140>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d105      	bne.n	8011f2a <sys_timeout+0x4a>
    diff = 0;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8011f22:	4a40      	ldr	r2, [pc, #256]	; (8012024 <sys_timeout+0x144>)
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	6013      	str	r3, [r2, #0]
 8011f28:	e004      	b.n	8011f34 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011f2a:	4b3e      	ldr	r3, [pc, #248]	; (8012024 <sys_timeout+0x144>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	693a      	ldr	r2, [r7, #16]
 8011f30:	1ad3      	subs	r3, r2, r3
 8011f32:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	2200      	movs	r2, #0
 8011f38:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	687a      	ldr	r2, [r7, #4]
 8011f44:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011f46:	68fa      	ldr	r2, [r7, #12]
 8011f48:	69bb      	ldr	r3, [r7, #24]
 8011f4a:	441a      	add	r2, r3
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011f50:	4b33      	ldr	r3, [pc, #204]	; (8012020 <sys_timeout+0x140>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d103      	bne.n	8011f60 <sys_timeout+0x80>
    next_timeout = timeout;
 8011f58:	4a31      	ldr	r2, [pc, #196]	; (8012020 <sys_timeout+0x140>)
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	6013      	str	r3, [r2, #0]
    return;
 8011f5e:	e055      	b.n	801200c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8011f60:	4b2f      	ldr	r3, [pc, #188]	; (8012020 <sys_timeout+0x140>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d20f      	bcs.n	8011f8c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011f6c:	4b2c      	ldr	r3, [pc, #176]	; (8012020 <sys_timeout+0x140>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	6859      	ldr	r1, [r3, #4]
 8011f72:	4b2b      	ldr	r3, [pc, #172]	; (8012020 <sys_timeout+0x140>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	1a8a      	subs	r2, r1, r2
 8011f7a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011f7c:	4b28      	ldr	r3, [pc, #160]	; (8012020 <sys_timeout+0x140>)
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011f84:	4a26      	ldr	r2, [pc, #152]	; (8012020 <sys_timeout+0x140>)
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	6013      	str	r3, [r2, #0]
 8011f8a:	e03f      	b.n	801200c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011f8c:	4b24      	ldr	r3, [pc, #144]	; (8012020 <sys_timeout+0x140>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	61fb      	str	r3, [r7, #28]
 8011f92:	e036      	b.n	8012002 <sys_timeout+0x122>
      timeout->time -= t->time;
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	685a      	ldr	r2, [r3, #4]
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	1ad2      	subs	r2, r2, r3
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8011fa2:	69fb      	ldr	r3, [r7, #28]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d006      	beq.n	8011fb8 <sys_timeout+0xd8>
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	685a      	ldr	r2, [r3, #4]
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d921      	bls.n	8011ffc <sys_timeout+0x11c>
        if (t->next != NULL) {
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d009      	beq.n	8011fd4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	6859      	ldr	r1, [r3, #4]
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	685a      	ldr	r2, [r3, #4]
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	1a8a      	subs	r2, r1, r2
 8011fd0:	605a      	str	r2, [r3, #4]
 8011fd2:	e00b      	b.n	8011fec <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d206      	bcs.n	8011fec <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8011fde:	4b10      	ldr	r3, [pc, #64]	; (8012020 <sys_timeout+0x140>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	685a      	ldr	r2, [r3, #4]
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	441a      	add	r2, r3
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	697a      	ldr	r2, [r7, #20]
 8011ff8:	601a      	str	r2, [r3, #0]
        break;
 8011ffa:	e007      	b.n	801200c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	61fb      	str	r3, [r7, #28]
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d1c5      	bne.n	8011f94 <sys_timeout+0xb4>
 8012008:	e000      	b.n	801200c <sys_timeout+0x12c>
    return;
 801200a:	bf00      	nop
      }
    }
  }
}
 801200c:	3720      	adds	r7, #32
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	08017b7c 	.word	0x08017b7c
 8012018:	08017bb0 	.word	0x08017bb0
 801201c:	08017bf0 	.word	0x08017bf0
 8012020:	20004b1c 	.word	0x20004b1c
 8012024:	20004b20 	.word	0x20004b20

08012028 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 8012032:	4b1f      	ldr	r3, [pc, #124]	; (80120b0 <sys_untimeout+0x88>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d036      	beq.n	80120a8 <sys_untimeout+0x80>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801203a:	4b1d      	ldr	r3, [pc, #116]	; (80120b0 <sys_untimeout+0x88>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	60bb      	str	r3, [r7, #8]
 8012040:	2300      	movs	r3, #0
 8012042:	60fb      	str	r3, [r7, #12]
 8012044:	e02c      	b.n	80120a0 <sys_untimeout+0x78>
    if ((t->h == handler) && (t->arg == arg)) {
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	689b      	ldr	r3, [r3, #8]
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	429a      	cmp	r2, r3
 801204e:	d122      	bne.n	8012096 <sys_untimeout+0x6e>
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	683a      	ldr	r2, [r7, #0]
 8012056:	429a      	cmp	r2, r3
 8012058:	d11d      	bne.n	8012096 <sys_untimeout+0x6e>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d104      	bne.n	801206a <sys_untimeout+0x42>
        next_timeout = t->next;
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	4a12      	ldr	r2, [pc, #72]	; (80120b0 <sys_untimeout+0x88>)
 8012066:	6013      	str	r3, [r2, #0]
 8012068:	e003      	b.n	8012072 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	601a      	str	r2, [r3, #0]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d008      	beq.n	801208c <sys_untimeout+0x64>
        t->next->time += t->time;
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	6859      	ldr	r1, [r3, #4]
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	685a      	ldr	r2, [r3, #4]
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	440a      	add	r2, r1
 801208a:	605a      	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801208c:	68b9      	ldr	r1, [r7, #8]
 801208e:	200a      	movs	r0, #10
 8012090:	f7f9 fb64 	bl	800b75c <memp_free>
      return;
 8012094:	e009      	b.n	80120aa <sys_untimeout+0x82>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	60fb      	str	r3, [r7, #12]
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	60bb      	str	r3, [r7, #8]
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1cf      	bne.n	8012046 <sys_untimeout+0x1e>
    }
  }
  return;
 80120a6:	e000      	b.n	80120aa <sys_untimeout+0x82>
    return;
 80120a8:	bf00      	nop
}
 80120aa:	3710      	adds	r7, #16
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}
 80120b0:	20004b1c 	.word	0x20004b1c

080120b4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b086      	sub	sp, #24
 80120b8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80120ba:	4b24      	ldr	r3, [pc, #144]	; (801214c <sys_check_timeouts+0x98>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d03f      	beq.n	8012142 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80120c2:	f7f2 ff25 	bl	8004f10 <sys_now>
 80120c6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80120c8:	4b21      	ldr	r3, [pc, #132]	; (8012150 <sys_check_timeouts+0x9c>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	1ad3      	subs	r3, r2, r3
 80120d0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80120d2:	2300      	movs	r3, #0
 80120d4:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80120d6:	4b1d      	ldr	r3, [pc, #116]	; (801214c <sys_check_timeouts+0x98>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d02c      	beq.n	801213c <sys_check_timeouts+0x88>
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	685b      	ldr	r3, [r3, #4]
 80120e6:	697a      	ldr	r2, [r7, #20]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d327      	bcc.n	801213c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80120ec:	2301      	movs	r3, #1
 80120ee:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	685a      	ldr	r2, [r3, #4]
 80120f4:	4b16      	ldr	r3, [pc, #88]	; (8012150 <sys_check_timeouts+0x9c>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	4413      	add	r3, r2
 80120fa:	4a15      	ldr	r2, [pc, #84]	; (8012150 <sys_check_timeouts+0x9c>)
 80120fc:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	697a      	ldr	r2, [r7, #20]
 8012104:	1ad3      	subs	r3, r2, r3
 8012106:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a0f      	ldr	r2, [pc, #60]	; (801214c <sys_check_timeouts+0x98>)
 801210e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	689b      	ldr	r3, [r3, #8]
 8012114:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801211c:	68b9      	ldr	r1, [r7, #8]
 801211e:	200a      	movs	r0, #10
 8012120:	f7f9 fb1c 	bl	800b75c <memp_free>
        if (handler != NULL) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d008      	beq.n	801213c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801212a:	480a      	ldr	r0, [pc, #40]	; (8012154 <sys_check_timeouts+0xa0>)
 801212c:	f002 fc8e 	bl	8014a4c <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6838      	ldr	r0, [r7, #0]
 8012134:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8012136:	4807      	ldr	r0, [pc, #28]	; (8012154 <sys_check_timeouts+0xa0>)
 8012138:	f002 fc97 	bl	8014a6a <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 801213c:	7cfb      	ldrb	r3, [r7, #19]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d1c7      	bne.n	80120d2 <sys_check_timeouts+0x1e>
  }
}
 8012142:	bf00      	nop
 8012144:	3718      	adds	r7, #24
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	20004b1c 	.word	0x20004b1c
 8012150:	20004b20 	.word	0x20004b20
 8012154:	20008418 	.word	0x20008418

08012158 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 801215e:	4b0f      	ldr	r3, [pc, #60]	; (801219c <sys_timeouts_sleeptime+0x44>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d102      	bne.n	801216c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8012166:	f04f 33ff 	mov.w	r3, #4294967295
 801216a:	e013      	b.n	8012194 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 801216c:	f7f2 fed0 	bl	8004f10 <sys_now>
 8012170:	4602      	mov	r2, r0
 8012172:	4b0b      	ldr	r3, [pc, #44]	; (80121a0 <sys_timeouts_sleeptime+0x48>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	1ad3      	subs	r3, r2, r3
 8012178:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801217a:	4b08      	ldr	r3, [pc, #32]	; (801219c <sys_timeouts_sleeptime+0x44>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d901      	bls.n	801218a <sys_timeouts_sleeptime+0x32>
    return 0;
 8012186:	2300      	movs	r3, #0
 8012188:	e004      	b.n	8012194 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801218a:	4b04      	ldr	r3, [pc, #16]	; (801219c <sys_timeouts_sleeptime+0x44>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	685a      	ldr	r2, [r3, #4]
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	1ad3      	subs	r3, r2, r3
  }
}
 8012194:	4618      	mov	r0, r3
 8012196:	3708      	adds	r7, #8
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}
 801219c:	20004b1c 	.word	0x20004b1c
 80121a0:	20004b20 	.word	0x20004b20

080121a4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80121ae:	4b0f      	ldr	r3, [pc, #60]	; (80121ec <sys_timeouts_mbox_fetch+0x48>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d105      	bne.n	80121c2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80121b6:	2200      	movs	r2, #0
 80121b8:	6839      	ldr	r1, [r7, #0]
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f002 fbcc 	bl	8014958 <sys_arch_mbox_fetch>
    return;
 80121c0:	e011      	b.n	80121e6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80121c2:	f7ff ffc9 	bl	8012158 <sys_timeouts_sleeptime>
 80121c6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d008      	beq.n	80121e0 <sys_timeouts_mbox_fetch+0x3c>
 80121ce:	68fa      	ldr	r2, [r7, #12]
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f002 fbc0 	bl	8014958 <sys_arch_mbox_fetch>
 80121d8:	4603      	mov	r3, r0
 80121da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121de:	d102      	bne.n	80121e6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80121e0:	f7ff ff68 	bl	80120b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80121e4:	e7e3      	b.n	80121ae <sys_timeouts_mbox_fetch+0xa>
  }
}
 80121e6:	3710      	adds	r7, #16
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	20004b1c 	.word	0x20004b1c

080121f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80121f0:	b480      	push	{r7}
 80121f2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80121f4:	bf00      	nop
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bc80      	pop	{r7}
 80121fa:	4770      	bx	lr

080121fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80121fc:	b480      	push	{r7}
 80121fe:	b085      	sub	sp, #20
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	4613      	mov	r3, r2
 8012208:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801220a:	79fb      	ldrb	r3, [r7, #7]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d018      	beq.n	8012242 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d013      	beq.n	801223e <udp_input_local_match+0x42>
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d00f      	beq.n	801223e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801221e:	4b13      	ldr	r3, [pc, #76]	; (801226c <udp_input_local_match+0x70>)
 8012220:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012226:	d00a      	beq.n	801223e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	4b0f      	ldr	r3, [pc, #60]	; (801226c <udp_input_local_match+0x70>)
 801222e:	695b      	ldr	r3, [r3, #20]
 8012230:	405a      	eors	r2, r3
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	3308      	adds	r3, #8
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801223a:	2b00      	cmp	r3, #0
 801223c:	d110      	bne.n	8012260 <udp_input_local_match+0x64>
          return 1;
 801223e:	2301      	movs	r3, #1
 8012240:	e00f      	b.n	8012262 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d009      	beq.n	801225c <udp_input_local_match+0x60>
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d005      	beq.n	801225c <udp_input_local_match+0x60>
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	4b05      	ldr	r3, [pc, #20]	; (801226c <udp_input_local_match+0x70>)
 8012256:	695b      	ldr	r3, [r3, #20]
 8012258:	429a      	cmp	r2, r3
 801225a:	d101      	bne.n	8012260 <udp_input_local_match+0x64>
      return 1;
 801225c:	2301      	movs	r3, #1
 801225e:	e000      	b.n	8012262 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3714      	adds	r7, #20
 8012266:	46bd      	mov	sp, r7
 8012268:	bc80      	pop	{r7}
 801226a:	4770      	bx	lr
 801226c:	20008434 	.word	0x20008434

08012270 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012270:	b590      	push	{r4, r7, lr}
 8012272:	b08d      	sub	sp, #52	; 0x34
 8012274:	af02      	add	r7, sp, #8
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	895b      	ldrh	r3, [r3, #10]
 8012282:	2b07      	cmp	r3, #7
 8012284:	d803      	bhi.n	801228e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f7fa f81c 	bl	800c2c4 <pbuf_free>
    goto end;
 801228c:	e0c6      	b.n	801241c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012294:	4b63      	ldr	r3, [pc, #396]	; (8012424 <udp_input+0x1b4>)
 8012296:	695b      	ldr	r3, [r3, #20]
 8012298:	4a62      	ldr	r2, [pc, #392]	; (8012424 <udp_input+0x1b4>)
 801229a:	6812      	ldr	r2, [r2, #0]
 801229c:	4611      	mov	r1, r2
 801229e:	4618      	mov	r0, r3
 80122a0:	f001 fc1a 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 80122a4:	4603      	mov	r3, r0
 80122a6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	881b      	ldrh	r3, [r3, #0]
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7f8 fdac 	bl	800ae0c <lwip_htons>
 80122b4:	4603      	mov	r3, r0
 80122b6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	885b      	ldrh	r3, [r3, #2]
 80122bc:	b29b      	uxth	r3, r3
 80122be:	4618      	mov	r0, r3
 80122c0:	f7f8 fda4 	bl	800ae0c <lwip_htons>
 80122c4:	4603      	mov	r3, r0
 80122c6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80122c8:	2300      	movs	r3, #0
 80122ca:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80122cc:	2300      	movs	r3, #0
 80122ce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80122d0:	2300      	movs	r3, #0
 80122d2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80122d4:	4b54      	ldr	r3, [pc, #336]	; (8012428 <udp_input+0x1b8>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	627b      	str	r3, [r7, #36]	; 0x24
 80122da:	e03b      	b.n	8012354 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80122dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122de:	8a5b      	ldrh	r3, [r3, #18]
 80122e0:	89fa      	ldrh	r2, [r7, #14]
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d131      	bne.n	801234a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80122e6:	7cfb      	ldrb	r3, [r7, #19]
 80122e8:	461a      	mov	r2, r3
 80122ea:	6839      	ldr	r1, [r7, #0]
 80122ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122ee:	f7ff ff85 	bl	80121fc <udp_input_local_match>
 80122f2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d028      	beq.n	801234a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80122f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fa:	7c1b      	ldrb	r3, [r3, #16]
 80122fc:	f003 0304 	and.w	r3, r3, #4
 8012300:	2b00      	cmp	r3, #0
 8012302:	d104      	bne.n	801230e <udp_input+0x9e>
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d101      	bne.n	801230e <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012310:	8a9b      	ldrh	r3, [r3, #20]
 8012312:	8a3a      	ldrh	r2, [r7, #16]
 8012314:	429a      	cmp	r2, r3
 8012316:	d118      	bne.n	801234a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801231c:	2b00      	cmp	r3, #0
 801231e:	d005      	beq.n	801232c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	685a      	ldr	r2, [r3, #4]
 8012324:	4b3f      	ldr	r3, [pc, #252]	; (8012424 <udp_input+0x1b4>)
 8012326:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012328:	429a      	cmp	r2, r3
 801232a:	d10e      	bne.n	801234a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801232c:	6a3b      	ldr	r3, [r7, #32]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d014      	beq.n	801235c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012334:	68da      	ldr	r2, [r3, #12]
 8012336:	6a3b      	ldr	r3, [r7, #32]
 8012338:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801233a:	4b3b      	ldr	r3, [pc, #236]	; (8012428 <udp_input+0x1b8>)
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012340:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012342:	4a39      	ldr	r2, [pc, #228]	; (8012428 <udp_input+0x1b8>)
 8012344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012346:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012348:	e008      	b.n	801235c <udp_input+0xec>
      }
    }

    prev = pcb;
 801234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012350:	68db      	ldr	r3, [r3, #12]
 8012352:	627b      	str	r3, [r7, #36]	; 0x24
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	2b00      	cmp	r3, #0
 8012358:	d1c0      	bne.n	80122dc <udp_input+0x6c>
 801235a:	e000      	b.n	801235e <udp_input+0xee>
        break;
 801235c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012360:	2b00      	cmp	r3, #0
 8012362:	d101      	bne.n	8012368 <udp_input+0xf8>
    pcb = uncon_pcb;
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	2b00      	cmp	r3, #0
 801236c:	d002      	beq.n	8012374 <udp_input+0x104>
    for_us = 1;
 801236e:	2301      	movs	r3, #1
 8012370:	76fb      	strb	r3, [r7, #27]
 8012372:	e00a      	b.n	801238a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	3304      	adds	r3, #4
 8012378:	681a      	ldr	r2, [r3, #0]
 801237a:	4b2a      	ldr	r3, [pc, #168]	; (8012424 <udp_input+0x1b4>)
 801237c:	695b      	ldr	r3, [r3, #20]
 801237e:	429a      	cmp	r2, r3
 8012380:	bf0c      	ite	eq
 8012382:	2301      	moveq	r3, #1
 8012384:	2300      	movne	r3, #0
 8012386:	b2db      	uxtb	r3, r3
 8012388:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801238a:	7efb      	ldrb	r3, [r7, #27]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d042      	beq.n	8012416 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012390:	f06f 0107 	mvn.w	r1, #7
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7f9 ff71 	bl	800c27c <pbuf_header>
 801239a:	4603      	mov	r3, r0
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00a      	beq.n	80123b6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80123a0:	4b22      	ldr	r3, [pc, #136]	; (801242c <udp_input+0x1bc>)
 80123a2:	f240 1255 	movw	r2, #341	; 0x155
 80123a6:	4922      	ldr	r1, [pc, #136]	; (8012430 <udp_input+0x1c0>)
 80123a8:	4822      	ldr	r0, [pc, #136]	; (8012434 <udp_input+0x1c4>)
 80123aa:	f002 fbf7 	bl	8014b9c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7f9 ff88 	bl	800c2c4 <pbuf_free>
      goto end;
 80123b4:	e032      	b.n	801241c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80123b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d012      	beq.n	80123e2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80123bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123be:	699b      	ldr	r3, [r3, #24]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00a      	beq.n	80123da <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80123c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c6:	699c      	ldr	r4, [r3, #24]
 80123c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ca:	69d8      	ldr	r0, [r3, #28]
 80123cc:	8a3b      	ldrh	r3, [r7, #16]
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	4b19      	ldr	r3, [pc, #100]	; (8012438 <udp_input+0x1c8>)
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80123d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80123d8:	e021      	b.n	801241e <udp_input+0x1ae>
        pbuf_free(p);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7f9 ff72 	bl	800c2c4 <pbuf_free>
        goto end;
 80123e0:	e01c      	b.n	801241c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80123e2:	7cfb      	ldrb	r3, [r7, #19]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d112      	bne.n	801240e <udp_input+0x19e>
 80123e8:	4b0e      	ldr	r3, [pc, #56]	; (8012424 <udp_input+0x1b4>)
 80123ea:	695b      	ldr	r3, [r3, #20]
 80123ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123f0:	2be0      	cmp	r3, #224	; 0xe0
 80123f2:	d00c      	beq.n	801240e <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80123f4:	4b0b      	ldr	r3, [pc, #44]	; (8012424 <udp_input+0x1b4>)
 80123f6:	899b      	ldrh	r3, [r3, #12]
 80123f8:	3308      	adds	r3, #8
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	b21b      	sxth	r3, r3
 80123fe:	4619      	mov	r1, r3
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f7f9 ff4d 	bl	800c2a0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012406:	2103      	movs	r1, #3
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f001 f861 	bl	80134d0 <icmp_dest_unreach>
      pbuf_free(p);
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7f9 ff58 	bl	800c2c4 <pbuf_free>
  return;
 8012414:	e003      	b.n	801241e <udp_input+0x1ae>
    pbuf_free(p);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7f9 ff54 	bl	800c2c4 <pbuf_free>
  return;
 801241c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801241e:	372c      	adds	r7, #44	; 0x2c
 8012420:	46bd      	mov	sp, r7
 8012422:	bd90      	pop	{r4, r7, pc}
 8012424:	20008434 	.word	0x20008434
 8012428:	2000bb7c 	.word	0x2000bb7c
 801242c:	08017c18 	.word	0x08017c18
 8012430:	08017c48 	.word	0x08017c48
 8012434:	08017c5c 	.word	0x08017c5c
 8012438:	20008444 	.word	0x20008444

0801243c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801243c:	b480      	push	{r7}
 801243e:	b085      	sub	sp, #20
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
 8012444:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d01e      	beq.n	801248a <udp_netif_ip_addr_changed+0x4e>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d01a      	beq.n	801248a <udp_netif_ip_addr_changed+0x4e>
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d017      	beq.n	801248a <udp_netif_ip_addr_changed+0x4e>
 801245a:	683b      	ldr	r3, [r7, #0]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d013      	beq.n	801248a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012462:	4b0c      	ldr	r3, [pc, #48]	; (8012494 <udp_netif_ip_addr_changed+0x58>)
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	60fb      	str	r3, [r7, #12]
 8012468:	e00c      	b.n	8012484 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681a      	ldr	r2, [r3, #0]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	429a      	cmp	r2, r3
 8012474:	d103      	bne.n	801247e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	68db      	ldr	r3, [r3, #12]
 8012482:	60fb      	str	r3, [r7, #12]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1ef      	bne.n	801246a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801248a:	bf00      	nop
 801248c:	3714      	adds	r7, #20
 801248e:	46bd      	mov	sp, r7
 8012490:	bc80      	pop	{r7}
 8012492:	4770      	bx	lr
 8012494:	2000bb7c 	.word	0x2000bb7c

08012498 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80124a0:	4915      	ldr	r1, [pc, #84]	; (80124f8 <etharp_free_entry+0x60>)
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	4613      	mov	r3, r2
 80124a6:	005b      	lsls	r3, r3, #1
 80124a8:	4413      	add	r3, r2
 80124aa:	00db      	lsls	r3, r3, #3
 80124ac:	440b      	add	r3, r1
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d013      	beq.n	80124dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80124b4:	4910      	ldr	r1, [pc, #64]	; (80124f8 <etharp_free_entry+0x60>)
 80124b6:	687a      	ldr	r2, [r7, #4]
 80124b8:	4613      	mov	r3, r2
 80124ba:	005b      	lsls	r3, r3, #1
 80124bc:	4413      	add	r3, r2
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	440b      	add	r3, r1
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f9 fefd 	bl	800c2c4 <pbuf_free>
    arp_table[i].q = NULL;
 80124ca:	490b      	ldr	r1, [pc, #44]	; (80124f8 <etharp_free_entry+0x60>)
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	4613      	mov	r3, r2
 80124d0:	005b      	lsls	r3, r3, #1
 80124d2:	4413      	add	r3, r2
 80124d4:	00db      	lsls	r3, r3, #3
 80124d6:	440b      	add	r3, r1
 80124d8:	2200      	movs	r2, #0
 80124da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80124dc:	4906      	ldr	r1, [pc, #24]	; (80124f8 <etharp_free_entry+0x60>)
 80124de:	687a      	ldr	r2, [r7, #4]
 80124e0:	4613      	mov	r3, r2
 80124e2:	005b      	lsls	r3, r3, #1
 80124e4:	4413      	add	r3, r2
 80124e6:	00db      	lsls	r3, r3, #3
 80124e8:	440b      	add	r3, r1
 80124ea:	3314      	adds	r3, #20
 80124ec:	2200      	movs	r2, #0
 80124ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80124f0:	bf00      	nop
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	20004b28 	.word	0x20004b28

080124fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012502:	2300      	movs	r3, #0
 8012504:	71fb      	strb	r3, [r7, #7]
 8012506:	e096      	b.n	8012636 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012508:	79fa      	ldrb	r2, [r7, #7]
 801250a:	494f      	ldr	r1, [pc, #316]	; (8012648 <etharp_tmr+0x14c>)
 801250c:	4613      	mov	r3, r2
 801250e:	005b      	lsls	r3, r3, #1
 8012510:	4413      	add	r3, r2
 8012512:	00db      	lsls	r3, r3, #3
 8012514:	440b      	add	r3, r1
 8012516:	3314      	adds	r3, #20
 8012518:	781b      	ldrb	r3, [r3, #0]
 801251a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801251c:	79bb      	ldrb	r3, [r7, #6]
 801251e:	2b00      	cmp	r3, #0
 8012520:	f000 8086 	beq.w	8012630 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8012524:	79fa      	ldrb	r2, [r7, #7]
 8012526:	4948      	ldr	r1, [pc, #288]	; (8012648 <etharp_tmr+0x14c>)
 8012528:	4613      	mov	r3, r2
 801252a:	005b      	lsls	r3, r3, #1
 801252c:	4413      	add	r3, r2
 801252e:	00db      	lsls	r3, r3, #3
 8012530:	440b      	add	r3, r1
 8012532:	3312      	adds	r3, #18
 8012534:	881b      	ldrh	r3, [r3, #0]
 8012536:	3301      	adds	r3, #1
 8012538:	b298      	uxth	r0, r3
 801253a:	4943      	ldr	r1, [pc, #268]	; (8012648 <etharp_tmr+0x14c>)
 801253c:	4613      	mov	r3, r2
 801253e:	005b      	lsls	r3, r3, #1
 8012540:	4413      	add	r3, r2
 8012542:	00db      	lsls	r3, r3, #3
 8012544:	440b      	add	r3, r1
 8012546:	3312      	adds	r3, #18
 8012548:	4602      	mov	r2, r0
 801254a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801254c:	79fa      	ldrb	r2, [r7, #7]
 801254e:	493e      	ldr	r1, [pc, #248]	; (8012648 <etharp_tmr+0x14c>)
 8012550:	4613      	mov	r3, r2
 8012552:	005b      	lsls	r3, r3, #1
 8012554:	4413      	add	r3, r2
 8012556:	00db      	lsls	r3, r3, #3
 8012558:	440b      	add	r3, r1
 801255a:	3312      	adds	r3, #18
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012562:	d215      	bcs.n	8012590 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012564:	79fa      	ldrb	r2, [r7, #7]
 8012566:	4938      	ldr	r1, [pc, #224]	; (8012648 <etharp_tmr+0x14c>)
 8012568:	4613      	mov	r3, r2
 801256a:	005b      	lsls	r3, r3, #1
 801256c:	4413      	add	r3, r2
 801256e:	00db      	lsls	r3, r3, #3
 8012570:	440b      	add	r3, r1
 8012572:	3314      	adds	r3, #20
 8012574:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012576:	2b01      	cmp	r3, #1
 8012578:	d10f      	bne.n	801259a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801257a:	79fa      	ldrb	r2, [r7, #7]
 801257c:	4932      	ldr	r1, [pc, #200]	; (8012648 <etharp_tmr+0x14c>)
 801257e:	4613      	mov	r3, r2
 8012580:	005b      	lsls	r3, r3, #1
 8012582:	4413      	add	r3, r2
 8012584:	00db      	lsls	r3, r3, #3
 8012586:	440b      	add	r3, r1
 8012588:	3312      	adds	r3, #18
 801258a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801258c:	2b04      	cmp	r3, #4
 801258e:	d904      	bls.n	801259a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012590:	79fb      	ldrb	r3, [r7, #7]
 8012592:	4618      	mov	r0, r3
 8012594:	f7ff ff80 	bl	8012498 <etharp_free_entry>
 8012598:	e04a      	b.n	8012630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801259a:	79fa      	ldrb	r2, [r7, #7]
 801259c:	492a      	ldr	r1, [pc, #168]	; (8012648 <etharp_tmr+0x14c>)
 801259e:	4613      	mov	r3, r2
 80125a0:	005b      	lsls	r3, r3, #1
 80125a2:	4413      	add	r3, r2
 80125a4:	00db      	lsls	r3, r3, #3
 80125a6:	440b      	add	r3, r1
 80125a8:	3314      	adds	r3, #20
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	2b03      	cmp	r3, #3
 80125ae:	d10a      	bne.n	80125c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80125b0:	79fa      	ldrb	r2, [r7, #7]
 80125b2:	4925      	ldr	r1, [pc, #148]	; (8012648 <etharp_tmr+0x14c>)
 80125b4:	4613      	mov	r3, r2
 80125b6:	005b      	lsls	r3, r3, #1
 80125b8:	4413      	add	r3, r2
 80125ba:	00db      	lsls	r3, r3, #3
 80125bc:	440b      	add	r3, r1
 80125be:	3314      	adds	r3, #20
 80125c0:	2204      	movs	r2, #4
 80125c2:	701a      	strb	r2, [r3, #0]
 80125c4:	e034      	b.n	8012630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80125c6:	79fa      	ldrb	r2, [r7, #7]
 80125c8:	491f      	ldr	r1, [pc, #124]	; (8012648 <etharp_tmr+0x14c>)
 80125ca:	4613      	mov	r3, r2
 80125cc:	005b      	lsls	r3, r3, #1
 80125ce:	4413      	add	r3, r2
 80125d0:	00db      	lsls	r3, r3, #3
 80125d2:	440b      	add	r3, r1
 80125d4:	3314      	adds	r3, #20
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	2b04      	cmp	r3, #4
 80125da:	d10a      	bne.n	80125f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80125dc:	79fa      	ldrb	r2, [r7, #7]
 80125de:	491a      	ldr	r1, [pc, #104]	; (8012648 <etharp_tmr+0x14c>)
 80125e0:	4613      	mov	r3, r2
 80125e2:	005b      	lsls	r3, r3, #1
 80125e4:	4413      	add	r3, r2
 80125e6:	00db      	lsls	r3, r3, #3
 80125e8:	440b      	add	r3, r1
 80125ea:	3314      	adds	r3, #20
 80125ec:	2202      	movs	r2, #2
 80125ee:	701a      	strb	r2, [r3, #0]
 80125f0:	e01e      	b.n	8012630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80125f2:	79fa      	ldrb	r2, [r7, #7]
 80125f4:	4914      	ldr	r1, [pc, #80]	; (8012648 <etharp_tmr+0x14c>)
 80125f6:	4613      	mov	r3, r2
 80125f8:	005b      	lsls	r3, r3, #1
 80125fa:	4413      	add	r3, r2
 80125fc:	00db      	lsls	r3, r3, #3
 80125fe:	440b      	add	r3, r1
 8012600:	3314      	adds	r3, #20
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b01      	cmp	r3, #1
 8012606:	d113      	bne.n	8012630 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012608:	79fa      	ldrb	r2, [r7, #7]
 801260a:	490f      	ldr	r1, [pc, #60]	; (8012648 <etharp_tmr+0x14c>)
 801260c:	4613      	mov	r3, r2
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	4413      	add	r3, r2
 8012612:	00db      	lsls	r3, r3, #3
 8012614:	440b      	add	r3, r1
 8012616:	3308      	adds	r3, #8
 8012618:	6818      	ldr	r0, [r3, #0]
 801261a:	79fa      	ldrb	r2, [r7, #7]
 801261c:	4613      	mov	r3, r2
 801261e:	005b      	lsls	r3, r3, #1
 8012620:	4413      	add	r3, r2
 8012622:	00db      	lsls	r3, r3, #3
 8012624:	4a08      	ldr	r2, [pc, #32]	; (8012648 <etharp_tmr+0x14c>)
 8012626:	4413      	add	r3, r2
 8012628:	3304      	adds	r3, #4
 801262a:	4619      	mov	r1, r3
 801262c:	f000 fe38 	bl	80132a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012630:	79fb      	ldrb	r3, [r7, #7]
 8012632:	3301      	adds	r3, #1
 8012634:	71fb      	strb	r3, [r7, #7]
 8012636:	79fb      	ldrb	r3, [r7, #7]
 8012638:	2b09      	cmp	r3, #9
 801263a:	f67f af65 	bls.w	8012508 <etharp_tmr+0xc>
      }
    }
  }
}
 801263e:	bf00      	nop
 8012640:	bf00      	nop
 8012642:	3708      	adds	r7, #8
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}
 8012648:	20004b28 	.word	0x20004b28

0801264c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b088      	sub	sp, #32
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	460b      	mov	r3, r1
 8012656:	607a      	str	r2, [r7, #4]
 8012658:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801265a:	230a      	movs	r3, #10
 801265c:	77fb      	strb	r3, [r7, #31]
 801265e:	230a      	movs	r3, #10
 8012660:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8012662:	230a      	movs	r3, #10
 8012664:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8012666:	2300      	movs	r3, #0
 8012668:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801266a:	230a      	movs	r3, #10
 801266c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	833b      	strh	r3, [r7, #24]
 8012672:	2300      	movs	r3, #0
 8012674:	82fb      	strh	r3, [r7, #22]
 8012676:	2300      	movs	r3, #0
 8012678:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801267a:	2300      	movs	r3, #0
 801267c:	773b      	strb	r3, [r7, #28]
 801267e:	e093      	b.n	80127a8 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8012680:	7f3a      	ldrb	r2, [r7, #28]
 8012682:	4990      	ldr	r1, [pc, #576]	; (80128c4 <etharp_find_entry+0x278>)
 8012684:	4613      	mov	r3, r2
 8012686:	005b      	lsls	r3, r3, #1
 8012688:	4413      	add	r3, r2
 801268a:	00db      	lsls	r3, r3, #3
 801268c:	440b      	add	r3, r1
 801268e:	3314      	adds	r3, #20
 8012690:	781b      	ldrb	r3, [r3, #0]
 8012692:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012694:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012698:	2b0a      	cmp	r3, #10
 801269a:	d105      	bne.n	80126a8 <etharp_find_entry+0x5c>
 801269c:	7cfb      	ldrb	r3, [r7, #19]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d102      	bne.n	80126a8 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80126a2:	7f3b      	ldrb	r3, [r7, #28]
 80126a4:	777b      	strb	r3, [r7, #29]
 80126a6:	e07c      	b.n	80127a2 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80126a8:	7cfb      	ldrb	r3, [r7, #19]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d079      	beq.n	80127a2 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80126ae:	7cfb      	ldrb	r3, [r7, #19]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d009      	beq.n	80126c8 <etharp_find_entry+0x7c>
 80126b4:	7cfb      	ldrb	r3, [r7, #19]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	d806      	bhi.n	80126c8 <etharp_find_entry+0x7c>
 80126ba:	4b83      	ldr	r3, [pc, #524]	; (80128c8 <etharp_find_entry+0x27c>)
 80126bc:	f240 1225 	movw	r2, #293	; 0x125
 80126c0:	4982      	ldr	r1, [pc, #520]	; (80128cc <etharp_find_entry+0x280>)
 80126c2:	4883      	ldr	r0, [pc, #524]	; (80128d0 <etharp_find_entry+0x284>)
 80126c4:	f002 fa6a 	bl	8014b9c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d00f      	beq.n	80126ee <etharp_find_entry+0xa2>
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	6819      	ldr	r1, [r3, #0]
 80126d2:	7f3a      	ldrb	r2, [r7, #28]
 80126d4:	487b      	ldr	r0, [pc, #492]	; (80128c4 <etharp_find_entry+0x278>)
 80126d6:	4613      	mov	r3, r2
 80126d8:	005b      	lsls	r3, r3, #1
 80126da:	4413      	add	r3, r2
 80126dc:	00db      	lsls	r3, r3, #3
 80126de:	4403      	add	r3, r0
 80126e0:	3304      	adds	r3, #4
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	4299      	cmp	r1, r3
 80126e6:	d102      	bne.n	80126ee <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80126e8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80126ec:	e0e5      	b.n	80128ba <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80126ee:	7cfb      	ldrb	r3, [r7, #19]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d13b      	bne.n	801276c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80126f4:	7f3a      	ldrb	r2, [r7, #28]
 80126f6:	4973      	ldr	r1, [pc, #460]	; (80128c4 <etharp_find_entry+0x278>)
 80126f8:	4613      	mov	r3, r2
 80126fa:	005b      	lsls	r3, r3, #1
 80126fc:	4413      	add	r3, r2
 80126fe:	00db      	lsls	r3, r3, #3
 8012700:	440b      	add	r3, r1
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d018      	beq.n	801273a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8012708:	7f3a      	ldrb	r2, [r7, #28]
 801270a:	496e      	ldr	r1, [pc, #440]	; (80128c4 <etharp_find_entry+0x278>)
 801270c:	4613      	mov	r3, r2
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	4413      	add	r3, r2
 8012712:	00db      	lsls	r3, r3, #3
 8012714:	440b      	add	r3, r1
 8012716:	3312      	adds	r3, #18
 8012718:	881b      	ldrh	r3, [r3, #0]
 801271a:	8b3a      	ldrh	r2, [r7, #24]
 801271c:	429a      	cmp	r2, r3
 801271e:	d840      	bhi.n	80127a2 <etharp_find_entry+0x156>
            old_queue = i;
 8012720:	7f3b      	ldrb	r3, [r7, #28]
 8012722:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8012724:	7f3a      	ldrb	r2, [r7, #28]
 8012726:	4967      	ldr	r1, [pc, #412]	; (80128c4 <etharp_find_entry+0x278>)
 8012728:	4613      	mov	r3, r2
 801272a:	005b      	lsls	r3, r3, #1
 801272c:	4413      	add	r3, r2
 801272e:	00db      	lsls	r3, r3, #3
 8012730:	440b      	add	r3, r1
 8012732:	3312      	adds	r3, #18
 8012734:	881b      	ldrh	r3, [r3, #0]
 8012736:	833b      	strh	r3, [r7, #24]
 8012738:	e033      	b.n	80127a2 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801273a:	7f3a      	ldrb	r2, [r7, #28]
 801273c:	4961      	ldr	r1, [pc, #388]	; (80128c4 <etharp_find_entry+0x278>)
 801273e:	4613      	mov	r3, r2
 8012740:	005b      	lsls	r3, r3, #1
 8012742:	4413      	add	r3, r2
 8012744:	00db      	lsls	r3, r3, #3
 8012746:	440b      	add	r3, r1
 8012748:	3312      	adds	r3, #18
 801274a:	881b      	ldrh	r3, [r3, #0]
 801274c:	8afa      	ldrh	r2, [r7, #22]
 801274e:	429a      	cmp	r2, r3
 8012750:	d827      	bhi.n	80127a2 <etharp_find_entry+0x156>
            old_pending = i;
 8012752:	7f3b      	ldrb	r3, [r7, #28]
 8012754:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8012756:	7f3a      	ldrb	r2, [r7, #28]
 8012758:	495a      	ldr	r1, [pc, #360]	; (80128c4 <etharp_find_entry+0x278>)
 801275a:	4613      	mov	r3, r2
 801275c:	005b      	lsls	r3, r3, #1
 801275e:	4413      	add	r3, r2
 8012760:	00db      	lsls	r3, r3, #3
 8012762:	440b      	add	r3, r1
 8012764:	3312      	adds	r3, #18
 8012766:	881b      	ldrh	r3, [r3, #0]
 8012768:	82fb      	strh	r3, [r7, #22]
 801276a:	e01a      	b.n	80127a2 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801276c:	7cfb      	ldrb	r3, [r7, #19]
 801276e:	2b01      	cmp	r3, #1
 8012770:	d917      	bls.n	80127a2 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012772:	7f3a      	ldrb	r2, [r7, #28]
 8012774:	4953      	ldr	r1, [pc, #332]	; (80128c4 <etharp_find_entry+0x278>)
 8012776:	4613      	mov	r3, r2
 8012778:	005b      	lsls	r3, r3, #1
 801277a:	4413      	add	r3, r2
 801277c:	00db      	lsls	r3, r3, #3
 801277e:	440b      	add	r3, r1
 8012780:	3312      	adds	r3, #18
 8012782:	881b      	ldrh	r3, [r3, #0]
 8012784:	8aba      	ldrh	r2, [r7, #20]
 8012786:	429a      	cmp	r2, r3
 8012788:	d80b      	bhi.n	80127a2 <etharp_find_entry+0x156>
            old_stable = i;
 801278a:	7f3b      	ldrb	r3, [r7, #28]
 801278c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801278e:	7f3a      	ldrb	r2, [r7, #28]
 8012790:	494c      	ldr	r1, [pc, #304]	; (80128c4 <etharp_find_entry+0x278>)
 8012792:	4613      	mov	r3, r2
 8012794:	005b      	lsls	r3, r3, #1
 8012796:	4413      	add	r3, r2
 8012798:	00db      	lsls	r3, r3, #3
 801279a:	440b      	add	r3, r1
 801279c:	3312      	adds	r3, #18
 801279e:	881b      	ldrh	r3, [r3, #0]
 80127a0:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127a2:	7f3b      	ldrb	r3, [r7, #28]
 80127a4:	3301      	adds	r3, #1
 80127a6:	773b      	strb	r3, [r7, #28]
 80127a8:	7f3b      	ldrb	r3, [r7, #28]
 80127aa:	2b09      	cmp	r3, #9
 80127ac:	f67f af68 	bls.w	8012680 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80127b0:	7afb      	ldrb	r3, [r7, #11]
 80127b2:	f003 0302 	and.w	r3, r3, #2
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d108      	bne.n	80127cc <etharp_find_entry+0x180>
 80127ba:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80127be:	2b0a      	cmp	r3, #10
 80127c0:	d107      	bne.n	80127d2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80127c2:	7afb      	ldrb	r3, [r7, #11]
 80127c4:	f003 0301 	and.w	r3, r3, #1
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d102      	bne.n	80127d2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80127cc:	f04f 33ff 	mov.w	r3, #4294967295
 80127d0:	e073      	b.n	80128ba <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80127d2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80127d6:	2b09      	cmp	r3, #9
 80127d8:	dc02      	bgt.n	80127e0 <etharp_find_entry+0x194>
    i = empty;
 80127da:	7f7b      	ldrb	r3, [r7, #29]
 80127dc:	773b      	strb	r3, [r7, #28]
 80127de:	e036      	b.n	801284e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80127e0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80127e4:	2b09      	cmp	r3, #9
 80127e6:	dc13      	bgt.n	8012810 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80127e8:	7fbb      	ldrb	r3, [r7, #30]
 80127ea:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80127ec:	7f3a      	ldrb	r2, [r7, #28]
 80127ee:	4935      	ldr	r1, [pc, #212]	; (80128c4 <etharp_find_entry+0x278>)
 80127f0:	4613      	mov	r3, r2
 80127f2:	005b      	lsls	r3, r3, #1
 80127f4:	4413      	add	r3, r2
 80127f6:	00db      	lsls	r3, r3, #3
 80127f8:	440b      	add	r3, r1
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d018      	beq.n	8012832 <etharp_find_entry+0x1e6>
 8012800:	4b31      	ldr	r3, [pc, #196]	; (80128c8 <etharp_find_entry+0x27c>)
 8012802:	f240 126f 	movw	r2, #367	; 0x16f
 8012806:	4933      	ldr	r1, [pc, #204]	; (80128d4 <etharp_find_entry+0x288>)
 8012808:	4831      	ldr	r0, [pc, #196]	; (80128d0 <etharp_find_entry+0x284>)
 801280a:	f002 f9c7 	bl	8014b9c <iprintf>
 801280e:	e010      	b.n	8012832 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012810:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012814:	2b09      	cmp	r3, #9
 8012816:	dc02      	bgt.n	801281e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8012818:	7ffb      	ldrb	r3, [r7, #31]
 801281a:	773b      	strb	r3, [r7, #28]
 801281c:	e009      	b.n	8012832 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801281e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012822:	2b09      	cmp	r3, #9
 8012824:	dc02      	bgt.n	801282c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012826:	7efb      	ldrb	r3, [r7, #27]
 8012828:	773b      	strb	r3, [r7, #28]
 801282a:	e002      	b.n	8012832 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801282c:	f04f 33ff 	mov.w	r3, #4294967295
 8012830:	e043      	b.n	80128ba <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012832:	7f3b      	ldrb	r3, [r7, #28]
 8012834:	2b09      	cmp	r3, #9
 8012836:	d906      	bls.n	8012846 <etharp_find_entry+0x1fa>
 8012838:	4b23      	ldr	r3, [pc, #140]	; (80128c8 <etharp_find_entry+0x27c>)
 801283a:	f240 1281 	movw	r2, #385	; 0x181
 801283e:	4926      	ldr	r1, [pc, #152]	; (80128d8 <etharp_find_entry+0x28c>)
 8012840:	4823      	ldr	r0, [pc, #140]	; (80128d0 <etharp_find_entry+0x284>)
 8012842:	f002 f9ab 	bl	8014b9c <iprintf>
    etharp_free_entry(i);
 8012846:	7f3b      	ldrb	r3, [r7, #28]
 8012848:	4618      	mov	r0, r3
 801284a:	f7ff fe25 	bl	8012498 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801284e:	7f3b      	ldrb	r3, [r7, #28]
 8012850:	2b09      	cmp	r3, #9
 8012852:	d906      	bls.n	8012862 <etharp_find_entry+0x216>
 8012854:	4b1c      	ldr	r3, [pc, #112]	; (80128c8 <etharp_find_entry+0x27c>)
 8012856:	f240 1285 	movw	r2, #389	; 0x185
 801285a:	491f      	ldr	r1, [pc, #124]	; (80128d8 <etharp_find_entry+0x28c>)
 801285c:	481c      	ldr	r0, [pc, #112]	; (80128d0 <etharp_find_entry+0x284>)
 801285e:	f002 f99d 	bl	8014b9c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012862:	7f3a      	ldrb	r2, [r7, #28]
 8012864:	4917      	ldr	r1, [pc, #92]	; (80128c4 <etharp_find_entry+0x278>)
 8012866:	4613      	mov	r3, r2
 8012868:	005b      	lsls	r3, r3, #1
 801286a:	4413      	add	r3, r2
 801286c:	00db      	lsls	r3, r3, #3
 801286e:	440b      	add	r3, r1
 8012870:	3314      	adds	r3, #20
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d006      	beq.n	8012886 <etharp_find_entry+0x23a>
 8012878:	4b13      	ldr	r3, [pc, #76]	; (80128c8 <etharp_find_entry+0x27c>)
 801287a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 801287e:	4917      	ldr	r1, [pc, #92]	; (80128dc <etharp_find_entry+0x290>)
 8012880:	4813      	ldr	r0, [pc, #76]	; (80128d0 <etharp_find_entry+0x284>)
 8012882:	f002 f98b 	bl	8014b9c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d00a      	beq.n	80128a2 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801288c:	7f3a      	ldrb	r2, [r7, #28]
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	6819      	ldr	r1, [r3, #0]
 8012892:	480c      	ldr	r0, [pc, #48]	; (80128c4 <etharp_find_entry+0x278>)
 8012894:	4613      	mov	r3, r2
 8012896:	005b      	lsls	r3, r3, #1
 8012898:	4413      	add	r3, r2
 801289a:	00db      	lsls	r3, r3, #3
 801289c:	4403      	add	r3, r0
 801289e:	3304      	adds	r3, #4
 80128a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80128a2:	7f3a      	ldrb	r2, [r7, #28]
 80128a4:	4907      	ldr	r1, [pc, #28]	; (80128c4 <etharp_find_entry+0x278>)
 80128a6:	4613      	mov	r3, r2
 80128a8:	005b      	lsls	r3, r3, #1
 80128aa:	4413      	add	r3, r2
 80128ac:	00db      	lsls	r3, r3, #3
 80128ae:	440b      	add	r3, r1
 80128b0:	3312      	adds	r3, #18
 80128b2:	2200      	movs	r2, #0
 80128b4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80128b6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3720      	adds	r7, #32
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	20004b28 	.word	0x20004b28
 80128c8:	08017cb4 	.word	0x08017cb4
 80128cc:	08017cec 	.word	0x08017cec
 80128d0:	08017d2c 	.word	0x08017d2c
 80128d4:	08017d54 	.word	0x08017d54
 80128d8:	08017d6c 	.word	0x08017d6c
 80128dc:	08017d80 	.word	0x08017d80

080128e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b088      	sub	sp, #32
 80128e4:	af02      	add	r7, sp, #8
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	60b9      	str	r1, [r7, #8]
 80128ea:	607a      	str	r2, [r7, #4]
 80128ec:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128f4:	2b06      	cmp	r3, #6
 80128f6:	d006      	beq.n	8012906 <etharp_update_arp_entry+0x26>
 80128f8:	4b48      	ldr	r3, [pc, #288]	; (8012a1c <etharp_update_arp_entry+0x13c>)
 80128fa:	f240 12ab 	movw	r2, #427	; 0x1ab
 80128fe:	4948      	ldr	r1, [pc, #288]	; (8012a20 <etharp_update_arp_entry+0x140>)
 8012900:	4848      	ldr	r0, [pc, #288]	; (8012a24 <etharp_update_arp_entry+0x144>)
 8012902:	f002 f94b 	bl	8014b9c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d012      	beq.n	8012932 <etharp_update_arp_entry+0x52>
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00e      	beq.n	8012932 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	68f9      	ldr	r1, [r7, #12]
 801291a:	4618      	mov	r0, r3
 801291c:	f001 f8dc 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 8012920:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012922:	2b00      	cmp	r3, #0
 8012924:	d105      	bne.n	8012932 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012926:	68bb      	ldr	r3, [r7, #8]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801292e:	2be0      	cmp	r3, #224	; 0xe0
 8012930:	d102      	bne.n	8012938 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012932:	f06f 030f 	mvn.w	r3, #15
 8012936:	e06c      	b.n	8012a12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012938:	78fb      	ldrb	r3, [r7, #3]
 801293a:	68fa      	ldr	r2, [r7, #12]
 801293c:	4619      	mov	r1, r3
 801293e:	68b8      	ldr	r0, [r7, #8]
 8012940:	f7ff fe84 	bl	801264c <etharp_find_entry>
 8012944:	4603      	mov	r3, r0
 8012946:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012948:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801294c:	2b00      	cmp	r3, #0
 801294e:	da02      	bge.n	8012956 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012950:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012954:	e05d      	b.n	8012a12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012956:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801295a:	4933      	ldr	r1, [pc, #204]	; (8012a28 <etharp_update_arp_entry+0x148>)
 801295c:	4613      	mov	r3, r2
 801295e:	005b      	lsls	r3, r3, #1
 8012960:	4413      	add	r3, r2
 8012962:	00db      	lsls	r3, r3, #3
 8012964:	440b      	add	r3, r1
 8012966:	3314      	adds	r3, #20
 8012968:	2202      	movs	r2, #2
 801296a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801296c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012970:	492d      	ldr	r1, [pc, #180]	; (8012a28 <etharp_update_arp_entry+0x148>)
 8012972:	4613      	mov	r3, r2
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	4413      	add	r3, r2
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	440b      	add	r3, r1
 801297c:	3308      	adds	r3, #8
 801297e:	68fa      	ldr	r2, [r7, #12]
 8012980:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8012982:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012986:	4613      	mov	r3, r2
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	4413      	add	r3, r2
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	3308      	adds	r3, #8
 8012990:	4a25      	ldr	r2, [pc, #148]	; (8012a28 <etharp_update_arp_entry+0x148>)
 8012992:	4413      	add	r3, r2
 8012994:	3304      	adds	r3, #4
 8012996:	2206      	movs	r2, #6
 8012998:	6879      	ldr	r1, [r7, #4]
 801299a:	4618      	mov	r0, r3
 801299c:	f002 f8e8 	bl	8014b70 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80129a0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80129a4:	4920      	ldr	r1, [pc, #128]	; (8012a28 <etharp_update_arp_entry+0x148>)
 80129a6:	4613      	mov	r3, r2
 80129a8:	005b      	lsls	r3, r3, #1
 80129aa:	4413      	add	r3, r2
 80129ac:	00db      	lsls	r3, r3, #3
 80129ae:	440b      	add	r3, r1
 80129b0:	3312      	adds	r3, #18
 80129b2:	2200      	movs	r2, #0
 80129b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80129b6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80129ba:	491b      	ldr	r1, [pc, #108]	; (8012a28 <etharp_update_arp_entry+0x148>)
 80129bc:	4613      	mov	r3, r2
 80129be:	005b      	lsls	r3, r3, #1
 80129c0:	4413      	add	r3, r2
 80129c2:	00db      	lsls	r3, r3, #3
 80129c4:	440b      	add	r3, r1
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d021      	beq.n	8012a10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80129cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80129d0:	4915      	ldr	r1, [pc, #84]	; (8012a28 <etharp_update_arp_entry+0x148>)
 80129d2:	4613      	mov	r3, r2
 80129d4:	005b      	lsls	r3, r3, #1
 80129d6:	4413      	add	r3, r2
 80129d8:	00db      	lsls	r3, r3, #3
 80129da:	440b      	add	r3, r1
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80129e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80129e4:	4910      	ldr	r1, [pc, #64]	; (8012a28 <etharp_update_arp_entry+0x148>)
 80129e6:	4613      	mov	r3, r2
 80129e8:	005b      	lsls	r3, r3, #1
 80129ea:	4413      	add	r3, r2
 80129ec:	00db      	lsls	r3, r3, #3
 80129ee:	440b      	add	r3, r1
 80129f0:	2200      	movs	r2, #0
 80129f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80129fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6939      	ldr	r1, [r7, #16]
 8012a04:	68f8      	ldr	r0, [r7, #12]
 8012a06:	f001 ff0d 	bl	8014824 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012a0a:	6938      	ldr	r0, [r7, #16]
 8012a0c:	f7f9 fc5a 	bl	800c2c4 <pbuf_free>
  }
  return ERR_OK;
 8012a10:	2300      	movs	r3, #0
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3718      	adds	r7, #24
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}
 8012a1a:	bf00      	nop
 8012a1c:	08017cb4 	.word	0x08017cb4
 8012a20:	08017dac 	.word	0x08017dac
 8012a24:	08017d2c 	.word	0x08017d2c
 8012a28:	20004b28 	.word	0x20004b28

08012a2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a34:	2300      	movs	r3, #0
 8012a36:	73fb      	strb	r3, [r7, #15]
 8012a38:	e01f      	b.n	8012a7a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8012a3a:	7bfa      	ldrb	r2, [r7, #15]
 8012a3c:	4913      	ldr	r1, [pc, #76]	; (8012a8c <etharp_cleanup_netif+0x60>)
 8012a3e:	4613      	mov	r3, r2
 8012a40:	005b      	lsls	r3, r3, #1
 8012a42:	4413      	add	r3, r2
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	440b      	add	r3, r1
 8012a48:	3314      	adds	r3, #20
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012a4e:	7bbb      	ldrb	r3, [r7, #14]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d00f      	beq.n	8012a74 <etharp_cleanup_netif+0x48>
 8012a54:	7bfa      	ldrb	r2, [r7, #15]
 8012a56:	490d      	ldr	r1, [pc, #52]	; (8012a8c <etharp_cleanup_netif+0x60>)
 8012a58:	4613      	mov	r3, r2
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	4413      	add	r3, r2
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	440b      	add	r3, r1
 8012a62:	3308      	adds	r3, #8
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d103      	bne.n	8012a74 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8012a6c:	7bfb      	ldrb	r3, [r7, #15]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7ff fd12 	bl	8012498 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a74:	7bfb      	ldrb	r3, [r7, #15]
 8012a76:	3301      	adds	r3, #1
 8012a78:	73fb      	strb	r3, [r7, #15]
 8012a7a:	7bfb      	ldrb	r3, [r7, #15]
 8012a7c:	2b09      	cmp	r3, #9
 8012a7e:	d9dc      	bls.n	8012a3a <etharp_cleanup_netif+0xe>
    }
  }
}
 8012a80:	bf00      	nop
 8012a82:	bf00      	nop
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	20004b28 	.word	0x20004b28

08012a90 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012a90:	b5b0      	push	{r4, r5, r7, lr}
 8012a92:	b08a      	sub	sp, #40	; 0x28
 8012a94:	af04      	add	r7, sp, #16
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d107      	bne.n	8012ab0 <etharp_input+0x20>
 8012aa0:	4b3d      	ldr	r3, [pc, #244]	; (8012b98 <etharp_input+0x108>)
 8012aa2:	f44f 7222 	mov.w	r2, #648	; 0x288
 8012aa6:	493d      	ldr	r1, [pc, #244]	; (8012b9c <etharp_input+0x10c>)
 8012aa8:	483d      	ldr	r0, [pc, #244]	; (8012ba0 <etharp_input+0x110>)
 8012aaa:	f002 f877 	bl	8014b9c <iprintf>
 8012aae:	e06f      	b.n	8012b90 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ac0:	d10c      	bne.n	8012adc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8012ac6:	2b06      	cmp	r3, #6
 8012ac8:	d108      	bne.n	8012adc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ace:	2b04      	cmp	r3, #4
 8012ad0:	d104      	bne.n	8012adc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012ad2:	693b      	ldr	r3, [r7, #16]
 8012ad4:	885b      	ldrh	r3, [r3, #2]
 8012ad6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ad8:	2b08      	cmp	r3, #8
 8012ada:	d003      	beq.n	8012ae4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7f9 fbf1 	bl	800c2c4 <pbuf_free>
    return;
 8012ae2:	e055      	b.n	8012b90 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	330e      	adds	r3, #14
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	3318      	adds	r3, #24
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	3304      	adds	r3, #4
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d102      	bne.n	8012b04 <etharp_input+0x74>
    for_us = 0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	75fb      	strb	r3, [r7, #23]
 8012b02:	e009      	b.n	8012b18 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	3304      	adds	r3, #4
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	bf0c      	ite	eq
 8012b10:	2301      	moveq	r3, #1
 8012b12:	2300      	movne	r3, #0
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	f103 0208 	add.w	r2, r3, #8
 8012b1e:	7dfb      	ldrb	r3, [r7, #23]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <etharp_input+0x98>
 8012b24:	2301      	movs	r3, #1
 8012b26:	e000      	b.n	8012b2a <etharp_input+0x9a>
 8012b28:	2302      	movs	r3, #2
 8012b2a:	f107 010c 	add.w	r1, r7, #12
 8012b2e:	6838      	ldr	r0, [r7, #0]
 8012b30:	f7ff fed6 	bl	80128e0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	88db      	ldrh	r3, [r3, #6]
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012b3e:	d003      	beq.n	8012b48 <etharp_input+0xb8>
 8012b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012b44:	d01e      	beq.n	8012b84 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8012b46:	e020      	b.n	8012b8a <etharp_input+0xfa>
    if (for_us) {
 8012b48:	7dfb      	ldrb	r3, [r7, #23]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d01c      	beq.n	8012b88 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8012b54:	693b      	ldr	r3, [r7, #16]
 8012b56:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8012b64:	693a      	ldr	r2, [r7, #16]
 8012b66:	3208      	adds	r2, #8
      etharp_raw(netif,
 8012b68:	2102      	movs	r1, #2
 8012b6a:	9103      	str	r1, [sp, #12]
 8012b6c:	f107 010c 	add.w	r1, r7, #12
 8012b70:	9102      	str	r1, [sp, #8]
 8012b72:	9201      	str	r2, [sp, #4]
 8012b74:	9300      	str	r3, [sp, #0]
 8012b76:	462b      	mov	r3, r5
 8012b78:	4622      	mov	r2, r4
 8012b7a:	4601      	mov	r1, r0
 8012b7c:	6838      	ldr	r0, [r7, #0]
 8012b7e:	f000 fae1 	bl	8013144 <etharp_raw>
    break;
 8012b82:	e001      	b.n	8012b88 <etharp_input+0xf8>
    break;
 8012b84:	bf00      	nop
 8012b86:	e000      	b.n	8012b8a <etharp_input+0xfa>
    break;
 8012b88:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f7f9 fb9a 	bl	800c2c4 <pbuf_free>
}
 8012b90:	3718      	adds	r7, #24
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bdb0      	pop	{r4, r5, r7, pc}
 8012b96:	bf00      	nop
 8012b98:	08017cb4 	.word	0x08017cb4
 8012b9c:	08017e04 	.word	0x08017e04
 8012ba0:	08017d2c 	.word	0x08017d2c

08012ba4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af02      	add	r7, sp, #8
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	4613      	mov	r3, r2
 8012bb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012bb2:	79fa      	ldrb	r2, [r7, #7]
 8012bb4:	4944      	ldr	r1, [pc, #272]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012bb6:	4613      	mov	r3, r2
 8012bb8:	005b      	lsls	r3, r3, #1
 8012bba:	4413      	add	r3, r2
 8012bbc:	00db      	lsls	r3, r3, #3
 8012bbe:	440b      	add	r3, r1
 8012bc0:	3314      	adds	r3, #20
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d806      	bhi.n	8012bd6 <etharp_output_to_arp_index+0x32>
 8012bc8:	4b40      	ldr	r3, [pc, #256]	; (8012ccc <etharp_output_to_arp_index+0x128>)
 8012bca:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 8012bce:	4940      	ldr	r1, [pc, #256]	; (8012cd0 <etharp_output_to_arp_index+0x12c>)
 8012bd0:	4840      	ldr	r0, [pc, #256]	; (8012cd4 <etharp_output_to_arp_index+0x130>)
 8012bd2:	f001 ffe3 	bl	8014b9c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012bd6:	79fa      	ldrb	r2, [r7, #7]
 8012bd8:	493b      	ldr	r1, [pc, #236]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012bda:	4613      	mov	r3, r2
 8012bdc:	005b      	lsls	r3, r3, #1
 8012bde:	4413      	add	r3, r2
 8012be0:	00db      	lsls	r3, r3, #3
 8012be2:	440b      	add	r3, r1
 8012be4:	3314      	adds	r3, #20
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	2b02      	cmp	r3, #2
 8012bea:	d153      	bne.n	8012c94 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012bec:	79fa      	ldrb	r2, [r7, #7]
 8012bee:	4936      	ldr	r1, [pc, #216]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	4413      	add	r3, r2
 8012bf6:	00db      	lsls	r3, r3, #3
 8012bf8:	440b      	add	r3, r1
 8012bfa:	3312      	adds	r3, #18
 8012bfc:	881b      	ldrh	r3, [r3, #0]
 8012bfe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012c02:	d919      	bls.n	8012c38 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012c04:	79fa      	ldrb	r2, [r7, #7]
 8012c06:	4613      	mov	r3, r2
 8012c08:	005b      	lsls	r3, r3, #1
 8012c0a:	4413      	add	r3, r2
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	4a2e      	ldr	r2, [pc, #184]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012c10:	4413      	add	r3, r2
 8012c12:	3304      	adds	r3, #4
 8012c14:	4619      	mov	r1, r3
 8012c16:	68f8      	ldr	r0, [r7, #12]
 8012c18:	f000 fb42 	bl	80132a0 <etharp_request>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d138      	bne.n	8012c94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012c22:	79fa      	ldrb	r2, [r7, #7]
 8012c24:	4928      	ldr	r1, [pc, #160]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012c26:	4613      	mov	r3, r2
 8012c28:	005b      	lsls	r3, r3, #1
 8012c2a:	4413      	add	r3, r2
 8012c2c:	00db      	lsls	r3, r3, #3
 8012c2e:	440b      	add	r3, r1
 8012c30:	3314      	adds	r3, #20
 8012c32:	2203      	movs	r2, #3
 8012c34:	701a      	strb	r2, [r3, #0]
 8012c36:	e02d      	b.n	8012c94 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012c38:	79fa      	ldrb	r2, [r7, #7]
 8012c3a:	4923      	ldr	r1, [pc, #140]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012c3c:	4613      	mov	r3, r2
 8012c3e:	005b      	lsls	r3, r3, #1
 8012c40:	4413      	add	r3, r2
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	440b      	add	r3, r1
 8012c46:	3312      	adds	r3, #18
 8012c48:	881b      	ldrh	r3, [r3, #0]
 8012c4a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012c4e:	d321      	bcc.n	8012c94 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012c50:	79fa      	ldrb	r2, [r7, #7]
 8012c52:	4613      	mov	r3, r2
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	4413      	add	r3, r2
 8012c58:	00db      	lsls	r3, r3, #3
 8012c5a:	4a1b      	ldr	r2, [pc, #108]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012c5c:	4413      	add	r3, r2
 8012c5e:	1d19      	adds	r1, r3, #4
 8012c60:	79fa      	ldrb	r2, [r7, #7]
 8012c62:	4613      	mov	r3, r2
 8012c64:	005b      	lsls	r3, r3, #1
 8012c66:	4413      	add	r3, r2
 8012c68:	00db      	lsls	r3, r3, #3
 8012c6a:	3308      	adds	r3, #8
 8012c6c:	4a16      	ldr	r2, [pc, #88]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012c6e:	4413      	add	r3, r2
 8012c70:	3304      	adds	r3, #4
 8012c72:	461a      	mov	r2, r3
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f000 faf1 	bl	801325c <etharp_request_dst>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d109      	bne.n	8012c94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012c80:	79fa      	ldrb	r2, [r7, #7]
 8012c82:	4911      	ldr	r1, [pc, #68]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012c84:	4613      	mov	r3, r2
 8012c86:	005b      	lsls	r3, r3, #1
 8012c88:	4413      	add	r3, r2
 8012c8a:	00db      	lsls	r3, r3, #3
 8012c8c:	440b      	add	r3, r1
 8012c8e:	3314      	adds	r3, #20
 8012c90:	2203      	movs	r2, #3
 8012c92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8012c9a:	79fa      	ldrb	r2, [r7, #7]
 8012c9c:	4613      	mov	r3, r2
 8012c9e:	005b      	lsls	r3, r3, #1
 8012ca0:	4413      	add	r3, r2
 8012ca2:	00db      	lsls	r3, r3, #3
 8012ca4:	3308      	adds	r3, #8
 8012ca6:	4a08      	ldr	r2, [pc, #32]	; (8012cc8 <etharp_output_to_arp_index+0x124>)
 8012ca8:	4413      	add	r3, r2
 8012caa:	3304      	adds	r3, #4
 8012cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012cb0:	9200      	str	r2, [sp, #0]
 8012cb2:	460a      	mov	r2, r1
 8012cb4:	68b9      	ldr	r1, [r7, #8]
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f001 fdb4 	bl	8014824 <ethernet_output>
 8012cbc:	4603      	mov	r3, r0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3710      	adds	r7, #16
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	20004b28 	.word	0x20004b28
 8012ccc:	08017cb4 	.word	0x08017cb4
 8012cd0:	08017e24 	.word	0x08017e24
 8012cd4:	08017d2c 	.word	0x08017d2c

08012cd8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b08a      	sub	sp, #40	; 0x28
 8012cdc:	af02      	add	r7, sp, #8
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d106      	bne.n	8012cfc <etharp_output+0x24>
 8012cee:	4b69      	ldr	r3, [pc, #420]	; (8012e94 <etharp_output+0x1bc>)
 8012cf0:	f240 321b 	movw	r2, #795	; 0x31b
 8012cf4:	4968      	ldr	r1, [pc, #416]	; (8012e98 <etharp_output+0x1c0>)
 8012cf6:	4869      	ldr	r0, [pc, #420]	; (8012e9c <etharp_output+0x1c4>)
 8012cf8:	f001 ff50 	bl	8014b9c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d106      	bne.n	8012d10 <etharp_output+0x38>
 8012d02:	4b64      	ldr	r3, [pc, #400]	; (8012e94 <etharp_output+0x1bc>)
 8012d04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012d08:	4965      	ldr	r1, [pc, #404]	; (8012ea0 <etharp_output+0x1c8>)
 8012d0a:	4864      	ldr	r0, [pc, #400]	; (8012e9c <etharp_output+0x1c4>)
 8012d0c:	f001 ff46 	bl	8014b9c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <etharp_output+0x4c>
 8012d16:	4b5f      	ldr	r3, [pc, #380]	; (8012e94 <etharp_output+0x1bc>)
 8012d18:	f240 321d 	movw	r2, #797	; 0x31d
 8012d1c:	4961      	ldr	r1, [pc, #388]	; (8012ea4 <etharp_output+0x1cc>)
 8012d1e:	485f      	ldr	r0, [pc, #380]	; (8012e9c <etharp_output+0x1c4>)
 8012d20:	f001 ff3c 	bl	8014b9c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	68f9      	ldr	r1, [r7, #12]
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f000 fed4 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d002      	beq.n	8012d3c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012d36:	4b5c      	ldr	r3, [pc, #368]	; (8012ea8 <etharp_output+0x1d0>)
 8012d38:	61fb      	str	r3, [r7, #28]
 8012d3a:	e09b      	b.n	8012e74 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d44:	2be0      	cmp	r3, #224	; 0xe0
 8012d46:	d118      	bne.n	8012d7a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012d50:	235e      	movs	r3, #94	; 0x5e
 8012d52:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	3301      	adds	r3, #1
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	3302      	adds	r3, #2
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	3303      	adds	r3, #3
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012d72:	f107 0310 	add.w	r3, r7, #16
 8012d76:	61fb      	str	r3, [r7, #28]
 8012d78:	e07c      	b.n	8012e74 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	3304      	adds	r3, #4
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	405a      	eors	r2, r3
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	3308      	adds	r3, #8
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	4013      	ands	r3, r2
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d012      	beq.n	8012db8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012d98:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d00b      	beq.n	8012db8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	330c      	adds	r3, #12
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d003      	beq.n	8012db2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	330c      	adds	r3, #12
 8012dae:	61bb      	str	r3, [r7, #24]
 8012db0:	e002      	b.n	8012db8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012db2:	f06f 0303 	mvn.w	r3, #3
 8012db6:	e069      	b.n	8012e8c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012db8:	4b3c      	ldr	r3, [pc, #240]	; (8012eac <etharp_output+0x1d4>)
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	4619      	mov	r1, r3
 8012dbe:	4a3c      	ldr	r2, [pc, #240]	; (8012eb0 <etharp_output+0x1d8>)
 8012dc0:	460b      	mov	r3, r1
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	440b      	add	r3, r1
 8012dc6:	00db      	lsls	r3, r3, #3
 8012dc8:	4413      	add	r3, r2
 8012dca:	3314      	adds	r3, #20
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d917      	bls.n	8012e02 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	4b35      	ldr	r3, [pc, #212]	; (8012eac <etharp_output+0x1d4>)
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	4934      	ldr	r1, [pc, #208]	; (8012eb0 <etharp_output+0x1d8>)
 8012dde:	4603      	mov	r3, r0
 8012de0:	005b      	lsls	r3, r3, #1
 8012de2:	4403      	add	r3, r0
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	440b      	add	r3, r1
 8012de8:	3304      	adds	r3, #4
 8012dea:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d108      	bne.n	8012e02 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012df0:	4b2e      	ldr	r3, [pc, #184]	; (8012eac <etharp_output+0x1d4>)
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	461a      	mov	r2, r3
 8012df6:	68b9      	ldr	r1, [r7, #8]
 8012df8:	68f8      	ldr	r0, [r7, #12]
 8012dfa:	f7ff fed3 	bl	8012ba4 <etharp_output_to_arp_index>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	e044      	b.n	8012e8c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012e02:	2300      	movs	r3, #0
 8012e04:	75fb      	strb	r3, [r7, #23]
 8012e06:	e02a      	b.n	8012e5e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012e0c:	4928      	ldr	r1, [pc, #160]	; (8012eb0 <etharp_output+0x1d8>)
 8012e0e:	4613      	mov	r3, r2
 8012e10:	005b      	lsls	r3, r3, #1
 8012e12:	4413      	add	r3, r2
 8012e14:	00db      	lsls	r3, r3, #3
 8012e16:	440b      	add	r3, r1
 8012e18:	3314      	adds	r3, #20
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d918      	bls.n	8012e52 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	6819      	ldr	r1, [r3, #0]
 8012e24:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012e28:	4821      	ldr	r0, [pc, #132]	; (8012eb0 <etharp_output+0x1d8>)
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	005b      	lsls	r3, r3, #1
 8012e2e:	4413      	add	r3, r2
 8012e30:	00db      	lsls	r3, r3, #3
 8012e32:	4403      	add	r3, r0
 8012e34:	3304      	adds	r3, #4
 8012e36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012e38:	4299      	cmp	r1, r3
 8012e3a:	d10a      	bne.n	8012e52 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8012e3c:	7dfa      	ldrb	r2, [r7, #23]
 8012e3e:	4b1b      	ldr	r3, [pc, #108]	; (8012eac <etharp_output+0x1d4>)
 8012e40:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012e42:	7dfb      	ldrb	r3, [r7, #23]
 8012e44:	461a      	mov	r2, r3
 8012e46:	68b9      	ldr	r1, [r7, #8]
 8012e48:	68f8      	ldr	r0, [r7, #12]
 8012e4a:	f7ff feab 	bl	8012ba4 <etharp_output_to_arp_index>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	e01c      	b.n	8012e8c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	3301      	adds	r3, #1
 8012e5a:	b2db      	uxtb	r3, r3
 8012e5c:	75fb      	strb	r3, [r7, #23]
 8012e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012e62:	2b09      	cmp	r3, #9
 8012e64:	ddd0      	ble.n	8012e08 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012e66:	68ba      	ldr	r2, [r7, #8]
 8012e68:	69b9      	ldr	r1, [r7, #24]
 8012e6a:	68f8      	ldr	r0, [r7, #12]
 8012e6c:	f000 f822 	bl	8012eb4 <etharp_query>
 8012e70:	4603      	mov	r3, r0
 8012e72:	e00b      	b.n	8012e8c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8012e7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e7e:	9300      	str	r3, [sp, #0]
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	68b9      	ldr	r1, [r7, #8]
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f001 fccd 	bl	8014824 <ethernet_output>
 8012e8a:	4603      	mov	r3, r0
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3720      	adds	r7, #32
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	08017cb4 	.word	0x08017cb4
 8012e98:	08017e04 	.word	0x08017e04
 8012e9c:	08017d2c 	.word	0x08017d2c
 8012ea0:	08017e54 	.word	0x08017e54
 8012ea4:	08017df4 	.word	0x08017df4
 8012ea8:	08018768 	.word	0x08018768
 8012eac:	20004c18 	.word	0x20004c18
 8012eb0:	20004b28 	.word	0x20004b28

08012eb4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b08c      	sub	sp, #48	; 0x30
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	3329      	adds	r3, #41	; 0x29
 8012ec4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012ec6:	23ff      	movs	r3, #255	; 0xff
 8012ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	68f9      	ldr	r1, [r7, #12]
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f000 fdfe 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d10c      	bne.n	8012efc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012eea:	2be0      	cmp	r3, #224	; 0xe0
 8012eec:	d006      	beq.n	8012efc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d003      	beq.n	8012efc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d102      	bne.n	8012f02 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012efc:	f06f 030f 	mvn.w	r3, #15
 8012f00:	e10e      	b.n	8013120 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012f02:	68fa      	ldr	r2, [r7, #12]
 8012f04:	2101      	movs	r1, #1
 8012f06:	68b8      	ldr	r0, [r7, #8]
 8012f08:	f7ff fba0 	bl	801264c <etharp_find_entry>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8012f10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	da02      	bge.n	8012f1e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8012f18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f1c:	e100      	b.n	8013120 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012f1e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012f22:	4981      	ldr	r1, [pc, #516]	; (8013128 <etharp_query+0x274>)
 8012f24:	4613      	mov	r3, r2
 8012f26:	005b      	lsls	r3, r3, #1
 8012f28:	4413      	add	r3, r2
 8012f2a:	00db      	lsls	r3, r3, #3
 8012f2c:	440b      	add	r3, r1
 8012f2e:	3314      	adds	r3, #20
 8012f30:	781b      	ldrb	r3, [r3, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d117      	bne.n	8012f66 <etharp_query+0xb2>
    is_new_entry = 1;
 8012f36:	2301      	movs	r3, #1
 8012f38:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012f3a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012f3e:	497a      	ldr	r1, [pc, #488]	; (8013128 <etharp_query+0x274>)
 8012f40:	4613      	mov	r3, r2
 8012f42:	005b      	lsls	r3, r3, #1
 8012f44:	4413      	add	r3, r2
 8012f46:	00db      	lsls	r3, r3, #3
 8012f48:	440b      	add	r3, r1
 8012f4a:	3314      	adds	r3, #20
 8012f4c:	2201      	movs	r2, #1
 8012f4e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012f50:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012f54:	4974      	ldr	r1, [pc, #464]	; (8013128 <etharp_query+0x274>)
 8012f56:	4613      	mov	r3, r2
 8012f58:	005b      	lsls	r3, r3, #1
 8012f5a:	4413      	add	r3, r2
 8012f5c:	00db      	lsls	r3, r3, #3
 8012f5e:	440b      	add	r3, r1
 8012f60:	3308      	adds	r3, #8
 8012f62:	68fa      	ldr	r2, [r7, #12]
 8012f64:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012f66:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012f6a:	496f      	ldr	r1, [pc, #444]	; (8013128 <etharp_query+0x274>)
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	005b      	lsls	r3, r3, #1
 8012f70:	4413      	add	r3, r2
 8012f72:	00db      	lsls	r3, r3, #3
 8012f74:	440b      	add	r3, r1
 8012f76:	3314      	adds	r3, #20
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d012      	beq.n	8012fa4 <etharp_query+0xf0>
 8012f7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012f82:	4969      	ldr	r1, [pc, #420]	; (8013128 <etharp_query+0x274>)
 8012f84:	4613      	mov	r3, r2
 8012f86:	005b      	lsls	r3, r3, #1
 8012f88:	4413      	add	r3, r2
 8012f8a:	00db      	lsls	r3, r3, #3
 8012f8c:	440b      	add	r3, r1
 8012f8e:	3314      	adds	r3, #20
 8012f90:	781b      	ldrb	r3, [r3, #0]
 8012f92:	2b01      	cmp	r3, #1
 8012f94:	d806      	bhi.n	8012fa4 <etharp_query+0xf0>
 8012f96:	4b65      	ldr	r3, [pc, #404]	; (801312c <etharp_query+0x278>)
 8012f98:	f240 32c7 	movw	r2, #967	; 0x3c7
 8012f9c:	4964      	ldr	r1, [pc, #400]	; (8013130 <etharp_query+0x27c>)
 8012f9e:	4865      	ldr	r0, [pc, #404]	; (8013134 <etharp_query+0x280>)
 8012fa0:	f001 fdfc 	bl	8014b9c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012fa4:	6a3b      	ldr	r3, [r7, #32]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d102      	bne.n	8012fb0 <etharp_query+0xfc>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10c      	bne.n	8012fca <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012fb0:	68b9      	ldr	r1, [r7, #8]
 8012fb2:	68f8      	ldr	r0, [r7, #12]
 8012fb4:	f000 f974 	bl	80132a0 <etharp_request>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d102      	bne.n	8012fca <etharp_query+0x116>
      return result;
 8012fc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012fc8:	e0aa      	b.n	8013120 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d106      	bne.n	8012fde <etharp_query+0x12a>
 8012fd0:	4b56      	ldr	r3, [pc, #344]	; (801312c <etharp_query+0x278>)
 8012fd2:	f240 32db 	movw	r2, #987	; 0x3db
 8012fd6:	4958      	ldr	r1, [pc, #352]	; (8013138 <etharp_query+0x284>)
 8012fd8:	4856      	ldr	r0, [pc, #344]	; (8013134 <etharp_query+0x280>)
 8012fda:	f001 fddf 	bl	8014b9c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012fde:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012fe2:	4951      	ldr	r1, [pc, #324]	; (8013128 <etharp_query+0x274>)
 8012fe4:	4613      	mov	r3, r2
 8012fe6:	005b      	lsls	r3, r3, #1
 8012fe8:	4413      	add	r3, r2
 8012fea:	00db      	lsls	r3, r3, #3
 8012fec:	440b      	add	r3, r1
 8012fee:	3314      	adds	r3, #20
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d918      	bls.n	8013028 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8012ff6:	7cfa      	ldrb	r2, [r7, #19]
 8012ff8:	4b50      	ldr	r3, [pc, #320]	; (801313c <etharp_query+0x288>)
 8012ffa:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012ffc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013000:	4613      	mov	r3, r2
 8013002:	005b      	lsls	r3, r3, #1
 8013004:	4413      	add	r3, r2
 8013006:	00db      	lsls	r3, r3, #3
 8013008:	3308      	adds	r3, #8
 801300a:	4a47      	ldr	r2, [pc, #284]	; (8013128 <etharp_query+0x274>)
 801300c:	4413      	add	r3, r2
 801300e:	3304      	adds	r3, #4
 8013010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013014:	9200      	str	r2, [sp, #0]
 8013016:	697a      	ldr	r2, [r7, #20]
 8013018:	6879      	ldr	r1, [r7, #4]
 801301a:	68f8      	ldr	r0, [r7, #12]
 801301c:	f001 fc02 	bl	8014824 <ethernet_output>
 8013020:	4603      	mov	r3, r0
 8013022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013026:	e079      	b.n	801311c <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013028:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801302c:	493e      	ldr	r1, [pc, #248]	; (8013128 <etharp_query+0x274>)
 801302e:	4613      	mov	r3, r2
 8013030:	005b      	lsls	r3, r3, #1
 8013032:	4413      	add	r3, r2
 8013034:	00db      	lsls	r3, r3, #3
 8013036:	440b      	add	r3, r1
 8013038:	3314      	adds	r3, #20
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	2b01      	cmp	r3, #1
 801303e:	d16d      	bne.n	801311c <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013040:	2300      	movs	r3, #0
 8013042:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013048:	e01a      	b.n	8013080 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	895a      	ldrh	r2, [r3, #10]
 801304e:	69fb      	ldr	r3, [r7, #28]
 8013050:	891b      	ldrh	r3, [r3, #8]
 8013052:	429a      	cmp	r2, r3
 8013054:	d10a      	bne.n	801306c <etharp_query+0x1b8>
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d006      	beq.n	801306c <etharp_query+0x1b8>
 801305e:	4b33      	ldr	r3, [pc, #204]	; (801312c <etharp_query+0x278>)
 8013060:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8013064:	4936      	ldr	r1, [pc, #216]	; (8013140 <etharp_query+0x28c>)
 8013066:	4833      	ldr	r0, [pc, #204]	; (8013134 <etharp_query+0x280>)
 8013068:	f001 fd98 	bl	8014b9c <iprintf>
      if (p->type != PBUF_ROM) {
 801306c:	69fb      	ldr	r3, [r7, #28]
 801306e:	7b1b      	ldrb	r3, [r3, #12]
 8013070:	2b01      	cmp	r3, #1
 8013072:	d002      	beq.n	801307a <etharp_query+0x1c6>
        copy_needed = 1;
 8013074:	2301      	movs	r3, #1
 8013076:	61bb      	str	r3, [r7, #24]
        break;
 8013078:	e005      	b.n	8013086 <etharp_query+0x1d2>
      }
      p = p->next;
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d1e1      	bne.n	801304a <etharp_query+0x196>
    }
    if (copy_needed) {
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d017      	beq.n	80130bc <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	891b      	ldrh	r3, [r3, #8]
 8013090:	2200      	movs	r2, #0
 8013092:	4619      	mov	r1, r3
 8013094:	2002      	movs	r0, #2
 8013096:	f7f8 fda3 	bl	800bbe0 <pbuf_alloc>
 801309a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d011      	beq.n	80130c6 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 80130a2:	6879      	ldr	r1, [r7, #4]
 80130a4:	69f8      	ldr	r0, [r7, #28]
 80130a6:	f7f9 fa3b 	bl	800c520 <pbuf_copy>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00a      	beq.n	80130c6 <etharp_query+0x212>
          pbuf_free(p);
 80130b0:	69f8      	ldr	r0, [r7, #28]
 80130b2:	f7f9 f907 	bl	800c2c4 <pbuf_free>
          p = NULL;
 80130b6:	2300      	movs	r3, #0
 80130b8:	61fb      	str	r3, [r7, #28]
 80130ba:	e004      	b.n	80130c6 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80130c0:	69f8      	ldr	r0, [r7, #28]
 80130c2:	f7f9 f9af 	bl	800c424 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d024      	beq.n	8013116 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80130cc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80130d0:	4915      	ldr	r1, [pc, #84]	; (8013128 <etharp_query+0x274>)
 80130d2:	4613      	mov	r3, r2
 80130d4:	005b      	lsls	r3, r3, #1
 80130d6:	4413      	add	r3, r2
 80130d8:	00db      	lsls	r3, r3, #3
 80130da:	440b      	add	r3, r1
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d00b      	beq.n	80130fa <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80130e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80130e6:	4910      	ldr	r1, [pc, #64]	; (8013128 <etharp_query+0x274>)
 80130e8:	4613      	mov	r3, r2
 80130ea:	005b      	lsls	r3, r3, #1
 80130ec:	4413      	add	r3, r2
 80130ee:	00db      	lsls	r3, r3, #3
 80130f0:	440b      	add	r3, r1
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7f9 f8e5 	bl	800c2c4 <pbuf_free>
      }
      arp_table[i].q = p;
 80130fa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80130fe:	490a      	ldr	r1, [pc, #40]	; (8013128 <etharp_query+0x274>)
 8013100:	4613      	mov	r3, r2
 8013102:	005b      	lsls	r3, r3, #1
 8013104:	4413      	add	r3, r2
 8013106:	00db      	lsls	r3, r3, #3
 8013108:	440b      	add	r3, r1
 801310a:	69fa      	ldr	r2, [r7, #28]
 801310c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801310e:	2300      	movs	r3, #0
 8013110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013114:	e002      	b.n	801311c <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013116:	23ff      	movs	r3, #255	; 0xff
 8013118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801311c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013120:	4618      	mov	r0, r3
 8013122:	3728      	adds	r7, #40	; 0x28
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	20004b28 	.word	0x20004b28
 801312c:	08017cb4 	.word	0x08017cb4
 8013130:	08017e60 	.word	0x08017e60
 8013134:	08017d2c 	.word	0x08017d2c
 8013138:	08017e54 	.word	0x08017e54
 801313c:	20004c18 	.word	0x20004c18
 8013140:	08017e88 	.word	0x08017e88

08013144 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b08a      	sub	sp, #40	; 0x28
 8013148:	af02      	add	r7, sp, #8
 801314a:	60f8      	str	r0, [r7, #12]
 801314c:	60b9      	str	r1, [r7, #8]
 801314e:	607a      	str	r2, [r7, #4]
 8013150:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013152:	2300      	movs	r3, #0
 8013154:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d106      	bne.n	801316a <etharp_raw+0x26>
 801315c:	4b3a      	ldr	r3, [pc, #232]	; (8013248 <etharp_raw+0x104>)
 801315e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8013162:	493a      	ldr	r1, [pc, #232]	; (801324c <etharp_raw+0x108>)
 8013164:	483a      	ldr	r0, [pc, #232]	; (8013250 <etharp_raw+0x10c>)
 8013166:	f001 fd19 	bl	8014b9c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801316a:	2200      	movs	r2, #0
 801316c:	211c      	movs	r1, #28
 801316e:	2002      	movs	r0, #2
 8013170:	f7f8 fd36 	bl	800bbe0 <pbuf_alloc>
 8013174:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d102      	bne.n	8013182 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801317c:	f04f 33ff 	mov.w	r3, #4294967295
 8013180:	e05d      	b.n	801323e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	895b      	ldrh	r3, [r3, #10]
 8013186:	2b1b      	cmp	r3, #27
 8013188:	d806      	bhi.n	8013198 <etharp_raw+0x54>
 801318a:	4b2f      	ldr	r3, [pc, #188]	; (8013248 <etharp_raw+0x104>)
 801318c:	f240 4263 	movw	r2, #1123	; 0x463
 8013190:	4930      	ldr	r1, [pc, #192]	; (8013254 <etharp_raw+0x110>)
 8013192:	482f      	ldr	r0, [pc, #188]	; (8013250 <etharp_raw+0x10c>)
 8013194:	f001 fd02 	bl	8014b9c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013198:	69bb      	ldr	r3, [r7, #24]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801319e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7f7 fe33 	bl	800ae0c <lwip_htons>
 80131a6:	4603      	mov	r3, r0
 80131a8:	461a      	mov	r2, r3
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131b4:	2b06      	cmp	r3, #6
 80131b6:	d006      	beq.n	80131c6 <etharp_raw+0x82>
 80131b8:	4b23      	ldr	r3, [pc, #140]	; (8013248 <etharp_raw+0x104>)
 80131ba:	f240 426a 	movw	r2, #1130	; 0x46a
 80131be:	4926      	ldr	r1, [pc, #152]	; (8013258 <etharp_raw+0x114>)
 80131c0:	4823      	ldr	r0, [pc, #140]	; (8013250 <etharp_raw+0x10c>)
 80131c2:	f001 fceb 	bl	8014b9c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	3308      	adds	r3, #8
 80131ca:	2206      	movs	r2, #6
 80131cc:	6839      	ldr	r1, [r7, #0]
 80131ce:	4618      	mov	r0, r3
 80131d0:	f001 fcce 	bl	8014b70 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	3312      	adds	r3, #18
 80131d8:	2206      	movs	r2, #6
 80131da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80131dc:	4618      	mov	r0, r3
 80131de:	f001 fcc7 	bl	8014b70 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	330e      	adds	r3, #14
 80131e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131e8:	6812      	ldr	r2, [r2, #0]
 80131ea:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	3318      	adds	r3, #24
 80131f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131f2:	6812      	ldr	r2, [r2, #0]
 80131f4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	2200      	movs	r2, #0
 80131fa:	701a      	strb	r2, [r3, #0]
 80131fc:	2200      	movs	r2, #0
 80131fe:	f042 0201 	orr.w	r2, r2, #1
 8013202:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	2200      	movs	r2, #0
 8013208:	f042 0208 	orr.w	r2, r2, #8
 801320c:	709a      	strb	r2, [r3, #2]
 801320e:	2200      	movs	r2, #0
 8013210:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	2206      	movs	r2, #6
 8013216:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	2204      	movs	r2, #4
 801321c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801321e:	f640 0306 	movw	r3, #2054	; 0x806
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	68ba      	ldr	r2, [r7, #8]
 8013228:	69b9      	ldr	r1, [r7, #24]
 801322a:	68f8      	ldr	r0, [r7, #12]
 801322c:	f001 fafa 	bl	8014824 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013230:	69b8      	ldr	r0, [r7, #24]
 8013232:	f7f9 f847 	bl	800c2c4 <pbuf_free>
  p = NULL;
 8013236:	2300      	movs	r3, #0
 8013238:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801323a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3720      	adds	r7, #32
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	08017cb4 	.word	0x08017cb4
 801324c:	08017e04 	.word	0x08017e04
 8013250:	08017d2c 	.word	0x08017d2c
 8013254:	08017ea4 	.word	0x08017ea4
 8013258:	08017ed8 	.word	0x08017ed8

0801325c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b088      	sub	sp, #32
 8013260:	af04      	add	r7, sp, #16
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013278:	2201      	movs	r2, #1
 801327a:	9203      	str	r2, [sp, #12]
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	9202      	str	r2, [sp, #8]
 8013280:	4a06      	ldr	r2, [pc, #24]	; (801329c <etharp_request_dst+0x40>)
 8013282:	9201      	str	r2, [sp, #4]
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	4603      	mov	r3, r0
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	68f8      	ldr	r0, [r7, #12]
 801328c:	f7ff ff5a 	bl	8013144 <etharp_raw>
 8013290:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013292:	4618      	mov	r0, r3
 8013294:	3710      	adds	r7, #16
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	08018770 	.word	0x08018770

080132a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80132aa:	4a05      	ldr	r2, [pc, #20]	; (80132c0 <etharp_request+0x20>)
 80132ac:	6839      	ldr	r1, [r7, #0]
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f7ff ffd4 	bl	801325c <etharp_request_dst>
 80132b4:	4603      	mov	r3, r0
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3708      	adds	r7, #8
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	08018768 	.word	0x08018768

080132c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08e      	sub	sp, #56	; 0x38
 80132c8:	af04      	add	r7, sp, #16
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80132ce:	4b7a      	ldr	r3, [pc, #488]	; (80134b8 <icmp_input+0x1f4>)
 80132d0:	689b      	ldr	r3, [r3, #8]
 80132d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80132d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	b29b      	uxth	r3, r3
 80132da:	f003 030f 	and.w	r3, r3, #15
 80132de:	b29b      	uxth	r3, r3
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80132e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132e6:	2b13      	cmp	r3, #19
 80132e8:	f240 80d1 	bls.w	801348e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	895b      	ldrh	r3, [r3, #10]
 80132f0:	2b03      	cmp	r3, #3
 80132f2:	f240 80ce 	bls.w	8013492 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013300:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013304:	2b00      	cmp	r3, #0
 8013306:	f000 80bb 	beq.w	8013480 <icmp_input+0x1bc>
 801330a:	2b08      	cmp	r3, #8
 801330c:	f040 80bb 	bne.w	8013486 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8013310:	4b6a      	ldr	r3, [pc, #424]	; (80134bc <icmp_input+0x1f8>)
 8013312:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013314:	4b68      	ldr	r3, [pc, #416]	; (80134b8 <icmp_input+0x1f4>)
 8013316:	695b      	ldr	r3, [r3, #20]
 8013318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801331c:	2be0      	cmp	r3, #224	; 0xe0
 801331e:	f000 80bf 	beq.w	80134a0 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013322:	4b65      	ldr	r3, [pc, #404]	; (80134b8 <icmp_input+0x1f4>)
 8013324:	695b      	ldr	r3, [r3, #20]
 8013326:	4a64      	ldr	r2, [pc, #400]	; (80134b8 <icmp_input+0x1f4>)
 8013328:	6812      	ldr	r2, [r2, #0]
 801332a:	4611      	mov	r1, r2
 801332c:	4618      	mov	r0, r3
 801332e:	f000 fbd3 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 8013332:	4603      	mov	r3, r0
 8013334:	2b00      	cmp	r3, #0
 8013336:	f040 80b5 	bne.w	80134a4 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	891b      	ldrh	r3, [r3, #8]
 801333e:	2b07      	cmp	r3, #7
 8013340:	f240 80a9 	bls.w	8013496 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8013344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013346:	330e      	adds	r3, #14
 8013348:	b29b      	uxth	r3, r3
 801334a:	b21b      	sxth	r3, r3
 801334c:	4619      	mov	r1, r3
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f7f8 ff94 	bl	800c27c <pbuf_header>
 8013354:	4603      	mov	r3, r0
 8013356:	2b00      	cmp	r3, #0
 8013358:	d046      	beq.n	80133e8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	891a      	ldrh	r2, [r3, #8]
 801335e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013360:	4413      	add	r3, r2
 8013362:	b29b      	uxth	r3, r3
 8013364:	2200      	movs	r2, #0
 8013366:	4619      	mov	r1, r3
 8013368:	2002      	movs	r0, #2
 801336a:	f7f8 fc39 	bl	800bbe0 <pbuf_alloc>
 801336e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	2b00      	cmp	r3, #0
 8013374:	f000 8098 	beq.w	80134a8 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	895b      	ldrh	r3, [r3, #10]
 801337c:	461a      	mov	r2, r3
 801337e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013380:	3308      	adds	r3, #8
 8013382:	429a      	cmp	r2, r3
 8013384:	d203      	bcs.n	801338e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8013386:	69b8      	ldr	r0, [r7, #24]
 8013388:	f7f8 ff9c 	bl	800c2c4 <pbuf_free>
        goto icmperr;
 801338c:	e08d      	b.n	80134aa <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013396:	4618      	mov	r0, r3
 8013398:	f001 fbea 	bl	8014b70 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801339c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801339e:	425b      	negs	r3, r3
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	b21b      	sxth	r3, r3
 80133a4:	4619      	mov	r1, r3
 80133a6:	69b8      	ldr	r0, [r7, #24]
 80133a8:	f7f8 ff68 	bl	800c27c <pbuf_header>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d009      	beq.n	80133c6 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80133b2:	4b43      	ldr	r3, [pc, #268]	; (80134c0 <icmp_input+0x1fc>)
 80133b4:	22af      	movs	r2, #175	; 0xaf
 80133b6:	4943      	ldr	r1, [pc, #268]	; (80134c4 <icmp_input+0x200>)
 80133b8:	4843      	ldr	r0, [pc, #268]	; (80134c8 <icmp_input+0x204>)
 80133ba:	f001 fbef 	bl	8014b9c <iprintf>
        pbuf_free(r);
 80133be:	69b8      	ldr	r0, [r7, #24]
 80133c0:	f7f8 ff80 	bl	800c2c4 <pbuf_free>
        goto icmperr;
 80133c4:	e071      	b.n	80134aa <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80133c6:	6879      	ldr	r1, [r7, #4]
 80133c8:	69b8      	ldr	r0, [r7, #24]
 80133ca:	f7f9 f8a9 	bl	800c520 <pbuf_copy>
 80133ce:	4603      	mov	r3, r0
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d003      	beq.n	80133dc <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80133d4:	69b8      	ldr	r0, [r7, #24]
 80133d6:	f7f8 ff75 	bl	800c2c4 <pbuf_free>
        goto icmperr;
 80133da:	e066      	b.n	80134aa <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7f8 ff71 	bl	800c2c4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	607b      	str	r3, [r7, #4]
 80133e6:	e015      	b.n	8013414 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80133e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133ea:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80133ee:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80133f2:	33f2      	adds	r3, #242	; 0xf2
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	b21b      	sxth	r3, r3
 80133f8:	4619      	mov	r1, r3
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f7f8 ff3e 	bl	800c27c <pbuf_header>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d006      	beq.n	8013414 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013406:	4b2e      	ldr	r3, [pc, #184]	; (80134c0 <icmp_input+0x1fc>)
 8013408:	22c0      	movs	r2, #192	; 0xc0
 801340a:	4930      	ldr	r1, [pc, #192]	; (80134cc <icmp_input+0x208>)
 801340c:	482e      	ldr	r0, [pc, #184]	; (80134c8 <icmp_input+0x204>)
 801340e:	f001 fbc5 	bl	8014b9c <iprintf>
        goto icmperr;
 8013412:	e04a      	b.n	80134aa <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801341a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801341e:	4619      	mov	r1, r3
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7f8 ff2b 	bl	800c27c <pbuf_header>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d12b      	bne.n	8013484 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801343a:	4b1f      	ldr	r3, [pc, #124]	; (80134b8 <icmp_input+0x1f4>)
 801343c:	691a      	ldr	r2, [r3, #16]
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	2200      	movs	r2, #0
 8013446:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8013448:	697b      	ldr	r3, [r7, #20]
 801344a:	2200      	movs	r2, #0
 801344c:	709a      	strb	r2, [r3, #2]
 801344e:	2200      	movs	r2, #0
 8013450:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	22ff      	movs	r2, #255	; 0xff
 8013456:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	2200      	movs	r2, #0
 801345c:	729a      	strb	r2, [r3, #10]
 801345e:	2200      	movs	r2, #0
 8013460:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	9302      	str	r3, [sp, #8]
 8013466:	2301      	movs	r3, #1
 8013468:	9301      	str	r3, [sp, #4]
 801346a:	2300      	movs	r3, #0
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	23ff      	movs	r3, #255	; 0xff
 8013470:	2200      	movs	r2, #0
 8013472:	69f9      	ldr	r1, [r7, #28]
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f000 fa5d 	bl	8013934 <ip4_output_if>
 801347a:	4603      	mov	r3, r0
 801347c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801347e:	e001      	b.n	8013484 <icmp_input+0x1c0>
    break;
 8013480:	bf00      	nop
 8013482:	e000      	b.n	8013486 <icmp_input+0x1c2>
    break;
 8013484:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f7f8 ff1c 	bl	800c2c4 <pbuf_free>
  return;
 801348c:	e011      	b.n	80134b2 <icmp_input+0x1ee>
    goto lenerr;
 801348e:	bf00      	nop
 8013490:	e002      	b.n	8013498 <icmp_input+0x1d4>
    goto lenerr;
 8013492:	bf00      	nop
 8013494:	e000      	b.n	8013498 <icmp_input+0x1d4>
      goto lenerr;
 8013496:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f7f8 ff13 	bl	800c2c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801349e:	e008      	b.n	80134b2 <icmp_input+0x1ee>
      goto icmperr;
 80134a0:	bf00      	nop
 80134a2:	e002      	b.n	80134aa <icmp_input+0x1e6>
      goto icmperr;
 80134a4:	bf00      	nop
 80134a6:	e000      	b.n	80134aa <icmp_input+0x1e6>
        goto icmperr;
 80134a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f7f8 ff0a 	bl	800c2c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80134b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80134b2:	3728      	adds	r7, #40	; 0x28
 80134b4:	46bd      	mov	sp, r7
 80134b6:	bd80      	pop	{r7, pc}
 80134b8:	20008434 	.word	0x20008434
 80134bc:	20008448 	.word	0x20008448
 80134c0:	08017f1c 	.word	0x08017f1c
 80134c4:	08017f54 	.word	0x08017f54
 80134c8:	08017f8c 	.word	0x08017f8c
 80134cc:	08017fb4 	.word	0x08017fb4

080134d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b082      	sub	sp, #8
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	460b      	mov	r3, r1
 80134da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80134dc:	78fb      	ldrb	r3, [r7, #3]
 80134de:	461a      	mov	r2, r3
 80134e0:	2103      	movs	r1, #3
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 f814 	bl	8013510 <icmp_send_response>
}
 80134e8:	bf00      	nop
 80134ea:	3708      	adds	r7, #8
 80134ec:	46bd      	mov	sp, r7
 80134ee:	bd80      	pop	{r7, pc}

080134f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b082      	sub	sp, #8
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	460b      	mov	r3, r1
 80134fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80134fc:	78fb      	ldrb	r3, [r7, #3]
 80134fe:	461a      	mov	r2, r3
 8013500:	210b      	movs	r1, #11
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f000 f804 	bl	8013510 <icmp_send_response>
}
 8013508:	bf00      	nop
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}

08013510 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b08c      	sub	sp, #48	; 0x30
 8013514:	af04      	add	r7, sp, #16
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	460b      	mov	r3, r1
 801351a:	70fb      	strb	r3, [r7, #3]
 801351c:	4613      	mov	r3, r2
 801351e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013520:	2200      	movs	r2, #0
 8013522:	2124      	movs	r1, #36	; 0x24
 8013524:	2001      	movs	r0, #1
 8013526:	f7f8 fb5b 	bl	800bbe0 <pbuf_alloc>
 801352a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d04c      	beq.n	80135cc <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013532:	69fb      	ldr	r3, [r7, #28]
 8013534:	895b      	ldrh	r3, [r3, #10]
 8013536:	2b23      	cmp	r3, #35	; 0x23
 8013538:	d806      	bhi.n	8013548 <icmp_send_response+0x38>
 801353a:	4b26      	ldr	r3, [pc, #152]	; (80135d4 <icmp_send_response+0xc4>)
 801353c:	f240 1261 	movw	r2, #353	; 0x161
 8013540:	4925      	ldr	r1, [pc, #148]	; (80135d8 <icmp_send_response+0xc8>)
 8013542:	4826      	ldr	r0, [pc, #152]	; (80135dc <icmp_send_response+0xcc>)
 8013544:	f001 fb2a 	bl	8014b9c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801354e:	69fb      	ldr	r3, [r7, #28]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	78fa      	ldrb	r2, [r7, #3]
 8013558:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	78ba      	ldrb	r2, [r7, #2]
 801355e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013560:	697b      	ldr	r3, [r7, #20]
 8013562:	2200      	movs	r2, #0
 8013564:	711a      	strb	r2, [r3, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	2200      	movs	r2, #0
 801356e:	719a      	strb	r2, [r3, #6]
 8013570:	2200      	movs	r2, #0
 8013572:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013574:	69fb      	ldr	r3, [r7, #28]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	f103 0008 	add.w	r0, r3, #8
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	221c      	movs	r2, #28
 8013582:	4619      	mov	r1, r3
 8013584:	f001 faf4 	bl	8014b70 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013588:	69bb      	ldr	r3, [r7, #24]
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801358e:	f107 030c 	add.w	r3, r7, #12
 8013592:	4618      	mov	r0, r3
 8013594:	f000 f824 	bl	80135e0 <ip4_route>
 8013598:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d011      	beq.n	80135c4 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80135a0:	697b      	ldr	r3, [r7, #20]
 80135a2:	2200      	movs	r2, #0
 80135a4:	709a      	strb	r2, [r3, #2]
 80135a6:	2200      	movs	r2, #0
 80135a8:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80135aa:	f107 020c 	add.w	r2, r7, #12
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	9302      	str	r3, [sp, #8]
 80135b2:	2301      	movs	r3, #1
 80135b4:	9301      	str	r3, [sp, #4]
 80135b6:	2300      	movs	r3, #0
 80135b8:	9300      	str	r3, [sp, #0]
 80135ba:	23ff      	movs	r3, #255	; 0xff
 80135bc:	2100      	movs	r1, #0
 80135be:	69f8      	ldr	r0, [r7, #28]
 80135c0:	f000 f9b8 	bl	8013934 <ip4_output_if>
  }
  pbuf_free(q);
 80135c4:	69f8      	ldr	r0, [r7, #28]
 80135c6:	f7f8 fe7d 	bl	800c2c4 <pbuf_free>
 80135ca:	e000      	b.n	80135ce <icmp_send_response+0xbe>
    return;
 80135cc:	bf00      	nop
}
 80135ce:	3720      	adds	r7, #32
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}
 80135d4:	08017f1c 	.word	0x08017f1c
 80135d8:	08017fe8 	.word	0x08017fe8
 80135dc:	08017f8c 	.word	0x08017f8c

080135e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80135e8:	4b30      	ldr	r3, [pc, #192]	; (80136ac <ip4_route+0xcc>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	60fb      	str	r3, [r7, #12]
 80135ee:	e036      	b.n	801365e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80135f6:	f003 0301 	and.w	r3, r3, #1
 80135fa:	b2db      	uxtb	r3, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d02b      	beq.n	8013658 <ip4_route+0x78>
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013606:	089b      	lsrs	r3, r3, #2
 8013608:	f003 0301 	and.w	r3, r3, #1
 801360c:	b2db      	uxtb	r3, r3
 801360e:	2b00      	cmp	r3, #0
 8013610:	d022      	beq.n	8013658 <ip4_route+0x78>
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	3304      	adds	r3, #4
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d01d      	beq.n	8013658 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681a      	ldr	r2, [r3, #0]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	3304      	adds	r3, #4
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	405a      	eors	r2, r3
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	3308      	adds	r3, #8
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	4013      	ands	r3, r2
 8013630:	2b00      	cmp	r3, #0
 8013632:	d101      	bne.n	8013638 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	e033      	b.n	80136a0 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801363e:	f003 0302 	and.w	r3, r3, #2
 8013642:	2b00      	cmp	r3, #0
 8013644:	d108      	bne.n	8013658 <ip4_route+0x78>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	330c      	adds	r3, #12
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	429a      	cmp	r2, r3
 8013652:	d101      	bne.n	8013658 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	e023      	b.n	80136a0 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	60fb      	str	r3, [r7, #12]
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1c5      	bne.n	80135f0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013664:	4b12      	ldr	r3, [pc, #72]	; (80136b0 <ip4_route+0xd0>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d015      	beq.n	8013698 <ip4_route+0xb8>
 801366c:	4b10      	ldr	r3, [pc, #64]	; (80136b0 <ip4_route+0xd0>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013674:	f003 0301 	and.w	r3, r3, #1
 8013678:	2b00      	cmp	r3, #0
 801367a:	d00d      	beq.n	8013698 <ip4_route+0xb8>
 801367c:	4b0c      	ldr	r3, [pc, #48]	; (80136b0 <ip4_route+0xd0>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013684:	f003 0304 	and.w	r3, r3, #4
 8013688:	2b00      	cmp	r3, #0
 801368a:	d005      	beq.n	8013698 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801368c:	4b08      	ldr	r3, [pc, #32]	; (80136b0 <ip4_route+0xd0>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	3304      	adds	r3, #4
 8013692:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013694:	2b00      	cmp	r3, #0
 8013696:	d101      	bne.n	801369c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013698:	2300      	movs	r3, #0
 801369a:	e001      	b.n	80136a0 <ip4_route+0xc0>
  }

  return netif_default;
 801369c:	4b04      	ldr	r3, [pc, #16]	; (80136b0 <ip4_route+0xd0>)
 801369e:	681b      	ldr	r3, [r3, #0]
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3714      	adds	r7, #20
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bc80      	pop	{r7}
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	2000bb54 	.word	0x2000bb54
 80136b0:	2000bb58 	.word	0x2000bb58

080136b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
 80136bc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	091b      	lsrs	r3, r3, #4
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	2b04      	cmp	r3, #4
 80136ce:	d004      	beq.n	80136da <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f7f8 fdf7 	bl	800c2c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	e124      	b.n	8013924 <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	b29b      	uxth	r3, r3
 80136e0:	f003 030f 	and.w	r3, r3, #15
 80136e4:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80136e6:	897b      	ldrh	r3, [r7, #10]
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	885b      	ldrh	r3, [r3, #2]
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7f7 fb8a 	bl	800ae0c <lwip_htons>
 80136f8:	4603      	mov	r3, r0
 80136fa:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	891b      	ldrh	r3, [r3, #8]
 8013700:	893a      	ldrh	r2, [r7, #8]
 8013702:	429a      	cmp	r2, r3
 8013704:	d204      	bcs.n	8013710 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8013706:	893b      	ldrh	r3, [r7, #8]
 8013708:	4619      	mov	r1, r3
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f7f8 fc66 	bl	800bfdc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	895b      	ldrh	r3, [r3, #10]
 8013714:	897a      	ldrh	r2, [r7, #10]
 8013716:	429a      	cmp	r2, r3
 8013718:	d807      	bhi.n	801372a <ip4_input+0x76>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	891b      	ldrh	r3, [r3, #8]
 801371e:	893a      	ldrh	r2, [r7, #8]
 8013720:	429a      	cmp	r2, r3
 8013722:	d802      	bhi.n	801372a <ip4_input+0x76>
 8013724:	897b      	ldrh	r3, [r7, #10]
 8013726:	2b13      	cmp	r3, #19
 8013728:	d804      	bhi.n	8013734 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f7f8 fdca 	bl	800c2c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013730:	2300      	movs	r3, #0
 8013732:	e0f7      	b.n	8013924 <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	691b      	ldr	r3, [r3, #16]
 8013738:	4a7c      	ldr	r2, [pc, #496]	; (801392c <ip4_input+0x278>)
 801373a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	68db      	ldr	r3, [r3, #12]
 8013740:	4a7a      	ldr	r2, [pc, #488]	; (801392c <ip4_input+0x278>)
 8013742:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013744:	4b79      	ldr	r3, [pc, #484]	; (801392c <ip4_input+0x278>)
 8013746:	695b      	ldr	r3, [r3, #20]
 8013748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801374c:	2be0      	cmp	r3, #224	; 0xe0
 801374e:	d112      	bne.n	8013776 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013756:	f003 0301 	and.w	r3, r3, #1
 801375a:	b2db      	uxtb	r3, r3
 801375c:	2b00      	cmp	r3, #0
 801375e:	d007      	beq.n	8013770 <ip4_input+0xbc>
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	3304      	adds	r3, #4
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d002      	beq.n	8013770 <ip4_input+0xbc>
      netif = inp;
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	613b      	str	r3, [r7, #16]
 801376e:	e041      	b.n	80137f4 <ip4_input+0x140>
    } else {
      netif = NULL;
 8013770:	2300      	movs	r3, #0
 8013772:	613b      	str	r3, [r7, #16]
 8013774:	e03e      	b.n	80137f4 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8013776:	2301      	movs	r3, #1
 8013778:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013784:	f003 0301 	and.w	r3, r3, #1
 8013788:	b2db      	uxtb	r3, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	d014      	beq.n	80137b8 <ip4_input+0x104>
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	3304      	adds	r3, #4
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d00f      	beq.n	80137b8 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013798:	4b64      	ldr	r3, [pc, #400]	; (801392c <ip4_input+0x278>)
 801379a:	695a      	ldr	r2, [r3, #20]
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	3304      	adds	r3, #4
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d026      	beq.n	80137f4 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80137a6:	4b61      	ldr	r3, [pc, #388]	; (801392c <ip4_input+0x278>)
 80137a8:	695b      	ldr	r3, [r3, #20]
 80137aa:	6939      	ldr	r1, [r7, #16]
 80137ac:	4618      	mov	r0, r3
 80137ae:	f000 f993 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 80137b2:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d11d      	bne.n	80137f4 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00d      	beq.n	80137da <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80137be:	4b5b      	ldr	r3, [pc, #364]	; (801392c <ip4_input+0x278>)
 80137c0:	695b      	ldr	r3, [r3, #20]
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	2b7f      	cmp	r3, #127	; 0x7f
 80137c6:	d102      	bne.n	80137ce <ip4_input+0x11a>
          netif = NULL;
 80137c8:	2300      	movs	r3, #0
 80137ca:	613b      	str	r3, [r7, #16]
          break;
 80137cc:	e012      	b.n	80137f4 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80137ce:	2300      	movs	r3, #0
 80137d0:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 80137d2:	4b57      	ldr	r3, [pc, #348]	; (8013930 <ip4_input+0x27c>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	613b      	str	r3, [r7, #16]
 80137d8:	e002      	b.n	80137e0 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 80137e0:	693a      	ldr	r2, [r7, #16]
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d102      	bne.n	80137ee <ip4_input+0x13a>
        netif = netif->next;
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d1c4      	bne.n	801377e <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80137f4:	4b4d      	ldr	r3, [pc, #308]	; (801392c <ip4_input+0x278>)
 80137f6:	691b      	ldr	r3, [r3, #16]
 80137f8:	6839      	ldr	r1, [r7, #0]
 80137fa:	4618      	mov	r0, r3
 80137fc:	f000 f96c 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 8013800:	4603      	mov	r3, r0
 8013802:	2b00      	cmp	r3, #0
 8013804:	d105      	bne.n	8013812 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013806:	4b49      	ldr	r3, [pc, #292]	; (801392c <ip4_input+0x278>)
 8013808:	691b      	ldr	r3, [r3, #16]
 801380a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801380e:	2be0      	cmp	r3, #224	; 0xe0
 8013810:	d104      	bne.n	801381c <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f7f8 fd56 	bl	800c2c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013818:	2300      	movs	r3, #0
 801381a:	e083      	b.n	8013924 <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d104      	bne.n	801382c <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f7f8 fd4e 	bl	800c2c4 <pbuf_free>
    return ERR_OK;
 8013828:	2300      	movs	r3, #0
 801382a:	e07b      	b.n	8013924 <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	88db      	ldrh	r3, [r3, #6]
 8013830:	b29b      	uxth	r3, r3
 8013832:	461a      	mov	r2, r3
 8013834:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013838:	4013      	ands	r3, r2
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00b      	beq.n	8013856 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f000 fc8e 	bl	8014160 <ip4_reass>
 8013844:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d101      	bne.n	8013850 <ip4_input+0x19c>
      return ERR_OK;
 801384c:	2300      	movs	r3, #0
 801384e:	e069      	b.n	8013924 <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	685b      	ldr	r3, [r3, #4]
 8013854:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013856:	4a35      	ldr	r2, [pc, #212]	; (801392c <ip4_input+0x278>)
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801385c:	4a33      	ldr	r2, [pc, #204]	; (801392c <ip4_input+0x278>)
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013862:	4a32      	ldr	r2, [pc, #200]	; (801392c <ip4_input+0x278>)
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	b29b      	uxth	r3, r3
 801386e:	f003 030f 	and.w	r3, r3, #15
 8013872:	b29b      	uxth	r3, r3
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	b29a      	uxth	r2, r3
 8013878:	4b2c      	ldr	r3, [pc, #176]	; (801392c <ip4_input+0x278>)
 801387a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 801387c:	897b      	ldrh	r3, [r7, #10]
 801387e:	425b      	negs	r3, r3
 8013880:	b29b      	uxth	r3, r3
 8013882:	b21b      	sxth	r3, r3
 8013884:	4619      	mov	r1, r3
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f7f8 fcf8 	bl	800c27c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	7a5b      	ldrb	r3, [r3, #9]
 8013890:	2b11      	cmp	r3, #17
 8013892:	d006      	beq.n	80138a2 <ip4_input+0x1ee>
 8013894:	2b11      	cmp	r3, #17
 8013896:	dc13      	bgt.n	80138c0 <ip4_input+0x20c>
 8013898:	2b01      	cmp	r3, #1
 801389a:	d00c      	beq.n	80138b6 <ip4_input+0x202>
 801389c:	2b06      	cmp	r3, #6
 801389e:	d005      	beq.n	80138ac <ip4_input+0x1f8>
 80138a0:	e00e      	b.n	80138c0 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80138a2:	6839      	ldr	r1, [r7, #0]
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f7fe fce3 	bl	8012270 <udp_input>
      break;
 80138aa:	e028      	b.n	80138fe <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80138ac:	6839      	ldr	r1, [r7, #0]
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f7fa fd08 	bl	800e2c4 <tcp_input>
      break;
 80138b4:	e023      	b.n	80138fe <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80138b6:	6839      	ldr	r1, [r7, #0]
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f7ff fd03 	bl	80132c4 <icmp_input>
      break;
 80138be:	e01e      	b.n	80138fe <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80138c0:	4b1a      	ldr	r3, [pc, #104]	; (801392c <ip4_input+0x278>)
 80138c2:	695b      	ldr	r3, [r3, #20]
 80138c4:	6939      	ldr	r1, [r7, #16]
 80138c6:	4618      	mov	r0, r3
 80138c8:	f000 f906 	bl	8013ad8 <ip4_addr_isbroadcast_u32>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d112      	bne.n	80138f8 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80138d2:	4b16      	ldr	r3, [pc, #88]	; (801392c <ip4_input+0x278>)
 80138d4:	695b      	ldr	r3, [r3, #20]
 80138d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80138da:	2be0      	cmp	r3, #224	; 0xe0
 80138dc:	d00c      	beq.n	80138f8 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80138de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80138e2:	4619      	mov	r1, r3
 80138e4:	6878      	ldr	r0, [r7, #4]
 80138e6:	f7f8 fcdb 	bl	800c2a0 <pbuf_header_force>
        p->payload = iphdr;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	697a      	ldr	r2, [r7, #20]
 80138ee:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80138f0:	2102      	movs	r1, #2
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f7ff fdec 	bl	80134d0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f7f8 fce3 	bl	800c2c4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80138fe:	4b0b      	ldr	r3, [pc, #44]	; (801392c <ip4_input+0x278>)
 8013900:	2200      	movs	r2, #0
 8013902:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013904:	4b09      	ldr	r3, [pc, #36]	; (801392c <ip4_input+0x278>)
 8013906:	2200      	movs	r2, #0
 8013908:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801390a:	4b08      	ldr	r3, [pc, #32]	; (801392c <ip4_input+0x278>)
 801390c:	2200      	movs	r2, #0
 801390e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013910:	4b06      	ldr	r3, [pc, #24]	; (801392c <ip4_input+0x278>)
 8013912:	2200      	movs	r2, #0
 8013914:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013916:	4b05      	ldr	r3, [pc, #20]	; (801392c <ip4_input+0x278>)
 8013918:	2200      	movs	r2, #0
 801391a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801391c:	4b03      	ldr	r3, [pc, #12]	; (801392c <ip4_input+0x278>)
 801391e:	2200      	movs	r2, #0
 8013920:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013922:	2300      	movs	r3, #0
}
 8013924:	4618      	mov	r0, r3
 8013926:	3718      	adds	r7, #24
 8013928:	46bd      	mov	sp, r7
 801392a:	bd80      	pop	{r7, pc}
 801392c:	20008434 	.word	0x20008434
 8013930:	2000bb54 	.word	0x2000bb54

08013934 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b08a      	sub	sp, #40	; 0x28
 8013938:	af04      	add	r7, sp, #16
 801393a:	60f8      	str	r0, [r7, #12]
 801393c:	60b9      	str	r1, [r7, #8]
 801393e:	607a      	str	r2, [r7, #4]
 8013940:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d009      	beq.n	8013960 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d003      	beq.n	801395a <ip4_output_if+0x26>
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d102      	bne.n	8013960 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395c:	3304      	adds	r3, #4
 801395e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013960:	78fa      	ldrb	r2, [r7, #3]
 8013962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013964:	9302      	str	r3, [sp, #8]
 8013966:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801396a:	9301      	str	r3, [sp, #4]
 801396c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013970:	9300      	str	r3, [sp, #0]
 8013972:	4613      	mov	r3, r2
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	6979      	ldr	r1, [r7, #20]
 8013978:	68f8      	ldr	r0, [r7, #12]
 801397a:	f000 f805 	bl	8013988 <ip4_output_if_src>
 801397e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013980:	4618      	mov	r0, r3
 8013982:	3718      	adds	r7, #24
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}

08013988 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b088      	sub	sp, #32
 801398c:	af00      	add	r7, sp, #0
 801398e:	60f8      	str	r0, [r7, #12]
 8013990:	60b9      	str	r1, [r7, #8]
 8013992:	607a      	str	r2, [r7, #4]
 8013994:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	89db      	ldrh	r3, [r3, #14]
 801399a:	2b01      	cmp	r3, #1
 801399c:	d006      	beq.n	80139ac <ip4_output_if_src+0x24>
 801399e:	4b48      	ldr	r3, [pc, #288]	; (8013ac0 <ip4_output_if_src+0x138>)
 80139a0:	f240 3233 	movw	r2, #819	; 0x333
 80139a4:	4947      	ldr	r1, [pc, #284]	; (8013ac4 <ip4_output_if_src+0x13c>)
 80139a6:	4848      	ldr	r0, [pc, #288]	; (8013ac8 <ip4_output_if_src+0x140>)
 80139a8:	f001 f8f8 	bl	8014b9c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d060      	beq.n	8013a74 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80139b2:	2314      	movs	r3, #20
 80139b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80139b6:	2114      	movs	r1, #20
 80139b8:	68f8      	ldr	r0, [r7, #12]
 80139ba:	f7f8 fc5f 	bl	800c27c <pbuf_header>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d002      	beq.n	80139ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80139c4:	f06f 0301 	mvn.w	r3, #1
 80139c8:	e075      	b.n	8013ab6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	685b      	ldr	r3, [r3, #4]
 80139ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	895b      	ldrh	r3, [r3, #10]
 80139d4:	2b13      	cmp	r3, #19
 80139d6:	d806      	bhi.n	80139e6 <ip4_output_if_src+0x5e>
 80139d8:	4b39      	ldr	r3, [pc, #228]	; (8013ac0 <ip4_output_if_src+0x138>)
 80139da:	f44f 7258 	mov.w	r2, #864	; 0x360
 80139de:	493b      	ldr	r1, [pc, #236]	; (8013acc <ip4_output_if_src+0x144>)
 80139e0:	4839      	ldr	r0, [pc, #228]	; (8013ac8 <ip4_output_if_src+0x140>)
 80139e2:	f001 f8db 	bl	8014b9c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	78fa      	ldrb	r2, [r7, #3]
 80139ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80139f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681a      	ldr	r2, [r3, #0]
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80139fc:	8b7b      	ldrh	r3, [r7, #26]
 80139fe:	089b      	lsrs	r3, r3, #2
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a08:	b2da      	uxtb	r2, r3
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013a14:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	891b      	ldrh	r3, [r3, #8]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7f7 f9f6 	bl	800ae0c <lwip_htons>
 8013a20:	4603      	mov	r3, r0
 8013a22:	461a      	mov	r2, r3
 8013a24:	69fb      	ldr	r3, [r7, #28]
 8013a26:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	719a      	strb	r2, [r3, #6]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013a32:	4b27      	ldr	r3, [pc, #156]	; (8013ad0 <ip4_output_if_src+0x148>)
 8013a34:	881b      	ldrh	r3, [r3, #0]
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7f7 f9e8 	bl	800ae0c <lwip_htons>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	461a      	mov	r2, r3
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013a44:	4b22      	ldr	r3, [pc, #136]	; (8013ad0 <ip4_output_if_src+0x148>)
 8013a46:	881b      	ldrh	r3, [r3, #0]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	b29a      	uxth	r2, r3
 8013a4c:	4b20      	ldr	r3, [pc, #128]	; (8013ad0 <ip4_output_if_src+0x148>)
 8013a4e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013a50:	68bb      	ldr	r3, [r7, #8]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d104      	bne.n	8013a60 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013a56:	4b1f      	ldr	r3, [pc, #124]	; (8013ad4 <ip4_output_if_src+0x14c>)
 8013a58:	681a      	ldr	r2, [r3, #0]
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	60da      	str	r2, [r3, #12]
 8013a5e:	e003      	b.n	8013a68 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	681a      	ldr	r2, [r3, #0]
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	729a      	strb	r2, [r3, #10]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	72da      	strb	r2, [r3, #11]
 8013a72:	e008      	b.n	8013a86 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	691b      	ldr	r3, [r3, #16]
 8013a7e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013a80:	f107 0314 	add.w	r3, r7, #20
 8013a84:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d00c      	beq.n	8013aa8 <ip4_output_if_src+0x120>
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	891a      	ldrh	r2, [r3, #8]
 8013a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d906      	bls.n	8013aa8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8013a9a:	687a      	ldr	r2, [r7, #4]
 8013a9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013a9e:	68f8      	ldr	r0, [r7, #12]
 8013aa0:	f000 fd0a 	bl	80144b8 <ip4_frag>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	e006      	b.n	8013ab6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aaa:	695b      	ldr	r3, [r3, #20]
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	68f9      	ldr	r1, [r7, #12]
 8013ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ab2:	4798      	blx	r3
 8013ab4:	4603      	mov	r3, r0
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3720      	adds	r7, #32
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	08018014 	.word	0x08018014
 8013ac4:	08018048 	.word	0x08018048
 8013ac8:	08018054 	.word	0x08018054
 8013acc:	0801807c 	.word	0x0801807c
 8013ad0:	20004c1a 	.word	0x20004c1a
 8013ad4:	08018764 	.word	0x08018764

08013ad8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aec:	d002      	beq.n	8013af4 <ip4_addr_isbroadcast_u32+0x1c>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d101      	bne.n	8013af8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013af4:	2301      	movs	r3, #1
 8013af6:	e02a      	b.n	8013b4e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013afe:	f003 0302 	and.w	r3, r3, #2
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d101      	bne.n	8013b0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013b06:	2300      	movs	r3, #0
 8013b08:	e021      	b.n	8013b4e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	3304      	adds	r3, #4
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	687a      	ldr	r2, [r7, #4]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d101      	bne.n	8013b1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013b16:	2300      	movs	r3, #0
 8013b18:	e019      	b.n	8013b4e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013b1a:	68fa      	ldr	r2, [r7, #12]
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	3304      	adds	r3, #4
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	405a      	eors	r2, r3
 8013b24:	683b      	ldr	r3, [r7, #0]
 8013b26:	3308      	adds	r3, #8
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	4013      	ands	r3, r2
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d10d      	bne.n	8013b4c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	3308      	adds	r3, #8
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	43da      	mvns	r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013b3c:	683b      	ldr	r3, [r7, #0]
 8013b3e:	3308      	adds	r3, #8
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d101      	bne.n	8013b4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013b48:	2301      	movs	r3, #1
 8013b4a:	e000      	b.n	8013b4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013b4c:	2300      	movs	r3, #0
  }
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3714      	adds	r7, #20
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bc80      	pop	{r7}
 8013b56:	4770      	bx	lr

08013b58 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013b62:	4b12      	ldr	r3, [pc, #72]	; (8013bac <ip_reass_tmr+0x54>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013b68:	e018      	b.n	8013b9c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	7fdb      	ldrb	r3, [r3, #31]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d00b      	beq.n	8013b8a <ip_reass_tmr+0x32>
      r->timer--;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	7fdb      	ldrb	r3, [r3, #31]
 8013b76:	3b01      	subs	r3, #1
 8013b78:	b2da      	uxtb	r2, r3
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	60fb      	str	r3, [r7, #12]
 8013b88:	e008      	b.n	8013b9c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013b94:	68b9      	ldr	r1, [r7, #8]
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f000 f80a 	bl	8013bb0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d1e3      	bne.n	8013b6a <ip_reass_tmr+0x12>
     }
   }
}
 8013ba2:	bf00      	nop
 8013ba4:	bf00      	nop
 8013ba6:	3710      	adds	r7, #16
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}
 8013bac:	20004c1c 	.word	0x20004c1c

08013bb0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b088      	sub	sp, #32
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013bbe:	683a      	ldr	r2, [r7, #0]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d105      	bne.n	8013bd2 <ip_reass_free_complete_datagram+0x22>
 8013bc6:	4b45      	ldr	r3, [pc, #276]	; (8013cdc <ip_reass_free_complete_datagram+0x12c>)
 8013bc8:	22ab      	movs	r2, #171	; 0xab
 8013bca:	4945      	ldr	r1, [pc, #276]	; (8013ce0 <ip_reass_free_complete_datagram+0x130>)
 8013bcc:	4845      	ldr	r0, [pc, #276]	; (8013ce4 <ip_reass_free_complete_datagram+0x134>)
 8013bce:	f000 ffe5 	bl	8014b9c <iprintf>
  if (prev != NULL) {
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d00a      	beq.n	8013bee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d005      	beq.n	8013bee <ip_reass_free_complete_datagram+0x3e>
 8013be2:	4b3e      	ldr	r3, [pc, #248]	; (8013cdc <ip_reass_free_complete_datagram+0x12c>)
 8013be4:	22ad      	movs	r2, #173	; 0xad
 8013be6:	4940      	ldr	r1, [pc, #256]	; (8013ce8 <ip_reass_free_complete_datagram+0x138>)
 8013be8:	483e      	ldr	r0, [pc, #248]	; (8013ce4 <ip_reass_free_complete_datagram+0x134>)
 8013bea:	f000 ffd7 	bl	8014b9c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	889b      	ldrh	r3, [r3, #4]
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d12a      	bne.n	8013c56 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	685b      	ldr	r3, [r3, #4]
 8013c04:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013c0e:	69bb      	ldr	r3, [r7, #24]
 8013c10:	6858      	ldr	r0, [r3, #4]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3308      	adds	r3, #8
 8013c16:	2214      	movs	r2, #20
 8013c18:	4619      	mov	r1, r3
 8013c1a:	f000 ffa9 	bl	8014b70 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013c1e:	2101      	movs	r1, #1
 8013c20:	69b8      	ldr	r0, [r7, #24]
 8013c22:	f7ff fc65 	bl	80134f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013c26:	69b8      	ldr	r0, [r7, #24]
 8013c28:	f7f8 fbe6 	bl	800c3f8 <pbuf_clen>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013c30:	8bfa      	ldrh	r2, [r7, #30]
 8013c32:	8a7b      	ldrh	r3, [r7, #18]
 8013c34:	4413      	add	r3, r2
 8013c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c3a:	db05      	blt.n	8013c48 <ip_reass_free_complete_datagram+0x98>
 8013c3c:	4b27      	ldr	r3, [pc, #156]	; (8013cdc <ip_reass_free_complete_datagram+0x12c>)
 8013c3e:	22bc      	movs	r2, #188	; 0xbc
 8013c40:	492a      	ldr	r1, [pc, #168]	; (8013cec <ip_reass_free_complete_datagram+0x13c>)
 8013c42:	4828      	ldr	r0, [pc, #160]	; (8013ce4 <ip_reass_free_complete_datagram+0x134>)
 8013c44:	f000 ffaa 	bl	8014b9c <iprintf>
    pbufs_freed += clen;
 8013c48:	8bfa      	ldrh	r2, [r7, #30]
 8013c4a:	8a7b      	ldrh	r3, [r7, #18]
 8013c4c:	4413      	add	r3, r2
 8013c4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013c50:	69b8      	ldr	r0, [r7, #24]
 8013c52:	f7f8 fb37 	bl	800c2c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	685b      	ldr	r3, [r3, #4]
 8013c5a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013c5c:	e01f      	b.n	8013c9e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013c5e:	69bb      	ldr	r3, [r7, #24]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013c6e:	68f8      	ldr	r0, [r7, #12]
 8013c70:	f7f8 fbc2 	bl	800c3f8 <pbuf_clen>
 8013c74:	4603      	mov	r3, r0
 8013c76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013c78:	8bfa      	ldrh	r2, [r7, #30]
 8013c7a:	8a7b      	ldrh	r3, [r7, #18]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c82:	db05      	blt.n	8013c90 <ip_reass_free_complete_datagram+0xe0>
 8013c84:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <ip_reass_free_complete_datagram+0x12c>)
 8013c86:	22cc      	movs	r2, #204	; 0xcc
 8013c88:	4918      	ldr	r1, [pc, #96]	; (8013cec <ip_reass_free_complete_datagram+0x13c>)
 8013c8a:	4816      	ldr	r0, [pc, #88]	; (8013ce4 <ip_reass_free_complete_datagram+0x134>)
 8013c8c:	f000 ff86 	bl	8014b9c <iprintf>
    pbufs_freed += clen;
 8013c90:	8bfa      	ldrh	r2, [r7, #30]
 8013c92:	8a7b      	ldrh	r3, [r7, #18]
 8013c94:	4413      	add	r3, r2
 8013c96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	f7f8 fb13 	bl	800c2c4 <pbuf_free>
  while (p != NULL) {
 8013c9e:	69bb      	ldr	r3, [r7, #24]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d1dc      	bne.n	8013c5e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013ca4:	6839      	ldr	r1, [r7, #0]
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 f8c2 	bl	8013e30 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8013cac:	4b10      	ldr	r3, [pc, #64]	; (8013cf0 <ip_reass_free_complete_datagram+0x140>)
 8013cae:	881b      	ldrh	r3, [r3, #0]
 8013cb0:	8bfa      	ldrh	r2, [r7, #30]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d905      	bls.n	8013cc2 <ip_reass_free_complete_datagram+0x112>
 8013cb6:	4b09      	ldr	r3, [pc, #36]	; (8013cdc <ip_reass_free_complete_datagram+0x12c>)
 8013cb8:	22d2      	movs	r2, #210	; 0xd2
 8013cba:	490e      	ldr	r1, [pc, #56]	; (8013cf4 <ip_reass_free_complete_datagram+0x144>)
 8013cbc:	4809      	ldr	r0, [pc, #36]	; (8013ce4 <ip_reass_free_complete_datagram+0x134>)
 8013cbe:	f000 ff6d 	bl	8014b9c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8013cc2:	4b0b      	ldr	r3, [pc, #44]	; (8013cf0 <ip_reass_free_complete_datagram+0x140>)
 8013cc4:	881a      	ldrh	r2, [r3, #0]
 8013cc6:	8bfb      	ldrh	r3, [r7, #30]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	b29a      	uxth	r2, r3
 8013ccc:	4b08      	ldr	r3, [pc, #32]	; (8013cf0 <ip_reass_free_complete_datagram+0x140>)
 8013cce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013cd0:	8bfb      	ldrh	r3, [r7, #30]
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3720      	adds	r7, #32
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	080180ac 	.word	0x080180ac
 8013ce0:	080180e8 	.word	0x080180e8
 8013ce4:	080180f4 	.word	0x080180f4
 8013ce8:	0801811c 	.word	0x0801811c
 8013cec:	08018130 	.word	0x08018130
 8013cf0:	20004c20 	.word	0x20004c20
 8013cf4:	08018150 	.word	0x08018150

08013cf8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b08a      	sub	sp, #40	; 0x28
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013d02:	2300      	movs	r3, #0
 8013d04:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013d06:	2300      	movs	r3, #0
 8013d08:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013d16:	4b28      	ldr	r3, [pc, #160]	; (8013db8 <ip_reass_remove_oldest_datagram+0xc0>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013d1c:	e030      	b.n	8013d80 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d20:	695a      	ldr	r2, [r3, #20]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	68db      	ldr	r3, [r3, #12]
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d10c      	bne.n	8013d44 <ip_reass_remove_oldest_datagram+0x4c>
 8013d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2c:	699a      	ldr	r2, [r3, #24]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d106      	bne.n	8013d44 <ip_reass_remove_oldest_datagram+0x4c>
 8013d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d38:	899a      	ldrh	r2, [r3, #12]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	889b      	ldrh	r3, [r3, #4]
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d014      	beq.n	8013d6e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	3301      	adds	r3, #1
 8013d48:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013d4a:	6a3b      	ldr	r3, [r7, #32]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d104      	bne.n	8013d5a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d52:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013d54:	69fb      	ldr	r3, [r7, #28]
 8013d56:	61bb      	str	r3, [r7, #24]
 8013d58:	e009      	b.n	8013d6e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5c:	7fda      	ldrb	r2, [r3, #31]
 8013d5e:	6a3b      	ldr	r3, [r7, #32]
 8013d60:	7fdb      	ldrb	r3, [r3, #31]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	d803      	bhi.n	8013d6e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d68:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013d6a:	69fb      	ldr	r3, [r7, #28]
 8013d6c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d001      	beq.n	8013d7a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d78:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d1cb      	bne.n	8013d1e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013d86:	6a3b      	ldr	r3, [r7, #32]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d008      	beq.n	8013d9e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013d8c:	69b9      	ldr	r1, [r7, #24]
 8013d8e:	6a38      	ldr	r0, [r7, #32]
 8013d90:	f7ff ff0e 	bl	8013bb0 <ip_reass_free_complete_datagram>
 8013d94:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013d96:	697a      	ldr	r2, [r7, #20]
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	4413      	add	r3, r2
 8013d9c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013d9e:	697a      	ldr	r2, [r7, #20]
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	da02      	bge.n	8013dac <ip_reass_remove_oldest_datagram+0xb4>
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	dcac      	bgt.n	8013d06 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013dac:	697b      	ldr	r3, [r7, #20]
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3728      	adds	r7, #40	; 0x28
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}
 8013db6:	bf00      	nop
 8013db8:	20004c1c 	.word	0x20004c1c

08013dbc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013dc6:	2004      	movs	r0, #4
 8013dc8:	f7f7 fc76 	bl	800b6b8 <memp_malloc>
 8013dcc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d110      	bne.n	8013df6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013dd4:	6839      	ldr	r1, [r7, #0]
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f7ff ff8e 	bl	8013cf8 <ip_reass_remove_oldest_datagram>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	4293      	cmp	r3, r2
 8013de2:	dc03      	bgt.n	8013dec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013de4:	2004      	movs	r0, #4
 8013de6:	f7f7 fc67 	bl	800b6b8 <memp_malloc>
 8013dea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8013df2:	2300      	movs	r3, #0
 8013df4:	e016      	b.n	8013e24 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013df6:	2220      	movs	r2, #32
 8013df8:	2100      	movs	r1, #0
 8013dfa:	68f8      	ldr	r0, [r7, #12]
 8013dfc:	f000 fec6 	bl	8014b8c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2203      	movs	r2, #3
 8013e04:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013e06:	4b09      	ldr	r3, [pc, #36]	; (8013e2c <ip_reass_enqueue_new_datagram+0x70>)
 8013e08:	681a      	ldr	r2, [r3, #0]
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013e0e:	4a07      	ldr	r2, [pc, #28]	; (8013e2c <ip_reass_enqueue_new_datagram+0x70>)
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	3308      	adds	r3, #8
 8013e18:	2214      	movs	r2, #20
 8013e1a:	6879      	ldr	r1, [r7, #4]
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f000 fea7 	bl	8014b70 <memcpy>
  return ipr;
 8013e22:	68fb      	ldr	r3, [r7, #12]
}
 8013e24:	4618      	mov	r0, r3
 8013e26:	3710      	adds	r7, #16
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	20004c1c 	.word	0x20004c1c

08013e30 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013e3a:	4b10      	ldr	r3, [pc, #64]	; (8013e7c <ip_reass_dequeue_datagram+0x4c>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d104      	bne.n	8013e4e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	4a0c      	ldr	r2, [pc, #48]	; (8013e7c <ip_reass_dequeue_datagram+0x4c>)
 8013e4a:	6013      	str	r3, [r2, #0]
 8013e4c:	e00d      	b.n	8013e6a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d106      	bne.n	8013e62 <ip_reass_dequeue_datagram+0x32>
 8013e54:	4b0a      	ldr	r3, [pc, #40]	; (8013e80 <ip_reass_dequeue_datagram+0x50>)
 8013e56:	f240 1245 	movw	r2, #325	; 0x145
 8013e5a:	490a      	ldr	r1, [pc, #40]	; (8013e84 <ip_reass_dequeue_datagram+0x54>)
 8013e5c:	480a      	ldr	r0, [pc, #40]	; (8013e88 <ip_reass_dequeue_datagram+0x58>)
 8013e5e:	f000 fe9d 	bl	8014b9c <iprintf>
    prev->next = ipr->next;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	681a      	ldr	r2, [r3, #0]
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013e6a:	6879      	ldr	r1, [r7, #4]
 8013e6c:	2004      	movs	r0, #4
 8013e6e:	f7f7 fc75 	bl	800b75c <memp_free>
}
 8013e72:	bf00      	nop
 8013e74:	3708      	adds	r7, #8
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	20004c1c 	.word	0x20004c1c
 8013e80:	080180ac 	.word	0x080180ac
 8013e84:	0801816c 	.word	0x0801816c
 8013e88:	080180f4 	.word	0x080180f4

08013e8c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b08c      	sub	sp, #48	; 0x30
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	60b9      	str	r1, [r7, #8]
 8013e96:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013ea6:	69fb      	ldr	r3, [r7, #28]
 8013ea8:	885b      	ldrh	r3, [r3, #2]
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f6 ffad 	bl	800ae0c <lwip_htons>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	69fb      	ldr	r3, [r7, #28]
 8013eb8:	781b      	ldrb	r3, [r3, #0]
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	f003 030f 	and.w	r3, r3, #15
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	009b      	lsls	r3, r3, #2
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	88db      	ldrh	r3, [r3, #6]
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f6 ff9b 	bl	800ae0c <lwip_htons>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013edc:	b29b      	uxth	r3, r3
 8013ede:	00db      	lsls	r3, r3, #3
 8013ee0:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eea:	2200      	movs	r2, #0
 8013eec:	701a      	strb	r2, [r3, #0]
 8013eee:	2200      	movs	r2, #0
 8013ef0:	705a      	strb	r2, [r3, #1]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	709a      	strb	r2, [r3, #2]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013efc:	8b3a      	ldrh	r2, [r7, #24]
 8013efe:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8013f00:	8b3a      	ldrh	r2, [r7, #24]
 8013f02:	8b7b      	ldrh	r3, [r7, #26]
 8013f04:	4413      	add	r3, r2
 8013f06:	b29a      	uxth	r2, r3
 8013f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0a:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	627b      	str	r3, [r7, #36]	; 0x24
 8013f12:	e061      	b.n	8013fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8013f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f16:	685b      	ldr	r3, [r3, #4]
 8013f18:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8013f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1c:	889b      	ldrh	r3, [r3, #4]
 8013f1e:	b29a      	uxth	r2, r3
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	889b      	ldrh	r3, [r3, #4]
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d232      	bcs.n	8013f90 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f2e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d01f      	beq.n	8013f76 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f38:	889b      	ldrh	r3, [r3, #4]
 8013f3a:	b29a      	uxth	r2, r3
 8013f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3e:	88db      	ldrh	r3, [r3, #6]
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	429a      	cmp	r2, r3
 8013f44:	f0c0 80e3 	bcc.w	801410e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8013f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f4a:	88db      	ldrh	r3, [r3, #6]
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	889b      	ldrh	r3, [r3, #4]
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	429a      	cmp	r2, r3
 8013f56:	f200 80da 	bhi.w	801410e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5c:	68ba      	ldr	r2, [r7, #8]
 8013f5e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f62:	88db      	ldrh	r3, [r3, #6]
 8013f64:	b29a      	uxth	r2, r3
 8013f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f68:	889b      	ldrh	r3, [r3, #4]
 8013f6a:	b29b      	uxth	r3, r3
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d037      	beq.n	8013fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013f70:	2300      	movs	r3, #0
 8013f72:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013f74:	e034      	b.n	8013fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8013f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f78:	88db      	ldrh	r3, [r3, #6]
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	889b      	ldrh	r3, [r3, #4]
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	429a      	cmp	r2, r3
 8013f84:	f200 80c5 	bhi.w	8014112 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	68ba      	ldr	r2, [r7, #8]
 8013f8c:	605a      	str	r2, [r3, #4]
      break;
 8013f8e:	e027      	b.n	8013fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8013f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f92:	889b      	ldrh	r3, [r3, #4]
 8013f94:	b29a      	uxth	r2, r3
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	889b      	ldrh	r3, [r3, #4]
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	f000 80ba 	beq.w	8014116 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa4:	889b      	ldrh	r3, [r3, #4]
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	88db      	ldrh	r3, [r3, #6]
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	429a      	cmp	r2, r3
 8013fb0:	f0c0 80b3 	bcc.w	801411a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d009      	beq.n	8013fce <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	88db      	ldrh	r3, [r3, #6]
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	889b      	ldrh	r3, [r3, #4]
 8013fc4:	b29b      	uxth	r3, r3
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d001      	beq.n	8013fce <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d19a      	bne.n	8013f14 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8013fde:	e000      	b.n	8013fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8013fe0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d12d      	bne.n	8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8013fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d01c      	beq.n	8014028 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff0:	88db      	ldrh	r3, [r3, #6]
 8013ff2:	b29a      	uxth	r2, r3
 8013ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff6:	889b      	ldrh	r3, [r3, #4]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d906      	bls.n	801400c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8013ffe:	4b51      	ldr	r3, [pc, #324]	; (8014144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8014000:	f240 12ab 	movw	r2, #427	; 0x1ab
 8014004:	4950      	ldr	r1, [pc, #320]	; (8014148 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014006:	4851      	ldr	r0, [pc, #324]	; (801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014008:	f000 fdc8 	bl	8014b9c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400e:	68ba      	ldr	r2, [r7, #8]
 8014010:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014014:	88db      	ldrh	r3, [r3, #6]
 8014016:	b29a      	uxth	r2, r3
 8014018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401a:	889b      	ldrh	r3, [r3, #4]
 801401c:	b29b      	uxth	r3, r3
 801401e:	429a      	cmp	r2, r3
 8014020:	d010      	beq.n	8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8014022:	2300      	movs	r3, #0
 8014024:	623b      	str	r3, [r7, #32]
 8014026:	e00d      	b.n	8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d006      	beq.n	801403e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8014030:	4b44      	ldr	r3, [pc, #272]	; (8014144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8014032:	f240 12b3 	movw	r2, #435	; 0x1b3
 8014036:	4946      	ldr	r1, [pc, #280]	; (8014150 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014038:	4844      	ldr	r0, [pc, #272]	; (801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801403a:	f000 fdaf 	bl	8014b9c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	68ba      	ldr	r2, [r7, #8]
 8014042:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d105      	bne.n	8014056 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	7f9b      	ldrb	r3, [r3, #30]
 801404e:	f003 0301 	and.w	r3, r3, #1
 8014052:	2b00      	cmp	r3, #0
 8014054:	d059      	beq.n	801410a <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8014056:	6a3b      	ldr	r3, [r7, #32]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d04f      	beq.n	80140fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d006      	beq.n	8014072 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	685b      	ldr	r3, [r3, #4]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	889b      	ldrh	r3, [r3, #4]
 801406c:	b29b      	uxth	r3, r3
 801406e:	2b00      	cmp	r3, #0
 8014070:	d002      	beq.n	8014078 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014072:	2300      	movs	r3, #0
 8014074:	623b      	str	r3, [r7, #32]
 8014076:	e041      	b.n	80140fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014082:	e012      	b.n	80140aa <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8014084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014086:	685b      	ldr	r3, [r3, #4]
 8014088:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801408c:	88db      	ldrh	r3, [r3, #6]
 801408e:	b29a      	uxth	r2, r3
 8014090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014092:	889b      	ldrh	r3, [r3, #4]
 8014094:	b29b      	uxth	r3, r3
 8014096:	429a      	cmp	r2, r3
 8014098:	d002      	beq.n	80140a0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801409a:	2300      	movs	r3, #0
 801409c:	623b      	str	r3, [r7, #32]
            break;
 801409e:	e007      	b.n	80140b0 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80140a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80140a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80140aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d1e9      	bne.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80140b0:	6a3b      	ldr	r3, [r7, #32]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d022      	beq.n	80140fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d106      	bne.n	80140cc <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80140be:	4b21      	ldr	r3, [pc, #132]	; (8014144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80140c0:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80140c4:	4923      	ldr	r1, [pc, #140]	; (8014154 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80140c6:	4821      	ldr	r0, [pc, #132]	; (801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80140c8:	f000 fd68 	bl	8014b9c <iprintf>
          LWIP_ASSERT("sanity check",
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d106      	bne.n	80140e6 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80140d8:	4b1a      	ldr	r3, [pc, #104]	; (8014144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80140da:	f240 12d5 	movw	r2, #469	; 0x1d5
 80140de:	491d      	ldr	r1, [pc, #116]	; (8014154 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80140e0:	481a      	ldr	r0, [pc, #104]	; (801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80140e2:	f000 fd5b 	bl	8014b9c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80140e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d006      	beq.n	80140fc <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80140ee:	4b15      	ldr	r3, [pc, #84]	; (8014144 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80140f0:	f240 12d7 	movw	r2, #471	; 0x1d7
 80140f4:	4918      	ldr	r1, [pc, #96]	; (8014158 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80140f6:	4815      	ldr	r0, [pc, #84]	; (801414c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80140f8:	f000 fd50 	bl	8014b9c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80140fc:	6a3b      	ldr	r3, [r7, #32]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	bf14      	ite	ne
 8014102:	2301      	movne	r3, #1
 8014104:	2300      	moveq	r3, #0
 8014106:	b2db      	uxtb	r3, r3
 8014108:	e018      	b.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801410a:	2300      	movs	r3, #0
 801410c:	e016      	b.n	801413c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 801410e:	bf00      	nop
 8014110:	e004      	b.n	801411c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8014112:	bf00      	nop
 8014114:	e002      	b.n	801411c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8014116:	bf00      	nop
 8014118:	e000      	b.n	801411c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801411a:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801411c:	68b8      	ldr	r0, [r7, #8]
 801411e:	f7f8 f96b 	bl	800c3f8 <pbuf_clen>
 8014122:	4603      	mov	r3, r0
 8014124:	461a      	mov	r2, r3
 8014126:	4b0d      	ldr	r3, [pc, #52]	; (801415c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014128:	881b      	ldrh	r3, [r3, #0]
 801412a:	1a9b      	subs	r3, r3, r2
 801412c:	b29a      	uxth	r2, r3
 801412e:	4b0b      	ldr	r3, [pc, #44]	; (801415c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014130:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8014132:	68b8      	ldr	r0, [r7, #8]
 8014134:	f7f8 f8c6 	bl	800c2c4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014138:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801413c:	4618      	mov	r0, r3
 801413e:	3730      	adds	r7, #48	; 0x30
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	080180ac 	.word	0x080180ac
 8014148:	08018188 	.word	0x08018188
 801414c:	080180f4 	.word	0x080180f4
 8014150:	080181a8 	.word	0x080181a8
 8014154:	080181e0 	.word	0x080181e0
 8014158:	080181f0 	.word	0x080181f0
 801415c:	20004c20 	.word	0x20004c20

08014160 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b08e      	sub	sp, #56	; 0x38
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	685b      	ldr	r3, [r3, #4]
 801416c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	f003 030f 	and.w	r3, r3, #15
 8014176:	009b      	lsls	r3, r3, #2
 8014178:	2b14      	cmp	r3, #20
 801417a:	f040 8131 	bne.w	80143e0 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014180:	88db      	ldrh	r3, [r3, #6]
 8014182:	b29b      	uxth	r3, r3
 8014184:	4618      	mov	r0, r3
 8014186:	f7f6 fe41 	bl	800ae0c <lwip_htons>
 801418a:	4603      	mov	r3, r0
 801418c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014190:	b29b      	uxth	r3, r3
 8014192:	00db      	lsls	r3, r3, #3
 8014194:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8014196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014198:	885b      	ldrh	r3, [r3, #2]
 801419a:	b29b      	uxth	r3, r3
 801419c:	4618      	mov	r0, r3
 801419e:	f7f6 fe35 	bl	800ae0c <lwip_htons>
 80141a2:	4603      	mov	r3, r0
 80141a4:	461a      	mov	r2, r3
 80141a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	f003 030f 	and.w	r3, r3, #15
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	009b      	lsls	r3, r3, #2
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	1ad3      	subs	r3, r2, r3
 80141b8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f7f8 f91c 	bl	800c3f8 <pbuf_clen>
 80141c0:	4603      	mov	r3, r0
 80141c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80141c4:	4b8e      	ldr	r3, [pc, #568]	; (8014400 <ip4_reass+0x2a0>)
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	461a      	mov	r2, r3
 80141ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141cc:	4413      	add	r3, r2
 80141ce:	2b0a      	cmp	r3, #10
 80141d0:	dd10      	ble.n	80141f4 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80141d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141d4:	4619      	mov	r1, r3
 80141d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141d8:	f7ff fd8e 	bl	8013cf8 <ip_reass_remove_oldest_datagram>
 80141dc:	4603      	mov	r3, r0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	f000 8100 	beq.w	80143e4 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80141e4:	4b86      	ldr	r3, [pc, #536]	; (8014400 <ip4_reass+0x2a0>)
 80141e6:	881b      	ldrh	r3, [r3, #0]
 80141e8:	461a      	mov	r2, r3
 80141ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141ec:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80141ee:	2b0a      	cmp	r3, #10
 80141f0:	f300 80f8 	bgt.w	80143e4 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80141f4:	4b83      	ldr	r3, [pc, #524]	; (8014404 <ip4_reass+0x2a4>)
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	633b      	str	r3, [r7, #48]	; 0x30
 80141fa:	e015      	b.n	8014228 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80141fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141fe:	695a      	ldr	r2, [r3, #20]
 8014200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	429a      	cmp	r2, r3
 8014206:	d10c      	bne.n	8014222 <ip4_reass+0xc2>
 8014208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801420a:	699a      	ldr	r2, [r3, #24]
 801420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420e:	691b      	ldr	r3, [r3, #16]
 8014210:	429a      	cmp	r2, r3
 8014212:	d106      	bne.n	8014222 <ip4_reass+0xc2>
 8014214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014216:	899a      	ldrh	r2, [r3, #12]
 8014218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421a:	889b      	ldrh	r3, [r3, #4]
 801421c:	b29b      	uxth	r3, r3
 801421e:	429a      	cmp	r2, r3
 8014220:	d006      	beq.n	8014230 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	633b      	str	r3, [r7, #48]	; 0x30
 8014228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801422a:	2b00      	cmp	r3, #0
 801422c:	d1e6      	bne.n	80141fc <ip4_reass+0x9c>
 801422e:	e000      	b.n	8014232 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014230:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014234:	2b00      	cmp	r3, #0
 8014236:	d109      	bne.n	801424c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801423a:	4619      	mov	r1, r3
 801423c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801423e:	f7ff fdbd 	bl	8013dbc <ip_reass_enqueue_new_datagram>
 8014242:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014246:	2b00      	cmp	r3, #0
 8014248:	d11c      	bne.n	8014284 <ip4_reass+0x124>
      goto nullreturn;
 801424a:	e0d0      	b.n	80143ee <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801424e:	88db      	ldrh	r3, [r3, #6]
 8014250:	b29b      	uxth	r3, r3
 8014252:	4618      	mov	r0, r3
 8014254:	f7f6 fdda 	bl	800ae0c <lwip_htons>
 8014258:	4603      	mov	r3, r0
 801425a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801425e:	2b00      	cmp	r3, #0
 8014260:	d110      	bne.n	8014284 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014264:	89db      	ldrh	r3, [r3, #14]
 8014266:	4618      	mov	r0, r3
 8014268:	f7f6 fdd0 	bl	800ae0c <lwip_htons>
 801426c:	4603      	mov	r3, r0
 801426e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014272:	2b00      	cmp	r3, #0
 8014274:	d006      	beq.n	8014284 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014278:	3308      	adds	r3, #8
 801427a:	2214      	movs	r2, #20
 801427c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801427e:	4618      	mov	r0, r3
 8014280:	f000 fc76 	bl	8014b70 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014286:	88db      	ldrh	r3, [r3, #6]
 8014288:	b29b      	uxth	r3, r3
 801428a:	f003 0320 	and.w	r3, r3, #32
 801428e:	2b00      	cmp	r3, #0
 8014290:	bf0c      	ite	eq
 8014292:	2301      	moveq	r3, #1
 8014294:	2300      	movne	r3, #0
 8014296:	b2db      	uxtb	r3, r3
 8014298:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d00e      	beq.n	80142be <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80142a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80142a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142a4:	4413      	add	r3, r2
 80142a6:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80142a8:	8b7a      	ldrh	r2, [r7, #26]
 80142aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80142ac:	429a      	cmp	r2, r3
 80142ae:	f0c0 809b 	bcc.w	80143e8 <ip4_reass+0x288>
 80142b2:	8b7b      	ldrh	r3, [r7, #26]
 80142b4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80142b8:	4293      	cmp	r3, r2
 80142ba:	f200 8095 	bhi.w	80143e8 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80142be:	69fa      	ldr	r2, [r7, #28]
 80142c0:	6879      	ldr	r1, [r7, #4]
 80142c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80142c4:	f7ff fde2 	bl	8013e8c <ip_reass_chain_frag_into_datagram_and_validate>
 80142c8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142d0:	f000 808c 	beq.w	80143ec <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80142d4:	4b4a      	ldr	r3, [pc, #296]	; (8014400 <ip4_reass+0x2a0>)
 80142d6:	881a      	ldrh	r2, [r3, #0]
 80142d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142da:	4413      	add	r3, r2
 80142dc:	b29a      	uxth	r2, r3
 80142de:	4b48      	ldr	r3, [pc, #288]	; (8014400 <ip4_reass+0x2a0>)
 80142e0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80142e2:	69fb      	ldr	r3, [r7, #28]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00d      	beq.n	8014304 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80142e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80142ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142ec:	4413      	add	r3, r2
 80142ee:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80142f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f2:	8a7a      	ldrh	r2, [r7, #18]
 80142f4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80142f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f8:	7f9b      	ldrb	r3, [r3, #30]
 80142fa:	f043 0301 	orr.w	r3, r3, #1
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014302:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014304:	697b      	ldr	r3, [r7, #20]
 8014306:	2b01      	cmp	r3, #1
 8014308:	d168      	bne.n	80143dc <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 801430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801430c:	8b9b      	ldrh	r3, [r3, #28]
 801430e:	3314      	adds	r3, #20
 8014310:	b29a      	uxth	r2, r3
 8014312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014314:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8014316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	685b      	ldr	r3, [r3, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8014320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014322:	685b      	ldr	r3, [r3, #4]
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801432a:	3308      	adds	r3, #8
 801432c:	2214      	movs	r2, #20
 801432e:	4619      	mov	r1, r3
 8014330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014332:	f000 fc1d 	bl	8014b70 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8014336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014338:	8b9b      	ldrh	r3, [r3, #28]
 801433a:	4618      	mov	r0, r3
 801433c:	f7f6 fd66 	bl	800ae0c <lwip_htons>
 8014340:	4603      	mov	r3, r0
 8014342:	461a      	mov	r2, r3
 8014344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014346:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801434a:	2200      	movs	r2, #0
 801434c:	719a      	strb	r2, [r3, #6]
 801434e:	2200      	movs	r2, #0
 8014350:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014354:	2200      	movs	r2, #0
 8014356:	729a      	strb	r2, [r3, #10]
 8014358:	2200      	movs	r2, #0
 801435a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801435e:	685b      	ldr	r3, [r3, #4]
 8014360:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014362:	e00e      	b.n	8014382 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8014364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014366:	685b      	ldr	r3, [r3, #4]
 8014368:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801436a:	f06f 0113 	mvn.w	r1, #19
 801436e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014370:	f7f7 ff84 	bl	800c27c <pbuf_header>
      pbuf_cat(p, r);
 8014374:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014376:	6878      	ldr	r0, [r7, #4]
 8014378:	f7f8 f87c 	bl	800c474 <pbuf_cat>
      r = iprh->next_pbuf;
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014384:	2b00      	cmp	r3, #0
 8014386:	d1ed      	bne.n	8014364 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014388:	4b1e      	ldr	r3, [pc, #120]	; (8014404 <ip4_reass+0x2a4>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801438e:	429a      	cmp	r2, r3
 8014390:	d102      	bne.n	8014398 <ip4_reass+0x238>
      ipr_prev = NULL;
 8014392:	2300      	movs	r3, #0
 8014394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014396:	e010      	b.n	80143ba <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014398:	4b1a      	ldr	r3, [pc, #104]	; (8014404 <ip4_reass+0x2a4>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801439e:	e007      	b.n	80143b0 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80143a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d006      	beq.n	80143b8 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80143aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d1f4      	bne.n	80143a0 <ip4_reass+0x240>
 80143b6:	e000      	b.n	80143ba <ip4_reass+0x25a>
          break;
 80143b8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80143ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80143bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143be:	f7ff fd37 	bl	8013e30 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f7f8 f818 	bl	800c3f8 <pbuf_clen>
 80143c8:	4603      	mov	r3, r0
 80143ca:	461a      	mov	r2, r3
 80143cc:	4b0c      	ldr	r3, [pc, #48]	; (8014400 <ip4_reass+0x2a0>)
 80143ce:	881b      	ldrh	r3, [r3, #0]
 80143d0:	1a9b      	subs	r3, r3, r2
 80143d2:	b29a      	uxth	r2, r3
 80143d4:	4b0a      	ldr	r3, [pc, #40]	; (8014400 <ip4_reass+0x2a0>)
 80143d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	e00c      	b.n	80143f6 <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80143dc:	2300      	movs	r3, #0
 80143de:	e00a      	b.n	80143f6 <ip4_reass+0x296>
    goto nullreturn;
 80143e0:	bf00      	nop
 80143e2:	e004      	b.n	80143ee <ip4_reass+0x28e>
      goto nullreturn;
 80143e4:	bf00      	nop
 80143e6:	e002      	b.n	80143ee <ip4_reass+0x28e>
      goto nullreturn;
 80143e8:	bf00      	nop
 80143ea:	e000      	b.n	80143ee <ip4_reass+0x28e>
    goto nullreturn;
 80143ec:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f7f7 ff68 	bl	800c2c4 <pbuf_free>
  return NULL;
 80143f4:	2300      	movs	r3, #0
}
 80143f6:	4618      	mov	r0, r3
 80143f8:	3738      	adds	r7, #56	; 0x38
 80143fa:	46bd      	mov	sp, r7
 80143fc:	bd80      	pop	{r7, pc}
 80143fe:	bf00      	nop
 8014400:	20004c20 	.word	0x20004c20
 8014404:	20004c1c 	.word	0x20004c1c

08014408 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801440c:	2005      	movs	r0, #5
 801440e:	f7f7 f953 	bl	800b6b8 <memp_malloc>
 8014412:	4603      	mov	r3, r0
}
 8014414:	4618      	mov	r0, r3
 8014416:	bd80      	pop	{r7, pc}

08014418 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b082      	sub	sp, #8
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014426:	4b07      	ldr	r3, [pc, #28]	; (8014444 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014428:	f240 22ae 	movw	r2, #686	; 0x2ae
 801442c:	4906      	ldr	r1, [pc, #24]	; (8014448 <ip_frag_free_pbuf_custom_ref+0x30>)
 801442e:	4807      	ldr	r0, [pc, #28]	; (801444c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014430:	f000 fbb4 	bl	8014b9c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014434:	6879      	ldr	r1, [r7, #4]
 8014436:	2005      	movs	r0, #5
 8014438:	f7f7 f990 	bl	800b75c <memp_free>
}
 801443c:	bf00      	nop
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	080180ac 	.word	0x080180ac
 8014448:	08018214 	.word	0x08018214
 801444c:	080180f4 	.word	0x080180f4

08014450 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d106      	bne.n	8014470 <ipfrag_free_pbuf_custom+0x20>
 8014462:	4b11      	ldr	r3, [pc, #68]	; (80144a8 <ipfrag_free_pbuf_custom+0x58>)
 8014464:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8014468:	4910      	ldr	r1, [pc, #64]	; (80144ac <ipfrag_free_pbuf_custom+0x5c>)
 801446a:	4811      	ldr	r0, [pc, #68]	; (80144b0 <ipfrag_free_pbuf_custom+0x60>)
 801446c:	f000 fb96 	bl	8014b9c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	429a      	cmp	r2, r3
 8014476:	d006      	beq.n	8014486 <ipfrag_free_pbuf_custom+0x36>
 8014478:	4b0b      	ldr	r3, [pc, #44]	; (80144a8 <ipfrag_free_pbuf_custom+0x58>)
 801447a:	f240 22b9 	movw	r2, #697	; 0x2b9
 801447e:	490d      	ldr	r1, [pc, #52]	; (80144b4 <ipfrag_free_pbuf_custom+0x64>)
 8014480:	480b      	ldr	r0, [pc, #44]	; (80144b0 <ipfrag_free_pbuf_custom+0x60>)
 8014482:	f000 fb8b 	bl	8014b9c <iprintf>
  if (pcr->original != NULL) {
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	695b      	ldr	r3, [r3, #20]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d004      	beq.n	8014498 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	695b      	ldr	r3, [r3, #20]
 8014492:	4618      	mov	r0, r3
 8014494:	f7f7 ff16 	bl	800c2c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014498:	68f8      	ldr	r0, [r7, #12]
 801449a:	f7ff ffbd 	bl	8014418 <ip_frag_free_pbuf_custom_ref>
}
 801449e:	bf00      	nop
 80144a0:	3710      	adds	r7, #16
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	080180ac 	.word	0x080180ac
 80144ac:	08018220 	.word	0x08018220
 80144b0:	080180f4 	.word	0x080180f4
 80144b4:	0801822c 	.word	0x0801822c

080144b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b092      	sub	sp, #72	; 0x48
 80144bc:	af02      	add	r7, sp, #8
 80144be:	60f8      	str	r0, [r7, #12]
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80144c4:	2300      	movs	r3, #0
 80144c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80144cc:	3b14      	subs	r3, #20
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	da00      	bge.n	80144d4 <ip4_frag+0x1c>
 80144d2:	3307      	adds	r3, #7
 80144d4:	10db      	asrs	r3, r3, #3
 80144d6:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80144d8:	2314      	movs	r3, #20
 80144da:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80144e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80144e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	f003 030f 	and.w	r3, r3, #15
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	2b14      	cmp	r3, #20
 80144f2:	d009      	beq.n	8014508 <ip4_frag+0x50>
 80144f4:	4b7a      	ldr	r3, [pc, #488]	; (80146e0 <ip4_frag+0x228>)
 80144f6:	f240 22e1 	movw	r2, #737	; 0x2e1
 80144fa:	497a      	ldr	r1, [pc, #488]	; (80146e4 <ip4_frag+0x22c>)
 80144fc:	487a      	ldr	r0, [pc, #488]	; (80146e8 <ip4_frag+0x230>)
 80144fe:	f000 fb4d 	bl	8014b9c <iprintf>
 8014502:	f06f 0305 	mvn.w	r3, #5
 8014506:	e0e6      	b.n	80146d6 <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801450a:	88db      	ldrh	r3, [r3, #6]
 801450c:	b29b      	uxth	r3, r3
 801450e:	4618      	mov	r0, r3
 8014510:	f7f6 fc7c 	bl	800ae0c <lwip_htons>
 8014514:	4603      	mov	r3, r0
 8014516:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8014518:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801451a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801451e:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8014520:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014526:	2b00      	cmp	r3, #0
 8014528:	d009      	beq.n	801453e <ip4_frag+0x86>
 801452a:	4b6d      	ldr	r3, [pc, #436]	; (80146e0 <ip4_frag+0x228>)
 801452c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014530:	496e      	ldr	r1, [pc, #440]	; (80146ec <ip4_frag+0x234>)
 8014532:	486d      	ldr	r0, [pc, #436]	; (80146e8 <ip4_frag+0x230>)
 8014534:	f000 fb32 	bl	8014b9c <iprintf>
 8014538:	f06f 0305 	mvn.w	r3, #5
 801453c:	e0cb      	b.n	80146d6 <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	891b      	ldrh	r3, [r3, #8]
 8014542:	3b14      	subs	r3, #20
 8014544:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8014546:	e0bd      	b.n	80146c4 <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8014548:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801454a:	00da      	lsls	r2, r3, #3
 801454c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801454e:	4293      	cmp	r3, r2
 8014550:	bfa8      	it	ge
 8014552:	4613      	movge	r3, r2
 8014554:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014556:	2200      	movs	r2, #0
 8014558:	2114      	movs	r1, #20
 801455a:	2002      	movs	r0, #2
 801455c:	f7f7 fb40 	bl	800bbe0 <pbuf_alloc>
 8014560:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8014562:	6a3b      	ldr	r3, [r7, #32]
 8014564:	2b00      	cmp	r3, #0
 8014566:	f000 80b3 	beq.w	80146d0 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	895b      	ldrh	r3, [r3, #10]
 801456e:	2b13      	cmp	r3, #19
 8014570:	d806      	bhi.n	8014580 <ip4_frag+0xc8>
 8014572:	4b5b      	ldr	r3, [pc, #364]	; (80146e0 <ip4_frag+0x228>)
 8014574:	f44f 7242 	mov.w	r2, #776	; 0x308
 8014578:	495d      	ldr	r1, [pc, #372]	; (80146f0 <ip4_frag+0x238>)
 801457a:	485b      	ldr	r0, [pc, #364]	; (80146e8 <ip4_frag+0x230>)
 801457c:	f000 fb0e 	bl	8014b9c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014580:	6a3b      	ldr	r3, [r7, #32]
 8014582:	685b      	ldr	r3, [r3, #4]
 8014584:	2214      	movs	r2, #20
 8014586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014588:	4618      	mov	r0, r3
 801458a:	f000 faf1 	bl	8014b70 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801458e:	6a3b      	ldr	r3, [r7, #32]
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8014594:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014596:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8014598:	e04f      	b.n	801463a <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	895a      	ldrh	r2, [r3, #10]
 801459e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80145a0:	1ad3      	subs	r3, r2, r3
 80145a2:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80145a4:	8b7a      	ldrh	r2, [r7, #26]
 80145a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80145a8:	4293      	cmp	r3, r2
 80145aa:	bf28      	it	cs
 80145ac:	4613      	movcs	r3, r2
 80145ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80145b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d105      	bne.n	80145c2 <ip4_frag+0x10a>
        poff = 0;
 80145b6:	2300      	movs	r3, #0
 80145b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	60fb      	str	r3, [r7, #12]
        continue;
 80145c0:	e03b      	b.n	801463a <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80145c2:	f7ff ff21 	bl	8014408 <ip_frag_alloc_pbuf_custom_ref>
 80145c6:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d103      	bne.n	80145d6 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80145ce:	6a38      	ldr	r0, [r7, #32]
 80145d0:	f7f7 fe78 	bl	800c2c4 <pbuf_free>
        goto memerr;
 80145d4:	e07d      	b.n	80146d2 <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80145d6:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80145dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80145de:	4413      	add	r3, r2
 80145e0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80145e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80145e4:	9201      	str	r2, [sp, #4]
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	4603      	mov	r3, r0
 80145ea:	2202      	movs	r2, #2
 80145ec:	2004      	movs	r0, #4
 80145ee:	f7f7 fc8b 	bl	800bf08 <pbuf_alloced_custom>
 80145f2:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d106      	bne.n	8014608 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80145fa:	6978      	ldr	r0, [r7, #20]
 80145fc:	f7ff ff0c 	bl	8014418 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014600:	6a38      	ldr	r0, [r7, #32]
 8014602:	f7f7 fe5f 	bl	800c2c4 <pbuf_free>
        goto memerr;
 8014606:	e064      	b.n	80146d2 <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 8014608:	68f8      	ldr	r0, [r7, #12]
 801460a:	f7f7 ff0b 	bl	800c424 <pbuf_ref>
      pcr->original = p;
 801460e:	697b      	ldr	r3, [r7, #20]
 8014610:	68fa      	ldr	r2, [r7, #12]
 8014612:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	4a37      	ldr	r2, [pc, #220]	; (80146f4 <ip4_frag+0x23c>)
 8014618:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801461a:	6939      	ldr	r1, [r7, #16]
 801461c:	6a38      	ldr	r0, [r7, #32]
 801461e:	f7f7 ff29 	bl	800c474 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8014622:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8014624:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014626:	1ad3      	subs	r3, r2, r3
 8014628:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801462a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801462c:	2b00      	cmp	r3, #0
 801462e:	d004      	beq.n	801463a <ip4_frag+0x182>
        poff = 0;
 8014630:	2300      	movs	r3, #0
 8014632:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801463a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801463c:	2b00      	cmp	r3, #0
 801463e:	d1ac      	bne.n	801459a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8014640:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014642:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014644:	4413      	add	r3, r2
 8014646:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801464c:	f1a3 0213 	sub.w	r2, r3, #19
 8014650:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014652:	429a      	cmp	r2, r3
 8014654:	bfcc      	ite	gt
 8014656:	2301      	movgt	r3, #1
 8014658:	2300      	movle	r3, #0
 801465a:	b2db      	uxtb	r3, r3
 801465c:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801465e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014664:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8014666:	69fb      	ldr	r3, [r7, #28]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d103      	bne.n	8014674 <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 801466c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801466e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014672:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014674:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014676:	4618      	mov	r0, r3
 8014678:	f7f6 fbc8 	bl	800ae0c <lwip_htons>
 801467c:	4603      	mov	r3, r0
 801467e:	461a      	mov	r2, r3
 8014680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014682:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8014684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014686:	3314      	adds	r3, #20
 8014688:	b29b      	uxth	r3, r3
 801468a:	4618      	mov	r0, r3
 801468c:	f7f6 fbbe 	bl	800ae0c <lwip_htons>
 8014690:	4603      	mov	r3, r0
 8014692:	461a      	mov	r2, r3
 8014694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014696:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801469a:	2200      	movs	r2, #0
 801469c:	729a      	strb	r2, [r3, #10]
 801469e:	2200      	movs	r2, #0
 80146a0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	695b      	ldr	r3, [r3, #20]
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	6a39      	ldr	r1, [r7, #32]
 80146aa:	68b8      	ldr	r0, [r7, #8]
 80146ac:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80146ae:	6a38      	ldr	r0, [r7, #32]
 80146b0:	f7f7 fe08 	bl	800c2c4 <pbuf_free>
    left -= fragsize;
 80146b4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80146b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80146bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80146be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80146c0:	4413      	add	r3, r2
 80146c2:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80146c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	f47f af3e 	bne.w	8014548 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80146cc:	2300      	movs	r3, #0
 80146ce:	e002      	b.n	80146d6 <ip4_frag+0x21e>
      goto memerr;
 80146d0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80146d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146d6:	4618      	mov	r0, r3
 80146d8:	3740      	adds	r7, #64	; 0x40
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	080180ac 	.word	0x080180ac
 80146e4:	08018238 	.word	0x08018238
 80146e8:	080180f4 	.word	0x080180f4
 80146ec:	08018260 	.word	0x08018260
 80146f0:	0801827c 	.word	0x0801827c
 80146f4:	08014451 	.word	0x08014451

080146f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80146f8:	b580      	push	{r7, lr}
 80146fa:	b086      	sub	sp, #24
 80146fc:	af00      	add	r7, sp, #0
 80146fe:	6078      	str	r0, [r7, #4]
 8014700:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8014702:	230e      	movs	r3, #14
 8014704:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	895b      	ldrh	r3, [r3, #10]
 801470a:	2b0e      	cmp	r3, #14
 801470c:	d977      	bls.n	80147fe <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	7b1a      	ldrb	r2, [r3, #12]
 8014718:	7b5b      	ldrb	r3, [r3, #13]
 801471a:	021b      	lsls	r3, r3, #8
 801471c:	4313      	orrs	r3, r2
 801471e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	f003 0301 	and.w	r3, r3, #1
 8014728:	2b00      	cmp	r3, #0
 801472a:	d023      	beq.n	8014774 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	2b01      	cmp	r3, #1
 8014732:	d10f      	bne.n	8014754 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	785b      	ldrb	r3, [r3, #1]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d11b      	bne.n	8014774 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014740:	2b5e      	cmp	r3, #94	; 0x5e
 8014742:	d117      	bne.n	8014774 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	7b5b      	ldrb	r3, [r3, #13]
 8014748:	f043 0310 	orr.w	r3, r3, #16
 801474c:	b2da      	uxtb	r2, r3
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	735a      	strb	r2, [r3, #13]
 8014752:	e00f      	b.n	8014774 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	2206      	movs	r2, #6
 8014758:	4931      	ldr	r1, [pc, #196]	; (8014820 <ethernet_input+0x128>)
 801475a:	4618      	mov	r0, r3
 801475c:	f000 f9fa 	bl	8014b54 <memcmp>
 8014760:	4603      	mov	r3, r0
 8014762:	2b00      	cmp	r3, #0
 8014764:	d106      	bne.n	8014774 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	7b5b      	ldrb	r3, [r3, #13]
 801476a:	f043 0308 	orr.w	r3, r3, #8
 801476e:	b2da      	uxtb	r2, r3
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014774:	89fb      	ldrh	r3, [r7, #14]
 8014776:	2b08      	cmp	r3, #8
 8014778:	d003      	beq.n	8014782 <ethernet_input+0x8a>
 801477a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801477e:	d01e      	beq.n	80147be <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014780:	e046      	b.n	8014810 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014788:	f003 0308 	and.w	r3, r3, #8
 801478c:	2b00      	cmp	r3, #0
 801478e:	d038      	beq.n	8014802 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	895b      	ldrh	r3, [r3, #10]
 8014794:	461a      	mov	r2, r3
 8014796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801479a:	429a      	cmp	r2, r3
 801479c:	db33      	blt.n	8014806 <ethernet_input+0x10e>
 801479e:	8afb      	ldrh	r3, [r7, #22]
 80147a0:	425b      	negs	r3, r3
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	b21b      	sxth	r3, r3
 80147a6:	4619      	mov	r1, r3
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f7f7 fd67 	bl	800c27c <pbuf_header>
 80147ae:	4603      	mov	r3, r0
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d128      	bne.n	8014806 <ethernet_input+0x10e>
        ip4_input(p, netif);
 80147b4:	6839      	ldr	r1, [r7, #0]
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7fe ff7c 	bl	80136b4 <ip4_input>
      break;
 80147bc:	e01d      	b.n	80147fa <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80147c4:	f003 0308 	and.w	r3, r3, #8
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d01e      	beq.n	801480a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	895b      	ldrh	r3, [r3, #10]
 80147d0:	461a      	mov	r2, r3
 80147d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	db19      	blt.n	801480e <ethernet_input+0x116>
 80147da:	8afb      	ldrh	r3, [r7, #22]
 80147dc:	425b      	negs	r3, r3
 80147de:	b29b      	uxth	r3, r3
 80147e0:	b21b      	sxth	r3, r3
 80147e2:	4619      	mov	r1, r3
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f7f7 fd49 	bl	800c27c <pbuf_header>
 80147ea:	4603      	mov	r3, r0
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d10e      	bne.n	801480e <ethernet_input+0x116>
        etharp_input(p, netif);
 80147f0:	6839      	ldr	r1, [r7, #0]
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f7fe f94c 	bl	8012a90 <etharp_input>
      break;
 80147f8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e00c      	b.n	8014818 <ethernet_input+0x120>
    goto free_and_return;
 80147fe:	bf00      	nop
 8014800:	e006      	b.n	8014810 <ethernet_input+0x118>
        goto free_and_return;
 8014802:	bf00      	nop
 8014804:	e004      	b.n	8014810 <ethernet_input+0x118>
        goto free_and_return;
 8014806:	bf00      	nop
 8014808:	e002      	b.n	8014810 <ethernet_input+0x118>
        goto free_and_return;
 801480a:	bf00      	nop
 801480c:	e000      	b.n	8014810 <ethernet_input+0x118>
        goto free_and_return;
 801480e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7f7 fd57 	bl	800c2c4 <pbuf_free>
  return ERR_OK;
 8014816:	2300      	movs	r3, #0
}
 8014818:	4618      	mov	r0, r3
 801481a:	3718      	adds	r7, #24
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	08018768 	.word	0x08018768

08014824 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b086      	sub	sp, #24
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	607a      	str	r2, [r7, #4]
 8014830:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014832:	8c3b      	ldrh	r3, [r7, #32]
 8014834:	4618      	mov	r0, r3
 8014836:	f7f6 fae9 	bl	800ae0c <lwip_htons>
 801483a:	4603      	mov	r3, r0
 801483c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801483e:	210e      	movs	r1, #14
 8014840:	68b8      	ldr	r0, [r7, #8]
 8014842:	f7f7 fd1b 	bl	800c27c <pbuf_header>
 8014846:	4603      	mov	r3, r0
 8014848:	2b00      	cmp	r3, #0
 801484a:	d125      	bne.n	8014898 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	8afa      	ldrh	r2, [r7, #22]
 8014856:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	2206      	movs	r2, #6
 801485c:	6839      	ldr	r1, [r7, #0]
 801485e:	4618      	mov	r0, r3
 8014860:	f000 f986 	bl	8014b70 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	3306      	adds	r3, #6
 8014868:	2206      	movs	r2, #6
 801486a:	6879      	ldr	r1, [r7, #4]
 801486c:	4618      	mov	r0, r3
 801486e:	f000 f97f 	bl	8014b70 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014878:	2b06      	cmp	r3, #6
 801487a:	d006      	beq.n	801488a <ethernet_output+0x66>
 801487c:	4b0a      	ldr	r3, [pc, #40]	; (80148a8 <ethernet_output+0x84>)
 801487e:	f240 122b 	movw	r2, #299	; 0x12b
 8014882:	490a      	ldr	r1, [pc, #40]	; (80148ac <ethernet_output+0x88>)
 8014884:	480a      	ldr	r0, [pc, #40]	; (80148b0 <ethernet_output+0x8c>)
 8014886:	f000 f989 	bl	8014b9c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	699b      	ldr	r3, [r3, #24]
 801488e:	68b9      	ldr	r1, [r7, #8]
 8014890:	68f8      	ldr	r0, [r7, #12]
 8014892:	4798      	blx	r3
 8014894:	4603      	mov	r3, r0
 8014896:	e002      	b.n	801489e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014898:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801489a:	f06f 0301 	mvn.w	r3, #1
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3718      	adds	r7, #24
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	0801829c 	.word	0x0801829c
 80148ac:	080182d4 	.word	0x080182d4
 80148b0:	08018308 	.word	0x08018308

080148b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80148be:	683b      	ldr	r3, [r7, #0]
 80148c0:	60bb      	str	r3, [r7, #8]
 80148c2:	2304      	movs	r3, #4
 80148c4:	60fb      	str	r3, [r7, #12]
 80148c6:	2300      	movs	r3, #0
 80148c8:	613b      	str	r3, [r7, #16]
 80148ca:	2300      	movs	r3, #0
 80148cc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80148ce:	f107 0308 	add.w	r3, r7, #8
 80148d2:	2100      	movs	r1, #0
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7f0 fdd5 	bl	8005484 <osMessageCreate>
 80148da:	4602      	mov	r2, r0
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d102      	bne.n	80148ee <sys_mbox_new+0x3a>
    return ERR_MEM;
 80148e8:	f04f 33ff 	mov.w	r3, #4294967295
 80148ec:	e000      	b.n	80148f0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80148ee:	2300      	movs	r3, #0
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3718      	adds	r7, #24
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b082      	sub	sp, #8
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8014902:	bf00      	nop
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	6839      	ldr	r1, [r7, #0]
 801490a:	f04f 32ff 	mov.w	r2, #4294967295
 801490e:	4618      	mov	r0, r3
 8014910:	f7f0 fde0 	bl	80054d4 <osMessagePut>
 8014914:	4603      	mov	r3, r0
 8014916:	2b00      	cmp	r3, #0
 8014918:	d1f4      	bne.n	8014904 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801491a:	bf00      	nop
 801491c:	bf00      	nop
 801491e:	3708      	adds	r7, #8
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}

08014924 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b084      	sub	sp, #16
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
 801492c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	6839      	ldr	r1, [r7, #0]
 8014934:	2200      	movs	r2, #0
 8014936:	4618      	mov	r0, r3
 8014938:	f7f0 fdcc 	bl	80054d4 <osMessagePut>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d102      	bne.n	8014948 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014942:	2300      	movs	r3, #0
 8014944:	73fb      	strb	r3, [r7, #15]
 8014946:	e001      	b.n	801494c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014948:	23ff      	movs	r3, #255	; 0xff
 801494a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801494c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014950:	4618      	mov	r0, r3
 8014952:	3710      	adds	r7, #16
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b08c      	sub	sp, #48	; 0x30
 801495c:	af00      	add	r7, sp, #0
 801495e:	61f8      	str	r0, [r7, #28]
 8014960:	61b9      	str	r1, [r7, #24]
 8014962:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014964:	f7f0 fbcc 	bl	8005100 <osKernelSysTick>
 8014968:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d017      	beq.n	80149a0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	6819      	ldr	r1, [r3, #0]
 8014974:	f107 0320 	add.w	r3, r7, #32
 8014978:	697a      	ldr	r2, [r7, #20]
 801497a:	4618      	mov	r0, r3
 801497c:	f7f0 fdea 	bl	8005554 <osMessageGet>

    if(event.status == osEventMessage)
 8014980:	6a3b      	ldr	r3, [r7, #32]
 8014982:	2b10      	cmp	r3, #16
 8014984:	d109      	bne.n	801499a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014988:	461a      	mov	r2, r3
 801498a:	69bb      	ldr	r3, [r7, #24]
 801498c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801498e:	f7f0 fbb7 	bl	8005100 <osKernelSysTick>
 8014992:	4602      	mov	r2, r0
 8014994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014996:	1ad3      	subs	r3, r2, r3
 8014998:	e019      	b.n	80149ce <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801499a:	f04f 33ff 	mov.w	r3, #4294967295
 801499e:	e016      	b.n	80149ce <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80149a0:	69fb      	ldr	r3, [r7, #28]
 80149a2:	6819      	ldr	r1, [r3, #0]
 80149a4:	463b      	mov	r3, r7
 80149a6:	f04f 32ff 	mov.w	r2, #4294967295
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7f0 fdd2 	bl	8005554 <osMessageGet>
 80149b0:	f107 0320 	add.w	r3, r7, #32
 80149b4:	463a      	mov	r2, r7
 80149b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80149b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80149bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149be:	461a      	mov	r2, r3
 80149c0:	69bb      	ldr	r3, [r7, #24]
 80149c2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80149c4:	f7f0 fb9c 	bl	8005100 <osKernelSysTick>
 80149c8:	4602      	mov	r2, r0
 80149ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149cc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80149ce:	4618      	mov	r0, r3
 80149d0:	3730      	adds	r7, #48	; 0x30
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80149d6:	b480      	push	{r7}
 80149d8:	b083      	sub	sp, #12
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d101      	bne.n	80149ea <sys_mbox_valid+0x14>
    return 0;
 80149e6:	2300      	movs	r3, #0
 80149e8:	e000      	b.n	80149ec <sys_mbox_valid+0x16>
  else
    return 1;
 80149ea:	2301      	movs	r3, #1
}
 80149ec:	4618      	mov	r0, r3
 80149ee:	370c      	adds	r7, #12
 80149f0:	46bd      	mov	sp, r7
 80149f2:	bc80      	pop	{r7}
 80149f4:	4770      	bx	lr
	...

080149f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80149fc:	4803      	ldr	r0, [pc, #12]	; (8014a0c <sys_init+0x14>)
 80149fe:	f7f0 fbef 	bl	80051e0 <osMutexCreate>
 8014a02:	4603      	mov	r3, r0
 8014a04:	4a02      	ldr	r2, [pc, #8]	; (8014a10 <sys_init+0x18>)
 8014a06:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014a08:	bf00      	nop
 8014a0a:	bd80      	pop	{r7, pc}
 8014a0c:	08018778 	.word	0x08018778
 8014a10:	2000bb84 	.word	0x2000bb84

08014a14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	60bb      	str	r3, [r7, #8]
 8014a20:	2300      	movs	r3, #0
 8014a22:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014a24:	f107 0308 	add.w	r3, r7, #8
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7f0 fbd9 	bl	80051e0 <osMutexCreate>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d102      	bne.n	8014a42 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a40:	e000      	b.n	8014a44 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014a42:	2300      	movs	r3, #0
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3710      	adds	r7, #16
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	f04f 31ff 	mov.w	r1, #4294967295
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7f0 fbd7 	bl	8005210 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014a62:	bf00      	nop
 8014a64:	3708      	adds	r7, #8
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}

08014a6a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014a6a:	b580      	push	{r7, lr}
 8014a6c:	b082      	sub	sp, #8
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7f0 fc18 	bl	80052ac <osMutexRelease>
}
 8014a7c:	bf00      	nop
 8014a7e:	3708      	adds	r7, #8
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b08c      	sub	sp, #48	; 0x30
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
 8014a90:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014a92:	f107 0314 	add.w	r3, r7, #20
 8014a96:	2200      	movs	r2, #0
 8014a98:	601a      	str	r2, [r3, #0]
 8014a9a:	605a      	str	r2, [r3, #4]
 8014a9c:	609a      	str	r2, [r3, #8]
 8014a9e:	60da      	str	r2, [r3, #12]
 8014aa0:	611a      	str	r2, [r3, #16]
 8014aa2:	615a      	str	r2, [r3, #20]
 8014aa4:	619a      	str	r2, [r3, #24]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	617b      	str	r3, [r7, #20]
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	61bb      	str	r3, [r7, #24]
 8014aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab0:	b21b      	sxth	r3, r3
 8014ab2:	83bb      	strh	r3, [r7, #28]
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014ab8:	f107 0314 	add.w	r3, r7, #20
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7f0 fb2e 	bl	8005120 <osThreadCreate>
 8014ac4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3730      	adds	r7, #48	; 0x30
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
	...

08014ad0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014ad4:	4b04      	ldr	r3, [pc, #16]	; (8014ae8 <sys_arch_protect+0x18>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7f0 fb97 	bl	8005210 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014ae2:	2301      	movs	r3, #1
}
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	bd80      	pop	{r7, pc}
 8014ae8:	2000bb84 	.word	0x2000bb84

08014aec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b082      	sub	sp, #8
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014af4:	4b04      	ldr	r3, [pc, #16]	; (8014b08 <sys_arch_unprotect+0x1c>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7f0 fbd7 	bl	80052ac <osMutexRelease>
}
 8014afe:	bf00      	nop
 8014b00:	3708      	adds	r7, #8
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	2000bb84 	.word	0x2000bb84

08014b0c <__libc_init_array>:
 8014b0c:	b570      	push	{r4, r5, r6, lr}
 8014b0e:	2600      	movs	r6, #0
 8014b10:	4d0c      	ldr	r5, [pc, #48]	; (8014b44 <__libc_init_array+0x38>)
 8014b12:	4c0d      	ldr	r4, [pc, #52]	; (8014b48 <__libc_init_array+0x3c>)
 8014b14:	1b64      	subs	r4, r4, r5
 8014b16:	10a4      	asrs	r4, r4, #2
 8014b18:	42a6      	cmp	r6, r4
 8014b1a:	d109      	bne.n	8014b30 <__libc_init_array+0x24>
 8014b1c:	f000 ffc6 	bl	8015aac <_init>
 8014b20:	2600      	movs	r6, #0
 8014b22:	4d0a      	ldr	r5, [pc, #40]	; (8014b4c <__libc_init_array+0x40>)
 8014b24:	4c0a      	ldr	r4, [pc, #40]	; (8014b50 <__libc_init_array+0x44>)
 8014b26:	1b64      	subs	r4, r4, r5
 8014b28:	10a4      	asrs	r4, r4, #2
 8014b2a:	42a6      	cmp	r6, r4
 8014b2c:	d105      	bne.n	8014b3a <__libc_init_array+0x2e>
 8014b2e:	bd70      	pop	{r4, r5, r6, pc}
 8014b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b34:	4798      	blx	r3
 8014b36:	3601      	adds	r6, #1
 8014b38:	e7ee      	b.n	8014b18 <__libc_init_array+0xc>
 8014b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8014b3e:	4798      	blx	r3
 8014b40:	3601      	adds	r6, #1
 8014b42:	e7f2      	b.n	8014b2a <__libc_init_array+0x1e>
 8014b44:	08018820 	.word	0x08018820
 8014b48:	08018820 	.word	0x08018820
 8014b4c:	08018820 	.word	0x08018820
 8014b50:	08018824 	.word	0x08018824

08014b54 <memcmp>:
 8014b54:	b530      	push	{r4, r5, lr}
 8014b56:	2400      	movs	r4, #0
 8014b58:	3901      	subs	r1, #1
 8014b5a:	42a2      	cmp	r2, r4
 8014b5c:	d101      	bne.n	8014b62 <memcmp+0xe>
 8014b5e:	2000      	movs	r0, #0
 8014b60:	e005      	b.n	8014b6e <memcmp+0x1a>
 8014b62:	5d03      	ldrb	r3, [r0, r4]
 8014b64:	3401      	adds	r4, #1
 8014b66:	5d0d      	ldrb	r5, [r1, r4]
 8014b68:	42ab      	cmp	r3, r5
 8014b6a:	d0f6      	beq.n	8014b5a <memcmp+0x6>
 8014b6c:	1b58      	subs	r0, r3, r5
 8014b6e:	bd30      	pop	{r4, r5, pc}

08014b70 <memcpy>:
 8014b70:	440a      	add	r2, r1
 8014b72:	4291      	cmp	r1, r2
 8014b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8014b78:	d100      	bne.n	8014b7c <memcpy+0xc>
 8014b7a:	4770      	bx	lr
 8014b7c:	b510      	push	{r4, lr}
 8014b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014b82:	4291      	cmp	r1, r2
 8014b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014b88:	d1f9      	bne.n	8014b7e <memcpy+0xe>
 8014b8a:	bd10      	pop	{r4, pc}

08014b8c <memset>:
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	4402      	add	r2, r0
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d100      	bne.n	8014b96 <memset+0xa>
 8014b94:	4770      	bx	lr
 8014b96:	f803 1b01 	strb.w	r1, [r3], #1
 8014b9a:	e7f9      	b.n	8014b90 <memset+0x4>

08014b9c <iprintf>:
 8014b9c:	b40f      	push	{r0, r1, r2, r3}
 8014b9e:	4b0a      	ldr	r3, [pc, #40]	; (8014bc8 <iprintf+0x2c>)
 8014ba0:	b513      	push	{r0, r1, r4, lr}
 8014ba2:	681c      	ldr	r4, [r3, #0]
 8014ba4:	b124      	cbz	r4, 8014bb0 <iprintf+0x14>
 8014ba6:	69a3      	ldr	r3, [r4, #24]
 8014ba8:	b913      	cbnz	r3, 8014bb0 <iprintf+0x14>
 8014baa:	4620      	mov	r0, r4
 8014bac:	f000 f88e 	bl	8014ccc <__sinit>
 8014bb0:	ab05      	add	r3, sp, #20
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	9a04      	ldr	r2, [sp, #16]
 8014bb6:	68a1      	ldr	r1, [r4, #8]
 8014bb8:	9301      	str	r3, [sp, #4]
 8014bba:	f000 f9a9 	bl	8014f10 <_vfiprintf_r>
 8014bbe:	b002      	add	sp, #8
 8014bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bc4:	b004      	add	sp, #16
 8014bc6:	4770      	bx	lr
 8014bc8:	20000020 	.word	0x20000020

08014bcc <strchr>:
 8014bcc:	4603      	mov	r3, r0
 8014bce:	b2c9      	uxtb	r1, r1
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bd6:	b112      	cbz	r2, 8014bde <strchr+0x12>
 8014bd8:	428a      	cmp	r2, r1
 8014bda:	d1f9      	bne.n	8014bd0 <strchr+0x4>
 8014bdc:	4770      	bx	lr
 8014bde:	2900      	cmp	r1, #0
 8014be0:	bf18      	it	ne
 8014be2:	2000      	movne	r0, #0
 8014be4:	4770      	bx	lr

08014be6 <strcpy>:
 8014be6:	4603      	mov	r3, r0
 8014be8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bec:	f803 2b01 	strb.w	r2, [r3], #1
 8014bf0:	2a00      	cmp	r2, #0
 8014bf2:	d1f9      	bne.n	8014be8 <strcpy+0x2>
 8014bf4:	4770      	bx	lr

08014bf6 <strncmp>:
 8014bf6:	b510      	push	{r4, lr}
 8014bf8:	b16a      	cbz	r2, 8014c16 <strncmp+0x20>
 8014bfa:	3901      	subs	r1, #1
 8014bfc:	1884      	adds	r4, r0, r2
 8014bfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014c02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d103      	bne.n	8014c12 <strncmp+0x1c>
 8014c0a:	42a0      	cmp	r0, r4
 8014c0c:	d001      	beq.n	8014c12 <strncmp+0x1c>
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d1f5      	bne.n	8014bfe <strncmp+0x8>
 8014c12:	1a98      	subs	r0, r3, r2
 8014c14:	bd10      	pop	{r4, pc}
 8014c16:	4610      	mov	r0, r2
 8014c18:	e7fc      	b.n	8014c14 <strncmp+0x1e>
	...

08014c1c <std>:
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	b510      	push	{r4, lr}
 8014c20:	4604      	mov	r4, r0
 8014c22:	e9c0 3300 	strd	r3, r3, [r0]
 8014c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c2a:	6083      	str	r3, [r0, #8]
 8014c2c:	8181      	strh	r1, [r0, #12]
 8014c2e:	6643      	str	r3, [r0, #100]	; 0x64
 8014c30:	81c2      	strh	r2, [r0, #14]
 8014c32:	6183      	str	r3, [r0, #24]
 8014c34:	4619      	mov	r1, r3
 8014c36:	2208      	movs	r2, #8
 8014c38:	305c      	adds	r0, #92	; 0x5c
 8014c3a:	f7ff ffa7 	bl	8014b8c <memset>
 8014c3e:	4b05      	ldr	r3, [pc, #20]	; (8014c54 <std+0x38>)
 8014c40:	6224      	str	r4, [r4, #32]
 8014c42:	6263      	str	r3, [r4, #36]	; 0x24
 8014c44:	4b04      	ldr	r3, [pc, #16]	; (8014c58 <std+0x3c>)
 8014c46:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c48:	4b04      	ldr	r3, [pc, #16]	; (8014c5c <std+0x40>)
 8014c4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014c4c:	4b04      	ldr	r3, [pc, #16]	; (8014c60 <std+0x44>)
 8014c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8014c50:	bd10      	pop	{r4, pc}
 8014c52:	bf00      	nop
 8014c54:	080154bd 	.word	0x080154bd
 8014c58:	080154df 	.word	0x080154df
 8014c5c:	08015517 	.word	0x08015517
 8014c60:	0801553b 	.word	0x0801553b

08014c64 <_cleanup_r>:
 8014c64:	4901      	ldr	r1, [pc, #4]	; (8014c6c <_cleanup_r+0x8>)
 8014c66:	f000 b8af 	b.w	8014dc8 <_fwalk_reent>
 8014c6a:	bf00      	nop
 8014c6c:	08015815 	.word	0x08015815

08014c70 <__sfmoreglue>:
 8014c70:	b570      	push	{r4, r5, r6, lr}
 8014c72:	2568      	movs	r5, #104	; 0x68
 8014c74:	1e4a      	subs	r2, r1, #1
 8014c76:	4355      	muls	r5, r2
 8014c78:	460e      	mov	r6, r1
 8014c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014c7e:	f000 f8c5 	bl	8014e0c <_malloc_r>
 8014c82:	4604      	mov	r4, r0
 8014c84:	b140      	cbz	r0, 8014c98 <__sfmoreglue+0x28>
 8014c86:	2100      	movs	r1, #0
 8014c88:	e9c0 1600 	strd	r1, r6, [r0]
 8014c8c:	300c      	adds	r0, #12
 8014c8e:	60a0      	str	r0, [r4, #8]
 8014c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014c94:	f7ff ff7a 	bl	8014b8c <memset>
 8014c98:	4620      	mov	r0, r4
 8014c9a:	bd70      	pop	{r4, r5, r6, pc}

08014c9c <__sfp_lock_acquire>:
 8014c9c:	4801      	ldr	r0, [pc, #4]	; (8014ca4 <__sfp_lock_acquire+0x8>)
 8014c9e:	f000 b8b3 	b.w	8014e08 <__retarget_lock_acquire_recursive>
 8014ca2:	bf00      	nop
 8014ca4:	2000bb90 	.word	0x2000bb90

08014ca8 <__sfp_lock_release>:
 8014ca8:	4801      	ldr	r0, [pc, #4]	; (8014cb0 <__sfp_lock_release+0x8>)
 8014caa:	f000 b8ae 	b.w	8014e0a <__retarget_lock_release_recursive>
 8014cae:	bf00      	nop
 8014cb0:	2000bb90 	.word	0x2000bb90

08014cb4 <__sinit_lock_acquire>:
 8014cb4:	4801      	ldr	r0, [pc, #4]	; (8014cbc <__sinit_lock_acquire+0x8>)
 8014cb6:	f000 b8a7 	b.w	8014e08 <__retarget_lock_acquire_recursive>
 8014cba:	bf00      	nop
 8014cbc:	2000bb8b 	.word	0x2000bb8b

08014cc0 <__sinit_lock_release>:
 8014cc0:	4801      	ldr	r0, [pc, #4]	; (8014cc8 <__sinit_lock_release+0x8>)
 8014cc2:	f000 b8a2 	b.w	8014e0a <__retarget_lock_release_recursive>
 8014cc6:	bf00      	nop
 8014cc8:	2000bb8b 	.word	0x2000bb8b

08014ccc <__sinit>:
 8014ccc:	b510      	push	{r4, lr}
 8014cce:	4604      	mov	r4, r0
 8014cd0:	f7ff fff0 	bl	8014cb4 <__sinit_lock_acquire>
 8014cd4:	69a3      	ldr	r3, [r4, #24]
 8014cd6:	b11b      	cbz	r3, 8014ce0 <__sinit+0x14>
 8014cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cdc:	f7ff bff0 	b.w	8014cc0 <__sinit_lock_release>
 8014ce0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014ce4:	6523      	str	r3, [r4, #80]	; 0x50
 8014ce6:	4b13      	ldr	r3, [pc, #76]	; (8014d34 <__sinit+0x68>)
 8014ce8:	4a13      	ldr	r2, [pc, #76]	; (8014d38 <__sinit+0x6c>)
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	62a2      	str	r2, [r4, #40]	; 0x28
 8014cee:	42a3      	cmp	r3, r4
 8014cf0:	bf08      	it	eq
 8014cf2:	2301      	moveq	r3, #1
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	bf08      	it	eq
 8014cf8:	61a3      	streq	r3, [r4, #24]
 8014cfa:	f000 f81f 	bl	8014d3c <__sfp>
 8014cfe:	6060      	str	r0, [r4, #4]
 8014d00:	4620      	mov	r0, r4
 8014d02:	f000 f81b 	bl	8014d3c <__sfp>
 8014d06:	60a0      	str	r0, [r4, #8]
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f000 f817 	bl	8014d3c <__sfp>
 8014d0e:	2200      	movs	r2, #0
 8014d10:	2104      	movs	r1, #4
 8014d12:	60e0      	str	r0, [r4, #12]
 8014d14:	6860      	ldr	r0, [r4, #4]
 8014d16:	f7ff ff81 	bl	8014c1c <std>
 8014d1a:	2201      	movs	r2, #1
 8014d1c:	2109      	movs	r1, #9
 8014d1e:	68a0      	ldr	r0, [r4, #8]
 8014d20:	f7ff ff7c 	bl	8014c1c <std>
 8014d24:	2202      	movs	r2, #2
 8014d26:	2112      	movs	r1, #18
 8014d28:	68e0      	ldr	r0, [r4, #12]
 8014d2a:	f7ff ff77 	bl	8014c1c <std>
 8014d2e:	2301      	movs	r3, #1
 8014d30:	61a3      	str	r3, [r4, #24]
 8014d32:	e7d1      	b.n	8014cd8 <__sinit+0xc>
 8014d34:	08018780 	.word	0x08018780
 8014d38:	08014c65 	.word	0x08014c65

08014d3c <__sfp>:
 8014d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d3e:	4607      	mov	r7, r0
 8014d40:	f7ff ffac 	bl	8014c9c <__sfp_lock_acquire>
 8014d44:	4b1e      	ldr	r3, [pc, #120]	; (8014dc0 <__sfp+0x84>)
 8014d46:	681e      	ldr	r6, [r3, #0]
 8014d48:	69b3      	ldr	r3, [r6, #24]
 8014d4a:	b913      	cbnz	r3, 8014d52 <__sfp+0x16>
 8014d4c:	4630      	mov	r0, r6
 8014d4e:	f7ff ffbd 	bl	8014ccc <__sinit>
 8014d52:	3648      	adds	r6, #72	; 0x48
 8014d54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014d58:	3b01      	subs	r3, #1
 8014d5a:	d503      	bpl.n	8014d64 <__sfp+0x28>
 8014d5c:	6833      	ldr	r3, [r6, #0]
 8014d5e:	b30b      	cbz	r3, 8014da4 <__sfp+0x68>
 8014d60:	6836      	ldr	r6, [r6, #0]
 8014d62:	e7f7      	b.n	8014d54 <__sfp+0x18>
 8014d64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014d68:	b9d5      	cbnz	r5, 8014da0 <__sfp+0x64>
 8014d6a:	4b16      	ldr	r3, [pc, #88]	; (8014dc4 <__sfp+0x88>)
 8014d6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014d70:	60e3      	str	r3, [r4, #12]
 8014d72:	6665      	str	r5, [r4, #100]	; 0x64
 8014d74:	f000 f847 	bl	8014e06 <__retarget_lock_init_recursive>
 8014d78:	f7ff ff96 	bl	8014ca8 <__sfp_lock_release>
 8014d7c:	2208      	movs	r2, #8
 8014d7e:	4629      	mov	r1, r5
 8014d80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014d84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014d88:	6025      	str	r5, [r4, #0]
 8014d8a:	61a5      	str	r5, [r4, #24]
 8014d8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014d90:	f7ff fefc 	bl	8014b8c <memset>
 8014d94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014d98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014da0:	3468      	adds	r4, #104	; 0x68
 8014da2:	e7d9      	b.n	8014d58 <__sfp+0x1c>
 8014da4:	2104      	movs	r1, #4
 8014da6:	4638      	mov	r0, r7
 8014da8:	f7ff ff62 	bl	8014c70 <__sfmoreglue>
 8014dac:	4604      	mov	r4, r0
 8014dae:	6030      	str	r0, [r6, #0]
 8014db0:	2800      	cmp	r0, #0
 8014db2:	d1d5      	bne.n	8014d60 <__sfp+0x24>
 8014db4:	f7ff ff78 	bl	8014ca8 <__sfp_lock_release>
 8014db8:	230c      	movs	r3, #12
 8014dba:	603b      	str	r3, [r7, #0]
 8014dbc:	e7ee      	b.n	8014d9c <__sfp+0x60>
 8014dbe:	bf00      	nop
 8014dc0:	08018780 	.word	0x08018780
 8014dc4:	ffff0001 	.word	0xffff0001

08014dc8 <_fwalk_reent>:
 8014dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dcc:	4606      	mov	r6, r0
 8014dce:	4688      	mov	r8, r1
 8014dd0:	2700      	movs	r7, #0
 8014dd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014dd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014dda:	f1b9 0901 	subs.w	r9, r9, #1
 8014dde:	d505      	bpl.n	8014dec <_fwalk_reent+0x24>
 8014de0:	6824      	ldr	r4, [r4, #0]
 8014de2:	2c00      	cmp	r4, #0
 8014de4:	d1f7      	bne.n	8014dd6 <_fwalk_reent+0xe>
 8014de6:	4638      	mov	r0, r7
 8014de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dec:	89ab      	ldrh	r3, [r5, #12]
 8014dee:	2b01      	cmp	r3, #1
 8014df0:	d907      	bls.n	8014e02 <_fwalk_reent+0x3a>
 8014df2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014df6:	3301      	adds	r3, #1
 8014df8:	d003      	beq.n	8014e02 <_fwalk_reent+0x3a>
 8014dfa:	4629      	mov	r1, r5
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	47c0      	blx	r8
 8014e00:	4307      	orrs	r7, r0
 8014e02:	3568      	adds	r5, #104	; 0x68
 8014e04:	e7e9      	b.n	8014dda <_fwalk_reent+0x12>

08014e06 <__retarget_lock_init_recursive>:
 8014e06:	4770      	bx	lr

08014e08 <__retarget_lock_acquire_recursive>:
 8014e08:	4770      	bx	lr

08014e0a <__retarget_lock_release_recursive>:
 8014e0a:	4770      	bx	lr

08014e0c <_malloc_r>:
 8014e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e0e:	1ccd      	adds	r5, r1, #3
 8014e10:	f025 0503 	bic.w	r5, r5, #3
 8014e14:	3508      	adds	r5, #8
 8014e16:	2d0c      	cmp	r5, #12
 8014e18:	bf38      	it	cc
 8014e1a:	250c      	movcc	r5, #12
 8014e1c:	2d00      	cmp	r5, #0
 8014e1e:	4606      	mov	r6, r0
 8014e20:	db01      	blt.n	8014e26 <_malloc_r+0x1a>
 8014e22:	42a9      	cmp	r1, r5
 8014e24:	d903      	bls.n	8014e2e <_malloc_r+0x22>
 8014e26:	230c      	movs	r3, #12
 8014e28:	6033      	str	r3, [r6, #0]
 8014e2a:	2000      	movs	r0, #0
 8014e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e2e:	f000 fdb1 	bl	8015994 <__malloc_lock>
 8014e32:	4921      	ldr	r1, [pc, #132]	; (8014eb8 <_malloc_r+0xac>)
 8014e34:	680a      	ldr	r2, [r1, #0]
 8014e36:	4614      	mov	r4, r2
 8014e38:	b99c      	cbnz	r4, 8014e62 <_malloc_r+0x56>
 8014e3a:	4f20      	ldr	r7, [pc, #128]	; (8014ebc <_malloc_r+0xb0>)
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	b923      	cbnz	r3, 8014e4a <_malloc_r+0x3e>
 8014e40:	4621      	mov	r1, r4
 8014e42:	4630      	mov	r0, r6
 8014e44:	f000 fb2a 	bl	801549c <_sbrk_r>
 8014e48:	6038      	str	r0, [r7, #0]
 8014e4a:	4629      	mov	r1, r5
 8014e4c:	4630      	mov	r0, r6
 8014e4e:	f000 fb25 	bl	801549c <_sbrk_r>
 8014e52:	1c43      	adds	r3, r0, #1
 8014e54:	d123      	bne.n	8014e9e <_malloc_r+0x92>
 8014e56:	230c      	movs	r3, #12
 8014e58:	4630      	mov	r0, r6
 8014e5a:	6033      	str	r3, [r6, #0]
 8014e5c:	f000 fda0 	bl	80159a0 <__malloc_unlock>
 8014e60:	e7e3      	b.n	8014e2a <_malloc_r+0x1e>
 8014e62:	6823      	ldr	r3, [r4, #0]
 8014e64:	1b5b      	subs	r3, r3, r5
 8014e66:	d417      	bmi.n	8014e98 <_malloc_r+0x8c>
 8014e68:	2b0b      	cmp	r3, #11
 8014e6a:	d903      	bls.n	8014e74 <_malloc_r+0x68>
 8014e6c:	6023      	str	r3, [r4, #0]
 8014e6e:	441c      	add	r4, r3
 8014e70:	6025      	str	r5, [r4, #0]
 8014e72:	e004      	b.n	8014e7e <_malloc_r+0x72>
 8014e74:	6863      	ldr	r3, [r4, #4]
 8014e76:	42a2      	cmp	r2, r4
 8014e78:	bf0c      	ite	eq
 8014e7a:	600b      	streq	r3, [r1, #0]
 8014e7c:	6053      	strne	r3, [r2, #4]
 8014e7e:	4630      	mov	r0, r6
 8014e80:	f000 fd8e 	bl	80159a0 <__malloc_unlock>
 8014e84:	f104 000b 	add.w	r0, r4, #11
 8014e88:	1d23      	adds	r3, r4, #4
 8014e8a:	f020 0007 	bic.w	r0, r0, #7
 8014e8e:	1ac2      	subs	r2, r0, r3
 8014e90:	d0cc      	beq.n	8014e2c <_malloc_r+0x20>
 8014e92:	1a1b      	subs	r3, r3, r0
 8014e94:	50a3      	str	r3, [r4, r2]
 8014e96:	e7c9      	b.n	8014e2c <_malloc_r+0x20>
 8014e98:	4622      	mov	r2, r4
 8014e9a:	6864      	ldr	r4, [r4, #4]
 8014e9c:	e7cc      	b.n	8014e38 <_malloc_r+0x2c>
 8014e9e:	1cc4      	adds	r4, r0, #3
 8014ea0:	f024 0403 	bic.w	r4, r4, #3
 8014ea4:	42a0      	cmp	r0, r4
 8014ea6:	d0e3      	beq.n	8014e70 <_malloc_r+0x64>
 8014ea8:	1a21      	subs	r1, r4, r0
 8014eaa:	4630      	mov	r0, r6
 8014eac:	f000 faf6 	bl	801549c <_sbrk_r>
 8014eb0:	3001      	adds	r0, #1
 8014eb2:	d1dd      	bne.n	8014e70 <_malloc_r+0x64>
 8014eb4:	e7cf      	b.n	8014e56 <_malloc_r+0x4a>
 8014eb6:	bf00      	nop
 8014eb8:	20004c24 	.word	0x20004c24
 8014ebc:	20004c28 	.word	0x20004c28

08014ec0 <__sfputc_r>:
 8014ec0:	6893      	ldr	r3, [r2, #8]
 8014ec2:	b410      	push	{r4}
 8014ec4:	3b01      	subs	r3, #1
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	6093      	str	r3, [r2, #8]
 8014eca:	da07      	bge.n	8014edc <__sfputc_r+0x1c>
 8014ecc:	6994      	ldr	r4, [r2, #24]
 8014ece:	42a3      	cmp	r3, r4
 8014ed0:	db01      	blt.n	8014ed6 <__sfputc_r+0x16>
 8014ed2:	290a      	cmp	r1, #10
 8014ed4:	d102      	bne.n	8014edc <__sfputc_r+0x1c>
 8014ed6:	bc10      	pop	{r4}
 8014ed8:	f000 bb34 	b.w	8015544 <__swbuf_r>
 8014edc:	6813      	ldr	r3, [r2, #0]
 8014ede:	1c58      	adds	r0, r3, #1
 8014ee0:	6010      	str	r0, [r2, #0]
 8014ee2:	7019      	strb	r1, [r3, #0]
 8014ee4:	4608      	mov	r0, r1
 8014ee6:	bc10      	pop	{r4}
 8014ee8:	4770      	bx	lr

08014eea <__sfputs_r>:
 8014eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eec:	4606      	mov	r6, r0
 8014eee:	460f      	mov	r7, r1
 8014ef0:	4614      	mov	r4, r2
 8014ef2:	18d5      	adds	r5, r2, r3
 8014ef4:	42ac      	cmp	r4, r5
 8014ef6:	d101      	bne.n	8014efc <__sfputs_r+0x12>
 8014ef8:	2000      	movs	r0, #0
 8014efa:	e007      	b.n	8014f0c <__sfputs_r+0x22>
 8014efc:	463a      	mov	r2, r7
 8014efe:	4630      	mov	r0, r6
 8014f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f04:	f7ff ffdc 	bl	8014ec0 <__sfputc_r>
 8014f08:	1c43      	adds	r3, r0, #1
 8014f0a:	d1f3      	bne.n	8014ef4 <__sfputs_r+0xa>
 8014f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014f10 <_vfiprintf_r>:
 8014f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f14:	460d      	mov	r5, r1
 8014f16:	4614      	mov	r4, r2
 8014f18:	4698      	mov	r8, r3
 8014f1a:	4606      	mov	r6, r0
 8014f1c:	b09d      	sub	sp, #116	; 0x74
 8014f1e:	b118      	cbz	r0, 8014f28 <_vfiprintf_r+0x18>
 8014f20:	6983      	ldr	r3, [r0, #24]
 8014f22:	b90b      	cbnz	r3, 8014f28 <_vfiprintf_r+0x18>
 8014f24:	f7ff fed2 	bl	8014ccc <__sinit>
 8014f28:	4b89      	ldr	r3, [pc, #548]	; (8015150 <_vfiprintf_r+0x240>)
 8014f2a:	429d      	cmp	r5, r3
 8014f2c:	d11b      	bne.n	8014f66 <_vfiprintf_r+0x56>
 8014f2e:	6875      	ldr	r5, [r6, #4]
 8014f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f32:	07d9      	lsls	r1, r3, #31
 8014f34:	d405      	bmi.n	8014f42 <_vfiprintf_r+0x32>
 8014f36:	89ab      	ldrh	r3, [r5, #12]
 8014f38:	059a      	lsls	r2, r3, #22
 8014f3a:	d402      	bmi.n	8014f42 <_vfiprintf_r+0x32>
 8014f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f3e:	f7ff ff63 	bl	8014e08 <__retarget_lock_acquire_recursive>
 8014f42:	89ab      	ldrh	r3, [r5, #12]
 8014f44:	071b      	lsls	r3, r3, #28
 8014f46:	d501      	bpl.n	8014f4c <_vfiprintf_r+0x3c>
 8014f48:	692b      	ldr	r3, [r5, #16]
 8014f4a:	b9eb      	cbnz	r3, 8014f88 <_vfiprintf_r+0x78>
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	4630      	mov	r0, r6
 8014f50:	f000 fb5c 	bl	801560c <__swsetup_r>
 8014f54:	b1c0      	cbz	r0, 8014f88 <_vfiprintf_r+0x78>
 8014f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f58:	07dc      	lsls	r4, r3, #31
 8014f5a:	d50e      	bpl.n	8014f7a <_vfiprintf_r+0x6a>
 8014f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f60:	b01d      	add	sp, #116	; 0x74
 8014f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f66:	4b7b      	ldr	r3, [pc, #492]	; (8015154 <_vfiprintf_r+0x244>)
 8014f68:	429d      	cmp	r5, r3
 8014f6a:	d101      	bne.n	8014f70 <_vfiprintf_r+0x60>
 8014f6c:	68b5      	ldr	r5, [r6, #8]
 8014f6e:	e7df      	b.n	8014f30 <_vfiprintf_r+0x20>
 8014f70:	4b79      	ldr	r3, [pc, #484]	; (8015158 <_vfiprintf_r+0x248>)
 8014f72:	429d      	cmp	r5, r3
 8014f74:	bf08      	it	eq
 8014f76:	68f5      	ldreq	r5, [r6, #12]
 8014f78:	e7da      	b.n	8014f30 <_vfiprintf_r+0x20>
 8014f7a:	89ab      	ldrh	r3, [r5, #12]
 8014f7c:	0598      	lsls	r0, r3, #22
 8014f7e:	d4ed      	bmi.n	8014f5c <_vfiprintf_r+0x4c>
 8014f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f82:	f7ff ff42 	bl	8014e0a <__retarget_lock_release_recursive>
 8014f86:	e7e9      	b.n	8014f5c <_vfiprintf_r+0x4c>
 8014f88:	2300      	movs	r3, #0
 8014f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8014f8c:	2320      	movs	r3, #32
 8014f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014f92:	2330      	movs	r3, #48	; 0x30
 8014f94:	f04f 0901 	mov.w	r9, #1
 8014f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801515c <_vfiprintf_r+0x24c>
 8014fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fa4:	4623      	mov	r3, r4
 8014fa6:	469a      	mov	sl, r3
 8014fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fac:	b10a      	cbz	r2, 8014fb2 <_vfiprintf_r+0xa2>
 8014fae:	2a25      	cmp	r2, #37	; 0x25
 8014fb0:	d1f9      	bne.n	8014fa6 <_vfiprintf_r+0x96>
 8014fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8014fb6:	d00b      	beq.n	8014fd0 <_vfiprintf_r+0xc0>
 8014fb8:	465b      	mov	r3, fp
 8014fba:	4622      	mov	r2, r4
 8014fbc:	4629      	mov	r1, r5
 8014fbe:	4630      	mov	r0, r6
 8014fc0:	f7ff ff93 	bl	8014eea <__sfputs_r>
 8014fc4:	3001      	adds	r0, #1
 8014fc6:	f000 80aa 	beq.w	801511e <_vfiprintf_r+0x20e>
 8014fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fcc:	445a      	add	r2, fp
 8014fce:	9209      	str	r2, [sp, #36]	; 0x24
 8014fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	f000 80a2 	beq.w	801511e <_vfiprintf_r+0x20e>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8014fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014fe4:	f10a 0a01 	add.w	sl, sl, #1
 8014fe8:	9304      	str	r3, [sp, #16]
 8014fea:	9307      	str	r3, [sp, #28]
 8014fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8014ff2:	4654      	mov	r4, sl
 8014ff4:	2205      	movs	r2, #5
 8014ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ffa:	4858      	ldr	r0, [pc, #352]	; (801515c <_vfiprintf_r+0x24c>)
 8014ffc:	f000 fcbc 	bl	8015978 <memchr>
 8015000:	9a04      	ldr	r2, [sp, #16]
 8015002:	b9d8      	cbnz	r0, 801503c <_vfiprintf_r+0x12c>
 8015004:	06d1      	lsls	r1, r2, #27
 8015006:	bf44      	itt	mi
 8015008:	2320      	movmi	r3, #32
 801500a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801500e:	0713      	lsls	r3, r2, #28
 8015010:	bf44      	itt	mi
 8015012:	232b      	movmi	r3, #43	; 0x2b
 8015014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015018:	f89a 3000 	ldrb.w	r3, [sl]
 801501c:	2b2a      	cmp	r3, #42	; 0x2a
 801501e:	d015      	beq.n	801504c <_vfiprintf_r+0x13c>
 8015020:	4654      	mov	r4, sl
 8015022:	2000      	movs	r0, #0
 8015024:	f04f 0c0a 	mov.w	ip, #10
 8015028:	9a07      	ldr	r2, [sp, #28]
 801502a:	4621      	mov	r1, r4
 801502c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015030:	3b30      	subs	r3, #48	; 0x30
 8015032:	2b09      	cmp	r3, #9
 8015034:	d94e      	bls.n	80150d4 <_vfiprintf_r+0x1c4>
 8015036:	b1b0      	cbz	r0, 8015066 <_vfiprintf_r+0x156>
 8015038:	9207      	str	r2, [sp, #28]
 801503a:	e014      	b.n	8015066 <_vfiprintf_r+0x156>
 801503c:	eba0 0308 	sub.w	r3, r0, r8
 8015040:	fa09 f303 	lsl.w	r3, r9, r3
 8015044:	4313      	orrs	r3, r2
 8015046:	46a2      	mov	sl, r4
 8015048:	9304      	str	r3, [sp, #16]
 801504a:	e7d2      	b.n	8014ff2 <_vfiprintf_r+0xe2>
 801504c:	9b03      	ldr	r3, [sp, #12]
 801504e:	1d19      	adds	r1, r3, #4
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	9103      	str	r1, [sp, #12]
 8015054:	2b00      	cmp	r3, #0
 8015056:	bfbb      	ittet	lt
 8015058:	425b      	neglt	r3, r3
 801505a:	f042 0202 	orrlt.w	r2, r2, #2
 801505e:	9307      	strge	r3, [sp, #28]
 8015060:	9307      	strlt	r3, [sp, #28]
 8015062:	bfb8      	it	lt
 8015064:	9204      	strlt	r2, [sp, #16]
 8015066:	7823      	ldrb	r3, [r4, #0]
 8015068:	2b2e      	cmp	r3, #46	; 0x2e
 801506a:	d10c      	bne.n	8015086 <_vfiprintf_r+0x176>
 801506c:	7863      	ldrb	r3, [r4, #1]
 801506e:	2b2a      	cmp	r3, #42	; 0x2a
 8015070:	d135      	bne.n	80150de <_vfiprintf_r+0x1ce>
 8015072:	9b03      	ldr	r3, [sp, #12]
 8015074:	3402      	adds	r4, #2
 8015076:	1d1a      	adds	r2, r3, #4
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	9203      	str	r2, [sp, #12]
 801507c:	2b00      	cmp	r3, #0
 801507e:	bfb8      	it	lt
 8015080:	f04f 33ff 	movlt.w	r3, #4294967295
 8015084:	9305      	str	r3, [sp, #20]
 8015086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801516c <_vfiprintf_r+0x25c>
 801508a:	2203      	movs	r2, #3
 801508c:	4650      	mov	r0, sl
 801508e:	7821      	ldrb	r1, [r4, #0]
 8015090:	f000 fc72 	bl	8015978 <memchr>
 8015094:	b140      	cbz	r0, 80150a8 <_vfiprintf_r+0x198>
 8015096:	2340      	movs	r3, #64	; 0x40
 8015098:	eba0 000a 	sub.w	r0, r0, sl
 801509c:	fa03 f000 	lsl.w	r0, r3, r0
 80150a0:	9b04      	ldr	r3, [sp, #16]
 80150a2:	3401      	adds	r4, #1
 80150a4:	4303      	orrs	r3, r0
 80150a6:	9304      	str	r3, [sp, #16]
 80150a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150ac:	2206      	movs	r2, #6
 80150ae:	482c      	ldr	r0, [pc, #176]	; (8015160 <_vfiprintf_r+0x250>)
 80150b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150b4:	f000 fc60 	bl	8015978 <memchr>
 80150b8:	2800      	cmp	r0, #0
 80150ba:	d03f      	beq.n	801513c <_vfiprintf_r+0x22c>
 80150bc:	4b29      	ldr	r3, [pc, #164]	; (8015164 <_vfiprintf_r+0x254>)
 80150be:	bb1b      	cbnz	r3, 8015108 <_vfiprintf_r+0x1f8>
 80150c0:	9b03      	ldr	r3, [sp, #12]
 80150c2:	3307      	adds	r3, #7
 80150c4:	f023 0307 	bic.w	r3, r3, #7
 80150c8:	3308      	adds	r3, #8
 80150ca:	9303      	str	r3, [sp, #12]
 80150cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150ce:	443b      	add	r3, r7
 80150d0:	9309      	str	r3, [sp, #36]	; 0x24
 80150d2:	e767      	b.n	8014fa4 <_vfiprintf_r+0x94>
 80150d4:	460c      	mov	r4, r1
 80150d6:	2001      	movs	r0, #1
 80150d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80150dc:	e7a5      	b.n	801502a <_vfiprintf_r+0x11a>
 80150de:	2300      	movs	r3, #0
 80150e0:	f04f 0c0a 	mov.w	ip, #10
 80150e4:	4619      	mov	r1, r3
 80150e6:	3401      	adds	r4, #1
 80150e8:	9305      	str	r3, [sp, #20]
 80150ea:	4620      	mov	r0, r4
 80150ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150f0:	3a30      	subs	r2, #48	; 0x30
 80150f2:	2a09      	cmp	r2, #9
 80150f4:	d903      	bls.n	80150fe <_vfiprintf_r+0x1ee>
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d0c5      	beq.n	8015086 <_vfiprintf_r+0x176>
 80150fa:	9105      	str	r1, [sp, #20]
 80150fc:	e7c3      	b.n	8015086 <_vfiprintf_r+0x176>
 80150fe:	4604      	mov	r4, r0
 8015100:	2301      	movs	r3, #1
 8015102:	fb0c 2101 	mla	r1, ip, r1, r2
 8015106:	e7f0      	b.n	80150ea <_vfiprintf_r+0x1da>
 8015108:	ab03      	add	r3, sp, #12
 801510a:	9300      	str	r3, [sp, #0]
 801510c:	462a      	mov	r2, r5
 801510e:	4630      	mov	r0, r6
 8015110:	4b15      	ldr	r3, [pc, #84]	; (8015168 <_vfiprintf_r+0x258>)
 8015112:	a904      	add	r1, sp, #16
 8015114:	f3af 8000 	nop.w
 8015118:	4607      	mov	r7, r0
 801511a:	1c78      	adds	r0, r7, #1
 801511c:	d1d6      	bne.n	80150cc <_vfiprintf_r+0x1bc>
 801511e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015120:	07d9      	lsls	r1, r3, #31
 8015122:	d405      	bmi.n	8015130 <_vfiprintf_r+0x220>
 8015124:	89ab      	ldrh	r3, [r5, #12]
 8015126:	059a      	lsls	r2, r3, #22
 8015128:	d402      	bmi.n	8015130 <_vfiprintf_r+0x220>
 801512a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801512c:	f7ff fe6d 	bl	8014e0a <__retarget_lock_release_recursive>
 8015130:	89ab      	ldrh	r3, [r5, #12]
 8015132:	065b      	lsls	r3, r3, #25
 8015134:	f53f af12 	bmi.w	8014f5c <_vfiprintf_r+0x4c>
 8015138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801513a:	e711      	b.n	8014f60 <_vfiprintf_r+0x50>
 801513c:	ab03      	add	r3, sp, #12
 801513e:	9300      	str	r3, [sp, #0]
 8015140:	462a      	mov	r2, r5
 8015142:	4630      	mov	r0, r6
 8015144:	4b08      	ldr	r3, [pc, #32]	; (8015168 <_vfiprintf_r+0x258>)
 8015146:	a904      	add	r1, sp, #16
 8015148:	f000 f882 	bl	8015250 <_printf_i>
 801514c:	e7e4      	b.n	8015118 <_vfiprintf_r+0x208>
 801514e:	bf00      	nop
 8015150:	080187a4 	.word	0x080187a4
 8015154:	080187c4 	.word	0x080187c4
 8015158:	08018784 	.word	0x08018784
 801515c:	080187e4 	.word	0x080187e4
 8015160:	080187ee 	.word	0x080187ee
 8015164:	00000000 	.word	0x00000000
 8015168:	08014eeb 	.word	0x08014eeb
 801516c:	080187ea 	.word	0x080187ea

08015170 <_printf_common>:
 8015170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015174:	4616      	mov	r6, r2
 8015176:	4699      	mov	r9, r3
 8015178:	688a      	ldr	r2, [r1, #8]
 801517a:	690b      	ldr	r3, [r1, #16]
 801517c:	4607      	mov	r7, r0
 801517e:	4293      	cmp	r3, r2
 8015180:	bfb8      	it	lt
 8015182:	4613      	movlt	r3, r2
 8015184:	6033      	str	r3, [r6, #0]
 8015186:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801518a:	460c      	mov	r4, r1
 801518c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015190:	b10a      	cbz	r2, 8015196 <_printf_common+0x26>
 8015192:	3301      	adds	r3, #1
 8015194:	6033      	str	r3, [r6, #0]
 8015196:	6823      	ldr	r3, [r4, #0]
 8015198:	0699      	lsls	r1, r3, #26
 801519a:	bf42      	ittt	mi
 801519c:	6833      	ldrmi	r3, [r6, #0]
 801519e:	3302      	addmi	r3, #2
 80151a0:	6033      	strmi	r3, [r6, #0]
 80151a2:	6825      	ldr	r5, [r4, #0]
 80151a4:	f015 0506 	ands.w	r5, r5, #6
 80151a8:	d106      	bne.n	80151b8 <_printf_common+0x48>
 80151aa:	f104 0a19 	add.w	sl, r4, #25
 80151ae:	68e3      	ldr	r3, [r4, #12]
 80151b0:	6832      	ldr	r2, [r6, #0]
 80151b2:	1a9b      	subs	r3, r3, r2
 80151b4:	42ab      	cmp	r3, r5
 80151b6:	dc28      	bgt.n	801520a <_printf_common+0x9a>
 80151b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80151bc:	1e13      	subs	r3, r2, #0
 80151be:	6822      	ldr	r2, [r4, #0]
 80151c0:	bf18      	it	ne
 80151c2:	2301      	movne	r3, #1
 80151c4:	0692      	lsls	r2, r2, #26
 80151c6:	d42d      	bmi.n	8015224 <_printf_common+0xb4>
 80151c8:	4649      	mov	r1, r9
 80151ca:	4638      	mov	r0, r7
 80151cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80151d0:	47c0      	blx	r8
 80151d2:	3001      	adds	r0, #1
 80151d4:	d020      	beq.n	8015218 <_printf_common+0xa8>
 80151d6:	6823      	ldr	r3, [r4, #0]
 80151d8:	68e5      	ldr	r5, [r4, #12]
 80151da:	f003 0306 	and.w	r3, r3, #6
 80151de:	2b04      	cmp	r3, #4
 80151e0:	bf18      	it	ne
 80151e2:	2500      	movne	r5, #0
 80151e4:	6832      	ldr	r2, [r6, #0]
 80151e6:	f04f 0600 	mov.w	r6, #0
 80151ea:	68a3      	ldr	r3, [r4, #8]
 80151ec:	bf08      	it	eq
 80151ee:	1aad      	subeq	r5, r5, r2
 80151f0:	6922      	ldr	r2, [r4, #16]
 80151f2:	bf08      	it	eq
 80151f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80151f8:	4293      	cmp	r3, r2
 80151fa:	bfc4      	itt	gt
 80151fc:	1a9b      	subgt	r3, r3, r2
 80151fe:	18ed      	addgt	r5, r5, r3
 8015200:	341a      	adds	r4, #26
 8015202:	42b5      	cmp	r5, r6
 8015204:	d11a      	bne.n	801523c <_printf_common+0xcc>
 8015206:	2000      	movs	r0, #0
 8015208:	e008      	b.n	801521c <_printf_common+0xac>
 801520a:	2301      	movs	r3, #1
 801520c:	4652      	mov	r2, sl
 801520e:	4649      	mov	r1, r9
 8015210:	4638      	mov	r0, r7
 8015212:	47c0      	blx	r8
 8015214:	3001      	adds	r0, #1
 8015216:	d103      	bne.n	8015220 <_printf_common+0xb0>
 8015218:	f04f 30ff 	mov.w	r0, #4294967295
 801521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015220:	3501      	adds	r5, #1
 8015222:	e7c4      	b.n	80151ae <_printf_common+0x3e>
 8015224:	2030      	movs	r0, #48	; 0x30
 8015226:	18e1      	adds	r1, r4, r3
 8015228:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801522c:	1c5a      	adds	r2, r3, #1
 801522e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015232:	4422      	add	r2, r4
 8015234:	3302      	adds	r3, #2
 8015236:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801523a:	e7c5      	b.n	80151c8 <_printf_common+0x58>
 801523c:	2301      	movs	r3, #1
 801523e:	4622      	mov	r2, r4
 8015240:	4649      	mov	r1, r9
 8015242:	4638      	mov	r0, r7
 8015244:	47c0      	blx	r8
 8015246:	3001      	adds	r0, #1
 8015248:	d0e6      	beq.n	8015218 <_printf_common+0xa8>
 801524a:	3601      	adds	r6, #1
 801524c:	e7d9      	b.n	8015202 <_printf_common+0x92>
	...

08015250 <_printf_i>:
 8015250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015254:	460c      	mov	r4, r1
 8015256:	7e27      	ldrb	r7, [r4, #24]
 8015258:	4691      	mov	r9, r2
 801525a:	2f78      	cmp	r7, #120	; 0x78
 801525c:	4680      	mov	r8, r0
 801525e:	469a      	mov	sl, r3
 8015260:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015266:	d807      	bhi.n	8015278 <_printf_i+0x28>
 8015268:	2f62      	cmp	r7, #98	; 0x62
 801526a:	d80a      	bhi.n	8015282 <_printf_i+0x32>
 801526c:	2f00      	cmp	r7, #0
 801526e:	f000 80d9 	beq.w	8015424 <_printf_i+0x1d4>
 8015272:	2f58      	cmp	r7, #88	; 0x58
 8015274:	f000 80a4 	beq.w	80153c0 <_printf_i+0x170>
 8015278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801527c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015280:	e03a      	b.n	80152f8 <_printf_i+0xa8>
 8015282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015286:	2b15      	cmp	r3, #21
 8015288:	d8f6      	bhi.n	8015278 <_printf_i+0x28>
 801528a:	a001      	add	r0, pc, #4	; (adr r0, 8015290 <_printf_i+0x40>)
 801528c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015290:	080152e9 	.word	0x080152e9
 8015294:	080152fd 	.word	0x080152fd
 8015298:	08015279 	.word	0x08015279
 801529c:	08015279 	.word	0x08015279
 80152a0:	08015279 	.word	0x08015279
 80152a4:	08015279 	.word	0x08015279
 80152a8:	080152fd 	.word	0x080152fd
 80152ac:	08015279 	.word	0x08015279
 80152b0:	08015279 	.word	0x08015279
 80152b4:	08015279 	.word	0x08015279
 80152b8:	08015279 	.word	0x08015279
 80152bc:	0801540b 	.word	0x0801540b
 80152c0:	0801532d 	.word	0x0801532d
 80152c4:	080153ed 	.word	0x080153ed
 80152c8:	08015279 	.word	0x08015279
 80152cc:	08015279 	.word	0x08015279
 80152d0:	0801542d 	.word	0x0801542d
 80152d4:	08015279 	.word	0x08015279
 80152d8:	0801532d 	.word	0x0801532d
 80152dc:	08015279 	.word	0x08015279
 80152e0:	08015279 	.word	0x08015279
 80152e4:	080153f5 	.word	0x080153f5
 80152e8:	680b      	ldr	r3, [r1, #0]
 80152ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80152ee:	1d1a      	adds	r2, r3, #4
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	600a      	str	r2, [r1, #0]
 80152f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80152f8:	2301      	movs	r3, #1
 80152fa:	e0a4      	b.n	8015446 <_printf_i+0x1f6>
 80152fc:	6825      	ldr	r5, [r4, #0]
 80152fe:	6808      	ldr	r0, [r1, #0]
 8015300:	062e      	lsls	r6, r5, #24
 8015302:	f100 0304 	add.w	r3, r0, #4
 8015306:	d50a      	bpl.n	801531e <_printf_i+0xce>
 8015308:	6805      	ldr	r5, [r0, #0]
 801530a:	600b      	str	r3, [r1, #0]
 801530c:	2d00      	cmp	r5, #0
 801530e:	da03      	bge.n	8015318 <_printf_i+0xc8>
 8015310:	232d      	movs	r3, #45	; 0x2d
 8015312:	426d      	negs	r5, r5
 8015314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015318:	230a      	movs	r3, #10
 801531a:	485e      	ldr	r0, [pc, #376]	; (8015494 <_printf_i+0x244>)
 801531c:	e019      	b.n	8015352 <_printf_i+0x102>
 801531e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015322:	6805      	ldr	r5, [r0, #0]
 8015324:	600b      	str	r3, [r1, #0]
 8015326:	bf18      	it	ne
 8015328:	b22d      	sxthne	r5, r5
 801532a:	e7ef      	b.n	801530c <_printf_i+0xbc>
 801532c:	680b      	ldr	r3, [r1, #0]
 801532e:	6825      	ldr	r5, [r4, #0]
 8015330:	1d18      	adds	r0, r3, #4
 8015332:	6008      	str	r0, [r1, #0]
 8015334:	0628      	lsls	r0, r5, #24
 8015336:	d501      	bpl.n	801533c <_printf_i+0xec>
 8015338:	681d      	ldr	r5, [r3, #0]
 801533a:	e002      	b.n	8015342 <_printf_i+0xf2>
 801533c:	0669      	lsls	r1, r5, #25
 801533e:	d5fb      	bpl.n	8015338 <_printf_i+0xe8>
 8015340:	881d      	ldrh	r5, [r3, #0]
 8015342:	2f6f      	cmp	r7, #111	; 0x6f
 8015344:	bf0c      	ite	eq
 8015346:	2308      	moveq	r3, #8
 8015348:	230a      	movne	r3, #10
 801534a:	4852      	ldr	r0, [pc, #328]	; (8015494 <_printf_i+0x244>)
 801534c:	2100      	movs	r1, #0
 801534e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015352:	6866      	ldr	r6, [r4, #4]
 8015354:	2e00      	cmp	r6, #0
 8015356:	bfa8      	it	ge
 8015358:	6821      	ldrge	r1, [r4, #0]
 801535a:	60a6      	str	r6, [r4, #8]
 801535c:	bfa4      	itt	ge
 801535e:	f021 0104 	bicge.w	r1, r1, #4
 8015362:	6021      	strge	r1, [r4, #0]
 8015364:	b90d      	cbnz	r5, 801536a <_printf_i+0x11a>
 8015366:	2e00      	cmp	r6, #0
 8015368:	d04d      	beq.n	8015406 <_printf_i+0x1b6>
 801536a:	4616      	mov	r6, r2
 801536c:	fbb5 f1f3 	udiv	r1, r5, r3
 8015370:	fb03 5711 	mls	r7, r3, r1, r5
 8015374:	5dc7      	ldrb	r7, [r0, r7]
 8015376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801537a:	462f      	mov	r7, r5
 801537c:	42bb      	cmp	r3, r7
 801537e:	460d      	mov	r5, r1
 8015380:	d9f4      	bls.n	801536c <_printf_i+0x11c>
 8015382:	2b08      	cmp	r3, #8
 8015384:	d10b      	bne.n	801539e <_printf_i+0x14e>
 8015386:	6823      	ldr	r3, [r4, #0]
 8015388:	07df      	lsls	r7, r3, #31
 801538a:	d508      	bpl.n	801539e <_printf_i+0x14e>
 801538c:	6923      	ldr	r3, [r4, #16]
 801538e:	6861      	ldr	r1, [r4, #4]
 8015390:	4299      	cmp	r1, r3
 8015392:	bfde      	ittt	le
 8015394:	2330      	movle	r3, #48	; 0x30
 8015396:	f806 3c01 	strble.w	r3, [r6, #-1]
 801539a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801539e:	1b92      	subs	r2, r2, r6
 80153a0:	6122      	str	r2, [r4, #16]
 80153a2:	464b      	mov	r3, r9
 80153a4:	4621      	mov	r1, r4
 80153a6:	4640      	mov	r0, r8
 80153a8:	f8cd a000 	str.w	sl, [sp]
 80153ac:	aa03      	add	r2, sp, #12
 80153ae:	f7ff fedf 	bl	8015170 <_printf_common>
 80153b2:	3001      	adds	r0, #1
 80153b4:	d14c      	bne.n	8015450 <_printf_i+0x200>
 80153b6:	f04f 30ff 	mov.w	r0, #4294967295
 80153ba:	b004      	add	sp, #16
 80153bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153c0:	4834      	ldr	r0, [pc, #208]	; (8015494 <_printf_i+0x244>)
 80153c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80153c6:	680e      	ldr	r6, [r1, #0]
 80153c8:	6823      	ldr	r3, [r4, #0]
 80153ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80153ce:	061f      	lsls	r7, r3, #24
 80153d0:	600e      	str	r6, [r1, #0]
 80153d2:	d514      	bpl.n	80153fe <_printf_i+0x1ae>
 80153d4:	07d9      	lsls	r1, r3, #31
 80153d6:	bf44      	itt	mi
 80153d8:	f043 0320 	orrmi.w	r3, r3, #32
 80153dc:	6023      	strmi	r3, [r4, #0]
 80153de:	b91d      	cbnz	r5, 80153e8 <_printf_i+0x198>
 80153e0:	6823      	ldr	r3, [r4, #0]
 80153e2:	f023 0320 	bic.w	r3, r3, #32
 80153e6:	6023      	str	r3, [r4, #0]
 80153e8:	2310      	movs	r3, #16
 80153ea:	e7af      	b.n	801534c <_printf_i+0xfc>
 80153ec:	6823      	ldr	r3, [r4, #0]
 80153ee:	f043 0320 	orr.w	r3, r3, #32
 80153f2:	6023      	str	r3, [r4, #0]
 80153f4:	2378      	movs	r3, #120	; 0x78
 80153f6:	4828      	ldr	r0, [pc, #160]	; (8015498 <_printf_i+0x248>)
 80153f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80153fc:	e7e3      	b.n	80153c6 <_printf_i+0x176>
 80153fe:	065e      	lsls	r6, r3, #25
 8015400:	bf48      	it	mi
 8015402:	b2ad      	uxthmi	r5, r5
 8015404:	e7e6      	b.n	80153d4 <_printf_i+0x184>
 8015406:	4616      	mov	r6, r2
 8015408:	e7bb      	b.n	8015382 <_printf_i+0x132>
 801540a:	680b      	ldr	r3, [r1, #0]
 801540c:	6826      	ldr	r6, [r4, #0]
 801540e:	1d1d      	adds	r5, r3, #4
 8015410:	6960      	ldr	r0, [r4, #20]
 8015412:	600d      	str	r5, [r1, #0]
 8015414:	0635      	lsls	r5, r6, #24
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	d501      	bpl.n	801541e <_printf_i+0x1ce>
 801541a:	6018      	str	r0, [r3, #0]
 801541c:	e002      	b.n	8015424 <_printf_i+0x1d4>
 801541e:	0671      	lsls	r1, r6, #25
 8015420:	d5fb      	bpl.n	801541a <_printf_i+0x1ca>
 8015422:	8018      	strh	r0, [r3, #0]
 8015424:	2300      	movs	r3, #0
 8015426:	4616      	mov	r6, r2
 8015428:	6123      	str	r3, [r4, #16]
 801542a:	e7ba      	b.n	80153a2 <_printf_i+0x152>
 801542c:	680b      	ldr	r3, [r1, #0]
 801542e:	1d1a      	adds	r2, r3, #4
 8015430:	600a      	str	r2, [r1, #0]
 8015432:	681e      	ldr	r6, [r3, #0]
 8015434:	2100      	movs	r1, #0
 8015436:	4630      	mov	r0, r6
 8015438:	6862      	ldr	r2, [r4, #4]
 801543a:	f000 fa9d 	bl	8015978 <memchr>
 801543e:	b108      	cbz	r0, 8015444 <_printf_i+0x1f4>
 8015440:	1b80      	subs	r0, r0, r6
 8015442:	6060      	str	r0, [r4, #4]
 8015444:	6863      	ldr	r3, [r4, #4]
 8015446:	6123      	str	r3, [r4, #16]
 8015448:	2300      	movs	r3, #0
 801544a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801544e:	e7a8      	b.n	80153a2 <_printf_i+0x152>
 8015450:	4632      	mov	r2, r6
 8015452:	4649      	mov	r1, r9
 8015454:	4640      	mov	r0, r8
 8015456:	6923      	ldr	r3, [r4, #16]
 8015458:	47d0      	blx	sl
 801545a:	3001      	adds	r0, #1
 801545c:	d0ab      	beq.n	80153b6 <_printf_i+0x166>
 801545e:	6823      	ldr	r3, [r4, #0]
 8015460:	079b      	lsls	r3, r3, #30
 8015462:	d413      	bmi.n	801548c <_printf_i+0x23c>
 8015464:	68e0      	ldr	r0, [r4, #12]
 8015466:	9b03      	ldr	r3, [sp, #12]
 8015468:	4298      	cmp	r0, r3
 801546a:	bfb8      	it	lt
 801546c:	4618      	movlt	r0, r3
 801546e:	e7a4      	b.n	80153ba <_printf_i+0x16a>
 8015470:	2301      	movs	r3, #1
 8015472:	4632      	mov	r2, r6
 8015474:	4649      	mov	r1, r9
 8015476:	4640      	mov	r0, r8
 8015478:	47d0      	blx	sl
 801547a:	3001      	adds	r0, #1
 801547c:	d09b      	beq.n	80153b6 <_printf_i+0x166>
 801547e:	3501      	adds	r5, #1
 8015480:	68e3      	ldr	r3, [r4, #12]
 8015482:	9903      	ldr	r1, [sp, #12]
 8015484:	1a5b      	subs	r3, r3, r1
 8015486:	42ab      	cmp	r3, r5
 8015488:	dcf2      	bgt.n	8015470 <_printf_i+0x220>
 801548a:	e7eb      	b.n	8015464 <_printf_i+0x214>
 801548c:	2500      	movs	r5, #0
 801548e:	f104 0619 	add.w	r6, r4, #25
 8015492:	e7f5      	b.n	8015480 <_printf_i+0x230>
 8015494:	080187f5 	.word	0x080187f5
 8015498:	08018806 	.word	0x08018806

0801549c <_sbrk_r>:
 801549c:	b538      	push	{r3, r4, r5, lr}
 801549e:	2300      	movs	r3, #0
 80154a0:	4d05      	ldr	r5, [pc, #20]	; (80154b8 <_sbrk_r+0x1c>)
 80154a2:	4604      	mov	r4, r0
 80154a4:	4608      	mov	r0, r1
 80154a6:	602b      	str	r3, [r5, #0]
 80154a8:	f7eb fd46 	bl	8000f38 <_sbrk>
 80154ac:	1c43      	adds	r3, r0, #1
 80154ae:	d102      	bne.n	80154b6 <_sbrk_r+0x1a>
 80154b0:	682b      	ldr	r3, [r5, #0]
 80154b2:	b103      	cbz	r3, 80154b6 <_sbrk_r+0x1a>
 80154b4:	6023      	str	r3, [r4, #0]
 80154b6:	bd38      	pop	{r3, r4, r5, pc}
 80154b8:	2000bb80 	.word	0x2000bb80

080154bc <__sread>:
 80154bc:	b510      	push	{r4, lr}
 80154be:	460c      	mov	r4, r1
 80154c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154c4:	f000 fabe 	bl	8015a44 <_read_r>
 80154c8:	2800      	cmp	r0, #0
 80154ca:	bfab      	itete	ge
 80154cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80154ce:	89a3      	ldrhlt	r3, [r4, #12]
 80154d0:	181b      	addge	r3, r3, r0
 80154d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80154d6:	bfac      	ite	ge
 80154d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80154da:	81a3      	strhlt	r3, [r4, #12]
 80154dc:	bd10      	pop	{r4, pc}

080154de <__swrite>:
 80154de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154e2:	461f      	mov	r7, r3
 80154e4:	898b      	ldrh	r3, [r1, #12]
 80154e6:	4605      	mov	r5, r0
 80154e8:	05db      	lsls	r3, r3, #23
 80154ea:	460c      	mov	r4, r1
 80154ec:	4616      	mov	r6, r2
 80154ee:	d505      	bpl.n	80154fc <__swrite+0x1e>
 80154f0:	2302      	movs	r3, #2
 80154f2:	2200      	movs	r2, #0
 80154f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154f8:	f000 f9c8 	bl	801588c <_lseek_r>
 80154fc:	89a3      	ldrh	r3, [r4, #12]
 80154fe:	4632      	mov	r2, r6
 8015500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015504:	81a3      	strh	r3, [r4, #12]
 8015506:	4628      	mov	r0, r5
 8015508:	463b      	mov	r3, r7
 801550a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801550e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015512:	f000 b869 	b.w	80155e8 <_write_r>

08015516 <__sseek>:
 8015516:	b510      	push	{r4, lr}
 8015518:	460c      	mov	r4, r1
 801551a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801551e:	f000 f9b5 	bl	801588c <_lseek_r>
 8015522:	1c43      	adds	r3, r0, #1
 8015524:	89a3      	ldrh	r3, [r4, #12]
 8015526:	bf15      	itete	ne
 8015528:	6560      	strne	r0, [r4, #84]	; 0x54
 801552a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801552e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015532:	81a3      	strheq	r3, [r4, #12]
 8015534:	bf18      	it	ne
 8015536:	81a3      	strhne	r3, [r4, #12]
 8015538:	bd10      	pop	{r4, pc}

0801553a <__sclose>:
 801553a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801553e:	f000 b8d3 	b.w	80156e8 <_close_r>
	...

08015544 <__swbuf_r>:
 8015544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015546:	460e      	mov	r6, r1
 8015548:	4614      	mov	r4, r2
 801554a:	4605      	mov	r5, r0
 801554c:	b118      	cbz	r0, 8015556 <__swbuf_r+0x12>
 801554e:	6983      	ldr	r3, [r0, #24]
 8015550:	b90b      	cbnz	r3, 8015556 <__swbuf_r+0x12>
 8015552:	f7ff fbbb 	bl	8014ccc <__sinit>
 8015556:	4b21      	ldr	r3, [pc, #132]	; (80155dc <__swbuf_r+0x98>)
 8015558:	429c      	cmp	r4, r3
 801555a:	d12b      	bne.n	80155b4 <__swbuf_r+0x70>
 801555c:	686c      	ldr	r4, [r5, #4]
 801555e:	69a3      	ldr	r3, [r4, #24]
 8015560:	60a3      	str	r3, [r4, #8]
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	071a      	lsls	r2, r3, #28
 8015566:	d52f      	bpl.n	80155c8 <__swbuf_r+0x84>
 8015568:	6923      	ldr	r3, [r4, #16]
 801556a:	b36b      	cbz	r3, 80155c8 <__swbuf_r+0x84>
 801556c:	6923      	ldr	r3, [r4, #16]
 801556e:	6820      	ldr	r0, [r4, #0]
 8015570:	b2f6      	uxtb	r6, r6
 8015572:	1ac0      	subs	r0, r0, r3
 8015574:	6963      	ldr	r3, [r4, #20]
 8015576:	4637      	mov	r7, r6
 8015578:	4283      	cmp	r3, r0
 801557a:	dc04      	bgt.n	8015586 <__swbuf_r+0x42>
 801557c:	4621      	mov	r1, r4
 801557e:	4628      	mov	r0, r5
 8015580:	f000 f948 	bl	8015814 <_fflush_r>
 8015584:	bb30      	cbnz	r0, 80155d4 <__swbuf_r+0x90>
 8015586:	68a3      	ldr	r3, [r4, #8]
 8015588:	3001      	adds	r0, #1
 801558a:	3b01      	subs	r3, #1
 801558c:	60a3      	str	r3, [r4, #8]
 801558e:	6823      	ldr	r3, [r4, #0]
 8015590:	1c5a      	adds	r2, r3, #1
 8015592:	6022      	str	r2, [r4, #0]
 8015594:	701e      	strb	r6, [r3, #0]
 8015596:	6963      	ldr	r3, [r4, #20]
 8015598:	4283      	cmp	r3, r0
 801559a:	d004      	beq.n	80155a6 <__swbuf_r+0x62>
 801559c:	89a3      	ldrh	r3, [r4, #12]
 801559e:	07db      	lsls	r3, r3, #31
 80155a0:	d506      	bpl.n	80155b0 <__swbuf_r+0x6c>
 80155a2:	2e0a      	cmp	r6, #10
 80155a4:	d104      	bne.n	80155b0 <__swbuf_r+0x6c>
 80155a6:	4621      	mov	r1, r4
 80155a8:	4628      	mov	r0, r5
 80155aa:	f000 f933 	bl	8015814 <_fflush_r>
 80155ae:	b988      	cbnz	r0, 80155d4 <__swbuf_r+0x90>
 80155b0:	4638      	mov	r0, r7
 80155b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155b4:	4b0a      	ldr	r3, [pc, #40]	; (80155e0 <__swbuf_r+0x9c>)
 80155b6:	429c      	cmp	r4, r3
 80155b8:	d101      	bne.n	80155be <__swbuf_r+0x7a>
 80155ba:	68ac      	ldr	r4, [r5, #8]
 80155bc:	e7cf      	b.n	801555e <__swbuf_r+0x1a>
 80155be:	4b09      	ldr	r3, [pc, #36]	; (80155e4 <__swbuf_r+0xa0>)
 80155c0:	429c      	cmp	r4, r3
 80155c2:	bf08      	it	eq
 80155c4:	68ec      	ldreq	r4, [r5, #12]
 80155c6:	e7ca      	b.n	801555e <__swbuf_r+0x1a>
 80155c8:	4621      	mov	r1, r4
 80155ca:	4628      	mov	r0, r5
 80155cc:	f000 f81e 	bl	801560c <__swsetup_r>
 80155d0:	2800      	cmp	r0, #0
 80155d2:	d0cb      	beq.n	801556c <__swbuf_r+0x28>
 80155d4:	f04f 37ff 	mov.w	r7, #4294967295
 80155d8:	e7ea      	b.n	80155b0 <__swbuf_r+0x6c>
 80155da:	bf00      	nop
 80155dc:	080187a4 	.word	0x080187a4
 80155e0:	080187c4 	.word	0x080187c4
 80155e4:	08018784 	.word	0x08018784

080155e8 <_write_r>:
 80155e8:	b538      	push	{r3, r4, r5, lr}
 80155ea:	4604      	mov	r4, r0
 80155ec:	4608      	mov	r0, r1
 80155ee:	4611      	mov	r1, r2
 80155f0:	2200      	movs	r2, #0
 80155f2:	4d05      	ldr	r5, [pc, #20]	; (8015608 <_write_r+0x20>)
 80155f4:	602a      	str	r2, [r5, #0]
 80155f6:	461a      	mov	r2, r3
 80155f8:	f7eb fc51 	bl	8000e9e <_write>
 80155fc:	1c43      	adds	r3, r0, #1
 80155fe:	d102      	bne.n	8015606 <_write_r+0x1e>
 8015600:	682b      	ldr	r3, [r5, #0]
 8015602:	b103      	cbz	r3, 8015606 <_write_r+0x1e>
 8015604:	6023      	str	r3, [r4, #0]
 8015606:	bd38      	pop	{r3, r4, r5, pc}
 8015608:	2000bb80 	.word	0x2000bb80

0801560c <__swsetup_r>:
 801560c:	4b32      	ldr	r3, [pc, #200]	; (80156d8 <__swsetup_r+0xcc>)
 801560e:	b570      	push	{r4, r5, r6, lr}
 8015610:	681d      	ldr	r5, [r3, #0]
 8015612:	4606      	mov	r6, r0
 8015614:	460c      	mov	r4, r1
 8015616:	b125      	cbz	r5, 8015622 <__swsetup_r+0x16>
 8015618:	69ab      	ldr	r3, [r5, #24]
 801561a:	b913      	cbnz	r3, 8015622 <__swsetup_r+0x16>
 801561c:	4628      	mov	r0, r5
 801561e:	f7ff fb55 	bl	8014ccc <__sinit>
 8015622:	4b2e      	ldr	r3, [pc, #184]	; (80156dc <__swsetup_r+0xd0>)
 8015624:	429c      	cmp	r4, r3
 8015626:	d10f      	bne.n	8015648 <__swsetup_r+0x3c>
 8015628:	686c      	ldr	r4, [r5, #4]
 801562a:	89a3      	ldrh	r3, [r4, #12]
 801562c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015630:	0719      	lsls	r1, r3, #28
 8015632:	d42c      	bmi.n	801568e <__swsetup_r+0x82>
 8015634:	06dd      	lsls	r5, r3, #27
 8015636:	d411      	bmi.n	801565c <__swsetup_r+0x50>
 8015638:	2309      	movs	r3, #9
 801563a:	6033      	str	r3, [r6, #0]
 801563c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015640:	f04f 30ff 	mov.w	r0, #4294967295
 8015644:	81a3      	strh	r3, [r4, #12]
 8015646:	e03e      	b.n	80156c6 <__swsetup_r+0xba>
 8015648:	4b25      	ldr	r3, [pc, #148]	; (80156e0 <__swsetup_r+0xd4>)
 801564a:	429c      	cmp	r4, r3
 801564c:	d101      	bne.n	8015652 <__swsetup_r+0x46>
 801564e:	68ac      	ldr	r4, [r5, #8]
 8015650:	e7eb      	b.n	801562a <__swsetup_r+0x1e>
 8015652:	4b24      	ldr	r3, [pc, #144]	; (80156e4 <__swsetup_r+0xd8>)
 8015654:	429c      	cmp	r4, r3
 8015656:	bf08      	it	eq
 8015658:	68ec      	ldreq	r4, [r5, #12]
 801565a:	e7e6      	b.n	801562a <__swsetup_r+0x1e>
 801565c:	0758      	lsls	r0, r3, #29
 801565e:	d512      	bpl.n	8015686 <__swsetup_r+0x7a>
 8015660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015662:	b141      	cbz	r1, 8015676 <__swsetup_r+0x6a>
 8015664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015668:	4299      	cmp	r1, r3
 801566a:	d002      	beq.n	8015672 <__swsetup_r+0x66>
 801566c:	4630      	mov	r0, r6
 801566e:	f000 f99d 	bl	80159ac <_free_r>
 8015672:	2300      	movs	r3, #0
 8015674:	6363      	str	r3, [r4, #52]	; 0x34
 8015676:	89a3      	ldrh	r3, [r4, #12]
 8015678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801567c:	81a3      	strh	r3, [r4, #12]
 801567e:	2300      	movs	r3, #0
 8015680:	6063      	str	r3, [r4, #4]
 8015682:	6923      	ldr	r3, [r4, #16]
 8015684:	6023      	str	r3, [r4, #0]
 8015686:	89a3      	ldrh	r3, [r4, #12]
 8015688:	f043 0308 	orr.w	r3, r3, #8
 801568c:	81a3      	strh	r3, [r4, #12]
 801568e:	6923      	ldr	r3, [r4, #16]
 8015690:	b94b      	cbnz	r3, 80156a6 <__swsetup_r+0x9a>
 8015692:	89a3      	ldrh	r3, [r4, #12]
 8015694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801569c:	d003      	beq.n	80156a6 <__swsetup_r+0x9a>
 801569e:	4621      	mov	r1, r4
 80156a0:	4630      	mov	r0, r6
 80156a2:	f000 f929 	bl	80158f8 <__smakebuf_r>
 80156a6:	89a0      	ldrh	r0, [r4, #12]
 80156a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80156ac:	f010 0301 	ands.w	r3, r0, #1
 80156b0:	d00a      	beq.n	80156c8 <__swsetup_r+0xbc>
 80156b2:	2300      	movs	r3, #0
 80156b4:	60a3      	str	r3, [r4, #8]
 80156b6:	6963      	ldr	r3, [r4, #20]
 80156b8:	425b      	negs	r3, r3
 80156ba:	61a3      	str	r3, [r4, #24]
 80156bc:	6923      	ldr	r3, [r4, #16]
 80156be:	b943      	cbnz	r3, 80156d2 <__swsetup_r+0xc6>
 80156c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80156c4:	d1ba      	bne.n	801563c <__swsetup_r+0x30>
 80156c6:	bd70      	pop	{r4, r5, r6, pc}
 80156c8:	0781      	lsls	r1, r0, #30
 80156ca:	bf58      	it	pl
 80156cc:	6963      	ldrpl	r3, [r4, #20]
 80156ce:	60a3      	str	r3, [r4, #8]
 80156d0:	e7f4      	b.n	80156bc <__swsetup_r+0xb0>
 80156d2:	2000      	movs	r0, #0
 80156d4:	e7f7      	b.n	80156c6 <__swsetup_r+0xba>
 80156d6:	bf00      	nop
 80156d8:	20000020 	.word	0x20000020
 80156dc:	080187a4 	.word	0x080187a4
 80156e0:	080187c4 	.word	0x080187c4
 80156e4:	08018784 	.word	0x08018784

080156e8 <_close_r>:
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	2300      	movs	r3, #0
 80156ec:	4d05      	ldr	r5, [pc, #20]	; (8015704 <_close_r+0x1c>)
 80156ee:	4604      	mov	r4, r0
 80156f0:	4608      	mov	r0, r1
 80156f2:	602b      	str	r3, [r5, #0]
 80156f4:	f7eb fbef 	bl	8000ed6 <_close>
 80156f8:	1c43      	adds	r3, r0, #1
 80156fa:	d102      	bne.n	8015702 <_close_r+0x1a>
 80156fc:	682b      	ldr	r3, [r5, #0]
 80156fe:	b103      	cbz	r3, 8015702 <_close_r+0x1a>
 8015700:	6023      	str	r3, [r4, #0]
 8015702:	bd38      	pop	{r3, r4, r5, pc}
 8015704:	2000bb80 	.word	0x2000bb80

08015708 <__sflush_r>:
 8015708:	898a      	ldrh	r2, [r1, #12]
 801570a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801570e:	4605      	mov	r5, r0
 8015710:	0710      	lsls	r0, r2, #28
 8015712:	460c      	mov	r4, r1
 8015714:	d458      	bmi.n	80157c8 <__sflush_r+0xc0>
 8015716:	684b      	ldr	r3, [r1, #4]
 8015718:	2b00      	cmp	r3, #0
 801571a:	dc05      	bgt.n	8015728 <__sflush_r+0x20>
 801571c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801571e:	2b00      	cmp	r3, #0
 8015720:	dc02      	bgt.n	8015728 <__sflush_r+0x20>
 8015722:	2000      	movs	r0, #0
 8015724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801572a:	2e00      	cmp	r6, #0
 801572c:	d0f9      	beq.n	8015722 <__sflush_r+0x1a>
 801572e:	2300      	movs	r3, #0
 8015730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015734:	682f      	ldr	r7, [r5, #0]
 8015736:	602b      	str	r3, [r5, #0]
 8015738:	d032      	beq.n	80157a0 <__sflush_r+0x98>
 801573a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801573c:	89a3      	ldrh	r3, [r4, #12]
 801573e:	075a      	lsls	r2, r3, #29
 8015740:	d505      	bpl.n	801574e <__sflush_r+0x46>
 8015742:	6863      	ldr	r3, [r4, #4]
 8015744:	1ac0      	subs	r0, r0, r3
 8015746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015748:	b10b      	cbz	r3, 801574e <__sflush_r+0x46>
 801574a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801574c:	1ac0      	subs	r0, r0, r3
 801574e:	2300      	movs	r3, #0
 8015750:	4602      	mov	r2, r0
 8015752:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015754:	4628      	mov	r0, r5
 8015756:	6a21      	ldr	r1, [r4, #32]
 8015758:	47b0      	blx	r6
 801575a:	1c43      	adds	r3, r0, #1
 801575c:	89a3      	ldrh	r3, [r4, #12]
 801575e:	d106      	bne.n	801576e <__sflush_r+0x66>
 8015760:	6829      	ldr	r1, [r5, #0]
 8015762:	291d      	cmp	r1, #29
 8015764:	d82c      	bhi.n	80157c0 <__sflush_r+0xb8>
 8015766:	4a2a      	ldr	r2, [pc, #168]	; (8015810 <__sflush_r+0x108>)
 8015768:	40ca      	lsrs	r2, r1
 801576a:	07d6      	lsls	r6, r2, #31
 801576c:	d528      	bpl.n	80157c0 <__sflush_r+0xb8>
 801576e:	2200      	movs	r2, #0
 8015770:	6062      	str	r2, [r4, #4]
 8015772:	6922      	ldr	r2, [r4, #16]
 8015774:	04d9      	lsls	r1, r3, #19
 8015776:	6022      	str	r2, [r4, #0]
 8015778:	d504      	bpl.n	8015784 <__sflush_r+0x7c>
 801577a:	1c42      	adds	r2, r0, #1
 801577c:	d101      	bne.n	8015782 <__sflush_r+0x7a>
 801577e:	682b      	ldr	r3, [r5, #0]
 8015780:	b903      	cbnz	r3, 8015784 <__sflush_r+0x7c>
 8015782:	6560      	str	r0, [r4, #84]	; 0x54
 8015784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015786:	602f      	str	r7, [r5, #0]
 8015788:	2900      	cmp	r1, #0
 801578a:	d0ca      	beq.n	8015722 <__sflush_r+0x1a>
 801578c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015790:	4299      	cmp	r1, r3
 8015792:	d002      	beq.n	801579a <__sflush_r+0x92>
 8015794:	4628      	mov	r0, r5
 8015796:	f000 f909 	bl	80159ac <_free_r>
 801579a:	2000      	movs	r0, #0
 801579c:	6360      	str	r0, [r4, #52]	; 0x34
 801579e:	e7c1      	b.n	8015724 <__sflush_r+0x1c>
 80157a0:	6a21      	ldr	r1, [r4, #32]
 80157a2:	2301      	movs	r3, #1
 80157a4:	4628      	mov	r0, r5
 80157a6:	47b0      	blx	r6
 80157a8:	1c41      	adds	r1, r0, #1
 80157aa:	d1c7      	bne.n	801573c <__sflush_r+0x34>
 80157ac:	682b      	ldr	r3, [r5, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d0c4      	beq.n	801573c <__sflush_r+0x34>
 80157b2:	2b1d      	cmp	r3, #29
 80157b4:	d001      	beq.n	80157ba <__sflush_r+0xb2>
 80157b6:	2b16      	cmp	r3, #22
 80157b8:	d101      	bne.n	80157be <__sflush_r+0xb6>
 80157ba:	602f      	str	r7, [r5, #0]
 80157bc:	e7b1      	b.n	8015722 <__sflush_r+0x1a>
 80157be:	89a3      	ldrh	r3, [r4, #12]
 80157c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157c4:	81a3      	strh	r3, [r4, #12]
 80157c6:	e7ad      	b.n	8015724 <__sflush_r+0x1c>
 80157c8:	690f      	ldr	r7, [r1, #16]
 80157ca:	2f00      	cmp	r7, #0
 80157cc:	d0a9      	beq.n	8015722 <__sflush_r+0x1a>
 80157ce:	0793      	lsls	r3, r2, #30
 80157d0:	bf18      	it	ne
 80157d2:	2300      	movne	r3, #0
 80157d4:	680e      	ldr	r6, [r1, #0]
 80157d6:	bf08      	it	eq
 80157d8:	694b      	ldreq	r3, [r1, #20]
 80157da:	eba6 0807 	sub.w	r8, r6, r7
 80157de:	600f      	str	r7, [r1, #0]
 80157e0:	608b      	str	r3, [r1, #8]
 80157e2:	f1b8 0f00 	cmp.w	r8, #0
 80157e6:	dd9c      	ble.n	8015722 <__sflush_r+0x1a>
 80157e8:	4643      	mov	r3, r8
 80157ea:	463a      	mov	r2, r7
 80157ec:	4628      	mov	r0, r5
 80157ee:	6a21      	ldr	r1, [r4, #32]
 80157f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157f2:	47b0      	blx	r6
 80157f4:	2800      	cmp	r0, #0
 80157f6:	dc06      	bgt.n	8015806 <__sflush_r+0xfe>
 80157f8:	89a3      	ldrh	r3, [r4, #12]
 80157fa:	f04f 30ff 	mov.w	r0, #4294967295
 80157fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015802:	81a3      	strh	r3, [r4, #12]
 8015804:	e78e      	b.n	8015724 <__sflush_r+0x1c>
 8015806:	4407      	add	r7, r0
 8015808:	eba8 0800 	sub.w	r8, r8, r0
 801580c:	e7e9      	b.n	80157e2 <__sflush_r+0xda>
 801580e:	bf00      	nop
 8015810:	20400001 	.word	0x20400001

08015814 <_fflush_r>:
 8015814:	b538      	push	{r3, r4, r5, lr}
 8015816:	690b      	ldr	r3, [r1, #16]
 8015818:	4605      	mov	r5, r0
 801581a:	460c      	mov	r4, r1
 801581c:	b913      	cbnz	r3, 8015824 <_fflush_r+0x10>
 801581e:	2500      	movs	r5, #0
 8015820:	4628      	mov	r0, r5
 8015822:	bd38      	pop	{r3, r4, r5, pc}
 8015824:	b118      	cbz	r0, 801582e <_fflush_r+0x1a>
 8015826:	6983      	ldr	r3, [r0, #24]
 8015828:	b90b      	cbnz	r3, 801582e <_fflush_r+0x1a>
 801582a:	f7ff fa4f 	bl	8014ccc <__sinit>
 801582e:	4b14      	ldr	r3, [pc, #80]	; (8015880 <_fflush_r+0x6c>)
 8015830:	429c      	cmp	r4, r3
 8015832:	d11b      	bne.n	801586c <_fflush_r+0x58>
 8015834:	686c      	ldr	r4, [r5, #4]
 8015836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d0ef      	beq.n	801581e <_fflush_r+0xa>
 801583e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015840:	07d0      	lsls	r0, r2, #31
 8015842:	d404      	bmi.n	801584e <_fflush_r+0x3a>
 8015844:	0599      	lsls	r1, r3, #22
 8015846:	d402      	bmi.n	801584e <_fflush_r+0x3a>
 8015848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801584a:	f7ff fadd 	bl	8014e08 <__retarget_lock_acquire_recursive>
 801584e:	4628      	mov	r0, r5
 8015850:	4621      	mov	r1, r4
 8015852:	f7ff ff59 	bl	8015708 <__sflush_r>
 8015856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015858:	4605      	mov	r5, r0
 801585a:	07da      	lsls	r2, r3, #31
 801585c:	d4e0      	bmi.n	8015820 <_fflush_r+0xc>
 801585e:	89a3      	ldrh	r3, [r4, #12]
 8015860:	059b      	lsls	r3, r3, #22
 8015862:	d4dd      	bmi.n	8015820 <_fflush_r+0xc>
 8015864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015866:	f7ff fad0 	bl	8014e0a <__retarget_lock_release_recursive>
 801586a:	e7d9      	b.n	8015820 <_fflush_r+0xc>
 801586c:	4b05      	ldr	r3, [pc, #20]	; (8015884 <_fflush_r+0x70>)
 801586e:	429c      	cmp	r4, r3
 8015870:	d101      	bne.n	8015876 <_fflush_r+0x62>
 8015872:	68ac      	ldr	r4, [r5, #8]
 8015874:	e7df      	b.n	8015836 <_fflush_r+0x22>
 8015876:	4b04      	ldr	r3, [pc, #16]	; (8015888 <_fflush_r+0x74>)
 8015878:	429c      	cmp	r4, r3
 801587a:	bf08      	it	eq
 801587c:	68ec      	ldreq	r4, [r5, #12]
 801587e:	e7da      	b.n	8015836 <_fflush_r+0x22>
 8015880:	080187a4 	.word	0x080187a4
 8015884:	080187c4 	.word	0x080187c4
 8015888:	08018784 	.word	0x08018784

0801588c <_lseek_r>:
 801588c:	b538      	push	{r3, r4, r5, lr}
 801588e:	4604      	mov	r4, r0
 8015890:	4608      	mov	r0, r1
 8015892:	4611      	mov	r1, r2
 8015894:	2200      	movs	r2, #0
 8015896:	4d05      	ldr	r5, [pc, #20]	; (80158ac <_lseek_r+0x20>)
 8015898:	602a      	str	r2, [r5, #0]
 801589a:	461a      	mov	r2, r3
 801589c:	f7eb fb3f 	bl	8000f1e <_lseek>
 80158a0:	1c43      	adds	r3, r0, #1
 80158a2:	d102      	bne.n	80158aa <_lseek_r+0x1e>
 80158a4:	682b      	ldr	r3, [r5, #0]
 80158a6:	b103      	cbz	r3, 80158aa <_lseek_r+0x1e>
 80158a8:	6023      	str	r3, [r4, #0]
 80158aa:	bd38      	pop	{r3, r4, r5, pc}
 80158ac:	2000bb80 	.word	0x2000bb80

080158b0 <__swhatbuf_r>:
 80158b0:	b570      	push	{r4, r5, r6, lr}
 80158b2:	460e      	mov	r6, r1
 80158b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158b8:	4614      	mov	r4, r2
 80158ba:	2900      	cmp	r1, #0
 80158bc:	461d      	mov	r5, r3
 80158be:	b096      	sub	sp, #88	; 0x58
 80158c0:	da07      	bge.n	80158d2 <__swhatbuf_r+0x22>
 80158c2:	2300      	movs	r3, #0
 80158c4:	602b      	str	r3, [r5, #0]
 80158c6:	89b3      	ldrh	r3, [r6, #12]
 80158c8:	061a      	lsls	r2, r3, #24
 80158ca:	d410      	bmi.n	80158ee <__swhatbuf_r+0x3e>
 80158cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158d0:	e00e      	b.n	80158f0 <__swhatbuf_r+0x40>
 80158d2:	466a      	mov	r2, sp
 80158d4:	f000 f8c8 	bl	8015a68 <_fstat_r>
 80158d8:	2800      	cmp	r0, #0
 80158da:	dbf2      	blt.n	80158c2 <__swhatbuf_r+0x12>
 80158dc:	9a01      	ldr	r2, [sp, #4]
 80158de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80158e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80158e6:	425a      	negs	r2, r3
 80158e8:	415a      	adcs	r2, r3
 80158ea:	602a      	str	r2, [r5, #0]
 80158ec:	e7ee      	b.n	80158cc <__swhatbuf_r+0x1c>
 80158ee:	2340      	movs	r3, #64	; 0x40
 80158f0:	2000      	movs	r0, #0
 80158f2:	6023      	str	r3, [r4, #0]
 80158f4:	b016      	add	sp, #88	; 0x58
 80158f6:	bd70      	pop	{r4, r5, r6, pc}

080158f8 <__smakebuf_r>:
 80158f8:	898b      	ldrh	r3, [r1, #12]
 80158fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158fc:	079d      	lsls	r5, r3, #30
 80158fe:	4606      	mov	r6, r0
 8015900:	460c      	mov	r4, r1
 8015902:	d507      	bpl.n	8015914 <__smakebuf_r+0x1c>
 8015904:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015908:	6023      	str	r3, [r4, #0]
 801590a:	6123      	str	r3, [r4, #16]
 801590c:	2301      	movs	r3, #1
 801590e:	6163      	str	r3, [r4, #20]
 8015910:	b002      	add	sp, #8
 8015912:	bd70      	pop	{r4, r5, r6, pc}
 8015914:	466a      	mov	r2, sp
 8015916:	ab01      	add	r3, sp, #4
 8015918:	f7ff ffca 	bl	80158b0 <__swhatbuf_r>
 801591c:	9900      	ldr	r1, [sp, #0]
 801591e:	4605      	mov	r5, r0
 8015920:	4630      	mov	r0, r6
 8015922:	f7ff fa73 	bl	8014e0c <_malloc_r>
 8015926:	b948      	cbnz	r0, 801593c <__smakebuf_r+0x44>
 8015928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801592c:	059a      	lsls	r2, r3, #22
 801592e:	d4ef      	bmi.n	8015910 <__smakebuf_r+0x18>
 8015930:	f023 0303 	bic.w	r3, r3, #3
 8015934:	f043 0302 	orr.w	r3, r3, #2
 8015938:	81a3      	strh	r3, [r4, #12]
 801593a:	e7e3      	b.n	8015904 <__smakebuf_r+0xc>
 801593c:	4b0d      	ldr	r3, [pc, #52]	; (8015974 <__smakebuf_r+0x7c>)
 801593e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015940:	89a3      	ldrh	r3, [r4, #12]
 8015942:	6020      	str	r0, [r4, #0]
 8015944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015948:	81a3      	strh	r3, [r4, #12]
 801594a:	9b00      	ldr	r3, [sp, #0]
 801594c:	6120      	str	r0, [r4, #16]
 801594e:	6163      	str	r3, [r4, #20]
 8015950:	9b01      	ldr	r3, [sp, #4]
 8015952:	b15b      	cbz	r3, 801596c <__smakebuf_r+0x74>
 8015954:	4630      	mov	r0, r6
 8015956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801595a:	f000 f897 	bl	8015a8c <_isatty_r>
 801595e:	b128      	cbz	r0, 801596c <__smakebuf_r+0x74>
 8015960:	89a3      	ldrh	r3, [r4, #12]
 8015962:	f023 0303 	bic.w	r3, r3, #3
 8015966:	f043 0301 	orr.w	r3, r3, #1
 801596a:	81a3      	strh	r3, [r4, #12]
 801596c:	89a0      	ldrh	r0, [r4, #12]
 801596e:	4305      	orrs	r5, r0
 8015970:	81a5      	strh	r5, [r4, #12]
 8015972:	e7cd      	b.n	8015910 <__smakebuf_r+0x18>
 8015974:	08014c65 	.word	0x08014c65

08015978 <memchr>:
 8015978:	4603      	mov	r3, r0
 801597a:	b510      	push	{r4, lr}
 801597c:	b2c9      	uxtb	r1, r1
 801597e:	4402      	add	r2, r0
 8015980:	4293      	cmp	r3, r2
 8015982:	4618      	mov	r0, r3
 8015984:	d101      	bne.n	801598a <memchr+0x12>
 8015986:	2000      	movs	r0, #0
 8015988:	e003      	b.n	8015992 <memchr+0x1a>
 801598a:	7804      	ldrb	r4, [r0, #0]
 801598c:	3301      	adds	r3, #1
 801598e:	428c      	cmp	r4, r1
 8015990:	d1f6      	bne.n	8015980 <memchr+0x8>
 8015992:	bd10      	pop	{r4, pc}

08015994 <__malloc_lock>:
 8015994:	4801      	ldr	r0, [pc, #4]	; (801599c <__malloc_lock+0x8>)
 8015996:	f7ff ba37 	b.w	8014e08 <__retarget_lock_acquire_recursive>
 801599a:	bf00      	nop
 801599c:	2000bb8c 	.word	0x2000bb8c

080159a0 <__malloc_unlock>:
 80159a0:	4801      	ldr	r0, [pc, #4]	; (80159a8 <__malloc_unlock+0x8>)
 80159a2:	f7ff ba32 	b.w	8014e0a <__retarget_lock_release_recursive>
 80159a6:	bf00      	nop
 80159a8:	2000bb8c 	.word	0x2000bb8c

080159ac <_free_r>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	4605      	mov	r5, r0
 80159b0:	2900      	cmp	r1, #0
 80159b2:	d043      	beq.n	8015a3c <_free_r+0x90>
 80159b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80159b8:	1f0c      	subs	r4, r1, #4
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	bfb8      	it	lt
 80159be:	18e4      	addlt	r4, r4, r3
 80159c0:	f7ff ffe8 	bl	8015994 <__malloc_lock>
 80159c4:	4a1e      	ldr	r2, [pc, #120]	; (8015a40 <_free_r+0x94>)
 80159c6:	6813      	ldr	r3, [r2, #0]
 80159c8:	4610      	mov	r0, r2
 80159ca:	b933      	cbnz	r3, 80159da <_free_r+0x2e>
 80159cc:	6063      	str	r3, [r4, #4]
 80159ce:	6014      	str	r4, [r2, #0]
 80159d0:	4628      	mov	r0, r5
 80159d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159d6:	f7ff bfe3 	b.w	80159a0 <__malloc_unlock>
 80159da:	42a3      	cmp	r3, r4
 80159dc:	d90a      	bls.n	80159f4 <_free_r+0x48>
 80159de:	6821      	ldr	r1, [r4, #0]
 80159e0:	1862      	adds	r2, r4, r1
 80159e2:	4293      	cmp	r3, r2
 80159e4:	bf01      	itttt	eq
 80159e6:	681a      	ldreq	r2, [r3, #0]
 80159e8:	685b      	ldreq	r3, [r3, #4]
 80159ea:	1852      	addeq	r2, r2, r1
 80159ec:	6022      	streq	r2, [r4, #0]
 80159ee:	6063      	str	r3, [r4, #4]
 80159f0:	6004      	str	r4, [r0, #0]
 80159f2:	e7ed      	b.n	80159d0 <_free_r+0x24>
 80159f4:	461a      	mov	r2, r3
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	b10b      	cbz	r3, 80159fe <_free_r+0x52>
 80159fa:	42a3      	cmp	r3, r4
 80159fc:	d9fa      	bls.n	80159f4 <_free_r+0x48>
 80159fe:	6811      	ldr	r1, [r2, #0]
 8015a00:	1850      	adds	r0, r2, r1
 8015a02:	42a0      	cmp	r0, r4
 8015a04:	d10b      	bne.n	8015a1e <_free_r+0x72>
 8015a06:	6820      	ldr	r0, [r4, #0]
 8015a08:	4401      	add	r1, r0
 8015a0a:	1850      	adds	r0, r2, r1
 8015a0c:	4283      	cmp	r3, r0
 8015a0e:	6011      	str	r1, [r2, #0]
 8015a10:	d1de      	bne.n	80159d0 <_free_r+0x24>
 8015a12:	6818      	ldr	r0, [r3, #0]
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	4401      	add	r1, r0
 8015a18:	6011      	str	r1, [r2, #0]
 8015a1a:	6053      	str	r3, [r2, #4]
 8015a1c:	e7d8      	b.n	80159d0 <_free_r+0x24>
 8015a1e:	d902      	bls.n	8015a26 <_free_r+0x7a>
 8015a20:	230c      	movs	r3, #12
 8015a22:	602b      	str	r3, [r5, #0]
 8015a24:	e7d4      	b.n	80159d0 <_free_r+0x24>
 8015a26:	6820      	ldr	r0, [r4, #0]
 8015a28:	1821      	adds	r1, r4, r0
 8015a2a:	428b      	cmp	r3, r1
 8015a2c:	bf01      	itttt	eq
 8015a2e:	6819      	ldreq	r1, [r3, #0]
 8015a30:	685b      	ldreq	r3, [r3, #4]
 8015a32:	1809      	addeq	r1, r1, r0
 8015a34:	6021      	streq	r1, [r4, #0]
 8015a36:	6063      	str	r3, [r4, #4]
 8015a38:	6054      	str	r4, [r2, #4]
 8015a3a:	e7c9      	b.n	80159d0 <_free_r+0x24>
 8015a3c:	bd38      	pop	{r3, r4, r5, pc}
 8015a3e:	bf00      	nop
 8015a40:	20004c24 	.word	0x20004c24

08015a44 <_read_r>:
 8015a44:	b538      	push	{r3, r4, r5, lr}
 8015a46:	4604      	mov	r4, r0
 8015a48:	4608      	mov	r0, r1
 8015a4a:	4611      	mov	r1, r2
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	4d05      	ldr	r5, [pc, #20]	; (8015a64 <_read_r+0x20>)
 8015a50:	602a      	str	r2, [r5, #0]
 8015a52:	461a      	mov	r2, r3
 8015a54:	f7eb fa06 	bl	8000e64 <_read>
 8015a58:	1c43      	adds	r3, r0, #1
 8015a5a:	d102      	bne.n	8015a62 <_read_r+0x1e>
 8015a5c:	682b      	ldr	r3, [r5, #0]
 8015a5e:	b103      	cbz	r3, 8015a62 <_read_r+0x1e>
 8015a60:	6023      	str	r3, [r4, #0]
 8015a62:	bd38      	pop	{r3, r4, r5, pc}
 8015a64:	2000bb80 	.word	0x2000bb80

08015a68 <_fstat_r>:
 8015a68:	b538      	push	{r3, r4, r5, lr}
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	4d06      	ldr	r5, [pc, #24]	; (8015a88 <_fstat_r+0x20>)
 8015a6e:	4604      	mov	r4, r0
 8015a70:	4608      	mov	r0, r1
 8015a72:	4611      	mov	r1, r2
 8015a74:	602b      	str	r3, [r5, #0]
 8015a76:	f7eb fa39 	bl	8000eec <_fstat>
 8015a7a:	1c43      	adds	r3, r0, #1
 8015a7c:	d102      	bne.n	8015a84 <_fstat_r+0x1c>
 8015a7e:	682b      	ldr	r3, [r5, #0]
 8015a80:	b103      	cbz	r3, 8015a84 <_fstat_r+0x1c>
 8015a82:	6023      	str	r3, [r4, #0]
 8015a84:	bd38      	pop	{r3, r4, r5, pc}
 8015a86:	bf00      	nop
 8015a88:	2000bb80 	.word	0x2000bb80

08015a8c <_isatty_r>:
 8015a8c:	b538      	push	{r3, r4, r5, lr}
 8015a8e:	2300      	movs	r3, #0
 8015a90:	4d05      	ldr	r5, [pc, #20]	; (8015aa8 <_isatty_r+0x1c>)
 8015a92:	4604      	mov	r4, r0
 8015a94:	4608      	mov	r0, r1
 8015a96:	602b      	str	r3, [r5, #0]
 8015a98:	f7eb fa37 	bl	8000f0a <_isatty>
 8015a9c:	1c43      	adds	r3, r0, #1
 8015a9e:	d102      	bne.n	8015aa6 <_isatty_r+0x1a>
 8015aa0:	682b      	ldr	r3, [r5, #0]
 8015aa2:	b103      	cbz	r3, 8015aa6 <_isatty_r+0x1a>
 8015aa4:	6023      	str	r3, [r4, #0]
 8015aa6:	bd38      	pop	{r3, r4, r5, pc}
 8015aa8:	2000bb80 	.word	0x2000bb80

08015aac <_init>:
 8015aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aae:	bf00      	nop
 8015ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ab2:	bc08      	pop	{r3}
 8015ab4:	469e      	mov	lr, r3
 8015ab6:	4770      	bx	lr

08015ab8 <_fini>:
 8015ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aba:	bf00      	nop
 8015abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015abe:	bc08      	pop	{r3}
 8015ac0:	469e      	mov	lr, r3
 8015ac2:	4770      	bx	lr
