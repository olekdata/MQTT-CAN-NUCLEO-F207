
NUCLEO_F207.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffb0  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002554  08010134  08010134  00020134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012688  08012688  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08012688  08012688  00022688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012690  08012690  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012690  08012690  00022690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012694  08012694  00022694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08012698  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000070fc  2000007c  08012714  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007178  08012714  00037178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003077a  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006042  00000000  00000000  0006081f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00066868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00067e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7ec  00000000  00000000  000692b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025e0b  00000000  00000000  00095aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a4e  00000000  00000000  000bb8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001922fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006058  00000000  00000000  00192350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000007c 	.word	0x2000007c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0801011c 	.word	0x0801011c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000080 	.word	0x20000080
 80001c0:	0801011c 	.word	0x0801011c

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	468e      	mov	lr, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	f040 8083 	bne.w	8000330 <__udivmoddi4+0x118>
 800022a:	428a      	cmp	r2, r1
 800022c:	4617      	mov	r7, r2
 800022e:	d947      	bls.n	80002c0 <__udivmoddi4+0xa8>
 8000230:	fab2 f382 	clz	r3, r2
 8000234:	b14b      	cbz	r3, 800024a <__udivmoddi4+0x32>
 8000236:	f1c3 0120 	rsb	r1, r3, #32
 800023a:	fa05 fe03 	lsl.w	lr, r5, r3
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	409f      	lsls	r7, r3
 8000244:	ea41 0e0e 	orr.w	lr, r1, lr
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	fbbe fcf8 	udiv	ip, lr, r8
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb08 e21c 	mls	r2, r8, ip, lr
 800025a:	fb0c f009 	mul.w	r0, ip, r9
 800025e:	0c21      	lsrs	r1, r4, #16
 8000260:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x66>
 8000268:	18ba      	adds	r2, r7, r2
 800026a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800026e:	f080 8118 	bcs.w	80004a2 <__udivmoddi4+0x28a>
 8000272:	4290      	cmp	r0, r2
 8000274:	f240 8115 	bls.w	80004a2 <__udivmoddi4+0x28a>
 8000278:	f1ac 0c02 	sub.w	ip, ip, #2
 800027c:	443a      	add	r2, r7
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	fbb2 f0f8 	udiv	r0, r2, r8
 8000284:	fb08 2210 	mls	r2, r8, r0, r2
 8000288:	fb00 f109 	mul.w	r1, r0, r9
 800028c:	b2a4      	uxth	r4, r4
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	42a1      	cmp	r1, r4
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x92>
 8000296:	193c      	adds	r4, r7, r4
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 8103 	bcs.w	80004a6 <__udivmoddi4+0x28e>
 80002a0:	42a1      	cmp	r1, r4
 80002a2:	f240 8100 	bls.w	80004a6 <__udivmoddi4+0x28e>
 80002a6:	3802      	subs	r0, #2
 80002a8:	443c      	add	r4, r7
 80002aa:	1a64      	subs	r4, r4, r1
 80002ac:	2100      	movs	r1, #0
 80002ae:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa4>
 80002b4:	2200      	movs	r2, #0
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	e9c6 4200 	strd	r4, r2, [r6]
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	b902      	cbnz	r2, 80002c4 <__udivmoddi4+0xac>
 80002c2:	deff      	udf	#255	; 0xff
 80002c4:	fab2 f382 	clz	r3, r2
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14f      	bne.n	800036c <__udivmoddi4+0x154>
 80002cc:	1a8d      	subs	r5, r1, r2
 80002ce:	2101      	movs	r1, #1
 80002d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002d4:	fa1f f882 	uxth.w	r8, r2
 80002d8:	fbb5 fcfe 	udiv	ip, r5, lr
 80002dc:	fb0e 551c 	mls	r5, lr, ip, r5
 80002e0:	fb08 f00c 	mul.w	r0, r8, ip
 80002e4:	0c22      	lsrs	r2, r4, #16
 80002e6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002ea:	42a8      	cmp	r0, r5
 80002ec:	d907      	bls.n	80002fe <__udivmoddi4+0xe6>
 80002ee:	197d      	adds	r5, r7, r5
 80002f0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0xe4>
 80002f6:	42a8      	cmp	r0, r5
 80002f8:	f200 80e9 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 80002fc:	4694      	mov	ip, r2
 80002fe:	1a2d      	subs	r5, r5, r0
 8000300:	fbb5 f0fe 	udiv	r0, r5, lr
 8000304:	fb0e 5510 	mls	r5, lr, r0, r5
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	b2a4      	uxth	r4, r4
 800030e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000312:	45a0      	cmp	r8, r4
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x10e>
 8000316:	193c      	adds	r4, r7, r4
 8000318:	f100 32ff 	add.w	r2, r0, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x10c>
 800031e:	45a0      	cmp	r8, r4
 8000320:	f200 80d9 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 8000324:	4610      	mov	r0, r2
 8000326:	eba4 0408 	sub.w	r4, r4, r8
 800032a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032e:	e7c0      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000330:	428b      	cmp	r3, r1
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000334:	2e00      	cmp	r6, #0
 8000336:	f000 80b1 	beq.w	800049c <__udivmoddi4+0x284>
 800033a:	2100      	movs	r1, #0
 800033c:	e9c6 0500 	strd	r0, r5, [r6]
 8000340:	4608      	mov	r0, r1
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f183 	clz	r1, r3
 800034a:	2900      	cmp	r1, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0x1ce>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b9 	bhi.w	80004ca <__udivmoddi4+0x2b2>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb65 0303 	sbc.w	r3, r5, r3
 800035e:	2001      	movs	r0, #1
 8000360:	469e      	mov	lr, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d0aa      	beq.n	80002bc <__udivmoddi4+0xa4>
 8000366:	e9c6 4e00 	strd	r4, lr, [r6]
 800036a:	e7a7      	b.n	80002bc <__udivmoddi4+0xa4>
 800036c:	409f      	lsls	r7, r3
 800036e:	f1c3 0220 	rsb	r2, r3, #32
 8000372:	40d1      	lsrs	r1, r2
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	fa24 f202 	lsr.w	r2, r4, r2
 8000388:	409d      	lsls	r5, r3
 800038a:	fb00 fc08 	mul.w	ip, r0, r8
 800038e:	432a      	orrs	r2, r5
 8000390:	0c15      	lsrs	r5, r2, #16
 8000392:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000396:	45ac      	cmp	ip, r5
 8000398:	fa04 f403 	lsl.w	r4, r4, r3
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0x19a>
 800039e:	197d      	adds	r5, r7, r5
 80003a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a4:	f080 808f 	bcs.w	80004c6 <__udivmoddi4+0x2ae>
 80003a8:	45ac      	cmp	ip, r5
 80003aa:	f240 808c 	bls.w	80004c6 <__udivmoddi4+0x2ae>
 80003ae:	3802      	subs	r0, #2
 80003b0:	443d      	add	r5, r7
 80003b2:	eba5 050c 	sub.w	r5, r5, ip
 80003b6:	fbb5 f1fe 	udiv	r1, r5, lr
 80003ba:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003be:	fb01 f908 	mul.w	r9, r1, r8
 80003c2:	b295      	uxth	r5, r2
 80003c4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003c8:	45a9      	cmp	r9, r5
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	197d      	adds	r5, r7, r5
 80003ce:	f101 32ff 	add.w	r2, r1, #4294967295
 80003d2:	d274      	bcs.n	80004be <__udivmoddi4+0x2a6>
 80003d4:	45a9      	cmp	r9, r5
 80003d6:	d972      	bls.n	80004be <__udivmoddi4+0x2a6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	eba5 0509 	sub.w	r5, r5, r9
 80003e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003e4:	e778      	b.n	80002d8 <__udivmoddi4+0xc0>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	408b      	lsls	r3, r1
 80003ec:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f0:	ea4c 0c03 	orr.w	ip, ip, r3
 80003f4:	fa25 f407 	lsr.w	r4, r5, r7
 80003f8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003fc:	fbb4 f9fe 	udiv	r9, r4, lr
 8000400:	fa1f f88c 	uxth.w	r8, ip
 8000404:	fb0e 4419 	mls	r4, lr, r9, r4
 8000408:	fa20 f307 	lsr.w	r3, r0, r7
 800040c:	fb09 fa08 	mul.w	sl, r9, r8
 8000410:	408d      	lsls	r5, r1
 8000412:	431d      	orrs	r5, r3
 8000414:	0c2b      	lsrs	r3, r5, #16
 8000416:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	fa02 f201 	lsl.w	r2, r2, r1
 8000420:	fa00 f301 	lsl.w	r3, r0, r1
 8000424:	d909      	bls.n	800043a <__udivmoddi4+0x222>
 8000426:	eb1c 0404 	adds.w	r4, ip, r4
 800042a:	f109 30ff 	add.w	r0, r9, #4294967295
 800042e:	d248      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 8000430:	45a2      	cmp	sl, r4
 8000432:	d946      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 8000434:	f1a9 0902 	sub.w	r9, r9, #2
 8000438:	4464      	add	r4, ip
 800043a:	eba4 040a 	sub.w	r4, r4, sl
 800043e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000442:	fb0e 4410 	mls	r4, lr, r0, r4
 8000446:	fb00 fa08 	mul.w	sl, r0, r8
 800044a:	b2ad      	uxth	r5, r5
 800044c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000450:	45a2      	cmp	sl, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x24e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d22d      	bcs.n	80004ba <__udivmoddi4+0x2a2>
 800045e:	45a2      	cmp	sl, r4
 8000460:	d92b      	bls.n	80004ba <__udivmoddi4+0x2a2>
 8000462:	3802      	subs	r0, #2
 8000464:	4464      	add	r4, ip
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	eba4 040a 	sub.w	r4, r4, sl
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d319      	bcc.n	80004ae <__udivmoddi4+0x296>
 800047a:	d016      	beq.n	80004aa <__udivmoddi4+0x292>
 800047c:	b15e      	cbz	r6, 8000496 <__udivmoddi4+0x27e>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	fa22 f301 	lsr.w	r3, r2, r1
 800048e:	431f      	orrs	r7, r3
 8000490:	40cc      	lsrs	r4, r1
 8000492:	e9c6 7400 	strd	r7, r4, [r6]
 8000496:	2100      	movs	r1, #0
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	4631      	mov	r1, r6
 800049e:	4630      	mov	r0, r6
 80004a0:	e70c      	b.n	80002bc <__udivmoddi4+0xa4>
 80004a2:	468c      	mov	ip, r1
 80004a4:	e6eb      	b.n	800027e <__udivmoddi4+0x66>
 80004a6:	4610      	mov	r0, r2
 80004a8:	e6ff      	b.n	80002aa <__udivmoddi4+0x92>
 80004aa:	4543      	cmp	r3, r8
 80004ac:	d2e6      	bcs.n	800047c <__udivmoddi4+0x264>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 050c 	sbc.w	r5, r9, ip
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e0      	b.n	800047c <__udivmoddi4+0x264>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d3      	b.n	8000466 <__udivmoddi4+0x24e>
 80004be:	4611      	mov	r1, r2
 80004c0:	e78c      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7b9      	b.n	800043a <__udivmoddi4+0x222>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e773      	b.n	80003b2 <__udivmoddi4+0x19a>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e749      	b.n	8000362 <__udivmoddi4+0x14a>
 80004ce:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d2:	443d      	add	r5, r7
 80004d4:	e713      	b.n	80002fe <__udivmoddi4+0xe6>
 80004d6:	3802      	subs	r0, #2
 80004d8:	443c      	add	r4, r7
 80004da:	e724      	b.n	8000326 <__udivmoddi4+0x10e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <LedCGIhandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// the actual function for handling CGI [= CGI #5 =]
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[],
char *pcValue[]) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	603b      	str	r3, [r7, #0]

	uint32_t i = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]

	if (iIndex == 0) {
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d110      	bne.n	800051a <LedCGIhandler+0x3a>

		//turning the LED lights off
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	4829      	ldr	r0, [pc, #164]	; (80005a4 <LedCGIhandler+0xc4>)
 80004fe:	f002 fa07 	bl	8002910 <HAL_GPIO_WritePin>

		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD2ON = false;
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <LedCGIhandler+0xc8>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800050e:	4825      	ldr	r0, [pc, #148]	; (80005a4 <LedCGIhandler+0xc4>)
 8000510:	f002 f9fe 	bl	8002910 <HAL_GPIO_WritePin>

		// we put this variable to false to indicate that the LD* LED on the board is not ON
		LD1ON = false;
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <LedCGIhandler+0xcc>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]

	}

	for (i = 0; i < iNumParams; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e038      	b.n	8000592 <LedCGIhandler+0xb2>

		if (strcmp(pcParam[i], "led") == 0)
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4413      	add	r3, r2
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4921      	ldr	r1, [pc, #132]	; (80005b0 <LedCGIhandler+0xd0>)
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fe49 	bl	80001c4 <strcmp>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d129      	bne.n	800058c <LedCGIhandler+0xac>

		{

			if (strcmp(pcValue[i], "1") == 0) {
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	4413      	add	r3, r2
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	491c      	ldr	r1, [pc, #112]	; (80005b4 <LedCGIhandler+0xd4>)
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe3d 	bl	80001c4 <strcmp>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d109      	bne.n	8000564 <LedCGIhandler+0x84>

				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000556:	4813      	ldr	r0, [pc, #76]	; (80005a4 <LedCGIhandler+0xc4>)
 8000558:	f002 f9da 	bl	8002910 <HAL_GPIO_WritePin>

				// LD3 LED (red) on the board is ON!
				LD1ON = true;
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <LedCGIhandler+0xcc>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e013      	b.n	800058c <LedCGIhandler+0xac>

			}

			else if (strcmp(pcValue[i], "2") == 0) {
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	4413      	add	r3, r2
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4912      	ldr	r1, [pc, #72]	; (80005b8 <LedCGIhandler+0xd8>)
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe27 	bl	80001c4 <strcmp>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d107      	bne.n	800058c <LedCGIhandler+0xac>

				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	4808      	ldr	r0, [pc, #32]	; (80005a4 <LedCGIhandler+0xc4>)
 8000582:	f002 f9c5 	bl	8002910 <HAL_GPIO_WritePin>

				// LD2 LED (blue) on the board is ON!
				LD2ON = true;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <LedCGIhandler+0xc8>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iNumParams; i++) {
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	3301      	adds	r3, #1
 8000590:	617b      	str	r3, [r7, #20]
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3c2      	bcc.n	8000520 <LedCGIhandler+0x40>
		}

	}

	// the extension .shtml for SSI to work
	return "/index.shtml";
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LedCGIhandler+0xdc>)

} // END [= CGI #5 =]
 800059c:	4618      	mov	r0, r3
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40020400 	.word	0x40020400
 80005a8:	20000099 	.word	0x20000099
 80005ac:	20000098 	.word	0x20000098
 80005b0:	08010150 	.word	0x08010150
 80005b4:	08010154 	.word	0x08010154
 80005b8:	08010158 	.word	0x08010158
 80005bc:	0801015c 	.word	0x0801015c

080005c0 <myCGIinit>:

// function to initialize CGI [= CGI #6 =]
void myCGIinit(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//add LED control CGI to the table
	theCGItable[0] = LedCGI;
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <myCGIinit+0x1c>)
 80005c6:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <myCGIinit+0x20>)
 80005c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005cc:	e883 0003 	stmia.w	r3, {r0, r1}
	//give the table to the HTTP server
	http_set_cgi_handlers(theCGItable, 1);
 80005d0:	2101      	movs	r1, #1
 80005d2:	4802      	ldr	r0, [pc, #8]	; (80005dc <myCGIinit+0x1c>)
 80005d4:	f005 fb10 	bl	8005bf8 <http_set_cgi_handlers>
} // END [= CGI #6 =]
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000a9c 	.word	0x20000a9c
 80005e0:	080121e8 	.word	0x080121e8

080005e4 <mySSIHandler>:

// the actual function for SSI [* SSI #4 *]
u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b092      	sub	sp, #72	; 0x48
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]

	if (iIndex == 0) {
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d141      	bne.n	800067a <mySSIHandler+0x96>

		if (LD1ON == false) {
 80005f6:	4b46      	ldr	r3, [pc, #280]	; (8000710 <mySSIHandler+0x12c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f083 0301 	eor.w	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d019      	beq.n	8000638 <mySSIHandler+0x54>

			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\">";
 8000604:	4b43      	ldr	r3, [pc, #268]	; (8000714 <mySSIHandler+0x130>)
 8000606:	f107 0410 	add.w	r4, r7, #16
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000618:	c407      	stmia	r4!, {r0, r1, r2}
 800061a:	7023      	strb	r3, [r4, #0]

			strcpy(pcInsert, myStr1);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	68b8      	ldr	r0, [r7, #8]
 8000624:	f00e fe17 	bl	800f256 <strcpy>

			return strlen(myStr1);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fdd3 	bl	80001d8 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29b      	uxth	r3, r3
 8000636:	e066      	b.n	8000706 <mySSIHandler+0x122>
		}

		else if (LD1ON == true) {
 8000638:	4b35      	ldr	r3, [pc, #212]	; (8000710 <mySSIHandler+0x12c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d061      	beq.n	8000704 <mySSIHandler+0x120>

			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr1[] =
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <mySSIHandler+0x134>)
 8000642:	f107 0410 	add.w	r4, r7, #16
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000658:	6020      	str	r0, [r4, #0]
 800065a:	3404      	adds	r4, #4
 800065c:	7021      	strb	r1, [r4, #0]
			"<input value=\"1\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr1);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	68b8      	ldr	r0, [r7, #8]
 8000666:	f00e fdf6 	bl	800f256 <strcpy>

			return strlen(myStr1);
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fdb2 	bl	80001d8 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b29b      	uxth	r3, r3
 8000678:	e045      	b.n	8000706 <mySSIHandler+0x122>

		}

	}

	else if (iIndex == 1)
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d141      	bne.n	8000704 <mySSIHandler+0x120>

	{
		if (LD2ON == false) {
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <mySSIHandler+0x138>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d019      	beq.n	80006c2 <mySSIHandler+0xde>
			char myStr2[] = "<input value=\"2\" name=\"led\" type=\"checkbox\">";
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <mySSIHandler+0x13c>)
 8000690:	f107 0410 	add.w	r4, r7, #16
 8000694:	461d      	mov	r5, r3
 8000696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006a2:	c407      	stmia	r4!, {r0, r1, r2}
 80006a4:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr2);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	68b8      	ldr	r0, [r7, #8]
 80006ae:	f00e fdd2 	bl	800f256 <strcpy>

			return strlen(myStr2);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fd8e 	bl	80001d8 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29b      	uxth	r3, r3
 80006c0:	e021      	b.n	8000706 <mySSIHandler+0x122>
		}

		else if (LD2ON == true) {
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <mySSIHandler+0x138>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d01c      	beq.n	8000704 <mySSIHandler+0x120>

			// since the LD2 blue LED on the board is ON we make its checkbox checked!
			char myStr2[] =
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <mySSIHandler+0x140>)
 80006cc:	f107 0410 	add.w	r4, r7, #16
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006e2:	6020      	str	r0, [r4, #0]
 80006e4:	3404      	adds	r4, #4
 80006e6:	7021      	strb	r1, [r4, #0]
			"<input value=\"2\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr2);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	68b8      	ldr	r0, [r7, #8]
 80006f0:	f00e fdb1 	bl	800f256 <strcpy>

			return strlen(myStr2);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fd6d 	bl	80001d8 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29b      	uxth	r3, r3
 8000702:	e000      	b.n	8000706 <mySSIHandler+0x122>

		}

	}

	return 0;
 8000704:	2300      	movs	r3, #0

}
 8000706:	4618      	mov	r0, r3
 8000708:	3748      	adds	r7, #72	; 0x48
 800070a:	46bd      	mov	sp, r7
 800070c:	bdb0      	pop	{r4, r5, r7, pc}
 800070e:	bf00      	nop
 8000710:	20000098 	.word	0x20000098
 8000714:	0801016c 	.word	0x0801016c
 8000718:	0801019c 	.word	0x0801019c
 800071c:	20000099 	.word	0x20000099
 8000720:	080101d4 	.word	0x080101d4
 8000724:	08010204 	.word	0x08010204

08000728 <mySSIinit>:

// function to initialize SSI [* SSI #5 *]
void mySSIinit(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,
 800072c:	2202      	movs	r2, #2
 800072e:	4903      	ldr	r1, [pc, #12]	; (800073c <mySSIinit+0x14>)
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <mySSIinit+0x18>)
 8000732:	f005 fa1f 	bl	8005b74 <http_set_ssi_handler>
	numSSItags);
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000000 	.word	0x20000000
 8000740:	080005e5 	.word	0x080005e5

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000748:	f000 fbc6 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074c:	f000 f82a 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000750:	f000 f8f8 	bl	8000944 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000754:	f000 f8a2 	bl	800089c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000758:	f000 f8ca 	bl	80008f0 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 800075c:	f000 f86a 	bl	8000834 <MX_CAN1_Init>
  MX_LWIP_Init();
 8000760:	f003 fa6c 	bl	8003c3c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  // initializing the HTTPd [-HTTPd #2-]
 httpd_init();
 8000764:	f005 f9ba 	bl	8005adc <httpd_init>

 // initializing CGI  [= CGI #7 =]
 myCGIinit();
 8000768:	f7ff ff2a 	bl	80005c0 <myCGIinit>

 // initializing SSI [* SSI #6 *]
 mySSIinit();
 800076c:	f7ff ffdc 	bl	8000728 <mySSIinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000770:	f003 fb96 	bl	8003ea0 <MX_LWIP_Process>

	  if ((HAL_GetTick() - czas) > 1000) {
 8000774:	f000 fc14 	bl	8000fa0 <HAL_GetTick>
 8000778:	4603      	mov	r3, r0
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <main+0x58>)
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000784:	d9f4      	bls.n	8000770 <main+0x2c>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000786:	2101      	movs	r1, #1
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <main+0x5c>)
 800078a:	f002 f8d9 	bl	8002940 <HAL_GPIO_TogglePin>
		  czas = HAL_GetTick();
 800078e:	f000 fc07 	bl	8000fa0 <HAL_GetTick>
 8000792:	4603      	mov	r3, r0
 8000794:	461a      	mov	r2, r3
 8000796:	4b01      	ldr	r3, [pc, #4]	; (800079c <main+0x58>)
 8000798:	601a      	str	r2, [r3, #0]
	  MX_LWIP_Process();
 800079a:	e7e9      	b.n	8000770 <main+0x2c>
 800079c:	2000009c 	.word	0x2000009c
 80007a0:	40020400 	.word	0x40020400

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b092      	sub	sp, #72	; 0x48
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2230      	movs	r2, #48	; 0x30
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f00e fd22 	bl	800f1fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ca:	2301      	movs	r3, #1
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2310      	movs	r3, #16
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d6:	2300      	movs	r3, #0
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80007da:	230d      	movs	r3, #13
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80007de:	23c3      	movs	r3, #195	; 0xc3
 80007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007e6:	2305      	movs	r3, #5
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 f9dc 	bl	8002bac <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80007fa:	f000 f95f 	bl	8000abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000814:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2103      	movs	r1, #3
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fc16 	bl	800304c <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000826:	f000 f949 	bl	8000abc <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3748      	adds	r7, #72	; 0x48
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_CAN1_Init+0x60>)
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_CAN1_Init+0x64>)
 800083c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_CAN1_Init+0x60>)
 8000840:	2210      	movs	r2, #16
 8000842:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_CAN1_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_CAN1_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_CAN1_Init+0x60>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_CAN1_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_CAN1_Init+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_CAN1_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_CAN1_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_CAN1_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_CAN1_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_CAN1_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_CAN1_Init+0x60>)
 8000882:	f000 fbbb 	bl	8000ffc <HAL_CAN_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800088c:	f000 f916 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000aa4 	.word	0x20000aa4
 8000898:	40006400 	.word	0x40006400

0800089c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART3_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008d4:	f002 fdd6 	bl	8003484 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f8ed 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000065c 	.word	0x2000065c
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80008fe:	2204      	movs	r2, #4
 8000900:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000904:	2202      	movs	r2, #2
 8000906:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000910:	2202      	movs	r2, #2
 8000912:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000916:	2201      	movs	r2, #1
 8000918:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000922:	2201      	movs	r2, #1
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800092e:	f002 f820 	bl	8002972 <HAL_PCD_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000938:	f000 f8c0 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	2000069c 	.word	0x2000069c

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b52      	ldr	r3, [pc, #328]	; (8000aa8 <MX_GPIO_Init+0x164>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a51      	ldr	r2, [pc, #324]	; (8000aa8 <MX_GPIO_Init+0x164>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4f      	ldr	r3, [pc, #316]	; (8000aa8 <MX_GPIO_Init+0x164>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b4b      	ldr	r3, [pc, #300]	; (8000aa8 <MX_GPIO_Init+0x164>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a4a      	ldr	r2, [pc, #296]	; (8000aa8 <MX_GPIO_Init+0x164>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b48      	ldr	r3, [pc, #288]	; (8000aa8 <MX_GPIO_Init+0x164>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <MX_GPIO_Init+0x164>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a43      	ldr	r2, [pc, #268]	; (8000aa8 <MX_GPIO_Init+0x164>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a3c      	ldr	r2, [pc, #240]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a35      	ldr	r2, [pc, #212]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a2e      	ldr	r2, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_GPIO_Init+0x164>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a08:	4828      	ldr	r0, [pc, #160]	; (8000aac <MX_GPIO_Init+0x168>)
 8000a0a:	f001 ff81 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	4827      	ldr	r0, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x16c>)
 8000a14:	f001 ff7c 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x170>)
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <MX_GPIO_Init+0x174>)
 8000a2e:	f001 fdd1 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4818      	ldr	r0, [pc, #96]	; (8000aac <MX_GPIO_Init+0x168>)
 8000a4a:	f001 fdc3 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a4e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_GPIO_Init+0x168>)
 8000a68:	f001 fdb4 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a6c:	2340      	movs	r3, #64	; 0x40
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <MX_GPIO_Init+0x16c>)
 8000a84:	f001 fda6 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_GPIO_Init+0x16c>)
 8000a9c:	f001 fd9a 	bl	80025d4 <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3730      	adds	r7, #48	; 0x30
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	10110000 	.word	0x10110000
 8000ab8:	40020800 	.word	0x40020800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_MspInit+0x48>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_MspInit+0x48>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_MspInit+0x48>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_MspInit+0x48>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_MspInit+0x48>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_MspInit+0x48>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_CAN_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_CAN_MspInit+0x88>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_CAN_MspInit+0x88>)
 8000b40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_CAN_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_CAN_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_CAN_MspInit+0x88>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_CAN_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b7e:	2309      	movs	r3, #9
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_CAN_MspInit+0x8c>)
 8000b8a:	f001 fd23 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40006400 	.word	0x40006400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020c00 	.word	0x40020c00

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <HAL_UART_MspInit+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12c      	bne.n	8000c20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a17      	ldr	r2, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_UART_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c10:	2307      	movs	r3, #7
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000c1c:	f001 fcda 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c54:	d13f      	bne.n	8000cd6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c72:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c84:	230a      	movs	r3, #10
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4815      	ldr	r0, [pc, #84]	; (8000ce4 <HAL_PCD_MspInit+0xb0>)
 8000c90:	f001 fca0 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <HAL_PCD_MspInit+0xb0>)
 8000caa:	f001 fc93 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	6353      	str	r3, [r2, #52]	; 0x34
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_PCD_MspInit+0xac>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2e:	f000 f925 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b086      	sub	sp, #24
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	e00a      	b.n	8000d5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d48:	f3af 8000 	nop.w
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	60ba      	str	r2, [r7, #8]
 8000d54:	b2ca      	uxtb	r2, r1
 8000d56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	dbf0      	blt.n	8000d48 <_read+0x12>
	}

return len;
 8000d66:	687b      	ldr	r3, [r7, #4]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e009      	b.n	8000d96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	60ba      	str	r2, [r7, #8]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	dbf1      	blt.n	8000d82 <_write+0x12>
	}
	return len;
 8000d9e:	687b      	ldr	r3, [r7, #4]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_close>:

int _close(int file)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	return -1;
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <_isatty>:

int _isatty(int file)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d205      	bcs.n	8000e44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <_sbrk+0x6c>)
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	e009      	b.n	8000e58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a06      	ldr	r2, [pc, #24]	; (8000e6c <_sbrk+0x64>)
 8000e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	371c      	adds	r7, #28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20020000 	.word	0x20020000
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	200000a0 	.word	0x200000a0
 8000e70:	20007178 	.word	0x20007178
 8000e74:	20007168 	.word	0x20007168

08000e78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000e88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e8a:	e003      	b.n	8000e94 <LoopCopyDataInit>

08000e8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e92:	3104      	adds	r1, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e9c:	d3f6      	bcc.n	8000e8c <CopyDataInit>
  ldr  r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ea0:	e002      	b.n	8000ea8 <LoopFillZerobss>

08000ea2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000ea2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ea4:	f842 3b04 	str.w	r3, [r2], #4

08000ea8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000eac:	d3f9      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eae:	f7ff ffe3 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f00e f963 	bl	800f17c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fc45 	bl	8000744 <main>
  bx  lr
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ec0:	08012698 	.word	0x08012698
  ldr  r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ec8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000ecc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000ed0:	20007178 	.word	0x20007178

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 fa27 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fddc 	bl	8000ac8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fa31 	bl	80013a2 <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 fa07 	bl	800136a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000010 	.word	0x20000010
 8000f78:	2000000c 	.word	0x2000000c

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x20>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <HAL_IncTick+0x20>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000010 	.word	0x20000010
 8000f9c:	20000acc 	.word	0x20000acc

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000acc 	.word	0x20000acc

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff fff0 	bl	8000fa0 <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffe0 	bl	8000fa0 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000010 	.word	0x20000010

08000ffc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ed      	b.n	80011ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fd7a 	bl	8000b14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0202 	bic.w	r2, r2, #2
 800102e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001030:	f7ff ffb6 	bl	8000fa0 <HAL_GetTick>
 8001034:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001036:	e012      	b.n	800105e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001038:	f7ff ffb2 	bl	8000fa0 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d90b      	bls.n	800105e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2205      	movs	r2, #5
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0c5      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e5      	bne.n	8001038 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800107c:	f7ff ff90 	bl	8000fa0 <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001082:	e012      	b.n	80010aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001084:	f7ff ff8c 	bl	8000fa0 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d90b      	bls.n	80010aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2205      	movs	r2, #5
 80010a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e09f      	b.n	80011ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0e5      	beq.n	8001084 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7e1b      	ldrb	r3, [r3, #24]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7e5b      	ldrb	r3, [r3, #25]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e007      	b.n	800110c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800110a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e9b      	ldrb	r3, [r3, #26]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d108      	bne.n	8001126 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0220 	orr.w	r2, r2, #32
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e007      	b.n	8001136 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0220 	bic.w	r2, r2, #32
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7edb      	ldrb	r3, [r3, #27]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d108      	bne.n	8001150 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0210 	bic.w	r2, r2, #16
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	e007      	b.n	8001160 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0210 	orr.w	r2, r2, #16
 800115e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7f1b      	ldrb	r3, [r3, #28]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d108      	bne.n	800117a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0208 	orr.w	r2, r2, #8
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	e007      	b.n	800118a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0208 	bic.w	r2, r2, #8
 8001188:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7f5b      	ldrb	r3, [r3, #29]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d108      	bne.n	80011a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0204 	orr.w	r2, r2, #4
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0204 	bic.w	r2, r2, #4
 80011b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	ea42 0103 	orr.w	r1, r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff90 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff49 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff5e 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff90 	bl	80012ac <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5f 	bl	8001258 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff ffb0 	bl	8001310 <SysTick_Config>
 80013b0:	4603      	mov	r3, r0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80013cc:	4ba3      	ldr	r3, [pc, #652]	; (800165c <HAL_ETH_Init+0x2a0>)
 80013ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e173      	b.n	80016ca <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f002 fd5e 	bl	8003eb8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	4b97      	ldr	r3, [pc, #604]	; (8001660 <HAL_ETH_Init+0x2a4>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	4a96      	ldr	r2, [pc, #600]	; (8001660 <HAL_ETH_Init+0x2a4>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6453      	str	r3, [r2, #68]	; 0x44
 800140c:	4b94      	ldr	r3, [pc, #592]	; (8001660 <HAL_ETH_Init+0x2a4>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001418:	4b92      	ldr	r3, [pc, #584]	; (8001664 <HAL_ETH_Init+0x2a8>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a91      	ldr	r2, [pc, #580]	; (8001664 <HAL_ETH_Init+0x2a8>)
 800141e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001422:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001424:	4b8f      	ldr	r3, [pc, #572]	; (8001664 <HAL_ETH_Init+0x2a8>)
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	498d      	ldr	r1, [pc, #564]	; (8001664 <HAL_ETH_Init+0x2a8>)
 800142e:	4313      	orrs	r3, r2
 8001430:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001448:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800144a:	f7ff fda9 	bl	8000fa0 <HAL_GetTick>
 800144e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001450:	e011      	b.n	8001476 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001452:	f7ff fda5 	bl	8000fa0 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001460:	d909      	bls.n	8001476 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e129      	b.n	80016ca <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e4      	bne.n	8001452 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f023 031c 	bic.w	r3, r3, #28
 8001496:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001498:	f001 ffa6 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800149c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4a71      	ldr	r2, [pc, #452]	; (8001668 <HAL_ETH_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d908      	bls.n	80014b8 <HAL_ETH_Init+0xfc>
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4a70      	ldr	r2, [pc, #448]	; (800166c <HAL_ETH_Init+0x2b0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d804      	bhi.n	80014b8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f043 0308 	orr.w	r3, r3, #8
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e01a      	b.n	80014ee <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	4a6c      	ldr	r2, [pc, #432]	; (800166c <HAL_ETH_Init+0x2b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d908      	bls.n	80014d2 <HAL_ETH_Init+0x116>
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4a66      	ldr	r2, [pc, #408]	; (800165c <HAL_ETH_Init+0x2a0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d204      	bcs.n	80014d2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	f043 030c 	orr.w	r3, r3, #12
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	e00d      	b.n	80014ee <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4a61      	ldr	r2, [pc, #388]	; (800165c <HAL_ETH_Init+0x2a0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d303      	bcc.n	80014e2 <HAL_ETH_Init+0x126>
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4a64      	ldr	r2, [pc, #400]	; (8001670 <HAL_ETH_Init+0x2b4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d904      	bls.n	80014ec <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e000      	b.n	80014ee <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014ec:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fb92 	bl	8001c26 <HAL_ETH_WritePHYRegister>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d00b      	beq.n	8001520 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800150c:	6939      	ldr	r1, [r7, #16]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fd48 	bl	8001fa4 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0d4      	b.n	80016ca <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001520:	20ff      	movs	r0, #255	; 0xff
 8001522:	f7ff fd47 	bl	8000fb4 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	f000 80a2 	beq.w	8001674 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001530:	f7ff fd36 	bl	8000fa0 <HAL_GetTick>
 8001534:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	461a      	mov	r2, r3
 800153c:	2101      	movs	r1, #1
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fb09 	bl	8001b56 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001544:	f7ff fd2c 	bl	8000fa0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001552:	4293      	cmp	r3, r2
 8001554:	d90f      	bls.n	8001576 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800155a:	6939      	ldr	r1, [r7, #16]
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fd21 	bl	8001fa4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e0a9      	b.n	80016ca <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0da      	beq.n	8001536 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001584:	2100      	movs	r1, #0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fb4d 	bl	8001c26 <HAL_ETH_WritePHYRegister>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001596:	6939      	ldr	r1, [r7, #16]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fd03 	bl	8001fa4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e08f      	b.n	80016ca <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80015aa:	f7ff fcf9 	bl	8000fa0 <HAL_GetTick>
 80015ae:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	461a      	mov	r2, r3
 80015b6:	2101      	movs	r1, #1
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 facc 	bl	8001b56 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015be:	f7ff fcef 	bl	8000fa0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d90f      	bls.n	80015f0 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015d4:	6939      	ldr	r1, [r7, #16]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 fce4 	bl	8001fa4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e06c      	b.n	80016ca <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0da      	beq.n	80015b0 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	461a      	mov	r2, r3
 8001600:	2110      	movs	r1, #16
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 faa7 	bl	8001b56 <HAL_ETH_ReadPHYRegister>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 fcc5 	bl	8001fa4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e051      	b.n	80016ca <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	e002      	b.n	8001640 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e032      	b.n	80016b8 <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	e02d      	b.n	80016b8 <HAL_ETH_Init+0x2fc>
 800165c:	03938700 	.word	0x03938700
 8001660:	40023800 	.word	0x40023800
 8001664:	40013800 	.word	0x40013800
 8001668:	01312cff 	.word	0x01312cff
 800166c:	02160ebf 	.word	0x02160ebf
 8001670:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001684:	4313      	orrs	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 faca 	bl	8001c26 <HAL_ETH_WritePHYRegister>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800169c:	6939      	ldr	r1, [r7, #16]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fc80 	bl	8001fa4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00c      	b.n	80016ca <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016b4:	f7ff fc7e 	bl	8000fb4 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fc72 	bl	8001fa4 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_ETH_DMATxDescListInit+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e052      	b.n	800179a <HAL_ETH_DMATxDescListInit+0xc6>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e030      	b.n	8001772 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	4413      	add	r3, r2
 8001718:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001720:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d208      	bcs.n	8001766 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	015b      	lsls	r3, r3, #5
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	4413      	add	r3, r2
 800175e:	461a      	mov	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	e002      	b.n	800176c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3ca      	bcc.n	8001710 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001784:	3310      	adds	r3, #16
 8001786:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d101      	bne.n	80017c4 <HAL_ETH_DMARxDescListInit+0x20>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e056      	b.n	8001872 <HAL_ETH_DMARxDescListInit+0xce>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
 80017de:	e034      	b.n	800184a <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017f8:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001800:	fb02 f303 	mul.w	r3, r2, r3
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	461a      	mov	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	d208      	bcs.n	800183e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	4413      	add	r3, r2
 8001836:	461a      	mov	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	e002      	b.n	8001844 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d3c6      	bcc.n	80017e0 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185c:	330c      	adds	r3, #12
 800185e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ETH_TransmitFrame+0x24>
 800189c:	2302      	movs	r3, #2
 800189e:	e0cd      	b.n	8001a3c <HAL_ETH_TransmitFrame+0x1c0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0b8      	b.n	8001a3c <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da09      	bge.n	80018e8 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2212      	movs	r2, #18
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0a9      	b.n	8001a3c <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d915      	bls.n	800191e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_ETH_TransmitFrame+0x1cc>)
 80018f6:	fba2 2303 	umull	r2, r3, r2, r3
 80018fa:	0a9b      	lsrs	r3, r3, #10
 80018fc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	4b51      	ldr	r3, [pc, #324]	; (8001a48 <HAL_ETH_TransmitFrame+0x1cc>)
 8001902:	fba3 1302 	umull	r1, r3, r3, r2
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d005      	beq.n	8001922 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e001      	b.n	8001922 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800191e:	2301      	movs	r3, #1
 8001920:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d11c      	bne.n	8001962 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001936:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001942:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001952:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	461a      	mov	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001960:	e04b      	b.n	80019fa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	e044      	b.n	80019f2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001976:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d107      	bne.n	800198e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800198c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001996:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3b01      	subs	r3, #1
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d116      	bne.n	80019d0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019b0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	4a25      	ldr	r2, [pc, #148]	; (8001a4c <HAL_ETH_TransmitFrame+0x1d0>)
 80019b6:	fb02 f203 	mul.w	r2, r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80019c2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ce:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019de:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	461a      	mov	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	3301      	adds	r3, #1
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d3b6      	bcc.n	8001968 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a02:	3314      	adds	r3, #20
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a16:	3314      	adds	r3, #20
 8001a18:	2204      	movs	r2, #4
 8001a1a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	3304      	adds	r3, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	ac02b00b 	.word	0xac02b00b
 8001a4c:	fffffa0c 	.word	0xfffffa0c

08001a50 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ETH_GetReceivedFrame+0x1a>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e070      	b.n	8001b4c <HAL_ETH_GetReceivedFrame+0xfc>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2202      	movs	r2, #2
 8001a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db5a      	blt.n	8001b3a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d030      	beq.n	8001af4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d103      	bne.n	8001aac <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ac0:	3b04      	subs	r3, #4
 8001ac2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e02b      	b.n	8001b4c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d010      	beq.n	8001b24 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
 8001b22:	e00a      	b.n	8001b3a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b82      	cmp	r3, #130	; 0x82
 8001b76:	d101      	bne.n	8001b7c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e050      	b.n	8001c1e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2282      	movs	r2, #130	; 0x82
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 031c 	and.w	r3, r3, #28
 8001b92:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8a1b      	ldrh	r3, [r3, #16]
 8001b98:	02db      	lsls	r3, r3, #11
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001ba2:	897b      	ldrh	r3, [r7, #10]
 8001ba4:	019b      	lsls	r3, r3, #6
 8001ba6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f023 0302 	bic.w	r3, r3, #2
 8001bb6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc8:	f7ff f9ea 	bl	8000fa0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bce:	e015      	b.n	8001bfc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001bd0:	f7ff f9e6 	bl	8000fa0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bde:	d309      	bcc.n	8001bf4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e014      	b.n	8001c1e <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1e4      	bne.n	8001bd0 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b42      	cmp	r3, #66	; 0x42
 8001c46:	d101      	bne.n	8001c4c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e04e      	b.n	8001cea <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2242      	movs	r2, #66	; 0x42
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 031c 	and.w	r3, r3, #28
 8001c62:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8a1b      	ldrh	r3, [r3, #16]
 8001c68:	02db      	lsls	r3, r3, #11
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001c72:	897b      	ldrh	r3, [r7, #10]
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca2:	f7ff f97d 	bl	8000fa0 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ca8:	e015      	b.n	8001cd6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001caa:	f7ff f979 	bl	8000fa0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d309      	bcc.n	8001cce <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e00d      	b.n	8001cea <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e4      	bne.n	8001caa <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ETH_Start+0x16>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e01f      	b.n	8001d48 <HAL_ETH_Start+0x56>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fb43 	bl	80023a4 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fb7a 	bl	8002418 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fc0d 	bl	8002544 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fbae 	bl	800248c <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 fbd9 	bl	80024e8 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ETH_Stop+0x16>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e01f      	b.n	8001da6 <HAL_ETH_Stop+0x56>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fb9f 	bl	80024ba <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fbca 	bl	8002516 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fb65 	bl	8002452 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fbdb 	bl	8002544 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fb25 	bl	80023de <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_ETH_ConfigMAC+0x1c>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e0e4      	b.n	8001f96 <HAL_ETH_ConfigMAC+0x1e6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 80b1 	beq.w	8001f46 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001dfc:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001e02:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001e08:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001e0e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001e14:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001e1a:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001e20:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001e26:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001e2c:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001e32:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8001e38:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8001e3e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f7ff f8ac 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001e6c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e72:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e78:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001e7e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e84:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e8a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e96:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001e98:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7ff f886 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001eb8:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ec2:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ee0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001ee6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001eec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001ef2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ef8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f10:	2001      	movs	r0, #1
 8001f12:	f7ff f84f 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f7ff f83c 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	61da      	str	r2, [r3, #28]
 8001f44:	e01e      	b.n	8001f84 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f54:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff f81c 	bl	8000fb4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	ff20810f 	.word	0xff20810f

08001fa4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0b0      	sub	sp, #192	; 0xc0
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc0:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fc8:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fee:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff0:	e001      	b.n	8001ff6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002000:	2300      	movs	r3, #0
 8002002:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002078:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800207c:	4bac      	ldr	r3, [pc, #688]	; (8002330 <ETH_MACDMAConfig+0x38c>)
 800207e:	4013      	ands	r3, r2
 8002080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002084:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8002086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002088:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 800208a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 800208c:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800208e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002090:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002096:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 800209a:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 800209c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 800209e:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80020a4:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80020a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80020a8:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80020aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80020ac:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80020ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80020b0:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80020b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80020b4:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80020b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80020b8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80020ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe ff6b 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020e6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80020e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80020ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80020ec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80020ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80020f0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80020f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80020f6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80020f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 80020fc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80020fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002102:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002104:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002108:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800210c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002114:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002116:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe ff46 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002130:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800213a:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002144:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002150:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002154:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002158:	4013      	ands	r3, r2
 800215a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800215e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002162:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002168:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800216a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800216e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002174:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 800217a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 800217c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002180:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002182:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002194:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7fe ff07 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ae:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80021b0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80021b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7fe fef2 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d8:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e2:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80021e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021ec:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80021fe:	2304      	movs	r3, #4
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800220e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800221e:	2300      	movs	r3, #0
 8002220:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002222:	2300      	movs	r3, #0
 8002224:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222e:	3318      	adds	r3, #24
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002236:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800223a:	4b3e      	ldr	r3, [pc, #248]	; (8002334 <ETH_MACDMAConfig+0x390>)
 800223c:	4013      	ands	r3, r2
 800223e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002242:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8002244:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002246:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002248:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 800224a:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 800224c:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 800224e:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002250:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002252:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002254:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8002256:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002258:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 800225a:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 800225e:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8002262:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002264:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002276:	3318      	adds	r3, #24
 8002278:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800227c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002286:	3318      	adds	r3, #24
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800228e:	2001      	movs	r0, #1
 8002290:	f7fe fe90 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	3318      	adds	r3, #24
 800229e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a2:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80022a8:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80022ac:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80022ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80022b0:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80022b4:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80022b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b8:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80022ba:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80022bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80022be:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022dc:	2001      	movs	r0, #1
 80022de:	f7fe fe69 	bl	8000fb4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ee:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10f      	bne.n	8002318 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	331c      	adds	r3, #28
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800230c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002314:	331c      	adds	r3, #28
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	461a      	mov	r2, r3
 800231e:	2100      	movs	r1, #0
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f809 	bl	8002338 <ETH_MACAddressConfig>
}
 8002326:	bf00      	nop
 8002328:	37c0      	adds	r7, #192	; 0xc0
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	ff20810f 	.word	0xff20810f
 8002334:	f8de3f23 	.word	0xf8de3f23

08002338 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3305      	adds	r3, #5
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	3204      	adds	r2, #4
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	4b10      	ldr	r3, [pc, #64]	; (800239c <ETH_MACAddressConfig+0x64>)
 800235a:	4413      	add	r3, r2
 800235c:	461a      	mov	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3303      	adds	r3, #3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	061a      	lsls	r2, r3, #24
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3302      	adds	r3, #2
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3301      	adds	r3, #1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	021b      	lsls	r3, r3, #8
 800237c:	4313      	orrs	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	7812      	ldrb	r2, [r2, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <ETH_MACAddressConfig+0x68>)
 800238a:	4413      	add	r3, r2
 800238c:	461a      	mov	r2, r3
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	6013      	str	r3, [r2, #0]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40028040 	.word	0x40028040
 80023a0:	40028044 	.word	0x40028044

080023a4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0208 	orr.w	r2, r2, #8
 80023be:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f000 f8e5 	bl	8002598 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	601a      	str	r2, [r3, #0]
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0208 	bic.w	r2, r2, #8
 80023f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002402:	2001      	movs	r0, #1
 8002404:	f000 f8c8 	bl	8002598 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0204 	orr.w	r2, r2, #4
 8002432:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800243c:	2001      	movs	r0, #1
 800243e:	f000 f8ab 	bl	8002598 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0204 	bic.w	r2, r2, #4
 800246c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002476:	2001      	movs	r0, #1
 8002478:	f000 f88e 	bl	8002598 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249c:	3318      	adds	r3, #24
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ac:	3318      	adds	r3, #24
 80024ae:	601a      	str	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ca:	3318      	adds	r3, #24
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024da:	3318      	adds	r3, #24
 80024dc:	601a      	str	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f8:	3318      	adds	r3, #24
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0202 	orr.w	r2, r2, #2
 8002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002508:	3318      	adds	r3, #24
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002526:	3318      	adds	r3, #24
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0202 	bic.w	r2, r2, #2
 8002532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002536:	3318      	adds	r3, #24
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002558:	3318      	adds	r3, #24
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002568:	3318      	adds	r3, #24
 800256a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002574:	3318      	adds	r3, #24
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800257a:	2001      	movs	r0, #1
 800257c:	f000 f80c 	bl	8002598 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258a:	3318      	adds	r3, #24
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <ETH_Delay+0x34>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <ETH_Delay+0x38>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0a5b      	lsrs	r3, r3, #9
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b4:	bf00      	nop
  }
  while (Delay --);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1e5a      	subs	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <ETH_Delay+0x1c>
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	20000008 	.word	0x20000008
 80025d0:	10624dd3 	.word	0x10624dd3

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	e16f      	b.n	80028c4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	4013      	ands	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8161 	beq.w	80028be <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d00b      	beq.n	800261c <HAL_GPIO_Init+0x48>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002610:	2b11      	cmp	r3, #17
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b12      	cmp	r3, #18
 800261a:	d130      	bne.n	800267e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002652:	2201      	movs	r2, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 0201 	and.w	r2, r3, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0xea>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b12      	cmp	r3, #18
 80026bc:	d123      	bne.n	8002706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	6939      	ldr	r1, [r7, #16]
 8002702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	2203      	movs	r2, #3
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0203 	and.w	r2, r3, #3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80bb 	beq.w	80028be <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	4a63      	ldr	r2, [pc, #396]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 8002752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002756:	6453      	str	r3, [r2, #68]	; 0x44
 8002758:	4b61      	ldr	r3, [pc, #388]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002764:	4a5f      	ldr	r2, [pc, #380]	; (80028e4 <HAL_GPIO_Init+0x310>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	220f      	movs	r2, #15
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <HAL_GPIO_Init+0x314>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d031      	beq.n	80027f4 <HAL_GPIO_Init+0x220>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a56      	ldr	r2, [pc, #344]	; (80028ec <HAL_GPIO_Init+0x318>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d02b      	beq.n	80027f0 <HAL_GPIO_Init+0x21c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a55      	ldr	r2, [pc, #340]	; (80028f0 <HAL_GPIO_Init+0x31c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d025      	beq.n	80027ec <HAL_GPIO_Init+0x218>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a54      	ldr	r2, [pc, #336]	; (80028f4 <HAL_GPIO_Init+0x320>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d01f      	beq.n	80027e8 <HAL_GPIO_Init+0x214>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a53      	ldr	r2, [pc, #332]	; (80028f8 <HAL_GPIO_Init+0x324>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d019      	beq.n	80027e4 <HAL_GPIO_Init+0x210>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_GPIO_Init+0x328>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d013      	beq.n	80027e0 <HAL_GPIO_Init+0x20c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a51      	ldr	r2, [pc, #324]	; (8002900 <HAL_GPIO_Init+0x32c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00d      	beq.n	80027dc <HAL_GPIO_Init+0x208>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a50      	ldr	r2, [pc, #320]	; (8002904 <HAL_GPIO_Init+0x330>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <HAL_GPIO_Init+0x204>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a4f      	ldr	r2, [pc, #316]	; (8002908 <HAL_GPIO_Init+0x334>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_GPIO_Init+0x200>
 80027d0:	2308      	movs	r3, #8
 80027d2:	e010      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027d4:	2309      	movs	r3, #9
 80027d6:	e00e      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027d8:	2307      	movs	r3, #7
 80027da:	e00c      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027dc:	2306      	movs	r3, #6
 80027de:	e00a      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027e0:	2305      	movs	r3, #5
 80027e2:	e008      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e006      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027e8:	2303      	movs	r3, #3
 80027ea:	e004      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e002      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_GPIO_Init+0x222>
 80027f4:	2300      	movs	r3, #0
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	f002 0203 	and.w	r2, r2, #3
 80027fc:	0092      	lsls	r2, r2, #2
 80027fe:	4093      	lsls	r3, r2
 8002800:	461a      	mov	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002808:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_GPIO_Init+0x310>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <HAL_GPIO_Init+0x338>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	43db      	mvns	r3, r3
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800283a:	4a34      	ldr	r2, [pc, #208]	; (800290c <HAL_GPIO_Init+0x338>)
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002840:	4b32      	ldr	r3, [pc, #200]	; (800290c <HAL_GPIO_Init+0x338>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002864:	4a29      	ldr	r2, [pc, #164]	; (800290c <HAL_GPIO_Init+0x338>)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_GPIO_Init+0x338>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	43db      	mvns	r3, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4013      	ands	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800288e:	4a1f      	ldr	r2, [pc, #124]	; (800290c <HAL_GPIO_Init+0x338>)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002894:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_GPIO_Init+0x338>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_GPIO_Init+0x338>)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa22 f303 	lsr.w	r3, r2, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f47f ae88 	bne.w	80025e4 <HAL_GPIO_Init+0x10>
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40022000 	.word	0x40022000
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	041a      	lsls	r2, r3, #16
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	43d9      	mvns	r1, r3
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	400b      	ands	r3, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002974:	b08f      	sub	sp, #60	; 0x3c
 8002976:	af0a      	add	r7, sp, #40	; 0x28
 8002978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e10f      	b.n	8002ba4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe f948 	bl	8000c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2203      	movs	r2, #3
 80029a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 feed 	bl	80037a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	687e      	ldr	r6, [r7, #4]
 80029d0:	466d      	mov	r5, sp
 80029d2:	f106 0410 	add.w	r4, r6, #16
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029e6:	1d33      	adds	r3, r6, #4
 80029e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ea:	6838      	ldr	r0, [r7, #0]
 80029ec:	f000 fe82 	bl	80036f4 <USB_CoreInit>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0d0      	b.n	8002ba4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 feda 	bl	80037c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e04a      	b.n	8002aaa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	333d      	adds	r3, #61	; 0x3d
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	333c      	adds	r3, #60	; 0x3c
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	b298      	uxth	r0, r3
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3342      	adds	r3, #66	; 0x42
 8002a50:	4602      	mov	r2, r0
 8002a52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	333f      	adds	r3, #63	; 0x3f
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3344      	adds	r3, #68	; 0x44
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3348      	adds	r3, #72	; 0x48
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3350      	adds	r3, #80	; 0x50
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3af      	bcc.n	8002a14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	e044      	b.n	8002b44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	3301      	adds	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d3b5      	bcc.n	8002aba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	687e      	ldr	r6, [r7, #4]
 8002b56:	466d      	mov	r5, sp
 8002b58:	f106 0410 	add.w	r4, r6, #16
 8002b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b6c:	1d33      	adds	r3, r6, #4
 8002b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b70:	6838      	ldr	r0, [r7, #0]
 8002b72:	f000 fe51 	bl	8003818 <USB_DevInit>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e00d      	b.n	8002ba4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fffb 	bl	8003b98 <USB_DevDisconnect>

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e237      	b.n	800302e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d050      	beq.n	8002c6c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	4ba3      	ldr	r3, [pc, #652]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4ba0      	ldr	r3, [pc, #640]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d112      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be2:	4b9d      	ldr	r3, [pc, #628]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bee:	d10b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	4b99      	ldr	r3, [pc, #612]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d036      	beq.n	8002c6a <HAL_RCC_OscConfig+0xbe>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d132      	bne.n	8002c6a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e212      	b.n	800302e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4b93      	ldr	r3, [pc, #588]	; (8002e5c <HAL_RCC_OscConfig+0x2b0>)
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d013      	beq.n	8002c42 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe f9c1 	bl	8000fa0 <HAL_GetTick>
 8002c1e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c22:	f7fe f9bd 	bl	8000fa0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	; 0x64
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e1fc      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c34:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x76>
 8002c40:	e014      	b.n	8002c6c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe f9ad 	bl	8000fa0 <HAL_GetTick>
 8002c46:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4a:	f7fe f9a9 	bl	8000fa0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e1e8      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5c:	4b7e      	ldr	r3, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x9e>
 8002c68:	e000      	b.n	8002c6c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d077      	beq.n	8002d68 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c78:	4b77      	ldr	r3, [pc, #476]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c84:	4b74      	ldr	r3, [pc, #464]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d126      	bne.n	8002cde <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c90:	4b71      	ldr	r3, [pc, #452]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d120      	bne.n	8002cde <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9c:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x108>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e1bc      	b.n	800302e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	21f8      	movs	r1, #248	; 0xf8
 8002cc2:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	69b9      	ldr	r1, [r7, #24]
 8002cc6:	fa91 f1a1 	rbit	r1, r1
 8002cca:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	fab1 f181 	clz	r1, r1
 8002cd2:	b2c9      	uxtb	r1, r1
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4960      	ldr	r1, [pc, #384]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cdc:	e044      	b.n	8002d68 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d02a      	beq.n	8002d3c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce6:	4b5e      	ldr	r3, [pc, #376]	; (8002e60 <HAL_RCC_OscConfig+0x2b4>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe f958 	bl	8000fa0 <HAL_GetTick>
 8002cf0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fe f954 	bl	8000fa0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e193      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d12:	4b51      	ldr	r3, [pc, #324]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	21f8      	movs	r1, #248	; 0xf8
 8002d20:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	6939      	ldr	r1, [r7, #16]
 8002d24:	fa91 f1a1 	rbit	r1, r1
 8002d28:	60f9      	str	r1, [r7, #12]
  return result;
 8002d2a:	68f9      	ldr	r1, [r7, #12]
 8002d2c:	fab1 f181 	clz	r1, r1
 8002d30:	b2c9      	uxtb	r1, r1
 8002d32:	408b      	lsls	r3, r1
 8002d34:	4948      	ldr	r1, [pc, #288]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
 8002d3a:	e015      	b.n	8002d68 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <HAL_RCC_OscConfig+0x2b4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe f92d 	bl	8000fa0 <HAL_GetTick>
 8002d46:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fe f929 	bl	8000fa0 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e168      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5c:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d030      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d016      	beq.n	8002daa <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <HAL_RCC_OscConfig+0x2b8>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d82:	f7fe f90d 	bl	8000fa0 <HAL_GetTick>
 8002d86:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8a:	f7fe f909 	bl	8000fa0 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e148      	b.n	800302e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9c:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1de>
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCC_OscConfig+0x2b8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db0:	f7fe f8f6 	bl	8000fa0 <HAL_GetTick>
 8002db4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db8:	f7fe f8f2 	bl	8000fa0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e131      	b.n	800302e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8088 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d110      	bne.n	8002e18 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_RCC_OscConfig+0x2bc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_RCC_OscConfig+0x2bc>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_RCC_OscConfig+0x2bc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d123      	bne.n	8002e78 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <HAL_RCC_OscConfig+0x2bc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0c      	ldr	r2, [pc, #48]	; (8002e68 <HAL_RCC_OscConfig+0x2bc>)
 8002e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe f8b0 	bl	8000fa0 <HAL_GetTick>
 8002e40:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	e013      	b.n	8002e6c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e44:	f7fe f8ac 	bl	8000fa0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d90c      	bls.n	8002e6c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0eb      	b.n	800302e <HAL_RCC_OscConfig+0x482>
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40023802 	.word	0x40023802
 8002e60:	42470000 	.word	0x42470000
 8002e64:	42470e80 	.word	0x42470e80
 8002e68:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	4b72      	ldr	r3, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x48c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0e5      	beq.n	8002e44 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b6f      	ldr	r3, [pc, #444]	; (800303c <HAL_RCC_OscConfig+0x490>)
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d015      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe f889 	bl	8000fa0 <HAL_GetTick>
 8002e8e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7fe f885 	bl	8000fa0 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0c2      	b.n	800302e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	4b65      	ldr	r3, [pc, #404]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ee      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2e6>
 8002eb4:	e014      	b.n	8002ee0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f873 	bl	8000fa0 <HAL_GetTick>
 8002eba:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe f86f 	bl	8000fa0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0ac      	b.n	800302e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ee      	bne.n	8002ebe <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee8:	4b55      	ldr	r3, [pc, #340]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	4a54      	ldr	r2, [pc, #336]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8097 	beq.w	800302c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002efe:	4b50      	ldr	r3, [pc, #320]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d061      	beq.n	8002fce <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d146      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <HAL_RCC_OscConfig+0x498>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe f842 	bl	8000fa0 <HAL_GetTick>
 8002f1c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe f83e 	bl	8000fa0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e07d      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	4b43      	ldr	r3, [pc, #268]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f3e:	4b40      	ldr	r3, [pc, #256]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_RCC_OscConfig+0x49c>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	69d1      	ldr	r1, [r2, #28]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6a12      	ldr	r2, [r2, #32]
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f54:	0192      	lsls	r2, r2, #6
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f5c:	0612      	lsls	r2, r2, #24
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f64:	0852      	lsrs	r2, r2, #1
 8002f66:	3a01      	subs	r2, #1
 8002f68:	0412      	lsls	r2, r2, #16
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	4934      	ldr	r1, [pc, #208]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f72:	4b34      	ldr	r3, [pc, #208]	; (8003044 <HAL_RCC_OscConfig+0x498>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fe f812 	bl	8000fa0 <HAL_GetTick>
 8002f7c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe f80e 	bl	8000fa0 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e04d      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x3d4>
 8002f9e:	e045      	b.n	800302c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCC_OscConfig+0x498>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa6:	f7fd fffb 	bl	8000fa0 <HAL_GetTick>
 8002faa:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fd fff7 	bl	8000fa0 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b64      	cmp	r3, #100	; 0x64
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e036      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x402>
 8002fcc:	e02e      	b.n	800302c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e029      	b.n	800302e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002fda:	4b19      	ldr	r3, [pc, #100]	; (8003040 <HAL_RCC_OscConfig+0x494>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d11c      	bne.n	8003028 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d115      	bne.n	8003028 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d10d      	bne.n	8003028 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d106      	bne.n	8003028 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40007000 	.word	0x40007000
 800303c:	40023870 	.word	0x40023870
 8003040:	40023800 	.word	0x40023800
 8003044:	42470060 	.word	0x42470060
 8003048:	f0bc8000 	.word	0xf0bc8000

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0d2      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b6b      	ldr	r3, [pc, #428]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d90c      	bls.n	8003088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b68      	ldr	r3, [pc, #416]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b66      	ldr	r3, [pc, #408]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0be      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a5b      	ldr	r2, [pc, #364]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80030b8:	4b56      	ldr	r3, [pc, #344]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a55      	ldr	r2, [pc, #340]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b53      	ldr	r3, [pc, #332]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4950      	ldr	r1, [pc, #320]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d040      	beq.n	8003164 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e085      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b44      	ldr	r3, [pc, #272]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e079      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b40      	ldr	r3, [pc, #256]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e071      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b3c      	ldr	r3, [pc, #240]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4939      	ldr	r1, [pc, #228]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003134:	f7fd ff34 	bl	8000fa0 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fd ff30 	bl	8000fa0 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e059      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d20c      	bcs.n	800318c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e03c      	b.n	8003206 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	491b      	ldr	r1, [pc, #108]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4913      	ldr	r1, [pc, #76]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80031ca:	f000 f82b 	bl	8003224 <HAL_RCC_GetSysClockFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_RCC_ClockConfig+0x1c8>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d8:	22f0      	movs	r2, #240	; 0xf0
 80031da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	fa92 f2a2 	rbit	r2, r2
 80031e2:	60fa      	str	r2, [r7, #12]
  return result;
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	fab2 f282 	clz	r2, r2
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	40d3      	lsrs	r3, r2
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <HAL_RCC_ClockConfig+0x1cc>)
 80031f0:	5cd3      	ldrb	r3, [r2, r3]
 80031f2:	fa21 f303 	lsr.w	r3, r1, r3
 80031f6:	4a09      	ldr	r2, [pc, #36]	; (800321c <HAL_RCC_ClockConfig+0x1d0>)
 80031f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1d4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd fe8c 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40023c00 	.word	0x40023c00
 8003214:	40023800 	.word	0x40023800
 8003218:	080121f0 	.word	0x080121f0
 800321c:	20000008 	.word	0x20000008
 8003220:	2000000c 	.word	0x2000000c

08003224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800322c:	2300      	movs	r3, #0
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	2300      	movs	r3, #0
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	2300      	movs	r3, #0
 8003236:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800323c:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d00d      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x40>
 8003248:	2b08      	cmp	r3, #8
 800324a:	f200 80bd 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x34>
 8003252:	2b04      	cmp	r3, #4
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x3a>
 8003256:	e0b7      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800325a:	60bb      	str	r3, [r7, #8]
       break;
 800325c:	e0b7      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800325e:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003260:	60bb      	str	r3, [r7, #8]
      break;
 8003262:	e0b4      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003264:	4b5d      	ldr	r3, [pc, #372]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800326e:	4b5b      	ldr	r3, [pc, #364]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04d      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	099b      	lsrs	r3, r3, #6
 8003280:	461a      	mov	r2, r3
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800328a:	f04f 0100 	mov.w	r1, #0
 800328e:	ea02 0800 	and.w	r8, r2, r0
 8003292:	ea03 0901 	and.w	r9, r3, r1
 8003296:	4640      	mov	r0, r8
 8003298:	4649      	mov	r1, r9
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	014b      	lsls	r3, r1, #5
 80032a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032a8:	0142      	lsls	r2, r0, #5
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	ebb0 0008 	subs.w	r0, r0, r8
 80032b2:	eb61 0109 	sbc.w	r1, r1, r9
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032c4:	0182      	lsls	r2, r0, #6
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	eb63 0301 	sbc.w	r3, r3, r1
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	00d9      	lsls	r1, r3, #3
 80032d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032da:	00d0      	lsls	r0, r2, #3
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	eb12 0208 	adds.w	r2, r2, r8
 80032e4:	eb43 0309 	adc.w	r3, r3, r9
 80032e8:	f04f 0000 	mov.w	r0, #0
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	0259      	lsls	r1, r3, #9
 80032f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032f6:	0250      	lsls	r0, r2, #9
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	461a      	mov	r2, r3
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	f7fc ff6e 	bl	80001e8 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e04a      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	461a      	mov	r2, r3
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	ea02 0400 	and.w	r4, r2, r0
 800332e:	ea03 0501 	and.w	r5, r3, r1
 8003332:	4620      	mov	r0, r4
 8003334:	4629      	mov	r1, r5
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	014b      	lsls	r3, r1, #5
 8003340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003344:	0142      	lsls	r2, r0, #5
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	1b00      	subs	r0, r0, r4
 800334c:	eb61 0105 	sbc.w	r1, r1, r5
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	018b      	lsls	r3, r1, #6
 800335a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800335e:	0182      	lsls	r2, r0, #6
 8003360:	1a12      	subs	r2, r2, r0
 8003362:	eb63 0301 	sbc.w	r3, r3, r1
 8003366:	f04f 0000 	mov.w	r0, #0
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	00d9      	lsls	r1, r3, #3
 8003370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003374:	00d0      	lsls	r0, r2, #3
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	1912      	adds	r2, r2, r4
 800337c:	eb45 0303 	adc.w	r3, r5, r3
 8003380:	f04f 0000 	mov.w	r0, #0
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	0299      	lsls	r1, r3, #10
 800338a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800338e:	0290      	lsls	r0, r2, #10
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4610      	mov	r0, r2
 8003396:	4619      	mov	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	461a      	mov	r2, r3
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f7fc ff22 	bl	80001e8 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	60bb      	str	r3, [r7, #8]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ca:	60bb      	str	r3, [r7, #8]
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	68bb      	ldr	r3, [r7, #8]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b02      	ldr	r3, [pc, #8]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	20000008 	.word	0x20000008

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003402:	f7ff fff1 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003406:	4601      	mov	r1, r0
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003410:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003414:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	fa92 f2a2 	rbit	r2, r2
 800341c:	603a      	str	r2, [r7, #0]
  return result;
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	40d3      	lsrs	r3, r2
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <HAL_RCC_GetPCLK1Freq+0x40>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	08012200 	.word	0x08012200

08003440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003446:	f7ff ffcf 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 800344a:	4601      	mov	r1, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003454:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003458:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	fa92 f2a2 	rbit	r2, r2
 8003460:	603a      	str	r2, [r7, #0]
  return result;
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	fab2 f282 	clz	r2, r2
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	40d3      	lsrs	r3, r2
 800346c:	4a04      	ldr	r2, [pc, #16]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x40>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40023800 	.word	0x40023800
 8003480:	08012200 	.word	0x08012200

08003484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e03f      	b.n	8003516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fb7a 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f829 	bl	8003520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003560:	f023 030c 	bic.w	r3, r3, #12
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	430b      	orrs	r3, r1
 800356c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a57      	ldr	r2, [pc, #348]	; (80036e8 <UART_SetConfig+0x1c8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <UART_SetConfig+0x78>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a56      	ldr	r2, [pc, #344]	; (80036ec <UART_SetConfig+0x1cc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d103      	bne.n	80035a0 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7ff ff52 	bl	8003440 <HAL_RCC_GetPCLK2Freq>
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	e002      	b.n	80035a6 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a0:	f7ff ff2c 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ae:	d14c      	bne.n	800364a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009a      	lsls	r2, r3, #2
 80035ba:	441a      	add	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c6:	4a4a      	ldr	r2, [pc, #296]	; (80036f0 <UART_SetConfig+0x1d0>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	0119      	lsls	r1, r3, #4
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	441a      	add	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <UART_SetConfig+0x1d0>)
 80035e8:	fba3 0302 	umull	r0, r3, r3, r2
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	2064      	movs	r0, #100	; 0x64
 80035f0:	fb00 f303 	mul.w	r3, r0, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	3332      	adds	r3, #50	; 0x32
 80035fa:	4a3d      	ldr	r2, [pc, #244]	; (80036f0 <UART_SetConfig+0x1d0>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003608:	4419      	add	r1, r3
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	441a      	add	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003620:	4b33      	ldr	r3, [pc, #204]	; (80036f0 <UART_SetConfig+0x1d0>)
 8003622:	fba3 0302 	umull	r0, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2064      	movs	r0, #100	; 0x64
 800362a:	fb00 f303 	mul.w	r3, r0, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	3332      	adds	r3, #50	; 0x32
 8003634:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <UART_SetConfig+0x1d0>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	f003 0207 	and.w	r2, r3, #7
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	440a      	add	r2, r1
 8003646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003648:	e04a      	b.n	80036e0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <UART_SetConfig+0x1d0>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	0119      	lsls	r1, r3, #4
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009a      	lsls	r2, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <UART_SetConfig+0x1d0>)
 8003682:	fba3 0302 	umull	r0, r3, r3, r2
 8003686:	095b      	lsrs	r3, r3, #5
 8003688:	2064      	movs	r0, #100	; 0x64
 800368a:	fb00 f303 	mul.w	r3, r0, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	3332      	adds	r3, #50	; 0x32
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <UART_SetConfig+0x1d0>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a0:	4419      	add	r1, r3
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009a      	lsls	r2, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <UART_SetConfig+0x1d0>)
 80036ba:	fba3 0302 	umull	r0, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2064      	movs	r0, #100	; 0x64
 80036c2:	fb00 f303 	mul.w	r3, r0, r3
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	3332      	adds	r3, #50	; 0x32
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <UART_SetConfig+0x1d0>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	440a      	add	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40011400 	.word	0x40011400
 80036f0:	51eb851f 	.word	0x51eb851f

080036f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036f4:	b084      	sub	sp, #16
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	f107 001c 	add.w	r0, r7, #28
 8003702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	2b01      	cmp	r3, #1
 800370a:	d122      	bne.n	8003752 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa46 	bl	8003bd8 <USB_CoreReset>
 800374c:	4603      	mov	r3, r0
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e010      	b.n	8003774 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fa3a 	bl	8003bd8 <USB_CoreReset>
 8003764:	4603      	mov	r3, r0
 8003766:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10b      	bne.n	8003792 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f043 0206 	orr.w	r2, r3, #6
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800379e:	b004      	add	sp, #16
 80037a0:	4770      	bx	lr

080037a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 0201 	bic.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d106      	bne.n	80037ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
 80037ec:	e00b      	b.n	8003806 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d106      	bne.n	8003802 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	e001      	b.n	8003806 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e003      	b.n	800380e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003806:	2032      	movs	r0, #50	; 0x32
 8003808:	f7fd fbd4 	bl	8000fb4 <HAL_Delay>

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003818:	b084      	sub	sp, #16
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	e009      	b.n	800384c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3340      	adds	r3, #64	; 0x40
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	2200      	movs	r2, #0
 8003844:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3301      	adds	r3, #1
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b0e      	cmp	r3, #14
 8003850:	d9f2      	bls.n	8003838 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11c      	bne.n	8003892 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003866:	f043 0302 	orr.w	r3, r3, #2
 800386a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
 8003890:	e00b      	b.n	80038aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038b0:	461a      	mov	r2, r3
 80038b2:	2300      	movs	r3, #0
 80038b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038bc:	4619      	mov	r1, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c4:	461a      	mov	r2, r3
 80038c6:	680b      	ldr	r3, [r1, #0]
 80038c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10c      	bne.n	80038ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038d6:	2100      	movs	r1, #0
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 f945 	bl	8003b68 <USB_SetDevSpeed>
 80038de:	e008      	b.n	80038f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038e0:	2101      	movs	r1, #1
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f940 	bl	8003b68 <USB_SetDevSpeed>
 80038e8:	e003      	b.n	80038f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038ea:	2103      	movs	r1, #3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f93b 	bl	8003b68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038f2:	2110      	movs	r1, #16
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f8f3 	bl	8003ae0 <USB_FlushTxFifo>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f90f 	bl	8003b28 <USB_FlushRxFifo>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	461a      	mov	r2, r3
 800391c:	2300      	movs	r3, #0
 800391e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003932:	461a      	mov	r2, r3
 8003934:	2300      	movs	r3, #0
 8003936:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003938:	2300      	movs	r3, #0
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e043      	b.n	80039c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003954:	d118      	bne.n	8003988 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	461a      	mov	r2, r3
 800396a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e013      	b.n	800399a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397e:	461a      	mov	r2, r3
 8003980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e008      	b.n	800399a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	461a      	mov	r2, r3
 8003996:	2300      	movs	r3, #0
 8003998:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a6:	461a      	mov	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b8:	461a      	mov	r2, r3
 80039ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	3301      	adds	r3, #1
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3b7      	bcc.n	800393e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e043      	b.n	8003a5c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ea:	d118      	bne.n	8003a1e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fe:	461a      	mov	r2, r3
 8003a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	e013      	b.n	8003a30 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	e008      	b.n	8003a30 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2300      	movs	r3, #0
 8003a40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d3b7      	bcc.n	80039d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f043 0210 	orr.w	r2, r3, #16
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <USB_DevInit+0x2c4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f043 0208 	orr.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d107      	bne.n	8003acc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ac4:	f043 0304 	orr.w	r3, r3, #4
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad8:	b004      	add	sp, #16
 8003ada:	4770      	bx	lr
 8003adc:	803c3800 	.word	0x803c3800

08003ae0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3301      	adds	r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <USB_FlushTxFifo+0x44>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e006      	b.n	8003b1a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d0f0      	beq.n	8003afa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	00030d40 	.word	0x00030d40

08003b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2210      	movs	r2, #16
 8003b38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <USB_FlushRxFifo+0x3c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e006      	b.n	8003b5a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d0f0      	beq.n	8003b3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	00030d40 	.word	0x00030d40

08003b68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bc6:	f043 0302 	orr.w	r3, r3, #2
 8003bca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a12      	ldr	r2, [pc, #72]	; (8003c38 <USB_CoreReset+0x60>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e01b      	b.n	8003c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	daf2      	bge.n	8003be4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3301      	adds	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <USB_CoreReset+0x60>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e006      	b.n	8003c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d0f0      	beq.n	8003c0e <USB_CoreReset+0x36>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	00030d40 	.word	0x00030d40

08003c3c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003c42:	4b8d      	ldr	r3, [pc, #564]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003c44:	22c0      	movs	r2, #192	; 0xc0
 8003c46:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003c48:	4b8b      	ldr	r3, [pc, #556]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003c4a:	22a8      	movs	r2, #168	; 0xa8
 8003c4c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003c4e:	4b8a      	ldr	r3, [pc, #552]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 101;
 8003c54:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003c56:	2265      	movs	r2, #101	; 0x65
 8003c58:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003c5a:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003c5c:	22ff      	movs	r2, #255	; 0xff
 8003c5e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003c60:	4b86      	ldr	r3, [pc, #536]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003c62:	22ff      	movs	r2, #255	; 0xff
 8003c64:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003c66:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003c6c:	4b83      	ldr	r3, [pc, #524]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003c72:	4b83      	ldr	r3, [pc, #524]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003c74:	22c0      	movs	r2, #192	; 0xc0
 8003c76:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003c78:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003c7a:	22a8      	movs	r2, #168	; 0xa8
 8003c7c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003c7e:	4b80      	ldr	r3, [pc, #512]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003c84:	4b7e      	ldr	r3, [pc, #504]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003c8a:	f002 f873 	bl	8005d74 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003c8e:	4b7a      	ldr	r3, [pc, #488]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	061a      	lsls	r2, r3, #24
 8003c94:	4b78      	ldr	r3, [pc, #480]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003c9e:	789b      	ldrb	r3, [r3, #2]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	4a74      	ldr	r2, [pc, #464]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003ca6:	78d2      	ldrb	r2, [r2, #3]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	061a      	lsls	r2, r3, #24
 8003cac:	4b72      	ldr	r3, [pc, #456]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	0619      	lsls	r1, r3, #24
 8003cb2:	4b71      	ldr	r3, [pc, #452]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	4319      	orrs	r1, r3
 8003cba:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cbc:	789b      	ldrb	r3, [r3, #2]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	496d      	ldr	r1, [pc, #436]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cc4:	78c9      	ldrb	r1, [r1, #3]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	4b69      	ldr	r3, [pc, #420]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	0619      	lsls	r1, r3, #24
 8003cd6:	4b68      	ldr	r3, [pc, #416]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	4319      	orrs	r1, r3
 8003cde:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003ce0:	789b      	ldrb	r3, [r3, #2]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	4964      	ldr	r1, [pc, #400]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003ce8:	78c9      	ldrb	r1, [r1, #3]
 8003cea:	430b      	orrs	r3, r1
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	4b60      	ldr	r3, [pc, #384]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	0619      	lsls	r1, r3, #24
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	4319      	orrs	r1, r3
 8003d02:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003d04:	789b      	ldrb	r3, [r3, #2]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	495b      	ldr	r1, [pc, #364]	; (8003e78 <MX_LWIP_Init+0x23c>)
 8003d0c:	78c9      	ldrb	r1, [r1, #3]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	4313      	orrs	r3, r2
 8003d14:	4a5b      	ldr	r2, [pc, #364]	; (8003e84 <MX_LWIP_Init+0x248>)
 8003d16:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003d18:	4b58      	ldr	r3, [pc, #352]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	061a      	lsls	r2, r3, #24
 8003d1e:	4b57      	ldr	r3, [pc, #348]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d28:	789b      	ldrb	r3, [r3, #2]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	4a53      	ldr	r2, [pc, #332]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d30:	78d2      	ldrb	r2, [r2, #3]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	061a      	lsls	r2, r3, #24
 8003d36:	4b51      	ldr	r3, [pc, #324]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	0619      	lsls	r1, r3, #24
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	4319      	orrs	r1, r3
 8003d44:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d46:	789b      	ldrb	r3, [r3, #2]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	494b      	ldr	r1, [pc, #300]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d4e:	78c9      	ldrb	r1, [r1, #3]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	0619      	lsls	r1, r3, #24
 8003d60:	4b46      	ldr	r3, [pc, #280]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	4319      	orrs	r1, r3
 8003d68:	4b44      	ldr	r3, [pc, #272]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d6a:	789b      	ldrb	r3, [r3, #2]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	4942      	ldr	r1, [pc, #264]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d72:	78c9      	ldrb	r1, [r1, #3]
 8003d74:	430b      	orrs	r3, r1
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	0619      	lsls	r1, r3, #24
 8003d84:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d86:	785b      	ldrb	r3, [r3, #1]
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	4319      	orrs	r1, r3
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d8e:	789b      	ldrb	r3, [r3, #2]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	430b      	orrs	r3, r1
 8003d94:	4939      	ldr	r1, [pc, #228]	; (8003e7c <MX_LWIP_Init+0x240>)
 8003d96:	78c9      	ldrb	r1, [r1, #3]
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	0e1b      	lsrs	r3, r3, #24
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <MX_LWIP_Init+0x24c>)
 8003da0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003da2:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	061a      	lsls	r2, r3, #24
 8003da8:	4b35      	ldr	r3, [pc, #212]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003daa:	785b      	ldrb	r3, [r3, #1]
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	4b33      	ldr	r3, [pc, #204]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003db2:	789b      	ldrb	r3, [r3, #2]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	4313      	orrs	r3, r2
 8003db8:	4a31      	ldr	r2, [pc, #196]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003dba:	78d2      	ldrb	r2, [r2, #3]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	061a      	lsls	r2, r3, #24
 8003dc0:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	0619      	lsls	r1, r3, #24
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	041b      	lsls	r3, r3, #16
 8003dcc:	4319      	orrs	r1, r3
 8003dce:	4b2c      	ldr	r3, [pc, #176]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	492a      	ldr	r1, [pc, #168]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003dd8:	78c9      	ldrb	r1, [r1, #3]
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003de2:	431a      	orrs	r2, r3
 8003de4:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	0619      	lsls	r1, r3, #24
 8003dea:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	4319      	orrs	r1, r3
 8003df2:	4b23      	ldr	r3, [pc, #140]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003df4:	789b      	ldrb	r3, [r3, #2]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	4921      	ldr	r1, [pc, #132]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003dfc:	78c9      	ldrb	r1, [r1, #3]
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e06:	431a      	orrs	r2, r3
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	0619      	lsls	r1, r3, #24
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003e10:	785b      	ldrb	r3, [r3, #1]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	4319      	orrs	r1, r3
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003e18:	789b      	ldrb	r3, [r3, #2]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	4918      	ldr	r1, [pc, #96]	; (8003e80 <MX_LWIP_Init+0x244>)
 8003e20:	78c9      	ldrb	r1, [r1, #3]
 8003e22:	430b      	orrs	r3, r1
 8003e24:	0e1b      	lsrs	r3, r3, #24
 8003e26:	4313      	orrs	r3, r2
 8003e28:	4a18      	ldr	r2, [pc, #96]	; (8003e8c <MX_LWIP_Init+0x250>)
 8003e2a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003e2c:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <MX_LWIP_Init+0x254>)
 8003e2e:	9302      	str	r3, [sp, #8]
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <MX_LWIP_Init+0x258>)
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <MX_LWIP_Init+0x250>)
 8003e3a:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <MX_LWIP_Init+0x24c>)
 8003e3c:	4911      	ldr	r1, [pc, #68]	; (8003e84 <MX_LWIP_Init+0x248>)
 8003e3e:	4816      	ldr	r0, [pc, #88]	; (8003e98 <MX_LWIP_Init+0x25c>)
 8003e40:	f002 fb98 	bl	8006574 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003e44:	4814      	ldr	r0, [pc, #80]	; (8003e98 <MX_LWIP_Init+0x25c>)
 8003e46:	f002 fc77 	bl	8006738 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003e4a:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <MX_LWIP_Init+0x25c>)
 8003e4c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e5c:	480e      	ldr	r0, [pc, #56]	; (8003e98 <MX_LWIP_Init+0x25c>)
 8003e5e:	f002 fc79 	bl	8006754 <netif_set_up>
 8003e62:	e002      	b.n	8003e6a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003e64:	480c      	ldr	r0, [pc, #48]	; (8003e98 <MX_LWIP_Init+0x25c>)
 8003e66:	f002 fcb9 	bl	80067dc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003e6a:	490c      	ldr	r1, [pc, #48]	; (8003e9c <MX_LWIP_Init+0x260>)
 8003e6c:	480a      	ldr	r0, [pc, #40]	; (8003e98 <MX_LWIP_Init+0x25c>)
 8003e6e:	f002 fcd7 	bl	8006820 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000b10 	.word	0x20000b10
 8003e7c:	20000b0c 	.word	0x20000b0c
 8003e80:	20000ad0 	.word	0x20000ad0
 8003e84:	20000b08 	.word	0x20000b08
 8003e88:	20000b14 	.word	0x20000b14
 8003e8c:	20000b18 	.word	0x20000b18
 8003e90:	0800efc1 	.word	0x0800efc1
 8003e94:	08004481 	.word	0x08004481
 8003e98:	20000ad4 	.word	0x20000ad4
 8003e9c:	080044ed 	.word	0x080044ed

08003ea0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003ea4:	4803      	ldr	r0, [pc, #12]	; (8003eb4 <MX_LWIP_Process+0x14>)
 8003ea6:	f000 facb 	bl	8004440 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003eaa:	f008 fdb3 	bl	800ca14 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000ad4 	.word	0x20000ad4

08003eb8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08e      	sub	sp, #56	; 0x38
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a55      	ldr	r2, [pc, #340]	; (800402c <HAL_ETH_MspInit+0x174>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f040 80a4 	bne.w	8004024 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003edc:	2300      	movs	r3, #0
 8003ede:	623b      	str	r3, [r7, #32]
 8003ee0:	4b53      	ldr	r3, [pc, #332]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	4a52      	ldr	r2, [pc, #328]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eea:	6313      	str	r3, [r2, #48]	; 0x30
 8003eec:	4b50      	ldr	r3, [pc, #320]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
 8003efc:	4b4c      	ldr	r3, [pc, #304]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	4a4b      	ldr	r2, [pc, #300]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f06:	6313      	str	r3, [r2, #48]	; 0x30
 8003f08:	4b49      	ldr	r3, [pc, #292]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2300      	movs	r3, #0
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	4b45      	ldr	r3, [pc, #276]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4a44      	ldr	r2, [pc, #272]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f22:	6313      	str	r3, [r2, #48]	; 0x30
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	4a36      	ldr	r2, [pc, #216]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5c:	4b34      	ldr	r3, [pc, #208]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	4b30      	ldr	r3, [pc, #192]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	4a2f      	ldr	r2, [pc, #188]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	6313      	str	r3, [r2, #48]	; 0x30
 8003f78:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	4b29      	ldr	r3, [pc, #164]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	4a28      	ldr	r2, [pc, #160]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f92:	6313      	str	r3, [r2, #48]	; 0x30
 8003f94:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_ETH_MspInit+0x178>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003fa0:	2332      	movs	r3, #50	; 0x32
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fb0:	230b      	movs	r3, #11
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb8:	4619      	mov	r1, r3
 8003fba:	481e      	ldr	r0, [pc, #120]	; (8004034 <HAL_ETH_MspInit+0x17c>)
 8003fbc:	f7fe fb0a 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003fc0:	2386      	movs	r3, #134	; 0x86
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fd0:	230b      	movs	r3, #11
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4817      	ldr	r0, [pc, #92]	; (8004038 <HAL_ETH_MspInit+0x180>)
 8003fdc:	f7fe fafa 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ff2:	230b      	movs	r3, #11
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	480f      	ldr	r0, [pc, #60]	; (800403c <HAL_ETH_MspInit+0x184>)
 8003ffe:	f7fe fae9 	bl	80025d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004002:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004014:	230b      	movs	r3, #11
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401c:	4619      	mov	r1, r3
 800401e:	4808      	ldr	r0, [pc, #32]	; (8004040 <HAL_ETH_MspInit+0x188>)
 8004020:	f7fe fad8 	bl	80025d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004024:	bf00      	nop
 8004026:	3738      	adds	r7, #56	; 0x38
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40028000 	.word	0x40028000
 8004030:	40023800 	.word	0x40023800
 8004034:	40020800 	.word	0x40020800
 8004038:	40020000 	.word	0x40020000
 800403c:	40020400 	.word	0x40020400
 8004040:	40021800 	.word	0x40021800

08004044 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004050:	4b4d      	ldr	r3, [pc, #308]	; (8004188 <low_level_init+0x144>)
 8004052:	4a4e      	ldr	r2, [pc, #312]	; (800418c <low_level_init+0x148>)
 8004054:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004056:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <low_level_init+0x144>)
 8004058:	2201      	movs	r2, #1
 800405a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800405c:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <low_level_init+0x144>)
 800405e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004062:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004064:	4b48      	ldr	r3, [pc, #288]	; (8004188 <low_level_init+0x144>)
 8004066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800406c:	4b46      	ldr	r3, [pc, #280]	; (8004188 <low_level_init+0x144>)
 800406e:	2200      	movs	r2, #0
 8004070:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004072:	2300      	movs	r3, #0
 8004074:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800407a:	23e1      	movs	r3, #225	; 0xe1
 800407c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004086:	2300      	movs	r3, #0
 8004088:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <low_level_init+0x144>)
 800408c:	f107 0308 	add.w	r3, r7, #8
 8004090:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004092:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <low_level_init+0x144>)
 8004094:	2200      	movs	r2, #0
 8004096:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004098:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <low_level_init+0x144>)
 800409a:	2200      	movs	r2, #0
 800409c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800409e:	4b3a      	ldr	r3, [pc, #232]	; (8004188 <low_level_init+0x144>)
 80040a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040a4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80040a6:	4838      	ldr	r0, [pc, #224]	; (8004188 <low_level_init+0x144>)
 80040a8:	f7fd f988 	bl	80013bc <HAL_ETH_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80040c8:	2304      	movs	r3, #4
 80040ca:	4a31      	ldr	r2, [pc, #196]	; (8004190 <low_level_init+0x14c>)
 80040cc:	4931      	ldr	r1, [pc, #196]	; (8004194 <low_level_init+0x150>)
 80040ce:	482e      	ldr	r0, [pc, #184]	; (8004188 <low_level_init+0x144>)
 80040d0:	f7fd fb00 	bl	80016d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80040d4:	2304      	movs	r3, #4
 80040d6:	4a30      	ldr	r2, [pc, #192]	; (8004198 <low_level_init+0x154>)
 80040d8:	4930      	ldr	r1, [pc, #192]	; (800419c <low_level_init+0x158>)
 80040da:	482b      	ldr	r0, [pc, #172]	; (8004188 <low_level_init+0x144>)
 80040dc:	f7fd fb62 	bl	80017a4 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2206      	movs	r2, #6
 80040e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <low_level_init+0x144>)
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	781a      	ldrb	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040f4:	4b24      	ldr	r3, [pc, #144]	; (8004188 <low_level_init+0x144>)
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	785a      	ldrb	r2, [r3, #1]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004100:	4b21      	ldr	r3, [pc, #132]	; (8004188 <low_level_init+0x144>)
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	789a      	ldrb	r2, [r3, #2]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800410c:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <low_level_init+0x144>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	78da      	ldrb	r2, [r3, #3]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <low_level_init+0x144>)
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	791a      	ldrb	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004124:	4b18      	ldr	r3, [pc, #96]	; (8004188 <low_level_init+0x144>)
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	795a      	ldrb	r2, [r3, #5]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004136:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800413e:	f043 030a 	orr.w	r3, r3, #10
 8004142:	b2da      	uxtb	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800414a:	480f      	ldr	r0, [pc, #60]	; (8004188 <low_level_init+0x144>)
 800414c:	f7fd fdd1 	bl	8001cf2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	461a      	mov	r2, r3
 8004156:	211d      	movs	r1, #29
 8004158:	480b      	ldr	r0, [pc, #44]	; (8004188 <low_level_init+0x144>)
 800415a:	f7fd fcfc 	bl	8001b56 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f043 030b 	orr.w	r3, r3, #11
 8004164:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	461a      	mov	r2, r3
 800416a:	211d      	movs	r1, #29
 800416c:	4806      	ldr	r0, [pc, #24]	; (8004188 <low_level_init+0x144>)
 800416e:	f7fd fd5a 	bl	8001c26 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004172:	f107 0310 	add.w	r3, r7, #16
 8004176:	461a      	mov	r2, r3
 8004178:	211d      	movs	r1, #29
 800417a:	4803      	ldr	r0, [pc, #12]	; (8004188 <low_level_init+0x144>)
 800417c:	f7fd fceb 	bl	8001b56 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004180:	bf00      	nop
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	200023ec 	.word	0x200023ec
 800418c:	40028000 	.word	0x40028000
 8004190:	20002434 	.word	0x20002434
 8004194:	20000b1c 	.word	0x20000b1c
 8004198:	20000b9c 	.word	0x20000b9c
 800419c:	2000236c 	.word	0x2000236c

080041a0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80041aa:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <low_level_output+0x138>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80041c2:	4b45      	ldr	r3, [pc, #276]	; (80042d8 <low_level_output+0x138>)
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	623b      	str	r3, [r7, #32]
 80041d0:	e05a      	b.n	8004288 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da03      	bge.n	80041e2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80041da:	23f8      	movs	r3, #248	; 0xf8
 80041dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80041e0:	e05c      	b.n	800429c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	895b      	ldrh	r3, [r3, #10]
 80041e6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80041ec:	e02f      	b.n	800424e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	18d0      	adds	r0, r2, r3
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	18d1      	adds	r1, r2, r3
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004202:	3304      	adds	r3, #4
 8004204:	461a      	mov	r2, r3
 8004206:	f00a ffeb 	bl	800f1e0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	da03      	bge.n	8004220 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004218:	23f8      	movs	r3, #248	; 0xf8
 800421a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800421e:	e03d      	b.n	800429c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004230:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800423c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004248:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004258:	4293      	cmp	r3, r2
 800425a:	d8c8      	bhi.n	80041ee <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	18d0      	adds	r0, r2, r3
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4413      	add	r3, r2
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4619      	mov	r1, r3
 800426e:	f00a ffb7 	bl	800f1e0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1a1      	bne.n	80041d2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800428e:	6979      	ldr	r1, [r7, #20]
 8004290:	4811      	ldr	r0, [pc, #68]	; (80042d8 <low_level_output+0x138>)
 8004292:	f7fd faf3 	bl	800187c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <low_level_output+0x138>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a4:	3314      	adds	r3, #20
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00d      	beq.n	80042cc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <low_level_output+0x138>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b8:	3314      	adds	r3, #20
 80042ba:	2220      	movs	r2, #32
 80042bc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <low_level_output+0x138>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c6:	3304      	adds	r3, #4
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80042cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3728      	adds	r7, #40	; 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	200023ec 	.word	0x200023ec

080042dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	; 0x30
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004300:	484e      	ldr	r0, [pc, #312]	; (800443c <low_level_input+0x160>)
 8004302:	f7fd fba5 	bl	8001a50 <HAL_ETH_GetReceivedFrame>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <low_level_input+0x34>

    return NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	e091      	b.n	8004434 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004310:	4b4a      	ldr	r3, [pc, #296]	; (800443c <low_level_input+0x160>)
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004316:	4b49      	ldr	r3, [pc, #292]	; (800443c <low_level_input+0x160>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d006      	beq.n	8004330 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	2203      	movs	r2, #3
 8004326:	4619      	mov	r1, r3
 8004328:	2004      	movs	r0, #4
 800432a:	f002 fab9 	bl	80068a0 <pbuf_alloc>
 800432e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04b      	beq.n	80043ce <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <low_level_input+0x160>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
 8004344:	e040      	b.n	80043c8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	895b      	ldrh	r3, [r3, #10]
 800434a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004350:	e021      	b.n	8004396 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	18d0      	adds	r0, r2, r3
 800435a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	18d1      	adds	r1, r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004366:	3304      	adds	r3, #4
 8004368:	461a      	mov	r2, r3
 800436a:	f00a ff39 	bl	800f1e0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4413      	add	r3, r2
 8004380:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004384:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004390:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d8d6      	bhi.n	8004352 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	18d0      	adds	r0, r2, r3
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f00a ff13 	bl	800f1e0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4413      	add	r3, r2
 80043c0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1bb      	bne.n	8004346 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80043ce:	4b1b      	ldr	r3, [pc, #108]	; (800443c <low_level_input+0x160>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	e00b      	b.n	80043f2 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3301      	adds	r3, #1
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <low_level_input+0x160>)
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d3ee      	bcc.n	80043da <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <low_level_input+0x160>)
 80043fe:	2200      	movs	r2, #0
 8004400:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <low_level_input+0x160>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440a:	3314      	adds	r3, #20
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00d      	beq.n	8004432 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <low_level_input+0x160>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441e:	3314      	adds	r3, #20
 8004420:	2280      	movs	r2, #128	; 0x80
 8004422:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <low_level_input+0x160>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442c:	3308      	adds	r3, #8
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004434:	4618      	mov	r0, r3
 8004436:	3730      	adds	r7, #48	; 0x30
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200023ec 	.word	0x200023ec

08004440 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ff47 	bl	80042dc <low_level_input>
 800444e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d010      	beq.n	8004478 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	4798      	blx	r3
 8004460:	4603      	mov	r3, r0
 8004462:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004464:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d006      	beq.n	800447a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f002 fd89 	bl	8006f84 <pbuf_free>
    p = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e000      	b.n	800447a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004478:	bf00      	nop
  }
}
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d106      	bne.n	800449c <ethernetif_init+0x1c>
 800448e:	4b0e      	ldr	r3, [pc, #56]	; (80044c8 <ethernetif_init+0x48>)
 8004490:	f240 2211 	movw	r2, #529	; 0x211
 8004494:	490d      	ldr	r1, [pc, #52]	; (80044cc <ethernetif_init+0x4c>)
 8004496:	480e      	ldr	r0, [pc, #56]	; (80044d0 <ethernetif_init+0x50>)
 8004498:	f00a feb8 	bl	800f20c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2273      	movs	r2, #115	; 0x73
 80044a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2274      	movs	r2, #116	; 0x74
 80044a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <ethernetif_init+0x54>)
 80044b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <ethernetif_init+0x58>)
 80044b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff fdc3 	bl	8004044 <low_level_init>

  return ERR_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	0801023c 	.word	0x0801023c
 80044cc:	08010258 	.word	0x08010258
 80044d0:	08010268 	.word	0x08010268
 80044d4:	0800d5a1 	.word	0x0800d5a1
 80044d8:	080041a1 	.word	0x080041a1

080044dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044e0:	f7fc fd5e 	bl	8000fa0 <HAL_GetTick>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d05d      	beq.n	80045ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800450e:	4b34      	ldr	r3, [pc, #208]	; (80045e0 <ethernetif_update_config+0xf4>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d03f      	beq.n	8004596 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004516:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800451a:	2100      	movs	r1, #0
 800451c:	4830      	ldr	r0, [pc, #192]	; (80045e0 <ethernetif_update_config+0xf4>)
 800451e:	f7fd fb82 	bl	8001c26 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004522:	f7fc fd3d 	bl	8000fa0 <HAL_GetTick>
 8004526:	4603      	mov	r3, r0
 8004528:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	461a      	mov	r2, r3
 8004530:	2101      	movs	r1, #1
 8004532:	482b      	ldr	r0, [pc, #172]	; (80045e0 <ethernetif_update_config+0xf4>)
 8004534:	f7fd fb0f 	bl	8001b56 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004538:	f7fc fd32 	bl	8000fa0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004546:	d828      	bhi.n	800459a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0eb      	beq.n	800452a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004552:	f107 0308 	add.w	r3, r7, #8
 8004556:	461a      	mov	r2, r3
 8004558:	2110      	movs	r1, #16
 800455a:	4821      	ldr	r0, [pc, #132]	; (80045e0 <ethernetif_update_config+0xf4>)
 800455c:	f7fd fafb 	bl	8001b56 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <ethernetif_update_config+0xf4>)
 800456c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	e002      	b.n	800457a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004574:	4b1a      	ldr	r3, [pc, #104]	; (80045e0 <ethernetif_update_config+0xf4>)
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <ethernetif_update_config+0xf4>)
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	e016      	b.n	80045ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800458c:	4b14      	ldr	r3, [pc, #80]	; (80045e0 <ethernetif_update_config+0xf4>)
 800458e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	e011      	b.n	80045ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004596:	bf00      	nop
 8004598:	e000      	b.n	800459c <ethernetif_update_config+0xb0>
          goto error;
 800459a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <ethernetif_update_config+0xf4>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	08db      	lsrs	r3, r3, #3
 80045a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <ethernetif_update_config+0xf4>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80045ac:	4313      	orrs	r3, r2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	480a      	ldr	r0, [pc, #40]	; (80045e0 <ethernetif_update_config+0xf4>)
 80045b6:	f7fd fb36 	bl	8001c26 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80045ba:	2100      	movs	r1, #0
 80045bc:	4808      	ldr	r0, [pc, #32]	; (80045e0 <ethernetif_update_config+0xf4>)
 80045be:	f7fd fbf7 	bl	8001db0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80045c2:	4807      	ldr	r0, [pc, #28]	; (80045e0 <ethernetif_update_config+0xf4>)
 80045c4:	f7fd fb95 	bl	8001cf2 <HAL_ETH_Start>
 80045c8:	e002      	b.n	80045d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80045ca:	4805      	ldr	r0, [pc, #20]	; (80045e0 <ethernetif_update_config+0xf4>)
 80045cc:	f7fd fbc0 	bl	8001d50 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f807 	bl	80045e4 <ethernetif_notify_conn_changed>
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200023ec 	.word	0x200023ec

080045e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr
	...

080045f8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <fs_open+0x16>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <fs_open+0x1c>
     return ERR_ARG;
 800460e:	f06f 030f 	mvn.w	r3, #15
 8004612:	e028      	b.n	8004666 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <fs_open+0x78>)
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e020      	b.n	800465c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4619      	mov	r1, r3
 8004620:	6838      	ldr	r0, [r7, #0]
 8004622:	f7fb fdcf 	bl	80001c4 <strcmp>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d114      	bne.n	8004656 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	7c1a      	ldrb	r2, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e007      	b.n	8004666 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1db      	bne.n	800461a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004662:	f06f 0305 	mvn.w	r3, #5
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	080124c0 	.word	0x080124c0

08004674 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	1ad3      	subs	r3, r2, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state*
http_ssi_state_alloc(void)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80046a8:	20e4      	movs	r0, #228	; 0xe4
 80046aa:	f001 fd8b 	bl	80061c4 <mem_malloc>
 80046ae:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d004      	beq.n	80046c0 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80046b6:	22e4      	movs	r2, #228	; 0xe4
 80046b8:	2100      	movs	r1, #0
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f00a fd9e 	bl	800f1fc <memset>
  }
  return ret;
 80046c0:	687b      	ldr	r3, [r7, #4]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f001 fc35 	bl	8005f48 <mem_free>
  }
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80046ee:	22b0      	movs	r2, #176	; 0xb0
 80046f0:	2100      	movs	r1, #0
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f00a fd82 	bl	800f1fc <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004706:	20b0      	movs	r0, #176	; 0xb0
 8004708:	f001 fd5c 	bl	80061c4 <mem_malloc>
 800470c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <http_state_alloc+0x1a>
    http_state_init(ret);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ffe6 	bl	80046e6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800471a:	687b      	ldr	r3, [r7, #4]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff9b 	bl	8004674 <fs_close>
    hs->handle = NULL;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ffba 	bl	80046ca <http_ssi_state_free>
    hs->ssi = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d007      	beq.n	8004774 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fc0b 	bl	8006f84 <pbuf_free>
    hs->req = NULL;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <http_state_free+0x1a>
    http_state_eof(hs);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff ffca 	bl	8004724 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f001 fbd9 	bl	8005f48 <mem_free>
  }
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <http_write+0x22>
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <http_write+0xc8>)
 80047b6:	f44f 7204 	mov.w	r2, #528	; 0x210
 80047ba:	492c      	ldr	r1, [pc, #176]	; (800486c <http_write+0xcc>)
 80047bc:	482c      	ldr	r0, [pc, #176]	; (8004870 <http_write+0xd0>)
 80047be:	f00a fd25 	bl	800f20c <iprintf>
  len = *length;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80047c8:	8afb      	ldrh	r3, [r7, #22]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <http_write+0x32>
    return ERR_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e045      	b.n	800485e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80047d8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80047da:	8aba      	ldrh	r2, [r7, #20]
 80047dc:	8afb      	ldrh	r3, [r7, #22]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d201      	bcs.n	80047e6 <http_write+0x46>
    len = max_len;
 80047e2:	8abb      	ldrh	r3, [r7, #20]
 80047e4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 80047ee:	8afa      	ldrh	r2, [r7, #22]
 80047f0:	8abb      	ldrh	r3, [r7, #20]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d901      	bls.n	80047fa <http_write+0x5a>
    len = max_len;
 80047f6:	8abb      	ldrh	r3, [r7, #20]
 80047f8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	8afa      	ldrh	r2, [r7, #22]
 80047fe:	68b9      	ldr	r1, [r7, #8]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f006 fe87 	bl	800b514 <tcp_write>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800480a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d10f      	bne.n	8004834 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 8004824:	2b08      	cmp	r3, #8
 8004826:	d902      	bls.n	800482e <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 8004828:	2301      	movs	r3, #1
 800482a:	82fb      	strh	r3, [r7, #22]
 800482c:	e002      	b.n	8004834 <http_write+0x94>
      } else {
        len /= 2;
 800482e:	8afb      	ldrh	r3, [r7, #22]
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004834:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d102      	bne.n	8004844 <http_write+0xa4>
 800483e:	8afb      	ldrh	r3, [r7, #22]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d8da      	bhi.n	80047fa <http_write+0x5a>

  if (err == ERR_OK) {
 8004844:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d103      	bne.n	8004854 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8afa      	ldrh	r2, [r7, #22]
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e002      	b.n	800485a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 800485a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	080102fc 	.word	0x080102fc
 800486c:	08010334 	.word	0x08010334
 8004870:	08010344 	.word	0x08010344

08004874 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 8004882:	2100      	movs	r1, #0
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f004 f80b 	bl	80088a0 <tcp_arg>
  tcp_recv(pcb, NULL);
 800488a:	2100      	movs	r1, #0
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f004 f817 	bl	80088c0 <tcp_recv>
  tcp_err(pcb, NULL);
 8004892:	2100      	movs	r1, #0
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f004 f855 	bl	8008944 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f004 f888 	bl	80089b4 <tcp_poll>
  tcp_sent(pcb, NULL);
 80048a4:	2100      	movs	r1, #0
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f004 f82c 	bl	8008904 <tcp_sent>
  if (hs != NULL) {
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80048b2:	68b8      	ldr	r0, [r7, #8]
 80048b4:	f7ff ff62 	bl	800477c <http_state_free>
  }

  if (abort_conn) {
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f003 f856 	bl	8007970 <tcp_abort>
    return ERR_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e00f      	b.n	80048e8 <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f002 ff87 	bl	80077dc <tcp_close>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80048d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80048da:	2204      	movs	r2, #4
 80048dc:	4904      	ldr	r1, [pc, #16]	; (80048f0 <http_close_or_abort_conn+0x7c>)
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f004 f868 	bl	80089b4 <tcp_poll>
  }
  return err;
 80048e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	080058d3 	.word	0x080058d3

080048f4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff ffb6 	bl	8004874 <http_close_or_abort_conn>
 8004908:	4603      	mov	r3, r0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ffe8 	bl	80048f4 <http_close_conn>
  }
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <extract_uri_parameters+0x18>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <extract_uri_parameters+0x1c>
      return(0);
 8004944:	2300      	movs	r3, #0
 8004946:	e04b      	b.n	80049e0 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e03f      	b.n	80049d2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	320c      	adds	r2, #12
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8004962:	2126      	movs	r1, #38	; 0x26
 8004964:	6978      	ldr	r0, [r7, #20]
 8004966:	f00a fc69 	bl	800f23c <strchr>
 800496a:	6178      	str	r0, [r7, #20]
    if(pair) {
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <extract_uri_parameters+0x54>
      *pair = '\0';
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
      pair++;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3301      	adds	r3, #1
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e00c      	b.n	800499a <extract_uri_parameters+0x6e>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 8004980:	2120      	movs	r1, #32
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f00a fc5a 	bl	800f23c <strchr>
 8004988:	6178      	str	r0, [r7, #20]
        if(pair) {
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <extract_uri_parameters+0x6a>
            *pair = '\0';
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800499a:	213d      	movs	r1, #61	; 0x3d
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f00a fc4d 	bl	800f23c <strchr>
 80049a2:	60f8      	str	r0, [r7, #12]
    if(equals) {
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <extract_uri_parameters+0x94>
      *equals = '\0';
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	321c      	adds	r2, #28
 80049ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049be:	e005      	b.n	80049cc <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	321c      	adds	r2, #28
 80049c6:	2100      	movs	r1, #0
 80049c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	3301      	adds	r3, #1
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b0f      	cmp	r3, #15
 80049d6:	dc02      	bgt.n	80049de <extract_uri_parameters+0xb2>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1b9      	bne.n	8004952 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80049de:	693b      	ldr	r3, [r7, #16]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <get_tag_insert+0x1c>
 80049f6:	4b52      	ldr	r3, [pc, #328]	; (8004b40 <get_tag_insert+0x158>)
 80049f8:	f240 22fb 	movw	r2, #763	; 0x2fb
 80049fc:	4951      	ldr	r1, [pc, #324]	; (8004b44 <get_tag_insert+0x15c>)
 80049fe:	4852      	ldr	r0, [pc, #328]	; (8004b48 <get_tag_insert+0x160>)
 8004a00:	f00a fc04 	bl	800f20c <iprintf>
  ssi = hs->ssi;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <get_tag_insert+0x36>
 8004a10:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <get_tag_insert+0x158>)
 8004a12:	f240 22fd 	movw	r2, #765	; 0x2fd
 8004a16:	494d      	ldr	r1, [pc, #308]	; (8004b4c <get_tag_insert+0x164>)
 8004a18:	484b      	ldr	r0, [pc, #300]	; (8004b48 <get_tag_insert+0x160>)
 8004a1a:	f00a fbf7 	bl	800f20c <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if(g_pfnSSIHandler
 8004a1e:	4b4c      	ldr	r3, [pc, #304]	; (8004b50 <get_tag_insert+0x168>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02e      	beq.n	8004a84 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
     && g_ppcTags && g_iNumTags
 8004a26:	4b4b      	ldr	r3, [pc, #300]	; (8004b54 <get_tag_insert+0x16c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02a      	beq.n	8004a84 <get_tag_insert+0x9c>
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <get_tag_insert+0x170>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d026      	beq.n	8004a84 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for(tag = 0; tag < g_iNumTags; tag++) {
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	e01e      	b.n	8004a7a <get_tag_insert+0x92>
      if(strcmp(ssi->tag_name, g_ppcTags[tag]) == 0)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f103 0011 	add.w	r0, r3, #17
 8004a42:	4b44      	ldr	r3, [pc, #272]	; (8004b54 <get_tag_insert+0x16c>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7fb fbb8 	bl	80001c4 <strcmp>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10c      	bne.n	8004a74 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = g_pfnSSIHandler(tag, ssi->tag_insert,
 8004a5a:	4b3d      	ldr	r3, [pc, #244]	; (8004b50 <get_tag_insert+0x168>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	f102 0122 	add.w	r1, r2, #34	; 0x22
 8004a64:	22c0      	movs	r2, #192	; 0xc0
 8004a66:	6978      	ldr	r0, [r7, #20]
 8004a68:	4798      	blx	r3
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	81da      	strh	r2, [r3, #14]
           );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8004a72:	e061      	b.n	8004b38 <get_tag_insert+0x150>
    for(tag = 0; tag < g_iNumTags; tag++) {
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3301      	adds	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	4b37      	ldr	r3, [pc, #220]	; (8004b58 <get_tag_insert+0x170>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	dbdb      	blt.n	8004a3c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	3311      	adds	r3, #17
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fb fba5 	bl	80001d8 <strlen>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2ba6      	cmp	r3, #166	; 0xa6
 8004a92:	d818      	bhi.n	8004ac6 <get_tag_insert+0xde>
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	3311      	adds	r3, #17
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fb fb9d 	bl	80001d8 <strlen>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b11      	cmp	r3, #17
 8004aa2:	d810      	bhi.n	8004ac6 <get_tag_insert+0xde>
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3311      	adds	r3, #17
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fb95 	bl	80001d8 <strlen>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2ba6      	cmp	r3, #166	; 0xa6
 8004ab2:	d806      	bhi.n	8004ac2 <get_tag_insert+0xda>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	3311      	adds	r3, #17
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fb fb8d 	bl	80001d8 <strlen>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	e002      	b.n	8004ac8 <get_tag_insert+0xe0>
 8004ac2:	23a7      	movs	r3, #167	; 0xa7
 8004ac4:	e000      	b.n	8004ac8 <get_tag_insert+0xe0>
 8004ac6:	2311      	movs	r3, #17
 8004ac8:	60fb      	str	r3, [r7, #12]
    LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3322      	adds	r3, #34	; 0x22
 8004ace:	2212      	movs	r2, #18
 8004ad0:	4922      	ldr	r1, [pc, #136]	; (8004b5c <get_tag_insert+0x174>)
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f00a fb84 	bl	800f1e0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3311      	adds	r3, #17
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f00a fb7b 	bl	800f1e0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3312      	adds	r3, #18
 8004aee:	3320      	adds	r3, #32
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	3302      	adds	r3, #2
 8004af6:	2207      	movs	r2, #7
 8004af8:	4919      	ldr	r1, [pc, #100]	; (8004b60 <get_tag_insert+0x178>)
 8004afa:	4618      	mov	r0, r3
 8004afc:	f00a fb70 	bl	800f1e0 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3319      	adds	r3, #25
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  len = strlen(ssi->tag_insert);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	3322      	adds	r3, #34	; 0x22
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fb fb60 	bl	80001d8 <strlen>
 8004b18:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d306      	bcc.n	8004b30 <get_tag_insert+0x148>
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <get_tag_insert+0x158>)
 8004b24:	f240 3236 	movw	r2, #822	; 0x336
 8004b28:	490e      	ldr	r1, [pc, #56]	; (8004b64 <get_tag_insert+0x17c>)
 8004b2a:	4807      	ldr	r0, [pc, #28]	; (8004b48 <get_tag_insert+0x160>)
 8004b2c:	f00a fb6e 	bl	800f20c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	81da      	strh	r2, [r3, #14]
}
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	080102fc 	.word	0x080102fc
 8004b44:	0801036c 	.word	0x0801036c
 8004b48:	08010344 	.word	0x08010344
 8004b4c:	08010378 	.word	0x08010378
 8004b50:	20003c08 	.word	0x20003c08
 8004b54:	20003c18 	.word	0x20003c18
 8004b58:	20003c10 	.word	0x20003c10
 8004b5c:	08010384 	.word	0x08010384
 8004b60:	08010398 	.word	0x08010398
 8004b64:	080103a0 	.word	0x080103a0

08004b68 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8004b7a:	6839      	ldr	r1, [r7, #0]
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fec8 	bl	8004912 <http_eof>
    return 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e016      	b.n	8004bb4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fd7b 	bl	8004686 <fs_bytes_left>
 8004b90:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	dc05      	bgt.n	8004ba4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff feb9 	bl	8004912 <http_eof>
    return 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e007      	b.n	8004bb4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <http_check_eof+0x54>)
 8004ba6:	f240 4283 	movw	r2, #1155	; 0x483
 8004baa:	4905      	ldr	r1, [pc, #20]	; (8004bc0 <http_check_eof+0x58>)
 8004bac:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <http_check_eof+0x5c>)
 8004bae:	f00a fb2d 	bl	800f20c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8004bb2:	2301      	movs	r3, #1
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	080102fc 	.word	0x080102fc
 8004bc0:	080103b0 	.word	0x080103b0
 8004bc4:	08010344 	.word	0x08010344

08004bc8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d803      	bhi.n	8004bea <http_send_data_nonssi+0x22>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	e001      	b.n	8004bee <http_send_data_nonssi+0x26>
 8004bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bee:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6999      	ldr	r1, [r3, #24]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f107 020c 	add.w	r2, r7, #12
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fdca 	bl	80047a0 <http_write>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8004c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <http_send_data_nonssi+0x6c>
    data_to_send = 1;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	89ba      	ldrh	r2, [r7, #12]
 8004c22:	441a      	add	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	89ba      	ldrh	r2, [r7, #12]
 8004c2e:	1a9a      	subs	r2, r3, r2
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75bb      	strb	r3, [r7, #22]

  struct http_ssi_state *ssi = hs->ssi;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <http_send_data_ssi+0x2c>
 8004c5e:	4b97      	ldr	r3, [pc, #604]	; (8004ebc <http_send_data_ssi+0x27c>)
 8004c60:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8004c64:	4996      	ldr	r1, [pc, #600]	; (8004ec0 <http_send_data_ssi+0x280>)
 8004c66:	4897      	ldr	r0, [pc, #604]	; (8004ec4 <http_send_data_ssi+0x284>)
 8004c68:	f00a fad0 	bl	800f20c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = tcp_sndbuf(pcb);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c72:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if(ssi->parsed > hs->file) {
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	f240 8249 	bls.w	8005114 <http_send_data_ssi+0x4d4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c90:	4293      	cmp	r3, r2
 8004c92:	dc06      	bgt.n	8004ca2 <http_send_data_ssi+0x62>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	e001      	b.n	8004ca6 <http_send_data_ssi+0x66>
 8004ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ca6:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	6999      	ldr	r1, [r3, #24]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f107 020e 	add.w	r2, r7, #14
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fd6e 	bl	80047a0 <http_write>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <http_send_data_ssi+0xac>
      data_to_send = 1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	89fa      	ldrh	r2, [r7, #14]
 8004cda:	441a      	add	r2, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	89fa      	ldrh	r2, [r7, #14]
 8004ce6:	1a9a      	subs	r2, r3, r2
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if(tcp_sndbuf(pcb) == 0) {
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 820e 	bne.w	8005114 <http_send_data_ssi+0x4d4>
      return data_to_send;
 8004cf8:	7dbb      	ldrb	r3, [r7, #22]
 8004cfa:	e255      	b.n	80051a8 <http_send_data_ssi+0x568>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while((ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <http_send_data_ssi+0xc6>
      return data_to_send;
 8004d02:	7dbb      	ldrb	r3, [r7, #22]
 8004d04:	e250      	b.n	80051a8 <http_send_data_ssi+0x568>
    }
    switch(ssi->tag_state) {
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	f200 8200 	bhi.w	8005112 <http_send_data_ssi+0x4d2>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <http_send_data_ssi+0xd8>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d2d 	.word	0x08004d2d
 8004d1c:	08004d5f 	.word	0x08004d5f
 8004d20:	08004db7 	.word	0x08004db7
 8004d24:	08004ef3 	.word	0x08004ef3
 8004d28:	0800502d 	.word	0x0800502d
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        if(*ssi->parsed == g_pcTagLeadIn[0]) {
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	781a      	ldrb	r2, [r3, #0]
 8004d32:	4b65      	ldr	r3, [pc, #404]	; (8004ec8 <http_send_data_ssi+0x288>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d106      	bne.n	8004d48 <http_send_data_ssi+0x108>
          /* We found what could be the lead-in for a new tag so change
           * state appropriately. */
          ssi->tag_state = TAG_LEADIN;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          ssi->tag_index = 1;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2201      	movs	r2, #1
 8004d46:	819a      	strh	r2, [r3, #12]
          ssi->tag_started = ssi->parsed;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	1e5a      	subs	r2, r3, #1
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	601a      	str	r2, [r3, #0]
        break;
 8004d5c:	e1da      	b.n	8005114 <http_send_data_ssi+0x4d4>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if(ssi->tag_index == LEN_TAG_LEAD_IN) {
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	899b      	ldrh	r3, [r3, #12]
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d107      	bne.n	8004d76 <http_send_data_ssi+0x136>
          ssi->tag_index = 0;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8004d74:	e1ce      	b.n	8005114 <http_send_data_ssi+0x4d4>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if(*ssi->parsed == g_pcTagLeadIn[ssi->tag_index]) {
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	4952      	ldr	r1, [pc, #328]	; (8004ec8 <http_send_data_ssi+0x288>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	899b      	ldrh	r3, [r3, #12]
 8004d82:	440b      	add	r3, r1
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d106      	bne.n	8004d98 <http_send_data_ssi+0x158>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	899b      	ldrh	r3, [r3, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	819a      	strh	r2, [r3, #12]
 8004d96:	e003      	b.n	8004da0 <http_send_data_ssi+0x160>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	601a      	str	r2, [r3, #0]
        }
        break;
 8004db4:	e1ae      	b.n	8005114 <http_send_data_ssi+0x4d4>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	899b      	ldrh	r3, [r3, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11e      	bne.n	8004dfc <http_send_data_ssi+0x1bc>
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d00e      	beq.n	8004de6 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004dce:	2b09      	cmp	r3, #9
 8004dd0:	d009      	beq.n	8004de6 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b0a      	cmp	r3, #10
 8004dda:	d004      	beq.n	8004de6 <http_send_data_ssi+0x1a6>
           (*ssi->parsed == '\r'))) {
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004de2:	2b0d      	cmp	r3, #13
 8004de4:	d10a      	bne.n	8004dfc <http_send_data_ssi+0x1bc>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	601a      	str	r2, [r3, #0]
          break;
 8004dfa:	e18b      	b.n	8005114 <http_send_data_ssi+0x4d4>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <http_send_data_ssi+0x28c>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d013      	beq.n	8004e32 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
        if((*ssi->parsed == g_pcTagLeadOut[0]) ||
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d00e      	beq.n	8004e32 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b09      	cmp	r3, #9
 8004e1c:	d009      	beq.n	8004e32 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8004e24:	2b0a      	cmp	r3, #10
 8004e26:	d004      	beq.n	8004e32 <http_send_data_ssi+0x1f2>
           (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b0d      	cmp	r3, #13
 8004e30:	d132      	bne.n	8004e98 <http_send_data_ssi+0x258>

          if(ssi->tag_index == 0) {
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	899b      	ldrh	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <http_send_data_ssi+0x204>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          if(ssi->tag_index == 0) {
 8004e42:	e04b      	b.n	8004edc <http_send_data_ssi+0x29c>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2203      	movs	r2, #3
 8004e48:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	899b      	ldrh	r3, [r3, #12]
 8004e50:	2bff      	cmp	r3, #255	; 0xff
 8004e52:	d906      	bls.n	8004e62 <http_send_data_ssi+0x222>
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <http_send_data_ssi+0x27c>)
 8004e56:	f240 521b 	movw	r2, #1307	; 0x51b
 8004e5a:	491d      	ldr	r1, [pc, #116]	; (8004ed0 <http_send_data_ssi+0x290>)
 8004e5c:	4819      	ldr	r0, [pc, #100]	; (8004ec4 <http_send_data_ssi+0x284>)
 8004e5e:	f00a f9d5 	bl	800f20c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	899b      	ldrh	r3, [r3, #12]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	741a      	strb	r2, [r3, #16]
            ssi->tag_name[ssi->tag_index] = '\0';
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	899b      	ldrh	r3, [r3, #12]
 8004e70:	461a      	mov	r2, r3
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4413      	add	r3, r2
 8004e76:	2200      	movs	r2, #0
 8004e78:	745a      	strb	r2, [r3, #17]
            if(*ssi->parsed == g_pcTagLeadOut[0]) {
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <http_send_data_ssi+0x28c>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d103      	bne.n	8004e90 <http_send_data_ssi+0x250>
              ssi->tag_index = 1;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8004e8e:	e025      	b.n	8004edc <http_send_data_ssi+0x29c>
            } else {
              ssi->tag_index = 0;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	2200      	movs	r2, #0
 8004e94:	819a      	strh	r2, [r3, #12]
          if(ssi->tag_index == 0) {
 8004e96:	e021      	b.n	8004edc <http_send_data_ssi+0x29c>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if(ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	899b      	ldrh	r3, [r3, #12]
 8004e9c:	2b0f      	cmp	r3, #15
 8004e9e:	d819      	bhi.n	8004ed4 <http_send_data_ssi+0x294>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	899b      	ldrh	r3, [r3, #12]
 8004ea8:	1c59      	adds	r1, r3, #1
 8004eaa:	b288      	uxth	r0, r1
 8004eac:	6939      	ldr	r1, [r7, #16]
 8004eae:	8188      	strh	r0, [r1, #12]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	440b      	add	r3, r1
 8004eb8:	745a      	strb	r2, [r3, #17]
 8004eba:	e00f      	b.n	8004edc <http_send_data_ssi+0x29c>
 8004ebc:	080102fc 	.word	0x080102fc
 8004ec0:	08010378 	.word	0x08010378
 8004ec4:	08010344 	.word	0x08010344
 8004ec8:	080102f0 	.word	0x080102f0
 8004ecc:	080102f8 	.word	0x080102f8
 8004ed0:	080103e8 	.word	0x080103e8
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	1e5a      	subs	r2, r3, #1
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	601a      	str	r2, [r3, #0]

        break;
 8004ef0:	e110      	b.n	8005114 <http_send_data_ssi+0x4d4>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	899b      	ldrh	r3, [r3, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11e      	bne.n	8004f38 <http_send_data_ssi+0x2f8>
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d00e      	beq.n	8004f22 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
        if((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8004f0a:	2b09      	cmp	r3, #9
 8004f0c:	d009      	beq.n	8004f22 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b0a      	cmp	r3, #10
 8004f16:	d004      	beq.n	8004f22 <http_send_data_ssi+0x2e2>
           (*ssi->parsed == '\r'))) {
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
           (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8004f1e:	2b0d      	cmp	r3, #13
 8004f20:	d10a      	bne.n	8004f38 <http_send_data_ssi+0x2f8>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	1e5a      	subs	r2, r3, #1
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	601a      	str	r2, [r3, #0]
          break;
 8004f36:	e0ed      	b.n	8005114 <http_send_data_ssi+0x4d4>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if(*ssi->parsed == g_pcTagLeadOut[ssi->tag_index]) {
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	781a      	ldrb	r2, [r3, #0]
 8004f3e:	499c      	ldr	r1, [pc, #624]	; (80051b0 <http_send_data_ssi+0x570>)
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	899b      	ldrh	r3, [r3, #12]
 8004f44:	440b      	add	r3, r1
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d160      	bne.n	800500e <http_send_data_ssi+0x3ce>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	601a      	str	r2, [r3, #0]

          if(ssi->tag_index == (LEN_TAG_LEAD_OUT - 1)) {
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	899b      	ldrh	r3, [r3, #12]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d14b      	bne.n	8005000 <http_send_data_ssi+0x3c0>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8004f68:	6838      	ldr	r0, [r7, #0]
 8004f6a:	f7ff fd3d 	bl	80049e8 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2200      	movs	r2, #0
 8004f72:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2204      	movs	r2, #4
 8004f78:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
            ssi->tag_end = ssi->parsed;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	f240 80c1 	bls.w	8005114 <http_send_data_ssi+0x4d4>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	dc06      	bgt.n	8004fb2 <http_send_data_ssi+0x372>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	e001      	b.n	8004fb6 <http_send_data_ssi+0x376>
 8004fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fb6:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6999      	ldr	r1, [r3, #24]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf14      	ite	ne
 8004fc4:	2301      	movne	r3, #1
 8004fc6:	2300      	moveq	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f107 020e 	add.w	r2, r7, #14
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff fbe6 	bl	80047a0 <http_write>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8004fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 8099 	bne.w	8005114 <http_send_data_ssi+0x4d4>
                data_to_send = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75bb      	strb	r3, [r7, #22]
                if(ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += ssi->tag_end - ssi->tag_started;
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	89fa      	ldrh	r2, [r7, #14]
 8004fec:	441a      	add	r2, r3
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	89fa      	ldrh	r2, [r7, #14]
 8004ff8:	1a9a      	subs	r2, r3, r2
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8004ffe:	e089      	b.n	8005114 <http_send_data_ssi+0x4d4>
              }
            }
          } else {
            ssi->tag_index++;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	899b      	ldrh	r3, [r3, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	819a      	strh	r2, [r3, #12]
 800500c:	e082      	b.n	8005114 <http_send_data_ssi+0x4d4>
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
        }
        break;
 800502a:	e073      	b.n	8005114 <http_send_data_ssi+0x4d4>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if(ssi->tag_end > hs->file) {
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	429a      	cmp	r2, r3
 8005036:	d93b      	bls.n	80050b0 <http_send_data_ssi+0x470>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005046:	4293      	cmp	r3, r2
 8005048:	dc06      	bgt.n	8005058 <http_send_data_ssi+0x418>
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	b29b      	uxth	r3, r3
 8005056:	e001      	b.n	800505c <http_send_data_ssi+0x41c>
 8005058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800505c:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800505e:	89fb      	ldrh	r3, [r7, #14]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <http_send_data_ssi+0x446>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6999      	ldr	r1, [r3, #24]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f107 020e 	add.w	r2, r7, #14
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fb90 	bl	80047a0 <http_write>
 8005080:	4603      	mov	r3, r0
 8005082:	75fb      	strb	r3, [r7, #23]
 8005084:	e001      	b.n	800508a <http_send_data_ssi+0x44a>
          } else {
            err = ERR_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800508a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d140      	bne.n	8005114 <http_send_data_ssi+0x4d4>
            data_to_send = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	75bb      	strb	r3, [r7, #22]
            if(ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += ssi->tag_end - ssi->tag_started;
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	89fa      	ldrh	r2, [r7, #14]
 800509c:	441a      	add	r2, r3
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	89fa      	ldrh	r2, [r7, #14]
 80050a8:	1a9a      	subs	r2, r3, r2
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24
 80050ae:	e031      	b.n	8005114 <http_send_data_ssi+0x4d4>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if(ssi->tag_index < ssi->tag_insert_len) {
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	899a      	ldrh	r2, [r3, #12]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	89db      	ldrh	r3, [r3, #14]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d222      	bcs.n	8005102 <http_send_data_ssi+0x4c2>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	89da      	ldrh	r2, [r3, #14]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	899b      	ldrh	r3, [r3, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	899b      	ldrh	r3, [r3, #12]
 80050ce:	3320      	adds	r3, #32
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	1c99      	adds	r1, r3, #2
 80050d6:	f107 020e 	add.w	r2, r7, #14
 80050da:	2301      	movs	r3, #1
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff fb5f 	bl	80047a0 <http_write>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 80050e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d112      	bne.n	8005114 <http_send_data_ssi+0x4d4>
              data_to_send = 1;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	899a      	ldrh	r2, [r3, #12]
 80050f6:	89fb      	ldrh	r3, [r7, #14]
 80050f8:	4413      	add	r3, r2
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	819a      	strh	r2, [r3, #12]
 8005100:	e008      	b.n	8005114 <http_send_data_ssi+0x4d4>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2200      	movs	r2, #0
 8005106:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005110:	e000      	b.n	8005114 <http_send_data_ssi+0x4d4>
        default:
          break;
 8005112:	bf00      	nop
  while((ssi->parse_left) && (err == ERR_OK)) {
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <http_send_data_ssi+0x4e6>
 800511c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f43f adeb 	beq.w	8004cfc <http_send_data_ssi+0xbc>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800512c:	2b04      	cmp	r3, #4
 800512e:	d03a      	beq.n	80051a6 <http_send_data_ssi+0x566>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	429a      	cmp	r2, r3
 800513a:	d934      	bls.n	80051a6 <http_send_data_ssi+0x566>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800514a:	4293      	cmp	r3, r2
 800514c:	dc06      	bgt.n	800515c <http_send_data_ssi+0x51c>
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	b29b      	uxth	r3, r3
 800515a:	e001      	b.n	8005160 <http_send_data_ssi+0x520>
 800515c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005160:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6999      	ldr	r1, [r3, #24]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	2b00      	cmp	r3, #0
 800516c:	bf14      	ite	ne
 800516e:	2301      	movne	r3, #1
 8005170:	2300      	moveq	r3, #0
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f107 020e 	add.w	r2, r7, #14
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff fb11 	bl	80047a0 <http_write>
 800517e:	4603      	mov	r3, r0
 8005180:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10d      	bne.n	80051a6 <http_send_data_ssi+0x566>
      data_to_send = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	89fa      	ldrh	r2, [r7, #14]
 8005194:	441a      	add	r2, r3
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	89fa      	ldrh	r2, [r7, #14]
 80051a0:	1a9a      	subs	r2, r3, r2
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80051a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	080102f8 	.word	0x080102f8

080051b4 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80051be:	2300      	movs	r3, #0
 80051c0:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <http_send+0x18>
    return 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e030      	b.n	800522e <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d108      	bne.n	80051e6 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff fcc6 	bl	8004b68 <http_check_eof>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <http_send+0x32>
      return 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e023      	b.n	800522e <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if(hs->ssi) {
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff fd25 	bl	8004c40 <http_send_data_ssi>
 80051f6:	4603      	mov	r3, r0
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	e005      	b.n	8005208 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80051fc:	6839      	ldr	r1, [r7, #0]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fce2 	bl	8004bc8 <http_send_data_nonssi>
 8005204:	4603      	mov	r3, r0
 8005206:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10d      	bne.n	800522c <http_send+0x78>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fa36 	bl	8004686 <fs_bytes_left>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	dc05      	bgt.n	800522c <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fb75 	bl	8004912 <http_eof>
    return 0;
 8005228:	2300      	movs	r3, #0
 800522a:	e000      	b.n	800522e <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <http_get_404_file+0x80>)
 8005246:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7ff f9d1 	bl	80045f8 <fs_open>
 8005256:	4603      	mov	r3, r0
 8005258:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800525a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d024      	beq.n	80052ac <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <http_get_404_file+0x84>)
 8005266:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7ff f9c1 	bl	80045f8 <fs_open>
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800527a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d014      	beq.n	80052ac <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	4a0e      	ldr	r2, [pc, #56]	; (80052c0 <http_get_404_file+0x88>)
 8005286:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7ff f9b1 	bl	80045f8 <fs_open>
 8005296:	4603      	mov	r3, r0
 8005298:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800529a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
        return NULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80052ac:	687b      	ldr	r3, [r7, #4]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	08010400 	.word	0x08010400
 80052bc:	0801040c 	.word	0x0801040c
 80052c0:	08010418 	.word	0x08010418

080052c4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08e      	sub	sp, #56	; 0x38
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <http_parse_request+0x24>
 80052da:	4b65      	ldr	r3, [pc, #404]	; (8005470 <http_parse_request+0x1ac>)
 80052dc:	f240 727e 	movw	r2, #1918	; 0x77e
 80052e0:	4964      	ldr	r1, [pc, #400]	; (8005474 <http_parse_request+0x1b0>)
 80052e2:	4865      	ldr	r0, [pc, #404]	; (8005478 <http_parse_request+0x1b4>)
 80052e4:	f009 ff92 	bl	800f20c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <http_parse_request+0x38>
 80052ee:	4b60      	ldr	r3, [pc, #384]	; (8005470 <http_parse_request+0x1ac>)
 80052f0:	f240 727f 	movw	r2, #1919	; 0x77f
 80052f4:	4961      	ldr	r1, [pc, #388]	; (800547c <http_parse_request+0x1b8>)
 80052f6:	4860      	ldr	r0, [pc, #384]	; (8005478 <http_parse_request+0x1b4>)
 80052f8:	f009 ff88 	bl	800f20c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <http_parse_request+0x48>
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800530c:	f06f 0307 	mvn.w	r3, #7
 8005310:	e0a9      	b.n	8005466 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531e:	621a      	str	r2, [r3, #32]
 8005320:	e005      	b.n	800532e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005328:	4618      	mov	r0, r3
 800532a:	f001 fef7 	bl	800711c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800532e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005330:	f001 fed2 	bl	80070d8 <pbuf_ref>

  if (hs->req->next != NULL) {
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	891b      	ldrh	r3, [r3, #8]
 8005344:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005348:	4293      	cmp	r3, r2
 800534a:	bf28      	it	cs
 800534c:	4613      	movcs	r3, r2
 800534e:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	6a18      	ldr	r0, [r3, #32]
 8005354:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005356:	2300      	movs	r3, #0
 8005358:	4949      	ldr	r1, [pc, #292]	; (8005480 <http_parse_request+0x1bc>)
 800535a:	f002 f801 	bl	8007360 <pbuf_copy_partial>
    data = httpd_req_buf;
 800535e:	4b48      	ldr	r3, [pc, #288]	; (8005480 <http_parse_request+0x1bc>)
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
 8005362:	e005      	b.n	8005370 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	895b      	ldrh	r3, [r3, #10]
 800536e:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005370:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005372:	2b06      	cmp	r3, #6
 8005374:	d962      	bls.n	800543c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005376:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005378:	461a      	mov	r2, r3
 800537a:	4942      	ldr	r1, [pc, #264]	; (8005484 <http_parse_request+0x1c0>)
 800537c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800537e:	f000 fc90 	bl	8005ca2 <lwip_strnstr>
 8005382:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d058      	beq.n	800543c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800538e:	2204      	movs	r2, #4
 8005390:	493d      	ldr	r1, [pc, #244]	; (8005488 <http_parse_request+0x1c4>)
 8005392:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005394:	f009 ff67 	bl	800f266 <strncmp>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d116      	bne.n	80053cc <http_parse_request+0x108>
        sp1 = data + 3;
 800539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a0:	3303      	adds	r3, #3
 80053a2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3301      	adds	r3, #1
 80053b8:	8b7a      	ldrh	r2, [r7, #26]
 80053ba:	4934      	ldr	r1, [pc, #208]	; (800548c <http_parse_request+0x1c8>)
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fc70 	bl	8005ca2 <lwip_strnstr>
 80053c2:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d111      	bne.n	80053ee <http_parse_request+0x12a>
 80053ca:	e006      	b.n	80053da <http_parse_request+0x116>
        data[4] = 0;
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	3304      	adds	r3, #4
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 80053d4:	f06f 030f 	mvn.w	r3, #15
 80053d8:	e045      	b.n	8005466 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3301      	adds	r3, #1
 80053de:	8b7a      	ldrh	r2, [r7, #26]
 80053e0:	4928      	ldr	r1, [pc, #160]	; (8005484 <http_parse_request+0x1c0>)
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fc5d 	bl	8005ca2 <lwip_strnstr>
 80053e8:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	3301      	adds	r3, #1
 80053f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01e      	beq.n	800543c <http_parse_request+0x178>
 80053fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	429a      	cmp	r2, r3
 8005404:	d91a      	bls.n	800543c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005406:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005408:	461a      	mov	r2, r3
 800540a:	4921      	ldr	r1, [pc, #132]	; (8005490 <http_parse_request+0x1cc>)
 800540c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800540e:	f000 fc48 	bl	8005ca2 <lwip_strnstr>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d011      	beq.n	800543c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005424:	8b3b      	ldrh	r3, [r7, #24]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	6979      	ldr	r1, [r7, #20]
 8005432:	68b8      	ldr	r0, [r7, #8]
 8005434:	f000 f82e 	bl	8005494 <http_find_file>
 8005438:	4603      	mov	r3, r0
 800543a:	e014      	b.n	8005466 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	4618      	mov	r0, r3
 8005442:	f001 fe33 	bl	80070ac <pbuf_clen>
 8005446:	4603      	mov	r3, r0
 8005448:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	891b      	ldrh	r3, [r3, #8]
 8005450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005454:	d205      	bcs.n	8005462 <http_parse_request+0x19e>
 8005456:	8a7b      	ldrh	r3, [r7, #18]
 8005458:	2b05      	cmp	r3, #5
 800545a:	d802      	bhi.n	8005462 <http_parse_request+0x19e>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800545c:	f06f 0304 	mvn.w	r3, #4
 8005460:	e001      	b.n	8005466 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005462:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3738      	adds	r7, #56	; 0x38
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	080102fc 	.word	0x080102fc
 8005474:	08010424 	.word	0x08010424
 8005478:	08010344 	.word	0x08010344
 800547c:	0801036c 	.word	0x0801036c
 8005480:	200000a4 	.word	0x200000a4
 8005484:	08010430 	.word	0x08010430
 8005488:	08010434 	.word	0x08010434
 800548c:	0801043c 	.word	0x0801043c
 8005490:	08010440 	.word	0x08010440

08005494 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005494:	b590      	push	{r4, r7, lr}
 8005496:	b097      	sub	sp, #92	; 0x5c
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
  char *params = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fa fe91 	bl	80001d8 <strlen>
 80054b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d06c      	beq.n	8005598 <http_find_file+0x104>
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	3b01      	subs	r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b2f      	cmp	r3, #47	; 0x2f
 80054ca:	d165      	bne.n	8005598 <http_find_file+0x104>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80054cc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 80054ce:	4a97      	ldr	r2, [pc, #604]	; (800572c <http_find_file+0x298>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d102      	bne.n	80054da <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d15e      	bne.n	8005598 <http_find_file+0x104>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80054da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054dc:	3b01      	subs	r3, #1
 80054de:	2b3f      	cmp	r3, #63	; 0x3f
 80054e0:	bf28      	it	cs
 80054e2:	233f      	movcs	r3, #63	; 0x3f
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
    if (copy_len > 0) {
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f0:	4619      	mov	r1, r3
 80054f2:	488e      	ldr	r0, [pc, #568]	; (800572c <http_find_file+0x298>)
 80054f4:	f009 fe74 	bl	800f1e0 <memcpy>
      http_uri_buf[copy_len] = 0;
 80054f8:	4a8c      	ldr	r2, [pc, #560]	; (800572c <http_find_file+0x298>)
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	4413      	add	r3, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005502:	2300      	movs	r3, #0
 8005504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005506:	e044      	b.n	8005592 <http_find_file+0xfe>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d022      	beq.n	8005554 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
        if (len_left > 0) {
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d018      	beq.n	800554e <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 800551c:	4a84      	ldr	r2, [pc, #528]	; (8005730 <http_find_file+0x29c>)
 800551e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005524:	4618      	mov	r0, r3
 8005526:	f7fa fe57 	bl	80001d8 <strlen>
 800552a:	6238      	str	r0, [r7, #32]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800552c:	6a3a      	ldr	r2, [r7, #32]
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	4293      	cmp	r3, r2
 8005532:	bf28      	it	cs
 8005534:	4613      	movcs	r3, r2
 8005536:	61fb      	str	r3, [r7, #28]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	4a7c      	ldr	r2, [pc, #496]	; (800572c <http_find_file+0x298>)
 800553c:	1898      	adds	r0, r3, r2
 800553e:	4a7c      	ldr	r2, [pc, #496]	; (8005730 <http_find_file+0x29c>)
 8005540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005542:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	4619      	mov	r1, r3
 800554a:	f009 fe49 	bl	800f1e0 <memcpy>
        }
        file_name = http_uri_buf;
 800554e:	4b77      	ldr	r3, [pc, #476]	; (800572c <http_find_file+0x298>)
 8005550:	63bb      	str	r3, [r7, #56]	; 0x38
 8005552:	e004      	b.n	800555e <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 8005554:	4a76      	ldr	r2, [pc, #472]	; (8005730 <http_find_file+0x29c>)
 8005556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800555c:	63bb      	str	r3, [r7, #56]	; 0x38
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005562:	4618      	mov	r0, r3
 8005564:	f7ff f848 	bl	80045f8 <fs_open>
 8005568:	4603      	mov	r3, r0
 800556a:	76fb      	strb	r3, [r7, #27]
      if(err == ERR_OK) {
 800556c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <http_find_file+0xf8>
        uri = file_name;
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	64bb      	str	r3, [r7, #72]	; 0x48
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
 800557c:	4a6c      	ldr	r2, [pc, #432]	; (8005730 <http_find_file+0x29c>)
 800557e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4413      	add	r3, r2
 8005584:	791b      	ldrb	r3, [r3, #4]
 8005586:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* LWIP_HTTPD_SSI */
        break;
 800558a:	e005      	b.n	8005598 <http_find_file+0x104>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	3301      	adds	r3, #1
 8005590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005594:	2b04      	cmp	r3, #4
 8005596:	d9b7      	bls.n	8005508 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800559a:	2b00      	cmp	r3, #0
 800559c:	f040 80ab 	bne.w	80056f6 <http_find_file+0x262>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	213f      	movs	r1, #63	; 0x3f
 80055a4:	4618      	mov	r0, r3
 80055a6:	f009 fe49 	bl	800f23c <strchr>
 80055aa:	6478      	str	r0, [r7, #68]	; 0x44
    if (params != NULL) {
 80055ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d005      	beq.n	80055be <http_find_file+0x12a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80055b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
      params++;
 80055b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ba:	3301      	adds	r3, #1
 80055bc:	647b      	str	r3, [r7, #68]	; 0x44
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80055be:	4b5d      	ldr	r3, [pc, #372]	; (8005734 <http_find_file+0x2a0>)
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 80055c6:	4b5c      	ldr	r3, [pc, #368]	; (8005738 <http_find_file+0x2a4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d034      	beq.n	8005638 <http_find_file+0x1a4>
 80055ce:	4b5b      	ldr	r3, [pc, #364]	; (800573c <http_find_file+0x2a8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d030      	beq.n	8005638 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 80055d6:	2300      	movs	r3, #0
 80055d8:	643b      	str	r3, [r7, #64]	; 0x40
 80055da:	e028      	b.n	800562e <http_find_file+0x19a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 80055dc:	68b8      	ldr	r0, [r7, #8]
 80055de:	4b57      	ldr	r3, [pc, #348]	; (800573c <http_find_file+0x2a8>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	4413      	add	r3, r2
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	f7fa fdea 	bl	80001c4 <strcmp>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d118      	bne.n	8005628 <http_find_file+0x194>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 80055f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff f997 	bl	800492c <extract_uri_parameters>
 80055fe:	4603      	mov	r3, r0
 8005600:	4a4c      	ldr	r2, [pc, #304]	; (8005734 <http_find_file+0x2a0>)
 8005602:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8005604:	4b4d      	ldr	r3, [pc, #308]	; (800573c <http_find_file+0x2a8>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	685c      	ldr	r4, [r3, #4]
 8005610:	4b48      	ldr	r3, [pc, #288]	; (8005734 <http_find_file+0x2a0>)
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                          hs->param_vals);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3370      	adds	r3, #112	; 0x70
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800561e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005620:	47a0      	blx	r4
 8005622:	4603      	mov	r3, r0
 8005624:	60bb      	str	r3, [r7, #8]
           break;
 8005626:	e007      	b.n	8005638 <http_find_file+0x1a4>
      for (i = 0; i < g_iNumCGIs; i++) {
 8005628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562a:	3301      	adds	r3, #1
 800562c:	643b      	str	r3, [r7, #64]	; 0x40
 800562e:	4b42      	ldr	r3, [pc, #264]	; (8005738 <http_find_file+0x2a4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005634:	429a      	cmp	r2, r3
 8005636:	dbd1      	blt.n	80055dc <http_find_file+0x148>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4611      	mov	r1, r2
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe ffda 	bl	80045f8 <fs_open>
 8005644:	4603      	mov	r3, r0
 8005646:	76fb      	strb	r3, [r7, #27]
    if (err == ERR_OK) {
 8005648:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <http_find_file+0x1c2>
       file = &hs->file_handle;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	64bb      	str	r3, [r7, #72]	; 0x48
 8005654:	e006      	b.n	8005664 <http_find_file+0x1d0>
    } else {
      file = http_get_404_file(hs, &uri);
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	4619      	mov	r1, r3
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff fdeb 	bl	8005238 <http_get_404_file>
 8005662:	64b8      	str	r0, [r7, #72]	; 0x48
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8005664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005666:	2b00      	cmp	r3, #0
 8005668:	d045      	beq.n	80056f6 <http_find_file+0x262>
      /* See if we have been asked for an shtml file and, if so,
         enable tag checking. */
      const char* ext = NULL, *sub;
 800566a:	2300      	movs	r3, #0
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
      char* param = (char*)strstr(uri, "?");
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	213f      	movs	r1, #63	; 0x3f
 8005672:	4618      	mov	r0, r3
 8005674:	f009 fde2 	bl	800f23c <strchr>
 8005678:	6178      	str	r0, [r7, #20]
      if (param != NULL) {
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <http_find_file+0x1f2>
         /* separate uri from parameters for now, set back later */
         *param = 0;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
      }
      sub = uri;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
      ext = uri;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 800568e:	212e      	movs	r1, #46	; 0x2e
 8005690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005692:	f009 fdd3 	bl	800f23c <strchr>
 8005696:	6338      	str	r0, [r7, #48]	; 0x30
 8005698:	e009      	b.n	80056ae <http_find_file+0x21a>
      {
         ext = sub;
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
         sub++;
 800569e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a0:	3301      	adds	r3, #1
 80056a2:	633b      	str	r3, [r7, #48]	; 0x30
      for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, "."))
 80056a4:	212e      	movs	r1, #46	; 0x2e
 80056a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056a8:	f009 fdc8 	bl	800f23c <strchr>
 80056ac:	6338      	str	r0, [r7, #48]	; 0x30
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f2      	bne.n	800569a <http_find_file+0x206>
      }
      tag_check = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80056ba:	2300      	movs	r3, #0
 80056bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056be:	e011      	b.n	80056e4 <http_find_file+0x250>
        if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <http_find_file+0x2ac>)
 80056c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c8:	4619      	mov	r1, r3
 80056ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80056cc:	f000 fb1f 	bl	8005d0e <lwip_stricmp>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <http_find_file+0x24a>
          tag_check = 1;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 80056dc:	e005      	b.n	80056ea <http_find_file+0x256>
      for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80056de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e0:	3301      	adds	r3, #1
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d9ea      	bls.n	80056c0 <http_find_file+0x22c>
        }
      }
      if (param != NULL) {
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <http_find_file+0x262>
         *param = '?';
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	223f      	movs	r2, #63	; 0x3f
 80056f4:	701a      	strb	r2, [r3, #0]
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80056f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <http_find_file+0x276>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80056fc:	f107 0308 	add.w	r3, r7, #8
 8005700:	4619      	mov	r1, r3
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f7ff fd98 	bl	8005238 <http_get_404_file>
 8005708:	64b8      	str	r0, [r7, #72]	; 0x48
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4613      	mov	r3, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f811 	bl	8005744 <http_init_file>
 8005722:	4603      	mov	r3, r0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3754      	adds	r7, #84	; 0x54
 8005728:	46bd      	mov	sp, r7
 800572a:	bd90      	pop	{r4, r7, pc}
 800572c:	200004a4 	.word	0x200004a4
 8005730:	080124e4 	.word	0x080124e4
 8005734:	20003c0c 	.word	0x20003c0c
 8005738:	20003c04 	.word	0x20003c04
 800573c:	20003c14 	.word	0x20003c14
 8005740:	080124d4 	.word	0x080124d4

08005744 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d072      	beq.n	800583e <http_init_file+0xfa>
    /* file opened, initialise struct http_state */
#if LWIP_HTTPD_SSI
    if (tag_check) {
 8005758:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01c      	beq.n	800579a <http_init_file+0x56>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8005760:	f7fe ff9f 	bl	80046a2 <http_ssi_state_alloc>
 8005764:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d016      	beq.n	800579a <http_init_file+0x56>
        ssi->tag_index = 0;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2200      	movs	r2, #0
 8005770:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
        ssi->parsed = file->data;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	461a      	mov	r2, r3
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da06      	bge.n	80057be <http_init_file+0x7a>
 80057b0:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <http_init_file+0x120>)
 80057b2:	f640 02cf 	movw	r2, #2255	; 0x8cf
 80057b6:	492c      	ldr	r1, [pc, #176]	; (8005868 <http_init_file+0x124>)
 80057b8:	482c      	ldr	r0, [pc, #176]	; (800586c <http_init_file+0x128>)
 80057ba:	f009 fd27 	bl	800f20c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	461a      	mov	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	7c1b      	ldrb	r3, [r3, #16]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <http_init_file+0xa8>
 80057de:	4b21      	ldr	r3, [pc, #132]	; (8005864 <http_init_file+0x120>)
 80057e0:	f640 02de 	movw	r2, #2270	; 0x8de
 80057e4:	4922      	ldr	r1, [pc, #136]	; (8005870 <http_init_file+0x12c>)
 80057e6:	4821      	ldr	r0, [pc, #132]	; (800586c <http_init_file+0x128>)
 80057e8:	f009 fd10 	bl	800f20c <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d032      	beq.n	8005858 <http_init_file+0x114>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	7c1b      	ldrb	r3, [r3, #16]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d02b      	beq.n	8005858 <http_init_file+0x114>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6998      	ldr	r0, [r3, #24]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	461a      	mov	r2, r3
 800580a:	491a      	ldr	r1, [pc, #104]	; (8005874 <http_init_file+0x130>)
 800580c:	f000 fa49 	bl	8005ca2 <lwip_strnstr>
 8005810:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01f      	beq.n	8005858 <http_init_file+0x114>
        size_t diff = file_start + 4 - hs->file;
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	441a      	add	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	625a      	str	r2, [r3, #36]	; 0x24
 800583c:	e00c      	b.n	8005858 <http_init_file+0x114>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3720      	adds	r7, #32
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	080102fc 	.word	0x080102fc
 8005868:	08010448 	.word	0x08010448
 800586c:	08010344 	.word	0x08010344
 8005870:	08010468 	.word	0x08010468
 8005874:	08010440 	.word	0x08010440

08005878 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <http_err+0x1c>
    http_state_free(hs);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f7fe ff74 	bl	800477c <http_state_free>
  }
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <http_sent+0x1c>
    return ERR_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	e008      	b.n	80058ca <http_sent+0x2e>
  }

  hs->retries = 0;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80058c0:	6979      	ldr	r1, [r7, #20]
 80058c2:	68b8      	ldr	r0, [r7, #8]
 80058c4:	f7ff fc76 	bl	80051b4 <http_send>

  return ERR_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d107      	bne.n	80058f6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80058e6:	2100      	movs	r1, #0
 80058e8:	6838      	ldr	r0, [r7, #0]
 80058ea:	f7ff f803 	bl	80048f4 <http_close_conn>
 80058ee:	4603      	mov	r3, r0
 80058f0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e024      	b.n	8005940 <http_poll+0x6e>
  } else {
    hs->retries++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058fc:	3301      	adds	r3, #1
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590c:	2b04      	cmp	r3, #4
 800590e:	d105      	bne.n	800591c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	6838      	ldr	r0, [r7, #0]
 8005914:	f7fe ffee 	bl	80048f4 <http_close_conn>
      return ERR_OK;
 8005918:	2300      	movs	r3, #0
 800591a:	e011      	b.n	8005940 <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00d      	beq.n	800593e <http_poll+0x6c>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	6838      	ldr	r0, [r7, #0]
 800592e:	f7ff fc41 	bl	80051b4 <http_send>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 8005938:	6838      	ldr	r0, [r7, #0]
 800593a:	f006 fa9d 	bl	800be78 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800595a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <http_recv+0x26>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <http_recv+0x26>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d111      	bne.n	8005992 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	891b      	ldrh	r3, [r3, #8]
 8005978:	4619      	mov	r1, r3
 800597a:	68b8      	ldr	r0, [r7, #8]
 800597c:	f002 f99e 	bl	8007cbc <tcp_recved>
      pbuf_free(p);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 faff 	bl	8006f84 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8005986:	6979      	ldr	r1, [r7, #20]
 8005988:	68b8      	ldr	r0, [r7, #8]
 800598a:	f7fe ffb3 	bl	80048f4 <http_close_conn>
    return ERR_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e055      	b.n	8005a3e <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	891b      	ldrh	r3, [r3, #8]
 8005996:	4619      	mov	r1, r3
 8005998:	68b8      	ldr	r0, [r7, #8]
 800599a:	f002 f98f 	bl	8007cbc <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d147      	bne.n	8005a36 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fc8a 	bl	80052c4 <http_parse_request>
 80059b0:	4603      	mov	r3, r0
 80059b2:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80059b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d015      	beq.n	80059e8 <http_recv+0xa0>
 80059bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80059c0:	f113 0f05 	cmn.w	r3, #5
 80059c4:	d010      	beq.n	80059e8 <http_recv+0xa0>
 80059c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80059ca:	f113 0f10 	cmn.w	r3, #16
 80059ce:	d00b      	beq.n	80059e8 <http_recv+0xa0>
 80059d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80059d4:	f113 0f08 	cmn.w	r3, #8
 80059d8:	d006      	beq.n	80059e8 <http_recv+0xa0>
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <http_recv+0x100>)
 80059dc:	f640 12b4 	movw	r2, #2484	; 0x9b4
 80059e0:	491a      	ldr	r1, [pc, #104]	; (8005a4c <http_recv+0x104>)
 80059e2:	481b      	ldr	r0, [pc, #108]	; (8005a50 <http_recv+0x108>)
 80059e4:	f009 fc12 	bl	800f20c <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80059e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80059ec:	f113 0f05 	cmn.w	r3, #5
 80059f0:	d00b      	beq.n	8005a0a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <http_recv+0xc2>
          pbuf_free(hs->req);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 fac0 	bl	8006f84 <pbuf_free>
          hs->req = NULL;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 faba 	bl	8006f84 <pbuf_free>
      if (parsed == ERR_OK) {
 8005a10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 8005a18:	6979      	ldr	r1, [r7, #20]
 8005a1a:	68b8      	ldr	r0, [r7, #8]
 8005a1c:	f7ff fbca 	bl	80051b4 <http_send>
 8005a20:	e00c      	b.n	8005a3c <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8005a22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005a26:	f113 0f10 	cmn.w	r3, #16
 8005a2a:	d107      	bne.n	8005a3c <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8005a2c:	6979      	ldr	r1, [r7, #20]
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f7fe ff60 	bl	80048f4 <http_close_conn>
 8005a34:	e002      	b.n	8005a3c <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 faa4 	bl	8006f84 <pbuf_free>
    }
  }
  return ERR_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	080102fc 	.word	0x080102fc
 8005a4c:	08010494 	.word	0x08010494
 8005a50:	08010344 	.word	0x08010344

08005a54 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8005a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <http_accept+0x1c>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d102      	bne.n	8005a76 <http_accept+0x22>
    return ERR_VAL;
 8005a70:	f06f 0305 	mvn.w	r3, #5
 8005a74:	e025      	b.n	8005ac2 <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005a76:	2101      	movs	r1, #1
 8005a78:	68b8      	ldr	r0, [r7, #8]
 8005a7a:	f002 fd79 	bl	8008570 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005a7e:	f7fe fe3f 	bl	8004700 <http_state_alloc>
 8005a82:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8e:	e018      	b.n	8005ac2 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8005a96:	6979      	ldr	r1, [r7, #20]
 8005a98:	68b8      	ldr	r0, [r7, #8]
 8005a9a:	f002 ff01 	bl	80088a0 <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 8005a9e:	490b      	ldr	r1, [pc, #44]	; (8005acc <http_accept+0x78>)
 8005aa0:	68b8      	ldr	r0, [r7, #8]
 8005aa2:	f002 ff0d 	bl	80088c0 <tcp_recv>
  tcp_err(pcb, http_err);
 8005aa6:	490a      	ldr	r1, [pc, #40]	; (8005ad0 <http_accept+0x7c>)
 8005aa8:	68b8      	ldr	r0, [r7, #8]
 8005aaa:	f002 ff4b 	bl	8008944 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005aae:	2204      	movs	r2, #4
 8005ab0:	4908      	ldr	r1, [pc, #32]	; (8005ad4 <http_accept+0x80>)
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f002 ff7e 	bl	80089b4 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8005ab8:	4907      	ldr	r1, [pc, #28]	; (8005ad8 <http_accept+0x84>)
 8005aba:	68b8      	ldr	r0, [r7, #8]
 8005abc:	f002 ff22 	bl	8008904 <tcp_sent>

  return ERR_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	08005949 	.word	0x08005949
 8005ad0:	08005879 	.word	0x08005879
 8005ad4:	080058d3 	.word	0x080058d3
 8005ad8:	0800589d 	.word	0x0800589d

08005adc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005ae2:	202e      	movs	r0, #46	; 0x2e
 8005ae4:	f002 fece 	bl	8008884 <tcp_new_ip_type>
 8005ae8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <httpd_init+0x22>
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <httpd_init+0x7c>)
 8005af2:	f44f 6221 	mov.w	r2, #2576	; 0xa10
 8005af6:	4919      	ldr	r1, [pc, #100]	; (8005b5c <httpd_init+0x80>)
 8005af8:	4819      	ldr	r0, [pc, #100]	; (8005b60 <httpd_init+0x84>)
 8005afa:	f009 fb87 	bl	800f20c <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005afe:	2101      	movs	r1, #1
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f002 fd35 	bl	8008570 <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 8005b06:	2250      	movs	r2, #80	; 0x50
 8005b08:	4916      	ldr	r1, [pc, #88]	; (8005b64 <httpd_init+0x88>)
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f001 ff3c 	bl	8007988 <tcp_bind>
 8005b10:	4603      	mov	r3, r0
 8005b12:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <httpd_init+0x4e>
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <httpd_init+0x7c>)
 8005b1e:	f640 2215 	movw	r2, #2581	; 0xa15
 8005b22:	4911      	ldr	r1, [pc, #68]	; (8005b68 <httpd_init+0x8c>)
 8005b24:	480e      	ldr	r0, [pc, #56]	; (8005b60 <httpd_init+0x84>)
 8005b26:	f009 fb71 	bl	800f20c <iprintf>
  pcb = tcp_listen(pcb);
 8005b2a:	21ff      	movs	r1, #255	; 0xff
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 ffcd 	bl	8007acc <tcp_listen_with_backlog>
 8005b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <httpd_init+0x6c>
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <httpd_init+0x7c>)
 8005b3c:	f640 2217 	movw	r2, #2583	; 0xa17
 8005b40:	490a      	ldr	r1, [pc, #40]	; (8005b6c <httpd_init+0x90>)
 8005b42:	4807      	ldr	r0, [pc, #28]	; (8005b60 <httpd_init+0x84>)
 8005b44:	f009 fb62 	bl	800f20c <iprintf>
  tcp_accept(pcb, http_accept);
 8005b48:	4909      	ldr	r1, [pc, #36]	; (8005b70 <httpd_init+0x94>)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f002 ff1c 	bl	8008988 <tcp_accept>
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	080102fc 	.word	0x080102fc
 8005b5c:	080104c0 	.word	0x080104c0
 8005b60:	08010344 	.word	0x08010344
 8005b64:	080125dc 	.word	0x080125dc
 8005b68:	080104dc 	.word	0x080104dc
 8005b6c:	080104f8 	.word	0x080104f8
 8005b70:	08005a55 	.word	0x08005a55

08005b74 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <http_set_ssi_handler+0x20>
 8005b86:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <http_set_ssi_handler+0x64>)
 8005b88:	f640 2228 	movw	r2, #2600	; 0xa28
 8005b8c:	4913      	ldr	r1, [pc, #76]	; (8005bdc <http_set_ssi_handler+0x68>)
 8005b8e:	4814      	ldr	r0, [pc, #80]	; (8005be0 <http_set_ssi_handler+0x6c>)
 8005b90:	f009 fb3c 	bl	800f20c <iprintf>
  g_pfnSSIHandler = ssi_handler;
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <http_set_ssi_handler+0x70>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <http_set_ssi_handler+0x3a>
 8005ba0:	4b0d      	ldr	r3, [pc, #52]	; (8005bd8 <http_set_ssi_handler+0x64>)
 8005ba2:	f640 222f 	movw	r2, #2607	; 0xa2f
 8005ba6:	4910      	ldr	r1, [pc, #64]	; (8005be8 <http_set_ssi_handler+0x74>)
 8005ba8:	480d      	ldr	r0, [pc, #52]	; (8005be0 <http_set_ssi_handler+0x6c>)
 8005baa:	f009 fb2f 	bl	800f20c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	dc06      	bgt.n	8005bc2 <http_set_ssi_handler+0x4e>
 8005bb4:	4b08      	ldr	r3, [pc, #32]	; (8005bd8 <http_set_ssi_handler+0x64>)
 8005bb6:	f44f 6223 	mov.w	r2, #2608	; 0xa30
 8005bba:	490c      	ldr	r1, [pc, #48]	; (8005bec <http_set_ssi_handler+0x78>)
 8005bbc:	4808      	ldr	r0, [pc, #32]	; (8005be0 <http_set_ssi_handler+0x6c>)
 8005bbe:	f009 fb25 	bl	800f20c <iprintf>

  g_ppcTags = tags;
 8005bc2:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <http_set_ssi_handler+0x7c>)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6013      	str	r3, [r2, #0]
  g_iNumTags = num_tags;
 8005bc8:	4a0a      	ldr	r2, [pc, #40]	; (8005bf4 <http_set_ssi_handler+0x80>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	080102fc 	.word	0x080102fc
 8005bdc:	08010518 	.word	0x08010518
 8005be0:	08010344 	.word	0x08010344
 8005be4:	20003c08 	.word	0x20003c08
 8005be8:	08010530 	.word	0x08010530
 8005bec:	08010540 	.word	0x08010540
 8005bf0:	20003c18 	.word	0x20003c18
 8005bf4:	20003c10 	.word	0x20003c10

08005bf8 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d106      	bne.n	8005c16 <http_set_cgi_handlers+0x1e>
 8005c08:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <http_set_cgi_handlers+0x48>)
 8005c0a:	f640 2242 	movw	r2, #2626	; 0xa42
 8005c0e:	490d      	ldr	r1, [pc, #52]	; (8005c44 <http_set_cgi_handlers+0x4c>)
 8005c10:	480d      	ldr	r0, [pc, #52]	; (8005c48 <http_set_cgi_handlers+0x50>)
 8005c12:	f009 fafb 	bl	800f20c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dc06      	bgt.n	8005c2a <http_set_cgi_handlers+0x32>
 8005c1c:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <http_set_cgi_handlers+0x48>)
 8005c1e:	f640 2243 	movw	r2, #2627	; 0xa43
 8005c22:	490a      	ldr	r1, [pc, #40]	; (8005c4c <http_set_cgi_handlers+0x54>)
 8005c24:	4808      	ldr	r0, [pc, #32]	; (8005c48 <http_set_cgi_handlers+0x50>)
 8005c26:	f009 faf1 	bl	800f20c <iprintf>

  g_pCGIs = cgis;
 8005c2a:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <http_set_cgi_handlers+0x58>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 8005c30:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <http_set_cgi_handlers+0x5c>)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6013      	str	r3, [r2, #0]
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	080102fc 	.word	0x080102fc
 8005c44:	08010558 	.word	0x08010558
 8005c48:	08010344 	.word	0x08010344
 8005c4c:	08010568 	.word	0x08010568
 8005c50:	20003c14 	.word	0x20003c14
 8005c54:	20003c04 	.word	0x20003c04

08005c58 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	ba5b      	rev16	r3, r3
 8005c66:	b29b      	uxth	r3, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	061a      	lsls	r2, r3, #24
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	0e1b      	lsrs	r3, r3, #24
 8005c96:	4313      	orrs	r3, r2
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr

08005ca2 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 8005cae:	68b8      	ldr	r0, [r7, #8]
 8005cb0:	f7fa fa92 	bl	80001d8 <strlen>
 8005cb4:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	e022      	b.n	8005d06 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	617b      	str	r3, [r7, #20]
 8005cc4:	e012      	b.n	8005cec <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	781a      	ldrb	r2, [r3, #0]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d109      	bne.n	8005ce6 <lwip_strnstr+0x44>
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	6978      	ldr	r0, [r7, #20]
 8005cd8:	f009 fac5 	bl	800f266 <strncmp>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	e00f      	b.n	8005d06 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d007      	beq.n	8005d04 <lwip_strnstr+0x62>
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	440b      	add	r3, r1
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d9e0      	bls.n	8005cc6 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	607a      	str	r2, [r7, #4]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	603a      	str	r2, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8005d2c:	7bfa      	ldrb	r2, [r7, #15]
 8005d2e:	7bbb      	ldrb	r3, [r7, #14]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d016      	beq.n	8005d62 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	f043 0320 	orr.w	r3, r3, #32
 8005d3a:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005d3c:	7b7b      	ldrb	r3, [r7, #13]
 8005d3e:	2b60      	cmp	r3, #96	; 0x60
 8005d40:	d90c      	bls.n	8005d5c <lwip_stricmp+0x4e>
 8005d42:	7b7b      	ldrb	r3, [r7, #13]
 8005d44:	2b7a      	cmp	r3, #122	; 0x7a
 8005d46:	d809      	bhi.n	8005d5c <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	f043 0320 	orr.w	r3, r3, #32
 8005d4e:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8005d50:	7b7a      	ldrb	r2, [r7, #13]
 8005d52:	7b3b      	ldrb	r3, [r7, #12]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d003      	beq.n	8005d60 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e006      	b.n	8005d6a <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e004      	b.n	8005d6a <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8005d60:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1d7      	bne.n	8005d18 <lwip_stricmp+0xa>
  return 0;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005d7e:	f000 f8a7 	bl	8005ed0 <mem_init>
  memp_init();
 8005d82:	f000 fb37 	bl	80063f4 <memp_init>
  pbuf_init();
  netif_init();
 8005d86:	f000 fbef 	bl	8006568 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005d8a:	f006 fe95 	bl	800cab8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005d8e:	f001 fb61 	bl	8007454 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8005d92:	f006 fd73 	bl	800c87c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005da8:	4b40      	ldr	r3, [pc, #256]	; (8005eac <plug_holes+0x10c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d206      	bcs.n	8005dc0 <plug_holes+0x20>
 8005db2:	4b3f      	ldr	r3, [pc, #252]	; (8005eb0 <plug_holes+0x110>)
 8005db4:	f240 125d 	movw	r2, #349	; 0x15d
 8005db8:	493e      	ldr	r1, [pc, #248]	; (8005eb4 <plug_holes+0x114>)
 8005dba:	483f      	ldr	r0, [pc, #252]	; (8005eb8 <plug_holes+0x118>)
 8005dbc:	f009 fa26 	bl	800f20c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005dc0:	4b3e      	ldr	r3, [pc, #248]	; (8005ebc <plug_holes+0x11c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d306      	bcc.n	8005dd8 <plug_holes+0x38>
 8005dca:	4b39      	ldr	r3, [pc, #228]	; (8005eb0 <plug_holes+0x110>)
 8005dcc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005dd0:	493b      	ldr	r1, [pc, #236]	; (8005ec0 <plug_holes+0x120>)
 8005dd2:	4839      	ldr	r0, [pc, #228]	; (8005eb8 <plug_holes+0x118>)
 8005dd4:	f009 fa1a 	bl	800f20c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <plug_holes+0x4e>
 8005de0:	4b33      	ldr	r3, [pc, #204]	; (8005eb0 <plug_holes+0x110>)
 8005de2:	f240 125f 	movw	r2, #351	; 0x15f
 8005de6:	4937      	ldr	r1, [pc, #220]	; (8005ec4 <plug_holes+0x124>)
 8005de8:	4833      	ldr	r0, [pc, #204]	; (8005eb8 <plug_holes+0x118>)
 8005dea:	f009 fa0f 	bl	800f20c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005df6:	d906      	bls.n	8005e06 <plug_holes+0x66>
 8005df8:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <plug_holes+0x110>)
 8005dfa:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005dfe:	4932      	ldr	r1, [pc, #200]	; (8005ec8 <plug_holes+0x128>)
 8005e00:	482d      	ldr	r0, [pc, #180]	; (8005eb8 <plug_holes+0x118>)
 8005e02:	f009 fa03 	bl	800f20c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8005e06:	4b29      	ldr	r3, [pc, #164]	; (8005eac <plug_holes+0x10c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	4413      	add	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d01f      	beq.n	8005e5a <plug_holes+0xba>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d11b      	bne.n	8005e5a <plug_holes+0xba>
 8005e22:	4b26      	ldr	r3, [pc, #152]	; (8005ebc <plug_holes+0x11c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d016      	beq.n	8005e5a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005e2c:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <plug_holes+0x12c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d102      	bne.n	8005e3c <plug_holes+0x9c>
      lfree = mem;
 8005e36:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <plug_holes+0x12c>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	881a      	ldrh	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005e44:	4b19      	ldr	r3, [pc, #100]	; (8005eac <plug_holes+0x10c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	1ad1      	subs	r1, r2, r3
 8005e4c:	4b17      	ldr	r3, [pc, #92]	; (8005eac <plug_holes+0x10c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	8812      	ldrh	r2, [r2, #0]
 8005e54:	4413      	add	r3, r2
 8005e56:	b28a      	uxth	r2, r1
 8005e58:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <plug_holes+0x10c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	8852      	ldrh	r2, [r2, #2]
 8005e62:	4413      	add	r3, r2
 8005e64:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d01a      	beq.n	8005ea4 <plug_holes+0x104>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	791b      	ldrb	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d116      	bne.n	8005ea4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005e76:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <plug_holes+0x12c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d102      	bne.n	8005e86 <plug_holes+0xe6>
      lfree = pmem;
 8005e80:	4a12      	ldr	r2, [pc, #72]	; (8005ecc <plug_holes+0x12c>)
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005e8e:	4b07      	ldr	r3, [pc, #28]	; (8005eac <plug_holes+0x10c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	1ad1      	subs	r1, r2, r3
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <plug_holes+0x10c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	8812      	ldrh	r2, [r2, #0]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	b28a      	uxth	r2, r1
 8005ea2:	805a      	strh	r2, [r3, #2]
  }
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	200004e4 	.word	0x200004e4
 8005eb0:	08010584 	.word	0x08010584
 8005eb4:	080105b4 	.word	0x080105b4
 8005eb8:	080105cc 	.word	0x080105cc
 8005ebc:	200004e8 	.word	0x200004e8
 8005ec0:	080105f4 	.word	0x080105f4
 8005ec4:	08010610 	.word	0x08010610
 8005ec8:	0801062c 	.word	0x0801062c
 8005ecc:	200004ec 	.word	0x200004ec

08005ed0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005ed6:	4b18      	ldr	r3, [pc, #96]	; (8005f38 <mem_init+0x68>)
 8005ed8:	3303      	adds	r3, #3
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <mem_init+0x6c>)
 8005ee2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <mem_init+0x6c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005ef0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005efe:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <mem_init+0x6c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8005f06:	4a0e      	ldr	r2, [pc, #56]	; (8005f40 <mem_init+0x70>)
 8005f08:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <mem_init+0x70>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <mem_init+0x70>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005f1a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <mem_init+0x70>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005f24:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <mem_init+0x6c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a06      	ldr	r2, [pc, #24]	; (8005f44 <mem_init+0x74>)
 8005f2c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr
 8005f38:	20003c34 	.word	0x20003c34
 8005f3c:	200004e4 	.word	0x200004e4
 8005f40:	200004e8 	.word	0x200004e8
 8005f44:	200004ec 	.word	0x200004ec

08005f48 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d043      	beq.n	8005fde <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <mem_free+0x26>
 8005f60:	4b22      	ldr	r3, [pc, #136]	; (8005fec <mem_free+0xa4>)
 8005f62:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8005f66:	4922      	ldr	r1, [pc, #136]	; (8005ff0 <mem_free+0xa8>)
 8005f68:	4822      	ldr	r0, [pc, #136]	; (8005ff4 <mem_free+0xac>)
 8005f6a:	f009 f94f 	bl	800f20c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005f6e:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <mem_free+0xb0>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d304      	bcc.n	8005f82 <mem_free+0x3a>
 8005f78:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <mem_free+0xb4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d306      	bcc.n	8005f90 <mem_free+0x48>
 8005f82:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <mem_free+0xa4>)
 8005f84:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8005f88:	491d      	ldr	r1, [pc, #116]	; (8006000 <mem_free+0xb8>)
 8005f8a:	481a      	ldr	r0, [pc, #104]	; (8005ff4 <mem_free+0xac>)
 8005f8c:	f009 f93e 	bl	800f20c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005f90:	4b19      	ldr	r3, [pc, #100]	; (8005ff8 <mem_free+0xb0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d323      	bcc.n	8005fe2 <mem_free+0x9a>
 8005f9a:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <mem_free+0xb4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d21e      	bcs.n	8005fe2 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3b08      	subs	r3, #8
 8005fa8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	791b      	ldrb	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <mem_free+0x78>
 8005fb2:	4b0e      	ldr	r3, [pc, #56]	; (8005fec <mem_free+0xa4>)
 8005fb4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005fb8:	4912      	ldr	r1, [pc, #72]	; (8006004 <mem_free+0xbc>)
 8005fba:	480e      	ldr	r0, [pc, #56]	; (8005ff4 <mem_free+0xac>)
 8005fbc:	f009 f926 	bl	800f20c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <mem_free+0xc0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d202      	bcs.n	8005fd6 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005fd0:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <mem_free+0xc0>)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff fee2 	bl	8005da0 <plug_holes>
 8005fdc:	e002      	b.n	8005fe4 <mem_free+0x9c>
    return;
 8005fde:	bf00      	nop
 8005fe0:	e000      	b.n	8005fe4 <mem_free+0x9c>
    return;
 8005fe2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	08010584 	.word	0x08010584
 8005ff0:	08010658 	.word	0x08010658
 8005ff4:	080105cc 	.word	0x080105cc
 8005ff8:	200004e4 	.word	0x200004e4
 8005ffc:	200004e8 	.word	0x200004e8
 8006000:	0801067c 	.word	0x0801067c
 8006004:	08010694 	.word	0x08010694
 8006008:	200004ec 	.word	0x200004ec

0800600c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006018:	887b      	ldrh	r3, [r7, #2]
 800601a:	3303      	adds	r3, #3
 800601c:	b29b      	uxth	r3, r3
 800601e:	f023 0303 	bic.w	r3, r3, #3
 8006022:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8006024:	887b      	ldrh	r3, [r7, #2]
 8006026:	2b0b      	cmp	r3, #11
 8006028:	d801      	bhi.n	800602e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800602a:	230c      	movs	r3, #12
 800602c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800602e:	887b      	ldrh	r3, [r7, #2]
 8006030:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006034:	d901      	bls.n	800603a <mem_trim+0x2e>
    return NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	e0b1      	b.n	800619e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800603a:	4b5b      	ldr	r3, [pc, #364]	; (80061a8 <mem_trim+0x19c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d304      	bcc.n	800604e <mem_trim+0x42>
 8006044:	4b59      	ldr	r3, [pc, #356]	; (80061ac <mem_trim+0x1a0>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d306      	bcc.n	800605c <mem_trim+0x50>
 800604e:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <mem_trim+0x1a4>)
 8006050:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006054:	4957      	ldr	r1, [pc, #348]	; (80061b4 <mem_trim+0x1a8>)
 8006056:	4858      	ldr	r0, [pc, #352]	; (80061b8 <mem_trim+0x1ac>)
 8006058:	f009 f8d8 	bl	800f20c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800605c:	4b52      	ldr	r3, [pc, #328]	; (80061a8 <mem_trim+0x19c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d304      	bcc.n	8006070 <mem_trim+0x64>
 8006066:	4b51      	ldr	r3, [pc, #324]	; (80061ac <mem_trim+0x1a0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d301      	bcc.n	8006074 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	e094      	b.n	800619e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3b08      	subs	r3, #8
 8006078:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800607a:	4b4b      	ldr	r3, [pc, #300]	; (80061a8 <mem_trim+0x19c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	8a7b      	ldrh	r3, [r7, #18]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b08      	subs	r3, #8
 8006090:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006092:	887a      	ldrh	r2, [r7, #2]
 8006094:	8a3b      	ldrh	r3, [r7, #16]
 8006096:	429a      	cmp	r2, r3
 8006098:	d906      	bls.n	80060a8 <mem_trim+0x9c>
 800609a:	4b45      	ldr	r3, [pc, #276]	; (80061b0 <mem_trim+0x1a4>)
 800609c:	f240 2206 	movw	r2, #518	; 0x206
 80060a0:	4946      	ldr	r1, [pc, #280]	; (80061bc <mem_trim+0x1b0>)
 80060a2:	4845      	ldr	r0, [pc, #276]	; (80061b8 <mem_trim+0x1ac>)
 80060a4:	f009 f8b2 	bl	800f20c <iprintf>
  if (newsize > size) {
 80060a8:	887a      	ldrh	r2, [r7, #2]
 80060aa:	8a3b      	ldrh	r3, [r7, #16]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d901      	bls.n	80060b4 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e074      	b.n	800619e <mem_trim+0x192>
  }
  if (newsize == size) {
 80060b4:	887a      	ldrh	r2, [r7, #2]
 80060b6:	8a3b      	ldrh	r3, [r7, #16]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d101      	bne.n	80060c0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	e06e      	b.n	800619e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80060c0:	4b39      	ldr	r3, [pc, #228]	; (80061a8 <mem_trim+0x19c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	8812      	ldrh	r2, [r2, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	791b      	ldrb	r3, [r3, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d131      	bne.n	8006138 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80060da:	8a7a      	ldrh	r2, [r7, #18]
 80060dc:	887b      	ldrh	r3, [r7, #2]
 80060de:	4413      	add	r3, r2
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3308      	adds	r3, #8
 80060e4:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80060e6:	4b36      	ldr	r3, [pc, #216]	; (80061c0 <mem_trim+0x1b4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d105      	bne.n	80060fc <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80060f0:	4b2d      	ldr	r3, [pc, #180]	; (80061a8 <mem_trim+0x19c>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	897b      	ldrh	r3, [r7, #10]
 80060f6:	4413      	add	r3, r2
 80060f8:	4a31      	ldr	r2, [pc, #196]	; (80061c0 <mem_trim+0x1b4>)
 80060fa:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80060fc:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <mem_trim+0x19c>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	897b      	ldrh	r3, [r7, #10]
 8006102:	4413      	add	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	893a      	ldrh	r2, [r7, #8]
 8006110:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8a7a      	ldrh	r2, [r7, #18]
 8006116:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	897a      	ldrh	r2, [r7, #10]
 800611c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006126:	d039      	beq.n	800619c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006128:	4b1f      	ldr	r3, [pc, #124]	; (80061a8 <mem_trim+0x19c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	8812      	ldrh	r2, [r2, #0]
 8006130:	4413      	add	r3, r2
 8006132:	897a      	ldrh	r2, [r7, #10]
 8006134:	805a      	strh	r2, [r3, #2]
 8006136:	e031      	b.n	800619c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006138:	887b      	ldrh	r3, [r7, #2]
 800613a:	f103 0214 	add.w	r2, r3, #20
 800613e:	8a3b      	ldrh	r3, [r7, #16]
 8006140:	429a      	cmp	r2, r3
 8006142:	d82b      	bhi.n	800619c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006144:	8a7a      	ldrh	r2, [r7, #18]
 8006146:	887b      	ldrh	r3, [r7, #2]
 8006148:	4413      	add	r3, r2
 800614a:	b29b      	uxth	r3, r3
 800614c:	3308      	adds	r3, #8
 800614e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006150:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <mem_trim+0x19c>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	897b      	ldrh	r3, [r7, #10]
 8006156:	4413      	add	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800615a:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <mem_trim+0x1b4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	429a      	cmp	r2, r3
 8006162:	d202      	bcs.n	800616a <mem_trim+0x15e>
      lfree = mem2;
 8006164:	4a16      	ldr	r2, [pc, #88]	; (80061c0 <mem_trim+0x1b4>)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	881a      	ldrh	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8a7a      	ldrh	r2, [r7, #18]
 800617c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	897a      	ldrh	r2, [r7, #10]
 8006182:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800618c:	d006      	beq.n	800619c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <mem_trim+0x19c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	8812      	ldrh	r2, [r2, #0]
 8006196:	4413      	add	r3, r2
 8006198:	897a      	ldrh	r2, [r7, #10]
 800619a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800619c:	687b      	ldr	r3, [r7, #4]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200004e4 	.word	0x200004e4
 80061ac:	200004e8 	.word	0x200004e8
 80061b0:	08010584 	.word	0x08010584
 80061b4:	080106a8 	.word	0x080106a8
 80061b8:	080105cc 	.word	0x080105cc
 80061bc:	080106c0 	.word	0x080106c0
 80061c0:	200004ec 	.word	0x200004ec

080061c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4603      	mov	r3, r0
 80061cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <mem_malloc+0x14>
    return NULL;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e0c7      	b.n	8006368 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	3303      	adds	r3, #3
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	2b0b      	cmp	r3, #11
 80061e8:	d801      	bhi.n	80061ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80061ea:	230c      	movs	r3, #12
 80061ec:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80061f4:	d901      	bls.n	80061fa <mem_malloc+0x36>
    return NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e0b6      	b.n	8006368 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80061fa:	4b5d      	ldr	r3, [pc, #372]	; (8006370 <mem_malloc+0x1ac>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b5d      	ldr	r3, [pc, #372]	; (8006374 <mem_malloc+0x1b0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	83fb      	strh	r3, [r7, #30]
 8006206:	e0a7      	b.n	8006358 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8006208:	4b5a      	ldr	r3, [pc, #360]	; (8006374 <mem_malloc+0x1b0>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	8bfb      	ldrh	r3, [r7, #30]
 800620e:	4413      	add	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	791b      	ldrb	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f040 8098 	bne.w	800634c <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	8bfb      	ldrh	r3, [r7, #30]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	f1a3 0208 	sub.w	r2, r3, #8
 800622a:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800622c:	429a      	cmp	r2, r3
 800622e:	f0c0 808d 	bcc.w	800634c <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	8bfb      	ldrh	r3, [r7, #30]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	f1a3 0208 	sub.w	r2, r3, #8
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	3314      	adds	r3, #20
 8006244:	429a      	cmp	r2, r3
 8006246:	d327      	bcc.n	8006298 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006248:	8bfa      	ldrh	r2, [r7, #30]
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	4413      	add	r3, r2
 800624e:	b29b      	uxth	r3, r3
 8006250:	3308      	adds	r3, #8
 8006252:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006254:	4b47      	ldr	r3, [pc, #284]	; (8006374 <mem_malloc+0x1b0>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	8a7b      	ldrh	r3, [r7, #18]
 800625a:	4413      	add	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	881a      	ldrh	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8bfa      	ldrh	r2, [r7, #30]
 8006270:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	8a7a      	ldrh	r2, [r7, #18]
 8006276:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	2201      	movs	r2, #1
 800627c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006286:	d00a      	beq.n	800629e <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006288:	4b3a      	ldr	r3, [pc, #232]	; (8006374 <mem_malloc+0x1b0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	8812      	ldrh	r2, [r2, #0]
 8006290:	4413      	add	r3, r2
 8006292:	8a7a      	ldrh	r2, [r7, #18]
 8006294:	805a      	strh	r2, [r3, #2]
 8006296:	e002      	b.n	800629e <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2201      	movs	r2, #1
 800629c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800629e:	4b34      	ldr	r3, [pc, #208]	; (8006370 <mem_malloc+0x1ac>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d127      	bne.n	80062f8 <mem_malloc+0x134>
          struct mem *cur = lfree;
 80062a8:	4b31      	ldr	r3, [pc, #196]	; (8006370 <mem_malloc+0x1ac>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80062ae:	e005      	b.n	80062bc <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80062b0:	4b30      	ldr	r3, [pc, #192]	; (8006374 <mem_malloc+0x1b0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	4413      	add	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	791b      	ldrb	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <mem_malloc+0x10a>
 80062c4:	4b2c      	ldr	r3, [pc, #176]	; (8006378 <mem_malloc+0x1b4>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d1f0      	bne.n	80062b0 <mem_malloc+0xec>
          }
          lfree = cur;
 80062ce:	4a28      	ldr	r2, [pc, #160]	; (8006370 <mem_malloc+0x1ac>)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80062d4:	4b26      	ldr	r3, [pc, #152]	; (8006370 <mem_malloc+0x1ac>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b27      	ldr	r3, [pc, #156]	; (8006378 <mem_malloc+0x1b4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d00b      	beq.n	80062f8 <mem_malloc+0x134>
 80062e0:	4b23      	ldr	r3, [pc, #140]	; (8006370 <mem_malloc+0x1ac>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	791b      	ldrb	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d006      	beq.n	80062f8 <mem_malloc+0x134>
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <mem_malloc+0x1b8>)
 80062ec:	f240 22cf 	movw	r2, #719	; 0x2cf
 80062f0:	4923      	ldr	r1, [pc, #140]	; (8006380 <mem_malloc+0x1bc>)
 80062f2:	4824      	ldr	r0, [pc, #144]	; (8006384 <mem_malloc+0x1c0>)
 80062f4:	f008 ff8a 	bl	800f20c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80062f8:	88fa      	ldrh	r2, [r7, #6]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	4413      	add	r3, r2
 80062fe:	3308      	adds	r3, #8
 8006300:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <mem_malloc+0x1b4>)
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	4293      	cmp	r3, r2
 8006306:	d906      	bls.n	8006316 <mem_malloc+0x152>
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <mem_malloc+0x1b8>)
 800630a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800630e:	491e      	ldr	r1, [pc, #120]	; (8006388 <mem_malloc+0x1c4>)
 8006310:	481c      	ldr	r0, [pc, #112]	; (8006384 <mem_malloc+0x1c0>)
 8006312:	f008 ff7b 	bl	800f20c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <mem_malloc+0x16a>
 8006320:	4b16      	ldr	r3, [pc, #88]	; (800637c <mem_malloc+0x1b8>)
 8006322:	f240 22d5 	movw	r2, #725	; 0x2d5
 8006326:	4919      	ldr	r1, [pc, #100]	; (800638c <mem_malloc+0x1c8>)
 8006328:	4816      	ldr	r0, [pc, #88]	; (8006384 <mem_malloc+0x1c0>)
 800632a:	f008 ff6f 	bl	800f20c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f003 0303 	and.w	r3, r3, #3
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <mem_malloc+0x182>
 8006338:	4b10      	ldr	r3, [pc, #64]	; (800637c <mem_malloc+0x1b8>)
 800633a:	f240 22d7 	movw	r2, #727	; 0x2d7
 800633e:	4914      	ldr	r1, [pc, #80]	; (8006390 <mem_malloc+0x1cc>)
 8006340:	4810      	ldr	r0, [pc, #64]	; (8006384 <mem_malloc+0x1c0>)
 8006342:	f008 ff63 	bl	800f20c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	3308      	adds	r3, #8
 800634a:	e00d      	b.n	8006368 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <mem_malloc+0x1b0>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	8bfb      	ldrh	r3, [r7, #30]
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006358:	8bfa      	ldrh	r2, [r7, #30]
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006360:	429a      	cmp	r2, r3
 8006362:	f4ff af51 	bcc.w	8006208 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3720      	adds	r7, #32
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	200004ec 	.word	0x200004ec
 8006374:	200004e4 	.word	0x200004e4
 8006378:	200004e8 	.word	0x200004e8
 800637c:	08010584 	.word	0x08010584
 8006380:	080106e0 	.word	0x080106e0
 8006384:	080105cc 	.word	0x080105cc
 8006388:	080106fc 	.word	0x080106fc
 800638c:	0801072c 	.word	0x0801072c
 8006390:	0801075c 	.word	0x0801075c

08006394 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	3303      	adds	r3, #3
 80063aa:	f023 0303 	bic.w	r3, r3, #3
 80063ae:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80063b0:	2300      	movs	r3, #0
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	e011      	b.n	80063da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	881b      	ldrh	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4413      	add	r3, r2
 80063d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	885b      	ldrh	r3, [r3, #2]
 80063de:	461a      	mov	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4293      	cmp	r3, r2
 80063e4:	dbe7      	blt.n	80063b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
	...

080063f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80063fa:	2300      	movs	r3, #0
 80063fc:	80fb      	strh	r3, [r7, #6]
 80063fe:	e009      	b.n	8006414 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	4a08      	ldr	r2, [pc, #32]	; (8006424 <memp_init+0x30>)
 8006404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff ffc3 	bl	8006394 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	3301      	adds	r3, #1
 8006412:	80fb      	strh	r3, [r7, #6]
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	2b08      	cmp	r3, #8
 8006418:	d9f2      	bls.n	8006400 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	08012578 	.word	0x08012578

08006428 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d012      	beq.n	8006464 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d006      	beq.n	8006460 <do_memp_malloc_pool+0x38>
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <do_memp_malloc_pool+0x48>)
 8006454:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8006458:	4906      	ldr	r1, [pc, #24]	; (8006474 <do_memp_malloc_pool+0x4c>)
 800645a:	4807      	ldr	r0, [pc, #28]	; (8006478 <do_memp_malloc_pool+0x50>)
 800645c:	f008 fed6 	bl	800f20c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	e000      	b.n	8006466 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	08010780 	.word	0x08010780
 8006474:	080107b0 	.word	0x080107b0
 8006478:	080107d4 	.word	0x080107d4

0800647c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d908      	bls.n	800649e <memp_malloc+0x22>
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <memp_malloc+0x3c>)
 800648e:	f240 1287 	movw	r2, #391	; 0x187
 8006492:	490a      	ldr	r1, [pc, #40]	; (80064bc <memp_malloc+0x40>)
 8006494:	480a      	ldr	r0, [pc, #40]	; (80064c0 <memp_malloc+0x44>)
 8006496:	f008 feb9 	bl	800f20c <iprintf>
 800649a:	2300      	movs	r3, #0
 800649c:	e008      	b.n	80064b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <memp_malloc+0x48>)
 80064a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff ffbe 	bl	8006428 <do_memp_malloc_pool>
 80064ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	08010780 	.word	0x08010780
 80064bc:	08010810 	.word	0x08010810
 80064c0:	080107d4 	.word	0x080107d4
 80064c4:	08012578 	.word	0x08012578

080064c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f003 0303 	and.w	r3, r3, #3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <do_memp_free_pool+0x22>
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <do_memp_free_pool+0x40>)
 80064de:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80064e2:	490a      	ldr	r1, [pc, #40]	; (800650c <do_memp_free_pool+0x44>)
 80064e4:	480a      	ldr	r0, [pc, #40]	; (8006510 <do_memp_free_pool+0x48>)
 80064e6:	f008 fe91 	bl	800f20c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	08010780 	.word	0x08010780
 800650c:	08010830 	.word	0x08010830
 8006510:	080107d4 	.word	0x080107d4

08006514 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	2b08      	cmp	r3, #8
 8006524:	d907      	bls.n	8006536 <memp_free+0x22>
 8006526:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <memp_free+0x44>)
 8006528:	f240 12db 	movw	r2, #475	; 0x1db
 800652c:	490b      	ldr	r1, [pc, #44]	; (800655c <memp_free+0x48>)
 800652e:	480c      	ldr	r0, [pc, #48]	; (8006560 <memp_free+0x4c>)
 8006530:	f008 fe6c 	bl	800f20c <iprintf>
 8006534:	e00c      	b.n	8006550 <memp_free+0x3c>

  if (mem == NULL) {
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	4a09      	ldr	r2, [pc, #36]	; (8006564 <memp_free+0x50>)
 8006540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ffbe 	bl	80064c8 <do_memp_free_pool>
 800654c:	e000      	b.n	8006550 <memp_free+0x3c>
    return;
 800654e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	08010780 	.word	0x08010780
 800655c:	08010850 	.word	0x08010850
 8006560:	080107d4 	.word	0x080107d4
 8006564:	08012578 	.word	0x08012578

08006568 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr

08006574 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d105      	bne.n	8006594 <netif_add+0x20>
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <netif_add+0x9c>)
 800658a:	22fb      	movs	r2, #251	; 0xfb
 800658c:	4921      	ldr	r1, [pc, #132]	; (8006614 <netif_add+0xa0>)
 800658e:	4822      	ldr	r0, [pc, #136]	; (8006618 <netif_add+0xa4>)
 8006590:	f008 fe3c 	bl	800f20c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2203      	movs	r2, #3
 80065b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80065c2:	4b16      	ldr	r3, [pc, #88]	; (800661c <netif_add+0xa8>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	b2d1      	uxtb	r1, r2
 80065ca:	4a14      	ldr	r2, [pc, #80]	; (800661c <netif_add+0xa8>)
 80065cc:	7011      	strb	r1, [r2, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a3a      	ldr	r2, [r7, #32]
 80065d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f81f 	bl	8006624 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	4798      	blx	r3
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <netif_add+0x82>
    return NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	e007      	b.n	8006606 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <netif_add+0xac>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80065fe:	4a08      	ldr	r2, [pc, #32]	; (8006620 <netif_add+0xac>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8006604:	68fb      	ldr	r3, [r7, #12]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	0801086c 	.word	0x0801086c
 8006614:	080108a0 	.word	0x080108a0
 8006618:	080108b8 	.word	0x080108b8
 800661c:	20000514 	.word	0x20000514
 8006620:	2000713c 	.word	0x2000713c

08006624 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <netif_set_addr+0x1c>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10c      	bne.n	800665a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 f81a 	bl	800667c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f861 	bl	8006712 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f84a 	bl	80066ec <netif_set_gw>
 8006658:	e00c      	b.n	8006674 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f858 	bl	8006712 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f841 	bl	80066ec <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f805 	bl	800667c <netif_set_ipaddr>
  }
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <netif_set_ipaddr+0x18>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	e002      	b.n	800669a <netif_set_ipaddr+0x1e>
 8006694:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <netif_set_ipaddr+0x6c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3304      	adds	r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d01c      	beq.n	80066e0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3304      	adds	r3, #4
 80066aa:	f107 020c 	add.w	r2, r7, #12
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f002 fabd 	bl	8008c30 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3304      	adds	r3, #4
 80066ba:	f107 020c 	add.w	r2, r7, #12
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f006 fb1f 	bl	800cd04 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <netif_set_ipaddr+0x56>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	e000      	b.n	80066d4 <netif_set_ipaddr+0x58>
 80066d2:	2300      	movs	r3, #0
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80066d8:	2101      	movs	r1, #1
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f85d 	bl	800679a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	080125dc 	.word	0x080125dc

080066ec <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <netif_set_gw+0x16>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	e000      	b.n	8006704 <netif_set_gw+0x18>
 8006702:	2300      	movs	r3, #0
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <netif_set_netmask+0x16>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	e000      	b.n	800672a <netif_set_netmask+0x18>
 8006728:	2300      	movs	r3, #0
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006740:	4a03      	ldr	r2, [pc, #12]	; (8006750 <netif_set_default+0x18>)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr
 8006750:	20007140 	.word	0x20007140

08006754 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d113      	bne.n	8006792 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	b2da      	uxtb	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800678a:	2103      	movs	r1, #3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f804 	bl	800679a <netif_issue_reports>
    }
  }
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d011      	beq.n	80067d4 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3304      	adds	r3, #4
 80067b4:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00c      	beq.n	80067d4 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f007 f9ca 	bl	800db68 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d012      	beq.n	8006818 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f006 fd6e 	bl	800d2f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  if (netif) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	61da      	str	r2, [r3, #28]
  }
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr

08006840 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006846:	4b0e      	ldr	r3, [pc, #56]	; (8006880 <pbuf_free_ooseq+0x40>)
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800684c:	4b0d      	ldr	r3, [pc, #52]	; (8006884 <pbuf_free_ooseq+0x44>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	607b      	str	r3, [r7, #4]
 8006852:	e00f      	b.n	8006874 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	4618      	mov	r0, r3
 8006862:	f001 fe58 	bl	8008516 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800686c:	e005      	b.n	800687a <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1ec      	bne.n	8006854 <pbuf_free_ooseq+0x14>
    }
  }
}
 800687a:	3708      	adds	r7, #8
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20007144 	.word	0x20007144
 8006884:	2000714c 	.word	0x2000714c

08006888 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800688c:	4b03      	ldr	r3, [pc, #12]	; (800689c <pbuf_pool_is_empty+0x14>)
 800688e:	2201      	movs	r2, #1
 8006890:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006892:	bf00      	nop
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	20007144 	.word	0x20007144

080068a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
 80068aa:	460b      	mov	r3, r1
 80068ac:	80bb      	strh	r3, [r7, #4]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d81c      	bhi.n	80068f2 <pbuf_alloc+0x52>
 80068b8:	a201      	add	r2, pc, #4	; (adr r2, 80068c0 <pbuf_alloc+0x20>)
 80068ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068be:	bf00      	nop
 80068c0:	080068d5 	.word	0x080068d5
 80068c4:	080068db 	.word	0x080068db
 80068c8:	080068e1 	.word	0x080068e1
 80068cc:	080068e7 	.word	0x080068e7
 80068d0:	080068ed 	.word	0x080068ed
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80068d4:	2336      	movs	r3, #54	; 0x36
 80068d6:	82fb      	strh	r3, [r7, #22]
    break;
 80068d8:	e014      	b.n	8006904 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80068da:	2322      	movs	r3, #34	; 0x22
 80068dc:	82fb      	strh	r3, [r7, #22]
    break;
 80068de:	e011      	b.n	8006904 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80068e0:	230e      	movs	r3, #14
 80068e2:	82fb      	strh	r3, [r7, #22]
    break;
 80068e4:	e00e      	b.n	8006904 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80068e6:	2300      	movs	r3, #0
 80068e8:	82fb      	strh	r3, [r7, #22]
    break;
 80068ea:	e00b      	b.n	8006904 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	82fb      	strh	r3, [r7, #22]
    break;
 80068f0:	e008      	b.n	8006904 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80068f2:	4ba5      	ldr	r3, [pc, #660]	; (8006b88 <pbuf_alloc+0x2e8>)
 80068f4:	f44f 728b 	mov.w	r2, #278	; 0x116
 80068f8:	49a4      	ldr	r1, [pc, #656]	; (8006b8c <pbuf_alloc+0x2ec>)
 80068fa:	48a5      	ldr	r0, [pc, #660]	; (8006b90 <pbuf_alloc+0x2f0>)
 80068fc:	f008 fc86 	bl	800f20c <iprintf>
    return NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	e15d      	b.n	8006bc0 <pbuf_alloc+0x320>
  }

  switch (type) {
 8006904:	79bb      	ldrb	r3, [r7, #6]
 8006906:	2b03      	cmp	r3, #3
 8006908:	d00d      	beq.n	8006926 <pbuf_alloc+0x86>
 800690a:	2b03      	cmp	r3, #3
 800690c:	f300 8133 	bgt.w	8006b76 <pbuf_alloc+0x2d6>
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80d0 	beq.w	8006ab6 <pbuf_alloc+0x216>
 8006916:	2b00      	cmp	r3, #0
 8006918:	f2c0 812d 	blt.w	8006b76 <pbuf_alloc+0x2d6>
 800691c:	3b01      	subs	r3, #1
 800691e:	2b01      	cmp	r3, #1
 8006920:	f200 8129 	bhi.w	8006b76 <pbuf_alloc+0x2d6>
 8006924:	e10d      	b.n	8006b42 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006926:	2008      	movs	r0, #8
 8006928:	f7ff fda8 	bl	800647c <memp_malloc>
 800692c:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8006934:	f7ff ffa8 	bl	8006888 <pbuf_pool_is_empty>
      return NULL;
 8006938:	2300      	movs	r3, #0
 800693a:	e141      	b.n	8006bc0 <pbuf_alloc+0x320>
    }
    p->type = type;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	79ba      	ldrb	r2, [r7, #6]
 8006940:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006948:	8afb      	ldrh	r3, [r7, #22]
 800694a:	3310      	adds	r3, #16
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	3303      	adds	r3, #3
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	461a      	mov	r2, r3
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	2b00      	cmp	r3, #0
 8006966:	d006      	beq.n	8006976 <pbuf_alloc+0xd6>
 8006968:	4b87      	ldr	r3, [pc, #540]	; (8006b88 <pbuf_alloc+0x2e8>)
 800696a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800696e:	4989      	ldr	r1, [pc, #548]	; (8006b94 <pbuf_alloc+0x2f4>)
 8006970:	4887      	ldr	r0, [pc, #540]	; (8006b90 <pbuf_alloc+0x2f0>)
 8006972:	f008 fc4b 	bl	800f20c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	88ba      	ldrh	r2, [r7, #4]
 800697a:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800697c:	8afb      	ldrh	r3, [r7, #22]
 800697e:	3303      	adds	r3, #3
 8006980:	f023 0303 	bic.w	r3, r3, #3
 8006984:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8006988:	88bb      	ldrh	r3, [r7, #4]
 800698a:	4293      	cmp	r3, r2
 800698c:	bf28      	it	cs
 800698e:	4613      	movcs	r3, r2
 8006990:	b29a      	uxth	r2, r3
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	8952      	ldrh	r2, [r2, #10]
 800699e:	441a      	add	r2, r3
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d906      	bls.n	80069b8 <pbuf_alloc+0x118>
 80069aa:	4b77      	ldr	r3, [pc, #476]	; (8006b88 <pbuf_alloc+0x2e8>)
 80069ac:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80069b0:	4979      	ldr	r1, [pc, #484]	; (8006b98 <pbuf_alloc+0x2f8>)
 80069b2:	4877      	ldr	r0, [pc, #476]	; (8006b90 <pbuf_alloc+0x2f0>)
 80069b4:	f008 fc2a 	bl	800f20c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80069b8:	8afb      	ldrh	r3, [r7, #22]
 80069ba:	3303      	adds	r3, #3
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80069c4:	d106      	bne.n	80069d4 <pbuf_alloc+0x134>
 80069c6:	4b70      	ldr	r3, [pc, #448]	; (8006b88 <pbuf_alloc+0x2e8>)
 80069c8:	f240 1231 	movw	r2, #305	; 0x131
 80069cc:	4973      	ldr	r1, [pc, #460]	; (8006b9c <pbuf_alloc+0x2fc>)
 80069ce:	4870      	ldr	r0, [pc, #448]	; (8006b90 <pbuf_alloc+0x2f0>)
 80069d0:	f008 fc1c 	bl	800f20c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	2201      	movs	r2, #1
 80069d8:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 80069de:	88bb      	ldrh	r3, [r7, #4]
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	8952      	ldrh	r2, [r2, #10]
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 80069e8:	e061      	b.n	8006aae <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80069ea:	2008      	movs	r0, #8
 80069ec:	f7ff fd46 	bl	800647c <memp_malloc>
 80069f0:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 80069f8:	f7ff ff46 	bl	8006888 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80069fc:	69f8      	ldr	r0, [r7, #28]
 80069fe:	f000 fac1 	bl	8006f84 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e0dc      	b.n	8006bc0 <pbuf_alloc+0x320>
      }
      q->type = type;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	79ba      	ldrb	r2, [r7, #6]
 8006a0a:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a24:	4293      	cmp	r3, r2
 8006a26:	dd06      	ble.n	8006a36 <pbuf_alloc+0x196>
 8006a28:	4b57      	ldr	r3, [pc, #348]	; (8006b88 <pbuf_alloc+0x2e8>)
 8006a2a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8006a2e:	495c      	ldr	r1, [pc, #368]	; (8006ba0 <pbuf_alloc+0x300>)
 8006a30:	4857      	ldr	r0, [pc, #348]	; (8006b90 <pbuf_alloc+0x2f0>)
 8006a32:	f008 fbeb 	bl	800f20c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006a46:	bf28      	it	cs
 8006a48:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f103 0210 	add.w	r2, r3, #16
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d006      	beq.n	8006a76 <pbuf_alloc+0x1d6>
 8006a68:	4b47      	ldr	r3, [pc, #284]	; (8006b88 <pbuf_alloc+0x2e8>)
 8006a6a:	f240 1251 	movw	r2, #337	; 0x151
 8006a6e:	494d      	ldr	r1, [pc, #308]	; (8006ba4 <pbuf_alloc+0x304>)
 8006a70:	4847      	ldr	r0, [pc, #284]	; (8006b90 <pbuf_alloc+0x2f0>)
 8006a72:	f008 fbcb 	bl	800f20c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	69fa      	ldr	r2, [r7, #28]
 8006a7c:	8952      	ldrh	r2, [r2, #10]
 8006a7e:	441a      	add	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d906      	bls.n	8006a98 <pbuf_alloc+0x1f8>
 8006a8a:	4b3f      	ldr	r3, [pc, #252]	; (8006b88 <pbuf_alloc+0x2e8>)
 8006a8c:	f240 1253 	movw	r2, #339	; 0x153
 8006a90:	4941      	ldr	r1, [pc, #260]	; (8006b98 <pbuf_alloc+0x2f8>)
 8006a92:	483f      	ldr	r0, [pc, #252]	; (8006b90 <pbuf_alloc+0x2f0>)
 8006a94:	f008 fbba 	bl	800f20c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	895b      	ldrh	r3, [r3, #10]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dc9a      	bgt.n	80069ea <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8006ab4:	e07d      	b.n	8006bb2 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006ab6:	8afb      	ldrh	r3, [r7, #22]
 8006ab8:	3313      	adds	r3, #19
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f023 0303 	bic.w	r3, r3, #3
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	88bb      	ldrh	r3, [r7, #4]
 8006ac4:	3303      	adds	r3, #3
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	f023 0303 	bic.w	r3, r3, #3
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	4413      	add	r3, r2
 8006ad0:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006ad2:	897a      	ldrh	r2, [r7, #10]
 8006ad4:	88bb      	ldrh	r3, [r7, #4]
 8006ad6:	3303      	adds	r3, #3
 8006ad8:	f023 0303 	bic.w	r3, r3, #3
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d201      	bcs.n	8006ae4 <pbuf_alloc+0x244>
        return NULL;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e06d      	b.n	8006bc0 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006ae4:	897b      	ldrh	r3, [r7, #10]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7ff fb6c 	bl	80061c4 <mem_malloc>
 8006aec:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <pbuf_alloc+0x258>
      return NULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	e063      	b.n	8006bc0 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006af8:	8afb      	ldrh	r3, [r7, #22]
 8006afa:	3310      	adds	r3, #16
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	4413      	add	r3, r2
 8006b00:	3303      	adds	r3, #3
 8006b02:	f023 0303 	bic.w	r3, r3, #3
 8006b06:	461a      	mov	r2, r3
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	88ba      	ldrh	r2, [r7, #4]
 8006b10:	811a      	strh	r2, [r3, #8]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	891a      	ldrh	r2, [r3, #8]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	79ba      	ldrb	r2, [r7, #6]
 8006b24:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f003 0303 	and.w	r3, r3, #3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d03e      	beq.n	8006bb0 <pbuf_alloc+0x310>
 8006b32:	4b15      	ldr	r3, [pc, #84]	; (8006b88 <pbuf_alloc+0x2e8>)
 8006b34:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8006b38:	491b      	ldr	r1, [pc, #108]	; (8006ba8 <pbuf_alloc+0x308>)
 8006b3a:	4815      	ldr	r0, [pc, #84]	; (8006b90 <pbuf_alloc+0x2f0>)
 8006b3c:	f008 fb66 	bl	800f20c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8006b40:	e036      	b.n	8006bb0 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006b42:	2007      	movs	r0, #7
 8006b44:	f7ff fc9a 	bl	800647c <memp_malloc>
 8006b48:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e035      	b.n	8006bc0 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2200      	movs	r2, #0
 8006b58:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	88ba      	ldrh	r2, [r7, #4]
 8006b5e:	811a      	strh	r2, [r3, #8]
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	891a      	ldrh	r2, [r3, #8]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
    p->type = type;
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	79ba      	ldrb	r2, [r7, #6]
 8006b72:	731a      	strb	r2, [r3, #12]
    break;
 8006b74:	e01d      	b.n	8006bb2 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006b76:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <pbuf_alloc+0x2e8>)
 8006b78:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006b7c:	490b      	ldr	r1, [pc, #44]	; (8006bac <pbuf_alloc+0x30c>)
 8006b7e:	4804      	ldr	r0, [pc, #16]	; (8006b90 <pbuf_alloc+0x2f0>)
 8006b80:	f008 fb44 	bl	800f20c <iprintf>
    return NULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	e01b      	b.n	8006bc0 <pbuf_alloc+0x320>
 8006b88:	080108e0 	.word	0x080108e0
 8006b8c:	08010910 	.word	0x08010910
 8006b90:	0801092c 	.word	0x0801092c
 8006b94:	08010954 	.word	0x08010954
 8006b98:	08010984 	.word	0x08010984
 8006b9c:	080109b8 	.word	0x080109b8
 8006ba0:	080109ec 	.word	0x080109ec
 8006ba4:	08010a00 	.word	0x08010a00
 8006ba8:	08010a30 	.word	0x08010a30
 8006bac:	08010a5c 	.word	0x08010a5c
    break;
 8006bb0:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3720      	adds	r7, #32
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	71fb      	strb	r3, [r7, #7]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	80bb      	strh	r3, [r7, #4]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d81b      	bhi.n	8006c1a <pbuf_alloced_custom+0x52>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <pbuf_alloced_custom+0x20>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006bfd 	.word	0x08006bfd
 8006bec:	08006c03 	.word	0x08006c03
 8006bf0:	08006c09 	.word	0x08006c09
 8006bf4:	08006c0f 	.word	0x08006c0f
 8006bf8:	08006c15 	.word	0x08006c15
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006bfc:	2336      	movs	r3, #54	; 0x36
 8006bfe:	81fb      	strh	r3, [r7, #14]
    break;
 8006c00:	e014      	b.n	8006c2c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006c02:	2322      	movs	r3, #34	; 0x22
 8006c04:	81fb      	strh	r3, [r7, #14]
    break;
 8006c06:	e011      	b.n	8006c2c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006c08:	230e      	movs	r3, #14
 8006c0a:	81fb      	strh	r3, [r7, #14]
    break;
 8006c0c:	e00e      	b.n	8006c2c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	81fb      	strh	r3, [r7, #14]
    break;
 8006c12:	e00b      	b.n	8006c2c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	81fb      	strh	r3, [r7, #14]
    break;
 8006c18:	e008      	b.n	8006c2c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	; (8006c90 <pbuf_alloced_custom+0xc8>)
 8006c1c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8006c20:	491c      	ldr	r1, [pc, #112]	; (8006c94 <pbuf_alloced_custom+0xcc>)
 8006c22:	481d      	ldr	r0, [pc, #116]	; (8006c98 <pbuf_alloced_custom+0xd0>)
 8006c24:	f008 faf2 	bl	800f20c <iprintf>
    return NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	e02d      	b.n	8006c88 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006c2c:	89fb      	ldrh	r3, [r7, #14]
 8006c2e:	3303      	adds	r3, #3
 8006c30:	f023 0203 	bic.w	r2, r3, #3
 8006c34:	88bb      	ldrh	r3, [r7, #4]
 8006c36:	441a      	add	r2, r3
 8006c38:	8bbb      	ldrh	r3, [r7, #28]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d901      	bls.n	8006c42 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e022      	b.n	8006c88 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d008      	beq.n	8006c60 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006c4e:	89fb      	ldrh	r3, [r7, #14]
 8006c50:	3303      	adds	r3, #3
 8006c52:	f023 0303 	bic.w	r3, r3, #3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	441a      	add	r2, r3
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	605a      	str	r2, [r3, #4]
 8006c5e:	e002      	b.n	8006c66 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	88ba      	ldrh	r2, [r7, #4]
 8006c70:	811a      	strh	r2, [r3, #8]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	891a      	ldrh	r2, [r3, #8]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	79ba      	ldrb	r2, [r7, #6]
 8006c7e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8006c86:	683b      	ldr	r3, [r7, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	080108e0 	.word	0x080108e0
 8006c94:	08010a78 	.word	0x08010a78
 8006c98:	0801092c 	.word	0x0801092c

08006c9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <pbuf_realloc+0x20>
 8006cae:	4b4b      	ldr	r3, [pc, #300]	; (8006ddc <pbuf_realloc+0x140>)
 8006cb0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006cb4:	494a      	ldr	r1, [pc, #296]	; (8006de0 <pbuf_realloc+0x144>)
 8006cb6:	484b      	ldr	r0, [pc, #300]	; (8006de4 <pbuf_realloc+0x148>)
 8006cb8:	f008 faa8 	bl	800f20c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7b1b      	ldrb	r3, [r3, #12]
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d012      	beq.n	8006cea <pbuf_realloc+0x4e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7b1b      	ldrb	r3, [r3, #12]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d00e      	beq.n	8006cea <pbuf_realloc+0x4e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	7b1b      	ldrb	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <pbuf_realloc+0x4e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	7b1b      	ldrb	r3, [r3, #12]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d006      	beq.n	8006cea <pbuf_realloc+0x4e>
 8006cdc:	4b3f      	ldr	r3, [pc, #252]	; (8006ddc <pbuf_realloc+0x140>)
 8006cde:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006ce2:	4941      	ldr	r1, [pc, #260]	; (8006de8 <pbuf_realloc+0x14c>)
 8006ce4:	483f      	ldr	r0, [pc, #252]	; (8006de4 <pbuf_realloc+0x148>)
 8006ce6:	f008 fa91 	bl	800f20c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	891b      	ldrh	r3, [r3, #8]
 8006cee:	887a      	ldrh	r2, [r7, #2]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d26e      	bcs.n	8006dd2 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8006cf4:	887b      	ldrh	r3, [r7, #2]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	8912      	ldrh	r2, [r2, #8]
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006cfe:	887b      	ldrh	r3, [r7, #2]
 8006d00:	827b      	strh	r3, [r7, #18]
  q = p;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006d06:	e025      	b.n	8006d54 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	895b      	ldrh	r3, [r3, #10]
 8006d0c:	8a7a      	ldrh	r2, [r7, #18]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	dd06      	ble.n	8006d2a <pbuf_realloc+0x8e>
 8006d1c:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <pbuf_realloc+0x140>)
 8006d1e:	f240 220b 	movw	r2, #523	; 0x20b
 8006d22:	4932      	ldr	r1, [pc, #200]	; (8006dec <pbuf_realloc+0x150>)
 8006d24:	482f      	ldr	r0, [pc, #188]	; (8006de4 <pbuf_realloc+0x148>)
 8006d26:	f008 fa71 	bl	800f20c <iprintf>
    q->tot_len += (u16_t)grow;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	891a      	ldrh	r2, [r3, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	4413      	add	r3, r2
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <pbuf_realloc+0xb8>
 8006d46:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <pbuf_realloc+0x140>)
 8006d48:	f240 220f 	movw	r2, #527	; 0x20f
 8006d4c:	4928      	ldr	r1, [pc, #160]	; (8006df0 <pbuf_realloc+0x154>)
 8006d4e:	4825      	ldr	r0, [pc, #148]	; (8006de4 <pbuf_realloc+0x148>)
 8006d50:	f008 fa5c 	bl	800f20c <iprintf>
  while (rem_len > q->len) {
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	895b      	ldrh	r3, [r3, #10]
 8006d58:	8a7a      	ldrh	r2, [r7, #18]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d8d4      	bhi.n	8006d08 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	7b1b      	ldrb	r3, [r3, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d121      	bne.n	8006daa <pbuf_realloc+0x10e>
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	895b      	ldrh	r3, [r3, #10]
 8006d6a:	8a7a      	ldrh	r2, [r7, #18]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d01c      	beq.n	8006daa <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	7b5b      	ldrb	r3, [r3, #13]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d116      	bne.n	8006daa <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	8a7b      	ldrh	r3, [r7, #18]
 8006d88:	4413      	add	r3, r2
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6978      	ldr	r0, [r7, #20]
 8006d90:	f7ff f93c 	bl	800600c <mem_trim>
 8006d94:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d106      	bne.n	8006daa <pbuf_realloc+0x10e>
 8006d9c:	4b0f      	ldr	r3, [pc, #60]	; (8006ddc <pbuf_realloc+0x140>)
 8006d9e:	f240 221d 	movw	r2, #541	; 0x21d
 8006da2:	4914      	ldr	r1, [pc, #80]	; (8006df4 <pbuf_realloc+0x158>)
 8006da4:	480f      	ldr	r0, [pc, #60]	; (8006de4 <pbuf_realloc+0x148>)
 8006da6:	f008 fa31 	bl	800f20c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	8a7a      	ldrh	r2, [r7, #18]
 8006dae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	895a      	ldrh	r2, [r3, #10]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f8dd 	bl	8006f84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	e000      	b.n	8006dd4 <pbuf_realloc+0x138>
    return;
 8006dd2:	bf00      	nop

}
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	080108e0 	.word	0x080108e0
 8006de0:	08010a9c 	.word	0x08010a9c
 8006de4:	0801092c 	.word	0x0801092c
 8006de8:	08010ab4 	.word	0x08010ab4
 8006dec:	08010ad0 	.word	0x08010ad0
 8006df0:	08010ae4 	.word	0x08010ae4
 8006df4:	08010afc 	.word	0x08010afc

08006df8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	807b      	strh	r3, [r7, #2]
 8006e04:	4613      	mov	r3, r2
 8006e06:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <pbuf_header_impl+0x24>
 8006e0e:	4b46      	ldr	r3, [pc, #280]	; (8006f28 <pbuf_header_impl+0x130>)
 8006e10:	f240 223f 	movw	r2, #575	; 0x23f
 8006e14:	4945      	ldr	r1, [pc, #276]	; (8006f2c <pbuf_header_impl+0x134>)
 8006e16:	4846      	ldr	r0, [pc, #280]	; (8006f30 <pbuf_header_impl+0x138>)
 8006e18:	f008 f9f8 	bl	800f20c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <pbuf_header_impl+0x32>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <pbuf_header_impl+0x36>
    return 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e078      	b.n	8006f20 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8006e2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	da10      	bge.n	8006e58 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8006e36:	887b      	ldrh	r3, [r7, #2]
 8006e38:	425b      	negs	r3, r3
 8006e3a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	895b      	ldrh	r3, [r3, #10]
 8006e40:	89fa      	ldrh	r2, [r7, #14]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d90a      	bls.n	8006e5c <pbuf_header_impl+0x64>
 8006e46:	4b38      	ldr	r3, [pc, #224]	; (8006f28 <pbuf_header_impl+0x130>)
 8006e48:	f240 2247 	movw	r2, #583	; 0x247
 8006e4c:	4939      	ldr	r1, [pc, #228]	; (8006f34 <pbuf_header_impl+0x13c>)
 8006e4e:	4838      	ldr	r0, [pc, #224]	; (8006f30 <pbuf_header_impl+0x138>)
 8006e50:	f008 f9dc 	bl	800f20c <iprintf>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e063      	b.n	8006f20 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8006e58:	887b      	ldrh	r3, [r7, #2]
 8006e5a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7b1b      	ldrb	r3, [r3, #12]
 8006e60:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006e68:	89bb      	ldrh	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <pbuf_header_impl+0x7c>
 8006e6e:	89bb      	ldrh	r3, [r7, #12]
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d112      	bne.n	8006e9a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e7c:	425b      	negs	r3, r3
 8006e7e:	441a      	add	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3310      	adds	r3, #16
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d238      	bcs.n	8006f02 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e042      	b.n	8006f20 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006e9a:	89bb      	ldrh	r3, [r7, #12]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d002      	beq.n	8006ea6 <pbuf_header_impl+0xae>
 8006ea0:	89bb      	ldrh	r3, [r7, #12]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d124      	bne.n	8006ef0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006ea6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da0d      	bge.n	8006eca <pbuf_header_impl+0xd2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	895b      	ldrh	r3, [r3, #10]
 8006eb2:	89fa      	ldrh	r2, [r7, #14]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d808      	bhi.n	8006eca <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ec0:	425b      	negs	r3, r3
 8006ec2:	441a      	add	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	605a      	str	r2, [r3, #4]
 8006ec8:	e011      	b.n	8006eee <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8006eca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd0b      	ble.n	8006eea <pbuf_header_impl+0xf2>
 8006ed2:	787b      	ldrb	r3, [r7, #1]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d008      	beq.n	8006eea <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ee0:	425b      	negs	r3, r3
 8006ee2:	441a      	add	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	605a      	str	r2, [r3, #4]
 8006ee8:	e001      	b.n	8006eee <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e018      	b.n	8006f20 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006eee:	e008      	b.n	8006f02 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <pbuf_header_impl+0x130>)
 8006ef2:	f240 2277 	movw	r2, #631	; 0x277
 8006ef6:	4910      	ldr	r1, [pc, #64]	; (8006f38 <pbuf_header_impl+0x140>)
 8006ef8:	480d      	ldr	r0, [pc, #52]	; (8006f30 <pbuf_header_impl+0x138>)
 8006efa:	f008 f987 	bl	800f20c <iprintf>
    return 1;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e00e      	b.n	8006f20 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	895a      	ldrh	r2, [r3, #10]
 8006f06:	887b      	ldrh	r3, [r7, #2]
 8006f08:	4413      	add	r3, r2
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	891a      	ldrh	r2, [r3, #8]
 8006f14:	887b      	ldrh	r3, [r7, #2]
 8006f16:	4413      	add	r3, r2
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	080108e0 	.word	0x080108e0
 8006f2c:	08010b18 	.word	0x08010b18
 8006f30:	0801092c 	.word	0x0801092c
 8006f34:	08010b24 	.word	0x08010b24
 8006f38:	08010b44 	.word	0x08010b44

08006f3c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8006f48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff ff51 	bl	8006df8 <pbuf_header_impl>
 8006f56:	4603      	mov	r3, r0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8006f6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006f70:	2201      	movs	r2, #1
 8006f72:	4619      	mov	r1, r3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ff3f 	bl	8006df8 <pbuf_header_impl>
 8006f7a:	4603      	mov	r3, r0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10b      	bne.n	8006faa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <pbuf_free+0x22>
 8006f98:	4b3e      	ldr	r3, [pc, #248]	; (8007094 <pbuf_free+0x110>)
 8006f9a:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006f9e:	493e      	ldr	r1, [pc, #248]	; (8007098 <pbuf_free+0x114>)
 8006fa0:	483e      	ldr	r0, [pc, #248]	; (800709c <pbuf_free+0x118>)
 8006fa2:	f008 f933 	bl	800f20c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e070      	b.n	800708c <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	7b1b      	ldrb	r3, [r3, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d012      	beq.n	8006fd8 <pbuf_free+0x54>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	7b1b      	ldrb	r3, [r3, #12]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d00e      	beq.n	8006fd8 <pbuf_free+0x54>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7b1b      	ldrb	r3, [r3, #12]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d00a      	beq.n	8006fd8 <pbuf_free+0x54>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	7b1b      	ldrb	r3, [r3, #12]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d006      	beq.n	8006fd8 <pbuf_free+0x54>
 8006fca:	4b32      	ldr	r3, [pc, #200]	; (8007094 <pbuf_free+0x110>)
 8006fcc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006fd0:	4933      	ldr	r1, [pc, #204]	; (80070a0 <pbuf_free+0x11c>)
 8006fd2:	4832      	ldr	r0, [pc, #200]	; (800709c <pbuf_free+0x118>)
 8006fd4:	f008 f91a 	bl	800f20c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006fdc:	e052      	b.n	8007084 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	89db      	ldrh	r3, [r3, #14]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d106      	bne.n	8006ff4 <pbuf_free+0x70>
 8006fe6:	4b2b      	ldr	r3, [pc, #172]	; (8007094 <pbuf_free+0x110>)
 8006fe8:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006fec:	492d      	ldr	r1, [pc, #180]	; (80070a4 <pbuf_free+0x120>)
 8006fee:	482b      	ldr	r0, [pc, #172]	; (800709c <pbuf_free+0x118>)
 8006ff0:	f008 f90c 	bl	800f20c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	89db      	ldrh	r3, [r3, #14]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	81da      	strh	r2, [r3, #14]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	89db      	ldrh	r3, [r3, #14]
 8007004:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007006:	8abb      	ldrh	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d139      	bne.n	8007080 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7b1b      	ldrb	r3, [r3, #12]
 8007016:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7b5b      	ldrb	r3, [r3, #13]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d011      	beq.n	8007048 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <pbuf_free+0xba>
 8007030:	4b18      	ldr	r3, [pc, #96]	; (8007094 <pbuf_free+0x110>)
 8007032:	f240 22f9 	movw	r2, #761	; 0x2f9
 8007036:	491c      	ldr	r1, [pc, #112]	; (80070a8 <pbuf_free+0x124>)
 8007038:	4818      	ldr	r0, [pc, #96]	; (800709c <pbuf_free+0x118>)
 800703a:	f008 f8e7 	bl	800f20c <iprintf>
        pc->custom_free_function(p);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	e015      	b.n	8007074 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8007048:	89fb      	ldrh	r3, [r7, #14]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d104      	bne.n	8007058 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	2008      	movs	r0, #8
 8007052:	f7ff fa5f 	bl	8006514 <memp_free>
 8007056:	e00d      	b.n	8007074 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007058:	89fb      	ldrh	r3, [r7, #14]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d002      	beq.n	8007064 <pbuf_free+0xe0>
 800705e:	89fb      	ldrh	r3, [r7, #14]
 8007060:	2b02      	cmp	r3, #2
 8007062:	d104      	bne.n	800706e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	2007      	movs	r0, #7
 8007068:	f7ff fa54 	bl	8006514 <memp_free>
 800706c:	e002      	b.n	8007074 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fe ff6a 	bl	8005f48 <mem_free>
        }
      }
      count++;
 8007074:	7dfb      	ldrb	r3, [r7, #23]
 8007076:	3301      	adds	r3, #1
 8007078:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	607b      	str	r3, [r7, #4]
 800707e:	e001      	b.n	8007084 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8007080:	2300      	movs	r3, #0
 8007082:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1a9      	bne.n	8006fde <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	080108e0 	.word	0x080108e0
 8007098:	08010b18 	.word	0x08010b18
 800709c:	0801092c 	.word	0x0801092c
 80070a0:	08010b54 	.word	0x08010b54
 80070a4:	08010b6c 	.word	0x08010b6c
 80070a8:	08010b84 	.word	0x08010b84

080070ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80070b8:	e005      	b.n	80070c6 <pbuf_clen+0x1a>
    ++len;
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	3301      	adds	r3, #1
 80070be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f6      	bne.n	80070ba <pbuf_clen+0xe>
  }
  return len;
 80070cc:	89fb      	ldrh	r3, [r7, #14]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d010      	beq.n	8007108 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	89db      	ldrh	r3, [r3, #14]
 80070ea:	3301      	adds	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	89db      	ldrh	r3, [r3, #14]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <pbuf_ref+0x30>
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <pbuf_ref+0x38>)
 80070fc:	f240 3239 	movw	r2, #825	; 0x339
 8007100:	4904      	ldr	r1, [pc, #16]	; (8007114 <pbuf_ref+0x3c>)
 8007102:	4805      	ldr	r0, [pc, #20]	; (8007118 <pbuf_ref+0x40>)
 8007104:	f008 f882 	bl	800f20c <iprintf>
  }
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	080108e0 	.word	0x080108e0
 8007114:	08010ba8 	.word	0x08010ba8
 8007118:	0801092c 	.word	0x0801092c

0800711c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <pbuf_cat+0x16>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <pbuf_cat+0x26>
 8007132:	4b20      	ldr	r3, [pc, #128]	; (80071b4 <pbuf_cat+0x98>)
 8007134:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8007138:	491f      	ldr	r1, [pc, #124]	; (80071b8 <pbuf_cat+0x9c>)
 800713a:	4820      	ldr	r0, [pc, #128]	; (80071bc <pbuf_cat+0xa0>)
 800713c:	f008 f866 	bl	800f20c <iprintf>
 8007140:	e034      	b.n	80071ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	60fb      	str	r3, [r7, #12]
 8007146:	e00a      	b.n	800715e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	891a      	ldrh	r2, [r3, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	891b      	ldrh	r3, [r3, #8]
 8007150:	4413      	add	r3, r2
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f0      	bne.n	8007148 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	891a      	ldrh	r2, [r3, #8]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	895b      	ldrh	r3, [r3, #10]
 800716e:	429a      	cmp	r2, r3
 8007170:	d006      	beq.n	8007180 <pbuf_cat+0x64>
 8007172:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <pbuf_cat+0x98>)
 8007174:	f240 3255 	movw	r2, #853	; 0x355
 8007178:	4911      	ldr	r1, [pc, #68]	; (80071c0 <pbuf_cat+0xa4>)
 800717a:	4810      	ldr	r0, [pc, #64]	; (80071bc <pbuf_cat+0xa0>)
 800717c:	f008 f846 	bl	800f20c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d006      	beq.n	8007196 <pbuf_cat+0x7a>
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <pbuf_cat+0x98>)
 800718a:	f240 3256 	movw	r2, #854	; 0x356
 800718e:	490d      	ldr	r1, [pc, #52]	; (80071c4 <pbuf_cat+0xa8>)
 8007190:	480a      	ldr	r0, [pc, #40]	; (80071bc <pbuf_cat+0xa0>)
 8007192:	f008 f83b 	bl	800f20c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	891a      	ldrh	r2, [r3, #8]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	891b      	ldrh	r3, [r3, #8]
 800719e:	4413      	add	r3, r2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	080108e0 	.word	0x080108e0
 80071b8:	08010bbc 	.word	0x08010bbc
 80071bc:	0801092c 	.word	0x0801092c
 80071c0:	08010bf4 	.word	0x08010bf4
 80071c4:	08010c24 	.word	0x08010c24

080071c8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80071d2:	2300      	movs	r3, #0
 80071d4:	81fb      	strh	r3, [r7, #14]
 80071d6:	2300      	movs	r3, #0
 80071d8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <pbuf_copy+0x2a>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <pbuf_copy+0x2a>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	891a      	ldrh	r2, [r3, #8]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	891b      	ldrh	r3, [r3, #8]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d209      	bcs.n	8007206 <pbuf_copy+0x3e>
 80071f2:	4b54      	ldr	r3, [pc, #336]	; (8007344 <pbuf_copy+0x17c>)
 80071f4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80071f8:	4953      	ldr	r1, [pc, #332]	; (8007348 <pbuf_copy+0x180>)
 80071fa:	4854      	ldr	r0, [pc, #336]	; (800734c <pbuf_copy+0x184>)
 80071fc:	f008 f806 	bl	800f20c <iprintf>
 8007200:	f06f 030f 	mvn.w	r3, #15
 8007204:	e099      	b.n	800733a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	895b      	ldrh	r3, [r3, #10]
 800720a:	461a      	mov	r2, r3
 800720c:	89fb      	ldrh	r3, [r7, #14]
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	895b      	ldrh	r3, [r3, #10]
 8007214:	4619      	mov	r1, r3
 8007216:	89bb      	ldrh	r3, [r7, #12]
 8007218:	1acb      	subs	r3, r1, r3
 800721a:	429a      	cmp	r2, r3
 800721c:	db05      	blt.n	800722a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	895a      	ldrh	r2, [r3, #10]
 8007222:	89bb      	ldrh	r3, [r7, #12]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	817b      	strh	r3, [r7, #10]
 8007228:	e004      	b.n	8007234 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	895a      	ldrh	r2, [r3, #10]
 800722e:	89fb      	ldrh	r3, [r7, #14]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	89fb      	ldrh	r3, [r7, #14]
 800723a:	18d0      	adds	r0, r2, r3
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	89bb      	ldrh	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	897a      	ldrh	r2, [r7, #10]
 8007246:	4619      	mov	r1, r3
 8007248:	f007 ffca 	bl	800f1e0 <memcpy>
    offset_to += len;
 800724c:	89fa      	ldrh	r2, [r7, #14]
 800724e:	897b      	ldrh	r3, [r7, #10]
 8007250:	4413      	add	r3, r2
 8007252:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8007254:	89ba      	ldrh	r2, [r7, #12]
 8007256:	897b      	ldrh	r3, [r7, #10]
 8007258:	4413      	add	r3, r2
 800725a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	895b      	ldrh	r3, [r3, #10]
 8007260:	89fa      	ldrh	r2, [r7, #14]
 8007262:	429a      	cmp	r2, r3
 8007264:	d906      	bls.n	8007274 <pbuf_copy+0xac>
 8007266:	4b37      	ldr	r3, [pc, #220]	; (8007344 <pbuf_copy+0x17c>)
 8007268:	f240 32cd 	movw	r2, #973	; 0x3cd
 800726c:	4938      	ldr	r1, [pc, #224]	; (8007350 <pbuf_copy+0x188>)
 800726e:	4837      	ldr	r0, [pc, #220]	; (800734c <pbuf_copy+0x184>)
 8007270:	f007 ffcc 	bl	800f20c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	895b      	ldrh	r3, [r3, #10]
 8007278:	89ba      	ldrh	r2, [r7, #12]
 800727a:	429a      	cmp	r2, r3
 800727c:	d906      	bls.n	800728c <pbuf_copy+0xc4>
 800727e:	4b31      	ldr	r3, [pc, #196]	; (8007344 <pbuf_copy+0x17c>)
 8007280:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007284:	4933      	ldr	r1, [pc, #204]	; (8007354 <pbuf_copy+0x18c>)
 8007286:	4831      	ldr	r0, [pc, #196]	; (800734c <pbuf_copy+0x184>)
 8007288:	f007 ffc0 	bl	800f20c <iprintf>
    if (offset_from >= p_from->len) {
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	895b      	ldrh	r3, [r3, #10]
 8007290:	89ba      	ldrh	r2, [r7, #12]
 8007292:	429a      	cmp	r2, r3
 8007294:	d304      	bcc.n	80072a0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	895b      	ldrh	r3, [r3, #10]
 80072a4:	89fa      	ldrh	r2, [r7, #14]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d114      	bne.n	80072d4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10c      	bne.n	80072d4 <pbuf_copy+0x10c>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <pbuf_copy+0x10c>
 80072c0:	4b20      	ldr	r3, [pc, #128]	; (8007344 <pbuf_copy+0x17c>)
 80072c2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80072c6:	4924      	ldr	r1, [pc, #144]	; (8007358 <pbuf_copy+0x190>)
 80072c8:	4820      	ldr	r0, [pc, #128]	; (800734c <pbuf_copy+0x184>)
 80072ca:	f007 ff9f 	bl	800f20c <iprintf>
 80072ce:	f06f 030f 	mvn.w	r3, #15
 80072d2:	e032      	b.n	800733a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d013      	beq.n	8007302 <pbuf_copy+0x13a>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	895a      	ldrh	r2, [r3, #10]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	891b      	ldrh	r3, [r3, #8]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d10d      	bne.n	8007302 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d009      	beq.n	8007302 <pbuf_copy+0x13a>
 80072ee:	4b15      	ldr	r3, [pc, #84]	; (8007344 <pbuf_copy+0x17c>)
 80072f0:	f240 32dd 	movw	r2, #989	; 0x3dd
 80072f4:	4919      	ldr	r1, [pc, #100]	; (800735c <pbuf_copy+0x194>)
 80072f6:	4815      	ldr	r0, [pc, #84]	; (800734c <pbuf_copy+0x184>)
 80072f8:	f007 ff88 	bl	800f20c <iprintf>
 80072fc:	f06f 0305 	mvn.w	r3, #5
 8007300:	e01b      	b.n	800733a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d013      	beq.n	8007330 <pbuf_copy+0x168>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	895a      	ldrh	r2, [r3, #10]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	891b      	ldrh	r3, [r3, #8]
 8007310:	429a      	cmp	r2, r3
 8007312:	d10d      	bne.n	8007330 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d009      	beq.n	8007330 <pbuf_copy+0x168>
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <pbuf_copy+0x17c>)
 800731e:	f240 32e2 	movw	r2, #994	; 0x3e2
 8007322:	490e      	ldr	r1, [pc, #56]	; (800735c <pbuf_copy+0x194>)
 8007324:	4809      	ldr	r0, [pc, #36]	; (800734c <pbuf_copy+0x184>)
 8007326:	f007 ff71 	bl	800f20c <iprintf>
 800732a:	f06f 0305 	mvn.w	r3, #5
 800732e:	e004      	b.n	800733a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f47f af67 	bne.w	8007206 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	080108e0 	.word	0x080108e0
 8007348:	08010c70 	.word	0x08010c70
 800734c:	0801092c 	.word	0x0801092c
 8007350:	08010ca0 	.word	0x08010ca0
 8007354:	08010cb8 	.word	0x08010cb8
 8007358:	08010cd4 	.word	0x08010cd4
 800735c:	08010ce4 	.word	0x08010ce4

08007360 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4611      	mov	r1, r2
 800736c:	461a      	mov	r2, r3
 800736e:	460b      	mov	r3, r1
 8007370:	80fb      	strh	r3, [r7, #6]
 8007372:	4613      	mov	r3, r2
 8007374:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d108      	bne.n	8007392 <pbuf_copy_partial+0x32>
 8007380:	4b30      	ldr	r3, [pc, #192]	; (8007444 <pbuf_copy_partial+0xe4>)
 8007382:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007386:	4930      	ldr	r1, [pc, #192]	; (8007448 <pbuf_copy_partial+0xe8>)
 8007388:	4830      	ldr	r0, [pc, #192]	; (800744c <pbuf_copy_partial+0xec>)
 800738a:	f007 ff3f 	bl	800f20c <iprintf>
 800738e:	2300      	movs	r3, #0
 8007390:	e054      	b.n	800743c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d108      	bne.n	80073aa <pbuf_copy_partial+0x4a>
 8007398:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <pbuf_copy_partial+0xe4>)
 800739a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800739e:	492c      	ldr	r1, [pc, #176]	; (8007450 <pbuf_copy_partial+0xf0>)
 80073a0:	482a      	ldr	r0, [pc, #168]	; (800744c <pbuf_copy_partial+0xec>)
 80073a2:	f007 ff33 	bl	800f20c <iprintf>
 80073a6:	2300      	movs	r3, #0
 80073a8:	e048      	b.n	800743c <pbuf_copy_partial+0xdc>

  left = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <pbuf_copy_partial+0x5a>
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <pbuf_copy_partial+0x5e>
    return 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e03e      	b.n	800743c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e034      	b.n	800742e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80073c4:	88bb      	ldrh	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <pbuf_copy_partial+0x80>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	895b      	ldrh	r3, [r3, #10]
 80073ce:	88ba      	ldrh	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d305      	bcc.n	80073e0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	895b      	ldrh	r3, [r3, #10]
 80073d8:	88ba      	ldrh	r2, [r7, #4]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	80bb      	strh	r3, [r7, #4]
 80073de:	e023      	b.n	8007428 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	895a      	ldrh	r2, [r3, #10]
 80073e4:	88bb      	ldrh	r3, [r7, #4]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80073ea:	8b3a      	ldrh	r2, [r7, #24]
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d901      	bls.n	80073f6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80073f6:	8b7b      	ldrh	r3, [r7, #26]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	18d0      	adds	r0, r2, r3
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	88bb      	ldrh	r3, [r7, #4]
 8007402:	4413      	add	r3, r2
 8007404:	8b3a      	ldrh	r2, [r7, #24]
 8007406:	4619      	mov	r1, r3
 8007408:	f007 feea 	bl	800f1e0 <memcpy>
      copied_total += buf_copy_len;
 800740c:	8afa      	ldrh	r2, [r7, #22]
 800740e:	8b3b      	ldrh	r3, [r7, #24]
 8007410:	4413      	add	r3, r2
 8007412:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8007414:	8b7a      	ldrh	r2, [r7, #26]
 8007416:	8b3b      	ldrh	r3, [r7, #24]
 8007418:	4413      	add	r3, r2
 800741a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800741c:	88fa      	ldrh	r2, [r7, #6]
 800741e:	8b3b      	ldrh	r3, [r7, #24]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	61fb      	str	r3, [r7, #28]
 800742e:	88fb      	ldrh	r3, [r7, #6]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <pbuf_copy_partial+0xda>
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1c4      	bne.n	80073c4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800743a:	8afb      	ldrh	r3, [r7, #22]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	080108e0 	.word	0x080108e0
 8007448:	08010d10 	.word	0x08010d10
 800744c:	0801092c 	.word	0x0801092c
 8007450:	08010d30 	.word	0x08010d30

08007454 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8007458:	bf00      	nop
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr

08007460 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007464:	f000 ff8a 	bl	800837c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007468:	4b07      	ldr	r3, [pc, #28]	; (8007488 <tcp_tmr+0x28>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	b2da      	uxtb	r2, r3
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <tcp_tmr+0x28>)
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	4b04      	ldr	r3, [pc, #16]	; (8007488 <tcp_tmr+0x28>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 0301 	and.w	r3, r3, #1
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007480:	f000 fcba 	bl	8007df8 <tcp_slowtmr>
  }
}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000515 	.word	0x20000515

0800748c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60fb      	str	r3, [r7, #12]
 800749a:	e00a      	b.n	80074b2 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d102      	bne.n	80074ac <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1f1      	bne.n	800749c <tcp_remove_listener+0x10>
      }
   }
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d105      	bne.n	80074de <tcp_listen_closed+0x1a>
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <tcp_listen_closed+0x5c>)
 80074d4:	22c0      	movs	r2, #192	; 0xc0
 80074d6:	4913      	ldr	r1, [pc, #76]	; (8007524 <tcp_listen_closed+0x60>)
 80074d8:	4813      	ldr	r0, [pc, #76]	; (8007528 <tcp_listen_closed+0x64>)
 80074da:	f007 fe97 	bl	800f20c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	7d1b      	ldrb	r3, [r3, #20]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d005      	beq.n	80074f2 <tcp_listen_closed+0x2e>
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <tcp_listen_closed+0x5c>)
 80074e8:	22c1      	movs	r2, #193	; 0xc1
 80074ea:	4910      	ldr	r1, [pc, #64]	; (800752c <tcp_listen_closed+0x68>)
 80074ec:	480e      	ldr	r0, [pc, #56]	; (8007528 <tcp_listen_closed+0x64>)
 80074ee:	f007 fe8d 	bl	800f20c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80074f2:	2301      	movs	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	e00b      	b.n	8007510 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80074f8:	4a0d      	ldr	r2, [pc, #52]	; (8007530 <tcp_listen_closed+0x6c>)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff ffc1 	bl	800748c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b03      	cmp	r3, #3
 8007514:	d9f0      	bls.n	80074f8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	08010e64 	.word	0x08010e64
 8007524:	08010e94 	.word	0x08010e94
 8007528:	08010ea0 	.word	0x08010ea0
 800752c:	08010ec8 	.word	0x08010ec8
 8007530:	080125b4 	.word	0x080125b4

08007534 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007534:	b5b0      	push	{r4, r5, r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d075      	beq.n	8007632 <tcp_close_shutdown+0xfe>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7d1b      	ldrb	r3, [r3, #20]
 800754a:	2b04      	cmp	r3, #4
 800754c:	d003      	beq.n	8007556 <tcp_close_shutdown+0x22>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7d1b      	ldrb	r3, [r3, #20]
 8007552:	2b07      	cmp	r3, #7
 8007554:	d16d      	bne.n	8007632 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800755a:	2b00      	cmp	r3, #0
 800755c:	d104      	bne.n	8007568 <tcp_close_shutdown+0x34>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007562:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007566:	d064      	beq.n	8007632 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	7e9b      	ldrb	r3, [r3, #26]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <tcp_close_shutdown+0x4e>
 8007574:	4b5b      	ldr	r3, [pc, #364]	; (80076e4 <tcp_close_shutdown+0x1b0>)
 8007576:	f240 120f 	movw	r2, #271	; 0x10f
 800757a:	495b      	ldr	r1, [pc, #364]	; (80076e8 <tcp_close_shutdown+0x1b4>)
 800757c:	485b      	ldr	r0, [pc, #364]	; (80076ec <tcp_close_shutdown+0x1b8>)
 800757e:	f007 fe45 	bl	800f20c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800758a:	687c      	ldr	r4, [r7, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	1d1d      	adds	r5, r3, #4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	8adb      	ldrh	r3, [r3, #22]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	8b12      	ldrh	r2, [r2, #24]
 8007598:	9201      	str	r2, [sp, #4]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	462b      	mov	r3, r5
 800759e:	4622      	mov	r2, r4
 80075a0:	f004 feee 	bl	800c380 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fa29 	bl	80089fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80075aa:	4b51      	ldr	r3, [pc, #324]	; (80076f0 <tcp_close_shutdown+0x1bc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d105      	bne.n	80075c0 <tcp_close_shutdown+0x8c>
 80075b4:	4b4e      	ldr	r3, [pc, #312]	; (80076f0 <tcp_close_shutdown+0x1bc>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	4a4d      	ldr	r2, [pc, #308]	; (80076f0 <tcp_close_shutdown+0x1bc>)
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	e013      	b.n	80075e8 <tcp_close_shutdown+0xb4>
 80075c0:	4b4b      	ldr	r3, [pc, #300]	; (80076f0 <tcp_close_shutdown+0x1bc>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	e00c      	b.n	80075e2 <tcp_close_shutdown+0xae>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d104      	bne.n	80075dc <tcp_close_shutdown+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	60da      	str	r2, [r3, #12]
 80075da:	e005      	b.n	80075e8 <tcp_close_shutdown+0xb4>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1ef      	bne.n	80075c8 <tcp_close_shutdown+0x94>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	4b41      	ldr	r3, [pc, #260]	; (80076f4 <tcp_close_shutdown+0x1c0>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	7d1b      	ldrb	r3, [r3, #20]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d10c      	bne.n	8007616 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	220a      	movs	r2, #10
 8007600:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007602:	4b3d      	ldr	r3, [pc, #244]	; (80076f8 <tcp_close_shutdown+0x1c4>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	4a3b      	ldr	r2, [pc, #236]	; (80076f8 <tcp_close_shutdown+0x1c4>)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	f005 f8fe 	bl	800c810 <tcp_timer_needed>
 8007614:	e00b      	b.n	800762e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8007616:	4b39      	ldr	r3, [pc, #228]	; (80076fc <tcp_close_shutdown+0x1c8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d102      	bne.n	8007626 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8007620:	f003 fd4e 	bl	800b0c0 <tcp_trigger_input_pcb_close>
 8007624:	e003      	b.n	800762e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	2001      	movs	r0, #1
 800762a:	f7fe ff73 	bl	8006514 <memp_free>
        }
      }
      return ERR_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	e053      	b.n	80076da <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	7d1b      	ldrb	r3, [r3, #20]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d03d      	beq.n	80076b6 <tcp_close_shutdown+0x182>
 800763a:	2b02      	cmp	r3, #2
 800763c:	dc47      	bgt.n	80076ce <tcp_close_shutdown+0x19a>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <tcp_close_shutdown+0x114>
 8007642:	2b01      	cmp	r3, #1
 8007644:	d02b      	beq.n	800769e <tcp_close_shutdown+0x16a>
 8007646:	e042      	b.n	80076ce <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8adb      	ldrh	r3, [r3, #22]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d021      	beq.n	8007694 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007650:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <tcp_close_shutdown+0x1cc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d105      	bne.n	8007666 <tcp_close_shutdown+0x132>
 800765a:	4b29      	ldr	r3, [pc, #164]	; (8007700 <tcp_close_shutdown+0x1cc>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4a27      	ldr	r2, [pc, #156]	; (8007700 <tcp_close_shutdown+0x1cc>)
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	e013      	b.n	800768e <tcp_close_shutdown+0x15a>
 8007666:	4b26      	ldr	r3, [pc, #152]	; (8007700 <tcp_close_shutdown+0x1cc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60bb      	str	r3, [r7, #8]
 800766c:	e00c      	b.n	8007688 <tcp_close_shutdown+0x154>
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	429a      	cmp	r2, r3
 8007676:	d104      	bne.n	8007682 <tcp_close_shutdown+0x14e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	60da      	str	r2, [r3, #12]
 8007680:	e005      	b.n	800768e <tcp_close_shutdown+0x15a>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	60bb      	str	r3, [r7, #8]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1ef      	bne.n	800766e <tcp_close_shutdown+0x13a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	2001      	movs	r0, #1
 8007698:	f7fe ff3c 	bl	8006514 <memp_free>
    break;
 800769c:	e01c      	b.n	80076d8 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff ff10 	bl	80074c4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4817      	ldr	r0, [pc, #92]	; (8007704 <tcp_close_shutdown+0x1d0>)
 80076a8:	f001 f9ea 	bl	8008a80 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	2002      	movs	r0, #2
 80076b0:	f7fe ff30 	bl	8006514 <memp_free>
    break;
 80076b4:	e010      	b.n	80076d8 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	480d      	ldr	r0, [pc, #52]	; (80076f0 <tcp_close_shutdown+0x1bc>)
 80076ba:	f001 f9e1 	bl	8008a80 <tcp_pcb_remove>
 80076be:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <tcp_close_shutdown+0x1c0>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	2001      	movs	r0, #1
 80076c8:	f7fe ff24 	bl	8006514 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80076cc:	e004      	b.n	80076d8 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f81a 	bl	8007708 <tcp_close_shutdown_fin>
 80076d4:	4603      	mov	r3, r0
 80076d6:	e000      	b.n	80076da <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bdb0      	pop	{r4, r5, r7, pc}
 80076e2:	bf00      	nop
 80076e4:	08010e64 	.word	0x08010e64
 80076e8:	08010ee0 	.word	0x08010ee0
 80076ec:	08010ea0 	.word	0x08010ea0
 80076f0:	2000714c 	.word	0x2000714c
 80076f4:	20007148 	.word	0x20007148
 80076f8:	2000715c 	.word	0x2000715c
 80076fc:	20007160 	.word	0x20007160
 8007700:	20007158 	.word	0x20007158
 8007704:	20007154 	.word	0x20007154

08007708 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <tcp_close_shutdown_fin+0x1c>
 8007716:	4b2e      	ldr	r3, [pc, #184]	; (80077d0 <tcp_close_shutdown_fin+0xc8>)
 8007718:	f240 124d 	movw	r2, #333	; 0x14d
 800771c:	492d      	ldr	r1, [pc, #180]	; (80077d4 <tcp_close_shutdown_fin+0xcc>)
 800771e:	482e      	ldr	r0, [pc, #184]	; (80077d8 <tcp_close_shutdown_fin+0xd0>)
 8007720:	f007 fd74 	bl	800f20c <iprintf>

  switch (pcb->state) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	7d1b      	ldrb	r3, [r3, #20]
 8007728:	2b07      	cmp	r3, #7
 800772a:	d020      	beq.n	800776e <tcp_close_shutdown_fin+0x66>
 800772c:	2b07      	cmp	r3, #7
 800772e:	dc2b      	bgt.n	8007788 <tcp_close_shutdown_fin+0x80>
 8007730:	2b03      	cmp	r3, #3
 8007732:	d002      	beq.n	800773a <tcp_close_shutdown_fin+0x32>
 8007734:	2b04      	cmp	r3, #4
 8007736:	d00d      	beq.n	8007754 <tcp_close_shutdown_fin+0x4c>
 8007738:	e026      	b.n	8007788 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f003 fd4a 	bl	800b1d4 <tcp_send_fin>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d11f      	bne.n	800778c <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2205      	movs	r2, #5
 8007750:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007752:	e01b      	b.n	800778c <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f003 fd3d 	bl	800b1d4 <tcp_send_fin>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800775e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d114      	bne.n	8007790 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2205      	movs	r2, #5
 800776a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800776c:	e010      	b.n	8007790 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f003 fd30 	bl	800b1d4 <tcp_send_fin>
 8007774:	4603      	mov	r3, r0
 8007776:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2209      	movs	r2, #9
 8007784:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007786:	e005      	b.n	8007794 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	e01c      	b.n	80077c6 <tcp_close_shutdown_fin+0xbe>
    break;
 800778c:	bf00      	nop
 800778e:	e002      	b.n	8007796 <tcp_close_shutdown_fin+0x8e>
    break;
 8007790:	bf00      	nop
 8007792:	e000      	b.n	8007796 <tcp_close_shutdown_fin+0x8e>
    break;
 8007794:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d103      	bne.n	80077a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f004 fb6a 	bl	800be78 <tcp_output>
 80077a4:	e00d      	b.n	80077c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80077a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d108      	bne.n	80077c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7e9b      	ldrb	r3, [r3, #26]
 80077b4:	f043 0308 	orr.w	r3, r3, #8
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e001      	b.n	80077c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80077c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	08010e64 	.word	0x08010e64
 80077d4:	08010e94 	.word	0x08010e94
 80077d8:	08010ea0 	.word	0x08010ea0

080077dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7d1b      	ldrb	r3, [r3, #20]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d006      	beq.n	80077fa <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7e9b      	ldrb	r3, [r3, #26]
 80077f0:	f043 0310 	orr.w	r3, r3, #16
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80077fa:	2101      	movs	r1, #1
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fe99 	bl	8007534 <tcp_close_shutdown>
 8007802:	4603      	mov	r3, r0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af02      	add	r7, sp, #8
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	7d1b      	ldrb	r3, [r3, #20]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d106      	bne.n	800782c <tcp_abandon+0x20>
 800781e:	4b4d      	ldr	r3, [pc, #308]	; (8007954 <tcp_abandon+0x148>)
 8007820:	f240 12df 	movw	r2, #479	; 0x1df
 8007824:	494c      	ldr	r1, [pc, #304]	; (8007958 <tcp_abandon+0x14c>)
 8007826:	484d      	ldr	r0, [pc, #308]	; (800795c <tcp_abandon+0x150>)
 8007828:	f007 fcf0 	bl	800f20c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7d1b      	ldrb	r3, [r3, #20]
 8007830:	2b0a      	cmp	r3, #10
 8007832:	d108      	bne.n	8007846 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	484a      	ldr	r0, [pc, #296]	; (8007960 <tcp_abandon+0x154>)
 8007838:	f001 f922 	bl	8008a80 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	2001      	movs	r0, #1
 8007840:	f7fe fe68 	bl	8006514 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8007844:	e081      	b.n	800794a <tcp_abandon+0x13e>
    int send_rst = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007852:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007860:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	7d1b      	ldrb	r3, [r3, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d126      	bne.n	80078be <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	8adb      	ldrh	r3, [r3, #22]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d02e      	beq.n	80078d6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007878:	4b3a      	ldr	r3, [pc, #232]	; (8007964 <tcp_abandon+0x158>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	429a      	cmp	r2, r3
 8007880:	d105      	bne.n	800788e <tcp_abandon+0x82>
 8007882:	4b38      	ldr	r3, [pc, #224]	; (8007964 <tcp_abandon+0x158>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	4a36      	ldr	r2, [pc, #216]	; (8007964 <tcp_abandon+0x158>)
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	e013      	b.n	80078b6 <tcp_abandon+0xaa>
 800788e:	4b35      	ldr	r3, [pc, #212]	; (8007964 <tcp_abandon+0x158>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	61fb      	str	r3, [r7, #28]
 8007894:	e00c      	b.n	80078b0 <tcp_abandon+0xa4>
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	429a      	cmp	r2, r3
 800789e:	d104      	bne.n	80078aa <tcp_abandon+0x9e>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	60da      	str	r2, [r3, #12]
 80078a8:	e005      	b.n	80078b6 <tcp_abandon+0xaa>
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1ef      	bne.n	8007896 <tcp_abandon+0x8a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	60da      	str	r2, [r3, #12]
 80078bc:	e00b      	b.n	80078d6 <tcp_abandon+0xca>
      send_rst = reset;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8adb      	ldrh	r3, [r3, #22]
 80078c6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4827      	ldr	r0, [pc, #156]	; (8007968 <tcp_abandon+0x15c>)
 80078cc:	f001 f8d8 	bl	8008a80 <tcp_pcb_remove>
 80078d0:	4b26      	ldr	r3, [pc, #152]	; (800796c <tcp_abandon+0x160>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d004      	beq.n	80078e8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fe17 	bl	8008516 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d004      	beq.n	80078fa <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fe0e 	bl	8008516 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fe05 	bl	8008516 <tcp_segs_free>
    if (send_rst) {
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00c      	beq.n	800792c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	1d19      	adds	r1, r3, #4
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8b1b      	ldrh	r3, [r3, #24]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	460b      	mov	r3, r1
 8007924:	6979      	ldr	r1, [r7, #20]
 8007926:	69b8      	ldr	r0, [r7, #24]
 8007928:	f004 fd2a 	bl	800c380 <tcp_rst>
    last_state = pcb->state;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7d1b      	ldrb	r3, [r3, #20]
 8007930:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	2001      	movs	r0, #1
 8007936:	f7fe fded 	bl	8006514 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <tcp_abandon+0x13e>
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f06f 010c 	mvn.w	r1, #12
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	4798      	blx	r3
}
 800794a:	bf00      	nop
 800794c:	3728      	adds	r7, #40	; 0x28
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	08010e64 	.word	0x08010e64
 8007958:	08010efc 	.word	0x08010efc
 800795c:	08010ea0 	.word	0x08010ea0
 8007960:	2000715c 	.word	0x2000715c
 8007964:	20007158 	.word	0x20007158
 8007968:	2000714c 	.word	0x2000714c
 800796c:	20007148 	.word	0x20007148

08007970 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007978:	2101      	movs	r1, #1
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff ff46 	bl	800780c <tcp_abandon>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007996:	2304      	movs	r3, #4
 8007998:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80079a0:	4b3c      	ldr	r3, [pc, #240]	; (8007a94 <tcp_bind+0x10c>)
 80079a2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <tcp_bind+0x28>
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d102      	bne.n	80079b6 <tcp_bind+0x2e>
    return ERR_VAL;
 80079b0:	f06f 0305 	mvn.w	r3, #5
 80079b4:	e06a      	b.n	8007a8c <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	7d1b      	ldrb	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <tcp_bind+0x4a>
 80079be:	4b36      	ldr	r3, [pc, #216]	; (8007a98 <tcp_bind+0x110>)
 80079c0:	f44f 7211 	mov.w	r2, #580	; 0x244
 80079c4:	4935      	ldr	r1, [pc, #212]	; (8007a9c <tcp_bind+0x114>)
 80079c6:	4836      	ldr	r0, [pc, #216]	; (8007aa0 <tcp_bind+0x118>)
 80079c8:	f007 fc20 	bl	800f20c <iprintf>
 80079cc:	f06f 0305 	mvn.w	r3, #5
 80079d0:	e05c      	b.n	8007a8c <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 80079d2:	88fb      	ldrh	r3, [r7, #6]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d109      	bne.n	80079ec <tcp_bind+0x64>
    port = tcp_new_port();
 80079d8:	f000 f9ca 	bl	8007d70 <tcp_new_port>
 80079dc:	4603      	mov	r3, r0
 80079de:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d135      	bne.n	8007a52 <tcp_bind+0xca>
      return ERR_BUF;
 80079e6:	f06f 0301 	mvn.w	r3, #1
 80079ea:	e04f      	b.n	8007a8c <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80079ec:	2300      	movs	r3, #0
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	e02b      	b.n	8007a4a <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80079f2:	4a2c      	ldr	r2, [pc, #176]	; (8007aa4 <tcp_bind+0x11c>)
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	61bb      	str	r3, [r7, #24]
 80079fe:	e01e      	b.n	8007a3e <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	8adb      	ldrh	r3, [r3, #22]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d116      	bne.n	8007a38 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007a0a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d010      	beq.n	8007a32 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00c      	beq.n	8007a32 <tcp_bind+0xaa>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d102      	bne.n	8007a38 <tcp_bind+0xb0>
              return ERR_USE;
 8007a32:	f06f 0307 	mvn.w	r3, #7
 8007a36:	e029      	b.n	8007a8c <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1dd      	bne.n	8007a00 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	dbcf      	blt.n	80079f2 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00c      	beq.n	8007a72 <tcp_bind+0xea>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d008      	beq.n	8007a72 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <tcp_bind+0xe4>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	e000      	b.n	8007a6e <tcp_bind+0xe6>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007a78:	4b0b      	ldr	r3, [pc, #44]	; (8007aa8 <tcp_bind+0x120>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	60da      	str	r2, [r3, #12]
 8007a80:	4a09      	ldr	r2, [pc, #36]	; (8007aa8 <tcp_bind+0x120>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	f004 fec3 	bl	800c810 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3720      	adds	r7, #32
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	080125dc 	.word	0x080125dc
 8007a98:	08010e64 	.word	0x08010e64
 8007a9c:	08010f30 	.word	0x08010f30
 8007aa0:	08010ea0 	.word	0x08010ea0
 8007aa4:	080125b4 	.word	0x080125b4
 8007aa8:	20007158 	.word	0x20007158

08007aac <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8007aba:	68b8      	ldr	r0, [r7, #8]
 8007abc:	f7ff ff58 	bl	8007970 <tcp_abort>

  return ERR_ABRT;
 8007ac0:	f06f 030c 	mvn.w	r3, #12
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	2200      	movs	r2, #0
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f806 	bl	8007af0 <tcp_listen_with_backlog_and_err>
 8007ae4:	4603      	mov	r3, r0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
	...

08007af0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b088      	sub	sp, #32
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	460b      	mov	r3, r1
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	7d1b      	ldrb	r3, [r3, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <tcp_listen_with_backlog_and_err+0x2e>
 8007b0a:	4b3f      	ldr	r3, [pc, #252]	; (8007c08 <tcp_listen_with_backlog_and_err+0x118>)
 8007b0c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8007b10:	493e      	ldr	r1, [pc, #248]	; (8007c0c <tcp_listen_with_backlog_and_err+0x11c>)
 8007b12:	483f      	ldr	r0, [pc, #252]	; (8007c10 <tcp_listen_with_backlog_and_err+0x120>)
 8007b14:	f007 fb7a 	bl	800f20c <iprintf>
 8007b18:	23f1      	movs	r3, #241	; 0xf1
 8007b1a:	76fb      	strb	r3, [r7, #27]
 8007b1c:	e069      	b.n	8007bf2 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	7d1b      	ldrb	r3, [r3, #20]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d104      	bne.n	8007b30 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007b2a:	23f7      	movs	r3, #247	; 0xf7
 8007b2c:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007b2e:	e060      	b.n	8007bf2 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007b30:	2002      	movs	r0, #2
 8007b32:	f7fe fca3 	bl	800647c <memp_malloc>
 8007b36:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8007b3e:	23ff      	movs	r3, #255	; 0xff
 8007b40:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007b42:	e056      	b.n	8007bf2 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8ada      	ldrh	r2, [r3, #22]
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	2201      	movs	r2, #1
 8007b58:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	7d5a      	ldrb	r2, [r3, #21]
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	7a1a      	ldrb	r2, [r3, #8]
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7a9a      	ldrb	r2, [r3, #10]
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	7a5a      	ldrb	r2, [r3, #9]
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8adb      	ldrh	r3, [r3, #22]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d021      	beq.n	8007bce <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b8a:	4b22      	ldr	r3, [pc, #136]	; (8007c14 <tcp_listen_with_backlog_and_err+0x124>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d105      	bne.n	8007ba0 <tcp_listen_with_backlog_and_err+0xb0>
 8007b94:	4b1f      	ldr	r3, [pc, #124]	; (8007c14 <tcp_listen_with_backlog_and_err+0x124>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	4a1e      	ldr	r2, [pc, #120]	; (8007c14 <tcp_listen_with_backlog_and_err+0x124>)
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	e013      	b.n	8007bc8 <tcp_listen_with_backlog_and_err+0xd8>
 8007ba0:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <tcp_listen_with_backlog_and_err+0x124>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	e00c      	b.n	8007bc2 <tcp_listen_with_backlog_and_err+0xd2>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d104      	bne.n	8007bbc <tcp_listen_with_backlog_and_err+0xcc>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	60da      	str	r2, [r3, #12]
 8007bba:	e005      	b.n	8007bc8 <tcp_listen_with_backlog_and_err+0xd8>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	617b      	str	r3, [r7, #20]
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1ef      	bne.n	8007ba8 <tcp_listen_with_backlog_and_err+0xb8>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	2001      	movs	r0, #1
 8007bd2:	f7fe fc9f 	bl	8006514 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4a0f      	ldr	r2, [pc, #60]	; (8007c18 <tcp_listen_with_backlog_and_err+0x128>)
 8007bda:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <tcp_listen_with_backlog_and_err+0x12c>)
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	60da      	str	r2, [r3, #12]
 8007be4:	4a0d      	ldr	r2, [pc, #52]	; (8007c1c <tcp_listen_with_backlog_and_err+0x12c>)
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	f004 fe11 	bl	800c810 <tcp_timer_needed>
  res = ERR_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	7efa      	ldrb	r2, [r7, #27]
 8007bfc:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007bfe:	69fb      	ldr	r3, [r7, #28]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3720      	adds	r7, #32
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	08010e64 	.word	0x08010e64
 8007c0c:	08010f58 	.word	0x08010f58
 8007c10:	08010ea0 	.word	0x08010ea0
 8007c14:	20007158 	.word	0x20007158
 8007c18:	08007aad 	.word	0x08007aad
 8007c1c:	20007154 	.word	0x20007154

08007c20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007c30:	4413      	add	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007c3c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007c40:	bf28      	it	cs
 8007c42:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007c46:	b292      	uxth	r2, r2
 8007c48:	4413      	add	r3, r2
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	db08      	blt.n	8007c64 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	e020      	b.n	8007ca6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dd03      	ble.n	8007c7a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c78:	e014      	b.n	8007ca4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	1ad3      	subs	r3, r2, r3
 8007c84:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8c:	d306      	bcc.n	8007c9c <tcp_update_rcv_ann_wnd+0x7c>
 8007c8e:	4b08      	ldr	r3, [pc, #32]	; (8007cb0 <tcp_update_rcv_ann_wnd+0x90>)
 8007c90:	f44f 7242 	mov.w	r2, #776	; 0x308
 8007c94:	4907      	ldr	r1, [pc, #28]	; (8007cb4 <tcp_update_rcv_ann_wnd+0x94>)
 8007c96:	4808      	ldr	r0, [pc, #32]	; (8007cb8 <tcp_update_rcv_ann_wnd+0x98>)
 8007c98:	f007 fab8 	bl	800f20c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007ca4:	2300      	movs	r3, #0
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3710      	adds	r7, #16
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	08010e64 	.word	0x08010e64
 8007cb4:	08010f7c 	.word	0x08010f7c
 8007cb8:	08010ea0 	.word	0x08010ea0

08007cbc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7d1b      	ldrb	r3, [r3, #20]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d106      	bne.n	8007cde <tcp_recved+0x22>
 8007cd0:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <tcp_recved+0xa4>)
 8007cd2:	f240 321f 	movw	r2, #799	; 0x31f
 8007cd6:	4923      	ldr	r1, [pc, #140]	; (8007d64 <tcp_recved+0xa8>)
 8007cd8:	4823      	ldr	r0, [pc, #140]	; (8007d68 <tcp_recved+0xac>)
 8007cda:	f007 fa97 	bl	800f20c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007ce2:	887b      	ldrh	r3, [r7, #2]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007cf4:	d904      	bls.n	8007d00 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007cfc:	851a      	strh	r2, [r3, #40]	; 0x28
 8007cfe:	e017      	b.n	8007d30 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d113      	bne.n	8007d30 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	7d1b      	ldrb	r3, [r3, #20]
 8007d0c:	2b07      	cmp	r3, #7
 8007d0e:	d003      	beq.n	8007d18 <tcp_recved+0x5c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	7d1b      	ldrb	r3, [r3, #20]
 8007d14:	2b09      	cmp	r3, #9
 8007d16:	d104      	bne.n	8007d22 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007d1e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007d20:	e006      	b.n	8007d30 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <tcp_recved+0xa4>)
 8007d24:	f240 322d 	movw	r2, #813	; 0x32d
 8007d28:	4910      	ldr	r1, [pc, #64]	; (8007d6c <tcp_recved+0xb0>)
 8007d2a:	480f      	ldr	r0, [pc, #60]	; (8007d68 <tcp_recved+0xac>)
 8007d2c:	f007 fa6e 	bl	800f20c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7ff ff75 	bl	8007c20 <tcp_update_rcv_ann_wnd>
 8007d36:	4603      	mov	r3, r0
 8007d38:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007d40:	db09      	blt.n	8007d56 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	7e9b      	ldrb	r3, [r3, #26]
 8007d46:	f043 0302 	orr.w	r3, r3, #2
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f004 f891 	bl	800be78 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	08010e64 	.word	0x08010e64
 8007d64:	08010f98 	.word	0x08010f98
 8007d68:	08010ea0 	.word	0x08010ea0
 8007d6c:	08010fc0 	.word	0x08010fc0

08007d70 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <tcp_new_port+0x80>)
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	b291      	uxth	r1, r2
 8007d82:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <tcp_new_port+0x80>)
 8007d84:	8011      	strh	r1, [r2, #0]
 8007d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d103      	bne.n	8007d96 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007d8e:	4b18      	ldr	r3, [pc, #96]	; (8007df0 <tcp_new_port+0x80>)
 8007d90:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007d94:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007d96:	2300      	movs	r3, #0
 8007d98:	71fb      	strb	r3, [r7, #7]
 8007d9a:	e01e      	b.n	8007dda <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <tcp_new_port+0x84>)
 8007da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	e011      	b.n	8007dce <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	8ada      	ldrh	r2, [r3, #22]
 8007dae:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <tcp_new_port+0x80>)
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d108      	bne.n	8007dc8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007db6:	88bb      	ldrh	r3, [r7, #4]
 8007db8:	3301      	adds	r3, #1
 8007dba:	80bb      	strh	r3, [r7, #4]
 8007dbc:	88bb      	ldrh	r3, [r7, #4]
 8007dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc2:	d3da      	bcc.n	8007d7a <tcp_new_port+0xa>
          return 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	e00d      	b.n	8007de4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	603b      	str	r3, [r7, #0]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1ea      	bne.n	8007daa <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	71fb      	strb	r3, [r7, #7]
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d9dd      	bls.n	8007d9c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007de0:	4b03      	ldr	r3, [pc, #12]	; (8007df0 <tcp_new_port+0x80>)
 8007de2:	881b      	ldrh	r3, [r3, #0]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	20000012 	.word	0x20000012
 8007df4:	080125b4 	.word	0x080125b4

08007df8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007df8:	b5b0      	push	{r4, r5, r7, lr}
 8007dfa:	b08c      	sub	sp, #48	; 0x30
 8007dfc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8007e02:	4b97      	ldr	r3, [pc, #604]	; (8008060 <tcp_slowtmr+0x268>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	4a95      	ldr	r2, [pc, #596]	; (8008060 <tcp_slowtmr+0x268>)
 8007e0a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007e0c:	4b95      	ldr	r3, [pc, #596]	; (8008064 <tcp_slowtmr+0x26c>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	3301      	adds	r3, #1
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	4b93      	ldr	r3, [pc, #588]	; (8008064 <tcp_slowtmr+0x26c>)
 8007e16:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8007e1c:	4b92      	ldr	r3, [pc, #584]	; (8008068 <tcp_slowtmr+0x270>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007e22:	e227      	b.n	8008274 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	7d1b      	ldrb	r3, [r3, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <tcp_slowtmr+0x42>
 8007e2c:	4b8f      	ldr	r3, [pc, #572]	; (800806c <tcp_slowtmr+0x274>)
 8007e2e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8007e32:	498f      	ldr	r1, [pc, #572]	; (8008070 <tcp_slowtmr+0x278>)
 8007e34:	488f      	ldr	r0, [pc, #572]	; (8008074 <tcp_slowtmr+0x27c>)
 8007e36:	f007 f9e9 	bl	800f20c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	7d1b      	ldrb	r3, [r3, #20]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d106      	bne.n	8007e50 <tcp_slowtmr+0x58>
 8007e42:	4b8a      	ldr	r3, [pc, #552]	; (800806c <tcp_slowtmr+0x274>)
 8007e44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007e48:	498b      	ldr	r1, [pc, #556]	; (8008078 <tcp_slowtmr+0x280>)
 8007e4a:	488a      	ldr	r0, [pc, #552]	; (8008074 <tcp_slowtmr+0x27c>)
 8007e4c:	f007 f9de 	bl	800f20c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e52:	7d1b      	ldrb	r3, [r3, #20]
 8007e54:	2b0a      	cmp	r3, #10
 8007e56:	d106      	bne.n	8007e66 <tcp_slowtmr+0x6e>
 8007e58:	4b84      	ldr	r3, [pc, #528]	; (800806c <tcp_slowtmr+0x274>)
 8007e5a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8007e5e:	4987      	ldr	r1, [pc, #540]	; (800807c <tcp_slowtmr+0x284>)
 8007e60:	4884      	ldr	r0, [pc, #528]	; (8008074 <tcp_slowtmr+0x27c>)
 8007e62:	f007 f9d3 	bl	800f20c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	7f5a      	ldrb	r2, [r3, #29]
 8007e6a:	4b7e      	ldr	r3, [pc, #504]	; (8008064 <tcp_slowtmr+0x26c>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d103      	bne.n	8007e7a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8007e78:	e1fc      	b.n	8008274 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007e7a:	4b7a      	ldr	r3, [pc, #488]	; (8008064 <tcp_slowtmr+0x26c>)
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8007e82:	2300      	movs	r3, #0
 8007e84:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	7d1b      	ldrb	r3, [r3, #20]
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d108      	bne.n	8007ea4 <tcp_slowtmr+0xac>
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e98:	2b05      	cmp	r3, #5
 8007e9a:	d903      	bls.n	8007ea4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8007e9c:	7ffb      	ldrb	r3, [r7, #31]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	77fb      	strb	r3, [r7, #31]
 8007ea2:	e0a2      	b.n	8007fea <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007eaa:	2b0b      	cmp	r3, #11
 8007eac:	d903      	bls.n	8007eb6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007eae:	7ffb      	ldrb	r3, [r7, #31]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	77fb      	strb	r3, [r7, #31]
 8007eb4:	e099      	b.n	8007fea <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d032      	beq.n	8007f26 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	4a6d      	ldr	r2, [pc, #436]	; (8008080 <tcp_slowtmr+0x288>)
 8007eca:	5cd3      	ldrb	r3, [r2, r3]
 8007ecc:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007ed4:	7cfa      	ldrb	r2, [r7, #19]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d907      	bls.n	8007eea <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007ef0:	7cfa      	ldrb	r2, [r7, #19]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d879      	bhi.n	8007fea <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8007ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ef8:	f004 fbc9 	bl	800c68e <tcp_zero_window_probe>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d173      	bne.n	8007fea <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007f10:	2b06      	cmp	r3, #6
 8007f12:	d86a      	bhi.n	8007fea <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007f24:	e061      	b.n	8007fea <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	db08      	blt.n	8007f42 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3301      	adds	r3, #1
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	b21a      	sxth	r2, r3
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d04f      	beq.n	8007fea <tcp_slowtmr+0x1f2>
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007f56:	429a      	cmp	r2, r3
 8007f58:	db47      	blt.n	8007fea <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	7d1b      	ldrb	r3, [r3, #20]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d018      	beq.n	8007f94 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f68:	2b0c      	cmp	r3, #12
 8007f6a:	bf28      	it	cs
 8007f6c:	230c      	movcs	r3, #12
 8007f6e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007f76:	10db      	asrs	r3, r3, #3
 8007f78:	b21b      	sxth	r3, r3
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007f82:	4413      	add	r3, r2
 8007f84:	7dfa      	ldrb	r2, [r7, #23]
 8007f86:	493f      	ldr	r1, [pc, #252]	; (8008084 <tcp_slowtmr+0x28c>)
 8007f88:	5c8a      	ldrb	r2, [r1, r2]
 8007f8a:	4093      	lsls	r3, r2
 8007f8c:	b21a      	sxth	r2, r3
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	2200      	movs	r2, #0
 8007f98:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	bf28      	it	cs
 8007faa:	4613      	movcs	r3, r2
 8007fac:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8007fae:	8abb      	ldrh	r3, [r7, #20]
 8007fb0:	085b      	lsrs	r3, r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d206      	bcs.n	8007fda <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007fd0:	005b      	lsls	r3, r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8007fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fe6:	f004 fa41 	bl	800c46c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	7d1b      	ldrb	r3, [r3, #20]
 8007fee:	2b06      	cmp	r3, #6
 8007ff0:	d10f      	bne.n	8008012 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	7e9b      	ldrb	r3, [r3, #26]
 8007ff6:	f003 0310 	and.w	r3, r3, #16
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d009      	beq.n	8008012 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ffe:	4b18      	ldr	r3, [pc, #96]	; (8008060 <tcp_slowtmr+0x268>)
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	2b28      	cmp	r3, #40	; 0x28
 800800a:	d902      	bls.n	8008012 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800800c:	7ffb      	ldrb	r3, [r7, #31]
 800800e:	3301      	adds	r3, #1
 8008010:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	7a1b      	ldrb	r3, [r3, #8]
 8008016:	f003 0308 	and.w	r3, r3, #8
 800801a:	2b00      	cmp	r3, #0
 800801c:	d05d      	beq.n	80080da <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008022:	2b04      	cmp	r3, #4
 8008024:	d003      	beq.n	800802e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800802a:	2b07      	cmp	r3, #7
 800802c:	d155      	bne.n	80080da <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <tcp_slowtmr+0x268>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8008042:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008046:	4910      	ldr	r1, [pc, #64]	; (8008088 <tcp_slowtmr+0x290>)
 8008048:	fba1 1303 	umull	r1, r3, r1, r3
 800804c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800804e:	429a      	cmp	r2, r3
 8008050:	d91c      	bls.n	800808c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008052:	7ffb      	ldrb	r3, [r7, #31]
 8008054:	3301      	adds	r3, #1
 8008056:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8008058:	7fbb      	ldrb	r3, [r7, #30]
 800805a:	3301      	adds	r3, #1
 800805c:	77bb      	strb	r3, [r7, #30]
 800805e:	e03c      	b.n	80080da <tcp_slowtmr+0x2e2>
 8008060:	20007150 	.word	0x20007150
 8008064:	20000516 	.word	0x20000516
 8008068:	2000714c 	.word	0x2000714c
 800806c:	08010e64 	.word	0x08010e64
 8008070:	08011014 	.word	0x08011014
 8008074:	08010ea0 	.word	0x08010ea0
 8008078:	08011040 	.word	0x08011040
 800807c:	0801106c 	.word	0x0801106c
 8008080:	080125ac 	.word	0x080125ac
 8008084:	0801259c 	.word	0x0801259c
 8008088:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800808c:	4b97      	ldr	r3, [pc, #604]	; (80082ec <tcp_slowtmr+0x4f4>)
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80080a2:	4618      	mov	r0, r3
 80080a4:	4b92      	ldr	r3, [pc, #584]	; (80082f0 <tcp_slowtmr+0x4f8>)
 80080a6:	fb03 f300 	mul.w	r3, r3, r0
 80080aa:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80080ac:	4991      	ldr	r1, [pc, #580]	; (80082f4 <tcp_slowtmr+0x4fc>)
 80080ae:	fba1 1303 	umull	r1, r3, r1, r3
 80080b2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d910      	bls.n	80080da <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 80080b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080ba:	f004 faab 	bl	800c614 <tcp_keepalive>
 80080be:	4603      	mov	r3, r0
 80080c0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80080c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80080d0:	3301      	adds	r3, #1
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d016      	beq.n	8008110 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80080e2:	4b82      	ldr	r3, [pc, #520]	; (80082ec <tcp_slowtmr+0x4f4>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	1ad2      	subs	r2, r2, r3
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80080f2:	4619      	mov	r1, r3
 80080f4:	460b      	mov	r3, r1
 80080f6:	005b      	lsls	r3, r3, #1
 80080f8:	440b      	add	r3, r1
 80080fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d307      	bcc.n	8008110 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fa06 	bl	8008516 <tcp_segs_free>
      pcb->ooseq = NULL;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	2200      	movs	r2, #0
 800810e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	7d1b      	ldrb	r3, [r3, #20]
 8008114:	2b03      	cmp	r3, #3
 8008116:	d109      	bne.n	800812c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008118:	4b74      	ldr	r3, [pc, #464]	; (80082ec <tcp_slowtmr+0x4f4>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b28      	cmp	r3, #40	; 0x28
 8008124:	d902      	bls.n	800812c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008126:	7ffb      	ldrb	r3, [r7, #31]
 8008128:	3301      	adds	r3, #1
 800812a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	7d1b      	ldrb	r3, [r3, #20]
 8008130:	2b09      	cmp	r3, #9
 8008132:	d109      	bne.n	8008148 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008134:	4b6d      	ldr	r3, [pc, #436]	; (80082ec <tcp_slowtmr+0x4f4>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2bf0      	cmp	r3, #240	; 0xf0
 8008140:	d902      	bls.n	8008148 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8008142:	7ffb      	ldrb	r3, [r7, #31]
 8008144:	3301      	adds	r3, #1
 8008146:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008148:	7ffb      	ldrb	r3, [r7, #31]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d05d      	beq.n	800820a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008154:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008156:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008158:	f000 fc50 	bl	80089fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800815c:	6a3b      	ldr	r3, [r7, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d010      	beq.n	8008184 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008162:	4b65      	ldr	r3, [pc, #404]	; (80082f8 <tcp_slowtmr+0x500>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008168:	429a      	cmp	r2, r3
 800816a:	d106      	bne.n	800817a <tcp_slowtmr+0x382>
 800816c:	4b63      	ldr	r3, [pc, #396]	; (80082fc <tcp_slowtmr+0x504>)
 800816e:	f240 4289 	movw	r2, #1161	; 0x489
 8008172:	4963      	ldr	r1, [pc, #396]	; (8008300 <tcp_slowtmr+0x508>)
 8008174:	4863      	ldr	r0, [pc, #396]	; (8008304 <tcp_slowtmr+0x50c>)
 8008176:	f007 f849 	bl	800f20c <iprintf>
        prev->next = pcb->next;
 800817a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	e00f      	b.n	80081a4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008184:	4b5c      	ldr	r3, [pc, #368]	; (80082f8 <tcp_slowtmr+0x500>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818a:	429a      	cmp	r2, r3
 800818c:	d006      	beq.n	800819c <tcp_slowtmr+0x3a4>
 800818e:	4b5b      	ldr	r3, [pc, #364]	; (80082fc <tcp_slowtmr+0x504>)
 8008190:	f240 428d 	movw	r2, #1165	; 0x48d
 8008194:	495c      	ldr	r1, [pc, #368]	; (8008308 <tcp_slowtmr+0x510>)
 8008196:	485b      	ldr	r0, [pc, #364]	; (8008304 <tcp_slowtmr+0x50c>)
 8008198:	f007 f838 	bl	800f20c <iprintf>
        tcp_active_pcbs = pcb->next;
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	4a55      	ldr	r2, [pc, #340]	; (80082f8 <tcp_slowtmr+0x500>)
 80081a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80081a4:	7fbb      	ldrb	r3, [r7, #30]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d010      	beq.n	80081cc <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80081b2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	1d1d      	adds	r5, r3, #4
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	8adb      	ldrh	r3, [r3, #22]
 80081bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081be:	8b12      	ldrh	r2, [r2, #24]
 80081c0:	9201      	str	r2, [sp, #4]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	462b      	mov	r3, r5
 80081c6:	4622      	mov	r2, r4
 80081c8:	f004 f8da 	bl	800c380 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	7d1b      	ldrb	r3, [r3, #20]
 80081d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	2001      	movs	r0, #1
 80081e6:	f7fe f995 	bl	8006514 <memp_free>

      tcp_active_pcbs_changed = 0;
 80081ea:	4b48      	ldr	r3, [pc, #288]	; (800830c <tcp_slowtmr+0x514>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <tcp_slowtmr+0x408>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f06f 010c 	mvn.w	r1, #12
 80081fc:	68b8      	ldr	r0, [r7, #8]
 80081fe:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008200:	4b42      	ldr	r3, [pc, #264]	; (800830c <tcp_slowtmr+0x514>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d035      	beq.n	8008274 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8008208:	e606      	b.n	8007e18 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	7edb      	ldrb	r3, [r3, #27]
 8008218:	3301      	adds	r3, #1
 800821a:	b2da      	uxtb	r2, r3
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	7eda      	ldrb	r2, [r3, #27]
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	7f1b      	ldrb	r3, [r3, #28]
 8008228:	429a      	cmp	r2, r3
 800822a:	d323      	bcc.n	8008274 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	2200      	movs	r2, #0
 8008230:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008232:	4b36      	ldr	r3, [pc, #216]	; (800830c <tcp_slowtmr+0x514>)
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <tcp_slowtmr+0x460>
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008248:	6a3a      	ldr	r2, [r7, #32]
 800824a:	6912      	ldr	r2, [r2, #16]
 800824c:	6a39      	ldr	r1, [r7, #32]
 800824e:	4610      	mov	r0, r2
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	777b      	strb	r3, [r7, #29]
 8008256:	e001      	b.n	800825c <tcp_slowtmr+0x464>
 8008258:	2300      	movs	r3, #0
 800825a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800825c:	4b2b      	ldr	r3, [pc, #172]	; (800830c <tcp_slowtmr+0x514>)
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d000      	beq.n	8008266 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8008264:	e5d8      	b.n	8007e18 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008266:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d102      	bne.n	8008274 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800826e:	6a38      	ldr	r0, [r7, #32]
 8008270:	f003 fe02 	bl	800be78 <tcp_output>
  while (pcb != NULL) {
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	f47f add4 	bne.w	8007e24 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8008280:	4b23      	ldr	r3, [pc, #140]	; (8008310 <tcp_slowtmr+0x518>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008286:	e068      	b.n	800835a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	7d1b      	ldrb	r3, [r3, #20]
 800828c:	2b0a      	cmp	r3, #10
 800828e:	d006      	beq.n	800829e <tcp_slowtmr+0x4a6>
 8008290:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <tcp_slowtmr+0x504>)
 8008292:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008296:	491f      	ldr	r1, [pc, #124]	; (8008314 <tcp_slowtmr+0x51c>)
 8008298:	481a      	ldr	r0, [pc, #104]	; (8008304 <tcp_slowtmr+0x50c>)
 800829a:	f006 ffb7 	bl	800f20c <iprintf>
    pcb_remove = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <tcp_slowtmr+0x4f4>)
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2bf0      	cmp	r3, #240	; 0xf0
 80082ae:	d902      	bls.n	80082b6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 80082b0:	7ffb      	ldrb	r3, [r7, #31]
 80082b2:	3301      	adds	r3, #1
 80082b4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80082b6:	7ffb      	ldrb	r3, [r7, #31]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d049      	beq.n	8008350 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80082bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082be:	f000 fb9d 	bl	80089fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d029      	beq.n	800831c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80082c8:	4b11      	ldr	r3, [pc, #68]	; (8008310 <tcp_slowtmr+0x518>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d106      	bne.n	80082e0 <tcp_slowtmr+0x4e8>
 80082d2:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <tcp_slowtmr+0x504>)
 80082d4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80082d8:	490f      	ldr	r1, [pc, #60]	; (8008318 <tcp_slowtmr+0x520>)
 80082da:	480a      	ldr	r0, [pc, #40]	; (8008304 <tcp_slowtmr+0x50c>)
 80082dc:	f006 ff96 	bl	800f20c <iprintf>
        prev->next = pcb->next;
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	60da      	str	r2, [r3, #12]
 80082e8:	e028      	b.n	800833c <tcp_slowtmr+0x544>
 80082ea:	bf00      	nop
 80082ec:	20007150 	.word	0x20007150
 80082f0:	000124f8 	.word	0x000124f8
 80082f4:	10624dd3 	.word	0x10624dd3
 80082f8:	2000714c 	.word	0x2000714c
 80082fc:	08010e64 	.word	0x08010e64
 8008300:	0801109c 	.word	0x0801109c
 8008304:	08010ea0 	.word	0x08010ea0
 8008308:	080110c8 	.word	0x080110c8
 800830c:	20007148 	.word	0x20007148
 8008310:	2000715c 	.word	0x2000715c
 8008314:	080110f4 	.word	0x080110f4
 8008318:	08011124 	.word	0x08011124
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800831c:	4b13      	ldr	r3, [pc, #76]	; (800836c <tcp_slowtmr+0x574>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008322:	429a      	cmp	r2, r3
 8008324:	d006      	beq.n	8008334 <tcp_slowtmr+0x53c>
 8008326:	4b12      	ldr	r3, [pc, #72]	; (8008370 <tcp_slowtmr+0x578>)
 8008328:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800832c:	4911      	ldr	r1, [pc, #68]	; (8008374 <tcp_slowtmr+0x57c>)
 800832e:	4812      	ldr	r0, [pc, #72]	; (8008378 <tcp_slowtmr+0x580>)
 8008330:	f006 ff6c 	bl	800f20c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	4a0c      	ldr	r2, [pc, #48]	; (800836c <tcp_slowtmr+0x574>)
 800833a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800833c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8008346:	69b9      	ldr	r1, [r7, #24]
 8008348:	2001      	movs	r0, #1
 800834a:	f7fe f8e3 	bl	8006514 <memp_free>
 800834e:	e004      	b.n	800835a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d193      	bne.n	8008288 <tcp_slowtmr+0x490>
    }
  }
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	3728      	adds	r7, #40	; 0x28
 8008366:	46bd      	mov	sp, r7
 8008368:	bdb0      	pop	{r4, r5, r7, pc}
 800836a:	bf00      	nop
 800836c:	2000715c 	.word	0x2000715c
 8008370:	08010e64 	.word	0x08010e64
 8008374:	0801114c 	.word	0x0801114c
 8008378:	08010ea0 	.word	0x08010ea0

0800837c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008382:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <tcp_fasttmr+0xbc>)
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	b2da      	uxtb	r2, r3
 800838a:	4b2b      	ldr	r3, [pc, #172]	; (8008438 <tcp_fasttmr+0xbc>)
 800838c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800838e:	4b2b      	ldr	r3, [pc, #172]	; (800843c <tcp_fasttmr+0xc0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008394:	e048      	b.n	8008428 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	7f5a      	ldrb	r2, [r3, #29]
 800839a:	4b27      	ldr	r3, [pc, #156]	; (8008438 <tcp_fasttmr+0xbc>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d03f      	beq.n	8008422 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80083a2:	4b25      	ldr	r3, [pc, #148]	; (8008438 <tcp_fasttmr+0xbc>)
 80083a4:	781a      	ldrb	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7e9b      	ldrb	r3, [r3, #26]
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d010      	beq.n	80083d8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	7e9b      	ldrb	r3, [r3, #26]
 80083ba:	f043 0302 	orr.w	r3, r3, #2
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f003 fd57 	bl	800be78 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7e9b      	ldrb	r3, [r3, #26]
 80083ce:	f023 0303 	bic.w	r3, r3, #3
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	7e9b      	ldrb	r3, [r3, #26]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d009      	beq.n	80083f8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7e9b      	ldrb	r3, [r3, #26]
 80083e8:	f023 0308 	bic.w	r3, r3, #8
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff f988 	bl	8007708 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008406:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <tcp_fasttmr+0xc4>)
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f819 	bl	8008444 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <tcp_fasttmr+0xc4>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d000      	beq.n	800841c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800841a:	e7b8      	b.n	800838e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	e002      	b.n	8008428 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1b3      	bne.n	8008396 <tcp_fasttmr+0x1a>
    }
  }
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000516 	.word	0x20000516
 800843c:	2000714c 	.word	0x2000714c
 8008440:	20007148 	.word	0x20007148

08008444 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008444:	b590      	push	{r4, r7, lr}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008450:	7b5b      	ldrb	r3, [r3, #13]
 8008452:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008458:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00b      	beq.n	8008482 <tcp_process_refused_data+0x3e>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6918      	ldr	r0, [r3, #16]
 8008474:	2300      	movs	r3, #0
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	47a0      	blx	r4
 800847c:	4603      	mov	r3, r0
 800847e:	73fb      	strb	r3, [r7, #15]
 8008480:	e007      	b.n	8008492 <tcp_process_refused_data+0x4e>
 8008482:	2300      	movs	r3, #0
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	2000      	movs	r0, #0
 800848a:	f000 f89b 	bl	80085c4 <tcp_recv_null>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d12a      	bne.n	80084f0 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d033      	beq.n	800850c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80084ac:	d005      	beq.n	80084ba <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b2:	3301      	adds	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <tcp_process_refused_data+0x98>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6918      	ldr	r0, [r3, #16]
 80084ce:	2300      	movs	r3, #0
 80084d0:	2200      	movs	r2, #0
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	47a0      	blx	r4
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]
 80084da:	e001      	b.n	80084e0 <tcp_process_refused_data+0x9c>
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80084e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084e4:	f113 0f0d 	cmn.w	r3, #13
 80084e8:	d110      	bne.n	800850c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80084ea:	f06f 030c 	mvn.w	r3, #12
 80084ee:	e00e      	b.n	800850e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80084f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084f4:	f113 0f0d 	cmn.w	r3, #13
 80084f8:	d102      	bne.n	8008500 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80084fa:	f06f 030c 	mvn.w	r3, #12
 80084fe:	e006      	b.n	800850e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8008506:	f06f 0304 	mvn.w	r3, #4
 800850a:	e000      	b.n	800850e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	bd90      	pop	{r4, r7, pc}

08008516 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800851e:	e007      	b.n	8008530 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f80a 	bl	8008540 <tcp_seg_free>
    seg = next;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1f4      	bne.n	8008520 <tcp_segs_free+0xa>
  }
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fd12 	bl	8006f84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008560:	6879      	ldr	r1, [r7, #4]
 8008562:	2003      	movs	r0, #3
 8008564:	f7fd ffd6 	bl	8006514 <memp_free>
  }
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	755a      	strb	r2, [r3, #21]
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008594:	2003      	movs	r0, #3
 8008596:	f7fd ff71 	bl	800647c <memp_malloc>
 800859a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <tcp_seg_copy+0x1a>
    return NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e00a      	b.n	80085bc <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80085a6:	2210      	movs	r2, #16
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f006 fe18 	bl	800f1e0 <memcpy>
  pbuf_ref(cseg->p);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fd8f 	bl	80070d8 <pbuf_ref>
  return cseg;
 80085ba:	68fb      	ldr	r3, [r7, #12]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	891b      	ldrh	r3, [r3, #8]
 80085dc:	4619      	mov	r1, r3
 80085de:	68b8      	ldr	r0, [r7, #8]
 80085e0:	f7ff fb6c 	bl	8007cbc <tcp_recved>
    pbuf_free(p);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7fe fccd 	bl	8006f84 <pbuf_free>
 80085ea:	e008      	b.n	80085fe <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80085ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80085f4:	68b8      	ldr	r0, [r7, #8]
 80085f6:	f7ff f8f1 	bl	80077dc <tcp_close>
 80085fa:	4603      	mov	r3, r0
 80085fc:	e000      	b.n	8008600 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008616:	2b00      	cmp	r3, #0
 8008618:	db01      	blt.n	800861e <tcp_kill_prio+0x16>
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	e000      	b.n	8008620 <tcp_kill_prio+0x18>
 800861e:	237f      	movs	r3, #127	; 0x7f
 8008620:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800862a:	4b16      	ldr	r3, [pc, #88]	; (8008684 <tcp_kill_prio+0x7c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e01a      	b.n	8008668 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	7d5b      	ldrb	r3, [r3, #21]
 8008636:	7afa      	ldrb	r2, [r7, #11]
 8008638:	429a      	cmp	r2, r3
 800863a:	d312      	bcc.n	8008662 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800863c:	4b12      	ldr	r3, [pc, #72]	; (8008688 <tcp_kill_prio+0x80>)
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	429a      	cmp	r2, r3
 800864a:	d80a      	bhi.n	8008662 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800864c:	4b0e      	ldr	r3, [pc, #56]	; (8008688 <tcp_kill_prio+0x80>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	7d5b      	ldrb	r3, [r3, #21]
 8008660:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1e1      	bne.n	8008632 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008674:	6938      	ldr	r0, [r7, #16]
 8008676:	f7ff f97b 	bl	8007970 <tcp_abort>
  }
}
 800867a:	bf00      	nop
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	2000714c 	.word	0x2000714c
 8008688:	20007150 	.word	0x20007150

0800868c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	2b08      	cmp	r3, #8
 800869a:	d009      	beq.n	80086b0 <tcp_kill_state+0x24>
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d006      	beq.n	80086b0 <tcp_kill_state+0x24>
 80086a2:	4b1a      	ldr	r3, [pc, #104]	; (800870c <tcp_kill_state+0x80>)
 80086a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80086a8:	4919      	ldr	r1, [pc, #100]	; (8008710 <tcp_kill_state+0x84>)
 80086aa:	481a      	ldr	r0, [pc, #104]	; (8008714 <tcp_kill_state+0x88>)
 80086ac:	f006 fdae 	bl	800f20c <iprintf>

  inactivity = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086b8:	4b17      	ldr	r3, [pc, #92]	; (8008718 <tcp_kill_state+0x8c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	617b      	str	r3, [r7, #20]
 80086be:	e017      	b.n	80086f0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	7d1b      	ldrb	r3, [r3, #20]
 80086c4:	79fa      	ldrb	r2, [r7, #7]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d10f      	bne.n	80086ea <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80086ca:	4b14      	ldr	r3, [pc, #80]	; (800871c <tcp_kill_state+0x90>)
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d807      	bhi.n	80086ea <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <tcp_kill_state+0x90>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	617b      	str	r3, [r7, #20]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e4      	bne.n	80086c0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80086fc:	2100      	movs	r1, #0
 80086fe:	6938      	ldr	r0, [r7, #16]
 8008700:	f7ff f884 	bl	800780c <tcp_abandon>
  }
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	08010e64 	.word	0x08010e64
 8008710:	08011174 	.word	0x08011174
 8008714:	08010ea0 	.word	0x08010ea0
 8008718:	2000714c 	.word	0x2000714c
 800871c:	20007150 	.word	0x20007150

08008720 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800872e:	4b12      	ldr	r3, [pc, #72]	; (8008778 <tcp_kill_timewait+0x58>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e012      	b.n	800875c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <tcp_kill_timewait+0x5c>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d807      	bhi.n	8008756 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008746:	4b0d      	ldr	r3, [pc, #52]	; (800877c <tcp_kill_timewait+0x5c>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e9      	bne.n	8008736 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008768:	68b8      	ldr	r0, [r7, #8]
 800876a:	f7ff f901 	bl	8007970 <tcp_abort>
  }
}
 800876e:	bf00      	nop
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	2000715c 	.word	0x2000715c
 800877c:	20007150 	.word	0x20007150

08008780 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800878a:	2001      	movs	r0, #1
 800878c:	f7fd fe76 	bl	800647c <memp_malloc>
 8008790:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d124      	bne.n	80087e2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008798:	f7ff ffc2 	bl	8008720 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800879c:	2001      	movs	r0, #1
 800879e:	f7fd fe6d 	bl	800647c <memp_malloc>
 80087a2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d11b      	bne.n	80087e2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80087aa:	2009      	movs	r0, #9
 80087ac:	f7ff ff6e 	bl	800868c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087b0:	2001      	movs	r0, #1
 80087b2:	f7fd fe63 	bl	800647c <memp_malloc>
 80087b6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d111      	bne.n	80087e2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80087be:	2008      	movs	r0, #8
 80087c0:	f7ff ff64 	bl	800868c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087c4:	2001      	movs	r0, #1
 80087c6:	f7fd fe59 	bl	800647c <memp_malloc>
 80087ca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff ff17 	bl	8008608 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087da:	2001      	movs	r0, #1
 80087dc:	f7fd fe4e 	bl	800647c <memp_malloc>
 80087e0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d03f      	beq.n	8008868 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80087e8:	2298      	movs	r2, #152	; 0x98
 80087ea:	2100      	movs	r1, #0
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f006 fd05 	bl	800f1fc <memset>
    pcb->prio = prio;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	79fa      	ldrb	r2, [r7, #7]
 80087f6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80087fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	22ff      	movs	r2, #255	; 0xff
 8008816:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800881e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2206      	movs	r2, #6
 8008824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2206      	movs	r2, #6
 800882c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008834:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800883e:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <tcp_alloc+0xf4>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <tcp_alloc+0xf8>)
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008854:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4a08      	ldr	r2, [pc, #32]	; (800887c <tcp_alloc+0xfc>)
 800885c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a07      	ldr	r2, [pc, #28]	; (8008880 <tcp_alloc+0x100>)
 8008864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008868:	68fb      	ldr	r3, [r7, #12]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20007150 	.word	0x20007150
 8008878:	20000516 	.word	0x20000516
 800887c:	080085c5 	.word	0x080085c5
 8008880:	006ddd00 	.word	0x006ddd00

08008884 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800888e:	2040      	movs	r0, #64	; 0x40
 8008890:	f7ff ff76 	bl	8008780 <tcp_alloc>
 8008894:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8008896:	68fb      	ldr	r3, [r7, #12]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	611a      	str	r2, [r3, #16]
  }
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr

080088c0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00e      	beq.n	80088ee <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7d1b      	ldrb	r3, [r3, #20]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d106      	bne.n	80088e6 <tcp_recv+0x26>
 80088d8:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <tcp_recv+0x38>)
 80088da:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80088de:	4907      	ldr	r1, [pc, #28]	; (80088fc <tcp_recv+0x3c>)
 80088e0:	4807      	ldr	r0, [pc, #28]	; (8008900 <tcp_recv+0x40>)
 80088e2:	f006 fc93 	bl	800f20c <iprintf>
    pcb->recv = recv;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	08010e64 	.word	0x08010e64
 80088fc:	08011184 	.word	0x08011184
 8008900:	08010ea0 	.word	0x08010ea0

08008904 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00d      	beq.n	8008930 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	7d1b      	ldrb	r3, [r3, #20]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d106      	bne.n	800892a <tcp_sent+0x26>
 800891c:	4b06      	ldr	r3, [pc, #24]	; (8008938 <tcp_sent+0x34>)
 800891e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8008922:	4906      	ldr	r1, [pc, #24]	; (800893c <tcp_sent+0x38>)
 8008924:	4806      	ldr	r0, [pc, #24]	; (8008940 <tcp_sent+0x3c>)
 8008926:	f006 fc71 	bl	800f20c <iprintf>
    pcb->sent = sent;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	08010e64 	.word	0x08010e64
 800893c:	080111ac 	.word	0x080111ac
 8008940:	08010ea0 	.word	0x08010ea0

08008944 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00e      	beq.n	8008972 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7d1b      	ldrb	r3, [r3, #20]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d106      	bne.n	800896a <tcp_err+0x26>
 800895c:	4b07      	ldr	r3, [pc, #28]	; (800897c <tcp_err+0x38>)
 800895e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8008962:	4907      	ldr	r1, [pc, #28]	; (8008980 <tcp_err+0x3c>)
 8008964:	4807      	ldr	r0, [pc, #28]	; (8008984 <tcp_err+0x40>)
 8008966:	f006 fc51 	bl	800f20c <iprintf>
    pcb->errf = err;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	683a      	ldr	r2, [r7, #0]
 800896e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	08010e64 	.word	0x08010e64
 8008980:	080111d4 	.word	0x080111d4
 8008984:	08010ea0 	.word	0x08010ea0

08008988 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d008      	beq.n	80089aa <tcp_accept+0x22>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7d1b      	ldrb	r3, [r3, #20]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d104      	bne.n	80089aa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	683a      	ldr	r2, [r7, #0]
 80089a8:	619a      	str	r2, [r3, #24]
  }
}
 80089aa:	bf00      	nop
 80089ac:	3714      	adds	r7, #20
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr

080089b4 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	4613      	mov	r3, r2
 80089c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	7d1b      	ldrb	r3, [r3, #20]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d106      	bne.n	80089d8 <tcp_poll+0x24>
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <tcp_poll+0x3c>)
 80089cc:	f240 7203 	movw	r2, #1795	; 0x703
 80089d0:	4908      	ldr	r1, [pc, #32]	; (80089f4 <tcp_poll+0x40>)
 80089d2:	4809      	ldr	r0, [pc, #36]	; (80089f8 <tcp_poll+0x44>)
 80089d4:	f006 fc1a 	bl	800f20c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	79fa      	ldrb	r2, [r7, #7]
 80089e4:	771a      	strb	r2, [r3, #28]
}
 80089e6:	bf00      	nop
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	08010e64 	.word	0x08010e64
 80089f4:	080111fc 	.word	0x080111fc
 80089f8:	08010ea0 	.word	0x08010ea0

080089fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7d1b      	ldrb	r3, [r3, #20]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d034      	beq.n	8008a76 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008a10:	2b0a      	cmp	r3, #10
 8008a12:	d030      	beq.n	8008a76 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d02c      	beq.n	8008a76 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe faab 	bl	8006f84 <pbuf_free>
      pcb->refused_data = NULL;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fd6c 	bl	8008516 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a4a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff fd60 	bl	8008516 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff fd5b 	bl	8008516 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	669a      	str	r2, [r3, #104]	; 0x68
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8008a76:	bf00      	nop
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d105      	bne.n	8008aa0 <tcp_pcb_remove+0x20>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	e013      	b.n	8008ac8 <tcp_pcb_remove+0x48>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e00c      	b.n	8008ac2 <tcp_pcb_remove+0x42>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d104      	bne.n	8008abc <tcp_pcb_remove+0x3c>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	60da      	str	r2, [r3, #12]
 8008aba:	e005      	b.n	8008ac8 <tcp_pcb_remove+0x48>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1ef      	bne.n	8008aa8 <tcp_pcb_remove+0x28>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008ace:	6838      	ldr	r0, [r7, #0]
 8008ad0:	f7ff ff94 	bl	80089fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	7d1b      	ldrb	r3, [r3, #20]
 8008ad8:	2b0a      	cmp	r3, #10
 8008ada:	d013      	beq.n	8008b04 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d00f      	beq.n	8008b04 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	7e9b      	ldrb	r3, [r3, #26]
 8008ae8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	7e9b      	ldrb	r3, [r3, #26]
 8008af4:	f043 0302 	orr.w	r3, r3, #2
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008afe:	6838      	ldr	r0, [r7, #0]
 8008b00:	f003 f9ba 	bl	800be78 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	7d1b      	ldrb	r3, [r3, #20]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d020      	beq.n	8008b4e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d006      	beq.n	8008b22 <tcp_pcb_remove+0xa2>
 8008b14:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <tcp_pcb_remove+0xe4>)
 8008b16:	f240 7253 	movw	r2, #1875	; 0x753
 8008b1a:	4913      	ldr	r1, [pc, #76]	; (8008b68 <tcp_pcb_remove+0xe8>)
 8008b1c:	4813      	ldr	r0, [pc, #76]	; (8008b6c <tcp_pcb_remove+0xec>)
 8008b1e:	f006 fb75 	bl	800f20c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d006      	beq.n	8008b38 <tcp_pcb_remove+0xb8>
 8008b2a:	4b0e      	ldr	r3, [pc, #56]	; (8008b64 <tcp_pcb_remove+0xe4>)
 8008b2c:	f240 7254 	movw	r2, #1876	; 0x754
 8008b30:	490f      	ldr	r1, [pc, #60]	; (8008b70 <tcp_pcb_remove+0xf0>)
 8008b32:	480e      	ldr	r0, [pc, #56]	; (8008b6c <tcp_pcb_remove+0xec>)
 8008b34:	f006 fb6a 	bl	800f20c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <tcp_pcb_remove+0xce>
 8008b40:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <tcp_pcb_remove+0xe4>)
 8008b42:	f240 7256 	movw	r2, #1878	; 0x756
 8008b46:	490b      	ldr	r1, [pc, #44]	; (8008b74 <tcp_pcb_remove+0xf4>)
 8008b48:	4808      	ldr	r0, [pc, #32]	; (8008b6c <tcp_pcb_remove+0xec>)
 8008b4a:	f006 fb5f 	bl	800f20c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2200      	movs	r2, #0
 8008b52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2200      	movs	r2, #0
 8008b58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008b5a:	bf00      	nop
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	08010e64 	.word	0x08010e64
 8008b68:	0801121c 	.word	0x0801121c
 8008b6c:	08010ea0 	.word	0x08010ea0
 8008b70:	08011234 	.word	0x08011234
 8008b74:	08011250 	.word	0x08011250

08008b78 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008b80:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <tcp_next_iss+0x24>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <tcp_next_iss+0x28>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4413      	add	r3, r2
 8008b8a:	4a04      	ldr	r2, [pc, #16]	; (8008b9c <tcp_next_iss+0x24>)
 8008b8c:	6013      	str	r3, [r2, #0]
  return iss;
 8008b8e:	4b03      	ldr	r3, [pc, #12]	; (8008b9c <tcp_next_iss+0x24>)
 8008b90:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr
 8008b9c:	20000014 	.word	0x20000014
 8008ba0:	20007150 	.word	0x20007150

08008ba4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	4603      	mov	r3, r0
 8008bac:	6039      	str	r1, [r7, #0]
 8008bae:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8008bb0:	6838      	ldr	r0, [r7, #0]
 8008bb2:	f005 f979 	bl	800dea8 <ip4_route>
 8008bb6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8008bbe:	88fb      	ldrh	r3, [r7, #6]
 8008bc0:	e010      	b.n	8008be4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bc6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008bc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d008      	beq.n	8008be2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008bd0:	897b      	ldrh	r3, [r7, #10]
 8008bd2:	3b28      	subs	r3, #40	; 0x28
 8008bd4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008bd6:	893a      	ldrh	r2, [r7, #8]
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	bf28      	it	cs
 8008bde:	4613      	movcs	r3, r2
 8008be0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8008be2:	88fb      	ldrh	r3, [r7, #6]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008bfa:	e011      	b.n	8008c20 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d108      	bne.n	8008c1a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008c0e:	68f8      	ldr	r0, [r7, #12]
 8008c10:	f7fe feae 	bl	8007970 <tcp_abort>
      pcb = next;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	e002      	b.n	8008c20 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1ea      	bne.n	8008bfc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8008c26:	bf00      	nop
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d02c      	beq.n	8008c9a <tcp_netif_ip_addr_changed+0x6a>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d028      	beq.n	8008c9a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008c48:	4b16      	ldr	r3, [pc, #88]	; (8008ca4 <tcp_netif_ip_addr_changed+0x74>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff ffcc 	bl	8008bec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008c54:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <tcp_netif_ip_addr_changed+0x78>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7ff ffc6 	bl	8008bec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d019      	beq.n	8008c9a <tcp_netif_ip_addr_changed+0x6a>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d015      	beq.n	8008c9a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	; (8008cac <tcp_netif_ip_addr_changed+0x7c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	e00e      	b.n	8008c94 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d103      	bne.n	8008c90 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1ed      	bne.n	8008c76 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	2000714c 	.word	0x2000714c
 8008ca8:	20007158 	.word	0x20007158
 8008cac:	20007154 	.word	0x20007154

08008cb0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008cb0:	b590      	push	{r4, r7, lr}
 8008cb2:	b08b      	sub	sp, #44	; 0x2c
 8008cb4:	af02      	add	r7, sp, #8
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	4a82      	ldr	r2, [pc, #520]	; (8008ec8 <tcp_input+0x218>)
 8008cc0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	895b      	ldrh	r3, [r3, #10]
 8008cc6:	2b13      	cmp	r3, #19
 8008cc8:	f240 838a 	bls.w	80093e0 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008ccc:	4b7f      	ldr	r3, [pc, #508]	; (8008ecc <tcp_input+0x21c>)
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	4a7e      	ldr	r2, [pc, #504]	; (8008ecc <tcp_input+0x21c>)
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f005 fb62 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f040 8380 	bne.w	80093e4 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008ce4:	4b79      	ldr	r3, [pc, #484]	; (8008ecc <tcp_input+0x21c>)
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008cec:	2be0      	cmp	r3, #224	; 0xe0
 8008cee:	f000 8379 	beq.w	80093e4 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8008cf2:	4b75      	ldr	r3, [pc, #468]	; (8008ec8 <tcp_input+0x218>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	899b      	ldrh	r3, [r3, #12]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fc ffac 	bl	8005c58 <lwip_htons>
 8008d00:	4603      	mov	r3, r0
 8008d02:	0b1b      	lsrs	r3, r3, #12
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008d0c:	7cbb      	ldrb	r3, [r7, #18]
 8008d0e:	2b13      	cmp	r3, #19
 8008d10:	f240 836a 	bls.w	80093e8 <tcp_input+0x738>
 8008d14:	7cbb      	ldrb	r3, [r7, #18]
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	891b      	ldrh	r3, [r3, #8]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	f200 8363 	bhi.w	80093e8 <tcp_input+0x738>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008d22:	7cbb      	ldrb	r3, [r7, #18]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b14      	subs	r3, #20
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	4b69      	ldr	r3, [pc, #420]	; (8008ed0 <tcp_input+0x220>)
 8008d2c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008d2e:	4b69      	ldr	r3, [pc, #420]	; (8008ed4 <tcp_input+0x224>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	895a      	ldrh	r2, [r3, #10]
 8008d38:	7cbb      	ldrb	r3, [r7, #18]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d30d      	bcc.n	8008d5c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008d40:	4b63      	ldr	r3, [pc, #396]	; (8008ed0 <tcp_input+0x220>)
 8008d42:	881a      	ldrh	r2, [r3, #0]
 8008d44:	4b64      	ldr	r3, [pc, #400]	; (8008ed8 <tcp_input+0x228>)
 8008d46:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008d48:	7cbb      	ldrb	r3, [r7, #18]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	425b      	negs	r3, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	b21b      	sxth	r3, r3
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7fe f8f1 	bl	8006f3c <pbuf_header>
 8008d5a:	e055      	b.n	8008e08 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d105      	bne.n	8008d70 <tcp_input+0xc0>
 8008d64:	4b5d      	ldr	r3, [pc, #372]	; (8008edc <tcp_input+0x22c>)
 8008d66:	22b2      	movs	r2, #178	; 0xb2
 8008d68:	495d      	ldr	r1, [pc, #372]	; (8008ee0 <tcp_input+0x230>)
 8008d6a:	485e      	ldr	r0, [pc, #376]	; (8008ee4 <tcp_input+0x234>)
 8008d6c:	f006 fa4e 	bl	800f20c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8008d70:	f06f 0113 	mvn.w	r1, #19
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7fe f8e1 	bl	8006f3c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	895a      	ldrh	r2, [r3, #10]
 8008d7e:	4b56      	ldr	r3, [pc, #344]	; (8008ed8 <tcp_input+0x228>)
 8008d80:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008d82:	4b53      	ldr	r3, [pc, #332]	; (8008ed0 <tcp_input+0x220>)
 8008d84:	881a      	ldrh	r2, [r3, #0]
 8008d86:	4b54      	ldr	r3, [pc, #336]	; (8008ed8 <tcp_input+0x228>)
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008d8e:	4b52      	ldr	r3, [pc, #328]	; (8008ed8 <tcp_input+0x228>)
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	425b      	negs	r3, r3
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	b21b      	sxth	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7fe f8ce 	bl	8006f3c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	895b      	ldrh	r3, [r3, #10]
 8008da6:	8a3a      	ldrh	r2, [r7, #16]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	f200 831f 	bhi.w	80093ec <tcp_input+0x73c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	4a47      	ldr	r2, [pc, #284]	; (8008ed4 <tcp_input+0x224>)
 8008db6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	8a3b      	ldrh	r3, [r7, #16]
 8008dbe:	425b      	negs	r3, r3
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	b21b      	sxth	r3, r3
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe f8b8 	bl	8006f3c <pbuf_header>
    p->tot_len -= opt2len;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	891a      	ldrh	r2, [r3, #8]
 8008dd0:	8a3b      	ldrh	r3, [r7, #16]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	b29a      	uxth	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	895b      	ldrh	r3, [r3, #10]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <tcp_input+0x13e>
 8008de2:	4b3e      	ldr	r3, [pc, #248]	; (8008edc <tcp_input+0x22c>)
 8008de4:	22cf      	movs	r2, #207	; 0xcf
 8008de6:	4940      	ldr	r1, [pc, #256]	; (8008ee8 <tcp_input+0x238>)
 8008de8:	483e      	ldr	r0, [pc, #248]	; (8008ee4 <tcp_input+0x234>)
 8008dea:	f006 fa0f 	bl	800f20c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	891a      	ldrh	r2, [r3, #8]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	891b      	ldrh	r3, [r3, #8]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d005      	beq.n	8008e08 <tcp_input+0x158>
 8008dfc:	4b37      	ldr	r3, [pc, #220]	; (8008edc <tcp_input+0x22c>)
 8008dfe:	22d0      	movs	r2, #208	; 0xd0
 8008e00:	493a      	ldr	r1, [pc, #232]	; (8008eec <tcp_input+0x23c>)
 8008e02:	4838      	ldr	r0, [pc, #224]	; (8008ee4 <tcp_input+0x234>)
 8008e04:	f006 fa02 	bl	800f20c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008e08:	4b2f      	ldr	r3, [pc, #188]	; (8008ec8 <tcp_input+0x218>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	4a2d      	ldr	r2, [pc, #180]	; (8008ec8 <tcp_input+0x218>)
 8008e12:	6814      	ldr	r4, [r2, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7fc ff1f 	bl	8005c58 <lwip_htons>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008e1e:	4b2a      	ldr	r3, [pc, #168]	; (8008ec8 <tcp_input+0x218>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	4a28      	ldr	r2, [pc, #160]	; (8008ec8 <tcp_input+0x218>)
 8008e28:	6814      	ldr	r4, [r2, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fc ff14 	bl	8005c58 <lwip_htons>
 8008e30:	4603      	mov	r3, r0
 8008e32:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008e34:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <tcp_input+0x218>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	4a23      	ldr	r2, [pc, #140]	; (8008ec8 <tcp_input+0x218>)
 8008e3c:	6814      	ldr	r4, [r2, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fc ff17 	bl	8005c72 <lwip_htonl>
 8008e44:	4603      	mov	r3, r0
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	4a29      	ldr	r2, [pc, #164]	; (8008ef0 <tcp_input+0x240>)
 8008e4c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008e4e:	4b1e      	ldr	r3, [pc, #120]	; (8008ec8 <tcp_input+0x218>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	4a1c      	ldr	r2, [pc, #112]	; (8008ec8 <tcp_input+0x218>)
 8008e56:	6814      	ldr	r4, [r2, #0]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fc ff0a 	bl	8005c72 <lwip_htonl>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	60a3      	str	r3, [r4, #8]
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	4a23      	ldr	r2, [pc, #140]	; (8008ef4 <tcp_input+0x244>)
 8008e66:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008e68:	4b17      	ldr	r3, [pc, #92]	; (8008ec8 <tcp_input+0x218>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	89db      	ldrh	r3, [r3, #14]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <tcp_input+0x218>)
 8008e72:	6814      	ldr	r4, [r2, #0]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fc feef 	bl	8005c58 <lwip_htons>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008e7e:	4b12      	ldr	r3, [pc, #72]	; (8008ec8 <tcp_input+0x218>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	899b      	ldrh	r3, [r3, #12]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fc fee6 	bl	8005c58 <lwip_htons>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	4b18      	ldr	r3, [pc, #96]	; (8008ef8 <tcp_input+0x248>)
 8008e98:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	891a      	ldrh	r2, [r3, #8]
 8008e9e:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <tcp_input+0x248>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	bf14      	ite	ne
 8008eaa:	2301      	movne	r3, #1
 8008eac:	2300      	moveq	r3, #0
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	b29a      	uxth	r2, r3
 8008eb6:	4b11      	ldr	r3, [pc, #68]	; (8008efc <tcp_input+0x24c>)
 8008eb8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ebe:	4b10      	ldr	r3, [pc, #64]	; (8008f00 <tcp_input+0x250>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	61fb      	str	r3, [r7, #28]
 8008ec4:	e082      	b.n	8008fcc <tcp_input+0x31c>
 8008ec6:	bf00      	nop
 8008ec8:	20000528 	.word	0x20000528
 8008ecc:	20003c1c 	.word	0x20003c1c
 8008ed0:	2000052c 	.word	0x2000052c
 8008ed4:	20000530 	.word	0x20000530
 8008ed8:	2000052e 	.word	0x2000052e
 8008edc:	08011268 	.word	0x08011268
 8008ee0:	0801129c 	.word	0x0801129c
 8008ee4:	080112ac 	.word	0x080112ac
 8008ee8:	080112d4 	.word	0x080112d4
 8008eec:	080112e0 	.word	0x080112e0
 8008ef0:	20000538 	.word	0x20000538
 8008ef4:	2000053c 	.word	0x2000053c
 8008ef8:	20000544 	.word	0x20000544
 8008efc:	20000542 	.word	0x20000542
 8008f00:	2000714c 	.word	0x2000714c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	7d1b      	ldrb	r3, [r3, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d105      	bne.n	8008f18 <tcp_input+0x268>
 8008f0c:	4b8f      	ldr	r3, [pc, #572]	; (800914c <tcp_input+0x49c>)
 8008f0e:	22e2      	movs	r2, #226	; 0xe2
 8008f10:	498f      	ldr	r1, [pc, #572]	; (8009150 <tcp_input+0x4a0>)
 8008f12:	4890      	ldr	r0, [pc, #576]	; (8009154 <tcp_input+0x4a4>)
 8008f14:	f006 f97a 	bl	800f20c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	7d1b      	ldrb	r3, [r3, #20]
 8008f1c:	2b0a      	cmp	r3, #10
 8008f1e:	d105      	bne.n	8008f2c <tcp_input+0x27c>
 8008f20:	4b8a      	ldr	r3, [pc, #552]	; (800914c <tcp_input+0x49c>)
 8008f22:	22e3      	movs	r2, #227	; 0xe3
 8008f24:	498c      	ldr	r1, [pc, #560]	; (8009158 <tcp_input+0x4a8>)
 8008f26:	488b      	ldr	r0, [pc, #556]	; (8009154 <tcp_input+0x4a4>)
 8008f28:	f006 f970 	bl	800f20c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	7d1b      	ldrb	r3, [r3, #20]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d105      	bne.n	8008f40 <tcp_input+0x290>
 8008f34:	4b85      	ldr	r3, [pc, #532]	; (800914c <tcp_input+0x49c>)
 8008f36:	22e4      	movs	r2, #228	; 0xe4
 8008f38:	4988      	ldr	r1, [pc, #544]	; (800915c <tcp_input+0x4ac>)
 8008f3a:	4886      	ldr	r0, [pc, #536]	; (8009154 <tcp_input+0x4a4>)
 8008f3c:	f006 f966 	bl	800f20c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	8b1a      	ldrh	r2, [r3, #24]
 8008f44:	4b86      	ldr	r3, [pc, #536]	; (8009160 <tcp_input+0x4b0>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d138      	bne.n	8008fc2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	8ada      	ldrh	r2, [r3, #22]
 8008f54:	4b82      	ldr	r3, [pc, #520]	; (8009160 <tcp_input+0x4b0>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	885b      	ldrh	r3, [r3, #2]
 8008f5a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d130      	bne.n	8008fc2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	4b7f      	ldr	r3, [pc, #508]	; (8009164 <tcp_input+0x4b4>)
 8008f66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d12a      	bne.n	8008fc2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	4b7c      	ldr	r3, [pc, #496]	; (8009164 <tcp_input+0x4b4>)
 8008f72:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d124      	bne.n	8008fc2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d105      	bne.n	8008f8e <tcp_input+0x2de>
 8008f82:	4b72      	ldr	r3, [pc, #456]	; (800914c <tcp_input+0x49c>)
 8008f84:	22ec      	movs	r2, #236	; 0xec
 8008f86:	4978      	ldr	r1, [pc, #480]	; (8009168 <tcp_input+0x4b8>)
 8008f88:	4872      	ldr	r0, [pc, #456]	; (8009154 <tcp_input+0x4a4>)
 8008f8a:	f006 f93f 	bl	800f20c <iprintf>
      if (prev != NULL) {
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00a      	beq.n	8008faa <tcp_input+0x2fa>
        prev->next = pcb->next;
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008f9c:	4b73      	ldr	r3, [pc, #460]	; (800916c <tcp_input+0x4bc>)
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008fa4:	4a71      	ldr	r2, [pc, #452]	; (800916c <tcp_input+0x4bc>)
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d10f      	bne.n	8008fd4 <tcp_input+0x324>
 8008fb4:	4b65      	ldr	r3, [pc, #404]	; (800914c <tcp_input+0x49c>)
 8008fb6:	22f4      	movs	r2, #244	; 0xf4
 8008fb8:	496d      	ldr	r1, [pc, #436]	; (8009170 <tcp_input+0x4c0>)
 8008fba:	4866      	ldr	r0, [pc, #408]	; (8009154 <tcp_input+0x4a4>)
 8008fbc:	f006 f926 	bl	800f20c <iprintf>
      break;
 8008fc0:	e008      	b.n	8008fd4 <tcp_input+0x324>
    }
    prev = pcb;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	61fb      	str	r3, [r7, #28]
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d198      	bne.n	8008f04 <tcp_input+0x254>
 8008fd2:	e000      	b.n	8008fd6 <tcp_input+0x326>
      break;
 8008fd4:	bf00      	nop
  }

  if (pcb == NULL) {
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d173      	bne.n	80090c4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fdc:	4b65      	ldr	r3, [pc, #404]	; (8009174 <tcp_input+0x4c4>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	e02f      	b.n	8009044 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	7d1b      	ldrb	r3, [r3, #20]
 8008fe8:	2b0a      	cmp	r3, #10
 8008fea:	d005      	beq.n	8008ff8 <tcp_input+0x348>
 8008fec:	4b57      	ldr	r3, [pc, #348]	; (800914c <tcp_input+0x49c>)
 8008fee:	22fe      	movs	r2, #254	; 0xfe
 8008ff0:	4961      	ldr	r1, [pc, #388]	; (8009178 <tcp_input+0x4c8>)
 8008ff2:	4858      	ldr	r0, [pc, #352]	; (8009154 <tcp_input+0x4a4>)
 8008ff4:	f006 f90a 	bl	800f20c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	8b1a      	ldrh	r2, [r3, #24]
 8008ffc:	4b58      	ldr	r3, [pc, #352]	; (8009160 <tcp_input+0x4b0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	b29b      	uxth	r3, r3
 8009004:	429a      	cmp	r2, r3
 8009006:	d11a      	bne.n	800903e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	8ada      	ldrh	r2, [r3, #22]
 800900c:	4b54      	ldr	r3, [pc, #336]	; (8009160 <tcp_input+0x4b0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009014:	429a      	cmp	r2, r3
 8009016:	d112      	bne.n	800903e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b51      	ldr	r3, [pc, #324]	; (8009164 <tcp_input+0x4b4>)
 800901e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009020:	429a      	cmp	r2, r3
 8009022:	d10c      	bne.n	800903e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	4b4e      	ldr	r3, [pc, #312]	; (8009164 <tcp_input+0x4b4>)
 800902a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800902c:	429a      	cmp	r2, r3
 800902e:	d106      	bne.n	800903e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8009030:	69f8      	ldr	r0, [r7, #28]
 8009032:	f000 fb15 	bl	8009660 <tcp_timewait_input>
        pbuf_free(p);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7fd ffa4 	bl	8006f84 <pbuf_free>
        return;
 800903c:	e1dc      	b.n	80093f8 <tcp_input+0x748>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	61fb      	str	r3, [r7, #28]
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1cc      	bne.n	8008fe4 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800904e:	4b4b      	ldr	r3, [pc, #300]	; (800917c <tcp_input+0x4cc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e019      	b.n	800908a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	8ada      	ldrh	r2, [r3, #22]
 800905a:	4b41      	ldr	r3, [pc, #260]	; (8009160 <tcp_input+0x4b0>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	b29b      	uxth	r3, r3
 8009062:	429a      	cmp	r2, r3
 8009064:	d10c      	bne.n	8009080 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	4b3e      	ldr	r3, [pc, #248]	; (8009164 <tcp_input+0x4b4>)
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	429a      	cmp	r2, r3
 8009070:	d00f      	beq.n	8009092 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00d      	beq.n	8009094 <tcp_input+0x3e4>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d009      	beq.n	8009094 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1e2      	bne.n	8009056 <tcp_input+0x3a6>
 8009090:	e000      	b.n	8009094 <tcp_input+0x3e4>
            break;
 8009092:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d014      	beq.n	80090c4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	68da      	ldr	r2, [r3, #12]
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80090a8:	4b34      	ldr	r3, [pc, #208]	; (800917c <tcp_input+0x4cc>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80090b0:	4a32      	ldr	r2, [pc, #200]	; (800917c <tcp_input+0x4cc>)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80090b6:	6978      	ldr	r0, [r7, #20]
 80090b8:	f000 f9f2 	bl	80094a0 <tcp_listen_input>
      pbuf_free(p);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7fd ff61 	bl	8006f84 <pbuf_free>
      return;
 80090c2:	e199      	b.n	80093f8 <tcp_input+0x748>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8164 	beq.w	8009394 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80090cc:	4b2c      	ldr	r3, [pc, #176]	; (8009180 <tcp_input+0x4d0>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	891a      	ldrh	r2, [r3, #8]
 80090d6:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <tcp_input+0x4d0>)
 80090d8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80090da:	4a29      	ldr	r2, [pc, #164]	; (8009180 <tcp_input+0x4d0>)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80090e0:	4b1f      	ldr	r3, [pc, #124]	; (8009160 <tcp_input+0x4b0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a26      	ldr	r2, [pc, #152]	; (8009180 <tcp_input+0x4d0>)
 80090e6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80090e8:	4b26      	ldr	r3, [pc, #152]	; (8009184 <tcp_input+0x4d4>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80090ee:	4b26      	ldr	r3, [pc, #152]	; (8009188 <tcp_input+0x4d8>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80090f4:	4b25      	ldr	r3, [pc, #148]	; (800918c <tcp_input+0x4dc>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80090fa:	4b25      	ldr	r3, [pc, #148]	; (8009190 <tcp_input+0x4e0>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f003 0308 	and.w	r3, r3, #8
 8009102:	2b00      	cmp	r3, #0
 8009104:	d006      	beq.n	8009114 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7b5b      	ldrb	r3, [r3, #13]
 800910a:	f043 0301 	orr.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009118:	2b00      	cmp	r3, #0
 800911a:	d03d      	beq.n	8009198 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800911c:	69f8      	ldr	r0, [r7, #28]
 800911e:	f7ff f991 	bl	8008444 <tcp_process_refused_data>
 8009122:	4603      	mov	r3, r0
 8009124:	f113 0f0d 	cmn.w	r3, #13
 8009128:	d007      	beq.n	800913a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800912e:	2b00      	cmp	r3, #0
 8009130:	d032      	beq.n	8009198 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <tcp_input+0x4e4>)
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d02e      	beq.n	8009198 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913e:	2b00      	cmp	r3, #0
 8009140:	f040 8108 	bne.w	8009354 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009144:	69f8      	ldr	r0, [r7, #28]
 8009146:	f002 fe3b 	bl	800bdc0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800914a:	e103      	b.n	8009354 <tcp_input+0x6a4>
 800914c:	08011268 	.word	0x08011268
 8009150:	08011300 	.word	0x08011300
 8009154:	080112ac 	.word	0x080112ac
 8009158:	08011328 	.word	0x08011328
 800915c:	08011354 	.word	0x08011354
 8009160:	20000528 	.word	0x20000528
 8009164:	20003c1c 	.word	0x20003c1c
 8009168:	0801137c 	.word	0x0801137c
 800916c:	2000714c 	.word	0x2000714c
 8009170:	080113a8 	.word	0x080113a8
 8009174:	2000715c 	.word	0x2000715c
 8009178:	080113d4 	.word	0x080113d4
 800917c:	20007154 	.word	0x20007154
 8009180:	20000518 	.word	0x20000518
 8009184:	20000548 	.word	0x20000548
 8009188:	20000545 	.word	0x20000545
 800918c:	20000540 	.word	0x20000540
 8009190:	20000544 	.word	0x20000544
 8009194:	20000542 	.word	0x20000542
      }
    }
    tcp_input_pcb = pcb;
 8009198:	4a99      	ldr	r2, [pc, #612]	; (8009400 <tcp_input+0x750>)
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800919e:	69f8      	ldr	r0, [r7, #28]
 80091a0:	f000 fac6 	bl	8009730 <tcp_process>
 80091a4:	4603      	mov	r3, r0
 80091a6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80091a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091ac:	f113 0f0d 	cmn.w	r3, #13
 80091b0:	f000 80d2 	beq.w	8009358 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 80091b4:	4b93      	ldr	r3, [pc, #588]	; (8009404 <tcp_input+0x754>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f003 0308 	and.w	r3, r3, #8
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d016      	beq.n	80091ee <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d008      	beq.n	80091dc <tcp_input+0x52c>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d0:	69fa      	ldr	r2, [r7, #28]
 80091d2:	6912      	ldr	r2, [r2, #16]
 80091d4:	f06f 010d 	mvn.w	r1, #13
 80091d8:	4610      	mov	r0, r2
 80091da:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80091dc:	69f9      	ldr	r1, [r7, #28]
 80091de:	488a      	ldr	r0, [pc, #552]	; (8009408 <tcp_input+0x758>)
 80091e0:	f7ff fc4e 	bl	8008a80 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80091e4:	69f9      	ldr	r1, [r7, #28]
 80091e6:	2001      	movs	r0, #1
 80091e8:	f7fd f994 	bl	8006514 <memp_free>
 80091ec:	e0bf      	b.n	800936e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80091f2:	4b86      	ldr	r3, [pc, #536]	; (800940c <tcp_input+0x75c>)
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d01b      	beq.n	8009232 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80091fa:	4b84      	ldr	r3, [pc, #528]	; (800940c <tcp_input+0x75c>)
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009204:	2b00      	cmp	r3, #0
 8009206:	d009      	beq.n	800921c <tcp_input+0x56c>
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	6910      	ldr	r0, [r2, #16]
 8009210:	89fa      	ldrh	r2, [r7, #14]
 8009212:	69f9      	ldr	r1, [r7, #28]
 8009214:	4798      	blx	r3
 8009216:	4603      	mov	r3, r0
 8009218:	74fb      	strb	r3, [r7, #19]
 800921a:	e001      	b.n	8009220 <tcp_input+0x570>
 800921c:	2300      	movs	r3, #0
 800921e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009220:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009224:	f113 0f0d 	cmn.w	r3, #13
 8009228:	f000 8098 	beq.w	800935c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800922c:	4b77      	ldr	r3, [pc, #476]	; (800940c <tcp_input+0x75c>)
 800922e:	2200      	movs	r2, #0
 8009230:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009232:	69f8      	ldr	r0, [r7, #28]
 8009234:	f000 f902 	bl	800943c <tcp_input_delayed_close>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	f040 8090 	bne.w	8009360 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009240:	4b73      	ldr	r3, [pc, #460]	; (8009410 <tcp_input+0x760>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d041      	beq.n	80092cc <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924c:	2b00      	cmp	r3, #0
 800924e:	d006      	beq.n	800925e <tcp_input+0x5ae>
 8009250:	4b70      	ldr	r3, [pc, #448]	; (8009414 <tcp_input+0x764>)
 8009252:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009256:	4970      	ldr	r1, [pc, #448]	; (8009418 <tcp_input+0x768>)
 8009258:	4870      	ldr	r0, [pc, #448]	; (800941c <tcp_input+0x76c>)
 800925a:	f005 ffd7 	bl	800f20c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	7e9b      	ldrb	r3, [r3, #26]
 8009262:	f003 0310 	and.w	r3, r3, #16
 8009266:	2b00      	cmp	r3, #0
 8009268:	d008      	beq.n	800927c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800926a:	4b69      	ldr	r3, [pc, #420]	; (8009410 <tcp_input+0x760>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4618      	mov	r0, r3
 8009270:	f7fd fe88 	bl	8006f84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009274:	69f8      	ldr	r0, [r7, #28]
 8009276:	f7fe fb7b 	bl	8007970 <tcp_abort>
            goto aborted;
 800927a:	e078      	b.n	800936e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00c      	beq.n	80092a0 <tcp_input+0x5f0>
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	6918      	ldr	r0, [r3, #16]
 8009290:	4b5f      	ldr	r3, [pc, #380]	; (8009410 <tcp_input+0x760>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	2300      	movs	r3, #0
 8009296:	69f9      	ldr	r1, [r7, #28]
 8009298:	47a0      	blx	r4
 800929a:	4603      	mov	r3, r0
 800929c:	74fb      	strb	r3, [r7, #19]
 800929e:	e008      	b.n	80092b2 <tcp_input+0x602>
 80092a0:	4b5b      	ldr	r3, [pc, #364]	; (8009410 <tcp_input+0x760>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2300      	movs	r3, #0
 80092a6:	69f9      	ldr	r1, [r7, #28]
 80092a8:	2000      	movs	r0, #0
 80092aa:	f7ff f98b 	bl	80085c4 <tcp_recv_null>
 80092ae:	4603      	mov	r3, r0
 80092b0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80092b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092b6:	f113 0f0d 	cmn.w	r3, #13
 80092ba:	d053      	beq.n	8009364 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80092bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80092c4:	4b52      	ldr	r3, [pc, #328]	; (8009410 <tcp_input+0x760>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80092cc:	4b4d      	ldr	r3, [pc, #308]	; (8009404 <tcp_input+0x754>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 0320 	and.w	r3, r3, #32
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d030      	beq.n	800933a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e4:	7b5a      	ldrb	r2, [r3, #13]
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ea:	f042 0220 	orr.w	r2, r2, #32
 80092ee:	b2d2      	uxtb	r2, r2
 80092f0:	735a      	strb	r2, [r3, #13]
 80092f2:	e022      	b.n	800933a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80092fc:	d005      	beq.n	800930a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009302:	3301      	adds	r3, #1
 8009304:	b29a      	uxth	r2, r3
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <tcp_input+0x67c>
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	6918      	ldr	r0, [r3, #16]
 800931e:	2300      	movs	r3, #0
 8009320:	2200      	movs	r2, #0
 8009322:	69f9      	ldr	r1, [r7, #28]
 8009324:	47a0      	blx	r4
 8009326:	4603      	mov	r3, r0
 8009328:	74fb      	strb	r3, [r7, #19]
 800932a:	e001      	b.n	8009330 <tcp_input+0x680>
 800932c:	2300      	movs	r3, #0
 800932e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009334:	f113 0f0d 	cmn.w	r3, #13
 8009338:	d016      	beq.n	8009368 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800933a:	4b31      	ldr	r3, [pc, #196]	; (8009400 <tcp_input+0x750>)
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009340:	69f8      	ldr	r0, [r7, #28]
 8009342:	f000 f87b 	bl	800943c <tcp_input_delayed_close>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10f      	bne.n	800936c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800934c:	69f8      	ldr	r0, [r7, #28]
 800934e:	f002 fd93 	bl	800be78 <tcp_output>
 8009352:	e00c      	b.n	800936e <tcp_input+0x6be>
        goto aborted;
 8009354:	bf00      	nop
 8009356:	e00a      	b.n	800936e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009358:	bf00      	nop
 800935a:	e008      	b.n	800936e <tcp_input+0x6be>
              goto aborted;
 800935c:	bf00      	nop
 800935e:	e006      	b.n	800936e <tcp_input+0x6be>
          goto aborted;
 8009360:	bf00      	nop
 8009362:	e004      	b.n	800936e <tcp_input+0x6be>
            goto aborted;
 8009364:	bf00      	nop
 8009366:	e002      	b.n	800936e <tcp_input+0x6be>
              goto aborted;
 8009368:	bf00      	nop
 800936a:	e000      	b.n	800936e <tcp_input+0x6be>
          goto aborted;
 800936c:	bf00      	nop
    tcp_input_pcb = NULL;
 800936e:	4b24      	ldr	r3, [pc, #144]	; (8009400 <tcp_input+0x750>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009374:	4b26      	ldr	r3, [pc, #152]	; (8009410 <tcp_input+0x760>)
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800937a:	4b29      	ldr	r3, [pc, #164]	; (8009420 <tcp_input+0x770>)
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d039      	beq.n	80093f6 <tcp_input+0x746>
    {
      pbuf_free(inseg.p);
 8009382:	4b27      	ldr	r3, [pc, #156]	; (8009420 <tcp_input+0x770>)
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	4618      	mov	r0, r3
 8009388:	f7fd fdfc 	bl	8006f84 <pbuf_free>
      inseg.p = NULL;
 800938c:	4b24      	ldr	r3, [pc, #144]	; (8009420 <tcp_input+0x770>)
 800938e:	2200      	movs	r2, #0
 8009390:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009392:	e030      	b.n	80093f6 <tcp_input+0x746>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009394:	4b23      	ldr	r3, [pc, #140]	; (8009424 <tcp_input+0x774>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	b29b      	uxth	r3, r3
 800939c:	4618      	mov	r0, r3
 800939e:	f7fc fc5b 	bl	8005c58 <lwip_htons>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d115      	bne.n	80093d8 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80093ac:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <tcp_input+0x778>)
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	4b1e      	ldr	r3, [pc, #120]	; (800942c <tcp_input+0x77c>)
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <tcp_input+0x780>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093bc:	4b19      	ldr	r3, [pc, #100]	; (8009424 <tcp_input+0x774>)
 80093be:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093c4:	4a17      	ldr	r2, [pc, #92]	; (8009424 <tcp_input+0x774>)
 80093c6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80093c8:	8812      	ldrh	r2, [r2, #0]
 80093ca:	b292      	uxth	r2, r2
 80093cc:	9201      	str	r2, [sp, #4]
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	4b18      	ldr	r3, [pc, #96]	; (8009434 <tcp_input+0x784>)
 80093d2:	4a19      	ldr	r2, [pc, #100]	; (8009438 <tcp_input+0x788>)
 80093d4:	f002 ffd4 	bl	800c380 <tcp_rst>
    pbuf_free(p);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7fd fdd3 	bl	8006f84 <pbuf_free>
  return;
 80093de:	e00a      	b.n	80093f6 <tcp_input+0x746>
    goto dropped;
 80093e0:	bf00      	nop
 80093e2:	e004      	b.n	80093ee <tcp_input+0x73e>
    goto dropped;
 80093e4:	bf00      	nop
 80093e6:	e002      	b.n	80093ee <tcp_input+0x73e>
    goto dropped;
 80093e8:	bf00      	nop
 80093ea:	e000      	b.n	80093ee <tcp_input+0x73e>
      goto dropped;
 80093ec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7fd fdc8 	bl	8006f84 <pbuf_free>
 80093f4:	e000      	b.n	80093f8 <tcp_input+0x748>
  return;
 80093f6:	bf00      	nop
}
 80093f8:	3724      	adds	r7, #36	; 0x24
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd90      	pop	{r4, r7, pc}
 80093fe:	bf00      	nop
 8009400:	20007160 	.word	0x20007160
 8009404:	20000545 	.word	0x20000545
 8009408:	2000714c 	.word	0x2000714c
 800940c:	20000540 	.word	0x20000540
 8009410:	20000548 	.word	0x20000548
 8009414:	08011268 	.word	0x08011268
 8009418:	08011404 	.word	0x08011404
 800941c:	080112ac 	.word	0x080112ac
 8009420:	20000518 	.word	0x20000518
 8009424:	20000528 	.word	0x20000528
 8009428:	2000053c 	.word	0x2000053c
 800942c:	20000542 	.word	0x20000542
 8009430:	20000538 	.word	0x20000538
 8009434:	20003c2c 	.word	0x20003c2c
 8009438:	20003c30 	.word	0x20003c30

0800943c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8009444:	4b14      	ldr	r3, [pc, #80]	; (8009498 <tcp_input_delayed_close+0x5c>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01d      	beq.n	800948c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	7e9b      	ldrb	r3, [r3, #26]
 8009454:	f003 0310 	and.w	r3, r3, #16
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10d      	bne.n	8009478 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d008      	beq.n	8009478 <tcp_input_delayed_close+0x3c>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6912      	ldr	r2, [r2, #16]
 8009470:	f06f 010e 	mvn.w	r1, #14
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4808      	ldr	r0, [pc, #32]	; (800949c <tcp_input_delayed_close+0x60>)
 800947c:	f7ff fb00 	bl	8008a80 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	2001      	movs	r0, #1
 8009484:	f7fd f846 	bl	8006514 <memp_free>
    return 1;
 8009488:	2301      	movs	r3, #1
 800948a:	e000      	b.n	800948e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20000545 	.word	0x20000545
 800949c:	2000714c 	.word	0x2000714c

080094a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af02      	add	r7, sp, #8
 80094a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80094a8:	4b63      	ldr	r3, [pc, #396]	; (8009638 <tcp_listen_input+0x198>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f040 80bb 	bne.w	800962c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80094b6:	4b60      	ldr	r3, [pc, #384]	; (8009638 <tcp_listen_input+0x198>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d016      	beq.n	80094f0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80094c2:	4b5e      	ldr	r3, [pc, #376]	; (800963c <tcp_listen_input+0x19c>)
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	4b5e      	ldr	r3, [pc, #376]	; (8009640 <tcp_listen_input+0x1a0>)
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	4b5d      	ldr	r3, [pc, #372]	; (8009644 <tcp_listen_input+0x1a4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094d2:	4b5d      	ldr	r3, [pc, #372]	; (8009648 <tcp_listen_input+0x1a8>)
 80094d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80094d6:	885b      	ldrh	r3, [r3, #2]
 80094d8:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094da:	4a5b      	ldr	r2, [pc, #364]	; (8009648 <tcp_listen_input+0x1a8>)
 80094dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80094de:	8812      	ldrh	r2, [r2, #0]
 80094e0:	b292      	uxth	r2, r2
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	4b59      	ldr	r3, [pc, #356]	; (800964c <tcp_listen_input+0x1ac>)
 80094e8:	4a59      	ldr	r2, [pc, #356]	; (8009650 <tcp_listen_input+0x1b0>)
 80094ea:	f002 ff49 	bl	800c380 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80094ee:	e09f      	b.n	8009630 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 80094f0:	4b51      	ldr	r3, [pc, #324]	; (8009638 <tcp_listen_input+0x198>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8099 	beq.w	8009630 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7d5b      	ldrb	r3, [r3, #21]
 8009502:	4618      	mov	r0, r3
 8009504:	f7ff f93c 	bl	8008780 <tcp_alloc>
 8009508:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d111      	bne.n	8009534 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	699b      	ldr	r3, [r3, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00a      	beq.n	800952e <tcp_listen_input+0x8e>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6910      	ldr	r0, [r2, #16]
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	2100      	movs	r1, #0
 8009526:	4798      	blx	r3
 8009528:	4603      	mov	r3, r0
 800952a:	73bb      	strb	r3, [r7, #14]
      return;
 800952c:	e081      	b.n	8009632 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800952e:	23f0      	movs	r3, #240	; 0xf0
 8009530:	73bb      	strb	r3, [r7, #14]
      return;
 8009532:	e07e      	b.n	8009632 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009534:	4b47      	ldr	r3, [pc, #284]	; (8009654 <tcp_listen_input+0x1b4>)
 8009536:	695a      	ldr	r2, [r3, #20]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800953c:	4b45      	ldr	r3, [pc, #276]	; (8009654 <tcp_listen_input+0x1b4>)
 800953e:	691a      	ldr	r2, [r3, #16]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	8ada      	ldrh	r2, [r3, #22]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800954c:	4b3e      	ldr	r3, [pc, #248]	; (8009648 <tcp_listen_input+0x1a8>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	b29a      	uxth	r2, r3
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2203      	movs	r2, #3
 800955c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800955e:	4b39      	ldr	r3, [pc, #228]	; (8009644 <tcp_listen_input+0x1a4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009570:	6978      	ldr	r0, [r7, #20]
 8009572:	f7ff fb01 	bl	8008b78 <tcp_next_iss>
 8009576:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009590:	4b2c      	ldr	r3, [pc, #176]	; (8009644 <tcp_listen_input+0x1a4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	1e5a      	subs	r2, r3, #1
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	7a1b      	ldrb	r3, [r3, #8]
 80095ac:	f003 030c 	and.w	r3, r3, #12
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80095b6:	4b28      	ldr	r3, [pc, #160]	; (8009658 <tcp_listen_input+0x1b8>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	60da      	str	r2, [r3, #12]
 80095be:	4a26      	ldr	r2, [pc, #152]	; (8009658 <tcp_listen_input+0x1b8>)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	6013      	str	r3, [r2, #0]
 80095c4:	f003 f924 	bl	800c810 <tcp_timer_needed>
 80095c8:	4b24      	ldr	r3, [pc, #144]	; (800965c <tcp_listen_input+0x1bc>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80095ce:	6978      	ldr	r0, [r7, #20]
 80095d0:	f001 fd10 	bl	800aff4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80095d4:	4b1c      	ldr	r3, [pc, #112]	; (8009648 <tcp_listen_input+0x1a8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	89db      	ldrh	r3, [r3, #14]
 80095da:	b29a      	uxth	r2, r3
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	3304      	adds	r3, #4
 80095f6:	4619      	mov	r1, r3
 80095f8:	4610      	mov	r0, r2
 80095fa:	f7ff fad3 	bl	8008ba4 <tcp_eff_send_mss_impl>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009606:	2112      	movs	r1, #18
 8009608:	6978      	ldr	r0, [r7, #20]
 800960a:	f002 fadd 	bl	800bbc8 <tcp_enqueue_flags>
 800960e:	4603      	mov	r3, r0
 8009610:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800961a:	2100      	movs	r1, #0
 800961c:	6978      	ldr	r0, [r7, #20]
 800961e:	f7fe f8f5 	bl	800780c <tcp_abandon>
      return;
 8009622:	e006      	b.n	8009632 <tcp_listen_input+0x192>
    tcp_output(npcb);
 8009624:	6978      	ldr	r0, [r7, #20]
 8009626:	f002 fc27 	bl	800be78 <tcp_output>
  return;
 800962a:	e001      	b.n	8009630 <tcp_listen_input+0x190>
    return;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <tcp_listen_input+0x192>
  return;
 8009630:	bf00      	nop
}
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000544 	.word	0x20000544
 800963c:	2000053c 	.word	0x2000053c
 8009640:	20000542 	.word	0x20000542
 8009644:	20000538 	.word	0x20000538
 8009648:	20000528 	.word	0x20000528
 800964c:	20003c2c 	.word	0x20003c2c
 8009650:	20003c30 	.word	0x20003c30
 8009654:	20003c1c 	.word	0x20003c1c
 8009658:	2000714c 	.word	0x2000714c
 800965c:	20007148 	.word	0x20007148

08009660 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af02      	add	r7, sp, #8
 8009666:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009668:	4b29      	ldr	r3, [pc, #164]	; (8009710 <tcp_timewait_input+0xb0>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d146      	bne.n	8009702 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009674:	4b26      	ldr	r3, [pc, #152]	; (8009710 <tcp_timewait_input+0xb0>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d027      	beq.n	80096d0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009680:	4b24      	ldr	r3, [pc, #144]	; (8009714 <tcp_timewait_input+0xb4>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	db2a      	blt.n	80096e4 <tcp_timewait_input+0x84>
 800968e:	4b21      	ldr	r3, [pc, #132]	; (8009714 <tcp_timewait_input+0xb4>)
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	6879      	ldr	r1, [r7, #4]
 8009698:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800969a:	440b      	add	r3, r1
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	dc20      	bgt.n	80096e4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <tcp_timewait_input+0xb8>)
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	4b1d      	ldr	r3, [pc, #116]	; (800971c <tcp_timewait_input+0xbc>)
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	4b19      	ldr	r3, [pc, #100]	; (8009714 <tcp_timewait_input+0xb4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096b2:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <tcp_timewait_input+0xc0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80096b6:	885b      	ldrh	r3, [r3, #2]
 80096b8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096ba:	4a19      	ldr	r2, [pc, #100]	; (8009720 <tcp_timewait_input+0xc0>)
 80096bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80096be:	8812      	ldrh	r2, [r2, #0]
 80096c0:	b292      	uxth	r2, r2
 80096c2:	9201      	str	r2, [sp, #4]
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	4b17      	ldr	r3, [pc, #92]	; (8009724 <tcp_timewait_input+0xc4>)
 80096c8:	4a17      	ldr	r2, [pc, #92]	; (8009728 <tcp_timewait_input+0xc8>)
 80096ca:	f002 fe59 	bl	800c380 <tcp_rst>
      return;
 80096ce:	e01b      	b.n	8009708 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 80096d0:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <tcp_timewait_input+0xb0>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d003      	beq.n	80096e4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80096dc:	4b13      	ldr	r3, [pc, #76]	; (800972c <tcp_timewait_input+0xcc>)
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80096e4:	4b0d      	ldr	r3, [pc, #52]	; (800971c <tcp_timewait_input+0xbc>)
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00c      	beq.n	8009706 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	7e9b      	ldrb	r3, [r3, #26]
 80096f0:	f043 0302 	orr.w	r3, r3, #2
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f002 fbbc 	bl	800be78 <tcp_output>
  }
  return;
 8009700:	e001      	b.n	8009706 <tcp_timewait_input+0xa6>
    return;
 8009702:	bf00      	nop
 8009704:	e000      	b.n	8009708 <tcp_timewait_input+0xa8>
  return;
 8009706:	bf00      	nop
}
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000544 	.word	0x20000544
 8009714:	20000538 	.word	0x20000538
 8009718:	2000053c 	.word	0x2000053c
 800971c:	20000542 	.word	0x20000542
 8009720:	20000528 	.word	0x20000528
 8009724:	20003c2c 	.word	0x20003c2c
 8009728:	20003c30 	.word	0x20003c30
 800972c:	20007150 	.word	0x20007150

08009730 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08a      	sub	sp, #40	; 0x28
 8009734:	af02      	add	r7, sp, #8
 8009736:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009740:	4ba4      	ldr	r3, [pc, #656]	; (80099d4 <tcp_process+0x2a4>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	d04e      	beq.n	80097ea <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	7d1b      	ldrb	r3, [r3, #20]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d108      	bne.n	8009766 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009758:	4b9f      	ldr	r3, [pc, #636]	; (80099d8 <tcp_process+0x2a8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d123      	bne.n	80097a8 <tcp_process+0x78>
        acceptable = 1;
 8009760:	2301      	movs	r3, #1
 8009762:	76fb      	strb	r3, [r7, #27]
 8009764:	e020      	b.n	80097a8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800976a:	4b9c      	ldr	r3, [pc, #624]	; (80099dc <tcp_process+0x2ac>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	429a      	cmp	r2, r3
 8009770:	d102      	bne.n	8009778 <tcp_process+0x48>
        acceptable = 1;
 8009772:	2301      	movs	r3, #1
 8009774:	76fb      	strb	r3, [r7, #27]
 8009776:	e017      	b.n	80097a8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009778:	4b98      	ldr	r3, [pc, #608]	; (80099dc <tcp_process+0x2ac>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	db10      	blt.n	80097a8 <tcp_process+0x78>
 8009786:	4b95      	ldr	r3, [pc, #596]	; (80099dc <tcp_process+0x2ac>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978e:	6879      	ldr	r1, [r7, #4]
 8009790:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009792:	440b      	add	r3, r1
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	dc06      	bgt.n	80097a8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7e9b      	ldrb	r3, [r3, #26]
 800979e:	f043 0302 	orr.w	r3, r3, #2
 80097a2:	b2da      	uxtb	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80097a8:	7efb      	ldrb	r3, [r7, #27]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01b      	beq.n	80097e6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	7d1b      	ldrb	r3, [r3, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <tcp_process+0x94>
 80097b6:	4b8a      	ldr	r3, [pc, #552]	; (80099e0 <tcp_process+0x2b0>)
 80097b8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80097bc:	4989      	ldr	r1, [pc, #548]	; (80099e4 <tcp_process+0x2b4>)
 80097be:	488a      	ldr	r0, [pc, #552]	; (80099e8 <tcp_process+0x2b8>)
 80097c0:	f005 fd24 	bl	800f20c <iprintf>
      recv_flags |= TF_RESET;
 80097c4:	4b89      	ldr	r3, [pc, #548]	; (80099ec <tcp_process+0x2bc>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f043 0308 	orr.w	r3, r3, #8
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	4b87      	ldr	r3, [pc, #540]	; (80099ec <tcp_process+0x2bc>)
 80097d0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7e9b      	ldrb	r3, [r3, #26]
 80097d6:	f023 0301 	bic.w	r3, r3, #1
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80097e0:	f06f 030d 	mvn.w	r3, #13
 80097e4:	e34d      	b.n	8009e82 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	e34b      	b.n	8009e82 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80097ea:	4b7a      	ldr	r3, [pc, #488]	; (80099d4 <tcp_process+0x2a4>)
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d010      	beq.n	8009818 <tcp_process+0xe8>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	7d1b      	ldrb	r3, [r3, #20]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d00c      	beq.n	8009818 <tcp_process+0xe8>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	7d1b      	ldrb	r3, [r3, #20]
 8009802:	2b03      	cmp	r3, #3
 8009804:	d008      	beq.n	8009818 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	7e9b      	ldrb	r3, [r3, #26]
 800980a:	f043 0302 	orr.w	r3, r3, #2
 800980e:	b2da      	uxtb	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	e334      	b.n	8009e82 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	7e9b      	ldrb	r3, [r3, #26]
 800981c:	f003 0310 	and.w	r3, r3, #16
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009824:	4b72      	ldr	r3, [pc, #456]	; (80099f0 <tcp_process+0x2c0>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 fbdd 	bl	800aff4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7d1b      	ldrb	r3, [r3, #20]
 800983e:	3b02      	subs	r3, #2
 8009840:	2b07      	cmp	r3, #7
 8009842:	f200 830e 	bhi.w	8009e62 <tcp_process+0x732>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <tcp_process+0x11c>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	0800986d 	.word	0x0800986d
 8009850:	08009a65 	.word	0x08009a65
 8009854:	08009bbd 	.word	0x08009bbd
 8009858:	08009be7 	.word	0x08009be7
 800985c:	08009d11 	.word	0x08009d11
 8009860:	08009bbd 	.word	0x08009bbd
 8009864:	08009d9d 	.word	0x08009d9d
 8009868:	08009e2d 	.word	0x08009e2d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800986c:	4b59      	ldr	r3, [pc, #356]	; (80099d4 <tcp_process+0x2a4>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80cb 	beq.w	8009a10 <tcp_process+0x2e0>
 800987a:	4b56      	ldr	r3, [pc, #344]	; (80099d4 <tcp_process+0x2a4>)
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	f003 0302 	and.w	r3, r3, #2
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 80c4 	beq.w	8009a10 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	4b52      	ldr	r3, [pc, #328]	; (80099d8 <tcp_process+0x2a8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	f040 80bc 	bne.w	8009a10 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8009898:	4b50      	ldr	r3, [pc, #320]	; (80099dc <tcp_process+0x2ac>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80098aa:	4b4b      	ldr	r3, [pc, #300]	; (80099d8 <tcp_process+0x2a8>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80098b2:	4b50      	ldr	r3, [pc, #320]	; (80099f4 <tcp_process+0x2c4>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	89db      	ldrh	r3, [r3, #14]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80098cc:	4b43      	ldr	r3, [pc, #268]	; (80099dc <tcp_process+0x2ac>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	1e5a      	subs	r2, r3, #1
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2204      	movs	r2, #4
 80098da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3304      	adds	r3, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	4610      	mov	r0, r2
 80098e8:	f7ff f95c 	bl	8008ba4 <tcp_eff_send_mss_impl>
 80098ec:	4603      	mov	r3, r0
 80098ee:	461a      	mov	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80098fe:	429a      	cmp	r2, r3
 8009900:	bf38      	it	cc
 8009902:	461a      	movcc	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4293      	cmp	r3, r2
 800990c:	bf28      	it	cs
 800990e:	4613      	movcs	r3, r2
 8009910:	b29a      	uxth	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <tcp_process+0x200>
 8009922:	4b2f      	ldr	r3, [pc, #188]	; (80099e0 <tcp_process+0x2b0>)
 8009924:	f240 321a 	movw	r2, #794	; 0x31a
 8009928:	4933      	ldr	r1, [pc, #204]	; (80099f8 <tcp_process+0x2c8>)
 800992a:	482f      	ldr	r0, [pc, #188]	; (80099e8 <tcp_process+0x2b8>)
 800992c:	f005 fc6e 	bl	800f20c <iprintf>
      --pcb->snd_queuelen;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009944:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d111      	bne.n	8009970 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009950:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d106      	bne.n	8009966 <tcp_process+0x236>
 8009958:	4b21      	ldr	r3, [pc, #132]	; (80099e0 <tcp_process+0x2b0>)
 800995a:	f240 3222 	movw	r2, #802	; 0x322
 800995e:	4927      	ldr	r1, [pc, #156]	; (80099fc <tcp_process+0x2cc>)
 8009960:	4821      	ldr	r0, [pc, #132]	; (80099e8 <tcp_process+0x2b8>)
 8009962:	f005 fc53 	bl	800f20c <iprintf>
        pcb->unsent = rseg->next;
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	669a      	str	r2, [r3, #104]	; 0x68
 800996e:	e003      	b.n	8009978 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8009978:	69f8      	ldr	r0, [r7, #28]
 800997a:	f7fe fde1 	bl	8008540 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <tcp_process+0x260>
        pcb->rtime = -1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800998c:	861a      	strh	r2, [r3, #48]	; 0x30
 800998e:	e006      	b.n	800999e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00a      	beq.n	80099be <tcp_process+0x28e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6910      	ldr	r0, [r2, #16]
 80099b2:	2200      	movs	r2, #0
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4798      	blx	r3
 80099b8:	4603      	mov	r3, r0
 80099ba:	76bb      	strb	r3, [r7, #26]
 80099bc:	e001      	b.n	80099c2 <tcp_process+0x292>
 80099be:	2300      	movs	r3, #0
 80099c0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80099c2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80099c6:	f113 0f0d 	cmn.w	r3, #13
 80099ca:	d119      	bne.n	8009a00 <tcp_process+0x2d0>
        return ERR_ABRT;
 80099cc:	f06f 030c 	mvn.w	r3, #12
 80099d0:	e257      	b.n	8009e82 <tcp_process+0x752>
 80099d2:	bf00      	nop
 80099d4:	20000544 	.word	0x20000544
 80099d8:	2000053c 	.word	0x2000053c
 80099dc:	20000538 	.word	0x20000538
 80099e0:	08011268 	.word	0x08011268
 80099e4:	08011420 	.word	0x08011420
 80099e8:	080112ac 	.word	0x080112ac
 80099ec:	20000545 	.word	0x20000545
 80099f0:	20007150 	.word	0x20007150
 80099f4:	20000528 	.word	0x20000528
 80099f8:	08011440 	.word	0x08011440
 80099fc:	08011458 	.word	0x08011458
      }
      tcp_ack_now(pcb);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7e9b      	ldrb	r3, [r3, #26]
 8009a04:	f043 0302 	orr.w	r3, r3, #2
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8009a0e:	e22a      	b.n	8009e66 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8009a10:	4b9f      	ldr	r3, [pc, #636]	; (8009c90 <tcp_process+0x560>)
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 8224 	beq.w	8009e66 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a1e:	4b9d      	ldr	r3, [pc, #628]	; (8009c94 <tcp_process+0x564>)
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	4b9d      	ldr	r3, [pc, #628]	; (8009c98 <tcp_process+0x568>)
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	4b9c      	ldr	r3, [pc, #624]	; (8009c9c <tcp_process+0x56c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a2e:	4b9c      	ldr	r3, [pc, #624]	; (8009ca0 <tcp_process+0x570>)
 8009a30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a32:	885b      	ldrh	r3, [r3, #2]
 8009a34:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a36:	4a9a      	ldr	r2, [pc, #616]	; (8009ca0 <tcp_process+0x570>)
 8009a38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a3a:	8812      	ldrh	r2, [r2, #0]
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	9201      	str	r2, [sp, #4]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4b98      	ldr	r3, [pc, #608]	; (8009ca4 <tcp_process+0x574>)
 8009a44:	4a98      	ldr	r2, [pc, #608]	; (8009ca8 <tcp_process+0x578>)
 8009a46:	f002 fc9b 	bl	800c380 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a50:	2b05      	cmp	r3, #5
 8009a52:	f200 8208 	bhi.w	8009e66 <tcp_process+0x736>
        pcb->rtime = 0;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f002 fd05 	bl	800c46c <tcp_rexmit_rto>
    break;
 8009a62:	e200      	b.n	8009e66 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8009a64:	4b8a      	ldr	r3, [pc, #552]	; (8009c90 <tcp_process+0x560>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8091 	beq.w	8009b94 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009a72:	4b88      	ldr	r3, [pc, #544]	; (8009c94 <tcp_process+0x564>)
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	db71      	blt.n	8009b66 <tcp_process+0x436>
 8009a82:	4b84      	ldr	r3, [pc, #528]	; (8009c94 <tcp_process+0x564>)
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dc6a      	bgt.n	8009b66 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2204      	movs	r2, #4
 8009a94:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00b      	beq.n	8009ab6 <tcp_process+0x386>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d106      	bne.n	8009ab6 <tcp_process+0x386>
 8009aa8:	4b80      	ldr	r3, [pc, #512]	; (8009cac <tcp_process+0x57c>)
 8009aaa:	f44f 7254 	mov.w	r2, #848	; 0x350
 8009aae:	4980      	ldr	r1, [pc, #512]	; (8009cb0 <tcp_process+0x580>)
 8009ab0:	4880      	ldr	r0, [pc, #512]	; (8009cb4 <tcp_process+0x584>)
 8009ab2:	f005 fbab 	bl	800f20c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8009abe:	23fa      	movs	r3, #250	; 0xfa
 8009ac0:	76bb      	strb	r3, [r7, #26]
 8009ac2:	e011      	b.n	8009ae8 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <tcp_process+0x3b4>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	6910      	ldr	r0, [r2, #16]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	4798      	blx	r3
 8009ade:	4603      	mov	r3, r0
 8009ae0:	76bb      	strb	r3, [r7, #26]
 8009ae2:	e001      	b.n	8009ae8 <tcp_process+0x3b8>
 8009ae4:	23f0      	movs	r3, #240	; 0xf0
 8009ae6:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8009ae8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8009af0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009af4:	f113 0f0d 	cmn.w	r3, #13
 8009af8:	d002      	beq.n	8009b00 <tcp_process+0x3d0>
            tcp_abort(pcb);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fd ff38 	bl	8007970 <tcp_abort>
          }
          return ERR_ABRT;
 8009b00:	f06f 030c 	mvn.w	r3, #12
 8009b04:	e1bd      	b.n	8009e82 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa42 	bl	8009f90 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8009b0c:	4b6a      	ldr	r3, [pc, #424]	; (8009cb8 <tcp_process+0x588>)
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <tcp_process+0x3f0>
          recv_acked--;
 8009b14:	4b68      	ldr	r3, [pc, #416]	; (8009cb8 <tcp_process+0x588>)
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	4b66      	ldr	r3, [pc, #408]	; (8009cb8 <tcp_process+0x588>)
 8009b1e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	bf38      	it	cc
 8009b2e:	461a      	movcc	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	4293      	cmp	r3, r2
 8009b38:	bf28      	it	cs
 8009b3a:	4613      	movcs	r3, r2
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8009b44:	4b5d      	ldr	r3, [pc, #372]	; (8009cbc <tcp_process+0x58c>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0320 	and.w	r3, r3, #32
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d034      	beq.n	8009bba <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	7e9b      	ldrb	r3, [r3, #26]
 8009b54:	f043 0302 	orr.w	r3, r3, #2
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2207      	movs	r2, #7
 8009b62:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8009b64:	e029      	b.n	8009bba <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b66:	4b4b      	ldr	r3, [pc, #300]	; (8009c94 <tcp_process+0x564>)
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	4b4b      	ldr	r3, [pc, #300]	; (8009c98 <tcp_process+0x568>)
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	4b4a      	ldr	r3, [pc, #296]	; (8009c9c <tcp_process+0x56c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b76:	4b4a      	ldr	r3, [pc, #296]	; (8009ca0 <tcp_process+0x570>)
 8009b78:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b7a:	885b      	ldrh	r3, [r3, #2]
 8009b7c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009b7e:	4a48      	ldr	r2, [pc, #288]	; (8009ca0 <tcp_process+0x570>)
 8009b80:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b82:	8812      	ldrh	r2, [r2, #0]
 8009b84:	b292      	uxth	r2, r2
 8009b86:	9201      	str	r2, [sp, #4]
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	4b46      	ldr	r3, [pc, #280]	; (8009ca4 <tcp_process+0x574>)
 8009b8c:	4a46      	ldr	r2, [pc, #280]	; (8009ca8 <tcp_process+0x578>)
 8009b8e:	f002 fbf7 	bl	800c380 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8009b92:	e16a      	b.n	8009e6a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009b94:	4b3e      	ldr	r3, [pc, #248]	; (8009c90 <tcp_process+0x560>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 8164 	beq.w	8009e6a <tcp_process+0x73a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	1e5a      	subs	r2, r3, #1
 8009ba8:	4b3c      	ldr	r3, [pc, #240]	; (8009c9c <tcp_process+0x56c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	f040 815c 	bne.w	8009e6a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f002 fc90 	bl	800c4d8 <tcp_rexmit>
    break;
 8009bb8:	e157      	b.n	8009e6a <tcp_process+0x73a>
 8009bba:	e156      	b.n	8009e6a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9e7 	bl	8009f90 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009bc2:	4b3e      	ldr	r3, [pc, #248]	; (8009cbc <tcp_process+0x58c>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f003 0320 	and.w	r3, r3, #32
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	f000 814f 	beq.w	8009e6e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	7e9b      	ldrb	r3, [r3, #26]
 8009bd4:	f043 0302 	orr.w	r3, r3, #2
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2207      	movs	r2, #7
 8009be2:	751a      	strb	r2, [r3, #20]
    }
    break;
 8009be4:	e143      	b.n	8009e6e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f9d2 	bl	8009f90 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009bec:	4b33      	ldr	r3, [pc, #204]	; (8009cbc <tcp_process+0x58c>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f003 0320 	and.w	r3, r3, #32
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d074      	beq.n	8009ce2 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009bf8:	4b25      	ldr	r3, [pc, #148]	; (8009c90 <tcp_process+0x560>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 0310 	and.w	r3, r3, #16
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d063      	beq.n	8009ccc <tcp_process+0x59c>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c08:	4b22      	ldr	r3, [pc, #136]	; (8009c94 <tcp_process+0x564>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d15d      	bne.n	8009ccc <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d159      	bne.n	8009ccc <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7e9b      	ldrb	r3, [r3, #26]
 8009c1c:	f043 0302 	orr.w	r3, r3, #2
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7fe fee8 	bl	80089fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c2c:	4b24      	ldr	r3, [pc, #144]	; (8009cc0 <tcp_process+0x590>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d105      	bne.n	8009c42 <tcp_process+0x512>
 8009c36:	4b22      	ldr	r3, [pc, #136]	; (8009cc0 <tcp_process+0x590>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	4a20      	ldr	r2, [pc, #128]	; (8009cc0 <tcp_process+0x590>)
 8009c3e:	6013      	str	r3, [r2, #0]
 8009c40:	e013      	b.n	8009c6a <tcp_process+0x53a>
 8009c42:	4b1f      	ldr	r3, [pc, #124]	; (8009cc0 <tcp_process+0x590>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	e00c      	b.n	8009c64 <tcp_process+0x534>
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d104      	bne.n	8009c5e <tcp_process+0x52e>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68da      	ldr	r2, [r3, #12]
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	60da      	str	r2, [r3, #12]
 8009c5c:	e005      	b.n	8009c6a <tcp_process+0x53a>
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	617b      	str	r3, [r7, #20]
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1ef      	bne.n	8009c4a <tcp_process+0x51a>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	60da      	str	r2, [r3, #12]
 8009c70:	4b14      	ldr	r3, [pc, #80]	; (8009cc4 <tcp_process+0x594>)
 8009c72:	2201      	movs	r2, #1
 8009c74:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	220a      	movs	r2, #10
 8009c7a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c7c:	4b12      	ldr	r3, [pc, #72]	; (8009cc8 <tcp_process+0x598>)
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60da      	str	r2, [r3, #12]
 8009c84:	4a10      	ldr	r2, [pc, #64]	; (8009cc8 <tcp_process+0x598>)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6013      	str	r3, [r2, #0]
 8009c8a:	f002 fdc1 	bl	800c810 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8009c8e:	e0f0      	b.n	8009e72 <tcp_process+0x742>
 8009c90:	20000544 	.word	0x20000544
 8009c94:	2000053c 	.word	0x2000053c
 8009c98:	20000542 	.word	0x20000542
 8009c9c:	20000538 	.word	0x20000538
 8009ca0:	20000528 	.word	0x20000528
 8009ca4:	20003c2c 	.word	0x20003c2c
 8009ca8:	20003c30 	.word	0x20003c30
 8009cac:	08011268 	.word	0x08011268
 8009cb0:	0801146c 	.word	0x0801146c
 8009cb4:	080112ac 	.word	0x080112ac
 8009cb8:	20000540 	.word	0x20000540
 8009cbc:	20000545 	.word	0x20000545
 8009cc0:	2000714c 	.word	0x2000714c
 8009cc4:	20007148 	.word	0x20007148
 8009cc8:	2000715c 	.word	0x2000715c
        tcp_ack_now(pcb);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7e9b      	ldrb	r3, [r3, #26]
 8009cd0:	f043 0302 	orr.w	r3, r3, #2
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2208      	movs	r2, #8
 8009cde:	751a      	strb	r2, [r3, #20]
    break;
 8009ce0:	e0c7      	b.n	8009e72 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009ce2:	4b6a      	ldr	r3, [pc, #424]	; (8009e8c <tcp_process+0x75c>)
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	f003 0310 	and.w	r3, r3, #16
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 80c1 	beq.w	8009e72 <tcp_process+0x742>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cf4:	4b66      	ldr	r3, [pc, #408]	; (8009e90 <tcp_process+0x760>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	f040 80ba 	bne.w	8009e72 <tcp_process+0x742>
               pcb->unsent == NULL) {
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f040 80b5 	bne.w	8009e72 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2206      	movs	r2, #6
 8009d0c:	751a      	strb	r2, [r3, #20]
    break;
 8009d0e:	e0b0      	b.n	8009e72 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f93d 	bl	8009f90 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009d16:	4b5f      	ldr	r3, [pc, #380]	; (8009e94 <tcp_process+0x764>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 80a9 	beq.w	8009e76 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	7e9b      	ldrb	r3, [r3, #26]
 8009d28:	f043 0302 	orr.w	r3, r3, #2
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7fe fe62 	bl	80089fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009d38:	4b57      	ldr	r3, [pc, #348]	; (8009e98 <tcp_process+0x768>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d105      	bne.n	8009d4e <tcp_process+0x61e>
 8009d42:	4b55      	ldr	r3, [pc, #340]	; (8009e98 <tcp_process+0x768>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	4a53      	ldr	r2, [pc, #332]	; (8009e98 <tcp_process+0x768>)
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	e013      	b.n	8009d76 <tcp_process+0x646>
 8009d4e:	4b52      	ldr	r3, [pc, #328]	; (8009e98 <tcp_process+0x768>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	613b      	str	r3, [r7, #16]
 8009d54:	e00c      	b.n	8009d70 <tcp_process+0x640>
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d104      	bne.n	8009d6a <tcp_process+0x63a>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68da      	ldr	r2, [r3, #12]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	60da      	str	r2, [r3, #12]
 8009d68:	e005      	b.n	8009d76 <tcp_process+0x646>
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	613b      	str	r3, [r7, #16]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1ef      	bne.n	8009d56 <tcp_process+0x626>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	60da      	str	r2, [r3, #12]
 8009d7c:	4b47      	ldr	r3, [pc, #284]	; (8009e9c <tcp_process+0x76c>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	220a      	movs	r2, #10
 8009d86:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009d88:	4b45      	ldr	r3, [pc, #276]	; (8009ea0 <tcp_process+0x770>)
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	60da      	str	r2, [r3, #12]
 8009d90:	4a43      	ldr	r2, [pc, #268]	; (8009ea0 <tcp_process+0x770>)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	f002 fd3b 	bl	800c810 <tcp_timer_needed>
    }
    break;
 8009d9a:	e06c      	b.n	8009e76 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f8f7 	bl	8009f90 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009da2:	4b3a      	ldr	r3, [pc, #232]	; (8009e8c <tcp_process+0x75c>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	f003 0310 	and.w	r3, r3, #16
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d065      	beq.n	8009e7a <tcp_process+0x74a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009db2:	4b37      	ldr	r3, [pc, #220]	; (8009e90 <tcp_process+0x760>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d15f      	bne.n	8009e7a <tcp_process+0x74a>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d15b      	bne.n	8009e7a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7fe fe1a 	bl	80089fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009dc8:	4b33      	ldr	r3, [pc, #204]	; (8009e98 <tcp_process+0x768>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d105      	bne.n	8009dde <tcp_process+0x6ae>
 8009dd2:	4b31      	ldr	r3, [pc, #196]	; (8009e98 <tcp_process+0x768>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	4a2f      	ldr	r2, [pc, #188]	; (8009e98 <tcp_process+0x768>)
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	e013      	b.n	8009e06 <tcp_process+0x6d6>
 8009dde:	4b2e      	ldr	r3, [pc, #184]	; (8009e98 <tcp_process+0x768>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	e00c      	b.n	8009e00 <tcp_process+0x6d0>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d104      	bne.n	8009dfa <tcp_process+0x6ca>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68da      	ldr	r2, [r3, #12]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	60da      	str	r2, [r3, #12]
 8009df8:	e005      	b.n	8009e06 <tcp_process+0x6d6>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1ef      	bne.n	8009de6 <tcp_process+0x6b6>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	60da      	str	r2, [r3, #12]
 8009e0c:	4b23      	ldr	r3, [pc, #140]	; (8009e9c <tcp_process+0x76c>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	220a      	movs	r2, #10
 8009e16:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8009e18:	4b21      	ldr	r3, [pc, #132]	; (8009ea0 <tcp_process+0x770>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60da      	str	r2, [r3, #12]
 8009e20:	4a1f      	ldr	r2, [pc, #124]	; (8009ea0 <tcp_process+0x770>)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	f002 fcf3 	bl	800c810 <tcp_timer_needed>
    }
    break;
 8009e2a:	e026      	b.n	8009e7a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f8af 	bl	8009f90 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e32:	4b16      	ldr	r3, [pc, #88]	; (8009e8c <tcp_process+0x75c>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01f      	beq.n	8009e7e <tcp_process+0x74e>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e42:	4b13      	ldr	r3, [pc, #76]	; (8009e90 <tcp_process+0x760>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d119      	bne.n	8009e7e <tcp_process+0x74e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d115      	bne.n	8009e7e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8009e52:	4b10      	ldr	r3, [pc, #64]	; (8009e94 <tcp_process+0x764>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	f043 0310 	orr.w	r3, r3, #16
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	4b0d      	ldr	r3, [pc, #52]	; (8009e94 <tcp_process+0x764>)
 8009e5e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8009e60:	e00d      	b.n	8009e7e <tcp_process+0x74e>
  default:
    break;
 8009e62:	bf00      	nop
 8009e64:	e00c      	b.n	8009e80 <tcp_process+0x750>
    break;
 8009e66:	bf00      	nop
 8009e68:	e00a      	b.n	8009e80 <tcp_process+0x750>
    break;
 8009e6a:	bf00      	nop
 8009e6c:	e008      	b.n	8009e80 <tcp_process+0x750>
    break;
 8009e6e:	bf00      	nop
 8009e70:	e006      	b.n	8009e80 <tcp_process+0x750>
    break;
 8009e72:	bf00      	nop
 8009e74:	e004      	b.n	8009e80 <tcp_process+0x750>
    break;
 8009e76:	bf00      	nop
 8009e78:	e002      	b.n	8009e80 <tcp_process+0x750>
    break;
 8009e7a:	bf00      	nop
 8009e7c:	e000      	b.n	8009e80 <tcp_process+0x750>
    break;
 8009e7e:	bf00      	nop
  }
  return ERR_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3720      	adds	r7, #32
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	20000544 	.word	0x20000544
 8009e90:	2000053c 	.word	0x2000053c
 8009e94:	20000545 	.word	0x20000545
 8009e98:	2000714c 	.word	0x2000714c
 8009e9c:	20007148 	.word	0x20007148
 8009ea0:	2000715c 	.word	0x2000715c

08009ea4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009ea4:	b590      	push	{r4, r7, lr}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	899b      	ldrh	r3, [r3, #12]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fb fece 	bl	8005c58 <lwip_htons>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d027      	beq.n	8009f16 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009ec6:	6838      	ldr	r0, [r7, #0]
 8009ec8:	f7fe fb25 	bl	8008516 <tcp_segs_free>
    next = NULL;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	e055      	b.n	8009f7e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	899b      	ldrh	r3, [r3, #12]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fb febc 	bl	8005c58 <lwip_htons>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00d      	beq.n	8009f06 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	899b      	ldrh	r3, [r3, #12]
 8009ef0:	b29c      	uxth	r4, r3
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	f7fb feb0 	bl	8005c58 <lwip_htons>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	461a      	mov	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	4322      	orrs	r2, r4
 8009f02:	b292      	uxth	r2, r2
 8009f04:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7fe fb15 	bl	8008540 <tcp_seg_free>
    while (next &&
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00e      	beq.n	8009f3a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	891b      	ldrh	r3, [r3, #8]
 8009f20:	461a      	mov	r2, r3
 8009f22:	4b1a      	ldr	r3, [pc, #104]	; (8009f8c <tcp_oos_insert_segment+0xe8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	441a      	add	r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	8909      	ldrh	r1, [r1, #8]
 8009f32:	440b      	add	r3, r1
 8009f34:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	dacb      	bge.n	8009ed2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01e      	beq.n	8009f7e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	891b      	ldrh	r3, [r3, #8]
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b11      	ldr	r3, [pc, #68]	; (8009f8c <tcp_oos_insert_segment+0xe8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	441a      	add	r2, r3
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dd12      	ble.n	8009f7e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <tcp_oos_insert_segment+0xe8>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	891b      	ldrh	r3, [r3, #8]
 8009f76:	4619      	mov	r1, r3
 8009f78:	4610      	mov	r0, r2
 8009f7a:	f7fc fe8f 	bl	8006c9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd90      	pop	{r4, r7, pc}
 8009f8c:	20000538 	.word	0x20000538

08009f90 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f92:	b08d      	sub	sp, #52	; 0x34
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	7d1b      	ldrb	r3, [r3, #20]
 8009fa0:	2b03      	cmp	r3, #3
 8009fa2:	d806      	bhi.n	8009fb2 <tcp_receive+0x22>
 8009fa4:	4ba6      	ldr	r3, [pc, #664]	; (800a240 <tcp_receive+0x2b0>)
 8009fa6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8009faa:	49a6      	ldr	r1, [pc, #664]	; (800a244 <tcp_receive+0x2b4>)
 8009fac:	48a6      	ldr	r0, [pc, #664]	; (800a248 <tcp_receive+0x2b8>)
 8009fae:	f005 f92d 	bl	800f20c <iprintf>

  if (flags & TCP_ACK) {
 8009fb2:	4ba6      	ldr	r3, [pc, #664]	; (800a24c <tcp_receive+0x2bc>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	f003 0310 	and.w	r3, r3, #16
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 82bf 	beq.w	800a53e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fcc:	4413      	add	r3, r2
 8009fce:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fd4:	4b9e      	ldr	r3, [pc, #632]	; (800a250 <tcp_receive+0x2c0>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	db1b      	blt.n	800a016 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fe2:	4b9b      	ldr	r3, [pc, #620]	; (800a250 <tcp_receive+0x2c0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d106      	bne.n	8009ff8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fee:	4b99      	ldr	r3, [pc, #612]	; (800a254 <tcp_receive+0x2c4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	db0e      	blt.n	800a016 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ffc:	4b95      	ldr	r3, [pc, #596]	; (800a254 <tcp_receive+0x2c4>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a000:	429a      	cmp	r2, r3
 800a002:	d141      	bne.n	800a088 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a004:	4b94      	ldr	r3, [pc, #592]	; (800a258 <tcp_receive+0x2c8>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	89db      	ldrh	r3, [r3, #14]
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a012:	429a      	cmp	r2, r3
 800a014:	d938      	bls.n	800a088 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a016:	4b90      	ldr	r3, [pc, #576]	; (800a258 <tcp_receive+0x2c8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	89db      	ldrh	r3, [r3, #14]
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a030:	429a      	cmp	r2, r3
 800a032:	d205      	bcs.n	800a040 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800a040:	4b83      	ldr	r3, [pc, #524]	; (800a250 <tcp_receive+0x2c0>)
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800a048:	4b82      	ldr	r3, [pc, #520]	; (800a254 <tcp_receive+0x2c4>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10d      	bne.n	800a076 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a060:	2b00      	cmp	r3, #0
 800a062:	d111      	bne.n	800a088 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a074:	e008      	b.n	800a088 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a088:	4b72      	ldr	r3, [pc, #456]	; (800a254 <tcp_receive+0x2c4>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	dc53      	bgt.n	800a13e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800a096:	4b71      	ldr	r3, [pc, #452]	; (800a25c <tcp_receive+0x2cc>)
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d146      	bne.n	800a12c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a0a8:	4413      	add	r3, r2
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d13d      	bne.n	800a12c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	db38      	blt.n	800a12c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0be:	4b65      	ldr	r3, [pc, #404]	; (800a254 <tcp_receive+0x2c4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d132      	bne.n	800a12c <tcp_receive+0x19c>
              found_dupack = 1;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0d0:	2bff      	cmp	r3, #255	; 0xff
 800a0d2:	d007      	beq.n	800a0e4 <tcp_receive+0x154>
                ++pcb->dupacks;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0da:	3301      	adds	r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d916      	bls.n	800a11c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a0f8:	4413      	add	r3, r2
 800a0fa:	b29a      	uxth	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a102:	429a      	cmp	r2, r3
 800a104:	d912      	bls.n	800a12c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a110:	4413      	add	r3, r2
 800a112:	b29a      	uxth	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a11a:	e007      	b.n	800a12c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a122:	2b03      	cmp	r3, #3
 800a124:	d102      	bne.n	800a12c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f002 fa26 	bl	800c578 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f040 8169 	bne.w	800a406 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a13c:	e163      	b.n	800a406 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a13e:	4b45      	ldr	r3, [pc, #276]	; (800a254 <tcp_receive+0x2c4>)
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f2c0 8107 	blt.w	800a35e <tcp_receive+0x3ce>
 800a150:	4b40      	ldr	r3, [pc, #256]	; (800a254 <tcp_receive+0x2c4>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f300 80ff 	bgt.w	800a35e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	7e9b      	ldrb	r3, [r3, #26]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00c      	beq.n	800a186 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	7e9b      	ldrb	r3, [r3, #26]
 800a170:	f023 0304 	bic.w	r3, r3, #4
 800a174:	b2da      	uxtb	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a194:	10db      	asrs	r3, r3, #3
 800a196:	b21b      	sxth	r3, r3
 800a198:	b29a      	uxth	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	4413      	add	r3, r2
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	b21a      	sxth	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a1b6:	4b27      	ldr	r3, [pc, #156]	; (800a254 <tcp_receive+0x2c4>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	7d1b      	ldrb	r3, [r3, #20]
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	f240 8094 	bls.w	800a2f0 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d216      	bcs.n	800a206 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1e2:	4413      	add	r3, r2
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d97f      	bls.n	800a2f0 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1fa:	4413      	add	r3, r2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a204:	e074      	b.n	800a2f0 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a210:	4619      	mov	r1, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a216:	fb03 f301 	mul.w	r3, r3, r1
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800a220:	fb93 f3f1 	sdiv	r3, r3, r1
 800a224:	b29b      	uxth	r3, r3
 800a226:	4413      	add	r3, r2
 800a228:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a230:	8a7a      	ldrh	r2, [r7, #18]
 800a232:	429a      	cmp	r2, r3
 800a234:	d95c      	bls.n	800a2f0 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	8a7a      	ldrh	r2, [r7, #18]
 800a23a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800a23e:	e057      	b.n	800a2f0 <tcp_receive+0x360>
 800a240:	08011268 	.word	0x08011268
 800a244:	0801148c 	.word	0x0801148c
 800a248:	080112ac 	.word	0x080112ac
 800a24c:	20000544 	.word	0x20000544
 800a250:	20000538 	.word	0x20000538
 800a254:	2000053c 	.word	0x2000053c
 800a258:	20000528 	.word	0x20000528
 800a25c:	20000542 	.word	0x20000542
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a264:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7fc ff16 	bl	80070ac <pbuf_clen>
 800a280:	4603      	mov	r3, r0
 800a282:	429c      	cmp	r4, r3
 800a284:	d206      	bcs.n	800a294 <tcp_receive+0x304>
 800a286:	4b70      	ldr	r3, [pc, #448]	; (800a448 <tcp_receive+0x4b8>)
 800a288:	f240 429e 	movw	r2, #1182	; 0x49e
 800a28c:	496f      	ldr	r1, [pc, #444]	; (800a44c <tcp_receive+0x4bc>)
 800a28e:	4870      	ldr	r0, [pc, #448]	; (800a450 <tcp_receive+0x4c0>)
 800a290:	f004 ffbc 	bl	800f20c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fc ff07 	bl	80070ac <pbuf_clen>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2a8:	1a9b      	subs	r3, r3, r2
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	891a      	ldrh	r2, [r3, #8]
 800a2b6:	4b67      	ldr	r3, [pc, #412]	; (800a454 <tcp_receive+0x4c4>)
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	4b65      	ldr	r3, [pc, #404]	; (800a454 <tcp_receive+0x4c4>)
 800a2c0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800a2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2c4:	f7fe f93c 	bl	8008540 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00e      	beq.n	800a2f0 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <tcp_receive+0x360>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <tcp_receive+0x360>
 800a2e2:	4b59      	ldr	r3, [pc, #356]	; (800a448 <tcp_receive+0x4b8>)
 800a2e4:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800a2e8:	495b      	ldr	r1, [pc, #364]	; (800a458 <tcp_receive+0x4c8>)
 800a2ea:	4859      	ldr	r0, [pc, #356]	; (800a450 <tcp_receive+0x4c0>)
 800a2ec:	f004 ff8e 	bl	800f20c <iprintf>
      while (pcb->unacked != NULL &&
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d022      	beq.n	800a33e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	4618      	mov	r0, r3
 800a302:	f7fb fcb6 	bl	8005c72 <lwip_htonl>
 800a306:	4604      	mov	r4, r0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a30c:	891b      	ldrh	r3, [r3, #8]
 800a30e:	461d      	mov	r5, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	899b      	ldrh	r3, [r3, #12]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7fb fc9c 	bl	8005c58 <lwip_htons>
 800a320:	4603      	mov	r3, r0
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <tcp_receive+0x39e>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e000      	b.n	800a330 <tcp_receive+0x3a0>
 800a32e:	2300      	movs	r3, #0
 800a330:	442b      	add	r3, r5
 800a332:	18e2      	adds	r2, r4, r3
 800a334:	4b49      	ldr	r3, [pc, #292]	; (800a45c <tcp_receive+0x4cc>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	dd90      	ble.n	800a260 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a342:	2b00      	cmp	r3, #0
 800a344:	d104      	bne.n	800a350 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a34c:	861a      	strh	r2, [r3, #48]	; 0x30
 800a34e:	e002      	b.n	800a356 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	76da      	strb	r2, [r3, #27]
 800a35c:	e002      	b.n	800a364 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 fd2e 	bl	800bdc0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800a364:	e04f      	b.n	800a406 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d103      	bne.n	800a386 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	f7fc fe8b 	bl	80070ac <pbuf_clen>
 800a396:	4603      	mov	r3, r0
 800a398:	429c      	cmp	r4, r3
 800a39a:	d206      	bcs.n	800a3aa <tcp_receive+0x41a>
 800a39c:	4b2a      	ldr	r3, [pc, #168]	; (800a448 <tcp_receive+0x4b8>)
 800a39e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a3a2:	492a      	ldr	r1, [pc, #168]	; (800a44c <tcp_receive+0x4bc>)
 800a3a4:	482a      	ldr	r0, [pc, #168]	; (800a450 <tcp_receive+0x4c0>)
 800a3a6:	f004 ff31 	bl	800f20c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fc fe7c 	bl	80070ac <pbuf_clen>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	891a      	ldrh	r2, [r3, #8]
 800a3cc:	4b21      	ldr	r3, [pc, #132]	; (800a454 <tcp_receive+0x4c4>)
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	4b1f      	ldr	r3, [pc, #124]	; (800a454 <tcp_receive+0x4c4>)
 800a3d6:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800a3d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3da:	f7fe f8b1 	bl	8008540 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00e      	beq.n	800a406 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10a      	bne.n	800a406 <tcp_receive+0x476>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <tcp_receive+0x476>
 800a3f8:	4b13      	ldr	r3, [pc, #76]	; (800a448 <tcp_receive+0x4b8>)
 800a3fa:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800a3fe:	4916      	ldr	r1, [pc, #88]	; (800a458 <tcp_receive+0x4c8>)
 800a400:	4813      	ldr	r0, [pc, #76]	; (800a450 <tcp_receive+0x4c0>)
 800a402:	f004 ff03 	bl	800f20c <iprintf>
    while (pcb->unsent != NULL &&
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d036      	beq.n	800a47c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a40e:	4b13      	ldr	r3, [pc, #76]	; (800a45c <tcp_receive+0x4cc>)
 800a410:	681c      	ldr	r4, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fb fc29 	bl	8005c72 <lwip_htonl>
 800a420:	4605      	mov	r5, r0
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a426:	891b      	ldrh	r3, [r3, #8]
 800a428:	461e      	mov	r6, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	899b      	ldrh	r3, [r3, #12]
 800a432:	b29b      	uxth	r3, r3
 800a434:	4618      	mov	r0, r3
 800a436:	f7fb fc0f 	bl	8005c58 <lwip_htons>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f003 0303 	and.w	r3, r3, #3
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00d      	beq.n	800a460 <tcp_receive+0x4d0>
 800a444:	2301      	movs	r3, #1
 800a446:	e00c      	b.n	800a462 <tcp_receive+0x4d2>
 800a448:	08011268 	.word	0x08011268
 800a44c:	080114a8 	.word	0x080114a8
 800a450:	080112ac 	.word	0x080112ac
 800a454:	20000540 	.word	0x20000540
 800a458:	080114d0 	.word	0x080114d0
 800a45c:	2000053c 	.word	0x2000053c
 800a460:	2300      	movs	r3, #0
 800a462:	4433      	add	r3, r6
 800a464:	442b      	add	r3, r5
 800a466:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800a468:	2b00      	cmp	r3, #0
 800a46a:	db07      	blt.n	800a47c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a46c:	4b8d      	ldr	r3, [pc, #564]	; (800a6a4 <tcp_receive+0x714>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	f77f af75 	ble.w	800a366 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a482:	4b89      	ldr	r3, [pc, #548]	; (800a6a8 <tcp_receive+0x718>)
 800a484:	881b      	ldrh	r3, [r3, #0]
 800a486:	4413      	add	r3, r2
 800a488:	b29a      	uxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	2b00      	cmp	r3, #0
 800a496:	d052      	beq.n	800a53e <tcp_receive+0x5ae>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49c:	4b81      	ldr	r3, [pc, #516]	; (800a6a4 <tcp_receive+0x714>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	da4b      	bge.n	800a53e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a4a6:	4b81      	ldr	r3, [pc, #516]	; (800a6ac <tcp_receive+0x71c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800a4b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a4c0:	10db      	asrs	r3, r3, #3
 800a4c2:	b21b      	sxth	r3, r3
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	1ad3      	subs	r3, r2, r3
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4d6:	4413      	add	r3, r2
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	b21a      	sxth	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a4e0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	da03      	bge.n	800a4f0 <tcp_receive+0x560>
        m = -m;
 800a4e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4ea:	425b      	negs	r3, r3
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800a4f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a4f8:	109b      	asrs	r3, r3, #2
 800a4fa:	b21b      	sxth	r3, r3
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	1ad3      	subs	r3, r2, r3
 800a500:	b29b      	uxth	r3, r3
 800a502:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a50e:	4413      	add	r3, r2
 800a510:	b29b      	uxth	r3, r3
 800a512:	b21a      	sxth	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a51e:	10db      	asrs	r3, r3, #3
 800a520:	b21b      	sxth	r3, r3
 800a522:	b29a      	uxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	4413      	add	r3, r2
 800a52e:	b29b      	uxth	r3, r3
 800a530:	b21a      	sxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a53e:	4b5c      	ldr	r3, [pc, #368]	; (800a6b0 <tcp_receive+0x720>)
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 84f1 	beq.w	800af2a <tcp_receive+0xf9a>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	7d1b      	ldrb	r3, [r3, #20]
 800a54c:	2b06      	cmp	r3, #6
 800a54e:	f200 84ec 	bhi.w	800af2a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a556:	4b57      	ldr	r3, [pc, #348]	; (800a6b4 <tcp_receive+0x724>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	3b01      	subs	r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f2c0 80b8 	blt.w	800a6d4 <tcp_receive+0x744>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a568:	4b51      	ldr	r3, [pc, #324]	; (800a6b0 <tcp_receive+0x720>)
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	4619      	mov	r1, r3
 800a56e:	4b51      	ldr	r3, [pc, #324]	; (800a6b4 <tcp_receive+0x724>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	440b      	add	r3, r1
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	3301      	adds	r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f300 80ab 	bgt.w	800a6d4 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a57e:	4b4e      	ldr	r3, [pc, #312]	; (800a6b8 <tcp_receive+0x728>)
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a588:	4b4a      	ldr	r3, [pc, #296]	; (800a6b4 <tcp_receive+0x724>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a590:	4b49      	ldr	r3, [pc, #292]	; (800a6b8 <tcp_receive+0x728>)
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <tcp_receive+0x616>
 800a598:	4b48      	ldr	r3, [pc, #288]	; (800a6bc <tcp_receive+0x72c>)
 800a59a:	f240 523c 	movw	r2, #1340	; 0x53c
 800a59e:	4948      	ldr	r1, [pc, #288]	; (800a6c0 <tcp_receive+0x730>)
 800a5a0:	4848      	ldr	r0, [pc, #288]	; (800a6c4 <tcp_receive+0x734>)
 800a5a2:	f004 fe33 	bl	800f20c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	dd06      	ble.n	800a5be <tcp_receive+0x62e>
 800a5b0:	4b42      	ldr	r3, [pc, #264]	; (800a6bc <tcp_receive+0x72c>)
 800a5b2:	f240 523d 	movw	r2, #1341	; 0x53d
 800a5b6:	4944      	ldr	r1, [pc, #272]	; (800a6c8 <tcp_receive+0x738>)
 800a5b8:	4842      	ldr	r0, [pc, #264]	; (800a6c4 <tcp_receive+0x734>)
 800a5ba:	f004 fe27 	bl	800f20c <iprintf>
      if (inseg.p->len < off) {
 800a5be:	4b3e      	ldr	r3, [pc, #248]	; (800a6b8 <tcp_receive+0x728>)
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	895b      	ldrh	r3, [r3, #10]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	dd3e      	ble.n	800a64a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a5cc:	4b3a      	ldr	r3, [pc, #232]	; (800a6b8 <tcp_receive+0x728>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	891b      	ldrh	r3, [r3, #8]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	dd06      	ble.n	800a5e8 <tcp_receive+0x658>
 800a5da:	4b38      	ldr	r3, [pc, #224]	; (800a6bc <tcp_receive+0x72c>)
 800a5dc:	f240 523f 	movw	r2, #1343	; 0x53f
 800a5e0:	493a      	ldr	r1, [pc, #232]	; (800a6cc <tcp_receive+0x73c>)
 800a5e2:	4838      	ldr	r0, [pc, #224]	; (800a6c4 <tcp_receive+0x734>)
 800a5e4:	f004 fe12 	bl	800f20c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a5e8:	4b33      	ldr	r3, [pc, #204]	; (800a6b8 <tcp_receive+0x728>)
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	891a      	ldrh	r2, [r3, #8]
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800a5f6:	e00e      	b.n	800a616 <tcp_receive+0x686>
          off -= p->len;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	895b      	ldrh	r3, [r3, #10]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	1a9b      	subs	r3, r3, r2
 800a602:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	8a3a      	ldrh	r2, [r7, #16]
 800a608:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	2200      	movs	r2, #0
 800a60e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	895b      	ldrh	r3, [r3, #10]
 800a61a:	461a      	mov	r2, r3
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	4293      	cmp	r3, r2
 800a620:	dcea      	bgt.n	800a5f8 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	b29b      	uxth	r3, r3
 800a626:	425b      	negs	r3, r3
 800a628:	b29b      	uxth	r3, r3
 800a62a:	b21b      	sxth	r3, r3
 800a62c:	4619      	mov	r1, r3
 800a62e:	69b8      	ldr	r0, [r7, #24]
 800a630:	f7fc fc84 	bl	8006f3c <pbuf_header>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01c      	beq.n	800a674 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800a63a:	4b20      	ldr	r3, [pc, #128]	; (800a6bc <tcp_receive+0x72c>)
 800a63c:	f240 524c 	movw	r2, #1356	; 0x54c
 800a640:	4923      	ldr	r1, [pc, #140]	; (800a6d0 <tcp_receive+0x740>)
 800a642:	4820      	ldr	r0, [pc, #128]	; (800a6c4 <tcp_receive+0x734>)
 800a644:	f004 fde2 	bl	800f20c <iprintf>
 800a648:	e014      	b.n	800a674 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800a64a:	4b1b      	ldr	r3, [pc, #108]	; (800a6b8 <tcp_receive+0x728>)
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a650:	b292      	uxth	r2, r2
 800a652:	4252      	negs	r2, r2
 800a654:	b292      	uxth	r2, r2
 800a656:	b212      	sxth	r2, r2
 800a658:	4611      	mov	r1, r2
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fc fc6e 	bl	8006f3c <pbuf_header>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d006      	beq.n	800a674 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800a666:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <tcp_receive+0x72c>)
 800a668:	f240 5251 	movw	r2, #1361	; 0x551
 800a66c:	4918      	ldr	r1, [pc, #96]	; (800a6d0 <tcp_receive+0x740>)
 800a66e:	4815      	ldr	r0, [pc, #84]	; (800a6c4 <tcp_receive+0x734>)
 800a670:	f004 fdcc 	bl	800f20c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800a674:	4b10      	ldr	r3, [pc, #64]	; (800a6b8 <tcp_receive+0x728>)
 800a676:	891a      	ldrh	r2, [r3, #8]
 800a678:	4b0e      	ldr	r3, [pc, #56]	; (800a6b4 <tcp_receive+0x724>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	b299      	uxth	r1, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	b29b      	uxth	r3, r3
 800a684:	1acb      	subs	r3, r1, r3
 800a686:	b29b      	uxth	r3, r3
 800a688:	4413      	add	r3, r2
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	4b0a      	ldr	r3, [pc, #40]	; (800a6b8 <tcp_receive+0x728>)
 800a68e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	4a07      	ldr	r2, [pc, #28]	; (800a6b4 <tcp_receive+0x724>)
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	4b07      	ldr	r3, [pc, #28]	; (800a6b8 <tcp_receive+0x728>)
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	4a05      	ldr	r2, [pc, #20]	; (800a6b4 <tcp_receive+0x724>)
 800a69e:	6812      	ldr	r2, [r2, #0]
 800a6a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a6a2:	e025      	b.n	800a6f0 <tcp_receive+0x760>
 800a6a4:	2000053c 	.word	0x2000053c
 800a6a8:	20000540 	.word	0x20000540
 800a6ac:	20007150 	.word	0x20007150
 800a6b0:	20000542 	.word	0x20000542
 800a6b4:	20000538 	.word	0x20000538
 800a6b8:	20000518 	.word	0x20000518
 800a6bc:	08011268 	.word	0x08011268
 800a6c0:	080114f0 	.word	0x080114f0
 800a6c4:	080112ac 	.word	0x080112ac
 800a6c8:	08011500 	.word	0x08011500
 800a6cc:	08011510 	.word	0x08011510
 800a6d0:	08011520 	.word	0x08011520
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a6d4:	4b87      	ldr	r3, [pc, #540]	; (800a8f4 <tcp_receive+0x964>)
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	da06      	bge.n	800a6f0 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	7e9b      	ldrb	r3, [r3, #26]
 800a6e6:	f043 0302 	orr.w	r3, r3, #2
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6f0:	4b80      	ldr	r3, [pc, #512]	; (800a8f4 <tcp_receive+0x964>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f2c0 8410 	blt.w	800af20 <tcp_receive+0xf90>
 800a700:	4b7c      	ldr	r3, [pc, #496]	; (800a8f4 <tcp_receive+0x964>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a70c:	440b      	add	r3, r1
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	3301      	adds	r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	f300 8404 	bgt.w	800af20 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a71c:	4b75      	ldr	r3, [pc, #468]	; (800a8f4 <tcp_receive+0x964>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	f040 8287 	bne.w	800ac34 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a726:	4b74      	ldr	r3, [pc, #464]	; (800a8f8 <tcp_receive+0x968>)
 800a728:	891c      	ldrh	r4, [r3, #8]
 800a72a:	4b73      	ldr	r3, [pc, #460]	; (800a8f8 <tcp_receive+0x968>)
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	899b      	ldrh	r3, [r3, #12]
 800a730:	b29b      	uxth	r3, r3
 800a732:	4618      	mov	r0, r3
 800a734:	f7fb fa90 	bl	8005c58 <lwip_htons>
 800a738:	4603      	mov	r3, r0
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <tcp_receive+0x7b6>
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <tcp_receive+0x7b8>
 800a746:	2300      	movs	r3, #0
 800a748:	4423      	add	r3, r4
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	4b6b      	ldr	r3, [pc, #428]	; (800a8fc <tcp_receive+0x96c>)
 800a74e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a754:	4b69      	ldr	r3, [pc, #420]	; (800a8fc <tcp_receive+0x96c>)
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d26e      	bcs.n	800a83a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a75c:	4b66      	ldr	r3, [pc, #408]	; (800a8f8 <tcp_receive+0x968>)
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	899b      	ldrh	r3, [r3, #12]
 800a762:	b29b      	uxth	r3, r3
 800a764:	4618      	mov	r0, r3
 800a766:	f7fb fa77 	bl	8005c58 <lwip_htons>
 800a76a:	4603      	mov	r3, r0
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01b      	beq.n	800a7ac <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a774:	4b60      	ldr	r3, [pc, #384]	; (800a8f8 <tcp_receive+0x968>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	899b      	ldrh	r3, [r3, #12]
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a780:	b29c      	uxth	r4, r3
 800a782:	4b5d      	ldr	r3, [pc, #372]	; (800a8f8 <tcp_receive+0x968>)
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	899b      	ldrh	r3, [r3, #12]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fb fa64 	bl	8005c58 <lwip_htons>
 800a790:	4603      	mov	r3, r0
 800a792:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a796:	b29b      	uxth	r3, r3
 800a798:	4618      	mov	r0, r3
 800a79a:	f7fb fa5d 	bl	8005c58 <lwip_htons>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b55      	ldr	r3, [pc, #340]	; (800a8f8 <tcp_receive+0x968>)
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	4322      	orrs	r2, r4
 800a7a8:	b292      	uxth	r2, r2
 800a7aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7b0:	4b51      	ldr	r3, [pc, #324]	; (800a8f8 <tcp_receive+0x968>)
 800a7b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a7b4:	4b50      	ldr	r3, [pc, #320]	; (800a8f8 <tcp_receive+0x968>)
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	899b      	ldrh	r3, [r3, #12]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fb fa4b 	bl	8005c58 <lwip_htons>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f003 0302 	and.w	r3, r3, #2
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <tcp_receive+0x848>
            inseg.len -= 1;
 800a7cc:	4b4a      	ldr	r3, [pc, #296]	; (800a8f8 <tcp_receive+0x968>)
 800a7ce:	891b      	ldrh	r3, [r3, #8]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	4b48      	ldr	r3, [pc, #288]	; (800a8f8 <tcp_receive+0x968>)
 800a7d6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a7d8:	4b47      	ldr	r3, [pc, #284]	; (800a8f8 <tcp_receive+0x968>)
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	4a46      	ldr	r2, [pc, #280]	; (800a8f8 <tcp_receive+0x968>)
 800a7de:	8912      	ldrh	r2, [r2, #8]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fc fa5a 	bl	8006c9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a7e8:	4b43      	ldr	r3, [pc, #268]	; (800a8f8 <tcp_receive+0x968>)
 800a7ea:	891c      	ldrh	r4, [r3, #8]
 800a7ec:	4b42      	ldr	r3, [pc, #264]	; (800a8f8 <tcp_receive+0x968>)
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	899b      	ldrh	r3, [r3, #12]
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fb fa2f 	bl	8005c58 <lwip_htons>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	f003 0303 	and.w	r3, r3, #3
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <tcp_receive+0x878>
 800a804:	2301      	movs	r3, #1
 800a806:	e000      	b.n	800a80a <tcp_receive+0x87a>
 800a808:	2300      	movs	r3, #0
 800a80a:	4423      	add	r3, r4
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	4b3b      	ldr	r3, [pc, #236]	; (800a8fc <tcp_receive+0x96c>)
 800a810:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a812:	4b3a      	ldr	r3, [pc, #232]	; (800a8fc <tcp_receive+0x96c>)
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	4b36      	ldr	r3, [pc, #216]	; (800a8f4 <tcp_receive+0x964>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	441a      	add	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a826:	440b      	add	r3, r1
 800a828:	429a      	cmp	r2, r3
 800a82a:	d006      	beq.n	800a83a <tcp_receive+0x8aa>
 800a82c:	4b34      	ldr	r3, [pc, #208]	; (800a900 <tcp_receive+0x970>)
 800a82e:	f240 527e 	movw	r2, #1406	; 0x57e
 800a832:	4934      	ldr	r1, [pc, #208]	; (800a904 <tcp_receive+0x974>)
 800a834:	4834      	ldr	r0, [pc, #208]	; (800a908 <tcp_receive+0x978>)
 800a836:	f004 fce9 	bl	800f20c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 80e1 	beq.w	800aa06 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a844:	4b2c      	ldr	r3, [pc, #176]	; (800a8f8 <tcp_receive+0x968>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	899b      	ldrh	r3, [r3, #12]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fb fa03 	bl	8005c58 <lwip_htons>
 800a852:	4603      	mov	r3, r0
 800a854:	f003 0301 	and.w	r3, r3, #1
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d010      	beq.n	800a87e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a85c:	e00a      	b.n	800a874 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a862:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800a86e:	68b8      	ldr	r0, [r7, #8]
 800a870:	f7fd fe66 	bl	8008540 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1f0      	bne.n	800a85e <tcp_receive+0x8ce>
 800a87c:	e0c3      	b.n	800aa06 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a884:	e04f      	b.n	800a926 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	899b      	ldrh	r3, [r3, #12]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fb f9e2 	bl	8005c58 <lwip_htons>
 800a894:	4603      	mov	r3, r0
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d03b      	beq.n	800a916 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a89e:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <tcp_receive+0x968>)
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	899b      	ldrh	r3, [r3, #12]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fb f9d6 	bl	8005c58 <lwip_htons>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d12f      	bne.n	800a916 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a8b6:	4b10      	ldr	r3, [pc, #64]	; (800a8f8 <tcp_receive+0x968>)
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	899b      	ldrh	r3, [r3, #12]
 800a8bc:	b29c      	uxth	r4, r3
 800a8be:	2001      	movs	r0, #1
 800a8c0:	f7fb f9ca 	bl	8005c58 <lwip_htons>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4b0b      	ldr	r3, [pc, #44]	; (800a8f8 <tcp_receive+0x968>)
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	4322      	orrs	r2, r4
 800a8ce:	b292      	uxth	r2, r2
 800a8d0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a8d2:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <tcp_receive+0x968>)
 800a8d4:	891c      	ldrh	r4, [r3, #8]
 800a8d6:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <tcp_receive+0x968>)
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	899b      	ldrh	r3, [r3, #12]
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fb f9ba 	bl	8005c58 <lwip_htons>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f003 0303 	and.w	r3, r3, #3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00e      	beq.n	800a90c <tcp_receive+0x97c>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e00d      	b.n	800a90e <tcp_receive+0x97e>
 800a8f2:	bf00      	nop
 800a8f4:	20000538 	.word	0x20000538
 800a8f8:	20000518 	.word	0x20000518
 800a8fc:	20000542 	.word	0x20000542
 800a900:	08011268 	.word	0x08011268
 800a904:	08011534 	.word	0x08011534
 800a908:	080112ac 	.word	0x080112ac
 800a90c:	2300      	movs	r3, #0
 800a90e:	4423      	add	r3, r4
 800a910:	b29a      	uxth	r2, r3
 800a912:	4b95      	ldr	r3, [pc, #596]	; (800ab68 <tcp_receive+0xbd8>)
 800a914:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800a916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a918:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800a920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a922:	f7fd fe0d 	bl	8008540 <tcp_seg_free>
            while (next &&
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00e      	beq.n	800a94a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a92c:	4b8e      	ldr	r3, [pc, #568]	; (800ab68 <tcp_receive+0xbd8>)
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	461a      	mov	r2, r3
 800a932:	4b8e      	ldr	r3, [pc, #568]	; (800ab6c <tcp_receive+0xbdc>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	441a      	add	r2, r3
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a940:	8909      	ldrh	r1, [r1, #8]
 800a942:	440b      	add	r3, r1
 800a944:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a946:	2b00      	cmp	r3, #0
 800a948:	da9d      	bge.n	800a886 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d057      	beq.n	800aa00 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800a950:	4b85      	ldr	r3, [pc, #532]	; (800ab68 <tcp_receive+0xbd8>)
 800a952:	881b      	ldrh	r3, [r3, #0]
 800a954:	461a      	mov	r2, r3
 800a956:	4b85      	ldr	r3, [pc, #532]	; (800ab6c <tcp_receive+0xbdc>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	441a      	add	r2, r3
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a964:	2b00      	cmp	r3, #0
 800a966:	dd4b      	ble.n	800aa00 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	b29a      	uxth	r2, r3
 800a970:	4b7e      	ldr	r3, [pc, #504]	; (800ab6c <tcp_receive+0xbdc>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	b29b      	uxth	r3, r3
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	b29a      	uxth	r2, r3
 800a97a:	4b7d      	ldr	r3, [pc, #500]	; (800ab70 <tcp_receive+0xbe0>)
 800a97c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a97e:	4b7c      	ldr	r3, [pc, #496]	; (800ab70 <tcp_receive+0xbe0>)
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	899b      	ldrh	r3, [r3, #12]
 800a984:	b29b      	uxth	r3, r3
 800a986:	4618      	mov	r0, r3
 800a988:	f7fb f966 	bl	8005c58 <lwip_htons>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <tcp_receive+0xa12>
                inseg.len -= 1;
 800a996:	4b76      	ldr	r3, [pc, #472]	; (800ab70 <tcp_receive+0xbe0>)
 800a998:	891b      	ldrh	r3, [r3, #8]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	4b74      	ldr	r3, [pc, #464]	; (800ab70 <tcp_receive+0xbe0>)
 800a9a0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a9a2:	4b73      	ldr	r3, [pc, #460]	; (800ab70 <tcp_receive+0xbe0>)
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	4a72      	ldr	r2, [pc, #456]	; (800ab70 <tcp_receive+0xbe0>)
 800a9a8:	8912      	ldrh	r2, [r2, #8]
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fc f975 	bl	8006c9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a9b2:	4b6f      	ldr	r3, [pc, #444]	; (800ab70 <tcp_receive+0xbe0>)
 800a9b4:	891c      	ldrh	r4, [r3, #8]
 800a9b6:	4b6e      	ldr	r3, [pc, #440]	; (800ab70 <tcp_receive+0xbe0>)
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	899b      	ldrh	r3, [r3, #12]
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fb f94a 	bl	8005c58 <lwip_htons>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <tcp_receive+0xa42>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e000      	b.n	800a9d4 <tcp_receive+0xa44>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4423      	add	r3, r4
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	4b63      	ldr	r3, [pc, #396]	; (800ab68 <tcp_receive+0xbd8>)
 800a9da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a9dc:	4b62      	ldr	r3, [pc, #392]	; (800ab68 <tcp_receive+0xbd8>)
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4b62      	ldr	r3, [pc, #392]	; (800ab6c <tcp_receive+0xbdc>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	441a      	add	r2, r3
 800a9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d006      	beq.n	800aa00 <tcp_receive+0xa70>
 800a9f2:	4b60      	ldr	r3, [pc, #384]	; (800ab74 <tcp_receive+0xbe4>)
 800a9f4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800a9f8:	495f      	ldr	r1, [pc, #380]	; (800ab78 <tcp_receive+0xbe8>)
 800a9fa:	4860      	ldr	r0, [pc, #384]	; (800ab7c <tcp_receive+0xbec>)
 800a9fc:	f004 fc06 	bl	800f20c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa04:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800aa06:	4b58      	ldr	r3, [pc, #352]	; (800ab68 <tcp_receive+0xbd8>)
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4b57      	ldr	r3, [pc, #348]	; (800ab6c <tcp_receive+0xbdc>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	441a      	add	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa1a:	4b53      	ldr	r3, [pc, #332]	; (800ab68 <tcp_receive+0xbd8>)
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d206      	bcs.n	800aa30 <tcp_receive+0xaa0>
 800aa22:	4b54      	ldr	r3, [pc, #336]	; (800ab74 <tcp_receive+0xbe4>)
 800aa24:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800aa28:	4955      	ldr	r1, [pc, #340]	; (800ab80 <tcp_receive+0xbf0>)
 800aa2a:	4854      	ldr	r0, [pc, #336]	; (800ab7c <tcp_receive+0xbec>)
 800aa2c:	f004 fbee 	bl	800f20c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa34:	4b4c      	ldr	r3, [pc, #304]	; (800ab68 <tcp_receive+0xbd8>)
 800aa36:	881b      	ldrh	r3, [r3, #0]
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7fd f8ed 	bl	8007c20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aa46:	4b4a      	ldr	r3, [pc, #296]	; (800ab70 <tcp_receive+0xbe0>)
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	891b      	ldrh	r3, [r3, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d006      	beq.n	800aa5e <tcp_receive+0xace>
          recv_data = inseg.p;
 800aa50:	4b47      	ldr	r3, [pc, #284]	; (800ab70 <tcp_receive+0xbe0>)
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	4a4b      	ldr	r2, [pc, #300]	; (800ab84 <tcp_receive+0xbf4>)
 800aa56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aa58:	4b45      	ldr	r3, [pc, #276]	; (800ab70 <tcp_receive+0xbe0>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa5e:	4b44      	ldr	r3, [pc, #272]	; (800ab70 <tcp_receive+0xbe0>)
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	899b      	ldrh	r3, [r3, #12]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fb f8f6 	bl	8005c58 <lwip_htons>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 80b4 	beq.w	800abe0 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aa78:	4b43      	ldr	r3, [pc, #268]	; (800ab88 <tcp_receive+0xbf8>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f043 0320 	orr.w	r3, r3, #32
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	4b41      	ldr	r3, [pc, #260]	; (800ab88 <tcp_receive+0xbf8>)
 800aa84:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aa86:	e0ab      	b.n	800abe0 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa8c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	4a35      	ldr	r2, [pc, #212]	; (800ab6c <tcp_receive+0xbdc>)
 800aa98:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	891b      	ldrh	r3, [r3, #8]
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	899b      	ldrh	r3, [r3, #12]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fb f8d5 	bl	8005c58 <lwip_htons>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <tcp_receive+0xb2c>
 800aab8:	2301      	movs	r3, #1
 800aaba:	e000      	b.n	800aabe <tcp_receive+0xb2e>
 800aabc:	2300      	movs	r3, #0
 800aabe:	191a      	adds	r2, r3, r4
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	441a      	add	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aace:	461c      	mov	r4, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	891b      	ldrh	r3, [r3, #8]
 800aad4:	461d      	mov	r5, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	899b      	ldrh	r3, [r3, #12]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fb f8ba 	bl	8005c58 <lwip_htons>
 800aae4:	4603      	mov	r3, r0
 800aae6:	f003 0303 	and.w	r3, r3, #3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <tcp_receive+0xb62>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e000      	b.n	800aaf4 <tcp_receive+0xb64>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	442b      	add	r3, r5
 800aaf6:	429c      	cmp	r4, r3
 800aaf8:	d206      	bcs.n	800ab08 <tcp_receive+0xb78>
 800aafa:	4b1e      	ldr	r3, [pc, #120]	; (800ab74 <tcp_receive+0xbe4>)
 800aafc:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800ab00:	4922      	ldr	r1, [pc, #136]	; (800ab8c <tcp_receive+0xbfc>)
 800ab02:	481e      	ldr	r0, [pc, #120]	; (800ab7c <tcp_receive+0xbec>)
 800ab04:	f004 fb82 	bl	800f20c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	891b      	ldrh	r3, [r3, #8]
 800ab0c:	461c      	mov	r4, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	899b      	ldrh	r3, [r3, #12]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fb f89e 	bl	8005c58 <lwip_htons>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f003 0303 	and.w	r3, r3, #3
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <tcp_receive+0xb9a>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <tcp_receive+0xb9c>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	1919      	adds	r1, r3, r4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ab32:	b28b      	uxth	r3, r1
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7fd f86f 	bl	8007c20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	891b      	ldrh	r3, [r3, #8]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d028      	beq.n	800ab9e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <tcp_receive+0xbf4>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d01d      	beq.n	800ab90 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800ab54:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <tcp_receive+0xbf4>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	4610      	mov	r0, r2
 800ab60:	f7fc fadc 	bl	800711c <pbuf_cat>
 800ab64:	e018      	b.n	800ab98 <tcp_receive+0xc08>
 800ab66:	bf00      	nop
 800ab68:	20000542 	.word	0x20000542
 800ab6c:	20000538 	.word	0x20000538
 800ab70:	20000518 	.word	0x20000518
 800ab74:	08011268 	.word	0x08011268
 800ab78:	0801156c 	.word	0x0801156c
 800ab7c:	080112ac 	.word	0x080112ac
 800ab80:	080115a8 	.word	0x080115a8
 800ab84:	20000548 	.word	0x20000548
 800ab88:	20000545 	.word	0x20000545
 800ab8c:	080115c8 	.word	0x080115c8
            } else {
              recv_data = cseg->p;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	4a71      	ldr	r2, [pc, #452]	; (800ad5c <tcp_receive+0xdcc>)
 800ab96:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	899b      	ldrh	r3, [r3, #12]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fb f856 	bl	8005c58 <lwip_htons>
 800abac:	4603      	mov	r3, r0
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00d      	beq.n	800abd2 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800abb6:	4b6a      	ldr	r3, [pc, #424]	; (800ad60 <tcp_receive+0xdd0>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	f043 0320 	orr.w	r3, r3, #32
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	4b67      	ldr	r3, [pc, #412]	; (800ad60 <tcp_receive+0xdd0>)
 800abc2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	7d1b      	ldrb	r3, [r3, #20]
 800abc8:	2b04      	cmp	r3, #4
 800abca:	d102      	bne.n	800abd2 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2207      	movs	r2, #7
 800abd0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f7fd fcb0 	bl	8008540 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d008      	beq.n	800abfa <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800abf4:	429a      	cmp	r2, r3
 800abf6:	f43f af47 	beq.w	800aa88 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7e9b      	ldrb	r3, [r3, #26]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00e      	beq.n	800ac24 <tcp_receive+0xc94>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	7e9b      	ldrb	r3, [r3, #26]
 800ac0a:	f023 0301 	bic.w	r3, r3, #1
 800ac0e:	b2da      	uxtb	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	769a      	strb	r2, [r3, #26]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	7e9b      	ldrb	r3, [r3, #26]
 800ac18:	f043 0302 	orr.w	r3, r3, #2
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ac22:	e181      	b.n	800af28 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7e9b      	ldrb	r3, [r3, #26]
 800ac28:	f043 0301 	orr.w	r3, r3, #1
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ac32:	e179      	b.n	800af28 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 f8c3 	bl	800bdc0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ac42:	4848      	ldr	r0, [pc, #288]	; (800ad64 <tcp_receive+0xdd4>)
 800ac44:	f7fd fca2 	bl	800858c <tcp_seg_copy>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800ac4e:	e16b      	b.n	800af28 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800ac50:	2300      	movs	r3, #0
 800ac52:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac5a:	e150      	b.n	800aefe <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	4b41      	ldr	r3, [pc, #260]	; (800ad68 <tcp_receive+0xdd8>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d11d      	bne.n	800aca6 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ac6a:	4b3e      	ldr	r3, [pc, #248]	; (800ad64 <tcp_receive+0xdd4>)
 800ac6c:	891a      	ldrh	r2, [r3, #8]
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	891b      	ldrh	r3, [r3, #8]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	f240 8148 	bls.w	800af08 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800ac78:	483a      	ldr	r0, [pc, #232]	; (800ad64 <tcp_receive+0xdd4>)
 800ac7a:	f7fd fc87 	bl	800858c <tcp_seg_copy>
 800ac7e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 8142 	beq.w	800af0c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800ac88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <tcp_receive+0xd06>
                    prev->next = cseg;
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	e002      	b.n	800ac9c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ac9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7ff f900 	bl	8009ea4 <tcp_oos_insert_segment>
                }
                break;
 800aca4:	e132      	b.n	800af0c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d117      	bne.n	800acdc <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800acac:	4b2e      	ldr	r3, [pc, #184]	; (800ad68 <tcp_receive+0xdd8>)
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	da57      	bge.n	800ad6c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800acbc:	4829      	ldr	r0, [pc, #164]	; (800ad64 <tcp_receive+0xdd4>)
 800acbe:	f7fd fc65 	bl	800858c <tcp_seg_copy>
 800acc2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f000 8122 	beq.w	800af10 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800acd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff f8e5 	bl	8009ea4 <tcp_oos_insert_segment>
                  }
                  break;
 800acda:	e119      	b.n	800af10 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800acdc:	4b22      	ldr	r3, [pc, #136]	; (800ad68 <tcp_receive+0xdd8>)
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	3b01      	subs	r3, #1
 800acea:	2b00      	cmp	r3, #0
 800acec:	db3e      	blt.n	800ad6c <tcp_receive+0xddc>
 800acee:	4b1e      	ldr	r3, [pc, #120]	; (800ad68 <tcp_receive+0xdd8>)
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	3301      	adds	r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	dc35      	bgt.n	800ad6c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800ad00:	4818      	ldr	r0, [pc, #96]	; (800ad64 <tcp_receive+0xdd4>)
 800ad02:	f7fd fc43 	bl	800858c <tcp_seg_copy>
 800ad06:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 8102 	beq.w	800af14 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ad10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad18:	8912      	ldrh	r2, [r2, #8]
 800ad1a:	441a      	add	r2, r3
 800ad1c:	4b12      	ldr	r3, [pc, #72]	; (800ad68 <tcp_receive+0xdd8>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dd12      	ble.n	800ad4c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ad26:	4b10      	ldr	r3, [pc, #64]	; (800ad68 <tcp_receive+0xdd8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	891b      	ldrh	r3, [r3, #8]
 800ad44:	4619      	mov	r1, r3
 800ad46:	4610      	mov	r0, r2
 800ad48:	f7fb ffa8 	bl	8006c9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ad4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ad52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff f8a5 	bl	8009ea4 <tcp_oos_insert_segment>
                  }
                  break;
 800ad5a:	e0db      	b.n	800af14 <tcp_receive+0xf84>
 800ad5c:	20000548 	.word	0x20000548
 800ad60:	20000545 	.word	0x20000545
 800ad64:	20000518 	.word	0x20000518
 800ad68:	20000538 	.word	0x20000538
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f040 80bf 	bne.w	800aef4 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ad76:	4b7c      	ldr	r3, [pc, #496]	; (800af68 <tcp_receive+0xfd8>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f340 80b6 	ble.w	800aef4 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	899b      	ldrh	r3, [r3, #12]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fa ff61 	bl	8005c58 <lwip_htons>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f040 80bb 	bne.w	800af18 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ada2:	4872      	ldr	r0, [pc, #456]	; (800af6c <tcp_receive+0xfdc>)
 800ada4:	f7fd fbf2 	bl	800858c <tcp_seg_copy>
 800ada8:	4602      	mov	r2, r0
 800adaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adac:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 80b2 	beq.w	800af1c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800adb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adc0:	8912      	ldrh	r2, [r2, #8]
 800adc2:	441a      	add	r2, r3
 800adc4:	4b68      	ldr	r3, [pc, #416]	; (800af68 <tcp_receive+0xfd8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	2b00      	cmp	r3, #0
 800adcc:	dd12      	ble.n	800adf4 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800adce:	4b66      	ldr	r3, [pc, #408]	; (800af68 <tcp_receive+0xfd8>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	b29a      	uxth	r2, r3
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	b29b      	uxth	r3, r3
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	b29a      	uxth	r2, r3
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ade4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	891b      	ldrh	r3, [r3, #8]
 800adec:	4619      	mov	r1, r3
 800adee:	4610      	mov	r0, r2
 800adf0:	f7fb ff54 	bl	8006c9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800adf4:	4b5e      	ldr	r3, [pc, #376]	; (800af70 <tcp_receive+0xfe0>)
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	461a      	mov	r2, r3
 800adfa:	4b5b      	ldr	r3, [pc, #364]	; (800af68 <tcp_receive+0xfd8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	441a      	add	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae08:	440b      	add	r3, r1
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f340 8085 	ble.w	800af1c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ae12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	899b      	ldrh	r3, [r3, #12]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fa ff1b 	bl	8005c58 <lwip_htons>
 800ae22:	4603      	mov	r3, r0
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01e      	beq.n	800ae6a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	899b      	ldrh	r3, [r3, #12]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae3a:	b29c      	uxth	r4, r3
 800ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	899b      	ldrh	r3, [r3, #12]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7fa ff06 	bl	8005c58 <lwip_htons>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fa feff 	bl	8005c58 <lwip_htons>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	4322      	orrs	r2, r4
 800ae66:	b292      	uxth	r2, r2
 800ae68:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae74:	4413      	add	r3, r2
 800ae76:	b299      	uxth	r1, r3
 800ae78:	4b3b      	ldr	r3, [pc, #236]	; (800af68 <tcp_receive+0xfd8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	1a8a      	subs	r2, r1, r2
 800ae84:	b292      	uxth	r2, r2
 800ae86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	891b      	ldrh	r3, [r3, #8]
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f7fb ff00 	bl	8006c9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	891c      	ldrh	r4, [r3, #8]
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	899b      	ldrh	r3, [r3, #12]
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fa fed3 	bl	8005c58 <lwip_htons>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f003 0303 	and.w	r3, r3, #3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <tcp_receive+0xf30>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e000      	b.n	800aec2 <tcp_receive+0xf32>
 800aec0:	2300      	movs	r3, #0
 800aec2:	4423      	add	r3, r4
 800aec4:	b29a      	uxth	r2, r3
 800aec6:	4b2a      	ldr	r3, [pc, #168]	; (800af70 <tcp_receive+0xfe0>)
 800aec8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aeca:	4b29      	ldr	r3, [pc, #164]	; (800af70 <tcp_receive+0xfe0>)
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	4b25      	ldr	r3, [pc, #148]	; (800af68 <tcp_receive+0xfd8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	441a      	add	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aede:	440b      	add	r3, r1
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d01b      	beq.n	800af1c <tcp_receive+0xf8c>
 800aee4:	4b23      	ldr	r3, [pc, #140]	; (800af74 <tcp_receive+0xfe4>)
 800aee6:	f240 627a 	movw	r2, #1658	; 0x67a
 800aeea:	4923      	ldr	r1, [pc, #140]	; (800af78 <tcp_receive+0xfe8>)
 800aeec:	4823      	ldr	r0, [pc, #140]	; (800af7c <tcp_receive+0xfec>)
 800aeee:	f004 f98d 	bl	800f20c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800aef2:	e013      	b.n	800af1c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800aef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	f47f aeab 	bne.w	800ac5c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800af06:	e00f      	b.n	800af28 <tcp_receive+0xf98>
                break;
 800af08:	bf00      	nop
 800af0a:	e00d      	b.n	800af28 <tcp_receive+0xf98>
                break;
 800af0c:	bf00      	nop
 800af0e:	e00b      	b.n	800af28 <tcp_receive+0xf98>
                  break;
 800af10:	bf00      	nop
 800af12:	e009      	b.n	800af28 <tcp_receive+0xf98>
                  break;
 800af14:	bf00      	nop
 800af16:	e007      	b.n	800af28 <tcp_receive+0xf98>
                  break;
 800af18:	bf00      	nop
 800af1a:	e005      	b.n	800af28 <tcp_receive+0xf98>
                break;
 800af1c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800af1e:	e003      	b.n	800af28 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 ff4d 	bl	800bdc0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800af26:	e01a      	b.n	800af5e <tcp_receive+0xfce>
 800af28:	e019      	b.n	800af5e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800af2a:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <tcp_receive+0xfd8>)
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	db0a      	blt.n	800af4e <tcp_receive+0xfbe>
 800af38:	4b0b      	ldr	r3, [pc, #44]	; (800af68 <tcp_receive+0xfd8>)
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af40:	6879      	ldr	r1, [r7, #4]
 800af42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af44:	440b      	add	r3, r1
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	3301      	adds	r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd07      	ble.n	800af5e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7e9b      	ldrb	r3, [r3, #26]
 800af52:	f043 0302 	orr.w	r3, r3, #2
 800af56:	b2da      	uxtb	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800af5c:	e7ff      	b.n	800af5e <tcp_receive+0xfce>
 800af5e:	bf00      	nop
 800af60:	3734      	adds	r7, #52	; 0x34
 800af62:	46bd      	mov	sp, r7
 800af64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af66:	bf00      	nop
 800af68:	20000538 	.word	0x20000538
 800af6c:	20000518 	.word	0x20000518
 800af70:	20000542 	.word	0x20000542
 800af74:	08011268 	.word	0x08011268
 800af78:	08011534 	.word	0x08011534
 800af7c:	080112ac 	.word	0x080112ac

0800af80 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800af86:	4b17      	ldr	r3, [pc, #92]	; (800afe4 <tcp_getoptbyte+0x64>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d005      	beq.n	800af9a <tcp_getoptbyte+0x1a>
 800af8e:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <tcp_getoptbyte+0x68>)
 800af90:	881a      	ldrh	r2, [r3, #0]
 800af92:	4b16      	ldr	r3, [pc, #88]	; (800afec <tcp_getoptbyte+0x6c>)
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d20e      	bcs.n	800afb8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800af9a:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <tcp_getoptbyte+0x70>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3314      	adds	r3, #20
 800afa0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800afa2:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <tcp_getoptbyte+0x68>)
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	1c5a      	adds	r2, r3, #1
 800afa8:	b291      	uxth	r1, r2
 800afaa:	4a0f      	ldr	r2, [pc, #60]	; (800afe8 <tcp_getoptbyte+0x68>)
 800afac:	8011      	strh	r1, [r2, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	4413      	add	r3, r2
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	e010      	b.n	800afda <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800afb8:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <tcp_getoptbyte+0x68>)
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	1c5a      	adds	r2, r3, #1
 800afbe:	b291      	uxth	r1, r2
 800afc0:	4a09      	ldr	r2, [pc, #36]	; (800afe8 <tcp_getoptbyte+0x68>)
 800afc2:	8011      	strh	r1, [r2, #0]
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	4b09      	ldr	r3, [pc, #36]	; (800afec <tcp_getoptbyte+0x6c>)
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800afd0:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <tcp_getoptbyte+0x64>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	79fb      	ldrb	r3, [r7, #7]
 800afd6:	4413      	add	r3, r2
 800afd8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afda:	4618      	mov	r0, r3
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	bc80      	pop	{r7}
 800afe2:	4770      	bx	lr
 800afe4:	20000530 	.word	0x20000530
 800afe8:	20000534 	.word	0x20000534
 800afec:	2000052e 	.word	0x2000052e
 800aff0:	20000528 	.word	0x20000528

0800aff4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800affc:	4b2e      	ldr	r3, [pc, #184]	; (800b0b8 <tcp_parseopt+0xc4>)
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d055      	beq.n	800b0b0 <tcp_parseopt+0xbc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b004:	4b2d      	ldr	r3, [pc, #180]	; (800b0bc <tcp_parseopt+0xc8>)
 800b006:	2200      	movs	r2, #0
 800b008:	801a      	strh	r2, [r3, #0]
 800b00a:	e045      	b.n	800b098 <tcp_parseopt+0xa4>
      u8_t opt = tcp_getoptbyte();
 800b00c:	f7ff ffb8 	bl	800af80 <tcp_getoptbyte>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d006      	beq.n	800b028 <tcp_parseopt+0x34>
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	dc2b      	bgt.n	800b076 <tcp_parseopt+0x82>
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d041      	beq.n	800b0a6 <tcp_parseopt+0xb2>
 800b022:	2b01      	cmp	r3, #1
 800b024:	d127      	bne.n	800b076 <tcp_parseopt+0x82>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case LWIP_TCP_OPT_NOP:
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
 800b026:	e037      	b.n	800b098 <tcp_parseopt+0xa4>
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b028:	f7ff ffaa 	bl	800af80 <tcp_getoptbyte>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d13b      	bne.n	800b0aa <tcp_parseopt+0xb6>
 800b032:	4b22      	ldr	r3, [pc, #136]	; (800b0bc <tcp_parseopt+0xc8>)
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	3301      	adds	r3, #1
 800b038:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <tcp_parseopt+0xc4>)
 800b03a:	8812      	ldrh	r2, [r2, #0]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	da34      	bge.n	800b0aa <tcp_parseopt+0xb6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800b040:	f7ff ff9e 	bl	800af80 <tcp_getoptbyte>
 800b044:	4603      	mov	r3, r0
 800b046:	b29b      	uxth	r3, r3
 800b048:	021b      	lsls	r3, r3, #8
 800b04a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800b04c:	f7ff ff98 	bl	800af80 <tcp_getoptbyte>
 800b050:	4603      	mov	r3, r0
 800b052:	b29a      	uxth	r2, r3
 800b054:	89bb      	ldrh	r3, [r7, #12]
 800b056:	4313      	orrs	r3, r2
 800b058:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b05a:	89bb      	ldrh	r3, [r7, #12]
 800b05c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b060:	d804      	bhi.n	800b06c <tcp_parseopt+0x78>
 800b062:	89bb      	ldrh	r3, [r7, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d001      	beq.n	800b06c <tcp_parseopt+0x78>
 800b068:	89ba      	ldrh	r2, [r7, #12]
 800b06a:	e001      	b.n	800b070 <tcp_parseopt+0x7c>
 800b06c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800b074:	e010      	b.n	800b098 <tcp_parseopt+0xa4>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800b076:	f7ff ff83 	bl	800af80 <tcp_getoptbyte>
 800b07a:	4603      	mov	r3, r0
 800b07c:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800b07e:	7afb      	ldrb	r3, [r7, #11]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d914      	bls.n	800b0ae <tcp_parseopt+0xba>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800b084:	7afb      	ldrb	r3, [r7, #11]
 800b086:	b29a      	uxth	r2, r3
 800b088:	4b0c      	ldr	r3, [pc, #48]	; (800b0bc <tcp_parseopt+0xc8>)
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	4413      	add	r3, r2
 800b08e:	b29b      	uxth	r3, r3
 800b090:	3b02      	subs	r3, #2
 800b092:	b29a      	uxth	r2, r3
 800b094:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <tcp_parseopt+0xc8>)
 800b096:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b098:	4b08      	ldr	r3, [pc, #32]	; (800b0bc <tcp_parseopt+0xc8>)
 800b09a:	881a      	ldrh	r2, [r3, #0]
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <tcp_parseopt+0xc4>)
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d3b3      	bcc.n	800b00c <tcp_parseopt+0x18>
 800b0a4:	e004      	b.n	800b0b0 <tcp_parseopt+0xbc>
        return;
 800b0a6:	bf00      	nop
 800b0a8:	e002      	b.n	800b0b0 <tcp_parseopt+0xbc>
          return;
 800b0aa:	bf00      	nop
 800b0ac:	e000      	b.n	800b0b0 <tcp_parseopt+0xbc>
          return;
 800b0ae:	bf00      	nop
      }
    }
  }
}
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	2000052c 	.word	0x2000052c
 800b0bc:	20000534 	.word	0x20000534

0800b0c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b0c4:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <tcp_trigger_input_pcb_close+0x1c>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	f043 0310 	orr.w	r3, r3, #16
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <tcp_trigger_input_pcb_close+0x1c>)
 800b0d0:	701a      	strb	r2, [r3, #0]
}
 800b0d2:	bf00      	nop
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bc80      	pop	{r7}
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	20000545 	.word	0x20000545

0800b0e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	607b      	str	r3, [r7, #4]
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	817b      	strh	r3, [r7, #10]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b0f2:	897a      	ldrh	r2, [r7, #10]
 800b0f4:	893b      	ldrh	r3, [r7, #8]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3314      	adds	r3, #20
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2200      	movs	r2, #0
 800b100:	4619      	mov	r1, r3
 800b102:	2001      	movs	r0, #1
 800b104:	f7fb fbcc 	bl	80068a0 <pbuf_alloc>
 800b108:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d056      	beq.n	800b1be <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b110:	897b      	ldrh	r3, [r7, #10]
 800b112:	3313      	adds	r3, #19
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	8952      	ldrh	r2, [r2, #10]
 800b118:	4293      	cmp	r3, r2
 800b11a:	db05      	blt.n	800b128 <tcp_output_alloc_header+0x48>
 800b11c:	4b2a      	ldr	r3, [pc, #168]	; (800b1c8 <tcp_output_alloc_header+0xe8>)
 800b11e:	2272      	movs	r2, #114	; 0x72
 800b120:	492a      	ldr	r1, [pc, #168]	; (800b1cc <tcp_output_alloc_header+0xec>)
 800b122:	482b      	ldr	r0, [pc, #172]	; (800b1d0 <tcp_output_alloc_header+0xf0>)
 800b124:	f004 f872 	bl	800f20c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	8adb      	ldrh	r3, [r3, #22]
 800b132:	4618      	mov	r0, r3
 800b134:	f7fa fd90 	bl	8005c58 <lwip_htons>
 800b138:	4603      	mov	r3, r0
 800b13a:	461a      	mov	r2, r3
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8b1b      	ldrh	r3, [r3, #24]
 800b144:	4618      	mov	r0, r3
 800b146:	f7fa fd87 	bl	8005c58 <lwip_htons>
 800b14a:	4603      	mov	r3, r0
 800b14c:	461a      	mov	r2, r3
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fa fd88 	bl	8005c72 <lwip_htonl>
 800b162:	4602      	mov	r2, r0
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800b168:	897b      	ldrh	r3, [r7, #10]
 800b16a:	089b      	lsrs	r3, r3, #2
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	3305      	adds	r3, #5
 800b170:	b29b      	uxth	r3, r3
 800b172:	031b      	lsls	r3, r3, #12
 800b174:	b29b      	uxth	r3, r3
 800b176:	f043 0310 	orr.w	r3, r3, #16
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fa fd6b 	bl	8005c58 <lwip_htons>
 800b182:	4603      	mov	r3, r0
 800b184:	461a      	mov	r2, r3
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fa fd62 	bl	8005c58 <lwip_htons>
 800b194:	4603      	mov	r3, r0
 800b196:	461a      	mov	r2, r3
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	741a      	strb	r2, [r3, #16]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	749a      	strb	r2, [r3, #18]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b1b8:	441a      	add	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b1be:	697b      	ldr	r3, [r7, #20]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	080115f0 	.word	0x080115f0
 800b1cc:	08011624 	.word	0x08011624
 800b1d0:	08011654 	.word	0x08011654

0800b1d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b1d4:	b590      	push	{r4, r7, lr}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d02d      	beq.n	800b240 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	e002      	b.n	800b1f2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1f8      	bne.n	800b1ec <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	899b      	ldrh	r3, [r3, #12]
 800b200:	b29b      	uxth	r3, r3
 800b202:	4618      	mov	r0, r3
 800b204:	f7fa fd28 	bl	8005c58 <lwip_htons>
 800b208:	4603      	mov	r3, r0
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d116      	bne.n	800b240 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	899b      	ldrh	r3, [r3, #12]
 800b218:	b29c      	uxth	r4, r3
 800b21a:	2001      	movs	r0, #1
 800b21c:	f7fa fd1c 	bl	8005c58 <lwip_htons>
 800b220:	4603      	mov	r3, r0
 800b222:	461a      	mov	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	4322      	orrs	r2, r4
 800b22a:	b292      	uxth	r2, r2
 800b22c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	7e9b      	ldrb	r3, [r3, #26]
 800b232:	f043 0320 	orr.w	r3, r3, #32
 800b236:	b2da      	uxtb	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800b23c:	2300      	movs	r3, #0
 800b23e:	e004      	b.n	800b24a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b240:	2101      	movs	r1, #1
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 fcc0 	bl	800bbc8 <tcp_enqueue_flags>
 800b248:	4603      	mov	r3, r0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd90      	pop	{r4, r7, pc}
	...

0800b254 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800b254:	b590      	push	{r4, r7, lr}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	603b      	str	r3, [r7, #0]
 800b260:	4613      	mov	r3, r2
 800b262:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b264:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b272:	2003      	movs	r0, #3
 800b274:	f7fb f902 	bl	800647c <memp_malloc>
 800b278:	6138      	str	r0, [r7, #16]
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d104      	bne.n	800b28a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f7fb fe7f 	bl	8006f84 <pbuf_free>
    return NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	e061      	b.n	800b34e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b290:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	891a      	ldrh	r2, [r3, #8]
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d205      	bcs.n	800b2b6 <tcp_create_segment+0x62>
 800b2aa:	4b2b      	ldr	r3, [pc, #172]	; (800b358 <tcp_create_segment+0x104>)
 800b2ac:	22ba      	movs	r2, #186	; 0xba
 800b2ae:	492b      	ldr	r1, [pc, #172]	; (800b35c <tcp_create_segment+0x108>)
 800b2b0:	482b      	ldr	r0, [pc, #172]	; (800b360 <tcp_create_segment+0x10c>)
 800b2b2:	f003 ffab 	bl	800f20c <iprintf>
  seg->len = p->tot_len - optlen;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	891a      	ldrh	r2, [r3, #8]
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800b2c6:	2114      	movs	r1, #20
 800b2c8:	68b8      	ldr	r0, [r7, #8]
 800b2ca:	f7fb fe37 	bl	8006f3c <pbuf_header>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b2d4:	6938      	ldr	r0, [r7, #16]
 800b2d6:	f7fd f933 	bl	8008540 <tcp_seg_free>
    return NULL;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e037      	b.n	800b34e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	8ada      	ldrh	r2, [r3, #22]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	68dc      	ldr	r4, [r3, #12]
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fa fcb1 	bl	8005c58 <lwip_htons>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8b1a      	ldrh	r2, [r3, #24]
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	68dc      	ldr	r4, [r3, #12]
 800b302:	4610      	mov	r0, r2
 800b304:	f7fa fca8 	bl	8005c58 <lwip_htons>
 800b308:	4603      	mov	r3, r0
 800b30a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	68dc      	ldr	r4, [r3, #12]
 800b310:	6838      	ldr	r0, [r7, #0]
 800b312:	f7fa fcae 	bl	8005c72 <lwip_htonl>
 800b316:	4603      	mov	r3, r0
 800b318:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
 800b31c:	089b      	lsrs	r3, r3, #2
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	b29b      	uxth	r3, r3
 800b322:	3305      	adds	r3, #5
 800b324:	b29b      	uxth	r3, r3
 800b326:	031b      	lsls	r3, r3, #12
 800b328:	b29a      	uxth	r2, r3
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	4313      	orrs	r3, r2
 800b330:	b29a      	uxth	r2, r3
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	68dc      	ldr	r4, [r3, #12]
 800b336:	4610      	mov	r0, r2
 800b338:	f7fa fc8e 	bl	8005c58 <lwip_htons>
 800b33c:	4603      	mov	r3, r0
 800b33e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	2200      	movs	r2, #0
 800b346:	749a      	strb	r2, [r3, #18]
 800b348:	2200      	movs	r2, #0
 800b34a:	74da      	strb	r2, [r3, #19]
  return seg;
 800b34c:	693b      	ldr	r3, [r7, #16]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	bd90      	pop	{r4, r7, pc}
 800b356:	bf00      	nop
 800b358:	080115f0 	.word	0x080115f0
 800b35c:	0801167c 	.word	0x0801167c
 800b360:	08011654 	.word	0x08011654

0800b364 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	607b      	str	r3, [r7, #4]
 800b36c:	4603      	mov	r3, r0
 800b36e:	73fb      	strb	r3, [r7, #15]
 800b370:	460b      	mov	r3, r1
 800b372:	81bb      	strh	r3, [r7, #12]
 800b374:	4613      	mov	r3, r2
 800b376:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b378:	89bb      	ldrh	r3, [r7, #12]
 800b37a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b37c:	89ba      	ldrh	r2, [r7, #12]
 800b37e:	897b      	ldrh	r3, [r7, #10]
 800b380:	429a      	cmp	r2, r3
 800b382:	d221      	bcs.n	800b3c8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b384:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b388:	f003 0302 	and.w	r3, r3, #2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d111      	bne.n	800b3b4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	7e9b      	ldrb	r3, [r3, #26]
 800b394:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d115      	bne.n	800b3c8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800b39c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d007      	beq.n	800b3b4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d103      	bne.n	800b3b4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d009      	beq.n	800b3c8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b3b4:	89bb      	ldrh	r3, [r7, #12]
 800b3b6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b3ba:	f023 0203 	bic.w	r2, r3, #3
 800b3be:	897b      	ldrh	r3, [r7, #10]
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	bf28      	it	cs
 800b3c4:	4613      	movcs	r3, r2
 800b3c6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b3c8:	8af9      	ldrh	r1, [r7, #22]
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fb fa66 	bl	80068a0 <pbuf_alloc>
 800b3d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e019      	b.n	800b414 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d006      	beq.n	800b3f6 <tcp_pbuf_prealloc+0x92>
 800b3e8:	4b0c      	ldr	r3, [pc, #48]	; (800b41c <tcp_pbuf_prealloc+0xb8>)
 800b3ea:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b3ee:	490c      	ldr	r1, [pc, #48]	; (800b420 <tcp_pbuf_prealloc+0xbc>)
 800b3f0:	480c      	ldr	r0, [pc, #48]	; (800b424 <tcp_pbuf_prealloc+0xc0>)
 800b3f2:	f003 ff0b 	bl	800f20c <iprintf>
  *oversize = p->len - length;
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	895a      	ldrh	r2, [r3, #10]
 800b3fa:	89bb      	ldrh	r3, [r7, #12]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	89ba      	ldrh	r2, [r7, #12]
 800b408:	811a      	strh	r2, [r3, #8]
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	891a      	ldrh	r2, [r3, #8]
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	815a      	strh	r2, [r3, #10]
  return p;
 800b412:	693b      	ldr	r3, [r7, #16]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	080115f0 	.word	0x080115f0
 800b420:	08011694 	.word	0x08011694
 800b424:	08011654 	.word	0x08011654

0800b428 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	7d1b      	ldrb	r3, [r3, #20]
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d00e      	beq.n	800b45a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b440:	2b07      	cmp	r3, #7
 800b442:	d00a      	beq.n	800b45a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d006      	beq.n	800b45a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b450:	2b03      	cmp	r3, #3
 800b452:	d002      	beq.n	800b45a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b454:	f06f 030a 	mvn.w	r3, #10
 800b458:	e04f      	b.n	800b4fa <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800b45a:	887b      	ldrh	r3, [r7, #2]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <tcp_write_checks+0x3c>
    return ERR_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	e04a      	b.n	800b4fa <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b46a:	887a      	ldrh	r2, [r7, #2]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d909      	bls.n	800b484 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	7e9b      	ldrb	r3, [r3, #26]
 800b474:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	e03a      	b.n	800b4fa <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b48a:	2b08      	cmp	r3, #8
 800b48c:	d806      	bhi.n	800b49c <tcp_write_checks+0x74>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b494:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800b498:	4293      	cmp	r3, r2
 800b49a:	d909      	bls.n	800b4b0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	7e9b      	ldrb	r3, [r3, #26]
 800b4a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800b4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ae:	e024      	b.n	800b4fa <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00f      	beq.n	800b4da <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d11a      	bne.n	800b4f8 <tcp_write_checks+0xd0>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d116      	bne.n	800b4f8 <tcp_write_checks+0xd0>
 800b4ca:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <tcp_write_checks+0xdc>)
 800b4cc:	f240 1255 	movw	r2, #341	; 0x155
 800b4d0:	490d      	ldr	r1, [pc, #52]	; (800b508 <tcp_write_checks+0xe0>)
 800b4d2:	480e      	ldr	r0, [pc, #56]	; (800b50c <tcp_write_checks+0xe4>)
 800b4d4:	f003 fe9a 	bl	800f20c <iprintf>
 800b4d8:	e00e      	b.n	800b4f8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d103      	bne.n	800b4ea <tcp_write_checks+0xc2>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d006      	beq.n	800b4f8 <tcp_write_checks+0xd0>
 800b4ea:	4b06      	ldr	r3, [pc, #24]	; (800b504 <tcp_write_checks+0xdc>)
 800b4ec:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b4f0:	4907      	ldr	r1, [pc, #28]	; (800b510 <tcp_write_checks+0xe8>)
 800b4f2:	4806      	ldr	r0, [pc, #24]	; (800b50c <tcp_write_checks+0xe4>)
 800b4f4:	f003 fe8a 	bl	800f20c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	080115f0 	.word	0x080115f0
 800b508:	080116a8 	.word	0x080116a8
 800b50c:	08011654 	.word	0x08011654
 800b510:	080116e4 	.word	0x080116e4

0800b514 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b514:	b590      	push	{r4, r7, lr}
 800b516:	b09b      	sub	sp, #108	; 0x6c
 800b518:	af04      	add	r7, sp, #16
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	4611      	mov	r1, r2
 800b520:	461a      	mov	r2, r3
 800b522:	460b      	mov	r3, r1
 800b524:	80fb      	strh	r3, [r7, #6]
 800b526:	4613      	mov	r3, r2
 800b528:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	653b      	str	r3, [r7, #80]	; 0x50
 800b532:	2300      	movs	r3, #0
 800b534:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b536:	2300      	movs	r3, #0
 800b538:	64bb      	str	r3, [r7, #72]	; 0x48
 800b53a:	2300      	movs	r3, #0
 800b53c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b53e:	2300      	movs	r3, #0
 800b540:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800b54a:	2300      	movs	r3, #0
 800b54c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b554:	2300      	movs	r3, #0
 800b556:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b558:	2300      	movs	r3, #0
 800b55a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b562:	085b      	lsrs	r3, r3, #1
 800b564:	b29a      	uxth	r2, r3
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b56a:	4293      	cmp	r3, r2
 800b56c:	bf28      	it	cs
 800b56e:	4613      	movcs	r3, r2
 800b570:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b574:	2b00      	cmp	r3, #0
 800b576:	d102      	bne.n	800b57e <tcp_write+0x6a>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b57c:	e000      	b.n	800b580 <tcp_write+0x6c>
 800b57e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b580:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d109      	bne.n	800b59c <tcp_write+0x88>
 800b588:	4b92      	ldr	r3, [pc, #584]	; (800b7d4 <tcp_write+0x2c0>)
 800b58a:	f240 1291 	movw	r2, #401	; 0x191
 800b58e:	4992      	ldr	r1, [pc, #584]	; (800b7d8 <tcp_write+0x2c4>)
 800b590:	4892      	ldr	r0, [pc, #584]	; (800b7dc <tcp_write+0x2c8>)
 800b592:	f003 fe3b 	bl	800f20c <iprintf>
 800b596:	f06f 030f 	mvn.w	r3, #15
 800b59a:	e30a      	b.n	800bbb2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b59c:	88fb      	ldrh	r3, [r7, #6]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f7ff ff41 	bl	800b428 <tcp_write_checks>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b5ac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <tcp_write+0xa6>
    return err;
 800b5b4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b5b8:	e2fb      	b.n	800bbb2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5c0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 80f4 	beq.w	800b7b6 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5d2:	653b      	str	r3, [r7, #80]	; 0x50
 800b5d4:	e002      	b.n	800b5dc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800b5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1f8      	bne.n	800b5d6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800b5e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5e6:	7a9b      	ldrb	r3, [r3, #10]
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	b29b      	uxth	r3, r3
 800b5ec:	f003 0304 	and.w	r3, r3, #4
 800b5f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b5f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f6:	891b      	ldrh	r3, [r3, #8]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	8c3b      	ldrh	r3, [r7, #32]
 800b5fc:	440b      	add	r3, r1
 800b5fe:	429a      	cmp	r2, r3
 800b600:	da06      	bge.n	800b610 <tcp_write+0xfc>
 800b602:	4b74      	ldr	r3, [pc, #464]	; (800b7d4 <tcp_write+0x2c0>)
 800b604:	f240 12c7 	movw	r2, #455	; 0x1c7
 800b608:	4975      	ldr	r1, [pc, #468]	; (800b7e0 <tcp_write+0x2cc>)
 800b60a:	4874      	ldr	r0, [pc, #464]	; (800b7dc <tcp_write+0x2c8>)
 800b60c:	f003 fdfe 	bl	800f20c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b612:	891a      	ldrh	r2, [r3, #8]
 800b614:	8c3b      	ldrh	r3, [r7, #32]
 800b616:	4413      	add	r3, r2
 800b618:	b29b      	uxth	r3, r3
 800b61a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b626:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b628:	8a7b      	ldrh	r3, [r7, #18]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d026      	beq.n	800b67c <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b62e:	8a7b      	ldrh	r3, [r7, #18]
 800b630:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b632:	429a      	cmp	r2, r3
 800b634:	d206      	bcs.n	800b644 <tcp_write+0x130>
 800b636:	4b67      	ldr	r3, [pc, #412]	; (800b7d4 <tcp_write+0x2c0>)
 800b638:	f240 12d9 	movw	r2, #473	; 0x1d9
 800b63c:	4969      	ldr	r1, [pc, #420]	; (800b7e4 <tcp_write+0x2d0>)
 800b63e:	4867      	ldr	r0, [pc, #412]	; (800b7dc <tcp_write+0x2c8>)
 800b640:	f003 fde4 	bl	800f20c <iprintf>
      seg = last_unsent;
 800b644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b646:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b648:	8a7b      	ldrh	r3, [r7, #18]
 800b64a:	88fa      	ldrh	r2, [r7, #6]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	bf28      	it	cs
 800b650:	4613      	movcs	r3, r2
 800b652:	b29b      	uxth	r3, r3
 800b654:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b656:	4293      	cmp	r3, r2
 800b658:	bf28      	it	cs
 800b65a:	4613      	movcs	r3, r2
 800b65c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b65e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b662:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b664:	4413      	add	r3, r2
 800b666:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b66a:	8a7a      	ldrh	r2, [r7, #18]
 800b66c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	b29b      	uxth	r3, r3
 800b672:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b674:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b676:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b67c:	8a7b      	ldrh	r3, [r7, #18]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00b      	beq.n	800b69a <tcp_write+0x186>
 800b682:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b686:	88fb      	ldrh	r3, [r7, #6]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d006      	beq.n	800b69a <tcp_write+0x186>
 800b68c:	4b51      	ldr	r3, [pc, #324]	; (800b7d4 <tcp_write+0x2c0>)
 800b68e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b692:	4955      	ldr	r1, [pc, #340]	; (800b7e8 <tcp_write+0x2d4>)
 800b694:	4851      	ldr	r0, [pc, #324]	; (800b7dc <tcp_write+0x2c8>)
 800b696:	f003 fdb9 	bl	800f20c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b69a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b69e:	88fb      	ldrh	r3, [r7, #6]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	f080 8169 	bcs.w	800b978 <tcp_write+0x464>
 800b6a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 8165 	beq.w	800b978 <tcp_write+0x464>
 800b6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b0:	891b      	ldrh	r3, [r3, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 8160 	beq.w	800b978 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b6b8:	88fa      	ldrh	r2, [r7, #6]
 800b6ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6be:	1ad2      	subs	r2, r2, r3
 800b6c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	bfa8      	it	ge
 800b6c6:	4613      	movge	r3, r2
 800b6c8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b6ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6cc:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b6ce:	797b      	ldrb	r3, [r7, #5]
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d027      	beq.n	800b728 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b6d8:	f107 0012 	add.w	r0, r7, #18
 800b6dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b6de:	8bf9      	ldrh	r1, [r7, #30]
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	9302      	str	r3, [sp, #8]
 800b6e4:	797b      	ldrb	r3, [r7, #5]
 800b6e6:	9301      	str	r3, [sp, #4]
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2004      	movs	r0, #4
 800b6f0:	f7ff fe38 	bl	800b364 <tcp_pbuf_prealloc>
 800b6f4:	6578      	str	r0, [r7, #84]	; 0x54
 800b6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	f000 8228 	beq.w	800bb4e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b700:	6858      	ldr	r0, [r3, #4]
 800b702:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	4413      	add	r3, r2
 800b70a:	8bfa      	ldrh	r2, [r7, #30]
 800b70c:	4619      	mov	r1, r3
 800b70e:	f003 fd67 	bl	800f1e0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b712:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b714:	f7fb fcca 	bl	80070ac <pbuf_clen>
 800b718:	4603      	mov	r3, r0
 800b71a:	461a      	mov	r2, r3
 800b71c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b720:	4413      	add	r3, r2
 800b722:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b726:	e03f      	b.n	800b7a8 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34
 800b72e:	e002      	b.n	800b736 <tcp_write+0x222>
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
 800b736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f8      	bne.n	800b730 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b740:	7b1b      	ldrb	r3, [r3, #12]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d115      	bne.n	800b772 <tcp_write+0x25e>
 800b746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b74c:	8952      	ldrh	r2, [r2, #10]
 800b74e:	4413      	add	r3, r2
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	429a      	cmp	r2, r3
 800b754:	d10d      	bne.n	800b772 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b756:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d006      	beq.n	800b76c <tcp_write+0x258>
 800b75e:	4b1d      	ldr	r3, [pc, #116]	; (800b7d4 <tcp_write+0x2c0>)
 800b760:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b764:	4921      	ldr	r1, [pc, #132]	; (800b7ec <tcp_write+0x2d8>)
 800b766:	481d      	ldr	r0, [pc, #116]	; (800b7dc <tcp_write+0x2c8>)
 800b768:	f003 fd50 	bl	800f20c <iprintf>
          extendlen = seglen;
 800b76c:	8bfb      	ldrh	r3, [r7, #30]
 800b76e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b770:	e01a      	b.n	800b7a8 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b772:	8bfb      	ldrh	r3, [r7, #30]
 800b774:	2201      	movs	r2, #1
 800b776:	4619      	mov	r1, r3
 800b778:	2004      	movs	r0, #4
 800b77a:	f7fb f891 	bl	80068a0 <pbuf_alloc>
 800b77e:	6578      	str	r0, [r7, #84]	; 0x54
 800b780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 81e5 	beq.w	800bb52 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800b788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	441a      	add	r2, r3
 800b790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b792:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b794:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b796:	f7fb fc89 	bl	80070ac <pbuf_clen>
 800b79a:	4603      	mov	r3, r0
 800b79c:	461a      	mov	r2, r3
 800b79e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b7a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7ac:	8bfb      	ldrh	r3, [r7, #30]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b7b4:	e0e0      	b.n	800b978 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 80db 	beq.w	800b978 <tcp_write+0x464>
 800b7c2:	4b04      	ldr	r3, [pc, #16]	; (800b7d4 <tcp_write+0x2c0>)
 800b7c4:	f44f 7209 	mov.w	r2, #548	; 0x224
 800b7c8:	4909      	ldr	r1, [pc, #36]	; (800b7f0 <tcp_write+0x2dc>)
 800b7ca:	4804      	ldr	r0, [pc, #16]	; (800b7dc <tcp_write+0x2c8>)
 800b7cc:	f003 fd1e 	bl	800f20c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b7d0:	e0d2      	b.n	800b978 <tcp_write+0x464>
 800b7d2:	bf00      	nop
 800b7d4:	080115f0 	.word	0x080115f0
 800b7d8:	08011718 	.word	0x08011718
 800b7dc:	08011654 	.word	0x08011654
 800b7e0:	0801174c 	.word	0x0801174c
 800b7e4:	08011764 	.word	0x08011764
 800b7e8:	08011784 	.word	0x08011784
 800b7ec:	080117a4 	.word	0x080117a4
 800b7f0:	080117d0 	.word	0x080117d0
    struct pbuf *p;
    u16_t left = len - pos;
 800b7f4:	88fa      	ldrh	r2, [r7, #6]
 800b7f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b802:	b29b      	uxth	r3, r3
 800b804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b80a:	8b7a      	ldrh	r2, [r7, #26]
 800b80c:	8bbb      	ldrh	r3, [r7, #28]
 800b80e:	4293      	cmp	r3, r2
 800b810:	bf28      	it	cs
 800b812:	4613      	movcs	r3, r2
 800b814:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b816:	797b      	ldrb	r3, [r7, #5]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d036      	beq.n	800b88e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b824:	b29a      	uxth	r2, r3
 800b826:	8b3b      	ldrh	r3, [r7, #24]
 800b828:	4413      	add	r3, r2
 800b82a:	b299      	uxth	r1, r3
 800b82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bf0c      	ite	eq
 800b832:	2301      	moveq	r3, #1
 800b834:	2300      	movne	r3, #0
 800b836:	b2db      	uxtb	r3, r3
 800b838:	f107 0012 	add.w	r0, r7, #18
 800b83c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b83e:	9302      	str	r3, [sp, #8]
 800b840:	797b      	ldrb	r3, [r7, #5]
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	4603      	mov	r3, r0
 800b84a:	2000      	movs	r0, #0
 800b84c:	f7ff fd8a 	bl	800b364 <tcp_pbuf_prealloc>
 800b850:	6338      	str	r0, [r7, #48]	; 0x30
 800b852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b854:	2b00      	cmp	r3, #0
 800b856:	f000 817e 	beq.w	800bb56 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	895b      	ldrh	r3, [r3, #10]
 800b85e:	8b3a      	ldrh	r2, [r7, #24]
 800b860:	429a      	cmp	r2, r3
 800b862:	d906      	bls.n	800b872 <tcp_write+0x35e>
 800b864:	4b8f      	ldr	r3, [pc, #572]	; (800baa4 <tcp_write+0x590>)
 800b866:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b86a:	498f      	ldr	r1, [pc, #572]	; (800baa8 <tcp_write+0x594>)
 800b86c:	488f      	ldr	r0, [pc, #572]	; (800baac <tcp_write+0x598>)
 800b86e:	f003 fccd 	bl	800f20c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b87a:	18d0      	adds	r0, r2, r3
 800b87c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	4413      	add	r3, r2
 800b884:	8b3a      	ldrh	r2, [r7, #24]
 800b886:	4619      	mov	r1, r3
 800b888:	f003 fcaa 	bl	800f1e0 <memcpy>
 800b88c:	e02e      	b.n	800b8ec <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b88e:	8a7b      	ldrh	r3, [r7, #18]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d006      	beq.n	800b8a2 <tcp_write+0x38e>
 800b894:	4b83      	ldr	r3, [pc, #524]	; (800baa4 <tcp_write+0x590>)
 800b896:	f240 224b 	movw	r2, #587	; 0x24b
 800b89a:	4985      	ldr	r1, [pc, #532]	; (800bab0 <tcp_write+0x59c>)
 800b89c:	4883      	ldr	r0, [pc, #524]	; (800baac <tcp_write+0x598>)
 800b89e:	f003 fcb5 	bl	800f20c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b8a2:	8b3b      	ldrh	r3, [r7, #24]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	f7fa fff9 	bl	80068a0 <pbuf_alloc>
 800b8ae:	6178      	str	r0, [r7, #20]
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 8151 	beq.w	800bb5a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800b8b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	441a      	add	r2, r3
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f7fa ffe6 	bl	80068a0 <pbuf_alloc>
 800b8d4:	6338      	str	r0, [r7, #48]	; 0x30
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d103      	bne.n	800b8e4 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b8dc:	6978      	ldr	r0, [r7, #20]
 800b8de:	f7fb fb51 	bl	8006f84 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b8e2:	e13d      	b.n	800bb60 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b8e4:	6979      	ldr	r1, [r7, #20]
 800b8e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8e8:	f7fb fc18 	bl	800711c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b8ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8ee:	f7fb fbdd 	bl	80070ac <pbuf_clen>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800b900:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b904:	2b09      	cmp	r3, #9
 800b906:	d805      	bhi.n	800b914 <tcp_write+0x400>
 800b908:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b90c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800b910:	4293      	cmp	r3, r2
 800b912:	d903      	bls.n	800b91c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b916:	f7fb fb35 	bl	8006f84 <pbuf_free>
      goto memerr;
 800b91a:	e121      	b.n	800bb60 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b924:	441a      	add	r2, r3
 800b926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	4613      	mov	r3, r2
 800b92e:	2200      	movs	r2, #0
 800b930:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7ff fc8e 	bl	800b254 <tcp_create_segment>
 800b938:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 810e 	beq.w	800bb5e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b944:	2b00      	cmp	r3, #0
 800b946:	d102      	bne.n	800b94e <tcp_write+0x43a>
      queue = seg;
 800b948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94a:	647b      	str	r3, [r7, #68]	; 0x44
 800b94c:	e00c      	b.n	800b968 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <tcp_write+0x44e>
 800b954:	4b53      	ldr	r3, [pc, #332]	; (800baa4 <tcp_write+0x590>)
 800b956:	f240 2285 	movw	r2, #645	; 0x285
 800b95a:	4956      	ldr	r1, [pc, #344]	; (800bab4 <tcp_write+0x5a0>)
 800b95c:	4853      	ldr	r0, [pc, #332]	; (800baac <tcp_write+0x598>)
 800b95e:	f003 fc55 	bl	800f20c <iprintf>
      prev_seg->next = seg;
 800b962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b966:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b96c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b970:	8b3b      	ldrh	r3, [r7, #24]
 800b972:	4413      	add	r3, r2
 800b974:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b978:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b97c:	88fb      	ldrh	r3, [r7, #6]
 800b97e:	429a      	cmp	r2, r3
 800b980:	f4ff af38 	bcc.w	800b7f4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b984:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b986:	2b00      	cmp	r3, #0
 800b988:	d02c      	beq.n	800b9e4 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b990:	e01e      	b.n	800b9d0 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800b992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b994:	891a      	ldrh	r2, [r3, #8]
 800b996:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b998:	4413      	add	r3, r2
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d110      	bne.n	800b9ca <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ae:	8952      	ldrh	r2, [r2, #10]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b9b4:	68b9      	ldr	r1, [r7, #8]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f003 fc12 	bl	800f1e0 <memcpy>
        p->len += oversize_used;
 800b9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9be:	895a      	ldrh	r2, [r3, #10]
 800b9c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9c2:	4413      	add	r3, r2
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1dd      	bne.n	800b992 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800b9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d8:	891a      	ldrh	r2, [r3, #8]
 800b9da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9dc:	4413      	add	r3, r2
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e2:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b9e4:	8a7a      	ldrh	r2, [r7, #18]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d018      	beq.n	800ba24 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d106      	bne.n	800ba06 <tcp_write+0x4f2>
 800b9f8:	4b2a      	ldr	r3, [pc, #168]	; (800baa4 <tcp_write+0x590>)
 800b9fa:	f240 22ba 	movw	r2, #698	; 0x2ba
 800b9fe:	492e      	ldr	r1, [pc, #184]	; (800bab8 <tcp_write+0x5a4>)
 800ba00:	482a      	ldr	r0, [pc, #168]	; (800baac <tcp_write+0x598>)
 800ba02:	f003 fc03 	bl	800f20c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ba06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fb fb85 	bl	800711c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ba12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba14:	891a      	ldrh	r2, [r3, #8]
 800ba16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba18:	891b      	ldrh	r3, [r3, #8]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba20:	811a      	strh	r2, [r3, #8]
 800ba22:	e037      	b.n	800ba94 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800ba24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d034      	beq.n	800ba94 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ba2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d003      	beq.n	800ba38 <tcp_write+0x524>
 800ba30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d106      	bne.n	800ba46 <tcp_write+0x532>
 800ba38:	4b1a      	ldr	r3, [pc, #104]	; (800baa4 <tcp_write+0x590>)
 800ba3a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800ba3e:	491f      	ldr	r1, [pc, #124]	; (800babc <tcp_write+0x5a8>)
 800ba40:	481a      	ldr	r0, [pc, #104]	; (800baac <tcp_write+0x598>)
 800ba42:	f003 fbe3 	bl	800f20c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba4c:	e009      	b.n	800ba62 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	891a      	ldrh	r2, [r3, #8]
 800ba52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba54:	4413      	add	r3, r2
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1f1      	bne.n	800ba4e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	891a      	ldrh	r2, [r3, #8]
 800ba6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba70:	4413      	add	r3, r2
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ba78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7a:	895a      	ldrh	r2, [r3, #10]
 800ba7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba7e:	4413      	add	r3, r2
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba84:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ba86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba88:	891a      	ldrh	r2, [r3, #8]
 800ba8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba8c:	4413      	add	r3, r2
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba92:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ba94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d112      	bne.n	800bac0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba9e:	669a      	str	r2, [r3, #104]	; 0x68
 800baa0:	e011      	b.n	800bac6 <tcp_write+0x5b2>
 800baa2:	bf00      	nop
 800baa4:	080115f0 	.word	0x080115f0
 800baa8:	08011800 	.word	0x08011800
 800baac:	08011654 	.word	0x08011654
 800bab0:	08011840 	.word	0x08011840
 800bab4:	08011850 	.word	0x08011850
 800bab8:	08011864 	.word	0x08011864
 800babc:	0801189c 	.word	0x0801189c
  } else {
    last_unsent->next = queue;
 800bac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bac4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800baca:	88fb      	ldrh	r3, [r7, #6]
 800bacc:	441a      	add	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bad8:	88fb      	ldrh	r3, [r7, #6]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	b29a      	uxth	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800baea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00e      	beq.n	800bb16 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <tcp_write+0x602>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d106      	bne.n	800bb16 <tcp_write+0x602>
 800bb08:	4b2c      	ldr	r3, [pc, #176]	; (800bbbc <tcp_write+0x6a8>)
 800bb0a:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800bb0e:	492c      	ldr	r1, [pc, #176]	; (800bbc0 <tcp_write+0x6ac>)
 800bb10:	482c      	ldr	r0, [pc, #176]	; (800bbc4 <tcp_write+0x6b0>)
 800bb12:	f003 fb7b 	bl	800f20c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800bb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d016      	beq.n	800bb4a <tcp_write+0x636>
 800bb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d012      	beq.n	800bb4a <tcp_write+0x636>
 800bb24:	797b      	ldrb	r3, [r7, #5]
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10d      	bne.n	800bb4a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bb2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	899b      	ldrh	r3, [r3, #12]
 800bb34:	b29c      	uxth	r4, r3
 800bb36:	2008      	movs	r0, #8
 800bb38:	f7fa f88e 	bl	8005c58 <lwip_htons>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	4322      	orrs	r2, r4
 800bb46:	b292      	uxth	r2, r2
 800bb48:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	e031      	b.n	800bbb2 <tcp_write+0x69e>
          goto memerr;
 800bb4e:	bf00      	nop
 800bb50:	e006      	b.n	800bb60 <tcp_write+0x64c>
            goto memerr;
 800bb52:	bf00      	nop
 800bb54:	e004      	b.n	800bb60 <tcp_write+0x64c>
        goto memerr;
 800bb56:	bf00      	nop
 800bb58:	e002      	b.n	800bb60 <tcp_write+0x64c>
        goto memerr;
 800bb5a:	bf00      	nop
 800bb5c:	e000      	b.n	800bb60 <tcp_write+0x64c>
      goto memerr;
 800bb5e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	7e9b      	ldrb	r3, [r3, #26]
 800bb64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800bb6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <tcp_write+0x666>
    pbuf_free(concat_p);
 800bb74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb76:	f7fb fa05 	bl	8006f84 <pbuf_free>
  }
  if (queue != NULL) {
 800bb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <tcp_write+0x672>
    tcp_segs_free(queue);
 800bb80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bb82:	f7fc fcc8 	bl	8008516 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00e      	beq.n	800bbae <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10a      	bne.n	800bbae <tcp_write+0x69a>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <tcp_write+0x69a>
 800bba0:	4b06      	ldr	r3, [pc, #24]	; (800bbbc <tcp_write+0x6a8>)
 800bba2:	f240 3201 	movw	r2, #769	; 0x301
 800bba6:	4906      	ldr	r1, [pc, #24]	; (800bbc0 <tcp_write+0x6ac>)
 800bba8:	4806      	ldr	r0, [pc, #24]	; (800bbc4 <tcp_write+0x6b0>)
 800bbaa:	f003 fb2f 	bl	800f20c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800bbae:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	375c      	adds	r7, #92	; 0x5c
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd90      	pop	{r4, r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	080115f0 	.word	0x080115f0
 800bbc0:	080118d4 	.word	0x080118d4
 800bbc4:	08011654 	.word	0x08011654

0800bbc8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b08a      	sub	sp, #40	; 0x28
 800bbcc:	af02      	add	r7, sp, #8
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bbdc:	78fb      	ldrb	r3, [r7, #3]
 800bbde:	f003 0303 	and.w	r3, r3, #3
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <tcp_enqueue_flags+0x2c>
 800bbe6:	4b6f      	ldr	r3, [pc, #444]	; (800bda4 <tcp_enqueue_flags+0x1dc>)
 800bbe8:	f240 321a 	movw	r2, #794	; 0x31a
 800bbec:	496e      	ldr	r1, [pc, #440]	; (800bda8 <tcp_enqueue_flags+0x1e0>)
 800bbee:	486f      	ldr	r0, [pc, #444]	; (800bdac <tcp_enqueue_flags+0x1e4>)
 800bbf0:	f003 fb0c 	bl	800f20c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbfa:	2b08      	cmp	r3, #8
 800bbfc:	d806      	bhi.n	800bc0c <tcp_enqueue_flags+0x44>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bc04:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d90e      	bls.n	800bc2a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800bc0c:	78fb      	ldrb	r3, [r7, #3]
 800bc0e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d109      	bne.n	800bc2a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	7e9b      	ldrb	r3, [r3, #26]
 800bc1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc1e:	b2da      	uxtb	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295
 800bc28:	e0b7      	b.n	800bd9a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800bc2a:	78fb      	ldrb	r3, [r7, #3]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800bc34:	2301      	movs	r3, #1
 800bc36:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bc38:	7ffb      	ldrb	r3, [r7, #31]
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bc44:	7dfb      	ldrb	r3, [r7, #23]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	f7fa fe27 	bl	80068a0 <pbuf_alloc>
 800bc52:	6138      	str	r0, [r7, #16]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	7e9b      	ldrb	r3, [r3, #26]
 800bc5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc62:	b2da      	uxtb	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bc68:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6c:	e095      	b.n	800bd9a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	895a      	ldrh	r2, [r3, #10]
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d206      	bcs.n	800bc88 <tcp_enqueue_flags+0xc0>
 800bc7a:	4b4a      	ldr	r3, [pc, #296]	; (800bda4 <tcp_enqueue_flags+0x1dc>)
 800bc7c:	f44f 7250 	mov.w	r2, #832	; 0x340
 800bc80:	494b      	ldr	r1, [pc, #300]	; (800bdb0 <tcp_enqueue_flags+0x1e8>)
 800bc82:	484a      	ldr	r0, [pc, #296]	; (800bdac <tcp_enqueue_flags+0x1e4>)
 800bc84:	f003 fac2 	bl	800f20c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	7ffb      	ldrb	r3, [r7, #31]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	460b      	mov	r3, r1
 800bc94:	6939      	ldr	r1, [r7, #16]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff fadc 	bl	800b254 <tcp_create_segment>
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d109      	bne.n	800bcb8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	7e9b      	ldrb	r3, [r3, #26]
 800bca8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb6:	e070      	b.n	800bd9a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	f003 0303 	and.w	r3, r3, #3
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d006      	beq.n	800bcd2 <tcp_enqueue_flags+0x10a>
 800bcc4:	4b37      	ldr	r3, [pc, #220]	; (800bda4 <tcp_enqueue_flags+0x1dc>)
 800bcc6:	f240 3249 	movw	r2, #841	; 0x349
 800bcca:	493a      	ldr	r1, [pc, #232]	; (800bdb4 <tcp_enqueue_flags+0x1ec>)
 800bccc:	4837      	ldr	r0, [pc, #220]	; (800bdac <tcp_enqueue_flags+0x1e4>)
 800bcce:	f003 fa9d 	bl	800f20c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	891b      	ldrh	r3, [r3, #8]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d006      	beq.n	800bce8 <tcp_enqueue_flags+0x120>
 800bcda:	4b32      	ldr	r3, [pc, #200]	; (800bda4 <tcp_enqueue_flags+0x1dc>)
 800bcdc:	f240 324a 	movw	r2, #842	; 0x34a
 800bce0:	4935      	ldr	r1, [pc, #212]	; (800bdb8 <tcp_enqueue_flags+0x1f0>)
 800bce2:	4832      	ldr	r0, [pc, #200]	; (800bdac <tcp_enqueue_flags+0x1e4>)
 800bce4:	f003 fa92 	bl	800f20c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d103      	bne.n	800bcf8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	669a      	str	r2, [r3, #104]	; 0x68
 800bcf6:	e00d      	b.n	800bd14 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcfc:	61bb      	str	r3, [r7, #24]
 800bcfe:	e002      	b.n	800bd06 <tcp_enqueue_flags+0x13e>
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	61bb      	str	r3, [r7, #24]
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f8      	bne.n	800bd00 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800bd0e:	69bb      	ldr	r3, [r7, #24]
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	f003 0302 	and.w	r3, r3, #2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d104      	bne.n	800bd30 <tcp_enqueue_flags+0x168>
 800bd26:	78fb      	ldrb	r3, [r7, #3]
 800bd28:	f003 0301 	and.w	r3, r3, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d004      	beq.n	800bd3a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800bd3a:	78fb      	ldrb	r3, [r7, #3]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d006      	beq.n	800bd52 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	7e9b      	ldrb	r3, [r3, #26]
 800bd48:	f043 0320 	orr.w	r3, r3, #32
 800bd4c:	b2da      	uxtb	r2, r3
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fb f9a8 	bl	80070ac <pbuf_clen>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	461a      	mov	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd66:	4413      	add	r3, r2
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00e      	beq.n	800bd98 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <tcp_enqueue_flags+0x1d0>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d106      	bne.n	800bd98 <tcp_enqueue_flags+0x1d0>
 800bd8a:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <tcp_enqueue_flags+0x1dc>)
 800bd8c:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bd90:	490a      	ldr	r1, [pc, #40]	; (800bdbc <tcp_enqueue_flags+0x1f4>)
 800bd92:	4806      	ldr	r0, [pc, #24]	; (800bdac <tcp_enqueue_flags+0x1e4>)
 800bd94:	f003 fa3a 	bl	800f20c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	080115f0 	.word	0x080115f0
 800bda8:	080118f4 	.word	0x080118f4
 800bdac:	08011654 	.word	0x08011654
 800bdb0:	0801194c 	.word	0x0801194c
 800bdb4:	08011988 	.word	0x08011988
 800bdb8:	080119a0 	.word	0x080119a0
 800bdbc:	080119cc 	.word	0x080119cc

0800bdc0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bdc0:	b590      	push	{r4, r7, lr}
 800bdc2:	b08b      	sub	sp, #44	; 0x2c
 800bdc4:	af04      	add	r7, sp, #16
 800bdc6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bdcc:	7dbb      	ldrb	r3, [r7, #22]
 800bdce:	b29c      	uxth	r4, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7f9 ff4c 	bl	8005c72 <lwip_htonl>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2200      	movs	r2, #0
 800bdde:	4621      	mov	r1, r4
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff f97d 	bl	800b0e0 <tcp_output_alloc_header>
 800bde6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d109      	bne.n	800be02 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7e9b      	ldrb	r3, [r3, #26]
 800bdf2:	f043 0303 	orr.w	r3, r3, #3
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bdfc:	f06f 0301 	mvn.w	r3, #1
 800be00:	e036      	b.n	800be70 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3304      	adds	r3, #4
 800be06:	4618      	mov	r0, r3
 800be08:	f002 f84e 	bl	800dea8 <ip4_route>
 800be0c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d102      	bne.n	800be1a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800be14:	23fc      	movs	r3, #252	; 0xfc
 800be16:	75fb      	strb	r3, [r7, #23]
 800be18:	e012      	b.n	800be40 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800be1a:	6879      	ldr	r1, [r7, #4]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1d18      	adds	r0, r3, #4
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	7a9c      	ldrb	r4, [r3, #10]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7a5b      	ldrb	r3, [r3, #9]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	9202      	str	r2, [sp, #8]
 800be2c:	2206      	movs	r2, #6
 800be2e:	9201      	str	r2, [sp, #4]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	4623      	mov	r3, r4
 800be34:	4602      	mov	r2, r0
 800be36:	6938      	ldr	r0, [r7, #16]
 800be38:	f002 f9e0 	bl	800e1fc <ip4_output_if>
 800be3c:	4603      	mov	r3, r0
 800be3e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800be40:	6938      	ldr	r0, [r7, #16]
 800be42:	f7fb f89f 	bl	8006f84 <pbuf_free>

  if (err != ERR_OK) {
 800be46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d007      	beq.n	800be5e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	7e9b      	ldrb	r3, [r3, #26]
 800be52:	f043 0303 	orr.w	r3, r3, #3
 800be56:	b2da      	uxtb	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	769a      	strb	r2, [r3, #26]
 800be5c:	e006      	b.n	800be6c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	7e9b      	ldrb	r3, [r3, #26]
 800be62:	f023 0303 	bic.w	r3, r3, #3
 800be66:	b2da      	uxtb	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800be6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be70:	4618      	mov	r0, r3
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	bd90      	pop	{r4, r7, pc}

0800be78 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800be78:	b5b0      	push	{r4, r5, r7, lr}
 800be7a:	b08a      	sub	sp, #40	; 0x28
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	7d1b      	ldrb	r3, [r3, #20]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d106      	bne.n	800be96 <tcp_output+0x1e>
 800be88:	4ba8      	ldr	r3, [pc, #672]	; (800c12c <tcp_output+0x2b4>)
 800be8a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800be8e:	49a8      	ldr	r1, [pc, #672]	; (800c130 <tcp_output+0x2b8>)
 800be90:	48a8      	ldr	r0, [pc, #672]	; (800c134 <tcp_output+0x2bc>)
 800be92:	f003 f9bb 	bl	800f20c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800be96:	4ba8      	ldr	r3, [pc, #672]	; (800c138 <tcp_output+0x2c0>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d101      	bne.n	800bea4 <tcp_output+0x2c>
    return ERR_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e1cb      	b.n	800c23c <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800beb0:	4293      	cmp	r3, r2
 800beb2:	bf28      	it	cs
 800beb4:	4613      	movcs	r3, r2
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bebe:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	7e9b      	ldrb	r3, [r3, #26]
 800bec4:	f003 0302 	and.w	r3, r3, #2
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d017      	beq.n	800befc <tcp_output+0x84>
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00f      	beq.n	800bef2 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	4618      	mov	r0, r3
 800beda:	f7f9 feca 	bl	8005c72 <lwip_htonl>
 800bede:	4602      	mov	r2, r0
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bee8:	8912      	ldrh	r2, [r2, #8]
 800beea:	4413      	add	r3, r2
     (seg == NULL ||
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d204      	bcs.n	800befc <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7ff ff64 	bl	800bdc0 <tcp_send_empty_ack>
 800bef8:	4603      	mov	r3, r0
 800befa:	e19f      	b.n	800c23c <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf00:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800bf08:	e002      	b.n	800bf10 <tcp_output+0x98>
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	623b      	str	r3, [r7, #32]
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1f8      	bne.n	800bf0a <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f001 ffc3 	bl	800dea8 <ip4_route>
 800bf22:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <tcp_output+0xb8>
    return ERR_RTE;
 800bf2a:	f06f 0303 	mvn.w	r3, #3
 800bf2e:	e185      	b.n	800c23c <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <tcp_output+0xc6>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d111      	bne.n	800bf62 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <tcp_output+0xd2>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	3304      	adds	r3, #4
 800bf48:	e000      	b.n	800bf4c <tcp_output+0xd4>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d102      	bne.n	800bf5a <tcp_output+0xe2>
      return ERR_RTE;
 800bf54:	f06f 0303 	mvn.w	r3, #3
 800bf58:	e170      	b.n	800c23c <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 813f 	beq.w	800c1e8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f9 fe7e 	bl	8005c72 <lwip_htonl>
 800bf76:	4602      	mov	r2, r0
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf80:	8912      	ldrh	r2, [r2, #8]
 800bf82:	4413      	add	r3, r2
  if (seg != NULL &&
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	f080 812e 	bcs.w	800c1e8 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	f000 812a 	beq.w	800c1e8 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	f040 8122 	bne.w	800c1e8 <tcp_output+0x370>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f040 811d 	bne.w	800c1e8 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f040 812c 	bne.w	800c212 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800bfca:	e122      	b.n	800c212 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	899b      	ldrh	r3, [r3, #12]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7f9 fe3f 	bl	8005c58 <lwip_htons>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d006      	beq.n	800bff2 <tcp_output+0x17a>
 800bfe4:	4b51      	ldr	r3, [pc, #324]	; (800c12c <tcp_output+0x2b4>)
 800bfe6:	f240 4245 	movw	r2, #1093	; 0x445
 800bfea:	4954      	ldr	r1, [pc, #336]	; (800c13c <tcp_output+0x2c4>)
 800bfec:	4851      	ldr	r0, [pc, #324]	; (800c134 <tcp_output+0x2bc>)
 800bfee:	f003 f90d 	bl	800f20c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d01f      	beq.n	800c03a <tcp_output+0x1c2>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	7e9b      	ldrb	r3, [r3, #26]
 800bffe:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c002:	2b00      	cmp	r3, #0
 800c004:	d119      	bne.n	800c03a <tcp_output+0x1c2>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00b      	beq.n	800c026 <tcp_output+0x1ae>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d110      	bne.n	800c03a <tcp_output+0x1c2>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c01c:	891a      	ldrh	r2, [r3, #8]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c022:	429a      	cmp	r2, r3
 800c024:	d209      	bcs.n	800c03a <tcp_output+0x1c2>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d004      	beq.n	800c03a <tcp_output+0x1c2>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c036:	2b08      	cmp	r3, #8
 800c038:	d901      	bls.n	800c03e <tcp_output+0x1c6>
 800c03a:	2301      	movs	r3, #1
 800c03c:	e000      	b.n	800c040 <tcp_output+0x1c8>
 800c03e:	2300      	movs	r3, #0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d106      	bne.n	800c052 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7e9b      	ldrb	r3, [r3, #26]
 800c048:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80e2 	beq.w	800c216 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7d1b      	ldrb	r3, [r3, #20]
 800c056:	2b02      	cmp	r3, #2
 800c058:	d00d      	beq.n	800c076 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	899b      	ldrh	r3, [r3, #12]
 800c060:	b29c      	uxth	r4, r3
 800c062:	2010      	movs	r0, #16
 800c064:	f7f9 fdf8 	bl	8005c58 <lwip_htons>
 800c068:	4603      	mov	r3, r0
 800c06a:	461a      	mov	r2, r3
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	4322      	orrs	r2, r4
 800c072:	b292      	uxth	r2, r2
 800c074:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c07c:	f000 f8e2 	bl	800c244 <tcp_output_segment>
 800c080:	4603      	mov	r3, r0
 800c082:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d009      	beq.n	800c0a0 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	7e9b      	ldrb	r3, [r3, #26]
 800c090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c094:	b2da      	uxtb	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	769a      	strb	r2, [r3, #26]
      return err;
 800c09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c09e:	e0cd      	b.n	800c23c <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	7d1b      	ldrb	r3, [r3, #20]
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d006      	beq.n	800c0be <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	7e9b      	ldrb	r3, [r3, #26]
 800c0b4:	f023 0303 	bic.w	r3, r3, #3
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7f9 fdd4 	bl	8005c72 <lwip_htonl>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	891b      	ldrh	r3, [r3, #8]
 800c0d0:	461d      	mov	r5, r3
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	899b      	ldrh	r3, [r3, #12]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7f9 fdbc 	bl	8005c58 <lwip_htons>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f003 0303 	and.w	r3, r3, #3
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d001      	beq.n	800c0ee <tcp_output+0x276>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e000      	b.n	800c0f0 <tcp_output+0x278>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	442b      	add	r3, r5
 800c0f2:	4423      	add	r3, r4
 800c0f4:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	da02      	bge.n	800c108 <tcp_output+0x290>
      pcb->snd_nxt = snd_nxt;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	891b      	ldrh	r3, [r3, #8]
 800c10c:	461c      	mov	r4, r3
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	899b      	ldrh	r3, [r3, #12]
 800c114:	b29b      	uxth	r3, r3
 800c116:	4618      	mov	r0, r3
 800c118:	f7f9 fd9e 	bl	8005c58 <lwip_htons>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f003 0303 	and.w	r3, r3, #3
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00c      	beq.n	800c140 <tcp_output+0x2c8>
 800c126:	2301      	movs	r3, #1
 800c128:	e00b      	b.n	800c142 <tcp_output+0x2ca>
 800c12a:	bf00      	nop
 800c12c:	080115f0 	.word	0x080115f0
 800c130:	080119f4 	.word	0x080119f4
 800c134:	08011654 	.word	0x08011654
 800c138:	20007160 	.word	0x20007160
 800c13c:	08011a1c 	.word	0x08011a1c
 800c140:	2300      	movs	r3, #0
 800c142:	4423      	add	r3, r4
 800c144:	2b00      	cmp	r3, #0
 800c146:	d049      	beq.n	800c1dc <tcp_output+0x364>
      seg->next = NULL;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	2200      	movs	r2, #0
 800c14c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c15a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	623b      	str	r3, [r7, #32]
 800c160:	e03f      	b.n	800c1e2 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f9 fd82 	bl	8005c72 <lwip_htonl>
 800c16e:	4604      	mov	r4, r0
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	4618      	mov	r0, r3
 800c178:	f7f9 fd7b 	bl	8005c72 <lwip_htonl>
 800c17c:	4603      	mov	r3, r0
 800c17e:	1ae3      	subs	r3, r4, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	da24      	bge.n	800c1ce <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	336c      	adds	r3, #108	; 0x6c
 800c188:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c18a:	e002      	b.n	800c192 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c192:	69fb      	ldr	r3, [r7, #28]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d011      	beq.n	800c1be <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7f9 fd65 	bl	8005c72 <lwip_htonl>
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7f9 fd5e 	bl	8005c72 <lwip_htonl>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	dbe6      	blt.n	800c18c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ca:	601a      	str	r2, [r3, #0]
 800c1cc:	e009      	b.n	800c1e2 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	623b      	str	r3, [r7, #32]
 800c1da:	e002      	b.n	800c1e2 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c1dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1de:	f7fc f9af 	bl	8008540 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d015      	beq.n	800c21a <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7f9 fd3c 	bl	8005c72 <lwip_htonl>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c204:	8912      	ldrh	r2, [r2, #8]
 800c206:	4413      	add	r3, r2
  while (seg != NULL &&
 800c208:	69ba      	ldr	r2, [r7, #24]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	f4bf aede 	bcs.w	800bfcc <tcp_output+0x154>
  }
output_done:
 800c210:	e003      	b.n	800c21a <tcp_output+0x3a2>
    goto output_done;
 800c212:	bf00      	nop
 800c214:	e002      	b.n	800c21c <tcp_output+0x3a4>
      break;
 800c216:	bf00      	nop
 800c218:	e000      	b.n	800c21c <tcp_output+0x3a4>
output_done:
 800c21a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c220:	2b00      	cmp	r3, #0
 800c222:	d103      	bne.n	800c22c <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	7e9b      	ldrb	r3, [r3, #26]
 800c230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c234:	b2da      	uxtb	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3728      	adds	r7, #40	; 0x28
 800c240:	46bd      	mov	sp, r7
 800c242:	bdb0      	pop	{r4, r5, r7, pc}

0800c244 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c244:	b5b0      	push	{r4, r5, r7, lr}
 800c246:	b08c      	sub	sp, #48	; 0x30
 800c248:	af04      	add	r7, sp, #16
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	89db      	ldrh	r3, [r3, #14]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d001      	beq.n	800c25e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	e08a      	b.n	800c374 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	68dc      	ldr	r4, [r3, #12]
 800c266:	4610      	mov	r0, r2
 800c268:	f7f9 fd03 	bl	8005c72 <lwip_htonl>
 800c26c:	4603      	mov	r3, r0
 800c26e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	68dc      	ldr	r4, [r3, #12]
 800c278:	4610      	mov	r0, r2
 800c27a:	f7f9 fced 	bl	8005c58 <lwip_htons>
 800c27e:	4603      	mov	r3, r0
 800c280:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c28a:	441a      	add	r2, r3
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	3314      	adds	r3, #20
 800c296:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	7a9b      	ldrb	r3, [r3, #10]
 800c29c:	f003 0301 	and.w	r3, r3, #1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d014      	beq.n	800c2ce <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c2ae:	f7fc fc79 	bl	8008ba4 <tcp_eff_send_mss_impl>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c2b6:	8b7b      	ldrh	r3, [r7, #26]
 800c2b8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f7f9 fcd8 	bl	8005c72 <lwip_htonl>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	da02      	bge.n	800c2de <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d10c      	bne.n	800c300 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800c2e6:	4b25      	ldr	r3, [pc, #148]	; (800c37c <tcp_output_segment+0x138>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7f9 fcbc 	bl	8005c72 <lwip_htonl>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	8959      	ldrh	r1, [r3, #10]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	8b3a      	ldrh	r2, [r7, #24]
 800c31a:	1a8a      	subs	r2, r1, r2
 800c31c:	b292      	uxth	r2, r2
 800c31e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	8919      	ldrh	r1, [r3, #8]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	8b3a      	ldrh	r2, [r7, #24]
 800c32c:	1a8a      	subs	r2, r1, r2
 800c32e:	b292      	uxth	r2, r2
 800c330:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	68d2      	ldr	r2, [r2, #12]
 800c33a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	68db      	ldr	r3, [r3, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	741a      	strb	r2, [r3, #16]
 800c344:	2200      	movs	r2, #0
 800c346:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	6858      	ldr	r0, [r3, #4]
 800c34c:	68b9      	ldr	r1, [r7, #8]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	1d1c      	adds	r4, r3, #4
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	7a9d      	ldrb	r5, [r3, #10]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	7a5b      	ldrb	r3, [r3, #9]
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	9202      	str	r2, [sp, #8]
 800c35e:	2206      	movs	r2, #6
 800c360:	9201      	str	r2, [sp, #4]
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	462b      	mov	r3, r5
 800c366:	4622      	mov	r2, r4
 800c368:	f001 ff48 	bl	800e1fc <ip4_output_if>
 800c36c:	4603      	mov	r3, r0
 800c36e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800c370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3720      	adds	r7, #32
 800c378:	46bd      	mov	sp, r7
 800c37a:	bdb0      	pop	{r4, r5, r7, pc}
 800c37c:	20007150 	.word	0x20007150

0800c380 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08c      	sub	sp, #48	; 0x30
 800c384:	af04      	add	r7, sp, #16
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c38e:	2200      	movs	r2, #0
 800c390:	2114      	movs	r1, #20
 800c392:	2001      	movs	r0, #1
 800c394:	f7fa fa84 	bl	80068a0 <pbuf_alloc>
 800c398:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d05b      	beq.n	800c458 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	895b      	ldrh	r3, [r3, #10]
 800c3a4:	2b13      	cmp	r3, #19
 800c3a6:	d806      	bhi.n	800c3b6 <tcp_rst+0x36>
 800c3a8:	4b2d      	ldr	r3, [pc, #180]	; (800c460 <tcp_rst+0xe0>)
 800c3aa:	f240 524c 	movw	r2, #1356	; 0x54c
 800c3ae:	492d      	ldr	r1, [pc, #180]	; (800c464 <tcp_rst+0xe4>)
 800c3b0:	482d      	ldr	r0, [pc, #180]	; (800c468 <tcp_rst+0xe8>)
 800c3b2:	f002 ff2b 	bl	800f20c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800c3bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f9 fc4a 	bl	8005c58 <lwip_htons>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c3cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7f9 fc42 	bl	8005c58 <lwip_htons>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f7f9 fc48 	bl	8005c72 <lwip_htonl>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c3e8:	68b8      	ldr	r0, [r7, #8]
 800c3ea:	f7f9 fc42 	bl	8005c72 <lwip_htonl>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c3f4:	f245 0014 	movw	r0, #20500	; 0x5014
 800c3f8:	f7f9 fc2e 	bl	8005c58 <lwip_htons>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	461a      	mov	r2, r3
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	2200      	movs	r2, #0
 800c408:	f042 0208 	orr.w	r2, r2, #8
 800c40c:	739a      	strb	r2, [r3, #14]
 800c40e:	2200      	movs	r2, #0
 800c410:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800c414:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	2200      	movs	r2, #0
 800c41a:	741a      	strb	r2, [r3, #16]
 800c41c:	2200      	movs	r2, #0
 800c41e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	2200      	movs	r2, #0
 800c424:	749a      	strb	r2, [r3, #18]
 800c426:	2200      	movs	r2, #0
 800c428:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c42a:	6838      	ldr	r0, [r7, #0]
 800c42c:	f001 fd3c 	bl	800dea8 <ip4_route>
 800c430:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	9302      	str	r3, [sp, #8]
 800c43c:	2306      	movs	r3, #6
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	2300      	movs	r3, #0
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	23ff      	movs	r3, #255	; 0xff
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	69f8      	ldr	r0, [r7, #28]
 800c44c:	f001 fed6 	bl	800e1fc <ip4_output_if>
  }
  pbuf_free(p);
 800c450:	69f8      	ldr	r0, [r7, #28]
 800c452:	f7fa fd97 	bl	8006f84 <pbuf_free>
 800c456:	e000      	b.n	800c45a <tcp_rst+0xda>
    return;
 800c458:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c45a:	3720      	adds	r7, #32
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	080115f0 	.word	0x080115f0
 800c464:	08011624 	.word	0x08011624
 800c468:	08011654 	.word	0x08011654

0800c46c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d029      	beq.n	800c4d0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	e002      	b.n	800c48a <tcp_rexmit_rto+0x1e>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	60fb      	str	r3, [r7, #12]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d1f8      	bne.n	800c484 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4ae:	2bff      	cmp	r3, #255	; 0xff
 800c4b0:	d007      	beq.n	800c4c2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f7ff fcd5 	bl	800be78 <tcp_output>
 800c4ce:	e000      	b.n	800c4d2 <tcp_rexmit_rto+0x66>
    return;
 800c4d0:	bf00      	nop
}
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c4d8:	b590      	push	{r4, r7, lr}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d043      	beq.n	800c570 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ec:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	3368      	adds	r3, #104	; 0x68
 800c4fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c4fc:	e002      	b.n	800c504 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d011      	beq.n	800c530 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	4618      	mov	r0, r3
 800c516:	f7f9 fbac 	bl	8005c72 <lwip_htonl>
 800c51a:	4604      	mov	r4, r0
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	4618      	mov	r0, r3
 800c524:	f7f9 fba5 	bl	8005c72 <lwip_htonl>
 800c528:	4603      	mov	r3, r0
 800c52a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	dbe6      	blt.n	800c4fe <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	68ba      	ldr	r2, [r7, #8]
 800c53c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d103      	bne.n	800c54e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c554:	2bff      	cmp	r3, #255	; 0xff
 800c556:	d007      	beq.n	800c568 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c55e:	3301      	adds	r3, #1
 800c560:	b2da      	uxtb	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2200      	movs	r2, #0
 800c56c:	635a      	str	r2, [r3, #52]	; 0x34
 800c56e:	e000      	b.n	800c572 <tcp_rexmit+0x9a>
    return;
 800c570:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	bd90      	pop	{r4, r7, pc}

0800c578 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c584:	2b00      	cmp	r3, #0
 800c586:	d041      	beq.n	800c60c <tcp_rexmit_fast+0x94>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	7e9b      	ldrb	r3, [r3, #26]
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	d13b      	bne.n	800c60c <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f7ff ff9f 	bl	800c4d8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	bf28      	it	cs
 800c5aa:	4613      	movcs	r3, r2
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	0fda      	lsrs	r2, r3, #31
 800c5b0:	4413      	add	r3, r2
 800c5b2:	105b      	asrs	r3, r3, #1
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d206      	bcs.n	800c5dc <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	b29a      	uxth	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	0049      	lsls	r1, r1, #1
 800c5ea:	440b      	add	r3, r1
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	4413      	add	r3, r2
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	7e9b      	ldrb	r3, [r3, #26]
 800c5fc:	f043 0304 	orr.w	r3, r3, #4
 800c600:	b2da      	uxtb	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08a      	sub	sp, #40	; 0x28
 800c618:	af04      	add	r7, sp, #16
 800c61a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c620:	3b01      	subs	r3, #1
 800c622:	4618      	mov	r0, r3
 800c624:	f7f9 fb25 	bl	8005c72 <lwip_htonl>
 800c628:	4603      	mov	r3, r0
 800c62a:	2200      	movs	r2, #0
 800c62c:	2100      	movs	r1, #0
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7fe fd56 	bl	800b0e0 <tcp_output_alloc_header>
 800c634:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c63c:	f04f 33ff 	mov.w	r3, #4294967295
 800c640:	e021      	b.n	800c686 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	3304      	adds	r3, #4
 800c646:	4618      	mov	r0, r3
 800c648:	f001 fc2e 	bl	800dea8 <ip4_route>
 800c64c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d102      	bne.n	800c65a <tcp_keepalive+0x46>
    err = ERR_RTE;
 800c654:	23fc      	movs	r3, #252	; 0xfc
 800c656:	75fb      	strb	r3, [r7, #23]
 800c658:	e010      	b.n	800c67c <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c65a:	6879      	ldr	r1, [r7, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	1d1a      	adds	r2, r3, #4
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7a98      	ldrb	r0, [r3, #10]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	9302      	str	r3, [sp, #8]
 800c668:	2306      	movs	r3, #6
 800c66a:	9301      	str	r3, [sp, #4]
 800c66c:	2300      	movs	r3, #0
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	4603      	mov	r3, r0
 800c672:	6938      	ldr	r0, [r7, #16]
 800c674:	f001 fdc2 	bl	800e1fc <ip4_output_if>
 800c678:	4603      	mov	r3, r0
 800c67a:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c67c:	6938      	ldr	r0, [r7, #16]
 800c67e:	f7fa fc81 	bl	8006f84 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3718      	adds	r7, #24
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c68e:	b590      	push	{r4, r7, lr}
 800c690:	b08f      	sub	sp, #60	; 0x3c
 800c692:	af04      	add	r7, sp, #16
 800c694:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c69a:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d102      	bne.n	800c6a8 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6a6:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d101      	bne.n	800c6b2 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e085      	b.n	800c7be <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	899b      	ldrh	r3, [r3, #12]
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7f9 facc 	bl	8005c58 <lwip_htons>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d005      	beq.n	800c6d6 <tcp_zero_window_probe+0x48>
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	891b      	ldrh	r3, [r3, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d101      	bne.n	800c6d6 <tcp_zero_window_probe+0x48>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e000      	b.n	800c6d8 <tcp_zero_window_probe+0x4a>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c6da:	7ffb      	ldrb	r3, [r7, #31]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bf0c      	ite	eq
 800c6e0:	2301      	moveq	r3, #1
 800c6e2:	2300      	movne	r3, #0
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	8bba      	ldrh	r2, [r7, #28]
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7fe fcf4 	bl	800b0e0 <tcp_output_alloc_header>
 800c6f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c700:	f04f 33ff 	mov.w	r3, #4294967295
 800c704:	e05b      	b.n	800c7be <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c70c:	7ffb      	ldrb	r3, [r7, #31]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00e      	beq.n	800c730 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	899b      	ldrh	r3, [r3, #12]
 800c716:	b29b      	uxth	r3, r3
 800c718:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c71c:	b29c      	uxth	r4, r3
 800c71e:	2011      	movs	r0, #17
 800c720:	f7f9 fa9a 	bl	8005c58 <lwip_htons>
 800c724:	4603      	mov	r3, r0
 800c726:	4323      	orrs	r3, r4
 800c728:	b29a      	uxth	r2, r3
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	819a      	strh	r2, [r3, #12]
 800c72e:	e010      	b.n	800c752 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c730:	69bb      	ldr	r3, [r7, #24]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	3314      	adds	r3, #20
 800c736:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	6858      	ldr	r0, [r3, #4]
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	891a      	ldrh	r2, [r3, #8]
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	891b      	ldrh	r3, [r3, #8]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	b29b      	uxth	r3, r3
 800c74a:	2201      	movs	r2, #1
 800c74c:	6939      	ldr	r1, [r7, #16]
 800c74e:	f7fa fe07 	bl	8007360 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c752:	6a3b      	ldr	r3, [r7, #32]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	4618      	mov	r0, r3
 800c75a:	f7f9 fa8a 	bl	8005c72 <lwip_htonl>
 800c75e:	4603      	mov	r3, r0
 800c760:	3301      	adds	r3, #1
 800c762:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	da02      	bge.n	800c776 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3304      	adds	r3, #4
 800c77a:	4618      	mov	r0, r3
 800c77c:	f001 fb94 	bl	800dea8 <ip4_route>
 800c780:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d103      	bne.n	800c790 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800c788:	23fc      	movs	r3, #252	; 0xfc
 800c78a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c78e:	e011      	b.n	800c7b4 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c790:	6879      	ldr	r1, [r7, #4]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	1d1a      	adds	r2, r3, #4
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	7a98      	ldrb	r0, [r3, #10]
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	9302      	str	r3, [sp, #8]
 800c79e:	2306      	movs	r3, #6
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	69b8      	ldr	r0, [r7, #24]
 800c7aa:	f001 fd27 	bl	800e1fc <ip4_output_if>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800c7b4:	69b8      	ldr	r0, [r7, #24]
 800c7b6:	f7fa fbe5 	bl	8006f84 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c7ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	372c      	adds	r7, #44	; 0x2c
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd90      	pop	{r4, r7, pc}
	...

0800c7c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c7d0:	f7fa fe46 	bl	8007460 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c7d4:	4b0a      	ldr	r3, [pc, #40]	; (800c800 <tcpip_tcp_timer+0x38>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d103      	bne.n	800c7e4 <tcpip_tcp_timer+0x1c>
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <tcpip_tcp_timer+0x3c>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d005      	beq.n	800c7f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	4908      	ldr	r1, [pc, #32]	; (800c808 <tcpip_tcp_timer+0x40>)
 800c7e8:	20fa      	movs	r0, #250	; 0xfa
 800c7ea:	f000 f86f 	bl	800c8cc <sys_timeout>
 800c7ee:	e003      	b.n	800c7f8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c7f0:	4b06      	ldr	r3, [pc, #24]	; (800c80c <tcpip_tcp_timer+0x44>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	601a      	str	r2, [r3, #0]
  }
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	2000714c 	.word	0x2000714c
 800c804:	2000715c 	.word	0x2000715c
 800c808:	0800c7c9 	.word	0x0800c7c9
 800c80c:	20000554 	.word	0x20000554

0800c810 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c814:	4b0a      	ldr	r3, [pc, #40]	; (800c840 <tcp_timer_needed+0x30>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10f      	bne.n	800c83c <tcp_timer_needed+0x2c>
 800c81c:	4b09      	ldr	r3, [pc, #36]	; (800c844 <tcp_timer_needed+0x34>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d103      	bne.n	800c82c <tcp_timer_needed+0x1c>
 800c824:	4b08      	ldr	r3, [pc, #32]	; (800c848 <tcp_timer_needed+0x38>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d007      	beq.n	800c83c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c82c:	4b04      	ldr	r3, [pc, #16]	; (800c840 <tcp_timer_needed+0x30>)
 800c82e:	2201      	movs	r2, #1
 800c830:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c832:	2200      	movs	r2, #0
 800c834:	4905      	ldr	r1, [pc, #20]	; (800c84c <tcp_timer_needed+0x3c>)
 800c836:	20fa      	movs	r0, #250	; 0xfa
 800c838:	f000 f848 	bl	800c8cc <sys_timeout>
  }
}
 800c83c:	bf00      	nop
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	20000554 	.word	0x20000554
 800c844:	2000714c 	.word	0x2000714c
 800c848:	2000715c 	.word	0x2000715c
 800c84c:	0800c7c9 	.word	0x0800c7c9

0800c850 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	4903      	ldr	r1, [pc, #12]	; (800c878 <cyclic_timer+0x28>)
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 f82e 	bl	800c8cc <sys_timeout>
}
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	0800c851 	.word	0x0800c851

0800c87c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c882:	2301      	movs	r3, #1
 800c884:	607b      	str	r3, [r7, #4]
 800c886:	e00e      	b.n	800c8a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800c888:	4a0d      	ldr	r2, [pc, #52]	; (800c8c0 <sys_timeouts_init+0x44>)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	4a0a      	ldr	r2, [pc, #40]	; (800c8c0 <sys_timeouts_init+0x44>)
 800c896:	4413      	add	r3, r2
 800c898:	461a      	mov	r2, r3
 800c89a:	490a      	ldr	r1, [pc, #40]	; (800c8c4 <sys_timeouts_init+0x48>)
 800c89c:	f000 f816 	bl	800c8cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	607b      	str	r3, [r7, #4]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b02      	cmp	r3, #2
 800c8aa:	d9ed      	bls.n	800c888 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800c8ac:	f7f7 fe16 	bl	80044dc <sys_now>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	4a05      	ldr	r2, [pc, #20]	; (800c8c8 <sys_timeouts_init+0x4c>)
 800c8b4:	6013      	str	r3, [r2, #0]
}
 800c8b6:	bf00      	nop
 800c8b8:	3708      	adds	r7, #8
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	080125c4 	.word	0x080125c4
 800c8c4:	0800c851 	.word	0x0800c851
 800c8c8:	20000550 	.word	0x20000550

0800c8cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c8d8:	2006      	movs	r0, #6
 800c8da:	f7f9 fdcf 	bl	800647c <memp_malloc>
 800c8de:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10a      	bne.n	800c8fc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f040 8084 	bne.w	800c9f6 <sys_timeout+0x12a>
 800c8ee:	4b44      	ldr	r3, [pc, #272]	; (800ca00 <sys_timeout+0x134>)
 800c8f0:	22d4      	movs	r2, #212	; 0xd4
 800c8f2:	4944      	ldr	r1, [pc, #272]	; (800ca04 <sys_timeout+0x138>)
 800c8f4:	4844      	ldr	r0, [pc, #272]	; (800ca08 <sys_timeout+0x13c>)
 800c8f6:	f002 fc89 	bl	800f20c <iprintf>
    return;
 800c8fa:	e07c      	b.n	800c9f6 <sys_timeout+0x12a>
  }

  now = sys_now();
 800c8fc:	f7f7 fdee 	bl	80044dc <sys_now>
 800c900:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800c902:	4b42      	ldr	r3, [pc, #264]	; (800ca0c <sys_timeout+0x140>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d105      	bne.n	800c916 <sys_timeout+0x4a>
    diff = 0;
 800c90a:	2300      	movs	r3, #0
 800c90c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800c90e:	4a40      	ldr	r2, [pc, #256]	; (800ca10 <sys_timeout+0x144>)
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	e004      	b.n	800c920 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800c916:	4b3e      	ldr	r3, [pc, #248]	; (800ca10 <sys_timeout+0x144>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	1ad3      	subs	r3, r2, r3
 800c91e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	2200      	movs	r2, #0
 800c924:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	441a      	add	r2, r3
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c93c:	4b33      	ldr	r3, [pc, #204]	; (800ca0c <sys_timeout+0x140>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d103      	bne.n	800c94c <sys_timeout+0x80>
    next_timeout = timeout;
 800c944:	4a31      	ldr	r2, [pc, #196]	; (800ca0c <sys_timeout+0x140>)
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	6013      	str	r3, [r2, #0]
    return;
 800c94a:	e055      	b.n	800c9f8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800c94c:	4b2f      	ldr	r3, [pc, #188]	; (800ca0c <sys_timeout+0x140>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	429a      	cmp	r2, r3
 800c956:	d20f      	bcs.n	800c978 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800c958:	4b2c      	ldr	r3, [pc, #176]	; (800ca0c <sys_timeout+0x140>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6859      	ldr	r1, [r3, #4]
 800c95e:	4b2b      	ldr	r3, [pc, #172]	; (800ca0c <sys_timeout+0x140>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	1a8a      	subs	r2, r1, r2
 800c966:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800c968:	4b28      	ldr	r3, [pc, #160]	; (800ca0c <sys_timeout+0x140>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c970:	4a26      	ldr	r2, [pc, #152]	; (800ca0c <sys_timeout+0x140>)
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	e03f      	b.n	800c9f8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c978:	4b24      	ldr	r3, [pc, #144]	; (800ca0c <sys_timeout+0x140>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	61fb      	str	r3, [r7, #28]
 800c97e:	e036      	b.n	800c9ee <sys_timeout+0x122>
      timeout->time -= t->time;
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	1ad2      	subs	r2, r2, r3
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d006      	beq.n	800c9a4 <sys_timeout+0xd8>
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d921      	bls.n	800c9e8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d009      	beq.n	800c9c0 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800c9ac:	69fb      	ldr	r3, [r7, #28]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6859      	ldr	r1, [r3, #4]
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	1a8a      	subs	r2, r1, r2
 800c9bc:	605a      	str	r2, [r3, #4]
 800c9be:	e00b      	b.n	800c9d8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d206      	bcs.n	800c9d8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800c9ca:	4b10      	ldr	r3, [pc, #64]	; (800ca0c <sys_timeout+0x140>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	441a      	add	r2, r3
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	601a      	str	r2, [r3, #0]
        break;
 800c9e6:	e007      	b.n	800c9f8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c9e8:	69fb      	ldr	r3, [r7, #28]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	61fb      	str	r3, [r7, #28]
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1c5      	bne.n	800c980 <sys_timeout+0xb4>
 800c9f4:	e000      	b.n	800c9f8 <sys_timeout+0x12c>
    return;
 800c9f6:	bf00      	nop
      }
    }
  }
}
 800c9f8:	3720      	adds	r7, #32
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	08011a34 	.word	0x08011a34
 800ca04:	08011a68 	.word	0x08011a68
 800ca08:	08011aa8 	.word	0x08011aa8
 800ca0c:	2000054c 	.word	0x2000054c
 800ca10:	20000550 	.word	0x20000550

0800ca14 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800ca1a:	4b24      	ldr	r3, [pc, #144]	; (800caac <sys_check_timeouts+0x98>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d040      	beq.n	800caa4 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800ca22:	f7f7 fd5b 	bl	80044dc <sys_now>
 800ca26:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ca28:	4b21      	ldr	r3, [pc, #132]	; (800cab0 <sys_check_timeouts+0x9c>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800ca32:	4b20      	ldr	r3, [pc, #128]	; (800cab4 <sys_check_timeouts+0xa0>)
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <sys_check_timeouts+0x2c>
 800ca3c:	f7f9 ff00 	bl	8006840 <pbuf_free_ooseq>
      had_one = 0;
 800ca40:	2300      	movs	r3, #0
 800ca42:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800ca44:	4b19      	ldr	r3, [pc, #100]	; (800caac <sys_check_timeouts+0x98>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d026      	beq.n	800ca9e <sys_check_timeouts+0x8a>
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	685b      	ldr	r3, [r3, #4]
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d321      	bcc.n	800ca9e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	4b13      	ldr	r3, [pc, #76]	; (800cab0 <sys_check_timeouts+0x9c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4413      	add	r3, r2
 800ca68:	4a11      	ldr	r2, [pc, #68]	; (800cab0 <sys_check_timeouts+0x9c>)
 800ca6a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	697a      	ldr	r2, [r7, #20]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a0c      	ldr	r2, [pc, #48]	; (800caac <sys_check_timeouts+0x98>)
 800ca7c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ca8a:	68b9      	ldr	r1, [r7, #8]
 800ca8c:	2006      	movs	r0, #6
 800ca8e:	f7f9 fd41 	bl	8006514 <memp_free>
        if (handler != NULL) {
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6838      	ldr	r0, [r7, #0]
 800ca9c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800ca9e:	7cfb      	ldrb	r3, [r7, #19]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1c6      	bne.n	800ca32 <sys_check_timeouts+0x1e>
  }
}
 800caa4:	bf00      	nop
 800caa6:	3718      	adds	r7, #24
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	2000054c 	.word	0x2000054c
 800cab0:	20000550 	.word	0x20000550
 800cab4:	20007144 	.word	0x20007144

0800cab8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cab8:	b480      	push	{r7}
 800caba:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800cabc:	bf00      	nop
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bc80      	pop	{r7}
 800cac2:	4770      	bx	lr

0800cac4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4613      	mov	r3, r2
 800cad0:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cad2:	79fb      	ldrb	r3, [r7, #7]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d018      	beq.n	800cb0a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d013      	beq.n	800cb06 <udp_input_local_match+0x42>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00f      	beq.n	800cb06 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cae6:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <udp_input_local_match+0x70>)
 800cae8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800caea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caee:	d00a      	beq.n	800cb06 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	4b0f      	ldr	r3, [pc, #60]	; (800cb34 <udp_input_local_match+0x70>)
 800caf6:	695b      	ldr	r3, [r3, #20]
 800caf8:	405a      	eors	r2, r3
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	3308      	adds	r3, #8
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d110      	bne.n	800cb28 <udp_input_local_match+0x64>
          return 1;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e00f      	b.n	800cb2a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d009      	beq.n	800cb24 <udp_input_local_match+0x60>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d005      	beq.n	800cb24 <udp_input_local_match+0x60>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <udp_input_local_match+0x70>)
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d101      	bne.n	800cb28 <udp_input_local_match+0x64>
      return 1;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e000      	b.n	800cb2a <udp_input_local_match+0x66>
    }
  }

  return 0;
 800cb28:	2300      	movs	r3, #0
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3714      	adds	r7, #20
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bc80      	pop	{r7}
 800cb32:	4770      	bx	lr
 800cb34:	20003c1c 	.word	0x20003c1c

0800cb38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cb38:	b590      	push	{r4, r7, lr}
 800cb3a:	b08d      	sub	sp, #52	; 0x34
 800cb3c:	af02      	add	r7, sp, #8
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	895b      	ldrh	r3, [r3, #10]
 800cb4a:	2b07      	cmp	r3, #7
 800cb4c:	d803      	bhi.n	800cb56 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7fa fa18 	bl	8006f84 <pbuf_free>
    goto end;
 800cb54:	e0c6      	b.n	800cce4 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cb5c:	4b63      	ldr	r3, [pc, #396]	; (800ccec <udp_input+0x1b4>)
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	4a62      	ldr	r2, [pc, #392]	; (800ccec <udp_input+0x1b4>)
 800cb62:	6812      	ldr	r2, [r2, #0]
 800cb64:	4611      	mov	r1, r2
 800cb66:	4618      	mov	r0, r3
 800cb68:	f001 fc1a 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	881b      	ldrh	r3, [r3, #0]
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7f9 f86e 	bl	8005c58 <lwip_htons>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	885b      	ldrh	r3, [r3, #2]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7f9 f866 	bl	8005c58 <lwip_htons>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cb90:	2300      	movs	r3, #0
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb9c:	4b54      	ldr	r3, [pc, #336]	; (800ccf0 <udp_input+0x1b8>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	627b      	str	r3, [r7, #36]	; 0x24
 800cba2:	e03b      	b.n	800cc1c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	8a5b      	ldrh	r3, [r3, #18]
 800cba8:	89fa      	ldrh	r2, [r7, #14]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d131      	bne.n	800cc12 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cbae:	7cfb      	ldrb	r3, [r7, #19]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbb6:	f7ff ff85 	bl	800cac4 <udp_input_local_match>
 800cbba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d028      	beq.n	800cc12 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	7c1b      	ldrb	r3, [r3, #16]
 800cbc4:	f003 0304 	and.w	r3, r3, #4
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d104      	bne.n	800cbd6 <udp_input+0x9e>
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd4:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd8:	8a9b      	ldrh	r3, [r3, #20]
 800cbda:	8a3a      	ldrh	r2, [r7, #16]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d118      	bne.n	800cc12 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d005      	beq.n	800cbf4 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbea:	685a      	ldr	r2, [r3, #4]
 800cbec:	4b3f      	ldr	r3, [pc, #252]	; (800ccec <udp_input+0x1b4>)
 800cbee:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d10e      	bne.n	800cc12 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cbf4:	6a3b      	ldr	r3, [r7, #32]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d014      	beq.n	800cc24 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	6a3b      	ldr	r3, [r7, #32]
 800cc00:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cc02:	4b3b      	ldr	r3, [pc, #236]	; (800ccf0 <udp_input+0x1b8>)
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc08:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cc0a:	4a39      	ldr	r2, [pc, #228]	; (800ccf0 <udp_input+0x1b8>)
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cc10:	e008      	b.n	800cc24 <udp_input+0xec>
      }
    }

    prev = pcb;
 800cc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc14:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1c0      	bne.n	800cba4 <udp_input+0x6c>
 800cc22:	e000      	b.n	800cc26 <udp_input+0xee>
        break;
 800cc24:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d101      	bne.n	800cc30 <udp_input+0xf8>
    pcb = uncon_pcb;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <udp_input+0x104>
    for_us = 1;
 800cc36:	2301      	movs	r3, #1
 800cc38:	76fb      	strb	r3, [r7, #27]
 800cc3a:	e00a      	b.n	800cc52 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	3304      	adds	r3, #4
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	4b2a      	ldr	r3, [pc, #168]	; (800ccec <udp_input+0x1b4>)
 800cc44:	695b      	ldr	r3, [r3, #20]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	bf0c      	ite	eq
 800cc4a:	2301      	moveq	r3, #1
 800cc4c:	2300      	movne	r3, #0
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cc52:	7efb      	ldrb	r3, [r7, #27]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d042      	beq.n	800ccde <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800cc58:	f06f 0107 	mvn.w	r1, #7
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7fa f96d 	bl	8006f3c <pbuf_header>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00a      	beq.n	800cc7e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800cc68:	4b22      	ldr	r3, [pc, #136]	; (800ccf4 <udp_input+0x1bc>)
 800cc6a:	f240 1255 	movw	r2, #341	; 0x155
 800cc6e:	4922      	ldr	r1, [pc, #136]	; (800ccf8 <udp_input+0x1c0>)
 800cc70:	4822      	ldr	r0, [pc, #136]	; (800ccfc <udp_input+0x1c4>)
 800cc72:	f002 facb 	bl	800f20c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7fa f984 	bl	8006f84 <pbuf_free>
      goto end;
 800cc7c:	e032      	b.n	800cce4 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800cc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d012      	beq.n	800ccaa <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	699b      	ldr	r3, [r3, #24]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00a      	beq.n	800cca2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	699c      	ldr	r4, [r3, #24]
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	69d8      	ldr	r0, [r3, #28]
 800cc94:	8a3b      	ldrh	r3, [r7, #16]
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	4b19      	ldr	r3, [pc, #100]	; (800cd00 <udp_input+0x1c8>)
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc9e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cca0:	e021      	b.n	800cce6 <udp_input+0x1ae>
        pbuf_free(p);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7fa f96e 	bl	8006f84 <pbuf_free>
        goto end;
 800cca8:	e01c      	b.n	800cce4 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ccaa:	7cfb      	ldrb	r3, [r7, #19]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d112      	bne.n	800ccd6 <udp_input+0x19e>
 800ccb0:	4b0e      	ldr	r3, [pc, #56]	; (800ccec <udp_input+0x1b4>)
 800ccb2:	695b      	ldr	r3, [r3, #20]
 800ccb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccb8:	2be0      	cmp	r3, #224	; 0xe0
 800ccba:	d00c      	beq.n	800ccd6 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ccbc:	4b0b      	ldr	r3, [pc, #44]	; (800ccec <udp_input+0x1b4>)
 800ccbe:	899b      	ldrh	r3, [r3, #12]
 800ccc0:	3308      	adds	r3, #8
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	b21b      	sxth	r3, r3
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7fa f949 	bl	8006f60 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ccce:	2103      	movs	r1, #3
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f001 f861 	bl	800dd98 <icmp_dest_unreach>
      pbuf_free(p);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7fa f954 	bl	8006f84 <pbuf_free>
  return;
 800ccdc:	e003      	b.n	800cce6 <udp_input+0x1ae>
    pbuf_free(p);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7fa f950 	bl	8006f84 <pbuf_free>
  return;
 800cce4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cce6:	372c      	adds	r7, #44	; 0x2c
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd90      	pop	{r4, r7, pc}
 800ccec:	20003c1c 	.word	0x20003c1c
 800ccf0:	20007164 	.word	0x20007164
 800ccf4:	08011ad0 	.word	0x08011ad0
 800ccf8:	08011b00 	.word	0x08011b00
 800ccfc:	08011b14 	.word	0x08011b14
 800cd00:	20003c2c 	.word	0x20003c2c

0800cd04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d01e      	beq.n	800cd52 <udp_netif_ip_addr_changed+0x4e>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d01a      	beq.n	800cd52 <udp_netif_ip_addr_changed+0x4e>
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d017      	beq.n	800cd52 <udp_netif_ip_addr_changed+0x4e>
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d013      	beq.n	800cd52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cd2a:	4b0c      	ldr	r3, [pc, #48]	; (800cd5c <udp_netif_ip_addr_changed+0x58>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	60fb      	str	r3, [r7, #12]
 800cd30:	e00c      	b.n	800cd4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d103      	bne.n	800cd46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d1ef      	bne.n	800cd32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bc80      	pop	{r7}
 800cd5a:	4770      	bx	lr
 800cd5c:	20007164 	.word	0x20007164

0800cd60 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cd68:	4915      	ldr	r1, [pc, #84]	; (800cdc0 <etharp_free_entry+0x60>)
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	4413      	add	r3, r2
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	440b      	add	r3, r1
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d013      	beq.n	800cda4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cd7c:	4910      	ldr	r1, [pc, #64]	; (800cdc0 <etharp_free_entry+0x60>)
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	4613      	mov	r3, r2
 800cd82:	005b      	lsls	r3, r3, #1
 800cd84:	4413      	add	r3, r2
 800cd86:	00db      	lsls	r3, r3, #3
 800cd88:	440b      	add	r3, r1
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fa f8f9 	bl	8006f84 <pbuf_free>
    arp_table[i].q = NULL;
 800cd92:	490b      	ldr	r1, [pc, #44]	; (800cdc0 <etharp_free_entry+0x60>)
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	4613      	mov	r3, r2
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	4413      	add	r3, r2
 800cd9c:	00db      	lsls	r3, r3, #3
 800cd9e:	440b      	add	r3, r1
 800cda0:	2200      	movs	r2, #0
 800cda2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cda4:	4906      	ldr	r1, [pc, #24]	; (800cdc0 <etharp_free_entry+0x60>)
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	4413      	add	r3, r2
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	440b      	add	r3, r1
 800cdb2:	3314      	adds	r3, #20
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	20000558 	.word	0x20000558

0800cdc4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cdca:	2300      	movs	r3, #0
 800cdcc:	71fb      	strb	r3, [r7, #7]
 800cdce:	e096      	b.n	800cefe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cdd0:	79fa      	ldrb	r2, [r7, #7]
 800cdd2:	494f      	ldr	r1, [pc, #316]	; (800cf10 <etharp_tmr+0x14c>)
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	005b      	lsls	r3, r3, #1
 800cdd8:	4413      	add	r3, r2
 800cdda:	00db      	lsls	r3, r3, #3
 800cddc:	440b      	add	r3, r1
 800cdde:	3314      	adds	r3, #20
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800cde4:	79bb      	ldrb	r3, [r7, #6]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f000 8086 	beq.w	800cef8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800cdec:	79fa      	ldrb	r2, [r7, #7]
 800cdee:	4948      	ldr	r1, [pc, #288]	; (800cf10 <etharp_tmr+0x14c>)
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	005b      	lsls	r3, r3, #1
 800cdf4:	4413      	add	r3, r2
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	440b      	add	r3, r1
 800cdfa:	3312      	adds	r3, #18
 800cdfc:	881b      	ldrh	r3, [r3, #0]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	b298      	uxth	r0, r3
 800ce02:	4943      	ldr	r1, [pc, #268]	; (800cf10 <etharp_tmr+0x14c>)
 800ce04:	4613      	mov	r3, r2
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	440b      	add	r3, r1
 800ce0e:	3312      	adds	r3, #18
 800ce10:	4602      	mov	r2, r0
 800ce12:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ce14:	79fa      	ldrb	r2, [r7, #7]
 800ce16:	493e      	ldr	r1, [pc, #248]	; (800cf10 <etharp_tmr+0x14c>)
 800ce18:	4613      	mov	r3, r2
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	440b      	add	r3, r1
 800ce22:	3312      	adds	r3, #18
 800ce24:	881b      	ldrh	r3, [r3, #0]
 800ce26:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ce2a:	d215      	bcs.n	800ce58 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ce2c:	79fa      	ldrb	r2, [r7, #7]
 800ce2e:	4938      	ldr	r1, [pc, #224]	; (800cf10 <etharp_tmr+0x14c>)
 800ce30:	4613      	mov	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	440b      	add	r3, r1
 800ce3a:	3314      	adds	r3, #20
 800ce3c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d10f      	bne.n	800ce62 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ce42:	79fa      	ldrb	r2, [r7, #7]
 800ce44:	4932      	ldr	r1, [pc, #200]	; (800cf10 <etharp_tmr+0x14c>)
 800ce46:	4613      	mov	r3, r2
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	4413      	add	r3, r2
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	440b      	add	r3, r1
 800ce50:	3312      	adds	r3, #18
 800ce52:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ce54:	2b04      	cmp	r3, #4
 800ce56:	d904      	bls.n	800ce62 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7ff ff80 	bl	800cd60 <etharp_free_entry>
 800ce60:	e04a      	b.n	800cef8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ce62:	79fa      	ldrb	r2, [r7, #7]
 800ce64:	492a      	ldr	r1, [pc, #168]	; (800cf10 <etharp_tmr+0x14c>)
 800ce66:	4613      	mov	r3, r2
 800ce68:	005b      	lsls	r3, r3, #1
 800ce6a:	4413      	add	r3, r2
 800ce6c:	00db      	lsls	r3, r3, #3
 800ce6e:	440b      	add	r3, r1
 800ce70:	3314      	adds	r3, #20
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d10a      	bne.n	800ce8e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ce78:	79fa      	ldrb	r2, [r7, #7]
 800ce7a:	4925      	ldr	r1, [pc, #148]	; (800cf10 <etharp_tmr+0x14c>)
 800ce7c:	4613      	mov	r3, r2
 800ce7e:	005b      	lsls	r3, r3, #1
 800ce80:	4413      	add	r3, r2
 800ce82:	00db      	lsls	r3, r3, #3
 800ce84:	440b      	add	r3, r1
 800ce86:	3314      	adds	r3, #20
 800ce88:	2204      	movs	r2, #4
 800ce8a:	701a      	strb	r2, [r3, #0]
 800ce8c:	e034      	b.n	800cef8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ce8e:	79fa      	ldrb	r2, [r7, #7]
 800ce90:	491f      	ldr	r1, [pc, #124]	; (800cf10 <etharp_tmr+0x14c>)
 800ce92:	4613      	mov	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	4413      	add	r3, r2
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	440b      	add	r3, r1
 800ce9c:	3314      	adds	r3, #20
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b04      	cmp	r3, #4
 800cea2:	d10a      	bne.n	800ceba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cea4:	79fa      	ldrb	r2, [r7, #7]
 800cea6:	491a      	ldr	r1, [pc, #104]	; (800cf10 <etharp_tmr+0x14c>)
 800cea8:	4613      	mov	r3, r2
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	4413      	add	r3, r2
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	440b      	add	r3, r1
 800ceb2:	3314      	adds	r3, #20
 800ceb4:	2202      	movs	r2, #2
 800ceb6:	701a      	strb	r2, [r3, #0]
 800ceb8:	e01e      	b.n	800cef8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ceba:	79fa      	ldrb	r2, [r7, #7]
 800cebc:	4914      	ldr	r1, [pc, #80]	; (800cf10 <etharp_tmr+0x14c>)
 800cebe:	4613      	mov	r3, r2
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	00db      	lsls	r3, r3, #3
 800cec6:	440b      	add	r3, r1
 800cec8:	3314      	adds	r3, #20
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d113      	bne.n	800cef8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ced0:	79fa      	ldrb	r2, [r7, #7]
 800ced2:	490f      	ldr	r1, [pc, #60]	; (800cf10 <etharp_tmr+0x14c>)
 800ced4:	4613      	mov	r3, r2
 800ced6:	005b      	lsls	r3, r3, #1
 800ced8:	4413      	add	r3, r2
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	440b      	add	r3, r1
 800cede:	3308      	adds	r3, #8
 800cee0:	6818      	ldr	r0, [r3, #0]
 800cee2:	79fa      	ldrb	r2, [r7, #7]
 800cee4:	4613      	mov	r3, r2
 800cee6:	005b      	lsls	r3, r3, #1
 800cee8:	4413      	add	r3, r2
 800ceea:	00db      	lsls	r3, r3, #3
 800ceec:	4a08      	ldr	r2, [pc, #32]	; (800cf10 <etharp_tmr+0x14c>)
 800ceee:	4413      	add	r3, r2
 800cef0:	3304      	adds	r3, #4
 800cef2:	4619      	mov	r1, r3
 800cef4:	f000 fe38 	bl	800db68 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cef8:	79fb      	ldrb	r3, [r7, #7]
 800cefa:	3301      	adds	r3, #1
 800cefc:	71fb      	strb	r3, [r7, #7]
 800cefe:	79fb      	ldrb	r3, [r7, #7]
 800cf00:	2b09      	cmp	r3, #9
 800cf02:	f67f af65 	bls.w	800cdd0 <etharp_tmr+0xc>
      }
    }
  }
}
 800cf06:	bf00      	nop
 800cf08:	bf00      	nop
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	20000558 	.word	0x20000558

0800cf14 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b088      	sub	sp, #32
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	607a      	str	r2, [r7, #4]
 800cf20:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cf22:	230a      	movs	r3, #10
 800cf24:	77fb      	strb	r3, [r7, #31]
 800cf26:	230a      	movs	r3, #10
 800cf28:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800cf2a:	230a      	movs	r3, #10
 800cf2c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800cf32:	230a      	movs	r3, #10
 800cf34:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	833b      	strh	r3, [r7, #24]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	82fb      	strh	r3, [r7, #22]
 800cf3e:	2300      	movs	r3, #0
 800cf40:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf42:	2300      	movs	r3, #0
 800cf44:	773b      	strb	r3, [r7, #28]
 800cf46:	e093      	b.n	800d070 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800cf48:	7f3a      	ldrb	r2, [r7, #28]
 800cf4a:	4990      	ldr	r1, [pc, #576]	; (800d18c <etharp_find_entry+0x278>)
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	4413      	add	r3, r2
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	440b      	add	r3, r1
 800cf56:	3314      	adds	r3, #20
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cf5c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cf60:	2b0a      	cmp	r3, #10
 800cf62:	d105      	bne.n	800cf70 <etharp_find_entry+0x5c>
 800cf64:	7cfb      	ldrb	r3, [r7, #19]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d102      	bne.n	800cf70 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800cf6a:	7f3b      	ldrb	r3, [r7, #28]
 800cf6c:	777b      	strb	r3, [r7, #29]
 800cf6e:	e07c      	b.n	800d06a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cf70:	7cfb      	ldrb	r3, [r7, #19]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d079      	beq.n	800d06a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cf76:	7cfb      	ldrb	r3, [r7, #19]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d009      	beq.n	800cf90 <etharp_find_entry+0x7c>
 800cf7c:	7cfb      	ldrb	r3, [r7, #19]
 800cf7e:	2b01      	cmp	r3, #1
 800cf80:	d806      	bhi.n	800cf90 <etharp_find_entry+0x7c>
 800cf82:	4b83      	ldr	r3, [pc, #524]	; (800d190 <etharp_find_entry+0x27c>)
 800cf84:	f240 1225 	movw	r2, #293	; 0x125
 800cf88:	4982      	ldr	r1, [pc, #520]	; (800d194 <etharp_find_entry+0x280>)
 800cf8a:	4883      	ldr	r0, [pc, #524]	; (800d198 <etharp_find_entry+0x284>)
 800cf8c:	f002 f93e 	bl	800f20c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d00f      	beq.n	800cfb6 <etharp_find_entry+0xa2>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6819      	ldr	r1, [r3, #0]
 800cf9a:	7f3a      	ldrb	r2, [r7, #28]
 800cf9c:	487b      	ldr	r0, [pc, #492]	; (800d18c <etharp_find_entry+0x278>)
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	005b      	lsls	r3, r3, #1
 800cfa2:	4413      	add	r3, r2
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	4403      	add	r3, r0
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4299      	cmp	r1, r3
 800cfae:	d102      	bne.n	800cfb6 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cfb0:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cfb4:	e0e5      	b.n	800d182 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cfb6:	7cfb      	ldrb	r3, [r7, #19]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d13b      	bne.n	800d034 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cfbc:	7f3a      	ldrb	r2, [r7, #28]
 800cfbe:	4973      	ldr	r1, [pc, #460]	; (800d18c <etharp_find_entry+0x278>)
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	005b      	lsls	r3, r3, #1
 800cfc4:	4413      	add	r3, r2
 800cfc6:	00db      	lsls	r3, r3, #3
 800cfc8:	440b      	add	r3, r1
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d018      	beq.n	800d002 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800cfd0:	7f3a      	ldrb	r2, [r7, #28]
 800cfd2:	496e      	ldr	r1, [pc, #440]	; (800d18c <etharp_find_entry+0x278>)
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	4413      	add	r3, r2
 800cfda:	00db      	lsls	r3, r3, #3
 800cfdc:	440b      	add	r3, r1
 800cfde:	3312      	adds	r3, #18
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	8b3a      	ldrh	r2, [r7, #24]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d840      	bhi.n	800d06a <etharp_find_entry+0x156>
            old_queue = i;
 800cfe8:	7f3b      	ldrb	r3, [r7, #28]
 800cfea:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800cfec:	7f3a      	ldrb	r2, [r7, #28]
 800cfee:	4967      	ldr	r1, [pc, #412]	; (800d18c <etharp_find_entry+0x278>)
 800cff0:	4613      	mov	r3, r2
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	4413      	add	r3, r2
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	440b      	add	r3, r1
 800cffa:	3312      	adds	r3, #18
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	833b      	strh	r3, [r7, #24]
 800d000:	e033      	b.n	800d06a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d002:	7f3a      	ldrb	r2, [r7, #28]
 800d004:	4961      	ldr	r1, [pc, #388]	; (800d18c <etharp_find_entry+0x278>)
 800d006:	4613      	mov	r3, r2
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	4413      	add	r3, r2
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	440b      	add	r3, r1
 800d010:	3312      	adds	r3, #18
 800d012:	881b      	ldrh	r3, [r3, #0]
 800d014:	8afa      	ldrh	r2, [r7, #22]
 800d016:	429a      	cmp	r2, r3
 800d018:	d827      	bhi.n	800d06a <etharp_find_entry+0x156>
            old_pending = i;
 800d01a:	7f3b      	ldrb	r3, [r7, #28]
 800d01c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800d01e:	7f3a      	ldrb	r2, [r7, #28]
 800d020:	495a      	ldr	r1, [pc, #360]	; (800d18c <etharp_find_entry+0x278>)
 800d022:	4613      	mov	r3, r2
 800d024:	005b      	lsls	r3, r3, #1
 800d026:	4413      	add	r3, r2
 800d028:	00db      	lsls	r3, r3, #3
 800d02a:	440b      	add	r3, r1
 800d02c:	3312      	adds	r3, #18
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	82fb      	strh	r3, [r7, #22]
 800d032:	e01a      	b.n	800d06a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d034:	7cfb      	ldrb	r3, [r7, #19]
 800d036:	2b01      	cmp	r3, #1
 800d038:	d917      	bls.n	800d06a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d03a:	7f3a      	ldrb	r2, [r7, #28]
 800d03c:	4953      	ldr	r1, [pc, #332]	; (800d18c <etharp_find_entry+0x278>)
 800d03e:	4613      	mov	r3, r2
 800d040:	005b      	lsls	r3, r3, #1
 800d042:	4413      	add	r3, r2
 800d044:	00db      	lsls	r3, r3, #3
 800d046:	440b      	add	r3, r1
 800d048:	3312      	adds	r3, #18
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	8aba      	ldrh	r2, [r7, #20]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d80b      	bhi.n	800d06a <etharp_find_entry+0x156>
            old_stable = i;
 800d052:	7f3b      	ldrb	r3, [r7, #28]
 800d054:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800d056:	7f3a      	ldrb	r2, [r7, #28]
 800d058:	494c      	ldr	r1, [pc, #304]	; (800d18c <etharp_find_entry+0x278>)
 800d05a:	4613      	mov	r3, r2
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	4413      	add	r3, r2
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	440b      	add	r3, r1
 800d064:	3312      	adds	r3, #18
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d06a:	7f3b      	ldrb	r3, [r7, #28]
 800d06c:	3301      	adds	r3, #1
 800d06e:	773b      	strb	r3, [r7, #28]
 800d070:	7f3b      	ldrb	r3, [r7, #28]
 800d072:	2b09      	cmp	r3, #9
 800d074:	f67f af68 	bls.w	800cf48 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d078:	7afb      	ldrb	r3, [r7, #11]
 800d07a:	f003 0302 	and.w	r3, r3, #2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d108      	bne.n	800d094 <etharp_find_entry+0x180>
 800d082:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d086:	2b0a      	cmp	r3, #10
 800d088:	d107      	bne.n	800d09a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d08a:	7afb      	ldrb	r3, [r7, #11]
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d102      	bne.n	800d09a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800d094:	f04f 33ff 	mov.w	r3, #4294967295
 800d098:	e073      	b.n	800d182 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d09a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d09e:	2b09      	cmp	r3, #9
 800d0a0:	dc02      	bgt.n	800d0a8 <etharp_find_entry+0x194>
    i = empty;
 800d0a2:	7f7b      	ldrb	r3, [r7, #29]
 800d0a4:	773b      	strb	r3, [r7, #28]
 800d0a6:	e036      	b.n	800d116 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d0a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800d0ac:	2b09      	cmp	r3, #9
 800d0ae:	dc13      	bgt.n	800d0d8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800d0b0:	7fbb      	ldrb	r3, [r7, #30]
 800d0b2:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d0b4:	7f3a      	ldrb	r2, [r7, #28]
 800d0b6:	4935      	ldr	r1, [pc, #212]	; (800d18c <etharp_find_entry+0x278>)
 800d0b8:	4613      	mov	r3, r2
 800d0ba:	005b      	lsls	r3, r3, #1
 800d0bc:	4413      	add	r3, r2
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	440b      	add	r3, r1
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d018      	beq.n	800d0fa <etharp_find_entry+0x1e6>
 800d0c8:	4b31      	ldr	r3, [pc, #196]	; (800d190 <etharp_find_entry+0x27c>)
 800d0ca:	f240 126f 	movw	r2, #367	; 0x16f
 800d0ce:	4933      	ldr	r1, [pc, #204]	; (800d19c <etharp_find_entry+0x288>)
 800d0d0:	4831      	ldr	r0, [pc, #196]	; (800d198 <etharp_find_entry+0x284>)
 800d0d2:	f002 f89b 	bl	800f20c <iprintf>
 800d0d6:	e010      	b.n	800d0fa <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d0d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0dc:	2b09      	cmp	r3, #9
 800d0de:	dc02      	bgt.n	800d0e6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800d0e0:	7ffb      	ldrb	r3, [r7, #31]
 800d0e2:	773b      	strb	r3, [r7, #28]
 800d0e4:	e009      	b.n	800d0fa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d0e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d0ea:	2b09      	cmp	r3, #9
 800d0ec:	dc02      	bgt.n	800d0f4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d0ee:	7efb      	ldrb	r3, [r7, #27]
 800d0f0:	773b      	strb	r3, [r7, #28]
 800d0f2:	e002      	b.n	800d0fa <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800d0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0f8:	e043      	b.n	800d182 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d0fa:	7f3b      	ldrb	r3, [r7, #28]
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	d906      	bls.n	800d10e <etharp_find_entry+0x1fa>
 800d100:	4b23      	ldr	r3, [pc, #140]	; (800d190 <etharp_find_entry+0x27c>)
 800d102:	f240 1281 	movw	r2, #385	; 0x181
 800d106:	4926      	ldr	r1, [pc, #152]	; (800d1a0 <etharp_find_entry+0x28c>)
 800d108:	4823      	ldr	r0, [pc, #140]	; (800d198 <etharp_find_entry+0x284>)
 800d10a:	f002 f87f 	bl	800f20c <iprintf>
    etharp_free_entry(i);
 800d10e:	7f3b      	ldrb	r3, [r7, #28]
 800d110:	4618      	mov	r0, r3
 800d112:	f7ff fe25 	bl	800cd60 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d116:	7f3b      	ldrb	r3, [r7, #28]
 800d118:	2b09      	cmp	r3, #9
 800d11a:	d906      	bls.n	800d12a <etharp_find_entry+0x216>
 800d11c:	4b1c      	ldr	r3, [pc, #112]	; (800d190 <etharp_find_entry+0x27c>)
 800d11e:	f240 1285 	movw	r2, #389	; 0x185
 800d122:	491f      	ldr	r1, [pc, #124]	; (800d1a0 <etharp_find_entry+0x28c>)
 800d124:	481c      	ldr	r0, [pc, #112]	; (800d198 <etharp_find_entry+0x284>)
 800d126:	f002 f871 	bl	800f20c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d12a:	7f3a      	ldrb	r2, [r7, #28]
 800d12c:	4917      	ldr	r1, [pc, #92]	; (800d18c <etharp_find_entry+0x278>)
 800d12e:	4613      	mov	r3, r2
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	4413      	add	r3, r2
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	440b      	add	r3, r1
 800d138:	3314      	adds	r3, #20
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d006      	beq.n	800d14e <etharp_find_entry+0x23a>
 800d140:	4b13      	ldr	r3, [pc, #76]	; (800d190 <etharp_find_entry+0x27c>)
 800d142:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800d146:	4917      	ldr	r1, [pc, #92]	; (800d1a4 <etharp_find_entry+0x290>)
 800d148:	4813      	ldr	r0, [pc, #76]	; (800d198 <etharp_find_entry+0x284>)
 800d14a:	f002 f85f 	bl	800f20c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d00a      	beq.n	800d16a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d154:	7f3a      	ldrb	r2, [r7, #28]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6819      	ldr	r1, [r3, #0]
 800d15a:	480c      	ldr	r0, [pc, #48]	; (800d18c <etharp_find_entry+0x278>)
 800d15c:	4613      	mov	r3, r2
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	4413      	add	r3, r2
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	4403      	add	r3, r0
 800d166:	3304      	adds	r3, #4
 800d168:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d16a:	7f3a      	ldrb	r2, [r7, #28]
 800d16c:	4907      	ldr	r1, [pc, #28]	; (800d18c <etharp_find_entry+0x278>)
 800d16e:	4613      	mov	r3, r2
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	4413      	add	r3, r2
 800d174:	00db      	lsls	r3, r3, #3
 800d176:	440b      	add	r3, r1
 800d178:	3312      	adds	r3, #18
 800d17a:	2200      	movs	r2, #0
 800d17c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800d17e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3720      	adds	r7, #32
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20000558 	.word	0x20000558
 800d190:	08011b6c 	.word	0x08011b6c
 800d194:	08011ba4 	.word	0x08011ba4
 800d198:	08011be4 	.word	0x08011be4
 800d19c:	08011c0c 	.word	0x08011c0c
 800d1a0:	08011c24 	.word	0x08011c24
 800d1a4:	08011c38 	.word	0x08011c38

0800d1a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af02      	add	r7, sp, #8
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	60b9      	str	r1, [r7, #8]
 800d1b2:	607a      	str	r2, [r7, #4]
 800d1b4:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1bc:	2b06      	cmp	r3, #6
 800d1be:	d006      	beq.n	800d1ce <etharp_update_arp_entry+0x26>
 800d1c0:	4b48      	ldr	r3, [pc, #288]	; (800d2e4 <etharp_update_arp_entry+0x13c>)
 800d1c2:	f240 12ab 	movw	r2, #427	; 0x1ab
 800d1c6:	4948      	ldr	r1, [pc, #288]	; (800d2e8 <etharp_update_arp_entry+0x140>)
 800d1c8:	4848      	ldr	r0, [pc, #288]	; (800d2ec <etharp_update_arp_entry+0x144>)
 800d1ca:	f002 f81f 	bl	800f20c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d012      	beq.n	800d1fa <etharp_update_arp_entry+0x52>
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00e      	beq.n	800d1fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	68f9      	ldr	r1, [r7, #12]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f001 f8dc 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800d1e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d105      	bne.n	800d1fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1f6:	2be0      	cmp	r3, #224	; 0xe0
 800d1f8:	d102      	bne.n	800d200 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d1fa:	f06f 030f 	mvn.w	r3, #15
 800d1fe:	e06c      	b.n	800d2da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d200:	78fb      	ldrb	r3, [r7, #3]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	4619      	mov	r1, r3
 800d206:	68b8      	ldr	r0, [r7, #8]
 800d208:	f7ff fe84 	bl	800cf14 <etharp_find_entry>
 800d20c:	4603      	mov	r3, r0
 800d20e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d214:	2b00      	cmp	r3, #0
 800d216:	da02      	bge.n	800d21e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d21c:	e05d      	b.n	800d2da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d21e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d222:	4933      	ldr	r1, [pc, #204]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d224:	4613      	mov	r3, r2
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	440b      	add	r3, r1
 800d22e:	3314      	adds	r3, #20
 800d230:	2202      	movs	r2, #2
 800d232:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d234:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d238:	492d      	ldr	r1, [pc, #180]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d23a:	4613      	mov	r3, r2
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	4413      	add	r3, r2
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	440b      	add	r3, r1
 800d244:	3308      	adds	r3, #8
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800d24a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d24e:	4613      	mov	r3, r2
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	4413      	add	r3, r2
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	3308      	adds	r3, #8
 800d258:	4a25      	ldr	r2, [pc, #148]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d25a:	4413      	add	r3, r2
 800d25c:	3304      	adds	r3, #4
 800d25e:	2206      	movs	r2, #6
 800d260:	6879      	ldr	r1, [r7, #4]
 800d262:	4618      	mov	r0, r3
 800d264:	f001 ffbc 	bl	800f1e0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d268:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d26c:	4920      	ldr	r1, [pc, #128]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d26e:	4613      	mov	r3, r2
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	4413      	add	r3, r2
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	440b      	add	r3, r1
 800d278:	3312      	adds	r3, #18
 800d27a:	2200      	movs	r2, #0
 800d27c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d27e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d282:	491b      	ldr	r1, [pc, #108]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d284:	4613      	mov	r3, r2
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	4413      	add	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	440b      	add	r3, r1
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d021      	beq.n	800d2d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d294:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d298:	4915      	ldr	r1, [pc, #84]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d29a:	4613      	mov	r3, r2
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	4413      	add	r3, r2
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	440b      	add	r3, r1
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d2a8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d2ac:	4910      	ldr	r1, [pc, #64]	; (800d2f0 <etharp_update_arp_entry+0x148>)
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	005b      	lsls	r3, r3, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	00db      	lsls	r3, r3, #3
 800d2b6:	440b      	add	r3, r1
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800d2c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6939      	ldr	r1, [r7, #16]
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f001 ff0d 	bl	800f0ec <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d2d2:	6938      	ldr	r0, [r7, #16]
 800d2d4:	f7f9 fe56 	bl	8006f84 <pbuf_free>
  }
  return ERR_OK;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	08011b6c 	.word	0x08011b6c
 800d2e8:	08011c64 	.word	0x08011c64
 800d2ec:	08011be4 	.word	0x08011be4
 800d2f0:	20000558 	.word	0x20000558

0800d2f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	73fb      	strb	r3, [r7, #15]
 800d300:	e01f      	b.n	800d342 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800d302:	7bfa      	ldrb	r2, [r7, #15]
 800d304:	4913      	ldr	r1, [pc, #76]	; (800d354 <etharp_cleanup_netif+0x60>)
 800d306:	4613      	mov	r3, r2
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	00db      	lsls	r3, r3, #3
 800d30e:	440b      	add	r3, r1
 800d310:	3314      	adds	r3, #20
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d316:	7bbb      	ldrb	r3, [r7, #14]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00f      	beq.n	800d33c <etharp_cleanup_netif+0x48>
 800d31c:	7bfa      	ldrb	r2, [r7, #15]
 800d31e:	490d      	ldr	r1, [pc, #52]	; (800d354 <etharp_cleanup_netif+0x60>)
 800d320:	4613      	mov	r3, r2
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	4413      	add	r3, r2
 800d326:	00db      	lsls	r3, r3, #3
 800d328:	440b      	add	r3, r1
 800d32a:	3308      	adds	r3, #8
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	429a      	cmp	r2, r3
 800d332:	d103      	bne.n	800d33c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800d334:	7bfb      	ldrb	r3, [r7, #15]
 800d336:	4618      	mov	r0, r3
 800d338:	f7ff fd12 	bl	800cd60 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
 800d33e:	3301      	adds	r3, #1
 800d340:	73fb      	strb	r3, [r7, #15]
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	2b09      	cmp	r3, #9
 800d346:	d9dc      	bls.n	800d302 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d348:	bf00      	nop
 800d34a:	bf00      	nop
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	20000558 	.word	0x20000558

0800d358 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d358:	b5b0      	push	{r4, r5, r7, lr}
 800d35a:	b08a      	sub	sp, #40	; 0x28
 800d35c:	af04      	add	r7, sp, #16
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d107      	bne.n	800d378 <etharp_input+0x20>
 800d368:	4b3d      	ldr	r3, [pc, #244]	; (800d460 <etharp_input+0x108>)
 800d36a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800d36e:	493d      	ldr	r1, [pc, #244]	; (800d464 <etharp_input+0x10c>)
 800d370:	483d      	ldr	r0, [pc, #244]	; (800d468 <etharp_input+0x110>)
 800d372:	f001 ff4b 	bl	800f20c <iprintf>
 800d376:	e06f      	b.n	800d458 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	b29b      	uxth	r3, r3
 800d384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d388:	d10c      	bne.n	800d3a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d38e:	2b06      	cmp	r3, #6
 800d390:	d108      	bne.n	800d3a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d396:	2b04      	cmp	r3, #4
 800d398:	d104      	bne.n	800d3a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	885b      	ldrh	r3, [r3, #2]
 800d39e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d3a0:	2b08      	cmp	r3, #8
 800d3a2:	d003      	beq.n	800d3ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f7f9 fded 	bl	8006f84 <pbuf_free>
    return;
 800d3aa:	e055      	b.n	800d458 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	330e      	adds	r3, #14
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	3318      	adds	r3, #24
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d102      	bne.n	800d3cc <etharp_input+0x74>
    for_us = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	75fb      	strb	r3, [r7, #23]
 800d3ca:	e009      	b.n	800d3e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	bf0c      	ite	eq
 800d3d8:	2301      	moveq	r3, #1
 800d3da:	2300      	movne	r3, #0
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	f103 0208 	add.w	r2, r3, #8
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d001      	beq.n	800d3f0 <etharp_input+0x98>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e000      	b.n	800d3f2 <etharp_input+0x9a>
 800d3f0:	2302      	movs	r3, #2
 800d3f2:	f107 010c 	add.w	r1, r7, #12
 800d3f6:	6838      	ldr	r0, [r7, #0]
 800d3f8:	f7ff fed6 	bl	800d1a8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	88db      	ldrh	r3, [r3, #6]
 800d400:	b29b      	uxth	r3, r3
 800d402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d406:	d003      	beq.n	800d410 <etharp_input+0xb8>
 800d408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d40c:	d01e      	beq.n	800d44c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800d40e:	e020      	b.n	800d452 <etharp_input+0xfa>
    if (for_us) {
 800d410:	7dfb      	ldrb	r3, [r7, #23]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d01c      	beq.n	800d450 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800d430:	2102      	movs	r1, #2
 800d432:	9103      	str	r1, [sp, #12]
 800d434:	f107 010c 	add.w	r1, r7, #12
 800d438:	9102      	str	r1, [sp, #8]
 800d43a:	9201      	str	r2, [sp, #4]
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	462b      	mov	r3, r5
 800d440:	4622      	mov	r2, r4
 800d442:	4601      	mov	r1, r0
 800d444:	6838      	ldr	r0, [r7, #0]
 800d446:	f000 fae1 	bl	800da0c <etharp_raw>
    break;
 800d44a:	e001      	b.n	800d450 <etharp_input+0xf8>
    break;
 800d44c:	bf00      	nop
 800d44e:	e000      	b.n	800d452 <etharp_input+0xfa>
    break;
 800d450:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7f9 fd96 	bl	8006f84 <pbuf_free>
}
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bdb0      	pop	{r4, r5, r7, pc}
 800d45e:	bf00      	nop
 800d460:	08011b6c 	.word	0x08011b6c
 800d464:	08011cbc 	.word	0x08011cbc
 800d468:	08011be4 	.word	0x08011be4

0800d46c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af02      	add	r7, sp, #8
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	4613      	mov	r3, r2
 800d478:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d47a:	79fa      	ldrb	r2, [r7, #7]
 800d47c:	4944      	ldr	r1, [pc, #272]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d47e:	4613      	mov	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4413      	add	r3, r2
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	440b      	add	r3, r1
 800d488:	3314      	adds	r3, #20
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d806      	bhi.n	800d49e <etharp_output_to_arp_index+0x32>
 800d490:	4b40      	ldr	r3, [pc, #256]	; (800d594 <etharp_output_to_arp_index+0x128>)
 800d492:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800d496:	4940      	ldr	r1, [pc, #256]	; (800d598 <etharp_output_to_arp_index+0x12c>)
 800d498:	4840      	ldr	r0, [pc, #256]	; (800d59c <etharp_output_to_arp_index+0x130>)
 800d49a:	f001 feb7 	bl	800f20c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d49e:	79fa      	ldrb	r2, [r7, #7]
 800d4a0:	493b      	ldr	r1, [pc, #236]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	4413      	add	r3, r2
 800d4a8:	00db      	lsls	r3, r3, #3
 800d4aa:	440b      	add	r3, r1
 800d4ac:	3314      	adds	r3, #20
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d153      	bne.n	800d55c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d4b4:	79fa      	ldrb	r2, [r7, #7]
 800d4b6:	4936      	ldr	r1, [pc, #216]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	4413      	add	r3, r2
 800d4be:	00db      	lsls	r3, r3, #3
 800d4c0:	440b      	add	r3, r1
 800d4c2:	3312      	adds	r3, #18
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d4ca:	d919      	bls.n	800d500 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d4cc:	79fa      	ldrb	r2, [r7, #7]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	005b      	lsls	r3, r3, #1
 800d4d2:	4413      	add	r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	4a2e      	ldr	r2, [pc, #184]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d4d8:	4413      	add	r3, r2
 800d4da:	3304      	adds	r3, #4
 800d4dc:	4619      	mov	r1, r3
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 fb42 	bl	800db68 <etharp_request>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d138      	bne.n	800d55c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4ea:	79fa      	ldrb	r2, [r7, #7]
 800d4ec:	4928      	ldr	r1, [pc, #160]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	4413      	add	r3, r2
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	440b      	add	r3, r1
 800d4f8:	3314      	adds	r3, #20
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	701a      	strb	r2, [r3, #0]
 800d4fe:	e02d      	b.n	800d55c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d500:	79fa      	ldrb	r2, [r7, #7]
 800d502:	4923      	ldr	r1, [pc, #140]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d504:	4613      	mov	r3, r2
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	4413      	add	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	440b      	add	r3, r1
 800d50e:	3312      	adds	r3, #18
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d516:	d321      	bcc.n	800d55c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d518:	79fa      	ldrb	r2, [r7, #7]
 800d51a:	4613      	mov	r3, r2
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	4413      	add	r3, r2
 800d520:	00db      	lsls	r3, r3, #3
 800d522:	4a1b      	ldr	r2, [pc, #108]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d524:	4413      	add	r3, r2
 800d526:	1d19      	adds	r1, r3, #4
 800d528:	79fa      	ldrb	r2, [r7, #7]
 800d52a:	4613      	mov	r3, r2
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	4413      	add	r3, r2
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	3308      	adds	r3, #8
 800d534:	4a16      	ldr	r2, [pc, #88]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d536:	4413      	add	r3, r2
 800d538:	3304      	adds	r3, #4
 800d53a:	461a      	mov	r2, r3
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f000 faf1 	bl	800db24 <etharp_request_dst>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d109      	bne.n	800d55c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d548:	79fa      	ldrb	r2, [r7, #7]
 800d54a:	4911      	ldr	r1, [pc, #68]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d54c:	4613      	mov	r3, r2
 800d54e:	005b      	lsls	r3, r3, #1
 800d550:	4413      	add	r3, r2
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	440b      	add	r3, r1
 800d556:	3314      	adds	r3, #20
 800d558:	2203      	movs	r2, #3
 800d55a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800d562:	79fa      	ldrb	r2, [r7, #7]
 800d564:	4613      	mov	r3, r2
 800d566:	005b      	lsls	r3, r3, #1
 800d568:	4413      	add	r3, r2
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	3308      	adds	r3, #8
 800d56e:	4a08      	ldr	r2, [pc, #32]	; (800d590 <etharp_output_to_arp_index+0x124>)
 800d570:	4413      	add	r3, r2
 800d572:	3304      	adds	r3, #4
 800d574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d578:	9200      	str	r2, [sp, #0]
 800d57a:	460a      	mov	r2, r1
 800d57c:	68b9      	ldr	r1, [r7, #8]
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f001 fdb4 	bl	800f0ec <ethernet_output>
 800d584:	4603      	mov	r3, r0
}
 800d586:	4618      	mov	r0, r3
 800d588:	3710      	adds	r7, #16
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	20000558 	.word	0x20000558
 800d594:	08011b6c 	.word	0x08011b6c
 800d598:	08011cdc 	.word	0x08011cdc
 800d59c:	08011be4 	.word	0x08011be4

0800d5a0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b08a      	sub	sp, #40	; 0x28
 800d5a4:	af02      	add	r7, sp, #8
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <etharp_output+0x24>
 800d5b6:	4b69      	ldr	r3, [pc, #420]	; (800d75c <etharp_output+0x1bc>)
 800d5b8:	f240 321b 	movw	r2, #795	; 0x31b
 800d5bc:	4968      	ldr	r1, [pc, #416]	; (800d760 <etharp_output+0x1c0>)
 800d5be:	4869      	ldr	r0, [pc, #420]	; (800d764 <etharp_output+0x1c4>)
 800d5c0:	f001 fe24 	bl	800f20c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d106      	bne.n	800d5d8 <etharp_output+0x38>
 800d5ca:	4b64      	ldr	r3, [pc, #400]	; (800d75c <etharp_output+0x1bc>)
 800d5cc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d5d0:	4965      	ldr	r1, [pc, #404]	; (800d768 <etharp_output+0x1c8>)
 800d5d2:	4864      	ldr	r0, [pc, #400]	; (800d764 <etharp_output+0x1c4>)
 800d5d4:	f001 fe1a 	bl	800f20c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <etharp_output+0x4c>
 800d5de:	4b5f      	ldr	r3, [pc, #380]	; (800d75c <etharp_output+0x1bc>)
 800d5e0:	f240 321d 	movw	r2, #797	; 0x31d
 800d5e4:	4961      	ldr	r1, [pc, #388]	; (800d76c <etharp_output+0x1cc>)
 800d5e6:	485f      	ldr	r0, [pc, #380]	; (800d764 <etharp_output+0x1c4>)
 800d5e8:	f001 fe10 	bl	800f20c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68f9      	ldr	r1, [r7, #12]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f000 fed4 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d002      	beq.n	800d604 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d5fe:	4b5c      	ldr	r3, [pc, #368]	; (800d770 <etharp_output+0x1d0>)
 800d600:	61fb      	str	r3, [r7, #28]
 800d602:	e09b      	b.n	800d73c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d60c:	2be0      	cmp	r3, #224	; 0xe0
 800d60e:	d118      	bne.n	800d642 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d610:	2301      	movs	r3, #1
 800d612:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d614:	2300      	movs	r3, #0
 800d616:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d618:	235e      	movs	r3, #94	; 0x5e
 800d61a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	3301      	adds	r3, #1
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d626:	b2db      	uxtb	r3, r3
 800d628:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	3302      	adds	r3, #2
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	3303      	adds	r3, #3
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d63a:	f107 0310 	add.w	r3, r7, #16
 800d63e:	61fb      	str	r3, [r7, #28]
 800d640:	e07c      	b.n	800d73c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3304      	adds	r3, #4
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	405a      	eors	r2, r3
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3308      	adds	r3, #8
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4013      	ands	r3, r2
 800d656:	2b00      	cmp	r3, #0
 800d658:	d012      	beq.n	800d680 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d660:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d664:	4293      	cmp	r3, r2
 800d666:	d00b      	beq.n	800d680 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	330c      	adds	r3, #12
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d003      	beq.n	800d67a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	330c      	adds	r3, #12
 800d676:	61bb      	str	r3, [r7, #24]
 800d678:	e002      	b.n	800d680 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d67a:	f06f 0303 	mvn.w	r3, #3
 800d67e:	e069      	b.n	800d754 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d680:	4b3c      	ldr	r3, [pc, #240]	; (800d774 <etharp_output+0x1d4>)
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	4619      	mov	r1, r3
 800d686:	4a3c      	ldr	r2, [pc, #240]	; (800d778 <etharp_output+0x1d8>)
 800d688:	460b      	mov	r3, r1
 800d68a:	005b      	lsls	r3, r3, #1
 800d68c:	440b      	add	r3, r1
 800d68e:	00db      	lsls	r3, r3, #3
 800d690:	4413      	add	r3, r2
 800d692:	3314      	adds	r3, #20
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	2b01      	cmp	r3, #1
 800d698:	d917      	bls.n	800d6ca <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	4b35      	ldr	r3, [pc, #212]	; (800d774 <etharp_output+0x1d4>)
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	4934      	ldr	r1, [pc, #208]	; (800d778 <etharp_output+0x1d8>)
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	005b      	lsls	r3, r3, #1
 800d6aa:	4403      	add	r3, r0
 800d6ac:	00db      	lsls	r3, r3, #3
 800d6ae:	440b      	add	r3, r1
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d108      	bne.n	800d6ca <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d6b8:	4b2e      	ldr	r3, [pc, #184]	; (800d774 <etharp_output+0x1d4>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	68b9      	ldr	r1, [r7, #8]
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f7ff fed3 	bl	800d46c <etharp_output_to_arp_index>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	e044      	b.n	800d754 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	75fb      	strb	r3, [r7, #23]
 800d6ce:	e02a      	b.n	800d726 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d6d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d6d4:	4928      	ldr	r1, [pc, #160]	; (800d778 <etharp_output+0x1d8>)
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	4413      	add	r3, r2
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	440b      	add	r3, r1
 800d6e0:	3314      	adds	r3, #20
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d918      	bls.n	800d71a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	6819      	ldr	r1, [r3, #0]
 800d6ec:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d6f0:	4821      	ldr	r0, [pc, #132]	; (800d778 <etharp_output+0x1d8>)
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	4413      	add	r3, r2
 800d6f8:	00db      	lsls	r3, r3, #3
 800d6fa:	4403      	add	r3, r0
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d700:	4299      	cmp	r1, r3
 800d702:	d10a      	bne.n	800d71a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800d704:	7dfa      	ldrb	r2, [r7, #23]
 800d706:	4b1b      	ldr	r3, [pc, #108]	; (800d774 <etharp_output+0x1d4>)
 800d708:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
 800d70c:	461a      	mov	r2, r3
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f7ff feab 	bl	800d46c <etharp_output_to_arp_index>
 800d716:	4603      	mov	r3, r0
 800d718:	e01c      	b.n	800d754 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	3301      	adds	r3, #1
 800d722:	b2db      	uxtb	r3, r3
 800d724:	75fb      	strb	r3, [r7, #23]
 800d726:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d72a:	2b09      	cmp	r3, #9
 800d72c:	ddd0      	ble.n	800d6d0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	69b9      	ldr	r1, [r7, #24]
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f000 f822 	bl	800d77c <etharp_query>
 800d738:	4603      	mov	r3, r0
 800d73a:	e00b      	b.n	800d754 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800d742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	68b9      	ldr	r1, [r7, #8]
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f001 fccd 	bl	800f0ec <ethernet_output>
 800d752:	4603      	mov	r3, r0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3720      	adds	r7, #32
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	08011b6c 	.word	0x08011b6c
 800d760:	08011cbc 	.word	0x08011cbc
 800d764:	08011be4 	.word	0x08011be4
 800d768:	08011d0c 	.word	0x08011d0c
 800d76c:	08011cac 	.word	0x08011cac
 800d770:	080125e0 	.word	0x080125e0
 800d774:	20000648 	.word	0x20000648
 800d778:	20000558 	.word	0x20000558

0800d77c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08c      	sub	sp, #48	; 0x30
 800d780:	af02      	add	r7, sp, #8
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	3329      	adds	r3, #41	; 0x29
 800d78c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d78e:	23ff      	movs	r3, #255	; 0xff
 800d790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d794:	2300      	movs	r3, #0
 800d796:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68f9      	ldr	r1, [r7, #12]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fdfe 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10c      	bne.n	800d7c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d7b2:	2be0      	cmp	r3, #224	; 0xe0
 800d7b4:	d006      	beq.n	800d7c4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d003      	beq.n	800d7c4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d102      	bne.n	800d7ca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d7c4:	f06f 030f 	mvn.w	r3, #15
 800d7c8:	e10e      	b.n	800d9e8 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	2101      	movs	r1, #1
 800d7ce:	68b8      	ldr	r0, [r7, #8]
 800d7d0:	f7ff fba0 	bl	800cf14 <etharp_find_entry>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800d7d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	da02      	bge.n	800d7e6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800d7e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7e4:	e100      	b.n	800d9e8 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d7e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d7ea:	4981      	ldr	r1, [pc, #516]	; (800d9f0 <etharp_query+0x274>)
 800d7ec:	4613      	mov	r3, r2
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	4413      	add	r3, r2
 800d7f2:	00db      	lsls	r3, r3, #3
 800d7f4:	440b      	add	r3, r1
 800d7f6:	3314      	adds	r3, #20
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d117      	bne.n	800d82e <etharp_query+0xb2>
    is_new_entry = 1;
 800d7fe:	2301      	movs	r3, #1
 800d800:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d802:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d806:	497a      	ldr	r1, [pc, #488]	; (800d9f0 <etharp_query+0x274>)
 800d808:	4613      	mov	r3, r2
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	4413      	add	r3, r2
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	440b      	add	r3, r1
 800d812:	3314      	adds	r3, #20
 800d814:	2201      	movs	r2, #1
 800d816:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d818:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d81c:	4974      	ldr	r1, [pc, #464]	; (800d9f0 <etharp_query+0x274>)
 800d81e:	4613      	mov	r3, r2
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	4413      	add	r3, r2
 800d824:	00db      	lsls	r3, r3, #3
 800d826:	440b      	add	r3, r1
 800d828:	3308      	adds	r3, #8
 800d82a:	68fa      	ldr	r2, [r7, #12]
 800d82c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d82e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d832:	496f      	ldr	r1, [pc, #444]	; (800d9f0 <etharp_query+0x274>)
 800d834:	4613      	mov	r3, r2
 800d836:	005b      	lsls	r3, r3, #1
 800d838:	4413      	add	r3, r2
 800d83a:	00db      	lsls	r3, r3, #3
 800d83c:	440b      	add	r3, r1
 800d83e:	3314      	adds	r3, #20
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b01      	cmp	r3, #1
 800d844:	d012      	beq.n	800d86c <etharp_query+0xf0>
 800d846:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d84a:	4969      	ldr	r1, [pc, #420]	; (800d9f0 <etharp_query+0x274>)
 800d84c:	4613      	mov	r3, r2
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	4413      	add	r3, r2
 800d852:	00db      	lsls	r3, r3, #3
 800d854:	440b      	add	r3, r1
 800d856:	3314      	adds	r3, #20
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d806      	bhi.n	800d86c <etharp_query+0xf0>
 800d85e:	4b65      	ldr	r3, [pc, #404]	; (800d9f4 <etharp_query+0x278>)
 800d860:	f240 32c7 	movw	r2, #967	; 0x3c7
 800d864:	4964      	ldr	r1, [pc, #400]	; (800d9f8 <etharp_query+0x27c>)
 800d866:	4865      	ldr	r0, [pc, #404]	; (800d9fc <etharp_query+0x280>)
 800d868:	f001 fcd0 	bl	800f20c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d102      	bne.n	800d878 <etharp_query+0xfc>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10c      	bne.n	800d892 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d878:	68b9      	ldr	r1, [r7, #8]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f000 f974 	bl	800db68 <etharp_request>
 800d880:	4603      	mov	r3, r0
 800d882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d102      	bne.n	800d892 <etharp_query+0x116>
      return result;
 800d88c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d890:	e0aa      	b.n	800d9e8 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d106      	bne.n	800d8a6 <etharp_query+0x12a>
 800d898:	4b56      	ldr	r3, [pc, #344]	; (800d9f4 <etharp_query+0x278>)
 800d89a:	f240 32db 	movw	r2, #987	; 0x3db
 800d89e:	4958      	ldr	r1, [pc, #352]	; (800da00 <etharp_query+0x284>)
 800d8a0:	4856      	ldr	r0, [pc, #344]	; (800d9fc <etharp_query+0x280>)
 800d8a2:	f001 fcb3 	bl	800f20c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d8a6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d8aa:	4951      	ldr	r1, [pc, #324]	; (800d9f0 <etharp_query+0x274>)
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	4413      	add	r3, r2
 800d8b2:	00db      	lsls	r3, r3, #3
 800d8b4:	440b      	add	r3, r1
 800d8b6:	3314      	adds	r3, #20
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d918      	bls.n	800d8f0 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800d8be:	7cfa      	ldrb	r2, [r7, #19]
 800d8c0:	4b50      	ldr	r3, [pc, #320]	; (800da04 <etharp_query+0x288>)
 800d8c2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d8c4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	005b      	lsls	r3, r3, #1
 800d8cc:	4413      	add	r3, r2
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	3308      	adds	r3, #8
 800d8d2:	4a47      	ldr	r2, [pc, #284]	; (800d9f0 <etharp_query+0x274>)
 800d8d4:	4413      	add	r3, r2
 800d8d6:	3304      	adds	r3, #4
 800d8d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8dc:	9200      	str	r2, [sp, #0]
 800d8de:	697a      	ldr	r2, [r7, #20]
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f001 fc02 	bl	800f0ec <ethernet_output>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8ee:	e079      	b.n	800d9e4 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d8f0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d8f4:	493e      	ldr	r1, [pc, #248]	; (800d9f0 <etharp_query+0x274>)
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	005b      	lsls	r3, r3, #1
 800d8fa:	4413      	add	r3, r2
 800d8fc:	00db      	lsls	r3, r3, #3
 800d8fe:	440b      	add	r3, r1
 800d900:	3314      	adds	r3, #20
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d16d      	bne.n	800d9e4 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d908:	2300      	movs	r3, #0
 800d90a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d910:	e01a      	b.n	800d948 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	895a      	ldrh	r2, [r3, #10]
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	891b      	ldrh	r3, [r3, #8]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d10a      	bne.n	800d934 <etharp_query+0x1b8>
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d006      	beq.n	800d934 <etharp_query+0x1b8>
 800d926:	4b33      	ldr	r3, [pc, #204]	; (800d9f4 <etharp_query+0x278>)
 800d928:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800d92c:	4936      	ldr	r1, [pc, #216]	; (800da08 <etharp_query+0x28c>)
 800d92e:	4833      	ldr	r0, [pc, #204]	; (800d9fc <etharp_query+0x280>)
 800d930:	f001 fc6c 	bl	800f20c <iprintf>
      if (p->type != PBUF_ROM) {
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	7b1b      	ldrb	r3, [r3, #12]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d002      	beq.n	800d942 <etharp_query+0x1c6>
        copy_needed = 1;
 800d93c:	2301      	movs	r3, #1
 800d93e:	61bb      	str	r3, [r7, #24]
        break;
 800d940:	e005      	b.n	800d94e <etharp_query+0x1d2>
      }
      p = p->next;
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1e1      	bne.n	800d912 <etharp_query+0x196>
    }
    if (copy_needed) {
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d017      	beq.n	800d984 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	891b      	ldrh	r3, [r3, #8]
 800d958:	2200      	movs	r2, #0
 800d95a:	4619      	mov	r1, r3
 800d95c:	2002      	movs	r0, #2
 800d95e:	f7f8 ff9f 	bl	80068a0 <pbuf_alloc>
 800d962:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d011      	beq.n	800d98e <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	69f8      	ldr	r0, [r7, #28]
 800d96e:	f7f9 fc2b 	bl	80071c8 <pbuf_copy>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00a      	beq.n	800d98e <etharp_query+0x212>
          pbuf_free(p);
 800d978:	69f8      	ldr	r0, [r7, #28]
 800d97a:	f7f9 fb03 	bl	8006f84 <pbuf_free>
          p = NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	61fb      	str	r3, [r7, #28]
 800d982:	e004      	b.n	800d98e <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d988:	69f8      	ldr	r0, [r7, #28]
 800d98a:	f7f9 fba5 	bl	80070d8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d024      	beq.n	800d9de <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d994:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d998:	4915      	ldr	r1, [pc, #84]	; (800d9f0 <etharp_query+0x274>)
 800d99a:	4613      	mov	r3, r2
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	4413      	add	r3, r2
 800d9a0:	00db      	lsls	r3, r3, #3
 800d9a2:	440b      	add	r3, r1
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00b      	beq.n	800d9c2 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800d9aa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d9ae:	4910      	ldr	r1, [pc, #64]	; (800d9f0 <etharp_query+0x274>)
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	005b      	lsls	r3, r3, #1
 800d9b4:	4413      	add	r3, r2
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	440b      	add	r3, r1
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7f9 fae1 	bl	8006f84 <pbuf_free>
      }
      arp_table[i].q = p;
 800d9c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d9c6:	490a      	ldr	r1, [pc, #40]	; (800d9f0 <etharp_query+0x274>)
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	4413      	add	r3, r2
 800d9ce:	00db      	lsls	r3, r3, #3
 800d9d0:	440b      	add	r3, r1
 800d9d2:	69fa      	ldr	r2, [r7, #28]
 800d9d4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9dc:	e002      	b.n	800d9e4 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d9de:	23ff      	movs	r3, #255	; 0xff
 800d9e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d9e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3728      	adds	r7, #40	; 0x28
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	20000558 	.word	0x20000558
 800d9f4:	08011b6c 	.word	0x08011b6c
 800d9f8:	08011d18 	.word	0x08011d18
 800d9fc:	08011be4 	.word	0x08011be4
 800da00:	08011d0c 	.word	0x08011d0c
 800da04:	20000648 	.word	0x20000648
 800da08:	08011d40 	.word	0x08011d40

0800da0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b08a      	sub	sp, #40	; 0x28
 800da10:	af02      	add	r7, sp, #8
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
 800da18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800da1a:	2300      	movs	r3, #0
 800da1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <etharp_raw+0x26>
 800da24:	4b3a      	ldr	r3, [pc, #232]	; (800db10 <etharp_raw+0x104>)
 800da26:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800da2a:	493a      	ldr	r1, [pc, #232]	; (800db14 <etharp_raw+0x108>)
 800da2c:	483a      	ldr	r0, [pc, #232]	; (800db18 <etharp_raw+0x10c>)
 800da2e:	f001 fbed 	bl	800f20c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800da32:	2200      	movs	r2, #0
 800da34:	211c      	movs	r1, #28
 800da36:	2002      	movs	r0, #2
 800da38:	f7f8 ff32 	bl	80068a0 <pbuf_alloc>
 800da3c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800da44:	f04f 33ff 	mov.w	r3, #4294967295
 800da48:	e05d      	b.n	800db06 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	895b      	ldrh	r3, [r3, #10]
 800da4e:	2b1b      	cmp	r3, #27
 800da50:	d806      	bhi.n	800da60 <etharp_raw+0x54>
 800da52:	4b2f      	ldr	r3, [pc, #188]	; (800db10 <etharp_raw+0x104>)
 800da54:	f240 4263 	movw	r2, #1123	; 0x463
 800da58:	4930      	ldr	r1, [pc, #192]	; (800db1c <etharp_raw+0x110>)
 800da5a:	482f      	ldr	r0, [pc, #188]	; (800db18 <etharp_raw+0x10c>)
 800da5c:	f001 fbd6 	bl	800f20c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800da66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da68:	4618      	mov	r0, r3
 800da6a:	f7f8 f8f5 	bl	8005c58 <lwip_htons>
 800da6e:	4603      	mov	r3, r0
 800da70:	461a      	mov	r2, r3
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da7c:	2b06      	cmp	r3, #6
 800da7e:	d006      	beq.n	800da8e <etharp_raw+0x82>
 800da80:	4b23      	ldr	r3, [pc, #140]	; (800db10 <etharp_raw+0x104>)
 800da82:	f240 426a 	movw	r2, #1130	; 0x46a
 800da86:	4926      	ldr	r1, [pc, #152]	; (800db20 <etharp_raw+0x114>)
 800da88:	4823      	ldr	r0, [pc, #140]	; (800db18 <etharp_raw+0x10c>)
 800da8a:	f001 fbbf 	bl	800f20c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	3308      	adds	r3, #8
 800da92:	2206      	movs	r2, #6
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	4618      	mov	r0, r3
 800da98:	f001 fba2 	bl	800f1e0 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	3312      	adds	r3, #18
 800daa0:	2206      	movs	r2, #6
 800daa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daa4:	4618      	mov	r0, r3
 800daa6:	f001 fb9b 	bl	800f1e0 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	330e      	adds	r3, #14
 800daae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dab0:	6812      	ldr	r2, [r2, #0]
 800dab2:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	3318      	adds	r3, #24
 800dab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daba:	6812      	ldr	r2, [r2, #0]
 800dabc:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2200      	movs	r2, #0
 800dac2:	701a      	strb	r2, [r3, #0]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f042 0201 	orr.w	r2, r2, #1
 800daca:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2200      	movs	r2, #0
 800dad0:	f042 0208 	orr.w	r2, r2, #8
 800dad4:	709a      	strb	r2, [r3, #2]
 800dad6:	2200      	movs	r2, #0
 800dad8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2206      	movs	r2, #6
 800dade:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	2204      	movs	r2, #4
 800dae4:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800dae6:	f640 0306 	movw	r3, #2054	; 0x806
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	69b9      	ldr	r1, [r7, #24]
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f001 fafa 	bl	800f0ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800daf8:	69b8      	ldr	r0, [r7, #24]
 800dafa:	f7f9 fa43 	bl	8006f84 <pbuf_free>
  p = NULL;
 800dafe:	2300      	movs	r3, #0
 800db00:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800db02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3720      	adds	r7, #32
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	08011b6c 	.word	0x08011b6c
 800db14:	08011cbc 	.word	0x08011cbc
 800db18:	08011be4 	.word	0x08011be4
 800db1c:	08011d5c 	.word	0x08011d5c
 800db20:	08011d90 	.word	0x08011d90

0800db24 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b088      	sub	sp, #32
 800db28:	af04      	add	r7, sp, #16
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800db40:	2201      	movs	r2, #1
 800db42:	9203      	str	r2, [sp, #12]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	9202      	str	r2, [sp, #8]
 800db48:	4a06      	ldr	r2, [pc, #24]	; (800db64 <etharp_request_dst+0x40>)
 800db4a:	9201      	str	r2, [sp, #4]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	4603      	mov	r3, r0
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f7ff ff5a 	bl	800da0c <etharp_raw>
 800db58:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	080125e8 	.word	0x080125e8

0800db68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800db72:	4a05      	ldr	r2, [pc, #20]	; (800db88 <etharp_request+0x20>)
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff ffd4 	bl	800db24 <etharp_request_dst>
 800db7c:	4603      	mov	r3, r0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	080125e0 	.word	0x080125e0

0800db8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b08e      	sub	sp, #56	; 0x38
 800db90:	af04      	add	r7, sp, #16
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800db96:	4b7a      	ldr	r3, [pc, #488]	; (800dd80 <icmp_input+0x1f4>)
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	f003 030f 	and.w	r3, r3, #15
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800dbac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbae:	2b13      	cmp	r3, #19
 800dbb0:	f240 80d1 	bls.w	800dd56 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	895b      	ldrh	r3, [r3, #10]
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	f240 80ce 	bls.w	800dd5a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800dbc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f000 80bb 	beq.w	800dd48 <icmp_input+0x1bc>
 800dbd2:	2b08      	cmp	r3, #8
 800dbd4:	f040 80bb 	bne.w	800dd4e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800dbd8:	4b6a      	ldr	r3, [pc, #424]	; (800dd84 <icmp_input+0x1f8>)
 800dbda:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dbdc:	4b68      	ldr	r3, [pc, #416]	; (800dd80 <icmp_input+0x1f4>)
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbe4:	2be0      	cmp	r3, #224	; 0xe0
 800dbe6:	f000 80bf 	beq.w	800dd68 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dbea:	4b65      	ldr	r3, [pc, #404]	; (800dd80 <icmp_input+0x1f4>)
 800dbec:	695b      	ldr	r3, [r3, #20]
 800dbee:	4a64      	ldr	r2, [pc, #400]	; (800dd80 <icmp_input+0x1f4>)
 800dbf0:	6812      	ldr	r2, [r2, #0]
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 fbd3 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f040 80b5 	bne.w	800dd6c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	891b      	ldrh	r3, [r3, #8]
 800dc06:	2b07      	cmp	r3, #7
 800dc08:	f240 80a9 	bls.w	800dd5e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800dc0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc0e:	330e      	adds	r3, #14
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	b21b      	sxth	r3, r3
 800dc14:	4619      	mov	r1, r3
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7f9 f990 	bl	8006f3c <pbuf_header>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d046      	beq.n	800dcb0 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	891a      	ldrh	r2, [r3, #8]
 800dc26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc28:	4413      	add	r3, r2
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4619      	mov	r1, r3
 800dc30:	2002      	movs	r0, #2
 800dc32:	f7f8 fe35 	bl	80068a0 <pbuf_alloc>
 800dc36:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800dc38:	69bb      	ldr	r3, [r7, #24]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f000 8098 	beq.w	800dd70 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	895b      	ldrh	r3, [r3, #10]
 800dc44:	461a      	mov	r2, r3
 800dc46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc48:	3308      	adds	r3, #8
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d203      	bcs.n	800dc56 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800dc4e:	69b8      	ldr	r0, [r7, #24]
 800dc50:	f7f9 f998 	bl	8006f84 <pbuf_free>
        goto icmperr;
 800dc54:	e08d      	b.n	800dd72 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dc5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f001 fabe 	bl	800f1e0 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800dc64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc66:	425b      	negs	r3, r3
 800dc68:	b29b      	uxth	r3, r3
 800dc6a:	b21b      	sxth	r3, r3
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	69b8      	ldr	r0, [r7, #24]
 800dc70:	f7f9 f964 	bl	8006f3c <pbuf_header>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d009      	beq.n	800dc8e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc7a:	4b43      	ldr	r3, [pc, #268]	; (800dd88 <icmp_input+0x1fc>)
 800dc7c:	22af      	movs	r2, #175	; 0xaf
 800dc7e:	4943      	ldr	r1, [pc, #268]	; (800dd8c <icmp_input+0x200>)
 800dc80:	4843      	ldr	r0, [pc, #268]	; (800dd90 <icmp_input+0x204>)
 800dc82:	f001 fac3 	bl	800f20c <iprintf>
        pbuf_free(r);
 800dc86:	69b8      	ldr	r0, [r7, #24]
 800dc88:	f7f9 f97c 	bl	8006f84 <pbuf_free>
        goto icmperr;
 800dc8c:	e071      	b.n	800dd72 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800dc8e:	6879      	ldr	r1, [r7, #4]
 800dc90:	69b8      	ldr	r0, [r7, #24]
 800dc92:	f7f9 fa99 	bl	80071c8 <pbuf_copy>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d003      	beq.n	800dca4 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800dc9c:	69b8      	ldr	r0, [r7, #24]
 800dc9e:	f7f9 f971 	bl	8006f84 <pbuf_free>
        goto icmperr;
 800dca2:	e066      	b.n	800dd72 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7f9 f96d 	bl	8006f84 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	607b      	str	r3, [r7, #4]
 800dcae:	e015      	b.n	800dcdc <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800dcb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcb2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800dcb6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800dcba:	33f2      	adds	r3, #242	; 0xf2
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	b21b      	sxth	r3, r3
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7f9 f93a 	bl	8006f3c <pbuf_header>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d006      	beq.n	800dcdc <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dcce:	4b2e      	ldr	r3, [pc, #184]	; (800dd88 <icmp_input+0x1fc>)
 800dcd0:	22c0      	movs	r2, #192	; 0xc0
 800dcd2:	4930      	ldr	r1, [pc, #192]	; (800dd94 <icmp_input+0x208>)
 800dcd4:	482e      	ldr	r0, [pc, #184]	; (800dd90 <icmp_input+0x204>)
 800dcd6:	f001 fa99 	bl	800f20c <iprintf>
        goto icmperr;
 800dcda:	e04a      	b.n	800dd72 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	685b      	ldr	r3, [r3, #4]
 800dce0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800dce2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7f9 f927 	bl	8006f3c <pbuf_header>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d12b      	bne.n	800dd4c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dd02:	4b1f      	ldr	r3, [pc, #124]	; (800dd80 <icmp_input+0x1f4>)
 800dd04:	691a      	ldr	r2, [r3, #16]
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	2200      	movs	r2, #0
 800dd14:	709a      	strb	r2, [r3, #2]
 800dd16:	2200      	movs	r2, #0
 800dd18:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	22ff      	movs	r2, #255	; 0xff
 800dd1e:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	2200      	movs	r2, #0
 800dd24:	729a      	strb	r2, [r3, #10]
 800dd26:	2200      	movs	r2, #0
 800dd28:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	9302      	str	r3, [sp, #8]
 800dd2e:	2301      	movs	r3, #1
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	2300      	movs	r3, #0
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	23ff      	movs	r3, #255	; 0xff
 800dd38:	2200      	movs	r2, #0
 800dd3a:	69f9      	ldr	r1, [r7, #28]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 fa5d 	bl	800e1fc <ip4_output_if>
 800dd42:	4603      	mov	r3, r0
 800dd44:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800dd46:	e001      	b.n	800dd4c <icmp_input+0x1c0>
    break;
 800dd48:	bf00      	nop
 800dd4a:	e000      	b.n	800dd4e <icmp_input+0x1c2>
    break;
 800dd4c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7f9 f918 	bl	8006f84 <pbuf_free>
  return;
 800dd54:	e011      	b.n	800dd7a <icmp_input+0x1ee>
    goto lenerr;
 800dd56:	bf00      	nop
 800dd58:	e002      	b.n	800dd60 <icmp_input+0x1d4>
    goto lenerr;
 800dd5a:	bf00      	nop
 800dd5c:	e000      	b.n	800dd60 <icmp_input+0x1d4>
      goto lenerr;
 800dd5e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f7f9 f90f 	bl	8006f84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd66:	e008      	b.n	800dd7a <icmp_input+0x1ee>
      goto icmperr;
 800dd68:	bf00      	nop
 800dd6a:	e002      	b.n	800dd72 <icmp_input+0x1e6>
      goto icmperr;
 800dd6c:	bf00      	nop
 800dd6e:	e000      	b.n	800dd72 <icmp_input+0x1e6>
        goto icmperr;
 800dd70:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7f9 f906 	bl	8006f84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd78:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dd7a:	3728      	adds	r7, #40	; 0x28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20003c1c 	.word	0x20003c1c
 800dd84:	20003c30 	.word	0x20003c30
 800dd88:	08011dd4 	.word	0x08011dd4
 800dd8c:	08011e0c 	.word	0x08011e0c
 800dd90:	08011e44 	.word	0x08011e44
 800dd94:	08011e6c 	.word	0x08011e6c

0800dd98 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dda4:	78fb      	ldrb	r3, [r7, #3]
 800dda6:	461a      	mov	r2, r3
 800dda8:	2103      	movs	r1, #3
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 f814 	bl	800ddd8 <icmp_send_response>
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ddc4:	78fb      	ldrb	r3, [r7, #3]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	210b      	movs	r1, #11
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 f804 	bl	800ddd8 <icmp_send_response>
}
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08c      	sub	sp, #48	; 0x30
 800dddc:	af04      	add	r7, sp, #16
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	460b      	mov	r3, r1
 800dde2:	70fb      	strb	r3, [r7, #3]
 800dde4:	4613      	mov	r3, r2
 800dde6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dde8:	2200      	movs	r2, #0
 800ddea:	2124      	movs	r1, #36	; 0x24
 800ddec:	2001      	movs	r0, #1
 800ddee:	f7f8 fd57 	bl	80068a0 <pbuf_alloc>
 800ddf2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d04c      	beq.n	800de94 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	895b      	ldrh	r3, [r3, #10]
 800ddfe:	2b23      	cmp	r3, #35	; 0x23
 800de00:	d806      	bhi.n	800de10 <icmp_send_response+0x38>
 800de02:	4b26      	ldr	r3, [pc, #152]	; (800de9c <icmp_send_response+0xc4>)
 800de04:	f240 1261 	movw	r2, #353	; 0x161
 800de08:	4925      	ldr	r1, [pc, #148]	; (800dea0 <icmp_send_response+0xc8>)
 800de0a:	4826      	ldr	r0, [pc, #152]	; (800dea4 <icmp_send_response+0xcc>)
 800de0c:	f001 f9fe 	bl	800f20c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800de16:	69fb      	ldr	r3, [r7, #28]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	78fa      	ldrb	r2, [r7, #3]
 800de20:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	78ba      	ldrb	r2, [r7, #2]
 800de26:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2200      	movs	r2, #0
 800de2c:	711a      	strb	r2, [r3, #4]
 800de2e:	2200      	movs	r2, #0
 800de30:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2200      	movs	r2, #0
 800de36:	719a      	strb	r2, [r3, #6]
 800de38:	2200      	movs	r2, #0
 800de3a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	f103 0008 	add.w	r0, r3, #8
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	221c      	movs	r2, #28
 800de4a:	4619      	mov	r1, r3
 800de4c:	f001 f9c8 	bl	800f1e0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de56:	f107 030c 	add.w	r3, r7, #12
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 f824 	bl	800dea8 <ip4_route>
 800de60:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d011      	beq.n	800de8c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	2200      	movs	r2, #0
 800de6c:	709a      	strb	r2, [r3, #2]
 800de6e:	2200      	movs	r2, #0
 800de70:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de72:	f107 020c 	add.w	r2, r7, #12
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	9302      	str	r3, [sp, #8]
 800de7a:	2301      	movs	r3, #1
 800de7c:	9301      	str	r3, [sp, #4]
 800de7e:	2300      	movs	r3, #0
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	23ff      	movs	r3, #255	; 0xff
 800de84:	2100      	movs	r1, #0
 800de86:	69f8      	ldr	r0, [r7, #28]
 800de88:	f000 f9b8 	bl	800e1fc <ip4_output_if>
  }
  pbuf_free(q);
 800de8c:	69f8      	ldr	r0, [r7, #28]
 800de8e:	f7f9 f879 	bl	8006f84 <pbuf_free>
 800de92:	e000      	b.n	800de96 <icmp_send_response+0xbe>
    return;
 800de94:	bf00      	nop
}
 800de96:	3720      	adds	r7, #32
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	08011dd4 	.word	0x08011dd4
 800dea0:	08011ea0 	.word	0x08011ea0
 800dea4:	08011e44 	.word	0x08011e44

0800dea8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800deb0:	4b30      	ldr	r3, [pc, #192]	; (800df74 <ip4_route+0xcc>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	60fb      	str	r3, [r7, #12]
 800deb6:	e036      	b.n	800df26 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800debe:	f003 0301 	and.w	r3, r3, #1
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d02b      	beq.n	800df20 <ip4_route+0x78>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dece:	089b      	lsrs	r3, r3, #2
 800ded0:	f003 0301 	and.w	r3, r3, #1
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d022      	beq.n	800df20 <ip4_route+0x78>
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3304      	adds	r3, #4
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d01d      	beq.n	800df20 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3304      	adds	r3, #4
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	405a      	eors	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	3308      	adds	r3, #8
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4013      	ands	r3, r2
 800def8:	2b00      	cmp	r3, #0
 800defa:	d101      	bne.n	800df00 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	e033      	b.n	800df68 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df06:	f003 0302 	and.w	r3, r3, #2
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d108      	bne.n	800df20 <ip4_route+0x78>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	330c      	adds	r3, #12
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d101      	bne.n	800df20 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	e023      	b.n	800df68 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	60fb      	str	r3, [r7, #12]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1c5      	bne.n	800deb8 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df2c:	4b12      	ldr	r3, [pc, #72]	; (800df78 <ip4_route+0xd0>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d015      	beq.n	800df60 <ip4_route+0xb8>
 800df34:	4b10      	ldr	r3, [pc, #64]	; (800df78 <ip4_route+0xd0>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00d      	beq.n	800df60 <ip4_route+0xb8>
 800df44:	4b0c      	ldr	r3, [pc, #48]	; (800df78 <ip4_route+0xd0>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800df4c:	f003 0304 	and.w	r3, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800df54:	4b08      	ldr	r3, [pc, #32]	; (800df78 <ip4_route+0xd0>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	3304      	adds	r3, #4
 800df5a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	e001      	b.n	800df68 <ip4_route+0xc0>
  }

  return netif_default;
 800df64:	4b04      	ldr	r3, [pc, #16]	; (800df78 <ip4_route+0xd0>)
 800df66:	681b      	ldr	r3, [r3, #0]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3714      	adds	r7, #20
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bc80      	pop	{r7}
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	2000713c 	.word	0x2000713c
 800df78:	20007140 	.word	0x20007140

0800df7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	091b      	lsrs	r3, r3, #4
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b04      	cmp	r3, #4
 800df96:	d004      	beq.n	800dfa2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f7f8 fff3 	bl	8006f84 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e124      	b.n	800e1ec <ip4_input+0x270>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	f003 030f 	and.w	r3, r3, #15
 800dfac:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800dfae:	897b      	ldrh	r3, [r7, #10]
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	885b      	ldrh	r3, [r3, #2]
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7f7 fe4c 	bl	8005c58 <lwip_htons>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	891b      	ldrh	r3, [r3, #8]
 800dfc8:	893a      	ldrh	r2, [r7, #8]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d204      	bcs.n	800dfd8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800dfce:	893b      	ldrh	r3, [r7, #8]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7f8 fe62 	bl	8006c9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	895b      	ldrh	r3, [r3, #10]
 800dfdc:	897a      	ldrh	r2, [r7, #10]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d807      	bhi.n	800dff2 <ip4_input+0x76>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	891b      	ldrh	r3, [r3, #8]
 800dfe6:	893a      	ldrh	r2, [r7, #8]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d802      	bhi.n	800dff2 <ip4_input+0x76>
 800dfec:	897b      	ldrh	r3, [r7, #10]
 800dfee:	2b13      	cmp	r3, #19
 800dff0:	d804      	bhi.n	800dffc <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7f8 ffc6 	bl	8006f84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dff8:	2300      	movs	r3, #0
 800dffa:	e0f7      	b.n	800e1ec <ip4_input+0x270>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	691b      	ldr	r3, [r3, #16]
 800e000:	4a7c      	ldr	r2, [pc, #496]	; (800e1f4 <ip4_input+0x278>)
 800e002:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	4a7a      	ldr	r2, [pc, #488]	; (800e1f4 <ip4_input+0x278>)
 800e00a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e00c:	4b79      	ldr	r3, [pc, #484]	; (800e1f4 <ip4_input+0x278>)
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e014:	2be0      	cmp	r3, #224	; 0xe0
 800e016:	d112      	bne.n	800e03e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e01e:	f003 0301 	and.w	r3, r3, #1
 800e022:	b2db      	uxtb	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	d007      	beq.n	800e038 <ip4_input+0xbc>
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	3304      	adds	r3, #4
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d002      	beq.n	800e038 <ip4_input+0xbc>
      netif = inp;
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	613b      	str	r3, [r7, #16]
 800e036:	e041      	b.n	800e0bc <ip4_input+0x140>
    } else {
      netif = NULL;
 800e038:	2300      	movs	r3, #0
 800e03a:	613b      	str	r3, [r7, #16]
 800e03c:	e03e      	b.n	800e0bc <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800e03e:	2301      	movs	r3, #1
 800e040:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	b2db      	uxtb	r3, r3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d014      	beq.n	800e080 <ip4_input+0x104>
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	3304      	adds	r3, #4
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00f      	beq.n	800e080 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e060:	4b64      	ldr	r3, [pc, #400]	; (800e1f4 <ip4_input+0x278>)
 800e062:	695a      	ldr	r2, [r3, #20]
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	3304      	adds	r3, #4
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d026      	beq.n	800e0bc <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e06e:	4b61      	ldr	r3, [pc, #388]	; (800e1f4 <ip4_input+0x278>)
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	6939      	ldr	r1, [r7, #16]
 800e074:	4618      	mov	r0, r3
 800e076:	f000 f993 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800e07a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d11d      	bne.n	800e0bc <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00d      	beq.n	800e0a2 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800e086:	4b5b      	ldr	r3, [pc, #364]	; (800e1f4 <ip4_input+0x278>)
 800e088:	695b      	ldr	r3, [r3, #20]
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	2b7f      	cmp	r3, #127	; 0x7f
 800e08e:	d102      	bne.n	800e096 <ip4_input+0x11a>
          netif = NULL;
 800e090:	2300      	movs	r3, #0
 800e092:	613b      	str	r3, [r7, #16]
          break;
 800e094:	e012      	b.n	800e0bc <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800e096:	2300      	movs	r3, #0
 800e098:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800e09a:	4b57      	ldr	r3, [pc, #348]	; (800e1f8 <ip4_input+0x27c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	613b      	str	r3, [r7, #16]
 800e0a0:	e002      	b.n	800e0a8 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d102      	bne.n	800e0b6 <ip4_input+0x13a>
        netif = netif->next;
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d1c4      	bne.n	800e046 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0bc:	4b4d      	ldr	r3, [pc, #308]	; (800e1f4 <ip4_input+0x278>)
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f000 f96c 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d105      	bne.n	800e0da <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e0ce:	4b49      	ldr	r3, [pc, #292]	; (800e1f4 <ip4_input+0x278>)
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0d6:	2be0      	cmp	r3, #224	; 0xe0
 800e0d8:	d104      	bne.n	800e0e4 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7f8 ff52 	bl	8006f84 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	e083      	b.n	800e1ec <ip4_input+0x270>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d104      	bne.n	800e0f4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7f8 ff4a 	bl	8006f84 <pbuf_free>
    return ERR_OK;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e07b      	b.n	800e1ec <ip4_input+0x270>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	88db      	ldrh	r3, [r3, #6]
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e100:	4013      	ands	r3, r2
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00b      	beq.n	800e11e <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fc8e 	bl	800ea28 <ip4_reass>
 800e10c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <ip4_input+0x19c>
      return ERR_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	e069      	b.n	800e1ec <ip4_input+0x270>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e11e:	4a35      	ldr	r2, [pc, #212]	; (800e1f4 <ip4_input+0x278>)
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e124:	4a33      	ldr	r2, [pc, #204]	; (800e1f4 <ip4_input+0x278>)
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e12a:	4a32      	ldr	r2, [pc, #200]	; (800e1f4 <ip4_input+0x278>)
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	b29b      	uxth	r3, r3
 800e136:	f003 030f 	and.w	r3, r3, #15
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	009b      	lsls	r3, r3, #2
 800e13e:	b29a      	uxth	r2, r3
 800e140:	4b2c      	ldr	r3, [pc, #176]	; (800e1f4 <ip4_input+0x278>)
 800e142:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800e144:	897b      	ldrh	r3, [r7, #10]
 800e146:	425b      	negs	r3, r3
 800e148:	b29b      	uxth	r3, r3
 800e14a:	b21b      	sxth	r3, r3
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7f8 fef4 	bl	8006f3c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	7a5b      	ldrb	r3, [r3, #9]
 800e158:	2b11      	cmp	r3, #17
 800e15a:	d006      	beq.n	800e16a <ip4_input+0x1ee>
 800e15c:	2b11      	cmp	r3, #17
 800e15e:	dc13      	bgt.n	800e188 <ip4_input+0x20c>
 800e160:	2b01      	cmp	r3, #1
 800e162:	d00c      	beq.n	800e17e <ip4_input+0x202>
 800e164:	2b06      	cmp	r3, #6
 800e166:	d005      	beq.n	800e174 <ip4_input+0x1f8>
 800e168:	e00e      	b.n	800e188 <ip4_input+0x20c>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800e16a:	6839      	ldr	r1, [r7, #0]
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7fe fce3 	bl	800cb38 <udp_input>
      break;
 800e172:	e028      	b.n	800e1c6 <ip4_input+0x24a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fa fd9a 	bl	8008cb0 <tcp_input>
      break;
 800e17c:	e023      	b.n	800e1c6 <ip4_input+0x24a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7ff fd03 	bl	800db8c <icmp_input>
      break;
 800e186:	e01e      	b.n	800e1c6 <ip4_input+0x24a>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e188:	4b1a      	ldr	r3, [pc, #104]	; (800e1f4 <ip4_input+0x278>)
 800e18a:	695b      	ldr	r3, [r3, #20]
 800e18c:	6939      	ldr	r1, [r7, #16]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 f906 	bl	800e3a0 <ip4_addr_isbroadcast_u32>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d112      	bne.n	800e1c0 <ip4_input+0x244>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e19a:	4b16      	ldr	r3, [pc, #88]	; (800e1f4 <ip4_input+0x278>)
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e1a2:	2be0      	cmp	r3, #224	; 0xe0
 800e1a4:	d00c      	beq.n	800e1c0 <ip4_input+0x244>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800e1a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f7f8 fed7 	bl	8006f60 <pbuf_header_force>
        p->payload = iphdr;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e1b8:	2102      	movs	r1, #2
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fdec 	bl	800dd98 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7f8 fedf 	bl	8006f84 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e1c6:	4b0b      	ldr	r3, [pc, #44]	; (800e1f4 <ip4_input+0x278>)
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e1cc:	4b09      	ldr	r3, [pc, #36]	; (800e1f4 <ip4_input+0x278>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e1d2:	4b08      	ldr	r3, [pc, #32]	; (800e1f4 <ip4_input+0x278>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e1d8:	4b06      	ldr	r3, [pc, #24]	; (800e1f4 <ip4_input+0x278>)
 800e1da:	2200      	movs	r2, #0
 800e1dc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e1de:	4b05      	ldr	r3, [pc, #20]	; (800e1f4 <ip4_input+0x278>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e1e4:	4b03      	ldr	r3, [pc, #12]	; (800e1f4 <ip4_input+0x278>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	20003c1c 	.word	0x20003c1c
 800e1f8:	2000713c 	.word	0x2000713c

0800e1fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08a      	sub	sp, #40	; 0x28
 800e200:	af04      	add	r7, sp, #16
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d009      	beq.n	800e228 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d003      	beq.n	800e222 <ip4_output_if+0x26>
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d102      	bne.n	800e228 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e224:	3304      	adds	r3, #4
 800e226:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e228:	78fa      	ldrb	r2, [r7, #3]
 800e22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22c:	9302      	str	r3, [sp, #8]
 800e22e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e232:	9301      	str	r3, [sp, #4]
 800e234:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	4613      	mov	r3, r2
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	6979      	ldr	r1, [r7, #20]
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f000 f805 	bl	800e250 <ip4_output_if_src>
 800e246:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b088      	sub	sp, #32
 800e254:	af00      	add	r7, sp, #0
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	60b9      	str	r1, [r7, #8]
 800e25a:	607a      	str	r2, [r7, #4]
 800e25c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	89db      	ldrh	r3, [r3, #14]
 800e262:	2b01      	cmp	r3, #1
 800e264:	d006      	beq.n	800e274 <ip4_output_if_src+0x24>
 800e266:	4b48      	ldr	r3, [pc, #288]	; (800e388 <ip4_output_if_src+0x138>)
 800e268:	f240 3233 	movw	r2, #819	; 0x333
 800e26c:	4947      	ldr	r1, [pc, #284]	; (800e38c <ip4_output_if_src+0x13c>)
 800e26e:	4848      	ldr	r0, [pc, #288]	; (800e390 <ip4_output_if_src+0x140>)
 800e270:	f000 ffcc 	bl	800f20c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d060      	beq.n	800e33c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e27a:	2314      	movs	r3, #20
 800e27c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800e27e:	2114      	movs	r1, #20
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f7f8 fe5b 	bl	8006f3c <pbuf_header>
 800e286:	4603      	mov	r3, r0
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e28c:	f06f 0301 	mvn.w	r3, #1
 800e290:	e075      	b.n	800e37e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	895b      	ldrh	r3, [r3, #10]
 800e29c:	2b13      	cmp	r3, #19
 800e29e:	d806      	bhi.n	800e2ae <ip4_output_if_src+0x5e>
 800e2a0:	4b39      	ldr	r3, [pc, #228]	; (800e388 <ip4_output_if_src+0x138>)
 800e2a2:	f44f 7258 	mov.w	r2, #864	; 0x360
 800e2a6:	493b      	ldr	r1, [pc, #236]	; (800e394 <ip4_output_if_src+0x144>)
 800e2a8:	4839      	ldr	r0, [pc, #228]	; (800e390 <ip4_output_if_src+0x140>)
 800e2aa:	f000 ffaf 	bl	800f20c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	78fa      	ldrb	r2, [r7, #3]
 800e2b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e2ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e2c4:	8b7b      	ldrh	r3, [r7, #26]
 800e2c6:	089b      	lsrs	r3, r3, #2
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e2dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	891b      	ldrh	r3, [r3, #8]
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f7 fcb8 	bl	8005c58 <lwip_htons>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	719a      	strb	r2, [r3, #6]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2fa:	4b27      	ldr	r3, [pc, #156]	; (800e398 <ip4_output_if_src+0x148>)
 800e2fc:	881b      	ldrh	r3, [r3, #0]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7f7 fcaa 	bl	8005c58 <lwip_htons>
 800e304:	4603      	mov	r3, r0
 800e306:	461a      	mov	r2, r3
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e30c:	4b22      	ldr	r3, [pc, #136]	; (800e398 <ip4_output_if_src+0x148>)
 800e30e:	881b      	ldrh	r3, [r3, #0]
 800e310:	3301      	adds	r3, #1
 800e312:	b29a      	uxth	r2, r3
 800e314:	4b20      	ldr	r3, [pc, #128]	; (800e398 <ip4_output_if_src+0x148>)
 800e316:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d104      	bne.n	800e328 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e31e:	4b1f      	ldr	r3, [pc, #124]	; (800e39c <ip4_output_if_src+0x14c>)
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	69fb      	ldr	r3, [r7, #28]
 800e324:	60da      	str	r2, [r3, #12]
 800e326:	e003      	b.n	800e330 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	2200      	movs	r2, #0
 800e334:	729a      	strb	r2, [r3, #10]
 800e336:	2200      	movs	r2, #0
 800e338:	72da      	strb	r2, [r3, #11]
 800e33a:	e008      	b.n	800e34e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e348:	f107 0314 	add.w	r3, r7, #20
 800e34c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00c      	beq.n	800e370 <ip4_output_if_src+0x120>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	891a      	ldrh	r2, [r3, #8]
 800e35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e35e:	429a      	cmp	r2, r3
 800e360:	d906      	bls.n	800e370 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f000 fd0a 	bl	800ed80 <ip4_frag>
 800e36c:	4603      	mov	r3, r0
 800e36e:	e006      	b.n	800e37e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e372:	695b      	ldr	r3, [r3, #20]
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	68f9      	ldr	r1, [r7, #12]
 800e378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e37a:	4798      	blx	r3
 800e37c:	4603      	mov	r3, r0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3720      	adds	r7, #32
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	08011ecc 	.word	0x08011ecc
 800e38c:	08011f00 	.word	0x08011f00
 800e390:	08011f0c 	.word	0x08011f0c
 800e394:	08011f34 	.word	0x08011f34
 800e398:	2000064a 	.word	0x2000064a
 800e39c:	080125dc 	.word	0x080125dc

0800e3a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b4:	d002      	beq.n	800e3bc <ip4_addr_isbroadcast_u32+0x1c>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d101      	bne.n	800e3c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e02a      	b.n	800e416 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3c6:	f003 0302 	and.w	r3, r3, #2
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d101      	bne.n	800e3d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	e021      	b.n	800e416 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d101      	bne.n	800e3e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e019      	b.n	800e416 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	3304      	adds	r3, #4
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	405a      	eors	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10d      	bne.n	800e414 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	43da      	mvns	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	3308      	adds	r3, #8
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d101      	bne.n	800e414 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e410:	2301      	movs	r3, #1
 800e412:	e000      	b.n	800e416 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e414:	2300      	movs	r3, #0
  }
}
 800e416:	4618      	mov	r0, r3
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bc80      	pop	{r7}
 800e41e:	4770      	bx	lr

0800e420 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e426:	2300      	movs	r3, #0
 800e428:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e42a:	4b12      	ldr	r3, [pc, #72]	; (800e474 <ip_reass_tmr+0x54>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e430:	e018      	b.n	800e464 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	7fdb      	ldrb	r3, [r3, #31]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00b      	beq.n	800e452 <ip_reass_tmr+0x32>
      r->timer--;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	7fdb      	ldrb	r3, [r3, #31]
 800e43e:	3b01      	subs	r3, #1
 800e440:	b2da      	uxtb	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	60fb      	str	r3, [r7, #12]
 800e450:	e008      	b.n	800e464 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e45c:	68b9      	ldr	r1, [r7, #8]
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f000 f80a 	bl	800e478 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1e3      	bne.n	800e432 <ip_reass_tmr+0x12>
     }
   }
}
 800e46a:	bf00      	nop
 800e46c:	bf00      	nop
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	2000064c 	.word	0x2000064c

0800e478 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b088      	sub	sp, #32
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e482:	2300      	movs	r3, #0
 800e484:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e486:	683a      	ldr	r2, [r7, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d105      	bne.n	800e49a <ip_reass_free_complete_datagram+0x22>
 800e48e:	4b45      	ldr	r3, [pc, #276]	; (800e5a4 <ip_reass_free_complete_datagram+0x12c>)
 800e490:	22ab      	movs	r2, #171	; 0xab
 800e492:	4945      	ldr	r1, [pc, #276]	; (800e5a8 <ip_reass_free_complete_datagram+0x130>)
 800e494:	4845      	ldr	r0, [pc, #276]	; (800e5ac <ip_reass_free_complete_datagram+0x134>)
 800e496:	f000 feb9 	bl	800f20c <iprintf>
  if (prev != NULL) {
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00a      	beq.n	800e4b6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d005      	beq.n	800e4b6 <ip_reass_free_complete_datagram+0x3e>
 800e4aa:	4b3e      	ldr	r3, [pc, #248]	; (800e5a4 <ip_reass_free_complete_datagram+0x12c>)
 800e4ac:	22ad      	movs	r2, #173	; 0xad
 800e4ae:	4940      	ldr	r1, [pc, #256]	; (800e5b0 <ip_reass_free_complete_datagram+0x138>)
 800e4b0:	483e      	ldr	r0, [pc, #248]	; (800e5ac <ip_reass_free_complete_datagram+0x134>)
 800e4b2:	f000 feab 	bl	800f20c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	685b      	ldr	r3, [r3, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	889b      	ldrh	r3, [r3, #4]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d12a      	bne.n	800e51e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	6858      	ldr	r0, [r3, #4]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	3308      	adds	r3, #8
 800e4de:	2214      	movs	r2, #20
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	f000 fe7d 	bl	800f1e0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	69b8      	ldr	r0, [r7, #24]
 800e4ea:	f7ff fc65 	bl	800ddb8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e4ee:	69b8      	ldr	r0, [r7, #24]
 800e4f0:	f7f8 fddc 	bl	80070ac <pbuf_clen>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e4f8:	8bfa      	ldrh	r2, [r7, #30]
 800e4fa:	8a7b      	ldrh	r3, [r7, #18]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e502:	db05      	blt.n	800e510 <ip_reass_free_complete_datagram+0x98>
 800e504:	4b27      	ldr	r3, [pc, #156]	; (800e5a4 <ip_reass_free_complete_datagram+0x12c>)
 800e506:	22bc      	movs	r2, #188	; 0xbc
 800e508:	492a      	ldr	r1, [pc, #168]	; (800e5b4 <ip_reass_free_complete_datagram+0x13c>)
 800e50a:	4828      	ldr	r0, [pc, #160]	; (800e5ac <ip_reass_free_complete_datagram+0x134>)
 800e50c:	f000 fe7e 	bl	800f20c <iprintf>
    pbufs_freed += clen;
 800e510:	8bfa      	ldrh	r2, [r7, #30]
 800e512:	8a7b      	ldrh	r3, [r7, #18]
 800e514:	4413      	add	r3, r2
 800e516:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e518:	69b8      	ldr	r0, [r7, #24]
 800e51a:	f7f8 fd33 	bl	8006f84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e524:	e01f      	b.n	800e566 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	685b      	ldr	r3, [r3, #4]
 800e52a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e52c:	69bb      	ldr	r3, [r7, #24]
 800e52e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f7f8 fdb8 	bl	80070ac <pbuf_clen>
 800e53c:	4603      	mov	r3, r0
 800e53e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e540:	8bfa      	ldrh	r2, [r7, #30]
 800e542:	8a7b      	ldrh	r3, [r7, #18]
 800e544:	4413      	add	r3, r2
 800e546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e54a:	db05      	blt.n	800e558 <ip_reass_free_complete_datagram+0xe0>
 800e54c:	4b15      	ldr	r3, [pc, #84]	; (800e5a4 <ip_reass_free_complete_datagram+0x12c>)
 800e54e:	22cc      	movs	r2, #204	; 0xcc
 800e550:	4918      	ldr	r1, [pc, #96]	; (800e5b4 <ip_reass_free_complete_datagram+0x13c>)
 800e552:	4816      	ldr	r0, [pc, #88]	; (800e5ac <ip_reass_free_complete_datagram+0x134>)
 800e554:	f000 fe5a 	bl	800f20c <iprintf>
    pbufs_freed += clen;
 800e558:	8bfa      	ldrh	r2, [r7, #30]
 800e55a:	8a7b      	ldrh	r3, [r7, #18]
 800e55c:	4413      	add	r3, r2
 800e55e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e560:	68f8      	ldr	r0, [r7, #12]
 800e562:	f7f8 fd0f 	bl	8006f84 <pbuf_free>
  while (p != NULL) {
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d1dc      	bne.n	800e526 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e56c:	6839      	ldr	r1, [r7, #0]
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 f8c2 	bl	800e6f8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800e574:	4b10      	ldr	r3, [pc, #64]	; (800e5b8 <ip_reass_free_complete_datagram+0x140>)
 800e576:	881b      	ldrh	r3, [r3, #0]
 800e578:	8bfa      	ldrh	r2, [r7, #30]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d905      	bls.n	800e58a <ip_reass_free_complete_datagram+0x112>
 800e57e:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <ip_reass_free_complete_datagram+0x12c>)
 800e580:	22d2      	movs	r2, #210	; 0xd2
 800e582:	490e      	ldr	r1, [pc, #56]	; (800e5bc <ip_reass_free_complete_datagram+0x144>)
 800e584:	4809      	ldr	r0, [pc, #36]	; (800e5ac <ip_reass_free_complete_datagram+0x134>)
 800e586:	f000 fe41 	bl	800f20c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800e58a:	4b0b      	ldr	r3, [pc, #44]	; (800e5b8 <ip_reass_free_complete_datagram+0x140>)
 800e58c:	881a      	ldrh	r2, [r3, #0]
 800e58e:	8bfb      	ldrh	r3, [r7, #30]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	b29a      	uxth	r2, r3
 800e594:	4b08      	ldr	r3, [pc, #32]	; (800e5b8 <ip_reass_free_complete_datagram+0x140>)
 800e596:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e598:	8bfb      	ldrh	r3, [r7, #30]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3720      	adds	r7, #32
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	08011f64 	.word	0x08011f64
 800e5a8:	08011fa0 	.word	0x08011fa0
 800e5ac:	08011fac 	.word	0x08011fac
 800e5b0:	08011fd4 	.word	0x08011fd4
 800e5b4:	08011fe8 	.word	0x08011fe8
 800e5b8:	20000650 	.word	0x20000650
 800e5bc:	08012008 	.word	0x08012008

0800e5c0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b08a      	sub	sp, #40	; 0x28
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e5de:	4b28      	ldr	r3, [pc, #160]	; (800e680 <ip_reass_remove_oldest_datagram+0xc0>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e5e4:	e030      	b.n	800e648 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	695a      	ldr	r2, [r3, #20]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d10c      	bne.n	800e60c <ip_reass_remove_oldest_datagram+0x4c>
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	699a      	ldr	r2, [r3, #24]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	691b      	ldr	r3, [r3, #16]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d106      	bne.n	800e60c <ip_reass_remove_oldest_datagram+0x4c>
 800e5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e600:	899a      	ldrh	r2, [r3, #12]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	889b      	ldrh	r3, [r3, #4]
 800e606:	b29b      	uxth	r3, r3
 800e608:	429a      	cmp	r2, r3
 800e60a:	d014      	beq.n	800e636 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	3301      	adds	r3, #1
 800e610:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e612:	6a3b      	ldr	r3, [r7, #32]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d104      	bne.n	800e622 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	61bb      	str	r3, [r7, #24]
 800e620:	e009      	b.n	800e636 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e624:	7fda      	ldrb	r2, [r3, #31]
 800e626:	6a3b      	ldr	r3, [r7, #32]
 800e628:	7fdb      	ldrb	r3, [r3, #31]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d803      	bhi.n	800e636 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e630:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d001      	beq.n	800e642 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1cb      	bne.n	800e5e6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e64e:	6a3b      	ldr	r3, [r7, #32]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d008      	beq.n	800e666 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e654:	69b9      	ldr	r1, [r7, #24]
 800e656:	6a38      	ldr	r0, [r7, #32]
 800e658:	f7ff ff0e 	bl	800e478 <ip_reass_free_complete_datagram>
 800e65c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e65e:	697a      	ldr	r2, [r7, #20]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4413      	add	r3, r2
 800e664:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	da02      	bge.n	800e674 <ip_reass_remove_oldest_datagram+0xb4>
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	2b01      	cmp	r3, #1
 800e672:	dcac      	bgt.n	800e5ce <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e674:	697b      	ldr	r3, [r7, #20]
}
 800e676:	4618      	mov	r0, r3
 800e678:	3728      	adds	r7, #40	; 0x28
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	2000064c 	.word	0x2000064c

0800e684 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e68e:	2004      	movs	r0, #4
 800e690:	f7f7 fef4 	bl	800647c <memp_malloc>
 800e694:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d110      	bne.n	800e6be <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff ff8e 	bl	800e5c0 <ip_reass_remove_oldest_datagram>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	dc03      	bgt.n	800e6b4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e6ac:	2004      	movs	r0, #4
 800e6ae:	f7f7 fee5 	bl	800647c <memp_malloc>
 800e6b2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d101      	bne.n	800e6be <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e016      	b.n	800e6ec <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e6be:	2220      	movs	r2, #32
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f000 fd9a 	bl	800f1fc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	2203      	movs	r2, #3
 800e6cc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e6ce:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <ip_reass_enqueue_new_datagram+0x70>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e6d6:	4a07      	ldr	r2, [pc, #28]	; (800e6f4 <ip_reass_enqueue_new_datagram+0x70>)
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	3308      	adds	r3, #8
 800e6e0:	2214      	movs	r2, #20
 800e6e2:	6879      	ldr	r1, [r7, #4]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f000 fd7b 	bl	800f1e0 <memcpy>
  return ipr;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	2000064c 	.word	0x2000064c

0800e6f8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e702:	4b10      	ldr	r3, [pc, #64]	; (800e744 <ip_reass_dequeue_datagram+0x4c>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	687a      	ldr	r2, [r7, #4]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d104      	bne.n	800e716 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a0c      	ldr	r2, [pc, #48]	; (800e744 <ip_reass_dequeue_datagram+0x4c>)
 800e712:	6013      	str	r3, [r2, #0]
 800e714:	e00d      	b.n	800e732 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d106      	bne.n	800e72a <ip_reass_dequeue_datagram+0x32>
 800e71c:	4b0a      	ldr	r3, [pc, #40]	; (800e748 <ip_reass_dequeue_datagram+0x50>)
 800e71e:	f240 1245 	movw	r2, #325	; 0x145
 800e722:	490a      	ldr	r1, [pc, #40]	; (800e74c <ip_reass_dequeue_datagram+0x54>)
 800e724:	480a      	ldr	r0, [pc, #40]	; (800e750 <ip_reass_dequeue_datagram+0x58>)
 800e726:	f000 fd71 	bl	800f20c <iprintf>
    prev->next = ipr->next;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	2004      	movs	r0, #4
 800e736:	f7f7 feed 	bl	8006514 <memp_free>
}
 800e73a:	bf00      	nop
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	2000064c 	.word	0x2000064c
 800e748:	08011f64 	.word	0x08011f64
 800e74c:	08012024 	.word	0x08012024
 800e750:	08011fac 	.word	0x08011fac

0800e754 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b08c      	sub	sp, #48	; 0x30
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800e760:	2300      	movs	r3, #0
 800e762:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e764:	2301      	movs	r3, #1
 800e766:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	885b      	ldrh	r3, [r3, #2]
 800e772:	b29b      	uxth	r3, r3
 800e774:	4618      	mov	r0, r3
 800e776:	f7f7 fa6f 	bl	8005c58 <lwip_htons>
 800e77a:	4603      	mov	r3, r0
 800e77c:	461a      	mov	r2, r3
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	b29b      	uxth	r3, r3
 800e784:	f003 030f 	and.w	r3, r3, #15
 800e788:	b29b      	uxth	r3, r3
 800e78a:	009b      	lsls	r3, r3, #2
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	88db      	ldrh	r3, [r3, #6]
 800e796:	b29b      	uxth	r3, r3
 800e798:	4618      	mov	r0, r3
 800e79a:	f7f7 fa5d 	bl	8005c58 <lwip_htons>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	701a      	strb	r2, [r3, #0]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	705a      	strb	r2, [r3, #1]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	709a      	strb	r2, [r3, #2]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c4:	8b3a      	ldrh	r2, [r7, #24]
 800e7c6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800e7c8:	8b3a      	ldrh	r2, [r7, #24]
 800e7ca:	8b7b      	ldrh	r3, [r7, #26]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7da:	e061      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800e7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e4:	889b      	ldrh	r3, [r3, #4]
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	889b      	ldrh	r3, [r3, #4]
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d232      	bcs.n	800e858 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7f6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d01f      	beq.n	800e83e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e800:	889b      	ldrh	r3, [r3, #4]
 800e802:	b29a      	uxth	r2, r3
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	88db      	ldrh	r3, [r3, #6]
 800e808:	b29b      	uxth	r3, r3
 800e80a:	429a      	cmp	r2, r3
 800e80c:	f0c0 80e3 	bcc.w	800e9d6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	88db      	ldrh	r3, [r3, #6]
 800e814:	b29a      	uxth	r2, r3
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	889b      	ldrh	r3, [r3, #4]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	429a      	cmp	r2, r3
 800e81e:	f200 80da 	bhi.w	800e9d6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	88db      	ldrh	r3, [r3, #6]
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e830:	889b      	ldrh	r3, [r3, #4]
 800e832:	b29b      	uxth	r3, r3
 800e834:	429a      	cmp	r2, r3
 800e836:	d037      	beq.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e838:	2300      	movs	r3, #0
 800e83a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e83c:	e034      	b.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e840:	88db      	ldrh	r3, [r3, #6]
 800e842:	b29a      	uxth	r2, r3
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	889b      	ldrh	r3, [r3, #4]
 800e848:	b29b      	uxth	r3, r3
 800e84a:	429a      	cmp	r2, r3
 800e84c:	f200 80c5 	bhi.w	800e9da <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	605a      	str	r2, [r3, #4]
      break;
 800e856:	e027      	b.n	800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	889b      	ldrh	r3, [r3, #4]
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	889b      	ldrh	r3, [r3, #4]
 800e862:	b29b      	uxth	r3, r3
 800e864:	429a      	cmp	r2, r3
 800e866:	f000 80ba 	beq.w	800e9de <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86c:	889b      	ldrh	r3, [r3, #4]
 800e86e:	b29a      	uxth	r2, r3
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	88db      	ldrh	r3, [r3, #6]
 800e874:	b29b      	uxth	r3, r3
 800e876:	429a      	cmp	r2, r3
 800e878:	f0c0 80b3 	bcc.w	800e9e2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d009      	beq.n	800e896 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800e882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e884:	88db      	ldrh	r3, [r3, #6]
 800e886:	b29a      	uxth	r2, r3
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	889b      	ldrh	r3, [r3, #4]
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	429a      	cmp	r2, r3
 800e890:	d001      	beq.n	800e896 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e892:	2300      	movs	r3, #0
 800e894:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d19a      	bne.n	800e7dc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800e8a6:	e000      	b.n	800e8aa <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800e8a8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d12d      	bne.n	800e90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800e8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d01c      	beq.n	800e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	88db      	ldrh	r3, [r3, #6]
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	889b      	ldrh	r3, [r3, #4]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d906      	bls.n	800e8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800e8c6:	4b51      	ldr	r3, [pc, #324]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e8c8:	f240 12ab 	movw	r2, #427	; 0x1ab
 800e8cc:	4950      	ldr	r1, [pc, #320]	; (800ea10 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8ce:	4851      	ldr	r0, [pc, #324]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e8d0:	f000 fc9c 	bl	800f20c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d6:	68ba      	ldr	r2, [r7, #8]
 800e8d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	88db      	ldrh	r3, [r3, #6]
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e2:	889b      	ldrh	r3, [r3, #4]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d010      	beq.n	800e90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	623b      	str	r3, [r7, #32]
 800e8ee:	e00d      	b.n	800e90c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800e8f8:	4b44      	ldr	r3, [pc, #272]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e8fa:	f240 12b3 	movw	r2, #435	; 0x1b3
 800e8fe:	4946      	ldr	r1, [pc, #280]	; (800ea18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e900:	4844      	ldr	r0, [pc, #272]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e902:	f000 fc83 	bl	800f20c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	68ba      	ldr	r2, [r7, #8]
 800e90a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d105      	bne.n	800e91e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	7f9b      	ldrb	r3, [r3, #30]
 800e916:	f003 0301 	and.w	r3, r3, #1
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d059      	beq.n	800e9d2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d04f      	beq.n	800e9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d006      	beq.n	800e93a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	889b      	ldrh	r3, [r3, #4]
 800e934:	b29b      	uxth	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d002      	beq.n	800e940 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	623b      	str	r3, [r7, #32]
 800e93e:	e041      	b.n	800e9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e94a:	e012      	b.n	800e972 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e954:	88db      	ldrh	r3, [r3, #6]
 800e956:	b29a      	uxth	r2, r3
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	889b      	ldrh	r3, [r3, #4]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	429a      	cmp	r2, r3
 800e960:	d002      	beq.n	800e968 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800e962:	2300      	movs	r3, #0
 800e964:	623b      	str	r3, [r7, #32]
            break;
 800e966:	e007      	b.n	800e978 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e9      	bne.n	800e94c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e978:	6a3b      	ldr	r3, [r7, #32]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d022      	beq.n	800e9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800e986:	4b21      	ldr	r3, [pc, #132]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e988:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800e98c:	4923      	ldr	r1, [pc, #140]	; (800ea1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e98e:	4821      	ldr	r0, [pc, #132]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e990:	f000 fc3c 	bl	800f20c <iprintf>
          LWIP_ASSERT("sanity check",
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d106      	bne.n	800e9ae <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800e9a0:	4b1a      	ldr	r3, [pc, #104]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e9a2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800e9a6:	491d      	ldr	r1, [pc, #116]	; (800ea1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e9a8:	481a      	ldr	r0, [pc, #104]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e9aa:	f000 fc2f 	bl	800f20c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d006      	beq.n	800e9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800e9b6:	4b15      	ldr	r3, [pc, #84]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e9b8:	f240 12d7 	movw	r2, #471	; 0x1d7
 800e9bc:	4918      	ldr	r1, [pc, #96]	; (800ea20 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e9be:	4815      	ldr	r0, [pc, #84]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e9c0:	f000 fc24 	bl	800f20c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	bf14      	ite	ne
 800e9ca:	2301      	movne	r3, #1
 800e9cc:	2300      	moveq	r3, #0
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	e018      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	e016      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
          goto freepbuf;
 800e9d6:	bf00      	nop
 800e9d8:	e004      	b.n	800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800e9da:	bf00      	nop
 800e9dc:	e002      	b.n	800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800e9de:	bf00      	nop
 800e9e0:	e000      	b.n	800e9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800e9e2:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800e9e4:	68b8      	ldr	r0, [r7, #8]
 800e9e6:	f7f8 fb61 	bl	80070ac <pbuf_clen>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	1a9b      	subs	r3, r3, r2
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ea24 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e9f8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800e9fa:	68b8      	ldr	r0, [r7, #8]
 800e9fc:	f7f8 fac2 	bl	8006f84 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ea00:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3730      	adds	r7, #48	; 0x30
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	08011f64 	.word	0x08011f64
 800ea10:	08012040 	.word	0x08012040
 800ea14:	08011fac 	.word	0x08011fac
 800ea18:	08012060 	.word	0x08012060
 800ea1c:	08012098 	.word	0x08012098
 800ea20:	080120a8 	.word	0x080120a8
 800ea24:	20000650 	.word	0x20000650

0800ea28 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b08e      	sub	sp, #56	; 0x38
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ea36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	f003 030f 	and.w	r3, r3, #15
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	2b14      	cmp	r3, #20
 800ea42:	f040 8131 	bne.w	800eca8 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ea46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea48:	88db      	ldrh	r3, [r3, #6]
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7f7 f903 	bl	8005c58 <lwip_htons>
 800ea52:	4603      	mov	r3, r0
 800ea54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	885b      	ldrh	r3, [r3, #2]
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7f7 f8f7 	bl	8005c58 <lwip_htons>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	f003 030f 	and.w	r3, r3, #15
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7f8 fb12 	bl	80070ac <pbuf_clen>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ea8c:	4b8e      	ldr	r3, [pc, #568]	; (800ecc8 <ip4_reass+0x2a0>)
 800ea8e:	881b      	ldrh	r3, [r3, #0]
 800ea90:	461a      	mov	r2, r3
 800ea92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea94:	4413      	add	r3, r2
 800ea96:	2b0a      	cmp	r3, #10
 800ea98:	dd10      	ble.n	800eabc <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ea9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaa0:	f7ff fd8e 	bl	800e5c0 <ip_reass_remove_oldest_datagram>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f000 8100 	beq.w	800ecac <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eaac:	4b86      	ldr	r3, [pc, #536]	; (800ecc8 <ip4_reass+0x2a0>)
 800eaae:	881b      	ldrh	r3, [r3, #0]
 800eab0:	461a      	mov	r2, r3
 800eab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eab4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eab6:	2b0a      	cmp	r3, #10
 800eab8:	f300 80f8 	bgt.w	800ecac <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eabc:	4b83      	ldr	r3, [pc, #524]	; (800eccc <ip4_reass+0x2a4>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	633b      	str	r3, [r7, #48]	; 0x30
 800eac2:	e015      	b.n	800eaf0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	695a      	ldr	r2, [r3, #20]
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d10c      	bne.n	800eaea <ip4_reass+0xc2>
 800ead0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead2:	699a      	ldr	r2, [r3, #24]
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d106      	bne.n	800eaea <ip4_reass+0xc2>
 800eadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eade:	899a      	ldrh	r2, [r3, #12]
 800eae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae2:	889b      	ldrh	r3, [r3, #4]
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d006      	beq.n	800eaf8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eaea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	633b      	str	r3, [r7, #48]	; 0x30
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1e6      	bne.n	800eac4 <ip4_reass+0x9c>
 800eaf6:	e000      	b.n	800eafa <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eaf8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d109      	bne.n	800eb14 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eb00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb02:	4619      	mov	r1, r3
 800eb04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb06:	f7ff fdbd 	bl	800e684 <ip_reass_enqueue_new_datagram>
 800eb0a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eb0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d11c      	bne.n	800eb4c <ip4_reass+0x124>
      goto nullreturn;
 800eb12:	e0d0      	b.n	800ecb6 <ip4_reass+0x28e>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb16:	88db      	ldrh	r3, [r3, #6]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7f7 f89c 	bl	8005c58 <lwip_htons>
 800eb20:	4603      	mov	r3, r0
 800eb22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d110      	bne.n	800eb4c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	89db      	ldrh	r3, [r3, #14]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f7f7 f892 	bl	8005c58 <lwip_htons>
 800eb34:	4603      	mov	r3, r0
 800eb36:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d006      	beq.n	800eb4c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	3308      	adds	r3, #8
 800eb42:	2214      	movs	r2, #20
 800eb44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 fb4a 	bl	800f1e0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	88db      	ldrh	r3, [r3, #6]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	f003 0320 	and.w	r3, r3, #32
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	bf0c      	ite	eq
 800eb5a:	2301      	moveq	r3, #1
 800eb5c:	2300      	movne	r3, #0
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d00e      	beq.n	800eb86 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800eb68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb6c:	4413      	add	r3, r2
 800eb6e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800eb70:	8b7a      	ldrh	r2, [r7, #26]
 800eb72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb74:	429a      	cmp	r2, r3
 800eb76:	f0c0 809b 	bcc.w	800ecb0 <ip4_reass+0x288>
 800eb7a:	8b7b      	ldrh	r3, [r7, #26]
 800eb7c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800eb80:	4293      	cmp	r3, r2
 800eb82:	f200 8095 	bhi.w	800ecb0 <ip4_reass+0x288>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800eb86:	69fa      	ldr	r2, [r7, #28]
 800eb88:	6879      	ldr	r1, [r7, #4]
 800eb8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb8c:	f7ff fde2 	bl	800e754 <ip_reass_chain_frag_into_datagram_and_validate>
 800eb90:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb98:	f000 808c 	beq.w	800ecb4 <ip4_reass+0x28c>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eb9c:	4b4a      	ldr	r3, [pc, #296]	; (800ecc8 <ip4_reass+0x2a0>)
 800eb9e:	881a      	ldrh	r2, [r3, #0]
 800eba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eba2:	4413      	add	r3, r2
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	4b48      	ldr	r3, [pc, #288]	; (800ecc8 <ip4_reass+0x2a0>)
 800eba8:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00d      	beq.n	800ebcc <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800ebb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ebb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebb4:	4413      	add	r3, r2
 800ebb6:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ebb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebba:	8a7a      	ldrh	r2, [r7, #18]
 800ebbc:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	7f9b      	ldrb	r3, [r3, #30]
 800ebc2:	f043 0301 	orr.w	r3, r3, #1
 800ebc6:	b2da      	uxtb	r2, r3
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d168      	bne.n	800eca4 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	8b9b      	ldrh	r3, [r3, #28]
 800ebd6:	3314      	adds	r3, #20
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	2214      	movs	r2, #20
 800ebf6:	4619      	mov	r1, r3
 800ebf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebfa:	f000 faf1 	bl	800f1e0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec00:	8b9b      	ldrh	r3, [r3, #28]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7f7 f828 	bl	8005c58 <lwip_htons>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	2200      	movs	r2, #0
 800ec14:	719a      	strb	r2, [r3, #6]
 800ec16:	2200      	movs	r2, #0
 800ec18:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	729a      	strb	r2, [r3, #10]
 800ec20:	2200      	movs	r2, #0
 800ec22:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ec2a:	e00e      	b.n	800ec4a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800ec2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800ec32:	f06f 0113 	mvn.w	r1, #19
 800ec36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec38:	f7f8 f980 	bl	8006f3c <pbuf_header>
      pbuf_cat(p, r);
 800ec3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7f8 fa6c 	bl	800711c <pbuf_cat>
      r = iprh->next_pbuf;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ec4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d1ed      	bne.n	800ec2c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ec50:	4b1e      	ldr	r3, [pc, #120]	; (800eccc <ip4_reass+0x2a4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d102      	bne.n	800ec60 <ip4_reass+0x238>
      ipr_prev = NULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec5e:	e010      	b.n	800ec82 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec60:	4b1a      	ldr	r3, [pc, #104]	; (800eccc <ip4_reass+0x2a4>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec66:	e007      	b.n	800ec78 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d006      	beq.n	800ec80 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d1f4      	bne.n	800ec68 <ip4_reass+0x240>
 800ec7e:	e000      	b.n	800ec82 <ip4_reass+0x25a>
          break;
 800ec80:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ec82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec86:	f7ff fd37 	bl	800e6f8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7f8 fa0e 	bl	80070ac <pbuf_clen>
 800ec90:	4603      	mov	r3, r0
 800ec92:	461a      	mov	r2, r3
 800ec94:	4b0c      	ldr	r3, [pc, #48]	; (800ecc8 <ip4_reass+0x2a0>)
 800ec96:	881b      	ldrh	r3, [r3, #0]
 800ec98:	1a9b      	subs	r3, r3, r2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	4b0a      	ldr	r3, [pc, #40]	; (800ecc8 <ip4_reass+0x2a0>)
 800ec9e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	e00c      	b.n	800ecbe <ip4_reass+0x296>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eca4:	2300      	movs	r3, #0
 800eca6:	e00a      	b.n	800ecbe <ip4_reass+0x296>
    goto nullreturn;
 800eca8:	bf00      	nop
 800ecaa:	e004      	b.n	800ecb6 <ip4_reass+0x28e>
      goto nullreturn;
 800ecac:	bf00      	nop
 800ecae:	e002      	b.n	800ecb6 <ip4_reass+0x28e>
      goto nullreturn;
 800ecb0:	bf00      	nop
 800ecb2:	e000      	b.n	800ecb6 <ip4_reass+0x28e>
    goto nullreturn;
 800ecb4:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7f8 f964 	bl	8006f84 <pbuf_free>
  return NULL;
 800ecbc:	2300      	movs	r3, #0
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3738      	adds	r7, #56	; 0x38
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	20000650 	.word	0x20000650
 800eccc:	2000064c 	.word	0x2000064c

0800ecd0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800ecd4:	2005      	movs	r0, #5
 800ecd6:	f7f7 fbd1 	bl	800647c <memp_malloc>
 800ecda:	4603      	mov	r3, r0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <ip_frag_free_pbuf_custom_ref+0x1c>
 800ecee:	4b07      	ldr	r3, [pc, #28]	; (800ed0c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ecf0:	f240 22ae 	movw	r2, #686	; 0x2ae
 800ecf4:	4906      	ldr	r1, [pc, #24]	; (800ed10 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ecf6:	4807      	ldr	r0, [pc, #28]	; (800ed14 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ecf8:	f000 fa88 	bl	800f20c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ecfc:	6879      	ldr	r1, [r7, #4]
 800ecfe:	2005      	movs	r0, #5
 800ed00:	f7f7 fc08 	bl	8006514 <memp_free>
}
 800ed04:	bf00      	nop
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	08011f64 	.word	0x08011f64
 800ed10:	080120cc 	.word	0x080120cc
 800ed14:	08011fac 	.word	0x08011fac

0800ed18 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d106      	bne.n	800ed38 <ipfrag_free_pbuf_custom+0x20>
 800ed2a:	4b11      	ldr	r3, [pc, #68]	; (800ed70 <ipfrag_free_pbuf_custom+0x58>)
 800ed2c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800ed30:	4910      	ldr	r1, [pc, #64]	; (800ed74 <ipfrag_free_pbuf_custom+0x5c>)
 800ed32:	4811      	ldr	r0, [pc, #68]	; (800ed78 <ipfrag_free_pbuf_custom+0x60>)
 800ed34:	f000 fa6a 	bl	800f20c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800ed38:	68fa      	ldr	r2, [r7, #12]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d006      	beq.n	800ed4e <ipfrag_free_pbuf_custom+0x36>
 800ed40:	4b0b      	ldr	r3, [pc, #44]	; (800ed70 <ipfrag_free_pbuf_custom+0x58>)
 800ed42:	f240 22b9 	movw	r2, #697	; 0x2b9
 800ed46:	490d      	ldr	r1, [pc, #52]	; (800ed7c <ipfrag_free_pbuf_custom+0x64>)
 800ed48:	480b      	ldr	r0, [pc, #44]	; (800ed78 <ipfrag_free_pbuf_custom+0x60>)
 800ed4a:	f000 fa5f 	bl	800f20c <iprintf>
  if (pcr->original != NULL) {
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d004      	beq.n	800ed60 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	695b      	ldr	r3, [r3, #20]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7f8 f912 	bl	8006f84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f7ff ffbd 	bl	800ece0 <ip_frag_free_pbuf_custom_ref>
}
 800ed66:	bf00      	nop
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	08011f64 	.word	0x08011f64
 800ed74:	080120d8 	.word	0x080120d8
 800ed78:	08011fac 	.word	0x08011fac
 800ed7c:	080120e4 	.word	0x080120e4

0800ed80 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b092      	sub	sp, #72	; 0x48
 800ed84:	af02      	add	r7, sp, #8
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ed94:	3b14      	subs	r3, #20
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	da00      	bge.n	800ed9c <ip4_frag+0x1c>
 800ed9a:	3307      	adds	r3, #7
 800ed9c:	10db      	asrs	r3, r3, #3
 800ed9e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800eda0:	2314      	movs	r3, #20
 800eda2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800edaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edac:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800edae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	f003 030f 	and.w	r3, r3, #15
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	2b14      	cmp	r3, #20
 800edba:	d009      	beq.n	800edd0 <ip4_frag+0x50>
 800edbc:	4b7a      	ldr	r3, [pc, #488]	; (800efa8 <ip4_frag+0x228>)
 800edbe:	f240 22e1 	movw	r2, #737	; 0x2e1
 800edc2:	497a      	ldr	r1, [pc, #488]	; (800efac <ip4_frag+0x22c>)
 800edc4:	487a      	ldr	r0, [pc, #488]	; (800efb0 <ip4_frag+0x230>)
 800edc6:	f000 fa21 	bl	800f20c <iprintf>
 800edca:	f06f 0305 	mvn.w	r3, #5
 800edce:	e0e6      	b.n	800ef9e <ip4_frag+0x21e>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800edd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd2:	88db      	ldrh	r3, [r3, #6]
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7f6 ff3e 	bl	8005c58 <lwip_htons>
 800eddc:	4603      	mov	r3, r0
 800edde:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800ede0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ede2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ede6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800ede8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800edea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d009      	beq.n	800ee06 <ip4_frag+0x86>
 800edf2:	4b6d      	ldr	r3, [pc, #436]	; (800efa8 <ip4_frag+0x228>)
 800edf4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800edf8:	496e      	ldr	r1, [pc, #440]	; (800efb4 <ip4_frag+0x234>)
 800edfa:	486d      	ldr	r0, [pc, #436]	; (800efb0 <ip4_frag+0x230>)
 800edfc:	f000 fa06 	bl	800f20c <iprintf>
 800ee00:	f06f 0305 	mvn.w	r3, #5
 800ee04:	e0cb      	b.n	800ef9e <ip4_frag+0x21e>

  left = p->tot_len - IP_HLEN;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	891b      	ldrh	r3, [r3, #8]
 800ee0a:	3b14      	subs	r3, #20
 800ee0c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800ee0e:	e0bd      	b.n	800ef8c <ip4_frag+0x20c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800ee10:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ee12:	00da      	lsls	r2, r3, #3
 800ee14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ee16:	4293      	cmp	r3, r2
 800ee18:	bfa8      	it	ge
 800ee1a:	4613      	movge	r3, r2
 800ee1c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2114      	movs	r1, #20
 800ee22:	2002      	movs	r0, #2
 800ee24:	f7f7 fd3c 	bl	80068a0 <pbuf_alloc>
 800ee28:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800ee2a:	6a3b      	ldr	r3, [r7, #32]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	f000 80b3 	beq.w	800ef98 <ip4_frag+0x218>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	895b      	ldrh	r3, [r3, #10]
 800ee36:	2b13      	cmp	r3, #19
 800ee38:	d806      	bhi.n	800ee48 <ip4_frag+0xc8>
 800ee3a:	4b5b      	ldr	r3, [pc, #364]	; (800efa8 <ip4_frag+0x228>)
 800ee3c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800ee40:	495d      	ldr	r1, [pc, #372]	; (800efb8 <ip4_frag+0x238>)
 800ee42:	485b      	ldr	r0, [pc, #364]	; (800efb0 <ip4_frag+0x230>)
 800ee44:	f000 f9e2 	bl	800f20c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ee48:	6a3b      	ldr	r3, [r7, #32]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	2214      	movs	r2, #20
 800ee4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 f9c5 	bl	800f1e0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ee56:	6a3b      	ldr	r3, [r7, #32]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800ee5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800ee60:	e04f      	b.n	800ef02 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	895a      	ldrh	r2, [r3, #10]
 800ee66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ee68:	1ad3      	subs	r3, r2, r3
 800ee6a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ee6c:	8b7a      	ldrh	r2, [r7, #26]
 800ee6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee70:	4293      	cmp	r3, r2
 800ee72:	bf28      	it	cs
 800ee74:	4613      	movcs	r3, r2
 800ee76:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ee78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d105      	bne.n	800ee8a <ip4_frag+0x10a>
        poff = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	60fb      	str	r3, [r7, #12]
        continue;
 800ee88:	e03b      	b.n	800ef02 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ee8a:	f7ff ff21 	bl	800ecd0 <ip_frag_alloc_pbuf_custom_ref>
 800ee8e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d103      	bne.n	800ee9e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800ee96:	6a38      	ldr	r0, [r7, #32]
 800ee98:	f7f8 f874 	bl	8006f84 <pbuf_free>
        goto memerr;
 800ee9c:	e07d      	b.n	800ef9a <ip4_frag+0x21a>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee9e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eea6:	4413      	add	r3, r2
 800eea8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800eeaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eeac:	9201      	str	r2, [sp, #4]
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2202      	movs	r2, #2
 800eeb4:	2004      	movs	r0, #4
 800eeb6:	f7f7 fe87 	bl	8006bc8 <pbuf_alloced_custom>
 800eeba:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800eec2:	6978      	ldr	r0, [r7, #20]
 800eec4:	f7ff ff0c 	bl	800ece0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800eec8:	6a38      	ldr	r0, [r7, #32]
 800eeca:	f7f8 f85b 	bl	8006f84 <pbuf_free>
        goto memerr;
 800eece:	e064      	b.n	800ef9a <ip4_frag+0x21a>
      }
      pbuf_ref(p);
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f7f8 f901 	bl	80070d8 <pbuf_ref>
      pcr->original = p;
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	68fa      	ldr	r2, [r7, #12]
 800eeda:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	4a37      	ldr	r2, [pc, #220]	; (800efbc <ip4_frag+0x23c>)
 800eee0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800eee2:	6939      	ldr	r1, [r7, #16]
 800eee4:	6a38      	ldr	r0, [r7, #32]
 800eee6:	f7f8 f919 	bl	800711c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800eeea:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800eeec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800eef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d004      	beq.n	800ef02 <ip4_frag+0x182>
        poff = 0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ef02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d1ac      	bne.n	800ee62 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800ef08:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ef0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef0c:	4413      	add	r3, r2
 800ef0e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ef14:	f1a3 0213 	sub.w	r2, r3, #19
 800ef18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	bfcc      	ite	gt
 800ef1e:	2301      	movgt	r3, #1
 800ef20:	2300      	movle	r3, #0
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ef26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ef28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef2c:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800ef2e:	69fb      	ldr	r3, [r7, #28]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d103      	bne.n	800ef3c <ip4_frag+0x1bc>
      tmp = tmp | IP_MF;
 800ef34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ef36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ef3a:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ef3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7f6 fe8a 	bl	8005c58 <lwip_htons>
 800ef44:	4603      	mov	r3, r0
 800ef46:	461a      	mov	r2, r3
 800ef48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ef4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ef4e:	3314      	adds	r3, #20
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7f6 fe80 	bl	8005c58 <lwip_htons>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ef60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef62:	2200      	movs	r2, #0
 800ef64:	729a      	strb	r2, [r3, #10]
 800ef66:	2200      	movs	r2, #0
 800ef68:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	695b      	ldr	r3, [r3, #20]
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	6a39      	ldr	r1, [r7, #32]
 800ef72:	68b8      	ldr	r0, [r7, #8]
 800ef74:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ef76:	6a38      	ldr	r0, [r7, #32]
 800ef78:	f7f8 f804 	bl	8006f84 <pbuf_free>
    left -= fragsize;
 800ef7c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ef7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800ef84:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ef86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ef88:	4413      	add	r3, r2
 800ef8a:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800ef8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f47f af3e 	bne.w	800ee10 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef94:	2300      	movs	r3, #0
 800ef96:	e002      	b.n	800ef9e <ip4_frag+0x21e>
      goto memerr;
 800ef98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3740      	adds	r7, #64	; 0x40
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	08011f64 	.word	0x08011f64
 800efac:	080120f0 	.word	0x080120f0
 800efb0:	08011fac 	.word	0x08011fac
 800efb4:	08012118 	.word	0x08012118
 800efb8:	08012134 	.word	0x08012134
 800efbc:	0800ed19 	.word	0x0800ed19

0800efc0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800efca:	230e      	movs	r3, #14
 800efcc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	895b      	ldrh	r3, [r3, #10]
 800efd2:	2b0e      	cmp	r3, #14
 800efd4:	d977      	bls.n	800f0c6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800efdc:	693b      	ldr	r3, [r7, #16]
 800efde:	7b1a      	ldrb	r2, [r3, #12]
 800efe0:	7b5b      	ldrb	r3, [r3, #13]
 800efe2:	021b      	lsls	r3, r3, #8
 800efe4:	4313      	orrs	r3, r2
 800efe6:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	f003 0301 	and.w	r3, r3, #1
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d023      	beq.n	800f03c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d10f      	bne.n	800f01c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	785b      	ldrb	r3, [r3, #1]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d11b      	bne.n	800f03c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f008:	2b5e      	cmp	r3, #94	; 0x5e
 800f00a:	d117      	bne.n	800f03c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	7b5b      	ldrb	r3, [r3, #13]
 800f010:	f043 0310 	orr.w	r3, r3, #16
 800f014:	b2da      	uxtb	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	735a      	strb	r2, [r3, #13]
 800f01a:	e00f      	b.n	800f03c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	2206      	movs	r2, #6
 800f020:	4931      	ldr	r1, [pc, #196]	; (800f0e8 <ethernet_input+0x128>)
 800f022:	4618      	mov	r0, r3
 800f024:	f000 f8ce 	bl	800f1c4 <memcmp>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d106      	bne.n	800f03c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	7b5b      	ldrb	r3, [r3, #13]
 800f032:	f043 0308 	orr.w	r3, r3, #8
 800f036:	b2da      	uxtb	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f03c:	89fb      	ldrh	r3, [r7, #14]
 800f03e:	2b08      	cmp	r3, #8
 800f040:	d003      	beq.n	800f04a <ethernet_input+0x8a>
 800f042:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f046:	d01e      	beq.n	800f086 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f048:	e046      	b.n	800f0d8 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f050:	f003 0308 	and.w	r3, r3, #8
 800f054:	2b00      	cmp	r3, #0
 800f056:	d038      	beq.n	800f0ca <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	895b      	ldrh	r3, [r3, #10]
 800f05c:	461a      	mov	r2, r3
 800f05e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f062:	429a      	cmp	r2, r3
 800f064:	db33      	blt.n	800f0ce <ethernet_input+0x10e>
 800f066:	8afb      	ldrh	r3, [r7, #22]
 800f068:	425b      	negs	r3, r3
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	b21b      	sxth	r3, r3
 800f06e:	4619      	mov	r1, r3
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7f7 ff63 	bl	8006f3c <pbuf_header>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d128      	bne.n	800f0ce <ethernet_input+0x10e>
        ip4_input(p, netif);
 800f07c:	6839      	ldr	r1, [r7, #0]
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7fe ff7c 	bl	800df7c <ip4_input>
      break;
 800f084:	e01d      	b.n	800f0c2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f08c:	f003 0308 	and.w	r3, r3, #8
 800f090:	2b00      	cmp	r3, #0
 800f092:	d01e      	beq.n	800f0d2 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	895b      	ldrh	r3, [r3, #10]
 800f098:	461a      	mov	r2, r3
 800f09a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	db19      	blt.n	800f0d6 <ethernet_input+0x116>
 800f0a2:	8afb      	ldrh	r3, [r7, #22]
 800f0a4:	425b      	negs	r3, r3
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	b21b      	sxth	r3, r3
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7f7 ff45 	bl	8006f3c <pbuf_header>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d10e      	bne.n	800f0d6 <ethernet_input+0x116>
        etharp_input(p, netif);
 800f0b8:	6839      	ldr	r1, [r7, #0]
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7fe f94c 	bl	800d358 <etharp_input>
      break;
 800f0c0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e00c      	b.n	800f0e0 <ethernet_input+0x120>
    goto free_and_return;
 800f0c6:	bf00      	nop
 800f0c8:	e006      	b.n	800f0d8 <ethernet_input+0x118>
        goto free_and_return;
 800f0ca:	bf00      	nop
 800f0cc:	e004      	b.n	800f0d8 <ethernet_input+0x118>
        goto free_and_return;
 800f0ce:	bf00      	nop
 800f0d0:	e002      	b.n	800f0d8 <ethernet_input+0x118>
        goto free_and_return;
 800f0d2:	bf00      	nop
 800f0d4:	e000      	b.n	800f0d8 <ethernet_input+0x118>
        goto free_and_return;
 800f0d6:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7f7 ff53 	bl	8006f84 <pbuf_free>
  return ERR_OK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3718      	adds	r7, #24
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	080125e0 	.word	0x080125e0

0800f0ec <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b086      	sub	sp, #24
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f0fa:	8c3b      	ldrh	r3, [r7, #32]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7f6 fdab 	bl	8005c58 <lwip_htons>
 800f102:	4603      	mov	r3, r0
 800f104:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800f106:	210e      	movs	r1, #14
 800f108:	68b8      	ldr	r0, [r7, #8]
 800f10a:	f7f7 ff17 	bl	8006f3c <pbuf_header>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d125      	bne.n	800f160 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	8afa      	ldrh	r2, [r7, #22]
 800f11e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	2206      	movs	r2, #6
 800f124:	6839      	ldr	r1, [r7, #0]
 800f126:	4618      	mov	r0, r3
 800f128:	f000 f85a 	bl	800f1e0 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	3306      	adds	r3, #6
 800f130:	2206      	movs	r2, #6
 800f132:	6879      	ldr	r1, [r7, #4]
 800f134:	4618      	mov	r0, r3
 800f136:	f000 f853 	bl	800f1e0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f140:	2b06      	cmp	r3, #6
 800f142:	d006      	beq.n	800f152 <ethernet_output+0x66>
 800f144:	4b0a      	ldr	r3, [pc, #40]	; (800f170 <ethernet_output+0x84>)
 800f146:	f240 122b 	movw	r2, #299	; 0x12b
 800f14a:	490a      	ldr	r1, [pc, #40]	; (800f174 <ethernet_output+0x88>)
 800f14c:	480a      	ldr	r0, [pc, #40]	; (800f178 <ethernet_output+0x8c>)
 800f14e:	f000 f85d 	bl	800f20c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	699b      	ldr	r3, [r3, #24]
 800f156:	68b9      	ldr	r1, [r7, #8]
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	4798      	blx	r3
 800f15c:	4603      	mov	r3, r0
 800f15e:	e002      	b.n	800f166 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f160:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f162:	f06f 0301 	mvn.w	r3, #1
}
 800f166:	4618      	mov	r0, r3
 800f168:	3718      	adds	r7, #24
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	08012154 	.word	0x08012154
 800f174:	0801218c 	.word	0x0801218c
 800f178:	080121c0 	.word	0x080121c0

0800f17c <__libc_init_array>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	2600      	movs	r6, #0
 800f180:	4d0c      	ldr	r5, [pc, #48]	; (800f1b4 <__libc_init_array+0x38>)
 800f182:	4c0d      	ldr	r4, [pc, #52]	; (800f1b8 <__libc_init_array+0x3c>)
 800f184:	1b64      	subs	r4, r4, r5
 800f186:	10a4      	asrs	r4, r4, #2
 800f188:	42a6      	cmp	r6, r4
 800f18a:	d109      	bne.n	800f1a0 <__libc_init_array+0x24>
 800f18c:	f000 ffc6 	bl	801011c <_init>
 800f190:	2600      	movs	r6, #0
 800f192:	4d0a      	ldr	r5, [pc, #40]	; (800f1bc <__libc_init_array+0x40>)
 800f194:	4c0a      	ldr	r4, [pc, #40]	; (800f1c0 <__libc_init_array+0x44>)
 800f196:	1b64      	subs	r4, r4, r5
 800f198:	10a4      	asrs	r4, r4, #2
 800f19a:	42a6      	cmp	r6, r4
 800f19c:	d105      	bne.n	800f1aa <__libc_init_array+0x2e>
 800f19e:	bd70      	pop	{r4, r5, r6, pc}
 800f1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1a4:	4798      	blx	r3
 800f1a6:	3601      	adds	r6, #1
 800f1a8:	e7ee      	b.n	800f188 <__libc_init_array+0xc>
 800f1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ae:	4798      	blx	r3
 800f1b0:	3601      	adds	r6, #1
 800f1b2:	e7f2      	b.n	800f19a <__libc_init_array+0x1e>
 800f1b4:	08012690 	.word	0x08012690
 800f1b8:	08012690 	.word	0x08012690
 800f1bc:	08012690 	.word	0x08012690
 800f1c0:	08012694 	.word	0x08012694

0800f1c4 <memcmp>:
 800f1c4:	b530      	push	{r4, r5, lr}
 800f1c6:	2400      	movs	r4, #0
 800f1c8:	3901      	subs	r1, #1
 800f1ca:	42a2      	cmp	r2, r4
 800f1cc:	d101      	bne.n	800f1d2 <memcmp+0xe>
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	e005      	b.n	800f1de <memcmp+0x1a>
 800f1d2:	5d03      	ldrb	r3, [r0, r4]
 800f1d4:	3401      	adds	r4, #1
 800f1d6:	5d0d      	ldrb	r5, [r1, r4]
 800f1d8:	42ab      	cmp	r3, r5
 800f1da:	d0f6      	beq.n	800f1ca <memcmp+0x6>
 800f1dc:	1b58      	subs	r0, r3, r5
 800f1de:	bd30      	pop	{r4, r5, pc}

0800f1e0 <memcpy>:
 800f1e0:	440a      	add	r2, r1
 800f1e2:	4291      	cmp	r1, r2
 800f1e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1e8:	d100      	bne.n	800f1ec <memcpy+0xc>
 800f1ea:	4770      	bx	lr
 800f1ec:	b510      	push	{r4, lr}
 800f1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1f2:	4291      	cmp	r1, r2
 800f1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1f8:	d1f9      	bne.n	800f1ee <memcpy+0xe>
 800f1fa:	bd10      	pop	{r4, pc}

0800f1fc <memset>:
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	4402      	add	r2, r0
 800f200:	4293      	cmp	r3, r2
 800f202:	d100      	bne.n	800f206 <memset+0xa>
 800f204:	4770      	bx	lr
 800f206:	f803 1b01 	strb.w	r1, [r3], #1
 800f20a:	e7f9      	b.n	800f200 <memset+0x4>

0800f20c <iprintf>:
 800f20c:	b40f      	push	{r0, r1, r2, r3}
 800f20e:	4b0a      	ldr	r3, [pc, #40]	; (800f238 <iprintf+0x2c>)
 800f210:	b513      	push	{r0, r1, r4, lr}
 800f212:	681c      	ldr	r4, [r3, #0]
 800f214:	b124      	cbz	r4, 800f220 <iprintf+0x14>
 800f216:	69a3      	ldr	r3, [r4, #24]
 800f218:	b913      	cbnz	r3, 800f220 <iprintf+0x14>
 800f21a:	4620      	mov	r0, r4
 800f21c:	f000 f88e 	bl	800f33c <__sinit>
 800f220:	ab05      	add	r3, sp, #20
 800f222:	4620      	mov	r0, r4
 800f224:	9a04      	ldr	r2, [sp, #16]
 800f226:	68a1      	ldr	r1, [r4, #8]
 800f228:	9301      	str	r3, [sp, #4]
 800f22a:	f000 f9f5 	bl	800f618 <_vfiprintf_r>
 800f22e:	b002      	add	sp, #8
 800f230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f234:	b004      	add	sp, #16
 800f236:	4770      	bx	lr
 800f238:	20000018 	.word	0x20000018

0800f23c <strchr>:
 800f23c:	4603      	mov	r3, r0
 800f23e:	b2c9      	uxtb	r1, r1
 800f240:	4618      	mov	r0, r3
 800f242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f246:	b112      	cbz	r2, 800f24e <strchr+0x12>
 800f248:	428a      	cmp	r2, r1
 800f24a:	d1f9      	bne.n	800f240 <strchr+0x4>
 800f24c:	4770      	bx	lr
 800f24e:	2900      	cmp	r1, #0
 800f250:	bf18      	it	ne
 800f252:	2000      	movne	r0, #0
 800f254:	4770      	bx	lr

0800f256 <strcpy>:
 800f256:	4603      	mov	r3, r0
 800f258:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f25c:	f803 2b01 	strb.w	r2, [r3], #1
 800f260:	2a00      	cmp	r2, #0
 800f262:	d1f9      	bne.n	800f258 <strcpy+0x2>
 800f264:	4770      	bx	lr

0800f266 <strncmp>:
 800f266:	b510      	push	{r4, lr}
 800f268:	b16a      	cbz	r2, 800f286 <strncmp+0x20>
 800f26a:	3901      	subs	r1, #1
 800f26c:	1884      	adds	r4, r0, r2
 800f26e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f272:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f276:	4293      	cmp	r3, r2
 800f278:	d103      	bne.n	800f282 <strncmp+0x1c>
 800f27a:	42a0      	cmp	r0, r4
 800f27c:	d001      	beq.n	800f282 <strncmp+0x1c>
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1f5      	bne.n	800f26e <strncmp+0x8>
 800f282:	1a98      	subs	r0, r3, r2
 800f284:	bd10      	pop	{r4, pc}
 800f286:	4610      	mov	r0, r2
 800f288:	e7fc      	b.n	800f284 <strncmp+0x1e>
	...

0800f28c <std>:
 800f28c:	2300      	movs	r3, #0
 800f28e:	b510      	push	{r4, lr}
 800f290:	4604      	mov	r4, r0
 800f292:	e9c0 3300 	strd	r3, r3, [r0]
 800f296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f29a:	6083      	str	r3, [r0, #8]
 800f29c:	8181      	strh	r1, [r0, #12]
 800f29e:	6643      	str	r3, [r0, #100]	; 0x64
 800f2a0:	81c2      	strh	r2, [r0, #14]
 800f2a2:	6183      	str	r3, [r0, #24]
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	2208      	movs	r2, #8
 800f2a8:	305c      	adds	r0, #92	; 0x5c
 800f2aa:	f7ff ffa7 	bl	800f1fc <memset>
 800f2ae:	4b05      	ldr	r3, [pc, #20]	; (800f2c4 <std+0x38>)
 800f2b0:	6224      	str	r4, [r4, #32]
 800f2b2:	6263      	str	r3, [r4, #36]	; 0x24
 800f2b4:	4b04      	ldr	r3, [pc, #16]	; (800f2c8 <std+0x3c>)
 800f2b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2b8:	4b04      	ldr	r3, [pc, #16]	; (800f2cc <std+0x40>)
 800f2ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2bc:	4b04      	ldr	r3, [pc, #16]	; (800f2d0 <std+0x44>)
 800f2be:	6323      	str	r3, [r4, #48]	; 0x30
 800f2c0:	bd10      	pop	{r4, pc}
 800f2c2:	bf00      	nop
 800f2c4:	0800fbc5 	.word	0x0800fbc5
 800f2c8:	0800fbe7 	.word	0x0800fbe7
 800f2cc:	0800fc1f 	.word	0x0800fc1f
 800f2d0:	0800fc43 	.word	0x0800fc43

0800f2d4 <_cleanup_r>:
 800f2d4:	4901      	ldr	r1, [pc, #4]	; (800f2dc <_cleanup_r+0x8>)
 800f2d6:	f000 b8af 	b.w	800f438 <_fwalk_reent>
 800f2da:	bf00      	nop
 800f2dc:	0800ff1d 	.word	0x0800ff1d

0800f2e0 <__sfmoreglue>:
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	2568      	movs	r5, #104	; 0x68
 800f2e4:	1e4a      	subs	r2, r1, #1
 800f2e6:	4355      	muls	r5, r2
 800f2e8:	460e      	mov	r6, r1
 800f2ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f2ee:	f000 f911 	bl	800f514 <_malloc_r>
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	b140      	cbz	r0, 800f308 <__sfmoreglue+0x28>
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	e9c0 1600 	strd	r1, r6, [r0]
 800f2fc:	300c      	adds	r0, #12
 800f2fe:	60a0      	str	r0, [r4, #8]
 800f300:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f304:	f7ff ff7a 	bl	800f1fc <memset>
 800f308:	4620      	mov	r0, r4
 800f30a:	bd70      	pop	{r4, r5, r6, pc}

0800f30c <__sfp_lock_acquire>:
 800f30c:	4801      	ldr	r0, [pc, #4]	; (800f314 <__sfp_lock_acquire+0x8>)
 800f30e:	f000 b8b3 	b.w	800f478 <__retarget_lock_acquire_recursive>
 800f312:	bf00      	nop
 800f314:	20007174 	.word	0x20007174

0800f318 <__sfp_lock_release>:
 800f318:	4801      	ldr	r0, [pc, #4]	; (800f320 <__sfp_lock_release+0x8>)
 800f31a:	f000 b8ae 	b.w	800f47a <__retarget_lock_release_recursive>
 800f31e:	bf00      	nop
 800f320:	20007174 	.word	0x20007174

0800f324 <__sinit_lock_acquire>:
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__sinit_lock_acquire+0x8>)
 800f326:	f000 b8a7 	b.w	800f478 <__retarget_lock_acquire_recursive>
 800f32a:	bf00      	nop
 800f32c:	2000716f 	.word	0x2000716f

0800f330 <__sinit_lock_release>:
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__sinit_lock_release+0x8>)
 800f332:	f000 b8a2 	b.w	800f47a <__retarget_lock_release_recursive>
 800f336:	bf00      	nop
 800f338:	2000716f 	.word	0x2000716f

0800f33c <__sinit>:
 800f33c:	b510      	push	{r4, lr}
 800f33e:	4604      	mov	r4, r0
 800f340:	f7ff fff0 	bl	800f324 <__sinit_lock_acquire>
 800f344:	69a3      	ldr	r3, [r4, #24]
 800f346:	b11b      	cbz	r3, 800f350 <__sinit+0x14>
 800f348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f34c:	f7ff bff0 	b.w	800f330 <__sinit_lock_release>
 800f350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f354:	6523      	str	r3, [r4, #80]	; 0x50
 800f356:	4b13      	ldr	r3, [pc, #76]	; (800f3a4 <__sinit+0x68>)
 800f358:	4a13      	ldr	r2, [pc, #76]	; (800f3a8 <__sinit+0x6c>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f35e:	42a3      	cmp	r3, r4
 800f360:	bf08      	it	eq
 800f362:	2301      	moveq	r3, #1
 800f364:	4620      	mov	r0, r4
 800f366:	bf08      	it	eq
 800f368:	61a3      	streq	r3, [r4, #24]
 800f36a:	f000 f81f 	bl	800f3ac <__sfp>
 800f36e:	6060      	str	r0, [r4, #4]
 800f370:	4620      	mov	r0, r4
 800f372:	f000 f81b 	bl	800f3ac <__sfp>
 800f376:	60a0      	str	r0, [r4, #8]
 800f378:	4620      	mov	r0, r4
 800f37a:	f000 f817 	bl	800f3ac <__sfp>
 800f37e:	2200      	movs	r2, #0
 800f380:	2104      	movs	r1, #4
 800f382:	60e0      	str	r0, [r4, #12]
 800f384:	6860      	ldr	r0, [r4, #4]
 800f386:	f7ff ff81 	bl	800f28c <std>
 800f38a:	2201      	movs	r2, #1
 800f38c:	2109      	movs	r1, #9
 800f38e:	68a0      	ldr	r0, [r4, #8]
 800f390:	f7ff ff7c 	bl	800f28c <std>
 800f394:	2202      	movs	r2, #2
 800f396:	2112      	movs	r1, #18
 800f398:	68e0      	ldr	r0, [r4, #12]
 800f39a:	f7ff ff77 	bl	800f28c <std>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	61a3      	str	r3, [r4, #24]
 800f3a2:	e7d1      	b.n	800f348 <__sinit+0xc>
 800f3a4:	080125f0 	.word	0x080125f0
 800f3a8:	0800f2d5 	.word	0x0800f2d5

0800f3ac <__sfp>:
 800f3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ae:	4607      	mov	r7, r0
 800f3b0:	f7ff ffac 	bl	800f30c <__sfp_lock_acquire>
 800f3b4:	4b1e      	ldr	r3, [pc, #120]	; (800f430 <__sfp+0x84>)
 800f3b6:	681e      	ldr	r6, [r3, #0]
 800f3b8:	69b3      	ldr	r3, [r6, #24]
 800f3ba:	b913      	cbnz	r3, 800f3c2 <__sfp+0x16>
 800f3bc:	4630      	mov	r0, r6
 800f3be:	f7ff ffbd 	bl	800f33c <__sinit>
 800f3c2:	3648      	adds	r6, #72	; 0x48
 800f3c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	d503      	bpl.n	800f3d4 <__sfp+0x28>
 800f3cc:	6833      	ldr	r3, [r6, #0]
 800f3ce:	b30b      	cbz	r3, 800f414 <__sfp+0x68>
 800f3d0:	6836      	ldr	r6, [r6, #0]
 800f3d2:	e7f7      	b.n	800f3c4 <__sfp+0x18>
 800f3d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f3d8:	b9d5      	cbnz	r5, 800f410 <__sfp+0x64>
 800f3da:	4b16      	ldr	r3, [pc, #88]	; (800f434 <__sfp+0x88>)
 800f3dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f3e0:	60e3      	str	r3, [r4, #12]
 800f3e2:	6665      	str	r5, [r4, #100]	; 0x64
 800f3e4:	f000 f847 	bl	800f476 <__retarget_lock_init_recursive>
 800f3e8:	f7ff ff96 	bl	800f318 <__sfp_lock_release>
 800f3ec:	2208      	movs	r2, #8
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f3f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f3f8:	6025      	str	r5, [r4, #0]
 800f3fa:	61a5      	str	r5, [r4, #24]
 800f3fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f400:	f7ff fefc 	bl	800f1fc <memset>
 800f404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f40c:	4620      	mov	r0, r4
 800f40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f410:	3468      	adds	r4, #104	; 0x68
 800f412:	e7d9      	b.n	800f3c8 <__sfp+0x1c>
 800f414:	2104      	movs	r1, #4
 800f416:	4638      	mov	r0, r7
 800f418:	f7ff ff62 	bl	800f2e0 <__sfmoreglue>
 800f41c:	4604      	mov	r4, r0
 800f41e:	6030      	str	r0, [r6, #0]
 800f420:	2800      	cmp	r0, #0
 800f422:	d1d5      	bne.n	800f3d0 <__sfp+0x24>
 800f424:	f7ff ff78 	bl	800f318 <__sfp_lock_release>
 800f428:	230c      	movs	r3, #12
 800f42a:	603b      	str	r3, [r7, #0]
 800f42c:	e7ee      	b.n	800f40c <__sfp+0x60>
 800f42e:	bf00      	nop
 800f430:	080125f0 	.word	0x080125f0
 800f434:	ffff0001 	.word	0xffff0001

0800f438 <_fwalk_reent>:
 800f438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f43c:	4606      	mov	r6, r0
 800f43e:	4688      	mov	r8, r1
 800f440:	2700      	movs	r7, #0
 800f442:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f44a:	f1b9 0901 	subs.w	r9, r9, #1
 800f44e:	d505      	bpl.n	800f45c <_fwalk_reent+0x24>
 800f450:	6824      	ldr	r4, [r4, #0]
 800f452:	2c00      	cmp	r4, #0
 800f454:	d1f7      	bne.n	800f446 <_fwalk_reent+0xe>
 800f456:	4638      	mov	r0, r7
 800f458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f45c:	89ab      	ldrh	r3, [r5, #12]
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d907      	bls.n	800f472 <_fwalk_reent+0x3a>
 800f462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f466:	3301      	adds	r3, #1
 800f468:	d003      	beq.n	800f472 <_fwalk_reent+0x3a>
 800f46a:	4629      	mov	r1, r5
 800f46c:	4630      	mov	r0, r6
 800f46e:	47c0      	blx	r8
 800f470:	4307      	orrs	r7, r0
 800f472:	3568      	adds	r5, #104	; 0x68
 800f474:	e7e9      	b.n	800f44a <_fwalk_reent+0x12>

0800f476 <__retarget_lock_init_recursive>:
 800f476:	4770      	bx	lr

0800f478 <__retarget_lock_acquire_recursive>:
 800f478:	4770      	bx	lr

0800f47a <__retarget_lock_release_recursive>:
 800f47a:	4770      	bx	lr

0800f47c <_free_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4605      	mov	r5, r0
 800f480:	2900      	cmp	r1, #0
 800f482:	d043      	beq.n	800f50c <_free_r+0x90>
 800f484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f488:	1f0c      	subs	r4, r1, #4
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	bfb8      	it	lt
 800f48e:	18e4      	addlt	r4, r4, r3
 800f490:	f000 fe04 	bl	801009c <__malloc_lock>
 800f494:	4a1e      	ldr	r2, [pc, #120]	; (800f510 <_free_r+0x94>)
 800f496:	6813      	ldr	r3, [r2, #0]
 800f498:	4610      	mov	r0, r2
 800f49a:	b933      	cbnz	r3, 800f4aa <_free_r+0x2e>
 800f49c:	6063      	str	r3, [r4, #4]
 800f49e:	6014      	str	r4, [r2, #0]
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4a6:	f000 bdff 	b.w	80100a8 <__malloc_unlock>
 800f4aa:	42a3      	cmp	r3, r4
 800f4ac:	d90a      	bls.n	800f4c4 <_free_r+0x48>
 800f4ae:	6821      	ldr	r1, [r4, #0]
 800f4b0:	1862      	adds	r2, r4, r1
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	bf01      	itttt	eq
 800f4b6:	681a      	ldreq	r2, [r3, #0]
 800f4b8:	685b      	ldreq	r3, [r3, #4]
 800f4ba:	1852      	addeq	r2, r2, r1
 800f4bc:	6022      	streq	r2, [r4, #0]
 800f4be:	6063      	str	r3, [r4, #4]
 800f4c0:	6004      	str	r4, [r0, #0]
 800f4c2:	e7ed      	b.n	800f4a0 <_free_r+0x24>
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	b10b      	cbz	r3, 800f4ce <_free_r+0x52>
 800f4ca:	42a3      	cmp	r3, r4
 800f4cc:	d9fa      	bls.n	800f4c4 <_free_r+0x48>
 800f4ce:	6811      	ldr	r1, [r2, #0]
 800f4d0:	1850      	adds	r0, r2, r1
 800f4d2:	42a0      	cmp	r0, r4
 800f4d4:	d10b      	bne.n	800f4ee <_free_r+0x72>
 800f4d6:	6820      	ldr	r0, [r4, #0]
 800f4d8:	4401      	add	r1, r0
 800f4da:	1850      	adds	r0, r2, r1
 800f4dc:	4283      	cmp	r3, r0
 800f4de:	6011      	str	r1, [r2, #0]
 800f4e0:	d1de      	bne.n	800f4a0 <_free_r+0x24>
 800f4e2:	6818      	ldr	r0, [r3, #0]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	4401      	add	r1, r0
 800f4e8:	6011      	str	r1, [r2, #0]
 800f4ea:	6053      	str	r3, [r2, #4]
 800f4ec:	e7d8      	b.n	800f4a0 <_free_r+0x24>
 800f4ee:	d902      	bls.n	800f4f6 <_free_r+0x7a>
 800f4f0:	230c      	movs	r3, #12
 800f4f2:	602b      	str	r3, [r5, #0]
 800f4f4:	e7d4      	b.n	800f4a0 <_free_r+0x24>
 800f4f6:	6820      	ldr	r0, [r4, #0]
 800f4f8:	1821      	adds	r1, r4, r0
 800f4fa:	428b      	cmp	r3, r1
 800f4fc:	bf01      	itttt	eq
 800f4fe:	6819      	ldreq	r1, [r3, #0]
 800f500:	685b      	ldreq	r3, [r3, #4]
 800f502:	1809      	addeq	r1, r1, r0
 800f504:	6021      	streq	r1, [r4, #0]
 800f506:	6063      	str	r3, [r4, #4]
 800f508:	6054      	str	r4, [r2, #4]
 800f50a:	e7c9      	b.n	800f4a0 <_free_r+0x24>
 800f50c:	bd38      	pop	{r3, r4, r5, pc}
 800f50e:	bf00      	nop
 800f510:	20000654 	.word	0x20000654

0800f514 <_malloc_r>:
 800f514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f516:	1ccd      	adds	r5, r1, #3
 800f518:	f025 0503 	bic.w	r5, r5, #3
 800f51c:	3508      	adds	r5, #8
 800f51e:	2d0c      	cmp	r5, #12
 800f520:	bf38      	it	cc
 800f522:	250c      	movcc	r5, #12
 800f524:	2d00      	cmp	r5, #0
 800f526:	4606      	mov	r6, r0
 800f528:	db01      	blt.n	800f52e <_malloc_r+0x1a>
 800f52a:	42a9      	cmp	r1, r5
 800f52c:	d903      	bls.n	800f536 <_malloc_r+0x22>
 800f52e:	230c      	movs	r3, #12
 800f530:	6033      	str	r3, [r6, #0]
 800f532:	2000      	movs	r0, #0
 800f534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f536:	f000 fdb1 	bl	801009c <__malloc_lock>
 800f53a:	4921      	ldr	r1, [pc, #132]	; (800f5c0 <_malloc_r+0xac>)
 800f53c:	680a      	ldr	r2, [r1, #0]
 800f53e:	4614      	mov	r4, r2
 800f540:	b99c      	cbnz	r4, 800f56a <_malloc_r+0x56>
 800f542:	4f20      	ldr	r7, [pc, #128]	; (800f5c4 <_malloc_r+0xb0>)
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	b923      	cbnz	r3, 800f552 <_malloc_r+0x3e>
 800f548:	4621      	mov	r1, r4
 800f54a:	4630      	mov	r0, r6
 800f54c:	f000 fb2a 	bl	800fba4 <_sbrk_r>
 800f550:	6038      	str	r0, [r7, #0]
 800f552:	4629      	mov	r1, r5
 800f554:	4630      	mov	r0, r6
 800f556:	f000 fb25 	bl	800fba4 <_sbrk_r>
 800f55a:	1c43      	adds	r3, r0, #1
 800f55c:	d123      	bne.n	800f5a6 <_malloc_r+0x92>
 800f55e:	230c      	movs	r3, #12
 800f560:	4630      	mov	r0, r6
 800f562:	6033      	str	r3, [r6, #0]
 800f564:	f000 fda0 	bl	80100a8 <__malloc_unlock>
 800f568:	e7e3      	b.n	800f532 <_malloc_r+0x1e>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	1b5b      	subs	r3, r3, r5
 800f56e:	d417      	bmi.n	800f5a0 <_malloc_r+0x8c>
 800f570:	2b0b      	cmp	r3, #11
 800f572:	d903      	bls.n	800f57c <_malloc_r+0x68>
 800f574:	6023      	str	r3, [r4, #0]
 800f576:	441c      	add	r4, r3
 800f578:	6025      	str	r5, [r4, #0]
 800f57a:	e004      	b.n	800f586 <_malloc_r+0x72>
 800f57c:	6863      	ldr	r3, [r4, #4]
 800f57e:	42a2      	cmp	r2, r4
 800f580:	bf0c      	ite	eq
 800f582:	600b      	streq	r3, [r1, #0]
 800f584:	6053      	strne	r3, [r2, #4]
 800f586:	4630      	mov	r0, r6
 800f588:	f000 fd8e 	bl	80100a8 <__malloc_unlock>
 800f58c:	f104 000b 	add.w	r0, r4, #11
 800f590:	1d23      	adds	r3, r4, #4
 800f592:	f020 0007 	bic.w	r0, r0, #7
 800f596:	1ac2      	subs	r2, r0, r3
 800f598:	d0cc      	beq.n	800f534 <_malloc_r+0x20>
 800f59a:	1a1b      	subs	r3, r3, r0
 800f59c:	50a3      	str	r3, [r4, r2]
 800f59e:	e7c9      	b.n	800f534 <_malloc_r+0x20>
 800f5a0:	4622      	mov	r2, r4
 800f5a2:	6864      	ldr	r4, [r4, #4]
 800f5a4:	e7cc      	b.n	800f540 <_malloc_r+0x2c>
 800f5a6:	1cc4      	adds	r4, r0, #3
 800f5a8:	f024 0403 	bic.w	r4, r4, #3
 800f5ac:	42a0      	cmp	r0, r4
 800f5ae:	d0e3      	beq.n	800f578 <_malloc_r+0x64>
 800f5b0:	1a21      	subs	r1, r4, r0
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	f000 faf6 	bl	800fba4 <_sbrk_r>
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	d1dd      	bne.n	800f578 <_malloc_r+0x64>
 800f5bc:	e7cf      	b.n	800f55e <_malloc_r+0x4a>
 800f5be:	bf00      	nop
 800f5c0:	20000654 	.word	0x20000654
 800f5c4:	20000658 	.word	0x20000658

0800f5c8 <__sfputc_r>:
 800f5c8:	6893      	ldr	r3, [r2, #8]
 800f5ca:	b410      	push	{r4}
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	6093      	str	r3, [r2, #8]
 800f5d2:	da07      	bge.n	800f5e4 <__sfputc_r+0x1c>
 800f5d4:	6994      	ldr	r4, [r2, #24]
 800f5d6:	42a3      	cmp	r3, r4
 800f5d8:	db01      	blt.n	800f5de <__sfputc_r+0x16>
 800f5da:	290a      	cmp	r1, #10
 800f5dc:	d102      	bne.n	800f5e4 <__sfputc_r+0x1c>
 800f5de:	bc10      	pop	{r4}
 800f5e0:	f000 bb34 	b.w	800fc4c <__swbuf_r>
 800f5e4:	6813      	ldr	r3, [r2, #0]
 800f5e6:	1c58      	adds	r0, r3, #1
 800f5e8:	6010      	str	r0, [r2, #0]
 800f5ea:	7019      	strb	r1, [r3, #0]
 800f5ec:	4608      	mov	r0, r1
 800f5ee:	bc10      	pop	{r4}
 800f5f0:	4770      	bx	lr

0800f5f2 <__sfputs_r>:
 800f5f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f4:	4606      	mov	r6, r0
 800f5f6:	460f      	mov	r7, r1
 800f5f8:	4614      	mov	r4, r2
 800f5fa:	18d5      	adds	r5, r2, r3
 800f5fc:	42ac      	cmp	r4, r5
 800f5fe:	d101      	bne.n	800f604 <__sfputs_r+0x12>
 800f600:	2000      	movs	r0, #0
 800f602:	e007      	b.n	800f614 <__sfputs_r+0x22>
 800f604:	463a      	mov	r2, r7
 800f606:	4630      	mov	r0, r6
 800f608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f60c:	f7ff ffdc 	bl	800f5c8 <__sfputc_r>
 800f610:	1c43      	adds	r3, r0, #1
 800f612:	d1f3      	bne.n	800f5fc <__sfputs_r+0xa>
 800f614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f618 <_vfiprintf_r>:
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	460d      	mov	r5, r1
 800f61e:	4614      	mov	r4, r2
 800f620:	4698      	mov	r8, r3
 800f622:	4606      	mov	r6, r0
 800f624:	b09d      	sub	sp, #116	; 0x74
 800f626:	b118      	cbz	r0, 800f630 <_vfiprintf_r+0x18>
 800f628:	6983      	ldr	r3, [r0, #24]
 800f62a:	b90b      	cbnz	r3, 800f630 <_vfiprintf_r+0x18>
 800f62c:	f7ff fe86 	bl	800f33c <__sinit>
 800f630:	4b89      	ldr	r3, [pc, #548]	; (800f858 <_vfiprintf_r+0x240>)
 800f632:	429d      	cmp	r5, r3
 800f634:	d11b      	bne.n	800f66e <_vfiprintf_r+0x56>
 800f636:	6875      	ldr	r5, [r6, #4]
 800f638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f63a:	07d9      	lsls	r1, r3, #31
 800f63c:	d405      	bmi.n	800f64a <_vfiprintf_r+0x32>
 800f63e:	89ab      	ldrh	r3, [r5, #12]
 800f640:	059a      	lsls	r2, r3, #22
 800f642:	d402      	bmi.n	800f64a <_vfiprintf_r+0x32>
 800f644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f646:	f7ff ff17 	bl	800f478 <__retarget_lock_acquire_recursive>
 800f64a:	89ab      	ldrh	r3, [r5, #12]
 800f64c:	071b      	lsls	r3, r3, #28
 800f64e:	d501      	bpl.n	800f654 <_vfiprintf_r+0x3c>
 800f650:	692b      	ldr	r3, [r5, #16]
 800f652:	b9eb      	cbnz	r3, 800f690 <_vfiprintf_r+0x78>
 800f654:	4629      	mov	r1, r5
 800f656:	4630      	mov	r0, r6
 800f658:	f000 fb5c 	bl	800fd14 <__swsetup_r>
 800f65c:	b1c0      	cbz	r0, 800f690 <_vfiprintf_r+0x78>
 800f65e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f660:	07dc      	lsls	r4, r3, #31
 800f662:	d50e      	bpl.n	800f682 <_vfiprintf_r+0x6a>
 800f664:	f04f 30ff 	mov.w	r0, #4294967295
 800f668:	b01d      	add	sp, #116	; 0x74
 800f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66e:	4b7b      	ldr	r3, [pc, #492]	; (800f85c <_vfiprintf_r+0x244>)
 800f670:	429d      	cmp	r5, r3
 800f672:	d101      	bne.n	800f678 <_vfiprintf_r+0x60>
 800f674:	68b5      	ldr	r5, [r6, #8]
 800f676:	e7df      	b.n	800f638 <_vfiprintf_r+0x20>
 800f678:	4b79      	ldr	r3, [pc, #484]	; (800f860 <_vfiprintf_r+0x248>)
 800f67a:	429d      	cmp	r5, r3
 800f67c:	bf08      	it	eq
 800f67e:	68f5      	ldreq	r5, [r6, #12]
 800f680:	e7da      	b.n	800f638 <_vfiprintf_r+0x20>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	0598      	lsls	r0, r3, #22
 800f686:	d4ed      	bmi.n	800f664 <_vfiprintf_r+0x4c>
 800f688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f68a:	f7ff fef6 	bl	800f47a <__retarget_lock_release_recursive>
 800f68e:	e7e9      	b.n	800f664 <_vfiprintf_r+0x4c>
 800f690:	2300      	movs	r3, #0
 800f692:	9309      	str	r3, [sp, #36]	; 0x24
 800f694:	2320      	movs	r3, #32
 800f696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f69a:	2330      	movs	r3, #48	; 0x30
 800f69c:	f04f 0901 	mov.w	r9, #1
 800f6a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f864 <_vfiprintf_r+0x24c>
 800f6a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6ac:	4623      	mov	r3, r4
 800f6ae:	469a      	mov	sl, r3
 800f6b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b4:	b10a      	cbz	r2, 800f6ba <_vfiprintf_r+0xa2>
 800f6b6:	2a25      	cmp	r2, #37	; 0x25
 800f6b8:	d1f9      	bne.n	800f6ae <_vfiprintf_r+0x96>
 800f6ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f6be:	d00b      	beq.n	800f6d8 <_vfiprintf_r+0xc0>
 800f6c0:	465b      	mov	r3, fp
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ff93 	bl	800f5f2 <__sfputs_r>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	f000 80aa 	beq.w	800f826 <_vfiprintf_r+0x20e>
 800f6d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6d4:	445a      	add	r2, fp
 800f6d6:	9209      	str	r2, [sp, #36]	; 0x24
 800f6d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 80a2 	beq.w	800f826 <_vfiprintf_r+0x20e>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ec:	f10a 0a01 	add.w	sl, sl, #1
 800f6f0:	9304      	str	r3, [sp, #16]
 800f6f2:	9307      	str	r3, [sp, #28]
 800f6f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6f8:	931a      	str	r3, [sp, #104]	; 0x68
 800f6fa:	4654      	mov	r4, sl
 800f6fc:	2205      	movs	r2, #5
 800f6fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f702:	4858      	ldr	r0, [pc, #352]	; (800f864 <_vfiprintf_r+0x24c>)
 800f704:	f000 fcbc 	bl	8010080 <memchr>
 800f708:	9a04      	ldr	r2, [sp, #16]
 800f70a:	b9d8      	cbnz	r0, 800f744 <_vfiprintf_r+0x12c>
 800f70c:	06d1      	lsls	r1, r2, #27
 800f70e:	bf44      	itt	mi
 800f710:	2320      	movmi	r3, #32
 800f712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f716:	0713      	lsls	r3, r2, #28
 800f718:	bf44      	itt	mi
 800f71a:	232b      	movmi	r3, #43	; 0x2b
 800f71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f720:	f89a 3000 	ldrb.w	r3, [sl]
 800f724:	2b2a      	cmp	r3, #42	; 0x2a
 800f726:	d015      	beq.n	800f754 <_vfiprintf_r+0x13c>
 800f728:	4654      	mov	r4, sl
 800f72a:	2000      	movs	r0, #0
 800f72c:	f04f 0c0a 	mov.w	ip, #10
 800f730:	9a07      	ldr	r2, [sp, #28]
 800f732:	4621      	mov	r1, r4
 800f734:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f738:	3b30      	subs	r3, #48	; 0x30
 800f73a:	2b09      	cmp	r3, #9
 800f73c:	d94e      	bls.n	800f7dc <_vfiprintf_r+0x1c4>
 800f73e:	b1b0      	cbz	r0, 800f76e <_vfiprintf_r+0x156>
 800f740:	9207      	str	r2, [sp, #28]
 800f742:	e014      	b.n	800f76e <_vfiprintf_r+0x156>
 800f744:	eba0 0308 	sub.w	r3, r0, r8
 800f748:	fa09 f303 	lsl.w	r3, r9, r3
 800f74c:	4313      	orrs	r3, r2
 800f74e:	46a2      	mov	sl, r4
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	e7d2      	b.n	800f6fa <_vfiprintf_r+0xe2>
 800f754:	9b03      	ldr	r3, [sp, #12]
 800f756:	1d19      	adds	r1, r3, #4
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	9103      	str	r1, [sp, #12]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	bfbb      	ittet	lt
 800f760:	425b      	neglt	r3, r3
 800f762:	f042 0202 	orrlt.w	r2, r2, #2
 800f766:	9307      	strge	r3, [sp, #28]
 800f768:	9307      	strlt	r3, [sp, #28]
 800f76a:	bfb8      	it	lt
 800f76c:	9204      	strlt	r2, [sp, #16]
 800f76e:	7823      	ldrb	r3, [r4, #0]
 800f770:	2b2e      	cmp	r3, #46	; 0x2e
 800f772:	d10c      	bne.n	800f78e <_vfiprintf_r+0x176>
 800f774:	7863      	ldrb	r3, [r4, #1]
 800f776:	2b2a      	cmp	r3, #42	; 0x2a
 800f778:	d135      	bne.n	800f7e6 <_vfiprintf_r+0x1ce>
 800f77a:	9b03      	ldr	r3, [sp, #12]
 800f77c:	3402      	adds	r4, #2
 800f77e:	1d1a      	adds	r2, r3, #4
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	9203      	str	r2, [sp, #12]
 800f784:	2b00      	cmp	r3, #0
 800f786:	bfb8      	it	lt
 800f788:	f04f 33ff 	movlt.w	r3, #4294967295
 800f78c:	9305      	str	r3, [sp, #20]
 800f78e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f874 <_vfiprintf_r+0x25c>
 800f792:	2203      	movs	r2, #3
 800f794:	4650      	mov	r0, sl
 800f796:	7821      	ldrb	r1, [r4, #0]
 800f798:	f000 fc72 	bl	8010080 <memchr>
 800f79c:	b140      	cbz	r0, 800f7b0 <_vfiprintf_r+0x198>
 800f79e:	2340      	movs	r3, #64	; 0x40
 800f7a0:	eba0 000a 	sub.w	r0, r0, sl
 800f7a4:	fa03 f000 	lsl.w	r0, r3, r0
 800f7a8:	9b04      	ldr	r3, [sp, #16]
 800f7aa:	3401      	adds	r4, #1
 800f7ac:	4303      	orrs	r3, r0
 800f7ae:	9304      	str	r3, [sp, #16]
 800f7b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b4:	2206      	movs	r2, #6
 800f7b6:	482c      	ldr	r0, [pc, #176]	; (800f868 <_vfiprintf_r+0x250>)
 800f7b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7bc:	f000 fc60 	bl	8010080 <memchr>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d03f      	beq.n	800f844 <_vfiprintf_r+0x22c>
 800f7c4:	4b29      	ldr	r3, [pc, #164]	; (800f86c <_vfiprintf_r+0x254>)
 800f7c6:	bb1b      	cbnz	r3, 800f810 <_vfiprintf_r+0x1f8>
 800f7c8:	9b03      	ldr	r3, [sp, #12]
 800f7ca:	3307      	adds	r3, #7
 800f7cc:	f023 0307 	bic.w	r3, r3, #7
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	9303      	str	r3, [sp, #12]
 800f7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d6:	443b      	add	r3, r7
 800f7d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f7da:	e767      	b.n	800f6ac <_vfiprintf_r+0x94>
 800f7dc:	460c      	mov	r4, r1
 800f7de:	2001      	movs	r0, #1
 800f7e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7e4:	e7a5      	b.n	800f732 <_vfiprintf_r+0x11a>
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	f04f 0c0a 	mov.w	ip, #10
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	3401      	adds	r4, #1
 800f7f0:	9305      	str	r3, [sp, #20]
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f8:	3a30      	subs	r2, #48	; 0x30
 800f7fa:	2a09      	cmp	r2, #9
 800f7fc:	d903      	bls.n	800f806 <_vfiprintf_r+0x1ee>
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d0c5      	beq.n	800f78e <_vfiprintf_r+0x176>
 800f802:	9105      	str	r1, [sp, #20]
 800f804:	e7c3      	b.n	800f78e <_vfiprintf_r+0x176>
 800f806:	4604      	mov	r4, r0
 800f808:	2301      	movs	r3, #1
 800f80a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f80e:	e7f0      	b.n	800f7f2 <_vfiprintf_r+0x1da>
 800f810:	ab03      	add	r3, sp, #12
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	462a      	mov	r2, r5
 800f816:	4630      	mov	r0, r6
 800f818:	4b15      	ldr	r3, [pc, #84]	; (800f870 <_vfiprintf_r+0x258>)
 800f81a:	a904      	add	r1, sp, #16
 800f81c:	f3af 8000 	nop.w
 800f820:	4607      	mov	r7, r0
 800f822:	1c78      	adds	r0, r7, #1
 800f824:	d1d6      	bne.n	800f7d4 <_vfiprintf_r+0x1bc>
 800f826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f828:	07d9      	lsls	r1, r3, #31
 800f82a:	d405      	bmi.n	800f838 <_vfiprintf_r+0x220>
 800f82c:	89ab      	ldrh	r3, [r5, #12]
 800f82e:	059a      	lsls	r2, r3, #22
 800f830:	d402      	bmi.n	800f838 <_vfiprintf_r+0x220>
 800f832:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f834:	f7ff fe21 	bl	800f47a <__retarget_lock_release_recursive>
 800f838:	89ab      	ldrh	r3, [r5, #12]
 800f83a:	065b      	lsls	r3, r3, #25
 800f83c:	f53f af12 	bmi.w	800f664 <_vfiprintf_r+0x4c>
 800f840:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f842:	e711      	b.n	800f668 <_vfiprintf_r+0x50>
 800f844:	ab03      	add	r3, sp, #12
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	462a      	mov	r2, r5
 800f84a:	4630      	mov	r0, r6
 800f84c:	4b08      	ldr	r3, [pc, #32]	; (800f870 <_vfiprintf_r+0x258>)
 800f84e:	a904      	add	r1, sp, #16
 800f850:	f000 f882 	bl	800f958 <_printf_i>
 800f854:	e7e4      	b.n	800f820 <_vfiprintf_r+0x208>
 800f856:	bf00      	nop
 800f858:	08012614 	.word	0x08012614
 800f85c:	08012634 	.word	0x08012634
 800f860:	080125f4 	.word	0x080125f4
 800f864:	08012654 	.word	0x08012654
 800f868:	0801265e 	.word	0x0801265e
 800f86c:	00000000 	.word	0x00000000
 800f870:	0800f5f3 	.word	0x0800f5f3
 800f874:	0801265a 	.word	0x0801265a

0800f878 <_printf_common>:
 800f878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f87c:	4616      	mov	r6, r2
 800f87e:	4699      	mov	r9, r3
 800f880:	688a      	ldr	r2, [r1, #8]
 800f882:	690b      	ldr	r3, [r1, #16]
 800f884:	4607      	mov	r7, r0
 800f886:	4293      	cmp	r3, r2
 800f888:	bfb8      	it	lt
 800f88a:	4613      	movlt	r3, r2
 800f88c:	6033      	str	r3, [r6, #0]
 800f88e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f892:	460c      	mov	r4, r1
 800f894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f898:	b10a      	cbz	r2, 800f89e <_printf_common+0x26>
 800f89a:	3301      	adds	r3, #1
 800f89c:	6033      	str	r3, [r6, #0]
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	0699      	lsls	r1, r3, #26
 800f8a2:	bf42      	ittt	mi
 800f8a4:	6833      	ldrmi	r3, [r6, #0]
 800f8a6:	3302      	addmi	r3, #2
 800f8a8:	6033      	strmi	r3, [r6, #0]
 800f8aa:	6825      	ldr	r5, [r4, #0]
 800f8ac:	f015 0506 	ands.w	r5, r5, #6
 800f8b0:	d106      	bne.n	800f8c0 <_printf_common+0x48>
 800f8b2:	f104 0a19 	add.w	sl, r4, #25
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	6832      	ldr	r2, [r6, #0]
 800f8ba:	1a9b      	subs	r3, r3, r2
 800f8bc:	42ab      	cmp	r3, r5
 800f8be:	dc28      	bgt.n	800f912 <_printf_common+0x9a>
 800f8c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8c4:	1e13      	subs	r3, r2, #0
 800f8c6:	6822      	ldr	r2, [r4, #0]
 800f8c8:	bf18      	it	ne
 800f8ca:	2301      	movne	r3, #1
 800f8cc:	0692      	lsls	r2, r2, #26
 800f8ce:	d42d      	bmi.n	800f92c <_printf_common+0xb4>
 800f8d0:	4649      	mov	r1, r9
 800f8d2:	4638      	mov	r0, r7
 800f8d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8d8:	47c0      	blx	r8
 800f8da:	3001      	adds	r0, #1
 800f8dc:	d020      	beq.n	800f920 <_printf_common+0xa8>
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	68e5      	ldr	r5, [r4, #12]
 800f8e2:	f003 0306 	and.w	r3, r3, #6
 800f8e6:	2b04      	cmp	r3, #4
 800f8e8:	bf18      	it	ne
 800f8ea:	2500      	movne	r5, #0
 800f8ec:	6832      	ldr	r2, [r6, #0]
 800f8ee:	f04f 0600 	mov.w	r6, #0
 800f8f2:	68a3      	ldr	r3, [r4, #8]
 800f8f4:	bf08      	it	eq
 800f8f6:	1aad      	subeq	r5, r5, r2
 800f8f8:	6922      	ldr	r2, [r4, #16]
 800f8fa:	bf08      	it	eq
 800f8fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f900:	4293      	cmp	r3, r2
 800f902:	bfc4      	itt	gt
 800f904:	1a9b      	subgt	r3, r3, r2
 800f906:	18ed      	addgt	r5, r5, r3
 800f908:	341a      	adds	r4, #26
 800f90a:	42b5      	cmp	r5, r6
 800f90c:	d11a      	bne.n	800f944 <_printf_common+0xcc>
 800f90e:	2000      	movs	r0, #0
 800f910:	e008      	b.n	800f924 <_printf_common+0xac>
 800f912:	2301      	movs	r3, #1
 800f914:	4652      	mov	r2, sl
 800f916:	4649      	mov	r1, r9
 800f918:	4638      	mov	r0, r7
 800f91a:	47c0      	blx	r8
 800f91c:	3001      	adds	r0, #1
 800f91e:	d103      	bne.n	800f928 <_printf_common+0xb0>
 800f920:	f04f 30ff 	mov.w	r0, #4294967295
 800f924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f928:	3501      	adds	r5, #1
 800f92a:	e7c4      	b.n	800f8b6 <_printf_common+0x3e>
 800f92c:	2030      	movs	r0, #48	; 0x30
 800f92e:	18e1      	adds	r1, r4, r3
 800f930:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f93a:	4422      	add	r2, r4
 800f93c:	3302      	adds	r3, #2
 800f93e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f942:	e7c5      	b.n	800f8d0 <_printf_common+0x58>
 800f944:	2301      	movs	r3, #1
 800f946:	4622      	mov	r2, r4
 800f948:	4649      	mov	r1, r9
 800f94a:	4638      	mov	r0, r7
 800f94c:	47c0      	blx	r8
 800f94e:	3001      	adds	r0, #1
 800f950:	d0e6      	beq.n	800f920 <_printf_common+0xa8>
 800f952:	3601      	adds	r6, #1
 800f954:	e7d9      	b.n	800f90a <_printf_common+0x92>
	...

0800f958 <_printf_i>:
 800f958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f95c:	460c      	mov	r4, r1
 800f95e:	7e27      	ldrb	r7, [r4, #24]
 800f960:	4691      	mov	r9, r2
 800f962:	2f78      	cmp	r7, #120	; 0x78
 800f964:	4680      	mov	r8, r0
 800f966:	469a      	mov	sl, r3
 800f968:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f96a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f96e:	d807      	bhi.n	800f980 <_printf_i+0x28>
 800f970:	2f62      	cmp	r7, #98	; 0x62
 800f972:	d80a      	bhi.n	800f98a <_printf_i+0x32>
 800f974:	2f00      	cmp	r7, #0
 800f976:	f000 80d9 	beq.w	800fb2c <_printf_i+0x1d4>
 800f97a:	2f58      	cmp	r7, #88	; 0x58
 800f97c:	f000 80a4 	beq.w	800fac8 <_printf_i+0x170>
 800f980:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f988:	e03a      	b.n	800fa00 <_printf_i+0xa8>
 800f98a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f98e:	2b15      	cmp	r3, #21
 800f990:	d8f6      	bhi.n	800f980 <_printf_i+0x28>
 800f992:	a001      	add	r0, pc, #4	; (adr r0, 800f998 <_printf_i+0x40>)
 800f994:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f998:	0800f9f1 	.word	0x0800f9f1
 800f99c:	0800fa05 	.word	0x0800fa05
 800f9a0:	0800f981 	.word	0x0800f981
 800f9a4:	0800f981 	.word	0x0800f981
 800f9a8:	0800f981 	.word	0x0800f981
 800f9ac:	0800f981 	.word	0x0800f981
 800f9b0:	0800fa05 	.word	0x0800fa05
 800f9b4:	0800f981 	.word	0x0800f981
 800f9b8:	0800f981 	.word	0x0800f981
 800f9bc:	0800f981 	.word	0x0800f981
 800f9c0:	0800f981 	.word	0x0800f981
 800f9c4:	0800fb13 	.word	0x0800fb13
 800f9c8:	0800fa35 	.word	0x0800fa35
 800f9cc:	0800faf5 	.word	0x0800faf5
 800f9d0:	0800f981 	.word	0x0800f981
 800f9d4:	0800f981 	.word	0x0800f981
 800f9d8:	0800fb35 	.word	0x0800fb35
 800f9dc:	0800f981 	.word	0x0800f981
 800f9e0:	0800fa35 	.word	0x0800fa35
 800f9e4:	0800f981 	.word	0x0800f981
 800f9e8:	0800f981 	.word	0x0800f981
 800f9ec:	0800fafd 	.word	0x0800fafd
 800f9f0:	680b      	ldr	r3, [r1, #0]
 800f9f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f9f6:	1d1a      	adds	r2, r3, #4
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	600a      	str	r2, [r1, #0]
 800f9fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa00:	2301      	movs	r3, #1
 800fa02:	e0a4      	b.n	800fb4e <_printf_i+0x1f6>
 800fa04:	6825      	ldr	r5, [r4, #0]
 800fa06:	6808      	ldr	r0, [r1, #0]
 800fa08:	062e      	lsls	r6, r5, #24
 800fa0a:	f100 0304 	add.w	r3, r0, #4
 800fa0e:	d50a      	bpl.n	800fa26 <_printf_i+0xce>
 800fa10:	6805      	ldr	r5, [r0, #0]
 800fa12:	600b      	str	r3, [r1, #0]
 800fa14:	2d00      	cmp	r5, #0
 800fa16:	da03      	bge.n	800fa20 <_printf_i+0xc8>
 800fa18:	232d      	movs	r3, #45	; 0x2d
 800fa1a:	426d      	negs	r5, r5
 800fa1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa20:	230a      	movs	r3, #10
 800fa22:	485e      	ldr	r0, [pc, #376]	; (800fb9c <_printf_i+0x244>)
 800fa24:	e019      	b.n	800fa5a <_printf_i+0x102>
 800fa26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fa2a:	6805      	ldr	r5, [r0, #0]
 800fa2c:	600b      	str	r3, [r1, #0]
 800fa2e:	bf18      	it	ne
 800fa30:	b22d      	sxthne	r5, r5
 800fa32:	e7ef      	b.n	800fa14 <_printf_i+0xbc>
 800fa34:	680b      	ldr	r3, [r1, #0]
 800fa36:	6825      	ldr	r5, [r4, #0]
 800fa38:	1d18      	adds	r0, r3, #4
 800fa3a:	6008      	str	r0, [r1, #0]
 800fa3c:	0628      	lsls	r0, r5, #24
 800fa3e:	d501      	bpl.n	800fa44 <_printf_i+0xec>
 800fa40:	681d      	ldr	r5, [r3, #0]
 800fa42:	e002      	b.n	800fa4a <_printf_i+0xf2>
 800fa44:	0669      	lsls	r1, r5, #25
 800fa46:	d5fb      	bpl.n	800fa40 <_printf_i+0xe8>
 800fa48:	881d      	ldrh	r5, [r3, #0]
 800fa4a:	2f6f      	cmp	r7, #111	; 0x6f
 800fa4c:	bf0c      	ite	eq
 800fa4e:	2308      	moveq	r3, #8
 800fa50:	230a      	movne	r3, #10
 800fa52:	4852      	ldr	r0, [pc, #328]	; (800fb9c <_printf_i+0x244>)
 800fa54:	2100      	movs	r1, #0
 800fa56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa5a:	6866      	ldr	r6, [r4, #4]
 800fa5c:	2e00      	cmp	r6, #0
 800fa5e:	bfa8      	it	ge
 800fa60:	6821      	ldrge	r1, [r4, #0]
 800fa62:	60a6      	str	r6, [r4, #8]
 800fa64:	bfa4      	itt	ge
 800fa66:	f021 0104 	bicge.w	r1, r1, #4
 800fa6a:	6021      	strge	r1, [r4, #0]
 800fa6c:	b90d      	cbnz	r5, 800fa72 <_printf_i+0x11a>
 800fa6e:	2e00      	cmp	r6, #0
 800fa70:	d04d      	beq.n	800fb0e <_printf_i+0x1b6>
 800fa72:	4616      	mov	r6, r2
 800fa74:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa78:	fb03 5711 	mls	r7, r3, r1, r5
 800fa7c:	5dc7      	ldrb	r7, [r0, r7]
 800fa7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa82:	462f      	mov	r7, r5
 800fa84:	42bb      	cmp	r3, r7
 800fa86:	460d      	mov	r5, r1
 800fa88:	d9f4      	bls.n	800fa74 <_printf_i+0x11c>
 800fa8a:	2b08      	cmp	r3, #8
 800fa8c:	d10b      	bne.n	800faa6 <_printf_i+0x14e>
 800fa8e:	6823      	ldr	r3, [r4, #0]
 800fa90:	07df      	lsls	r7, r3, #31
 800fa92:	d508      	bpl.n	800faa6 <_printf_i+0x14e>
 800fa94:	6923      	ldr	r3, [r4, #16]
 800fa96:	6861      	ldr	r1, [r4, #4]
 800fa98:	4299      	cmp	r1, r3
 800fa9a:	bfde      	ittt	le
 800fa9c:	2330      	movle	r3, #48	; 0x30
 800fa9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800faa2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800faa6:	1b92      	subs	r2, r2, r6
 800faa8:	6122      	str	r2, [r4, #16]
 800faaa:	464b      	mov	r3, r9
 800faac:	4621      	mov	r1, r4
 800faae:	4640      	mov	r0, r8
 800fab0:	f8cd a000 	str.w	sl, [sp]
 800fab4:	aa03      	add	r2, sp, #12
 800fab6:	f7ff fedf 	bl	800f878 <_printf_common>
 800faba:	3001      	adds	r0, #1
 800fabc:	d14c      	bne.n	800fb58 <_printf_i+0x200>
 800fabe:	f04f 30ff 	mov.w	r0, #4294967295
 800fac2:	b004      	add	sp, #16
 800fac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac8:	4834      	ldr	r0, [pc, #208]	; (800fb9c <_printf_i+0x244>)
 800faca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800face:	680e      	ldr	r6, [r1, #0]
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	f856 5b04 	ldr.w	r5, [r6], #4
 800fad6:	061f      	lsls	r7, r3, #24
 800fad8:	600e      	str	r6, [r1, #0]
 800fada:	d514      	bpl.n	800fb06 <_printf_i+0x1ae>
 800fadc:	07d9      	lsls	r1, r3, #31
 800fade:	bf44      	itt	mi
 800fae0:	f043 0320 	orrmi.w	r3, r3, #32
 800fae4:	6023      	strmi	r3, [r4, #0]
 800fae6:	b91d      	cbnz	r5, 800faf0 <_printf_i+0x198>
 800fae8:	6823      	ldr	r3, [r4, #0]
 800faea:	f023 0320 	bic.w	r3, r3, #32
 800faee:	6023      	str	r3, [r4, #0]
 800faf0:	2310      	movs	r3, #16
 800faf2:	e7af      	b.n	800fa54 <_printf_i+0xfc>
 800faf4:	6823      	ldr	r3, [r4, #0]
 800faf6:	f043 0320 	orr.w	r3, r3, #32
 800fafa:	6023      	str	r3, [r4, #0]
 800fafc:	2378      	movs	r3, #120	; 0x78
 800fafe:	4828      	ldr	r0, [pc, #160]	; (800fba0 <_printf_i+0x248>)
 800fb00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb04:	e7e3      	b.n	800face <_printf_i+0x176>
 800fb06:	065e      	lsls	r6, r3, #25
 800fb08:	bf48      	it	mi
 800fb0a:	b2ad      	uxthmi	r5, r5
 800fb0c:	e7e6      	b.n	800fadc <_printf_i+0x184>
 800fb0e:	4616      	mov	r6, r2
 800fb10:	e7bb      	b.n	800fa8a <_printf_i+0x132>
 800fb12:	680b      	ldr	r3, [r1, #0]
 800fb14:	6826      	ldr	r6, [r4, #0]
 800fb16:	1d1d      	adds	r5, r3, #4
 800fb18:	6960      	ldr	r0, [r4, #20]
 800fb1a:	600d      	str	r5, [r1, #0]
 800fb1c:	0635      	lsls	r5, r6, #24
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	d501      	bpl.n	800fb26 <_printf_i+0x1ce>
 800fb22:	6018      	str	r0, [r3, #0]
 800fb24:	e002      	b.n	800fb2c <_printf_i+0x1d4>
 800fb26:	0671      	lsls	r1, r6, #25
 800fb28:	d5fb      	bpl.n	800fb22 <_printf_i+0x1ca>
 800fb2a:	8018      	strh	r0, [r3, #0]
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	4616      	mov	r6, r2
 800fb30:	6123      	str	r3, [r4, #16]
 800fb32:	e7ba      	b.n	800faaa <_printf_i+0x152>
 800fb34:	680b      	ldr	r3, [r1, #0]
 800fb36:	1d1a      	adds	r2, r3, #4
 800fb38:	600a      	str	r2, [r1, #0]
 800fb3a:	681e      	ldr	r6, [r3, #0]
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	4630      	mov	r0, r6
 800fb40:	6862      	ldr	r2, [r4, #4]
 800fb42:	f000 fa9d 	bl	8010080 <memchr>
 800fb46:	b108      	cbz	r0, 800fb4c <_printf_i+0x1f4>
 800fb48:	1b80      	subs	r0, r0, r6
 800fb4a:	6060      	str	r0, [r4, #4]
 800fb4c:	6863      	ldr	r3, [r4, #4]
 800fb4e:	6123      	str	r3, [r4, #16]
 800fb50:	2300      	movs	r3, #0
 800fb52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb56:	e7a8      	b.n	800faaa <_printf_i+0x152>
 800fb58:	4632      	mov	r2, r6
 800fb5a:	4649      	mov	r1, r9
 800fb5c:	4640      	mov	r0, r8
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	47d0      	blx	sl
 800fb62:	3001      	adds	r0, #1
 800fb64:	d0ab      	beq.n	800fabe <_printf_i+0x166>
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	079b      	lsls	r3, r3, #30
 800fb6a:	d413      	bmi.n	800fb94 <_printf_i+0x23c>
 800fb6c:	68e0      	ldr	r0, [r4, #12]
 800fb6e:	9b03      	ldr	r3, [sp, #12]
 800fb70:	4298      	cmp	r0, r3
 800fb72:	bfb8      	it	lt
 800fb74:	4618      	movlt	r0, r3
 800fb76:	e7a4      	b.n	800fac2 <_printf_i+0x16a>
 800fb78:	2301      	movs	r3, #1
 800fb7a:	4632      	mov	r2, r6
 800fb7c:	4649      	mov	r1, r9
 800fb7e:	4640      	mov	r0, r8
 800fb80:	47d0      	blx	sl
 800fb82:	3001      	adds	r0, #1
 800fb84:	d09b      	beq.n	800fabe <_printf_i+0x166>
 800fb86:	3501      	adds	r5, #1
 800fb88:	68e3      	ldr	r3, [r4, #12]
 800fb8a:	9903      	ldr	r1, [sp, #12]
 800fb8c:	1a5b      	subs	r3, r3, r1
 800fb8e:	42ab      	cmp	r3, r5
 800fb90:	dcf2      	bgt.n	800fb78 <_printf_i+0x220>
 800fb92:	e7eb      	b.n	800fb6c <_printf_i+0x214>
 800fb94:	2500      	movs	r5, #0
 800fb96:	f104 0619 	add.w	r6, r4, #25
 800fb9a:	e7f5      	b.n	800fb88 <_printf_i+0x230>
 800fb9c:	08012665 	.word	0x08012665
 800fba0:	08012676 	.word	0x08012676

0800fba4 <_sbrk_r>:
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	2300      	movs	r3, #0
 800fba8:	4d05      	ldr	r5, [pc, #20]	; (800fbc0 <_sbrk_r+0x1c>)
 800fbaa:	4604      	mov	r4, r0
 800fbac:	4608      	mov	r0, r1
 800fbae:	602b      	str	r3, [r5, #0]
 800fbb0:	f7f1 f92a 	bl	8000e08 <_sbrk>
 800fbb4:	1c43      	adds	r3, r0, #1
 800fbb6:	d102      	bne.n	800fbbe <_sbrk_r+0x1a>
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	b103      	cbz	r3, 800fbbe <_sbrk_r+0x1a>
 800fbbc:	6023      	str	r3, [r4, #0]
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}
 800fbc0:	20007168 	.word	0x20007168

0800fbc4 <__sread>:
 800fbc4:	b510      	push	{r4, lr}
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbcc:	f000 fa72 	bl	80100b4 <_read_r>
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	bfab      	itete	ge
 800fbd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbd6:	89a3      	ldrhlt	r3, [r4, #12]
 800fbd8:	181b      	addge	r3, r3, r0
 800fbda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbde:	bfac      	ite	ge
 800fbe0:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbe2:	81a3      	strhlt	r3, [r4, #12]
 800fbe4:	bd10      	pop	{r4, pc}

0800fbe6 <__swrite>:
 800fbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbea:	461f      	mov	r7, r3
 800fbec:	898b      	ldrh	r3, [r1, #12]
 800fbee:	4605      	mov	r5, r0
 800fbf0:	05db      	lsls	r3, r3, #23
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	4616      	mov	r6, r2
 800fbf6:	d505      	bpl.n	800fc04 <__swrite+0x1e>
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc00:	f000 f9c8 	bl	800ff94 <_lseek_r>
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	4632      	mov	r2, r6
 800fc08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc0c:	81a3      	strh	r3, [r4, #12]
 800fc0e:	4628      	mov	r0, r5
 800fc10:	463b      	mov	r3, r7
 800fc12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1a:	f000 b869 	b.w	800fcf0 <_write_r>

0800fc1e <__sseek>:
 800fc1e:	b510      	push	{r4, lr}
 800fc20:	460c      	mov	r4, r1
 800fc22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc26:	f000 f9b5 	bl	800ff94 <_lseek_r>
 800fc2a:	1c43      	adds	r3, r0, #1
 800fc2c:	89a3      	ldrh	r3, [r4, #12]
 800fc2e:	bf15      	itete	ne
 800fc30:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc3a:	81a3      	strheq	r3, [r4, #12]
 800fc3c:	bf18      	it	ne
 800fc3e:	81a3      	strhne	r3, [r4, #12]
 800fc40:	bd10      	pop	{r4, pc}

0800fc42 <__sclose>:
 800fc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc46:	f000 b8d3 	b.w	800fdf0 <_close_r>
	...

0800fc4c <__swbuf_r>:
 800fc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4e:	460e      	mov	r6, r1
 800fc50:	4614      	mov	r4, r2
 800fc52:	4605      	mov	r5, r0
 800fc54:	b118      	cbz	r0, 800fc5e <__swbuf_r+0x12>
 800fc56:	6983      	ldr	r3, [r0, #24]
 800fc58:	b90b      	cbnz	r3, 800fc5e <__swbuf_r+0x12>
 800fc5a:	f7ff fb6f 	bl	800f33c <__sinit>
 800fc5e:	4b21      	ldr	r3, [pc, #132]	; (800fce4 <__swbuf_r+0x98>)
 800fc60:	429c      	cmp	r4, r3
 800fc62:	d12b      	bne.n	800fcbc <__swbuf_r+0x70>
 800fc64:	686c      	ldr	r4, [r5, #4]
 800fc66:	69a3      	ldr	r3, [r4, #24]
 800fc68:	60a3      	str	r3, [r4, #8]
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	071a      	lsls	r2, r3, #28
 800fc6e:	d52f      	bpl.n	800fcd0 <__swbuf_r+0x84>
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	b36b      	cbz	r3, 800fcd0 <__swbuf_r+0x84>
 800fc74:	6923      	ldr	r3, [r4, #16]
 800fc76:	6820      	ldr	r0, [r4, #0]
 800fc78:	b2f6      	uxtb	r6, r6
 800fc7a:	1ac0      	subs	r0, r0, r3
 800fc7c:	6963      	ldr	r3, [r4, #20]
 800fc7e:	4637      	mov	r7, r6
 800fc80:	4283      	cmp	r3, r0
 800fc82:	dc04      	bgt.n	800fc8e <__swbuf_r+0x42>
 800fc84:	4621      	mov	r1, r4
 800fc86:	4628      	mov	r0, r5
 800fc88:	f000 f948 	bl	800ff1c <_fflush_r>
 800fc8c:	bb30      	cbnz	r0, 800fcdc <__swbuf_r+0x90>
 800fc8e:	68a3      	ldr	r3, [r4, #8]
 800fc90:	3001      	adds	r0, #1
 800fc92:	3b01      	subs	r3, #1
 800fc94:	60a3      	str	r3, [r4, #8]
 800fc96:	6823      	ldr	r3, [r4, #0]
 800fc98:	1c5a      	adds	r2, r3, #1
 800fc9a:	6022      	str	r2, [r4, #0]
 800fc9c:	701e      	strb	r6, [r3, #0]
 800fc9e:	6963      	ldr	r3, [r4, #20]
 800fca0:	4283      	cmp	r3, r0
 800fca2:	d004      	beq.n	800fcae <__swbuf_r+0x62>
 800fca4:	89a3      	ldrh	r3, [r4, #12]
 800fca6:	07db      	lsls	r3, r3, #31
 800fca8:	d506      	bpl.n	800fcb8 <__swbuf_r+0x6c>
 800fcaa:	2e0a      	cmp	r6, #10
 800fcac:	d104      	bne.n	800fcb8 <__swbuf_r+0x6c>
 800fcae:	4621      	mov	r1, r4
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	f000 f933 	bl	800ff1c <_fflush_r>
 800fcb6:	b988      	cbnz	r0, 800fcdc <__swbuf_r+0x90>
 800fcb8:	4638      	mov	r0, r7
 800fcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcbc:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <__swbuf_r+0x9c>)
 800fcbe:	429c      	cmp	r4, r3
 800fcc0:	d101      	bne.n	800fcc6 <__swbuf_r+0x7a>
 800fcc2:	68ac      	ldr	r4, [r5, #8]
 800fcc4:	e7cf      	b.n	800fc66 <__swbuf_r+0x1a>
 800fcc6:	4b09      	ldr	r3, [pc, #36]	; (800fcec <__swbuf_r+0xa0>)
 800fcc8:	429c      	cmp	r4, r3
 800fcca:	bf08      	it	eq
 800fccc:	68ec      	ldreq	r4, [r5, #12]
 800fcce:	e7ca      	b.n	800fc66 <__swbuf_r+0x1a>
 800fcd0:	4621      	mov	r1, r4
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	f000 f81e 	bl	800fd14 <__swsetup_r>
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d0cb      	beq.n	800fc74 <__swbuf_r+0x28>
 800fcdc:	f04f 37ff 	mov.w	r7, #4294967295
 800fce0:	e7ea      	b.n	800fcb8 <__swbuf_r+0x6c>
 800fce2:	bf00      	nop
 800fce4:	08012614 	.word	0x08012614
 800fce8:	08012634 	.word	0x08012634
 800fcec:	080125f4 	.word	0x080125f4

0800fcf0 <_write_r>:
 800fcf0:	b538      	push	{r3, r4, r5, lr}
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	4608      	mov	r0, r1
 800fcf6:	4611      	mov	r1, r2
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	4d05      	ldr	r5, [pc, #20]	; (800fd10 <_write_r+0x20>)
 800fcfc:	602a      	str	r2, [r5, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	f7f1 f836 	bl	8000d70 <_write>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_write_r+0x1e>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_write_r+0x1e>
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	20007168 	.word	0x20007168

0800fd14 <__swsetup_r>:
 800fd14:	4b32      	ldr	r3, [pc, #200]	; (800fde0 <__swsetup_r+0xcc>)
 800fd16:	b570      	push	{r4, r5, r6, lr}
 800fd18:	681d      	ldr	r5, [r3, #0]
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	b125      	cbz	r5, 800fd2a <__swsetup_r+0x16>
 800fd20:	69ab      	ldr	r3, [r5, #24]
 800fd22:	b913      	cbnz	r3, 800fd2a <__swsetup_r+0x16>
 800fd24:	4628      	mov	r0, r5
 800fd26:	f7ff fb09 	bl	800f33c <__sinit>
 800fd2a:	4b2e      	ldr	r3, [pc, #184]	; (800fde4 <__swsetup_r+0xd0>)
 800fd2c:	429c      	cmp	r4, r3
 800fd2e:	d10f      	bne.n	800fd50 <__swsetup_r+0x3c>
 800fd30:	686c      	ldr	r4, [r5, #4]
 800fd32:	89a3      	ldrh	r3, [r4, #12]
 800fd34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd38:	0719      	lsls	r1, r3, #28
 800fd3a:	d42c      	bmi.n	800fd96 <__swsetup_r+0x82>
 800fd3c:	06dd      	lsls	r5, r3, #27
 800fd3e:	d411      	bmi.n	800fd64 <__swsetup_r+0x50>
 800fd40:	2309      	movs	r3, #9
 800fd42:	6033      	str	r3, [r6, #0]
 800fd44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd48:	f04f 30ff 	mov.w	r0, #4294967295
 800fd4c:	81a3      	strh	r3, [r4, #12]
 800fd4e:	e03e      	b.n	800fdce <__swsetup_r+0xba>
 800fd50:	4b25      	ldr	r3, [pc, #148]	; (800fde8 <__swsetup_r+0xd4>)
 800fd52:	429c      	cmp	r4, r3
 800fd54:	d101      	bne.n	800fd5a <__swsetup_r+0x46>
 800fd56:	68ac      	ldr	r4, [r5, #8]
 800fd58:	e7eb      	b.n	800fd32 <__swsetup_r+0x1e>
 800fd5a:	4b24      	ldr	r3, [pc, #144]	; (800fdec <__swsetup_r+0xd8>)
 800fd5c:	429c      	cmp	r4, r3
 800fd5e:	bf08      	it	eq
 800fd60:	68ec      	ldreq	r4, [r5, #12]
 800fd62:	e7e6      	b.n	800fd32 <__swsetup_r+0x1e>
 800fd64:	0758      	lsls	r0, r3, #29
 800fd66:	d512      	bpl.n	800fd8e <__swsetup_r+0x7a>
 800fd68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd6a:	b141      	cbz	r1, 800fd7e <__swsetup_r+0x6a>
 800fd6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <__swsetup_r+0x66>
 800fd74:	4630      	mov	r0, r6
 800fd76:	f7ff fb81 	bl	800f47c <_free_r>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6363      	str	r3, [r4, #52]	; 0x34
 800fd7e:	89a3      	ldrh	r3, [r4, #12]
 800fd80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd84:	81a3      	strh	r3, [r4, #12]
 800fd86:	2300      	movs	r3, #0
 800fd88:	6063      	str	r3, [r4, #4]
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	f043 0308 	orr.w	r3, r3, #8
 800fd94:	81a3      	strh	r3, [r4, #12]
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	b94b      	cbnz	r3, 800fdae <__swsetup_r+0x9a>
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fda0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fda4:	d003      	beq.n	800fdae <__swsetup_r+0x9a>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4630      	mov	r0, r6
 800fdaa:	f000 f929 	bl	8010000 <__smakebuf_r>
 800fdae:	89a0      	ldrh	r0, [r4, #12]
 800fdb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdb4:	f010 0301 	ands.w	r3, r0, #1
 800fdb8:	d00a      	beq.n	800fdd0 <__swsetup_r+0xbc>
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60a3      	str	r3, [r4, #8]
 800fdbe:	6963      	ldr	r3, [r4, #20]
 800fdc0:	425b      	negs	r3, r3
 800fdc2:	61a3      	str	r3, [r4, #24]
 800fdc4:	6923      	ldr	r3, [r4, #16]
 800fdc6:	b943      	cbnz	r3, 800fdda <__swsetup_r+0xc6>
 800fdc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fdcc:	d1ba      	bne.n	800fd44 <__swsetup_r+0x30>
 800fdce:	bd70      	pop	{r4, r5, r6, pc}
 800fdd0:	0781      	lsls	r1, r0, #30
 800fdd2:	bf58      	it	pl
 800fdd4:	6963      	ldrpl	r3, [r4, #20]
 800fdd6:	60a3      	str	r3, [r4, #8]
 800fdd8:	e7f4      	b.n	800fdc4 <__swsetup_r+0xb0>
 800fdda:	2000      	movs	r0, #0
 800fddc:	e7f7      	b.n	800fdce <__swsetup_r+0xba>
 800fdde:	bf00      	nop
 800fde0:	20000018 	.word	0x20000018
 800fde4:	08012614 	.word	0x08012614
 800fde8:	08012634 	.word	0x08012634
 800fdec:	080125f4 	.word	0x080125f4

0800fdf0 <_close_r>:
 800fdf0:	b538      	push	{r3, r4, r5, lr}
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	4d05      	ldr	r5, [pc, #20]	; (800fe0c <_close_r+0x1c>)
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	4608      	mov	r0, r1
 800fdfa:	602b      	str	r3, [r5, #0]
 800fdfc:	f7f0 ffd4 	bl	8000da8 <_close>
 800fe00:	1c43      	adds	r3, r0, #1
 800fe02:	d102      	bne.n	800fe0a <_close_r+0x1a>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	b103      	cbz	r3, 800fe0a <_close_r+0x1a>
 800fe08:	6023      	str	r3, [r4, #0]
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}
 800fe0c:	20007168 	.word	0x20007168

0800fe10 <__sflush_r>:
 800fe10:	898a      	ldrh	r2, [r1, #12]
 800fe12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe16:	4605      	mov	r5, r0
 800fe18:	0710      	lsls	r0, r2, #28
 800fe1a:	460c      	mov	r4, r1
 800fe1c:	d458      	bmi.n	800fed0 <__sflush_r+0xc0>
 800fe1e:	684b      	ldr	r3, [r1, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	dc05      	bgt.n	800fe30 <__sflush_r+0x20>
 800fe24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	dc02      	bgt.n	800fe30 <__sflush_r+0x20>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe32:	2e00      	cmp	r6, #0
 800fe34:	d0f9      	beq.n	800fe2a <__sflush_r+0x1a>
 800fe36:	2300      	movs	r3, #0
 800fe38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe3c:	682f      	ldr	r7, [r5, #0]
 800fe3e:	602b      	str	r3, [r5, #0]
 800fe40:	d032      	beq.n	800fea8 <__sflush_r+0x98>
 800fe42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe44:	89a3      	ldrh	r3, [r4, #12]
 800fe46:	075a      	lsls	r2, r3, #29
 800fe48:	d505      	bpl.n	800fe56 <__sflush_r+0x46>
 800fe4a:	6863      	ldr	r3, [r4, #4]
 800fe4c:	1ac0      	subs	r0, r0, r3
 800fe4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe50:	b10b      	cbz	r3, 800fe56 <__sflush_r+0x46>
 800fe52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe54:	1ac0      	subs	r0, r0, r3
 800fe56:	2300      	movs	r3, #0
 800fe58:	4602      	mov	r2, r0
 800fe5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe5c:	4628      	mov	r0, r5
 800fe5e:	6a21      	ldr	r1, [r4, #32]
 800fe60:	47b0      	blx	r6
 800fe62:	1c43      	adds	r3, r0, #1
 800fe64:	89a3      	ldrh	r3, [r4, #12]
 800fe66:	d106      	bne.n	800fe76 <__sflush_r+0x66>
 800fe68:	6829      	ldr	r1, [r5, #0]
 800fe6a:	291d      	cmp	r1, #29
 800fe6c:	d82c      	bhi.n	800fec8 <__sflush_r+0xb8>
 800fe6e:	4a2a      	ldr	r2, [pc, #168]	; (800ff18 <__sflush_r+0x108>)
 800fe70:	40ca      	lsrs	r2, r1
 800fe72:	07d6      	lsls	r6, r2, #31
 800fe74:	d528      	bpl.n	800fec8 <__sflush_r+0xb8>
 800fe76:	2200      	movs	r2, #0
 800fe78:	6062      	str	r2, [r4, #4]
 800fe7a:	6922      	ldr	r2, [r4, #16]
 800fe7c:	04d9      	lsls	r1, r3, #19
 800fe7e:	6022      	str	r2, [r4, #0]
 800fe80:	d504      	bpl.n	800fe8c <__sflush_r+0x7c>
 800fe82:	1c42      	adds	r2, r0, #1
 800fe84:	d101      	bne.n	800fe8a <__sflush_r+0x7a>
 800fe86:	682b      	ldr	r3, [r5, #0]
 800fe88:	b903      	cbnz	r3, 800fe8c <__sflush_r+0x7c>
 800fe8a:	6560      	str	r0, [r4, #84]	; 0x54
 800fe8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe8e:	602f      	str	r7, [r5, #0]
 800fe90:	2900      	cmp	r1, #0
 800fe92:	d0ca      	beq.n	800fe2a <__sflush_r+0x1a>
 800fe94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe98:	4299      	cmp	r1, r3
 800fe9a:	d002      	beq.n	800fea2 <__sflush_r+0x92>
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	f7ff faed 	bl	800f47c <_free_r>
 800fea2:	2000      	movs	r0, #0
 800fea4:	6360      	str	r0, [r4, #52]	; 0x34
 800fea6:	e7c1      	b.n	800fe2c <__sflush_r+0x1c>
 800fea8:	6a21      	ldr	r1, [r4, #32]
 800feaa:	2301      	movs	r3, #1
 800feac:	4628      	mov	r0, r5
 800feae:	47b0      	blx	r6
 800feb0:	1c41      	adds	r1, r0, #1
 800feb2:	d1c7      	bne.n	800fe44 <__sflush_r+0x34>
 800feb4:	682b      	ldr	r3, [r5, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d0c4      	beq.n	800fe44 <__sflush_r+0x34>
 800feba:	2b1d      	cmp	r3, #29
 800febc:	d001      	beq.n	800fec2 <__sflush_r+0xb2>
 800febe:	2b16      	cmp	r3, #22
 800fec0:	d101      	bne.n	800fec6 <__sflush_r+0xb6>
 800fec2:	602f      	str	r7, [r5, #0]
 800fec4:	e7b1      	b.n	800fe2a <__sflush_r+0x1a>
 800fec6:	89a3      	ldrh	r3, [r4, #12]
 800fec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fecc:	81a3      	strh	r3, [r4, #12]
 800fece:	e7ad      	b.n	800fe2c <__sflush_r+0x1c>
 800fed0:	690f      	ldr	r7, [r1, #16]
 800fed2:	2f00      	cmp	r7, #0
 800fed4:	d0a9      	beq.n	800fe2a <__sflush_r+0x1a>
 800fed6:	0793      	lsls	r3, r2, #30
 800fed8:	bf18      	it	ne
 800feda:	2300      	movne	r3, #0
 800fedc:	680e      	ldr	r6, [r1, #0]
 800fede:	bf08      	it	eq
 800fee0:	694b      	ldreq	r3, [r1, #20]
 800fee2:	eba6 0807 	sub.w	r8, r6, r7
 800fee6:	600f      	str	r7, [r1, #0]
 800fee8:	608b      	str	r3, [r1, #8]
 800feea:	f1b8 0f00 	cmp.w	r8, #0
 800feee:	dd9c      	ble.n	800fe2a <__sflush_r+0x1a>
 800fef0:	4643      	mov	r3, r8
 800fef2:	463a      	mov	r2, r7
 800fef4:	4628      	mov	r0, r5
 800fef6:	6a21      	ldr	r1, [r4, #32]
 800fef8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fefa:	47b0      	blx	r6
 800fefc:	2800      	cmp	r0, #0
 800fefe:	dc06      	bgt.n	800ff0e <__sflush_r+0xfe>
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	f04f 30ff 	mov.w	r0, #4294967295
 800ff06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff0a:	81a3      	strh	r3, [r4, #12]
 800ff0c:	e78e      	b.n	800fe2c <__sflush_r+0x1c>
 800ff0e:	4407      	add	r7, r0
 800ff10:	eba8 0800 	sub.w	r8, r8, r0
 800ff14:	e7e9      	b.n	800feea <__sflush_r+0xda>
 800ff16:	bf00      	nop
 800ff18:	20400001 	.word	0x20400001

0800ff1c <_fflush_r>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	690b      	ldr	r3, [r1, #16]
 800ff20:	4605      	mov	r5, r0
 800ff22:	460c      	mov	r4, r1
 800ff24:	b913      	cbnz	r3, 800ff2c <_fflush_r+0x10>
 800ff26:	2500      	movs	r5, #0
 800ff28:	4628      	mov	r0, r5
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	b118      	cbz	r0, 800ff36 <_fflush_r+0x1a>
 800ff2e:	6983      	ldr	r3, [r0, #24]
 800ff30:	b90b      	cbnz	r3, 800ff36 <_fflush_r+0x1a>
 800ff32:	f7ff fa03 	bl	800f33c <__sinit>
 800ff36:	4b14      	ldr	r3, [pc, #80]	; (800ff88 <_fflush_r+0x6c>)
 800ff38:	429c      	cmp	r4, r3
 800ff3a:	d11b      	bne.n	800ff74 <_fflush_r+0x58>
 800ff3c:	686c      	ldr	r4, [r5, #4]
 800ff3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d0ef      	beq.n	800ff26 <_fflush_r+0xa>
 800ff46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff48:	07d0      	lsls	r0, r2, #31
 800ff4a:	d404      	bmi.n	800ff56 <_fflush_r+0x3a>
 800ff4c:	0599      	lsls	r1, r3, #22
 800ff4e:	d402      	bmi.n	800ff56 <_fflush_r+0x3a>
 800ff50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff52:	f7ff fa91 	bl	800f478 <__retarget_lock_acquire_recursive>
 800ff56:	4628      	mov	r0, r5
 800ff58:	4621      	mov	r1, r4
 800ff5a:	f7ff ff59 	bl	800fe10 <__sflush_r>
 800ff5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff60:	4605      	mov	r5, r0
 800ff62:	07da      	lsls	r2, r3, #31
 800ff64:	d4e0      	bmi.n	800ff28 <_fflush_r+0xc>
 800ff66:	89a3      	ldrh	r3, [r4, #12]
 800ff68:	059b      	lsls	r3, r3, #22
 800ff6a:	d4dd      	bmi.n	800ff28 <_fflush_r+0xc>
 800ff6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff6e:	f7ff fa84 	bl	800f47a <__retarget_lock_release_recursive>
 800ff72:	e7d9      	b.n	800ff28 <_fflush_r+0xc>
 800ff74:	4b05      	ldr	r3, [pc, #20]	; (800ff8c <_fflush_r+0x70>)
 800ff76:	429c      	cmp	r4, r3
 800ff78:	d101      	bne.n	800ff7e <_fflush_r+0x62>
 800ff7a:	68ac      	ldr	r4, [r5, #8]
 800ff7c:	e7df      	b.n	800ff3e <_fflush_r+0x22>
 800ff7e:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <_fflush_r+0x74>)
 800ff80:	429c      	cmp	r4, r3
 800ff82:	bf08      	it	eq
 800ff84:	68ec      	ldreq	r4, [r5, #12]
 800ff86:	e7da      	b.n	800ff3e <_fflush_r+0x22>
 800ff88:	08012614 	.word	0x08012614
 800ff8c:	08012634 	.word	0x08012634
 800ff90:	080125f4 	.word	0x080125f4

0800ff94 <_lseek_r>:
 800ff94:	b538      	push	{r3, r4, r5, lr}
 800ff96:	4604      	mov	r4, r0
 800ff98:	4608      	mov	r0, r1
 800ff9a:	4611      	mov	r1, r2
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	4d05      	ldr	r5, [pc, #20]	; (800ffb4 <_lseek_r+0x20>)
 800ffa0:	602a      	str	r2, [r5, #0]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	f7f0 ff24 	bl	8000df0 <_lseek>
 800ffa8:	1c43      	adds	r3, r0, #1
 800ffaa:	d102      	bne.n	800ffb2 <_lseek_r+0x1e>
 800ffac:	682b      	ldr	r3, [r5, #0]
 800ffae:	b103      	cbz	r3, 800ffb2 <_lseek_r+0x1e>
 800ffb0:	6023      	str	r3, [r4, #0]
 800ffb2:	bd38      	pop	{r3, r4, r5, pc}
 800ffb4:	20007168 	.word	0x20007168

0800ffb8 <__swhatbuf_r>:
 800ffb8:	b570      	push	{r4, r5, r6, lr}
 800ffba:	460e      	mov	r6, r1
 800ffbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc0:	4614      	mov	r4, r2
 800ffc2:	2900      	cmp	r1, #0
 800ffc4:	461d      	mov	r5, r3
 800ffc6:	b096      	sub	sp, #88	; 0x58
 800ffc8:	da07      	bge.n	800ffda <__swhatbuf_r+0x22>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	602b      	str	r3, [r5, #0]
 800ffce:	89b3      	ldrh	r3, [r6, #12]
 800ffd0:	061a      	lsls	r2, r3, #24
 800ffd2:	d410      	bmi.n	800fff6 <__swhatbuf_r+0x3e>
 800ffd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffd8:	e00e      	b.n	800fff8 <__swhatbuf_r+0x40>
 800ffda:	466a      	mov	r2, sp
 800ffdc:	f000 f87c 	bl	80100d8 <_fstat_r>
 800ffe0:	2800      	cmp	r0, #0
 800ffe2:	dbf2      	blt.n	800ffca <__swhatbuf_r+0x12>
 800ffe4:	9a01      	ldr	r2, [sp, #4]
 800ffe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffee:	425a      	negs	r2, r3
 800fff0:	415a      	adcs	r2, r3
 800fff2:	602a      	str	r2, [r5, #0]
 800fff4:	e7ee      	b.n	800ffd4 <__swhatbuf_r+0x1c>
 800fff6:	2340      	movs	r3, #64	; 0x40
 800fff8:	2000      	movs	r0, #0
 800fffa:	6023      	str	r3, [r4, #0]
 800fffc:	b016      	add	sp, #88	; 0x58
 800fffe:	bd70      	pop	{r4, r5, r6, pc}

08010000 <__smakebuf_r>:
 8010000:	898b      	ldrh	r3, [r1, #12]
 8010002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010004:	079d      	lsls	r5, r3, #30
 8010006:	4606      	mov	r6, r0
 8010008:	460c      	mov	r4, r1
 801000a:	d507      	bpl.n	801001c <__smakebuf_r+0x1c>
 801000c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	6123      	str	r3, [r4, #16]
 8010014:	2301      	movs	r3, #1
 8010016:	6163      	str	r3, [r4, #20]
 8010018:	b002      	add	sp, #8
 801001a:	bd70      	pop	{r4, r5, r6, pc}
 801001c:	466a      	mov	r2, sp
 801001e:	ab01      	add	r3, sp, #4
 8010020:	f7ff ffca 	bl	800ffb8 <__swhatbuf_r>
 8010024:	9900      	ldr	r1, [sp, #0]
 8010026:	4605      	mov	r5, r0
 8010028:	4630      	mov	r0, r6
 801002a:	f7ff fa73 	bl	800f514 <_malloc_r>
 801002e:	b948      	cbnz	r0, 8010044 <__smakebuf_r+0x44>
 8010030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010034:	059a      	lsls	r2, r3, #22
 8010036:	d4ef      	bmi.n	8010018 <__smakebuf_r+0x18>
 8010038:	f023 0303 	bic.w	r3, r3, #3
 801003c:	f043 0302 	orr.w	r3, r3, #2
 8010040:	81a3      	strh	r3, [r4, #12]
 8010042:	e7e3      	b.n	801000c <__smakebuf_r+0xc>
 8010044:	4b0d      	ldr	r3, [pc, #52]	; (801007c <__smakebuf_r+0x7c>)
 8010046:	62b3      	str	r3, [r6, #40]	; 0x28
 8010048:	89a3      	ldrh	r3, [r4, #12]
 801004a:	6020      	str	r0, [r4, #0]
 801004c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010050:	81a3      	strh	r3, [r4, #12]
 8010052:	9b00      	ldr	r3, [sp, #0]
 8010054:	6120      	str	r0, [r4, #16]
 8010056:	6163      	str	r3, [r4, #20]
 8010058:	9b01      	ldr	r3, [sp, #4]
 801005a:	b15b      	cbz	r3, 8010074 <__smakebuf_r+0x74>
 801005c:	4630      	mov	r0, r6
 801005e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010062:	f000 f84b 	bl	80100fc <_isatty_r>
 8010066:	b128      	cbz	r0, 8010074 <__smakebuf_r+0x74>
 8010068:	89a3      	ldrh	r3, [r4, #12]
 801006a:	f023 0303 	bic.w	r3, r3, #3
 801006e:	f043 0301 	orr.w	r3, r3, #1
 8010072:	81a3      	strh	r3, [r4, #12]
 8010074:	89a0      	ldrh	r0, [r4, #12]
 8010076:	4305      	orrs	r5, r0
 8010078:	81a5      	strh	r5, [r4, #12]
 801007a:	e7cd      	b.n	8010018 <__smakebuf_r+0x18>
 801007c:	0800f2d5 	.word	0x0800f2d5

08010080 <memchr>:
 8010080:	4603      	mov	r3, r0
 8010082:	b510      	push	{r4, lr}
 8010084:	b2c9      	uxtb	r1, r1
 8010086:	4402      	add	r2, r0
 8010088:	4293      	cmp	r3, r2
 801008a:	4618      	mov	r0, r3
 801008c:	d101      	bne.n	8010092 <memchr+0x12>
 801008e:	2000      	movs	r0, #0
 8010090:	e003      	b.n	801009a <memchr+0x1a>
 8010092:	7804      	ldrb	r4, [r0, #0]
 8010094:	3301      	adds	r3, #1
 8010096:	428c      	cmp	r4, r1
 8010098:	d1f6      	bne.n	8010088 <memchr+0x8>
 801009a:	bd10      	pop	{r4, pc}

0801009c <__malloc_lock>:
 801009c:	4801      	ldr	r0, [pc, #4]	; (80100a4 <__malloc_lock+0x8>)
 801009e:	f7ff b9eb 	b.w	800f478 <__retarget_lock_acquire_recursive>
 80100a2:	bf00      	nop
 80100a4:	20007170 	.word	0x20007170

080100a8 <__malloc_unlock>:
 80100a8:	4801      	ldr	r0, [pc, #4]	; (80100b0 <__malloc_unlock+0x8>)
 80100aa:	f7ff b9e6 	b.w	800f47a <__retarget_lock_release_recursive>
 80100ae:	bf00      	nop
 80100b0:	20007170 	.word	0x20007170

080100b4 <_read_r>:
 80100b4:	b538      	push	{r3, r4, r5, lr}
 80100b6:	4604      	mov	r4, r0
 80100b8:	4608      	mov	r0, r1
 80100ba:	4611      	mov	r1, r2
 80100bc:	2200      	movs	r2, #0
 80100be:	4d05      	ldr	r5, [pc, #20]	; (80100d4 <_read_r+0x20>)
 80100c0:	602a      	str	r2, [r5, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	f7f0 fe37 	bl	8000d36 <_read>
 80100c8:	1c43      	adds	r3, r0, #1
 80100ca:	d102      	bne.n	80100d2 <_read_r+0x1e>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	b103      	cbz	r3, 80100d2 <_read_r+0x1e>
 80100d0:	6023      	str	r3, [r4, #0]
 80100d2:	bd38      	pop	{r3, r4, r5, pc}
 80100d4:	20007168 	.word	0x20007168

080100d8 <_fstat_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	2300      	movs	r3, #0
 80100dc:	4d06      	ldr	r5, [pc, #24]	; (80100f8 <_fstat_r+0x20>)
 80100de:	4604      	mov	r4, r0
 80100e0:	4608      	mov	r0, r1
 80100e2:	4611      	mov	r1, r2
 80100e4:	602b      	str	r3, [r5, #0]
 80100e6:	f7f0 fe6a 	bl	8000dbe <_fstat>
 80100ea:	1c43      	adds	r3, r0, #1
 80100ec:	d102      	bne.n	80100f4 <_fstat_r+0x1c>
 80100ee:	682b      	ldr	r3, [r5, #0]
 80100f0:	b103      	cbz	r3, 80100f4 <_fstat_r+0x1c>
 80100f2:	6023      	str	r3, [r4, #0]
 80100f4:	bd38      	pop	{r3, r4, r5, pc}
 80100f6:	bf00      	nop
 80100f8:	20007168 	.word	0x20007168

080100fc <_isatty_r>:
 80100fc:	b538      	push	{r3, r4, r5, lr}
 80100fe:	2300      	movs	r3, #0
 8010100:	4d05      	ldr	r5, [pc, #20]	; (8010118 <_isatty_r+0x1c>)
 8010102:	4604      	mov	r4, r0
 8010104:	4608      	mov	r0, r1
 8010106:	602b      	str	r3, [r5, #0]
 8010108:	f7f0 fe68 	bl	8000ddc <_isatty>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	d102      	bne.n	8010116 <_isatty_r+0x1a>
 8010110:	682b      	ldr	r3, [r5, #0]
 8010112:	b103      	cbz	r3, 8010116 <_isatty_r+0x1a>
 8010114:	6023      	str	r3, [r4, #0]
 8010116:	bd38      	pop	{r3, r4, r5, pc}
 8010118:	20007168 	.word	0x20007168

0801011c <_init>:
 801011c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801011e:	bf00      	nop
 8010120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010122:	bc08      	pop	{r3}
 8010124:	469e      	mov	lr, r3
 8010126:	4770      	bx	lr

08010128 <_fini>:
 8010128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012a:	bf00      	nop
 801012c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801012e:	bc08      	pop	{r3}
 8010130:	469e      	mov	lr, r3
 8010132:	4770      	bx	lr
